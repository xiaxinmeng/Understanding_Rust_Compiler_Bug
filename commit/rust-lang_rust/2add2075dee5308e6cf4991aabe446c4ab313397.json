{"sha": "2add2075dee5308e6cf4991aabe446c4ab313397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZGQyMDc1ZGVlNTMwOGU2Y2Y0OTkxYWFiZTQ0NmM0YWIzMTMzOTc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-14T22:31:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-18T07:41:28Z"}, "message": "Create derive proc-macro for Lift trait.", "tree": {"sha": "bdad69ffea3b816d385badaa8061ee8e733f2c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdad69ffea3b816d385badaa8061ee8e733f2c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2add2075dee5308e6cf4991aabe446c4ab313397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2add2075dee5308e6cf4991aabe446c4ab313397", "html_url": "https://github.com/rust-lang/rust/commit/2add2075dee5308e6cf4991aabe446c4ab313397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2add2075dee5308e6cf4991aabe446c4ab313397/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8014582b843d8722795b06586ef9c2042094963", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8014582b843d8722795b06586ef9c2042094963", "html_url": "https://github.com/rust-lang/rust/commit/d8014582b843d8722795b06586ef9c2042094963"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "dce3820d2842ca53f6dd501845ce86819350e97e", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2add2075dee5308e6cf4991aabe446c4ab313397/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2add2075dee5308e6cf4991aabe446c4ab313397/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=2add2075dee5308e6cf4991aabe446c4ab313397", "patch": "@@ -10,6 +10,7 @@ use proc_macro::TokenStream;\n \n mod hash_stable;\n mod type_foldable;\n+mod lift;\n mod query;\n mod symbols;\n \n@@ -25,3 +26,4 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n \n decl_derive!([HashStable, attributes(stable_hasher)] => hash_stable::hash_stable_derive);\n decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_foldable_derive);\n+decl_derive!([Lift, attributes(lift)] => lift::lift_derive);"}, {"sha": "8a7734b147ff4666c2db20012fbd48ff87bf6829", "filename": "src/librustc_macros/src/lift.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2add2075dee5308e6cf4991aabe446c4ab313397/src%2Flibrustc_macros%2Fsrc%2Flift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2add2075dee5308e6cf4991aabe446c4ab313397/src%2Flibrustc_macros%2Fsrc%2Flift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flift.rs?ref=2add2075dee5308e6cf4991aabe446c4ab313397", "patch": "@@ -0,0 +1,50 @@\n+use synstructure;\n+use syn::{self, parse_quote};\n+use proc_macro2;\n+use quote::quote;\n+\n+pub fn lift_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n+    s.add_bounds(synstructure::AddBounds::Generics);\n+\n+    let tcx: syn::Lifetime = parse_quote!('tcx);\n+    let newtcx: syn::GenericParam = parse_quote!('__newtcx);\n+\n+    let lifted = {\n+        let ast = s.ast();\n+        let ident = &ast.ident;\n+\n+        // Replace `'tcx` lifetime by the `'__newtcx` lifetime\n+        let (_, generics, _) = ast.generics.split_for_impl();\n+        let mut generics : syn::AngleBracketedGenericArguments = syn::parse_quote!{ #generics };\n+        for arg in generics.args.iter_mut() {\n+            match arg {\n+                syn::GenericArgument::Lifetime(l) if *l == tcx => {\n+                    *arg = parse_quote!('__newtcx);\n+                },\n+                syn::GenericArgument::Type(t) => {\n+                    *arg = syn::parse_quote!{ #t::Lifted };\n+                },\n+                _ => {},\n+            }\n+        }\n+\n+        quote!{ #ident #generics }\n+    };\n+\n+    let body = s.each_variant(|vi| {\n+        let bindings = &vi.bindings();\n+        vi.construct(|_, index| {\n+            let bi = &bindings[index];\n+            quote!{ __tcx.lift(#bi)?  }\n+        })\n+    });\n+\n+    s.add_impl_generic(newtcx);\n+    s.bound_impl(quote!(::rustc::ty::Lift<'__newtcx>), quote!{\n+        type Lifted = #lifted;\n+\n+        fn lift_to_tcx(&self, __tcx: ::rustc::ty::TyCtxt<'__newtcx>) -> Option<#lifted> {\n+            Some(match *self { #body })\n+        }\n+    })\n+}"}]}