{"sha": "07a81ad12e5cb7f84138af6624f30c5dbb75512f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YTgxYWQxMmU1Y2I3Zjg0MTM4YWY2NjI0ZjMwYzVkYmI3NTUxMmY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-26T23:25:52Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-13T21:47:04Z"}, "message": "Refactor how impl self types are stored\n\nIn order to avoid a confusing use of the tcache, I added an extra\nnode ID field to trait refs. Now trait refs have a \"ref ID\" (the one\nthat resolve3 resolves) and an \"impl ID\" (the one that you look up\nin the tcache to get the self type).\n\nCloses #2434", "tree": {"sha": "919cac823330022fbbf5bc5130c29901278ab22f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919cac823330022fbbf5bc5130c29901278ab22f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a81ad12e5cb7f84138af6624f30c5dbb75512f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a81ad12e5cb7f84138af6624f30c5dbb75512f", "html_url": "https://github.com/rust-lang/rust/commit/07a81ad12e5cb7f84138af6624f30c5dbb75512f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a81ad12e5cb7f84138af6624f30c5dbb75512f/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee73b78e04860f0e4312e462c80ab8a6d37cd759", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee73b78e04860f0e4312e462c80ab8a6d37cd759", "html_url": "https://github.com/rust-lang/rust/commit/ee73b78e04860f0e4312e462c80ab8a6d37cd759"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "095038f02e3db8e323cffaa8d351c936952174bd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -675,10 +675,15 @@ type attribute_ = {style: attr_style, value: meta_item, is_sugared_doc: bool};\n \n /*\n   trait_refs appear in both impls and in classes that implement traits.\n-  resolve maps each trait_ref's id to its defining trait.\n+  resolve maps each trait_ref's ref_id to its defining trait; that's all\n+  that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n+  If this impl is an item_impl, the impl_id is redundant (it could be the\n+  same as the impl's node id). If this impl is actually an impl_class, then\n+  conceptually, the impl_id stands in for the pair of (this class, this\n+  trait)\n  */\n #[auto_serialize]\n-type trait_ref = {path: @path, id: node_id};\n+type trait_ref = {path: @path, ref_id: node_id, impl_id: node_id};\n \n #[auto_serialize]\n enum visibility { public, private }"}, {"sha": "a5ae45d54eef3ca204c3c6dcb7e39f686f853838", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -188,7 +188,7 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n     let item_path = @/* FIXME (#2543) */ copy cx.path;\n     cx.map.insert(i.id, node_item(i, item_path));\n     alt i.node {\n-      item_impl(_, _, _, ms) {\n+      item_impl(_, opt_ir, _, ms) {\n         let impl_did = ast_util::local_def(i.id);\n         for ms.each |m| {\n             map_method(impl_did, extend(cx, i.ident), m,\n@@ -218,8 +218,14 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n           let (_, ms) = ast_util::split_class_items(items);\n           // Map trait refs to their parent classes. This is\n           // so we can find the self_ty\n-          do vec::iter(traits) |p| { cx.map.insert(p.id,\n-                                  node_item(i, item_path)); };\n+          do vec::iter(traits) |p| { cx.map.insert(p.ref_id,\n+                                  node_item(i, item_path));\n+                            // This is so we can look up the right things when\n+                            // encoding/decoding\n+                            cx.map.insert(p.impl_id,\n+                                          node_item(i, item_path));\n+\n+                           };\n           let d_id = ast_util::local_def(i.id);\n           let p = extend(cx, i.ident);\n            // only need to handle methods"}, {"sha": "f5edb96f5e12472d1b16f728ef3863134c4ff38c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -287,7 +287,8 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n }\n \n fn fold_trait_ref(&&p: @trait_ref, fld: ast_fold) -> @trait_ref {\n-    @{path: fld.fold_path(p.path), id: fld.new_id(p.id)}\n+    @{path: fld.fold_path(p.path), ref_id: fld.new_id(p.ref_id),\n+     impl_id: fld.new_id(p.impl_id)}\n }\n \n fn noop_fold_method(&&m: @method, fld: ast_fold) -> @method {"}, {"sha": "7448f246698e2b94ff2ab26b50ad33a00815ee15", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -2189,7 +2189,7 @@ class parser {\n             if option::is_none(ident) {\n                 ident = some(vec::last(path.idents));\n             }\n-            some(@{path: path, id: self.get_id()})\n+            some(@{path: path, ref_id: self.get_id(), impl_id: self.get_id()})\n         } else { none };\n         let ident = alt ident {\n           some(name) { name }\n@@ -2223,7 +2223,7 @@ class parser {\n \n     fn parse_trait_ref() -> @trait_ref {\n         @{path: self.parse_path_with_tps(false),\n-          id: self.get_id()}\n+          ref_id: self.get_id(), impl_id: self.get_id()}\n     }\n \n     fn parse_trait_ref_list() -> ~[@trait_ref] {"}, {"sha": "12106e5bc4515056d5cb06c661134a0fa1812477", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -227,7 +227,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n \n fn encode_trait_ref(ebml_w: ebml::writer, ecx: @encode_ctxt, t: @trait_ref) {\n     ebml_w.start_tag(tag_impl_trait);\n-    encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, t.id));\n+    encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, t.ref_id));\n     ebml_w.end_tag();\n }\n \n@@ -392,6 +392,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n     encode_family(ebml_w, 'm');\n     encode_name(ebml_w, name);\n     #debug(\"(encoding info for module) encoding info for module ID %d\", id);\n+    // the impl map contains ref_ids\n     let impls = ecx.impl_map(id);\n     for impls.each |i| {\n         let (ident, did) = i;\n@@ -415,6 +416,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n               }\n               none {\n                 // Must be a re-export, then!\n+                // ...or an iface ref\n                 ebml_w.wr_str(def_to_str(did));\n               }\n             };"}, {"sha": "918d278a6f8413c5a851433fe639911c6252c923", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -408,8 +408,11 @@ fn maybe_insert(e: @env, id: node_id, def: option<def>) {\n }\n \n fn resolve_trait_ref(p: @trait_ref, sc: scopes, e: @env) {\n-    maybe_insert(e, p.id,\n+    maybe_insert(e, p.ref_id,\n        lookup_path_strict(*e, sc, p.path.span, p.path, ns_type));\n+    maybe_insert(e, p.impl_id,\n+       lookup_path_strict(*e, sc, p.path.span, p.path, ns_type));\n+\n }\n \n fn resolve_names(e: @env, c: @ast::crate) {\n@@ -440,8 +443,8 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           /* At this point, the code knows what traits the trait refs\n              refer to, so it's possible to resolve them.\n            */\n-          ast::item_impl(_, ifce, _, _) {\n-            ifce.iter(|p| resolve_trait_ref(p, sc, e))\n+          ast::item_impl(_, t, _, _) {\n+            t.iter(|p| resolve_trait_ref(p, sc, e));\n           }\n           ast::item_class(_, traits, _, _, _) {\n             for traits.each |p| {\n@@ -2290,7 +2293,7 @@ fn find_impls_in_item(e: env, i: @ast::item, &impls: ~[@_impl],\n         do vec::iter(ifces) |p| {\n             // The def_id, in this case, identifies the combination of\n             // class and trait\n-            vec::push(impls, @{did: local_def(p.id),\n+            vec::push(impls, @{did: local_def(p.impl_id),\n                                ident: i.ident,\n                                methods: vec::map(mthds, |m| {\n                                    @{did: local_def(m.id),"}, {"sha": "933f23ad103a4148f7c0f04897462e1ec6729210", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -3241,7 +3241,7 @@ class Resolver {\n \n                         #debug(\"(resolving class) found trait def: %?\", def);\n \n-                        self.record_def(interface.id, def);\n+                        self.record_def(interface.ref_id, def);\n \n                         // XXX: This is wrong but is needed for tests to\n                         // pass.\n@@ -3349,7 +3349,7 @@ class Resolver {\n                                                    unknown interface\");\n                         }\n                         some(def) {\n-                            self.record_def(interface_reference.id, def);\n+                            self.record_def(interface_reference.ref_id, def);\n                         }\n                     }\n                 }"}, {"sha": "2dd9f414677ea62605957515febef9394851c8de", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -2549,7 +2549,7 @@ fn impl_trait(cx: ctxt, id: ast::def_id) -> option<t> {\n         #debug(\"(impl_trait) searching for trait impl %?\", id);\n         alt cx.items.find(id.node) {\n            some(ast_map::node_item(@{node: ast::item_impl(\n-               _, some(@{id: id, _}), _, _), _}, _)) {\n+              _, some(@{ref_id: id, _}), _, _), _}, _)) {\n               some(node_id_to_type(cx, id))\n            }\n            some(ast_map::node_item(@{node: ast::item_class(*),"}, {"sha": "4773788593aa43cd2bf28e2c5dc5a32c384f586a", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -128,7 +128,7 @@ class CoherenceChecker {\n             }\n             some(associated_trait) {\n                 let def =\n-                    self.crate_context.tcx.def_map.get(associated_trait.id);\n+                  self.crate_context.tcx.def_map.get(associated_trait.ref_id);\n                 let def_id = def_id_of_def(def);\n \n                 let implementation_list;\n@@ -349,7 +349,7 @@ class CoherenceChecker {\n                                             let def_map = self.crate_context\n                                                 .tcx.def_map;\n                                             let trait_def =\n-                                                def_map.get(trait_ref.id);\n+                                                def_map.get(trait_ref.ref_id);\n                                             let trait_id =\n                                                 def_id_of_def(trait_def);\n                                             if trait_id.crate != local_crate {"}, {"sha": "5d3842e60855f32e7693b77e7e37a9c617641be3", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a81ad12e5cb7f84138af6624f30c5dbb75512f/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=07a81ad12e5cb7f84138af6624f30c5dbb75512f", "patch": "@@ -392,17 +392,9 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         let cms = convert_methods(ccx, methods, rp, bounds, selfty);\n         for traits.each |ifce| {\n             check_methods_against_trait(ccx, tps, rp, selfty, ifce, cms);\n-\n-            // FIXME #2434---this is somewhat bogus, but it seems that\n-            // the id of trait_ref is also the id of the impl, and so\n-            // we want to store the \"self type\" of the impl---in this\n-            // case, the class.  The reason I say this is somewhat\n-            // bogus (and should be refactored) is that the tcache\n-            // stores the class type for ifce.id but the node_type\n-            // table stores the trait type. Weird. Probably just\n-            // adding a \"self type\" table rather than overloading the\n-            // tcache would be ok, or else adding more than one id.\n-            tcx.tcache.insert(local_def(ifce.id), tpt);\n+            // ifce.impl_id represents (class, iface) pair\n+            write_ty_to_tcx(tcx, ifce.impl_id, tpt.ty);\n+            tcx.tcache.insert(local_def(ifce.impl_id), tpt);\n         }\n       }\n       _ {\n@@ -462,9 +454,10 @@ fn instantiate_trait_ref(ccx: @crate_ctxt, t: @ast::trait_ref, rp: bool)\n \n     let rscope = type_rscope(rp);\n \n-    alt lookup_def_tcx(ccx.tcx, t.path.span, t.id) {\n+    alt lookup_def_tcx(ccx.tcx, t.path.span, t.ref_id) {\n       ast::def_ty(t_id) {\n-        let tpt = astconv::ast_path_to_ty(ccx, rscope, t_id, t.path, t.id);\n+        let tpt = astconv::ast_path_to_ty(ccx, rscope, t_id, t.path,\n+                                          t.ref_id);\n         alt ty::get(tpt.ty).struct {\n            ty::ty_trait(*) {\n               (t_id, tpt)"}]}