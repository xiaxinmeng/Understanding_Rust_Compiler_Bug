{"sha": "fd3610ed2eba43ee8ae74838fafee27e1286b73e", "node_id": "C_kwDOAAsO6NoAKGZkMzYxMGVkMmViYTQzZWU4YWU3NDgzOGZhZmVlMjdlMTI4NmI3M2U", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-29T06:40:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-29T06:40:01Z"}, "message": "Rollup merge of #99803 - JohnTitor:update-lazy-docs, r=compiler-errors\n\nUpdate mentions to `rustc_metadata::rmeta::Lazy`\n\nWhile working on https://github.com/rust-lang/rustc-dev-guide/pull/1411, I noticed there are still some mentions of `Lazy`. This updates them to `LazyValue`, `LazyArray`, or `LazyTable`.\n\nr? ````@compiler-errors````\n\nSigned-off-by: Yuki Okushi <jtitor@2k36.org>", "tree": {"sha": "5104c0cb806e20b6e8d12322bdeae0d879f71e69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5104c0cb806e20b6e8d12322bdeae0d879f71e69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd3610ed2eba43ee8ae74838fafee27e1286b73e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi44DCCRBK7hj4Ov3rIwAArvQIAIK7njKVzwezCUzIczQ9fe1j\nVW63kKhrh00l+PhJ/sip35jbKof+hi+s8RYinB5s1WE47A2QphLQPs/wCohi9JQ2\n0YGzk7CgIOnS7B53JLSWlMdZNL/j2SMV7KgPsNRsV4Slxq4249jFQHEaTn1p/4Ia\nhXm4xKWeXny7Yhhg0REvY8xy5nMFE4Xlbb2zkTxqpBjlEA1BD/H9vUZ/uRm3RD/j\ndDC6seAj6V6Si1K0Q6irib4w5ysvFt8APuiDPrht/wucMK7CBhMotLciKMMO+/3V\nQ9cn42nQc4k0ragVbpf1H4Bsrv5oPFktOms0MfsAlXeqzzNIqi193Bi2CBByUfc=\n=D2T/\n-----END PGP SIGNATURE-----\n", "payload": "tree 5104c0cb806e20b6e8d12322bdeae0d879f71e69\nparent 9b3f49f1bd892dad768101b147a083e25d378619\nparent 645a88374a8b9e9eb9a5d69b404b91d6e9bfb620\nauthor Yuki Okushi <jtitor@2k36.org> 1659076801 +0900\ncommitter GitHub <noreply@github.com> 1659076801 +0900\n\nRollup merge of #99803 - JohnTitor:update-lazy-docs, r=compiler-errors\n\nUpdate mentions to `rustc_metadata::rmeta::Lazy`\n\nWhile working on https://github.com/rust-lang/rustc-dev-guide/pull/1411, I noticed there are still some mentions of `Lazy`. This updates them to `LazyValue`, `LazyArray`, or `LazyTable`.\n\nr? ````@compiler-errors````\n\nSigned-off-by: Yuki Okushi <jtitor@2k36.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3610ed2eba43ee8ae74838fafee27e1286b73e", "html_url": "https://github.com/rust-lang/rust/commit/fd3610ed2eba43ee8ae74838fafee27e1286b73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd3610ed2eba43ee8ae74838fafee27e1286b73e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b3f49f1bd892dad768101b147a083e25d378619", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3f49f1bd892dad768101b147a083e25d378619", "html_url": "https://github.com/rust-lang/rust/commit/9b3f49f1bd892dad768101b147a083e25d378619"}, {"sha": "645a88374a8b9e9eb9a5d69b404b91d6e9bfb620", "url": "https://api.github.com/repos/rust-lang/rust/commits/645a88374a8b9e9eb9a5d69b404b91d6e9bfb620", "html_url": "https://github.com/rust-lang/rust/commit/645a88374a8b9e9eb9a5d69b404b91d6e9bfb620"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "6b0b5ac7da9a18d2d5d0611c9652ef16b9601a02", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd3610ed2eba43ee8ae74838fafee27e1286b73e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3610ed2eba43ee8ae74838fafee27e1286b73e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=fd3610ed2eba43ee8ae74838fafee27e1286b73e", "patch": "@@ -83,7 +83,7 @@ pub(crate) struct CrateMetadata {\n \n     // --- Some data pre-decoded from the metadata blob, usually for performance ---\n     /// NOTE(eddyb) we pass `'static` to a `'tcx` parameter because this\n-    /// lifetime is only used behind `Lazy`, and therefore acts like a\n+    /// lifetime is only used behind `LazyValue`, `LazyArray`, or `LazyTable`, and therefore acts like a\n     /// universal (`for<'tcx>`), that is paired up with whichever `TyCtxt`\n     /// is being used to decode those values.\n     root: CrateRoot,"}, {"sha": "23198a8536933ef5e0a08213752b55669ec75174", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd3610ed2eba43ee8ae74838fafee27e1286b73e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3610ed2eba43ee8ae74838fafee27e1286b73e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=fd3610ed2eba43ee8ae74838fafee27e1286b73e", "patch": "@@ -66,13 +66,13 @@ pub const METADATA_HEADER: &[u8] = &[b'r', b'u', b's', b't', 0, 0, 0, METADATA_V\n ///\n /// Metadata is effective a tree, encoded in post-order,\n /// and with the root's position written next to the header.\n-/// That means every single `Lazy` points to some previous\n+/// That means every single `LazyValue` points to some previous\n /// location in the metadata and is part of a larger node.\n ///\n-/// The first `Lazy` in a node is encoded as the backwards\n+/// The first `LazyValue` in a node is encoded as the backwards\n /// distance from the position where the containing node\n-/// starts and where the `Lazy` points to, while the rest\n-/// use the forward distance from the previous `Lazy`.\n+/// starts and where the `LazyValue` points to, while the rest\n+/// use the forward distance from the previous `LazyValue`.\n /// Distances start at 1, as 0-byte nodes are invalid.\n /// Also invalid are nodes being referred in a different\n /// order than they were encoded in.\n@@ -94,12 +94,12 @@ impl<T> LazyValue<T> {\n \n /// A list of lazily-decoded values.\n ///\n-/// Unlike `Lazy<Vec<T>>`, the length is encoded next to the\n+/// Unlike `LazyValue<Vec<T>>`, the length is encoded next to the\n /// position, not at the position, which means that the length\n /// doesn't need to be known before encoding all the elements.\n ///\n /// If the length is 0, no position is encoded, but otherwise,\n-/// the encoding is that of `Lazy`, with the distinction that\n+/// the encoding is that of `LazyArray`, with the distinction that\n /// the minimal distance the length of the sequence, i.e.\n /// it's assumed there's no 0-byte element in the sequence.\n struct LazyArray<T> {\n@@ -167,17 +167,17 @@ impl<I, T> Clone for LazyTable<I, T> {\n     }\n }\n \n-/// Encoding / decoding state for `Lazy`.\n+/// Encoding / decoding state for `Lazy`s (`LazyValue`, `LazyArray`, and `LazyTable`).\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum LazyState {\n     /// Outside of a metadata node.\n     NoNode,\n \n-    /// Inside a metadata node, and before any `Lazy`.\n+    /// Inside a metadata node, and before any `Lazy`s.\n     /// The position is that of the node itself.\n     NodeStart(NonZeroUsize),\n \n-    /// Inside a metadata node, with a previous `Lazy`.\n+    /// Inside a metadata node, with a previous `Lazy`s.\n     /// The position is where that previous `Lazy` would start.\n     Previous(NonZeroUsize),\n }"}, {"sha": "21841ae2532a7b913f1da7b901c1417ae091cc84", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3610ed2eba43ee8ae74838fafee27e1286b73e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3610ed2eba43ee8ae74838fafee27e1286b73e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=fd3610ed2eba43ee8ae74838fafee27e1286b73e", "patch": "@@ -141,7 +141,7 @@ fixed_size_enum! {\n     }\n }\n \n-// We directly encode `DefPathHash` because a `Lazy` would encur a 25% cost.\n+// We directly encode `DefPathHash` because a `LazyValue` would incur a 25% cost.\n impl FixedSizeEncoding for Option<DefPathHash> {\n     type ByteArray = [u8; 16];\n \n@@ -159,7 +159,7 @@ impl FixedSizeEncoding for Option<DefPathHash> {\n     }\n }\n \n-// We directly encode RawDefId because using a `Lazy` would incur a 50% overhead in the worst case.\n+// We directly encode RawDefId because using a `LazyValue` would incur a 50% overhead in the worst case.\n impl FixedSizeEncoding for Option<RawDefId> {\n     type ByteArray = [u8; 8];\n "}]}