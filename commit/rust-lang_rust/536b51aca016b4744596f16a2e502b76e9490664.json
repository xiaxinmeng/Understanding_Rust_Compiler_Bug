{"sha": "536b51aca016b4744596f16a2e502b76e9490664", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNmI1MWFjYTAxNmI0NzQ0NTk2ZjE2YTJlNTAyYjc2ZTk0OTA2NjQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T21:55:53Z"}, "message": "liveness: Store upvars_mentioned inside Liveness struct", "tree": {"sha": "8bb9e8ecaae54a0ee00e4e2e62ec9b2040e36a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb9e8ecaae54a0ee00e4e2e62ec9b2040e36a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/536b51aca016b4744596f16a2e502b76e9490664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/536b51aca016b4744596f16a2e502b76e9490664", "html_url": "https://github.com/rust-lang/rust/commit/536b51aca016b4744596f16a2e502b76e9490664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/536b51aca016b4744596f16a2e502b76e9490664/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b629ffd96bd4c882322833f6cde8c41b115894f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b629ffd96bd4c882322833f6cde8c41b115894f9", "html_url": "https://github.com/rust-lang/rust/commit/b629ffd96bd4c882322833f6cde8c41b115894f9"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "501bdfbbfff63758fa13546bba668b7ff32470c3", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/536b51aca016b4744596f16a2e502b76e9490664/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536b51aca016b4744596f16a2e502b76e9490664/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=536b51aca016b4744596f16a2e502b76e9490664", "patch": "@@ -604,6 +604,7 @@ struct Liveness<'a, 'tcx> {\n     body_owner: LocalDefId,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n+    upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n     successors: IndexVec<LiveNode, LiveNode>,\n     rwu_table: RWUTable,\n \n@@ -626,6 +627,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn new(ir: &'a mut IrMaps<'tcx>, body_owner: LocalDefId) -> Liveness<'a, 'tcx> {\n         let typeck_results = ir.tcx.typeck(body_owner);\n         let param_env = ir.tcx.param_env(body_owner);\n+        let upvars = ir.tcx.upvars_mentioned(body_owner);\n \n         let closure_ln = ir.add_live_node(ClosureNode);\n         let exit_ln = ir.add_live_node(ExitNode);\n@@ -638,6 +640,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             body_owner,\n             typeck_results,\n             param_env,\n+            upvars,\n             successors: IndexVec::from_elem_n(INVALID_NODE, num_live_nodes),\n             rwu_table: RWUTable::new(num_live_nodes * num_vars),\n             closure_ln,\n@@ -885,8 +888,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // if they are live on the entry to the closure, since only the closure\n         // itself can access them on subsequent calls.\n \n-        let upvars = self.ir.tcx.upvars_mentioned(self.body_owner);\n-        if let Some(upvars) = upvars {\n+        if let Some(upvars) = self.upvars {\n             // Mark upvars captured by reference as used after closure exits.\n             for (&var_hir_id, upvar) in upvars.iter().rev() {\n                 let upvar_id = ty::UpvarId {\n@@ -905,7 +907,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n         let succ = self.propagate_through_expr(&body.value, self.exit_ln);\n \n-        if upvars.is_none() {\n+        if self.upvars.is_none() {\n             // Either not a closure, or closure without any captured variables.\n             // No need to determine liveness of captured variables, since there\n             // are none.\n@@ -1560,7 +1562,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n     }\n \n     fn warn_about_unused_upvars(&self, entry_ln: LiveNode) {\n-        let upvars = match self.ir.tcx.upvars_mentioned(self.body_owner) {\n+        let upvars = match self.upvars {\n             None => return,\n             Some(upvars) => upvars,\n         };"}]}