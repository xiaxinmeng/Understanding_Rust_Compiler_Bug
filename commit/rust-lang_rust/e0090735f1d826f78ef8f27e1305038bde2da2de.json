{"sha": "e0090735f1d826f78ef8f27e1305038bde2da2de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMDkwNzM1ZjFkODI2Zjc4ZWY4ZjI3ZTEzMDUwMzhiZGUyZGEyZGU=", "commit": {"author": {"name": "Kneasle", "email": "kneasle@gmail.com", "date": "2021-09-05T20:58:47Z"}, "committer": {"name": "Kneasle", "email": "kneasle@gmail.com", "date": "2021-09-13T10:08:50Z"}, "message": "Fix FP when using raw pointers as hashed keys", "tree": {"sha": "862347ba08f6400dc71405879fb15a78112b05f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862347ba08f6400dc71405879fb15a78112b05f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0090735f1d826f78ef8f27e1305038bde2da2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0090735f1d826f78ef8f27e1305038bde2da2de", "html_url": "https://github.com/rust-lang/rust/commit/e0090735f1d826f78ef8f27e1305038bde2da2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0090735f1d826f78ef8f27e1305038bde2da2de/comments", "author": {"login": "kneasle", "id": 32932209, "node_id": "MDQ6VXNlcjMyOTMyMjA5", "avatar_url": "https://avatars.githubusercontent.com/u/32932209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kneasle", "html_url": "https://github.com/kneasle", "followers_url": "https://api.github.com/users/kneasle/followers", "following_url": "https://api.github.com/users/kneasle/following{/other_user}", "gists_url": "https://api.github.com/users/kneasle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kneasle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kneasle/subscriptions", "organizations_url": "https://api.github.com/users/kneasle/orgs", "repos_url": "https://api.github.com/users/kneasle/repos", "events_url": "https://api.github.com/users/kneasle/events{/privacy}", "received_events_url": "https://api.github.com/users/kneasle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kneasle", "id": 32932209, "node_id": "MDQ6VXNlcjMyOTMyMjA5", "avatar_url": "https://avatars.githubusercontent.com/u/32932209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kneasle", "html_url": "https://github.com/kneasle", "followers_url": "https://api.github.com/users/kneasle/followers", "following_url": "https://api.github.com/users/kneasle/following{/other_user}", "gists_url": "https://api.github.com/users/kneasle/gists{/gist_id}", "starred_url": "https://api.github.com/users/kneasle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kneasle/subscriptions", "organizations_url": "https://api.github.com/users/kneasle/orgs", "repos_url": "https://api.github.com/users/kneasle/repos", "events_url": "https://api.github.com/users/kneasle/events{/privacy}", "received_events_url": "https://api.github.com/users/kneasle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64b7698a44c2bf090049798a6fac906e96296ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64b7698a44c2bf090049798a6fac906e96296ec", "html_url": "https://github.com/rust-lang/rust/commit/a64b7698a44c2bf090049798a6fac906e96296ec"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "bdb6fc505f7bf43efbce7256aaad695d6763fa68", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e0090735f1d826f78ef8f27e1305038bde2da2de/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0090735f1d826f78ef8f27e1305038bde2da2de/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=e0090735f1d826f78ef8f27e1305038bde2da2de", "patch": "@@ -103,26 +103,39 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::\n fn check_ty<'tcx>(cx: &LateContext<'tcx>, span: Span, ty: Ty<'tcx>) {\n     let ty = ty.peel_refs();\n     if let Adt(def, substs) = ty.kind() {\n-        if [sym::hashmap_type, sym::BTreeMap, sym::hashset_type, sym::BTreeMap]\n+        let is_map_type = [sym::hashmap_type, sym::BTreeMap, sym::hashset_type, sym::BTreeMap]\n             .iter()\n-            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did))\n-            && is_mutable_type(cx, substs.type_at(0), span)\n-        {\n+            .any(|diag_item| cx.tcx.is_diagnostic_item(*diag_item, def.did));\n+        if is_map_type && is_mutable_type(cx, substs.type_at(0), span, true) {\n             span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");\n         }\n     }\n }\n \n-fn is_mutable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span) -> bool {\n+fn is_mutable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span, is_top_level_type: bool) -> bool {\n     match *ty.kind() {\n-        RawPtr(TypeAndMut { ty: inner_ty, mutbl }) | Ref(_, inner_ty, mutbl) => {\n-            mutbl == hir::Mutability::Mut || is_mutable_type(cx, inner_ty, span)\n+        RawPtr(TypeAndMut { ty: inner_ty, mutbl }) => {\n+            if is_top_level_type {\n+                // Raw pointers are hashed by the address they point to, not what is pointed to.\n+                // Therefore, using a raw pointer to any type as the top-level key type is OK.\n+                // Using raw pointers _in_ the key type is not, because the wrapper type could\n+                // provide a custom `impl` for `Hash` (which could deref the raw pointer).\n+                //\n+                // see:\n+                // - clippy issue: https://github.com/rust-lang/rust-clippy/issues/6745\n+                // - std code: https://github.com/rust-lang/rust/blob/1.54.0/library/core/src/hash/mod.rs#L717-L736\n+                false\n+            } else {\n+                mutbl == hir::Mutability::Mut || is_mutable_type(cx, inner_ty, span, false)\n+            }\n         },\n-        Slice(inner_ty) => is_mutable_type(cx, inner_ty, span),\n+        Ref(_, inner_ty, mutbl) => mutbl == hir::Mutability::Mut || is_mutable_type(cx, inner_ty, span, false),\n+        Slice(inner_ty) => is_mutable_type(cx, inner_ty, span, false),\n         Array(inner_ty, size) => {\n-            size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0) && is_mutable_type(cx, inner_ty, span)\n+            size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n+                && is_mutable_type(cx, inner_ty, span, false)\n         },\n-        Tuple(..) => ty.tuple_fields().any(|ty| is_mutable_type(cx, ty, span)),\n+        Tuple(..) => ty.tuple_fields().any(|ty| is_mutable_type(cx, ty, span, false)),\n         Adt(..) => {\n             !ty.has_escaping_bound_vars()\n                 && cx.tcx.layout_of(cx.param_env.and(ty)).is_ok()"}, {"sha": "75b1618d82ab0b97af6a03fd65e1e30972aaff52", "filename": "tests/ui/mut_key.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0090735f1d826f78ef8f27e1305038bde2da2de/tests%2Fui%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0090735f1d826f78ef8f27e1305038bde2da2de/tests%2Fui%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.rs?ref=e0090735f1d826f78ef8f27e1305038bde2da2de", "patch": "@@ -1,3 +1,4 @@\n+use std::cell::Cell;\n use std::collections::{HashMap, HashSet};\n use std::hash::{Hash, Hasher};\n use std::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n@@ -31,11 +32,19 @@ fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<K\n \n fn this_is_ok(_m: &mut HashMap<usize, Key>) {}\n \n+// Raw pointers are hashed by the address they point to, so it doesn't matter if they point to a\n+// type with interior mutability.  See:\n+// - clippy issue: https://github.com/rust-lang/rust-clippy/issues/6745\n+// - std lib: https://github.com/rust-lang/rust/blob/1.54.0/library/core/src/hash/mod.rs#L717-L736\n+// So these are OK:\n+fn raw_ptr_is_ok(_m: &mut HashMap<*const Key, ()>) {}\n+fn raw_mut_ptr_is_ok(_m: &mut HashMap<*mut Key, ()>) {}\n+\n #[allow(unused)]\n trait Trait {\n     type AssociatedType;\n \n-    fn trait_fn(&self, set: std::collections::HashSet<Self::AssociatedType>);\n+    fn trait_fn(&self, set: HashSet<Self::AssociatedType>);\n }\n \n fn generics_are_ok_too<K>(_m: &mut HashSet<K>) {\n@@ -52,4 +61,7 @@ fn main() {\n     tuples::<Key>(&mut HashMap::new());\n     tuples::<()>(&mut HashMap::new());\n     tuples_bad::<()>(&mut HashMap::new());\n+\n+    raw_ptr_is_ok(&mut HashMap::new());\n+    raw_mut_ptr_is_ok(&mut HashMap::new());\n }"}, {"sha": "8da1262f0f179f3d8af7d2d2f34c1e5528b2b1db", "filename": "tests/ui/mut_key.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0090735f1d826f78ef8f27e1305038bde2da2de/tests%2Fui%2Fmut_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0090735f1d826f78ef8f27e1305038bde2da2de/tests%2Fui%2Fmut_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.stderr?ref=e0090735f1d826f78ef8f27e1305038bde2da2de", "patch": "@@ -1,25 +1,25 @@\n error: mutable key type\n-  --> $DIR/mut_key.rs:27:32\n+  --> $DIR/mut_key.rs:28:32\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutable-key-type` implied by `-D warnings`\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:27:72\n+  --> $DIR/mut_key.rs:28:72\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                                                        ^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:28:5\n+  --> $DIR/mut_key.rs:29:5\n    |\n LL |     let _other: HashMap<Key, bool> = HashMap::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:47:22\n+  --> $DIR/mut_key.rs:56:22\n    |\n LL | fn tuples_bad<U>(_m: &mut HashMap<(Key, U), bool>) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}