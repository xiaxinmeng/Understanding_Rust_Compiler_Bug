{"sha": "efdf948f43a6416c2104430c53860d4f4032b812", "node_id": "C_kwDOAAsO6NoAKGVmZGY5NDhmNDNhNjQxNmMyMTA0NDMwYzUzODYwZDRmNDAzMmI4MTI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-10T08:09:05Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-10T12:24:36Z"}, "message": "use FxHashMap instead of BTreeMap", "tree": {"sha": "2b88ae6699b8a799f22ad971ce704fcc934b6dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b88ae6699b8a799f22ad971ce704fcc934b6dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdf948f43a6416c2104430c53860d4f4032b812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdf948f43a6416c2104430c53860d4f4032b812", "html_url": "https://github.com/rust-lang/rust/commit/efdf948f43a6416c2104430c53860d4f4032b812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdf948f43a6416c2104430c53860d4f4032b812/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d26f5a000426d695323e5e4bcf0a668a5101bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d26f5a000426d695323e5e4bcf0a668a5101bc3", "html_url": "https://github.com/rust-lang/rust/commit/3d26f5a000426d695323e5e4bcf0a668a5101bc3"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "0e30b136622a020d2d029a4c1ea2ec0dbad3c1b9", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efdf948f43a6416c2104430c53860d4f4032b812/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdf948f43a6416c2104430c53860d4f4032b812/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=efdf948f43a6416c2104430c53860d4f4032b812", "patch": "@@ -33,7 +33,6 @@ use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n use std::cell::{Cell, Ref, RefCell};\n-use std::collections::BTreeMap;\n use std::fmt;\n \n use self::combine::CombineFields;\n@@ -1532,14 +1531,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return inner;\n         }\n \n-        let mut region_map = BTreeMap::new();\n+        let mut region_map = FxHashMap::default();\n         let fld_r = |br: ty::BoundRegion| {\n             *region_map\n                 .entry(br)\n                 .or_insert_with(|| self.next_region_var(LateBoundRegion(span, br.kind, lbrct)))\n         };\n \n-        let mut ty_map = BTreeMap::new();\n+        let mut ty_map = FxHashMap::default();\n         let fld_t = |bt: ty::BoundTy| {\n             *ty_map.entry(bt).or_insert_with(|| {\n                 self.next_ty_var(TypeVariableOrigin {\n@@ -1548,7 +1547,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 })\n             })\n         };\n-        let mut ct_map = BTreeMap::new();\n+        let mut ct_map = FxHashMap::default();\n         let fld_c = |bc: ty::BoundVar, ty| {\n             *ct_map.entry(bc).or_insert_with(|| {\n                 self.next_const_var("}]}