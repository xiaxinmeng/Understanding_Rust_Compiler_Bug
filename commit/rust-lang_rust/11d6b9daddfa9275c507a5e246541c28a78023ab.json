{"sha": "11d6b9daddfa9275c507a5e246541c28a78023ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDZiOWRhZGRmYTkyNzVjNTA3YTVlMjQ2NTQxYzI4YTc4MDIzYWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T16:39:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T15:52:28Z"}, "message": "Only new-style classification", "tree": {"sha": "1284a6dd8fe99e549c2bdba4198665b6e350910a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1284a6dd8fe99e549c2bdba4198665b6e350910a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d6b9daddfa9275c507a5e246541c28a78023ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d6b9daddfa9275c507a5e246541c28a78023ab", "html_url": "https://github.com/rust-lang/rust/commit/11d6b9daddfa9275c507a5e246541c28a78023ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d6b9daddfa9275c507a5e246541c28a78023ab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35bfeaf4af4bcccf355f1e0e1a38547a2982a251", "url": "https://api.github.com/repos/rust-lang/rust/commits/35bfeaf4af4bcccf355f1e0e1a38547a2982a251", "html_url": "https://github.com/rust-lang/rust/commit/35bfeaf4af4bcccf355f1e0e1a38547a2982a251"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "f2b5af3214155f98427c4c89907d2726acb3e87b", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=11d6b9daddfa9275c507a5e246541c28a78023ab", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{db::AstDatabase, InFile};\n+use hir::{db::AstDatabase, InFile, SourceBinder};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode,\n@@ -72,7 +72,8 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n-    let name_kind = classify_name_ref(db, name_ref).map(|d| d.kind);\n+    let mut sb = SourceBinder::new(db);\n+    let name_kind = classify_name_ref(&mut sb, name_ref).map(|d| d.kind);\n     match name_kind {\n         Some(Macro(it)) => return Exact(it.to_nav(db)),\n         Some(Field(it)) => return Exact(it.to_nav(db)),"}, {"sha": "6661e5cb22c29d66d949765697f850f72b589a61", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=11d6b9daddfa9275c507a5e246541c28a78023ab", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{db::AstDatabase, Adt, HasSource, HirDisplay};\n+use hir::{db::AstDatabase, Adt, HasSource, HirDisplay, SourceBinder};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::find_covering_element,\n@@ -152,13 +152,14 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n     let mut res = HoverResult::new();\n \n+    let mut sb = SourceBinder::new(db);\n     if let Some((range, name_kind)) = match_ast! {\n         match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n-                classify_name_ref(db, token.with_value(&name_ref)).map(|d| (name_ref.syntax().text_range(), d.kind))\n+                classify_name_ref(&mut sb, token.with_value(&name_ref)).map(|d| (name_ref.syntax().text_range(), d.kind))\n             },\n             ast::Name(name) => {\n-                classify_name(db, token.with_value(&name)).map(|d| (name.syntax().text_range(), d.kind))\n+                classify_name(&mut sb, token.with_value(&name)).map(|d| (name.syntax().text_range(), d.kind))\n             },\n             _ => None,\n         }\n@@ -742,7 +743,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             }\n             fn foo(bar:u32) {\n                 let a = id!(ba<|>r);\n-            }            \n+            }\n             \",\n             &[\"u32\"],\n         );"}, {"sha": "b0e5fddcccd0efa877c78c22c905deaa84af8ccb", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=11d6b9daddfa9275c507a5e246541c28a78023ab", "patch": "@@ -14,7 +14,7 @@ mod name_definition;\n mod rename;\n mod search_scope;\n \n-use hir::InFile;\n+use hir::{InFile, SourceBinder};\n use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n@@ -29,7 +29,7 @@ use crate::{\n };\n \n pub(crate) use self::{\n-    classify::{classify_name, classify_name2, classify_name_ref, classify_name_ref2},\n+    classify::{classify_name, classify_name_ref},\n     name_definition::{NameDefinition, NameKind},\n     rename::rename,\n };\n@@ -171,13 +171,14 @@ fn find_name(\n     syntax: &SyntaxNode,\n     position: FilePosition,\n ) -> Option<RangeInfo<(String, NameDefinition)>> {\n+    let mut sb = SourceBinder::new(db);\n     if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, position.offset) {\n-        let def = classify_name(db, InFile::new(position.file_id.into(), &name))?;\n+        let def = classify_name(&mut sb, InFile::new(position.file_id.into(), &name))?;\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, (name.text().to_string(), def)));\n     }\n     let name_ref = find_node_at_offset::<ast::NameRef>(&syntax, position.offset)?;\n-    let def = classify_name_ref(db, InFile::new(position.file_id.into(), &name_ref))?;\n+    let def = classify_name_ref(&mut sb, InFile::new(position.file_id.into(), &name_ref))?;\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, (name_ref.text().to_string(), def)))\n }\n@@ -209,7 +210,10 @@ fn process_definition(\n                         continue;\n                     }\n                 }\n-                if let Some(d) = classify_name_ref(db, InFile::new(file_id.into(), &name_ref)) {\n+                // FIXME: reuse sb\n+                let mut sb = SourceBinder::new(db);\n+                if let Some(d) = classify_name_ref(&mut sb, InFile::new(file_id.into(), &name_ref))\n+                {\n                     if d == def {\n                         let kind = if name_ref\n                             .syntax()"}, {"sha": "4a6e11e27ec0418070992fac6da12a4daeba076e", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=11d6b9daddfa9275c507a5e246541c28a78023ab", "patch": "@@ -11,12 +11,7 @@ use super::{\n };\n use crate::db::RootDatabase;\n \n-pub(crate) fn classify_name(db: &RootDatabase, name: InFile<&ast::Name>) -> Option<NameDefinition> {\n-    let mut sb = SourceBinder::new(db);\n-    classify_name2(&mut sb, name)\n-}\n-\n-pub(crate) fn classify_name2(\n+pub(crate) fn classify_name(\n     sb: &mut SourceBinder<RootDatabase>,\n     name: InFile<&ast::Name>,\n ) -> Option<NameDefinition> {\n@@ -132,14 +127,6 @@ pub(crate) fn classify_name2(\n }\n \n pub(crate) fn classify_name_ref(\n-    db: &RootDatabase,\n-    name_ref: InFile<&ast::NameRef>,\n-) -> Option<NameDefinition> {\n-    let mut sb = SourceBinder::new(db);\n-    classify_name_ref2(&mut sb, name_ref)\n-}\n-\n-pub(crate) fn classify_name_ref2(\n     sb: &mut SourceBinder<RootDatabase>,\n     name_ref: InFile<&ast::NameRef>,\n ) -> Option<NameDefinition> {"}, {"sha": "e514f9a2c1749b183a69da076a22c33f5c8275ca", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d6b9daddfa9275c507a5e246541c28a78023ab/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=11d6b9daddfa9275c507a5e246541c28a78023ab", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::\n use crate::{\n     db::RootDatabase,\n     references::{\n-        classify_name2, classify_name_ref2,\n+        classify_name, classify_name_ref,\n         NameKind::{self, *},\n     },\n     FileId,\n@@ -110,7 +110,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             NAME_REF if node.ancestors().any(|it| it.kind() == ATTR) => continue,\n             NAME_REF => {\n                 let name_ref = node.as_node().cloned().and_then(ast::NameRef::cast).unwrap();\n-                let name_kind = classify_name_ref2(&mut sb, InFile::new(file_id.into(), &name_ref))\n+                let name_kind = classify_name_ref(&mut sb, InFile::new(file_id.into(), &name_ref))\n                     .map(|d| d.kind);\n                 match name_kind {\n                     Some(name_kind) => {\n@@ -131,7 +131,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();\n                 let name_kind =\n-                    classify_name2(&mut sb, InFile::new(file_id.into(), &name)).map(|d| d.kind);\n+                    classify_name(&mut sb, InFile::new(file_id.into(), &name)).map(|d| d.kind);\n \n                 if let Some(Local(local)) = &name_kind {\n                     if let Some(name) = local.name(db) {"}]}