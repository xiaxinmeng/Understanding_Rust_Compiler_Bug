{"sha": "d1397db3f3e0010a2a2ce9efedc9903907143319", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzk3ZGIzZjNlMDAxMGEyYTJjZTllZmVkYzk5MDM5MDcxNDMzMTk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-06T15:10:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-06T15:10:04Z"}, "message": "Rollup merge of #67049 - tmiasko:io-slice-advance, r=rkruppe\n\nSimplify {IoSlice, IoSliceMut}::advance examples and tests\n\nRemove unnecessary calls to `std::mem::replace` and make variables immutable.", "tree": {"sha": "5e95d496869f2337adf624e0313d25d4ab2b681d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e95d496869f2337adf624e0313d25d4ab2b681d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1397db3f3e0010a2a2ce9efedc9903907143319", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6m9MCRBK7hj4Ov3rIwAAdHIIAJ+10nWH3AqPW6Yi7CZwAPAt\nMVuQmzWHw+pDVCivR8VI9ghn45GE7vSgI5enzk3FktVP9jMJMo1oQNrY86Gs4NuP\nLwY/yDkyUvojqtSCgq5mFyJwAzoqWNxp0EmdVrdf0r3jV0xNopHitukSGqxa5Z6q\nL325awwGmPCIERm4x1MzpWwwzLzdBI7GE1OVo+nxTUXbDm/W+3O35apsYacPnBnC\nqlrdDijFcxv45yPitDEoKkqthQEoyoRZidE2Z0903g+wTDg+zXN9JbWaLW00VRBm\nuASmT3OuzXlFFySGs+ssQMp8ZGix+p8z78DK+7D+5backI4dXAlteM9fACslN5I=\n=R9d0\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e95d496869f2337adf624e0313d25d4ab2b681d\nparent 0b471bffc3a81a2b9f1c29debb53d2b3b6fbe117\nparent 92bc35f7b6cb4232be5ac4cc031202c7ad82260b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1575645004 +0900\ncommitter GitHub <noreply@github.com> 1575645004 +0900\n\nRollup merge of #67049 - tmiasko:io-slice-advance, r=rkruppe\n\nSimplify {IoSlice, IoSliceMut}::advance examples and tests\n\nRemove unnecessary calls to `std::mem::replace` and make variables immutable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1397db3f3e0010a2a2ce9efedc9903907143319", "html_url": "https://github.com/rust-lang/rust/commit/d1397db3f3e0010a2a2ce9efedc9903907143319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1397db3f3e0010a2a2ce9efedc9903907143319/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b471bffc3a81a2b9f1c29debb53d2b3b6fbe117", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b471bffc3a81a2b9f1c29debb53d2b3b6fbe117", "html_url": "https://github.com/rust-lang/rust/commit/0b471bffc3a81a2b9f1c29debb53d2b3b6fbe117"}, {"sha": "92bc35f7b6cb4232be5ac4cc031202c7ad82260b", "url": "https://api.github.com/repos/rust-lang/rust/commits/92bc35f7b6cb4232be5ac4cc031202c7ad82260b", "html_url": "https://github.com/rust-lang/rust/commit/92bc35f7b6cb4232be5ac4cc031202c7ad82260b"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "a1a33bade0d7c610632cf0ce839520c520fb289a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d1397db3f3e0010a2a2ce9efedc9903907143319/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1397db3f3e0010a2a2ce9efedc9903907143319/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d1397db3f3e0010a2a2ce9efedc9903907143319", "patch": "@@ -987,7 +987,6 @@ impl<'a> IoSliceMut<'a> {\n     /// #![feature(io_slice_advance)]\n     ///\n     /// use std::io::IoSliceMut;\n-    /// use std::mem;\n     /// use std::ops::Deref;\n     ///\n     /// let mut buf1 = [1; 8];\n@@ -1000,7 +999,7 @@ impl<'a> IoSliceMut<'a> {\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as read.\n-    /// bufs = IoSliceMut::advance(mem::replace(&mut bufs, &mut []), 10);\n+    /// bufs = IoSliceMut::advance(bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     /// ```\n@@ -1090,20 +1089,19 @@ impl<'a> IoSlice<'a> {\n     /// #![feature(io_slice_advance)]\n     ///\n     /// use std::io::IoSlice;\n-    /// use std::mem;\n     /// use std::ops::Deref;\n     ///\n-    /// let mut buf1 = [1; 8];\n-    /// let mut buf2 = [2; 16];\n-    /// let mut buf3 = [3; 8];\n+    /// let buf1 = [1; 8];\n+    /// let buf2 = [2; 16];\n+    /// let buf3 = [3; 8];\n     /// let mut bufs = &mut [\n-    ///     IoSlice::new(&mut buf1),\n-    ///     IoSlice::new(&mut buf2),\n-    ///     IoSlice::new(&mut buf3),\n+    ///     IoSlice::new(&buf1),\n+    ///     IoSlice::new(&buf2),\n+    ///     IoSlice::new(&buf3),\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as written.\n-    /// bufs = IoSlice::advance(mem::replace(&mut bufs, &mut []), 10);\n+    /// bufs = IoSlice::advance(bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n@@ -2415,7 +2413,6 @@ mod tests {\n     use crate::cmp;\n     use crate::io::prelude::*;\n     use crate::io::{self, IoSlice, IoSliceMut};\n-    use crate::mem;\n     use crate::ops::Deref;\n \n     #[test]\n@@ -2731,26 +2728,26 @@ mod tests {\n         ][..];\n \n         // Only in a single buffer..\n-        bufs = IoSliceMut::advance(mem::replace(&mut bufs, &mut []), 1);\n+        bufs = IoSliceMut::advance(bufs, 1);\n         assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n         assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n         assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n         // Removing a buffer, leaving others as is.\n-        bufs = IoSliceMut::advance(mem::replace(&mut bufs, &mut []), 7);\n+        bufs = IoSliceMut::advance(bufs, 7);\n         assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n         assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n         // Removing a buffer and removing from the next buffer.\n-        bufs = IoSliceMut::advance(mem::replace(&mut bufs, &mut []), 18);\n+        bufs = IoSliceMut::advance(bufs, 18);\n         assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n     }\n \n     #[test]\n     fn io_slice_mut_advance_empty_slice() {\n-        let mut empty_bufs = &mut [][..];\n+        let empty_bufs = &mut [][..];\n         // Shouldn't panic.\n-        IoSliceMut::advance(&mut empty_bufs, 1);\n+        IoSliceMut::advance(empty_bufs, 1);\n     }\n \n     #[test]\n@@ -2759,48 +2756,48 @@ mod tests {\n         let mut bufs = &mut [IoSliceMut::new(&mut buf1)][..];\n \n         // Going beyond the total length should be ok.\n-        bufs = IoSliceMut::advance(mem::replace(&mut bufs, &mut []), 9);\n+        bufs = IoSliceMut::advance(bufs, 9);\n         assert!(bufs.is_empty());\n     }\n \n     #[test]\n     fn io_slice_advance() {\n-        let mut buf1 = [1; 8];\n-        let mut buf2 = [2; 16];\n-        let mut buf3 = [3; 8];\n+        let buf1 = [1; 8];\n+        let buf2 = [2; 16];\n+        let buf3 = [3; 8];\n         let mut bufs =\n-            &mut [IoSlice::new(&mut buf1), IoSlice::new(&mut buf2), IoSlice::new(&mut buf3)][..];\n+            &mut [IoSlice::new(&buf1), IoSlice::new(&buf2), IoSlice::new(&buf3)][..];\n \n         // Only in a single buffer..\n-        bufs = IoSlice::advance(mem::replace(&mut bufs, &mut []), 1);\n+        bufs = IoSlice::advance(bufs, 1);\n         assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n         assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n         assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n         // Removing a buffer, leaving others as is.\n-        bufs = IoSlice::advance(mem::replace(&mut bufs, &mut []), 7);\n+        bufs = IoSlice::advance(bufs, 7);\n         assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n         assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n         // Removing a buffer and removing from the next buffer.\n-        bufs = IoSlice::advance(mem::replace(&mut bufs, &mut []), 18);\n+        bufs = IoSlice::advance(bufs, 18);\n         assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n     }\n \n     #[test]\n     fn io_slice_advance_empty_slice() {\n-        let mut empty_bufs = &mut [][..];\n+        let empty_bufs = &mut [][..];\n         // Shouldn't panic.\n-        IoSlice::advance(&mut empty_bufs, 1);\n+        IoSlice::advance(empty_bufs, 1);\n     }\n \n     #[test]\n     fn io_slice_advance_beyond_total_length() {\n-        let mut buf1 = [1; 8];\n-        let mut bufs = &mut [IoSlice::new(&mut buf1)][..];\n+        let buf1 = [1; 8];\n+        let mut bufs = &mut [IoSlice::new(&buf1)][..];\n \n         // Going beyond the total length should be ok.\n-        bufs = IoSlice::advance(mem::replace(&mut bufs, &mut []), 9);\n+        bufs = IoSlice::advance(bufs, 9);\n         assert!(bufs.is_empty());\n     }\n }"}]}