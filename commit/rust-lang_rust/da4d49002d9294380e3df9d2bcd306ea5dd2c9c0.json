{"sha": "da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNGQ0OTAwMmQ5Mjk0MzgwZTNkZjlkMmJjZDMwNmVhNWRkMmM5YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T07:54:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T07:54:15Z"}, "message": "Auto merge of #43479 - ivanbakel:loop_borrow_msg, r=estebank\n\nExtended error message for mut borrow conflicts in loops\n\nRFC issue: https://github.com/rust-lang/rfcs/issues/2080\n\nThe error message for multiple mutable borrows on the same value over loop iterations now makes it clear that the conflict comes from the borrow outlasting the loop. The wording of the error is based on the special case of the moved-value error for a value moved in a loop. Following the example of that error, the code remains the same for the special case.\n\nThis is mainly because I felt the current message is confusing in the loop case : https://github.com/rust-lang/rust/issues/43437. It's not clear that the two conflicting borrows are in different iterations of the loop, and instead it just looks like the compiler has an issue with a single line.", "tree": {"sha": "e55532ac875fab0563582604f8e168996463854c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e55532ac875fab0563582604f8e168996463854c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "html_url": "https://github.com/rust-lang/rust/commit/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e574ba4994c00b1e166ce4e450b7b984e1bff5d4", "html_url": "https://github.com/rust-lang/rust/commit/e574ba4994c00b1e166ce4e450b7b984e1bff5d4"}, {"sha": "688852047c812007280ad4abb08323bc4a5d44d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/688852047c812007280ad4abb08323bc4a5d44d3", "html_url": "https://github.com/rust-lang/rust/commit/688852047c812007280ad4abb08323bc4a5d44d3"}], "stats": {"total": 158, "additions": 145, "deletions": 13}, "files": [{"sha": "e70b7f89a67675de05482f4dea5d1a74e5ef2099", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "patch": "@@ -466,19 +466,33 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             let mut err = match (new_loan.kind, old_loan.kind) {\n                 (ty::MutBorrow, ty::MutBorrow) => {\n                     let mut err = struct_span_err!(self.bccx, new_loan.span, E0499,\n-                                                  \"cannot borrow `{}`{} as mutable \\\n-                                                  more than once at a time\",\n-                                                  nl, new_loan_msg);\n-                    err.span_label(\n-                            old_loan.span,\n-                            format!(\"first mutable borrow occurs here{}\", old_loan_msg));\n-                    err.span_label(\n-                            new_loan.span,\n-                            format!(\"second mutable borrow occurs here{}\", new_loan_msg));\n-                    err.span_label(\n-                            previous_end_span,\n-                            \"first borrow ends here\");\n-                    err\n+                                                      \"cannot borrow `{}`{} as mutable \\\n+                                                      more than once at a time\",\n+                                                      nl, new_loan_msg);\n+\n+                    if new_loan.span == old_loan.span {\n+                        // Both borrows are happening in the same place\n+                        // Meaning the borrow is occuring in a loop\n+                        err.span_label(\n+                                new_loan.span,\n+                                format!(\"mutable borrow starts here in previous \\\n+                                        iteration of loop{}\", new_loan_msg));\n+                        err.span_label(\n+                                previous_end_span,\n+                                \"mutable borrow ends here\");\n+                        err\n+                    } else {\n+                       err.span_label(\n+                                old_loan.span,\n+                                format!(\"first mutable borrow occurs here{}\", old_loan_msg));\n+                        err.span_label(\n+                                new_loan.span,\n+                                format!(\"second mutable borrow occurs here{}\", new_loan_msg));\n+                        err.span_label(\n+                                previous_end_span,\n+                                \"first borrow ends here\");\n+                        err\n+                    }\n                 }\n \n                 (ty::UniqueImmBorrow, ty::UniqueImmBorrow) => {"}, {"sha": "addda42775399e7ea286af1ec121dccec1f189fa", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs?ref=da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// produce special borrowck message inside all kinds of loops\n+\n+struct FuncWrapper<'a, T : 'a> {\n+    func : fn(&'a mut T) -> ()\n+}\n+\n+impl<'a, T : 'a> FuncWrapper<'a, T> {\n+    fn in_loop(self, arg : &'a mut T) {\n+        loop {\n+            (self.func)(arg)\n+        }\n+    }\n+\n+    fn in_while(self, arg : &'a mut T) {\n+        while true {\n+            (self.func)(arg)\n+        }\n+    }\n+\n+    fn in_for(self, arg : &'a mut T) {\n+        let v : Vec<()> = vec![];\n+        for _ in v.iter() {\n+            (self.func)(arg)\n+        }\n+    }\n+}\n+\n+fn main() {\n+}\n+"}, {"sha": "a34d524d28f2e08d0dc5cff8377575ae55cf4ac9", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "patch": "@@ -0,0 +1,29 @@\n+error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n+  --> $DIR/mut-borrow-in-loop.rs:20:25\n+   |\n+20 |             (self.func)(arg)\n+   |                         ^^^ mutable borrow starts here in previous iteration of loop\n+21 |         }\n+22 |     }\n+   |     - mutable borrow ends here\n+\n+error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n+  --> $DIR/mut-borrow-in-loop.rs:26:25\n+   |\n+26 |             (self.func)(arg)\n+   |                         ^^^ mutable borrow starts here in previous iteration of loop\n+27 |         }\n+28 |     }\n+   |     - mutable borrow ends here\n+\n+error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n+  --> $DIR/mut-borrow-in-loop.rs:33:25\n+   |\n+33 |             (self.func)(arg)\n+   |                         ^^^ mutable borrow starts here in previous iteration of loop\n+34 |         }\n+35 |     }\n+   |     - mutable borrow ends here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "97092b7f9d75934cccb87cdefd3519d457b669cd", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs?ref=da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ensure borrowck messages are correct outside special case\n+\n+fn main() {\n+    let mut void = ();\n+\n+    let first = &mut void;\n+    let second = &mut void;\n+\n+    loop {\n+        let mut inner_void = ();\n+\n+        let inner_first = &mut inner_void;\n+        let inner_second = &mut inner_void;\n+    }\n+}\n+"}, {"sha": "02b32dc363ae744d0f05abf0a9ae0bcdf96095c6", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da4d49002d9294380e3df9d2bcd306ea5dd2c9c0/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr?ref=da4d49002d9294380e3df9d2bcd306ea5dd2c9c0", "patch": "@@ -0,0 +1,23 @@\n+error[E0499]: cannot borrow `void` as mutable more than once at a time\n+  --> $DIR/mut-borrow-outside-loop.rs:17:23\n+   |\n+16 |     let first = &mut void;\n+   |                      ---- first mutable borrow occurs here\n+17 |     let second = &mut void;\n+   |                       ^^^^ second mutable borrow occurs here\n+...\n+25 | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n+  --> $DIR/mut-borrow-outside-loop.rs:23:33\n+   |\n+22 |         let inner_first = &mut inner_void;\n+   |                                ---------- first mutable borrow occurs here\n+23 |         let inner_second = &mut inner_void;\n+   |                                 ^^^^^^^^^^ second mutable borrow occurs here\n+24 |     }\n+   |     - first borrow ends here\n+\n+error: aborting due to 2 previous errors\n+"}]}