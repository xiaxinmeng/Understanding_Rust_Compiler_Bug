{"sha": "8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNGRhNGY0YzRmMDk3ZTZhOTUyNjRjYzUyN2RhNjRiZmMxMzNiMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-23T23:06:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-23T23:06:13Z"}, "message": "Auto merge of #46881 - michaelwoerister:ensure-coherence, r=nikomatsakis\n\nincr.comp.: Cache check_match and use ensure() for coherence-related queries.\n\nSome minor optimizations.\n\nr? @nikomatsakis", "tree": {"sha": "5d701484cd049f4658932105c3fcf0be54e9b1fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d701484cd049f4658932105c3fcf0be54e9b1fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "html_url": "https://github.com/rust-lang/rust/commit/8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16992930835ce3376a4aaed42307726e1fc78e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/16992930835ce3376a4aaed42307726e1fc78e45", "html_url": "https://github.com/rust-lang/rust/commit/16992930835ce3376a4aaed42307726e1fc78e45"}, {"sha": "44a0522b180805e9ff0d6b5009c031f6d131b4a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a0522b180805e9ff0d6b5009c031f6d131b4a6", "html_url": "https://github.com/rust-lang/rust/commit/44a0522b180805e9ff0d6b5009c031f6d131b4a6"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "f2fe12dedc2ae8de737193529eb7887e0daeaa14", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::type_param_predicates<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::coherent_trait<'tcx> {\n-    fn describe(tcx: TyCtxt, (_, def_id): (CrateNum, DefId)) -> String {\n+    fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"coherence checking all impls of trait `{}`\",\n                 tcx.item_path_str(def_id))\n     }\n@@ -647,5 +647,6 @@ impl_disk_cacheable_query!(unsafety_check_result, |def_id| def_id.is_local());\n impl_disk_cacheable_query!(borrowck, |def_id| def_id.is_local());\n impl_disk_cacheable_query!(mir_borrowck, |def_id| def_id.is_local());\n impl_disk_cacheable_query!(mir_const_qualif, |def_id| def_id.is_local());\n+impl_disk_cacheable_query!(check_match, |def_id| def_id.is_local());\n impl_disk_cacheable_query!(contains_extern_indicator, |_| true);\n impl_disk_cacheable_query!(def_symbol_name, |_| true);"}, {"sha": "7c9d274e1fe06b03d8ad5b2f871d68c3e0925bae", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -187,7 +187,7 @@ define_maps! { <'tcx>\n \n     [] fn has_typeck_tables: HasTypeckTables(DefId) -> bool,\n \n-    [] fn coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n+    [] fn coherent_trait: CoherenceCheckTrait(DefId) -> (),\n \n     [] fn borrowck: BorrowCheck(DefId) -> Rc<BorrowCheckResult>,\n \n@@ -385,10 +385,6 @@ fn fulfill_obligation_dep_node<'tcx>((param_env, trait_ref):\n     }\n }\n \n-fn coherent_trait_dep_node<'tcx>((_, def_id): (CrateNum, DefId)) -> DepConstructor<'tcx> {\n-    DepConstructor::CoherenceCheckTrait(def_id)\n-}\n-\n fn crate_inherent_impls_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::Coherence\n }"}, {"sha": "dd8a7223289c27a1263688f784077f0a21c313fa", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -217,6 +217,7 @@ impl<'sess> OnDiskCache<'sess> {\n             encode_query_results::<contains_extern_indicator, _>(tcx, enc, qri)?;\n             encode_query_results::<symbol_name, _>(tcx, enc, qri)?;\n             encode_query_results::<trans_fulfill_obligation, _>(tcx, enc, qri)?;\n+            encode_query_results::<check_match, _>(tcx, enc, qri)?;\n         }\n \n         // Encode diagnostics"}, {"sha": "ea71367d8852f260a3ac6a78d3fedf3f22298151", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -978,4 +978,5 @@ impl_load_from_cache!(\n     SymbolName => def_symbol_name,\n     ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n     ContainsExternIndicator => contains_extern_indicator,\n+    CheckMatch => check_match,\n );"}, {"sha": "85052052b32f72ffdc2a751235899d3648682c7d", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -11,7 +11,7 @@\n //! misc. type-system utilities too small to deserve their own file\n \n use hir::def::Def;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n+use hir::def_id::DefId;\n use hir::map::{DefPathData, Node};\n use hir;\n use ich::NodeIdHashingMode;\n@@ -427,7 +427,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         };\n \n-        self.coherent_trait((LOCAL_CRATE, drop_trait));\n+        ty::maps::queries::coherent_trait::ensure(self, drop_trait);\n \n         let mut dtor_did = None;\n         let ty = self.type_of(adt_did);"}, {"sha": "29af9bb668e9db87898ced7e5093ad21b02a5df6", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -29,7 +29,7 @@ pub const FN_OUTPUT_NAME: &'static str = \"Output\";\n \n // Useful type to use with `Result<>` indicate that an error has already\n // been reported to the user, so no need to continue checking.\n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, RustcEncodable, RustcDecodable)]\n pub struct ErrorReported;\n \n thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));"}, {"sha": "adf154968c229813a3fea160ff0f6856d72dbdd3", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -15,8 +15,8 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::ty::{TyCtxt, TypeFoldable};\n+use hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::maps::Providers;\n \n use syntax::ast;\n@@ -113,8 +113,7 @@ pub fn provide(providers: &mut Providers) {\n     };\n }\n \n-fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            (_, def_id): (CrateNum, DefId)) {\n+fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let impls = tcx.hir.trait_impls(def_id);\n     for &impl_id in impls {\n         check_impl(tcx, impl_id);\n@@ -127,14 +126,14 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &trait_def_id in tcx.hir.krate().trait_impls.keys() {\n-        tcx.coherent_trait((LOCAL_CRATE, trait_def_id));\n+        ty::maps::queries::coherent_trait::ensure(tcx, trait_def_id);\n     }\n \n     unsafety::check(tcx);\n     orphan::check(tcx);\n     overlap::check_auto_impls(tcx);\n \n     // these queries are executed for side-effects (error reporting):\n-    tcx.crate_inherent_impls(LOCAL_CRATE);\n-    tcx.crate_inherent_impls_overlap_check(LOCAL_CRATE);\n+    ty::maps::queries::crate_inherent_impls::ensure(tcx, LOCAL_CRATE);\n+    ty::maps::queries::crate_inherent_impls_overlap_check::ensure(tcx, LOCAL_CRATE);\n }"}, {"sha": "854ca4eb3b03b78d6afe64441ad8cf1b982bc593", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4da4f4c4f097e6a95264cc527da64bfc133b0f/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "patch": "@@ -618,6 +618,54 @@ impl<T:Decodable> Decodable for Option<T> {\n     }\n }\n \n+impl<T1: Encodable, T2: Encodable> Encodable for Result<T1, T2> {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_enum(\"Result\", |s| {\n+            match *self {\n+                Ok(ref v) => {\n+                    s.emit_enum_variant(\"Ok\", 0, 1, |s| {\n+                        s.emit_enum_variant_arg(0, |s| {\n+                            v.encode(s)\n+                        })\n+                    })\n+                }\n+                Err(ref v) => {\n+                    s.emit_enum_variant(\"Err\", 1, 1, |s| {\n+                        s.emit_enum_variant_arg(0, |s| {\n+                            v.encode(s)\n+                        })\n+                    })\n+                }\n+            }\n+        })\n+    }\n+}\n+\n+impl<T1:Decodable, T2:Decodable> Decodable for Result<T1, T2> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Result<T1, T2>, D::Error> {\n+        d.read_enum(\"Result\", |d| {\n+            d.read_enum_variant(&[\"Ok\", \"Err\"], |d, disr| {\n+                match disr {\n+                    0 => {\n+                        Ok(Ok(d.read_enum_variant_arg(0, |d| {\n+                            T1::decode(d)\n+                        })?))\n+                    }\n+                    1 => {\n+                        Ok(Err(d.read_enum_variant_arg(0, |d| {\n+                            T2::decode(d)\n+                        })?))\n+                    }\n+                    _ => {\n+                        panic!(\"Encountered invalid discriminant while \\\n+                                decoding `Result`.\");\n+                    }\n+                }\n+            })\n+        })\n+    }\n+}\n+\n macro_rules! peel {\n     ($name:ident, $($other:ident,)*) => (tuple! { $($other,)* })\n }"}]}