{"sha": "5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZWFkY2ZjNDM2YjRiNjliZGJhNjhlZjYxZTUzNjJiODNlNjhlZDI=", "commit": {"author": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:07:12Z"}, "committer": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:38:56Z"}, "message": "move unnecessary clone tests", "tree": {"sha": "070393a14b8d8a5e0caf550c15a7dd49550a8f32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/070393a14b8d8a5e0caf550c15a7dd49550a8f32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "html_url": "https://github.com/rust-lang/rust/commit/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/comments", "author": null, "committer": null, "parents": [{"sha": "18717ae088a3b956baaf60942028ea1336d1bfef", "url": "https://api.github.com/repos/rust-lang/rust/commits/18717ae088a3b956baaf60942028ea1336d1bfef", "html_url": "https://github.com/rust-lang/rust/commit/18717ae088a3b956baaf60942028ea1336d1bfef"}], "stats": {"total": 254, "additions": 131, "deletions": 123}, "files": [{"sha": "4eb7846d3ccb91d5bb30e57d7c0cc4def98a9d0e", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "patch": "@@ -454,60 +454,9 @@ fn str_extend_chars() {\n     s.extend(f.chars());\n }\n \n-fn clone_on_copy() {\n-    42.clone();\n-\n-    vec![1].clone(); // ok, not a Copy type\n-    Some(vec![1]).clone(); // ok, not a Copy type\n-    (&42).clone();\n-}\n-\n-fn clone_on_ref_ptr() {\n-    let rc = Rc::new(true);\n-    let arc = Arc::new(true);\n-\n-    let rcweak = Rc::downgrade(&rc);\n-    let arc_weak = Arc::downgrade(&arc);\n-\n-    rc.clone();\n-    Rc::clone(&rc);\n-\n-    arc.clone();\n-    Arc::clone(&arc);\n-\n-    rcweak.clone();\n-    rc::Weak::clone(&rcweak);\n-\n-    arc_weak.clone();\n-    sync::Weak::clone(&arc_weak);\n-\n-\n-}\n-\n-fn clone_on_copy_generic<T: Copy>(t: T) {\n-    t.clone();\n-\n-    Some(t).clone();\n-}\n-\n-fn clone_on_double_ref() {\n-    let x = vec![1];\n-    let y = &&x;\n-    let z: &Vec<_> = y.clone();\n-\n-    println!(\"{:p} {:p}\",*y, z);\n-}\n-\n #[allow(result_unwrap_used)]\n fn temporary_cstring() {\n     use std::ffi::CString;\n \n     CString::new(\"foo\").unwrap().as_ptr();\n }\n-\n-fn iter_clone_collect() {\n-    let v = [1,2,3,4,5];\n-    let v2 : Vec<isize> = v.iter().cloned().collect();\n-    let v3 : HashSet<isize> = v.iter().cloned().collect();\n-    let v4 : VecDeque<isize> = v.iter().cloned().collect();\n-}"}, {"sha": "0bf7dc321c90f76464996d99c68ee090e3688db1", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 4, "deletions": 72, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "patch": "@@ -567,85 +567,17 @@ error: calling `.extend(_.chars())`\n 447 |     s.extend(def.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n \n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:458:5\n-    |\n-458 |     42.clone();\n-    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n-    |\n-    = note: `-D clone-on-copy` implied by `-D warnings`\n-\n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:462:5\n-    |\n-462 |     (&42).clone();\n-    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:472:5\n-    |\n-472 |     rc.clone();\n-    |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n-    |\n-    = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:475:5\n-    |\n-475 |     arc.clone();\n-    |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:478:5\n-    |\n-478 |     rcweak.clone();\n-    |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:481:5\n-    |\n-481 |     arc_weak.clone();\n-    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n-\n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:488:5\n-    |\n-488 |     t.clone();\n-    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n-\n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:490:5\n-    |\n-490 |     Some(t).clone();\n-    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n-\n-error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-   --> $DIR/methods.rs:496:22\n-    |\n-496 |     let z: &Vec<_> = y.clone();\n-    |                      ^^^^^^^^^ help: try dereferencing it: `(*y).clone()`\n-    |\n-    = note: `-D clone-double-ref` implied by `-D warnings`\n-\n error: you are getting the inner pointer of a temporary `CString`\n-   --> $DIR/methods.rs:505:5\n+   --> $DIR/methods.rs:461:5\n     |\n-505 |     CString::new(\"foo\").unwrap().as_ptr();\n+461 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n     = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n-   --> $DIR/methods.rs:505:5\n+   --> $DIR/methods.rs:461:5\n     |\n-505 |     CString::new(\"foo\").unwrap().as_ptr();\n+461 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-   --> $DIR/methods.rs:510:27\n-    |\n-510 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: `-D iter-cloned-collect` implied by `-D warnings`\n-"}, {"sha": "f33def9eb4ef65811e2bb97082cbf6986ea39382", "filename": "tests/ui/unnecessary_clone.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "patch": "@@ -0,0 +1,59 @@\n+#![allow(unused)]\n+\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+use std::rc::{self, Rc};\n+use std::sync::{self, Arc};\n+\n+fn main() {}\n+\n+fn clone_on_copy() {\n+    42.clone();\n+\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    (&42).clone();\n+}\n+\n+fn clone_on_ref_ptr() {\n+    let rc = Rc::new(true);\n+    let arc = Arc::new(true);\n+\n+    let rcweak = Rc::downgrade(&rc);\n+    let arc_weak = Arc::downgrade(&arc);\n+\n+    rc.clone();\n+    Rc::clone(&rc);\n+\n+    arc.clone();\n+    Arc::clone(&arc);\n+\n+    rcweak.clone();\n+    rc::Weak::clone(&rcweak);\n+\n+    arc_weak.clone();\n+    sync::Weak::clone(&arc_weak);\n+\n+\n+}\n+\n+fn clone_on_copy_generic<T: Copy>(t: T) {\n+    t.clone();\n+\n+    Some(t).clone();\n+}\n+\n+fn clone_on_double_ref() {\n+    let x = vec![1];\n+    let y = &&x;\n+    let z: &Vec<_> = y.clone();\n+\n+    println!(\"{:p} {:p}\",*y, z);\n+}\n+\n+fn iter_clone_collect() {\n+    let v = [1,2,3,4,5];\n+    let v2 : Vec<isize> = v.iter().cloned().collect();\n+    let v3 : HashSet<isize> = v.iter().cloned().collect();\n+    let v4 : VecDeque<isize> = v.iter().cloned().collect();\n+}"}, {"sha": "17263756980a2855d9eee308e734c71ce52f8ae8", "filename": "tests/ui/unnecessary_clone.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "patch": "@@ -0,0 +1,68 @@\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:11:5\n+   |\n+11 |     42.clone();\n+   |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+   |\n+   = note: `-D clone-on-copy` implied by `-D warnings`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:15:5\n+   |\n+15 |     (&42).clone();\n+   |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:25:5\n+   |\n+25 |     rc.clone();\n+   |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n+   |\n+   = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:28:5\n+   |\n+28 |     arc.clone();\n+   |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:31:5\n+   |\n+31 |     rcweak.clone();\n+   |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:34:5\n+   |\n+34 |     arc_weak.clone();\n+   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:41:5\n+   |\n+41 |     t.clone();\n+   |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:43:5\n+   |\n+43 |     Some(t).clone();\n+   |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n+\n+error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n+  --> $DIR/unnecessary_clone.rs:49:22\n+   |\n+49 |     let z: &Vec<_> = y.clone();\n+   |                      ^^^^^^^^^ help: try dereferencing it: `(*y).clone()`\n+   |\n+   = note: `-D clone-double-ref` implied by `-D warnings`\n+\n+error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/unnecessary_clone.rs:56:27\n+   |\n+56 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D iter-cloned-collect` implied by `-D warnings`\n+"}]}