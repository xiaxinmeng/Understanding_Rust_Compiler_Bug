{"sha": "98a4770a981b779c06a08c642ccefc6c6b5c16a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTQ3NzBhOTgxYjc3OWMwNmEwOGM2NDJjY2VmYzZjNmI1YzE2YTk=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-10-29T21:44:41Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-10-29T22:35:53Z"}, "message": "Formatting fixes", "tree": {"sha": "2898e0a7d1855c5b715456900ef03234d832ce3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2898e0a7d1855c5b715456900ef03234d832ce3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a4770a981b779c06a08c642ccefc6c6b5c16a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a4770a981b779c06a08c642ccefc6c6b5c16a9", "html_url": "https://github.com/rust-lang/rust/commit/98a4770a981b779c06a08c642ccefc6c6b5c16a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a4770a981b779c06a08c642ccefc6c6b5c16a9/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab50f3600ff52dcf97f0cd2b32f632988540b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab50f3600ff52dcf97f0cd2b32f632988540b97", "html_url": "https://github.com/rust-lang/rust/commit/1ab50f3600ff52dcf97f0cd2b32f632988540b97"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "54730391d5636a66dd7c602f68b4eb1427d5e765", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98a4770a981b779c06a08c642ccefc6c6b5c16a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a4770a981b779c06a08c642ccefc6c6b5c16a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=98a4770a981b779c06a08c642ccefc6c6b5c16a9", "patch": "@@ -1661,7 +1661,10 @@ impl<'a> Parser<'a> {\n                 LitBinary(parse::binary_lit(i.as_str())),\n             token::LitBinaryRaw(i, _) =>\n                 LitBinary(Rc::new(i.as_str().as_bytes().iter().map(|&x| x).collect())),\n-            token::OpenDelim(token::Paren) => { self.expect(&token::CloseDelim(token::Paren)); LitNil },\n+            token::OpenDelim(token::Paren) => {\n+                self.expect(&token::CloseDelim(token::Paren));\n+                LitNil\n+            },\n             _ => { self.unexpected_last(tok); }\n         }\n     }\n@@ -2047,7 +2050,8 @@ impl<'a> Parser<'a> {\n                     return self.mk_expr(lo, hi, ExprLit(lit));\n                 }\n                 let mut es = vec!(self.parse_expr());\n-                self.commit_expr(&**es.last().unwrap(), &[], &[token::Comma, token::CloseDelim(token::Paren)]);\n+                self.commit_expr(&**es.last().unwrap(), &[],\n+                                 &[token::Comma, token::CloseDelim(token::Paren)]);\n                 while self.token == token::Comma {\n                     self.bump();\n                     if self.token != token::CloseDelim(token::Paren) {\n@@ -2454,7 +2458,8 @@ impl<'a> Parser<'a> {\n                                     // e[e..e]\n                                     _ => {\n                                         let e2 = self.parse_expr();\n-                                        self.commit_expr_expecting(&*e2, token::CloseDelim(token::Bracket));\n+                                        self.commit_expr_expecting(&*e2,\n+                                            token::CloseDelim(token::Bracket));\n                                         Some(e2)\n                                     }\n                                 };\n@@ -2720,7 +2725,9 @@ impl<'a> Parser<'a> {\n             self.bump();\n             let last_span = self.last_span;\n             match self.token {\n-                token::OpenDelim(token::Bracket) => self.obsolete(last_span, ObsoleteOwnedVector),\n+                token::OpenDelim(token::Bracket) => {\n+                    self.obsolete(last_span, ObsoleteOwnedVector)\n+                },\n                 _ => self.obsolete(last_span, ObsoleteOwnedExpr)\n             }\n \n@@ -3704,7 +3711,8 @@ impl<'a> Parser<'a> {\n                             // expression without semicolon\n                             if classify::expr_requires_semi_to_be_stmt(&*e) {\n                                 // Just check for errors and recover; do not eat semicolon yet.\n-                                self.commit_stmt(&[], &[token::Semi, token::CloseDelim(token::Brace)]);\n+                                self.commit_stmt(&[], &[token::Semi,\n+                                    token::CloseDelim(token::Brace)]);\n                             }\n \n                             match self.token {"}, {"sha": "641e38179498d218a519afeb934d8ae236a57f83", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98a4770a981b779c06a08c642ccefc6c6b5c16a9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a4770a981b779c06a08c642ccefc6c6b5c16a9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=98a4770a981b779c06a08c642ccefc6c6b5c16a9", "patch": "@@ -267,7 +267,7 @@ impl Token {\n     pub fn is_plain_ident(&self) -> bool {\n         match *self {\n             Ident(_, Plain) => true,\n-            _                    => false,\n+            _               => false,\n         }\n     }\n \n@@ -392,20 +392,20 @@ impl Token {\n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash)]\n /// For interpolation during macro expansion.\n pub enum Nonterminal {\n-    NtItem( P<ast::Item>),\n+    NtItem(P<ast::Item>),\n     NtBlock(P<ast::Block>),\n-    NtStmt( P<ast::Stmt>),\n-    NtPat(  P<ast::Pat>),\n-    NtExpr( P<ast::Expr>),\n-    NtTy(   P<ast::Ty>),\n+    NtStmt(P<ast::Stmt>),\n+    NtPat(P<ast::Pat>),\n+    NtExpr(P<ast::Expr>),\n+    NtTy(P<ast::Ty>),\n     #[cfg(stage0)]\n     NtIdent(Box<ast::Ident>, bool),\n     #[cfg(not(stage0))]\n     NtIdent(Box<ast::Ident>, IdentStyle),\n     /// Stuff inside brackets for attributes\n-    NtMeta( P<ast::MetaItem>),\n+    NtMeta(P<ast::MetaItem>),\n     NtPath(Box<ast::Path>),\n-    NtTT(   P<ast::TokenTree>), // needs P'ed to break a circularity\n+    NtTT(P<ast::TokenTree>), // needs P'ed to break a circularity\n     NtMatchers(Vec<ast::Matcher>)\n }\n "}]}