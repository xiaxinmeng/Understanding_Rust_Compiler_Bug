{"sha": "80c510e353b34f006c284f9557e2b59d2f356029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYzUxMGUzNTNiMzRmMDA2YzI4NGY5NTU3ZTJiNTlkMmYzNTYwMjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T09:54:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:13Z"}, "message": "when using feature(nll), don't warn about AST-based region errors\n\nAlso, keep reporting AST-based region errors that are not occuring in\na fn body.", "tree": {"sha": "51d9af72a61e7b4e22599caf63786b6f18d4648e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d9af72a61e7b4e22599caf63786b6f18d4648e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80c510e353b34f006c284f9557e2b59d2f356029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80c510e353b34f006c284f9557e2b59d2f356029", "html_url": "https://github.com/rust-lang/rust/commit/80c510e353b34f006c284f9557e2b59d2f356029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80c510e353b34f006c284f9557e2b59d2f356029/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa4ffa374f264cad971b8177e8d3a9cdd8152b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa4ffa374f264cad971b8177e8d3a9cdd8152b3", "html_url": "https://github.com/rust-lang/rust/commit/cfa4ffa374f264cad971b8177e8d3a9cdd8152b3"}], "stats": {"total": 133, "additions": 120, "deletions": 13}, "files": [{"sha": "cae7bf5c25c81b797bf6788371fae79435f7dd1b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80c510e353b34f006c284f9557e2b59d2f356029/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c510e353b34f006c284f9557e2b59d2f356029/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=80c510e353b34f006c284f9557e2b59d2f356029", "patch": "@@ -258,10 +258,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_region_errors(&self,\n                                 region_scope_tree: &region::ScopeTree,\n-                                errors: &Vec<RegionResolutionError<'tcx>>) {\n+                                errors: &Vec<RegionResolutionError<'tcx>>,\n+                                will_later_be_reported_by_nll: bool) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n-        if self.tcx.sess.nll() {\n+        if will_later_be_reported_by_nll && self.tcx.sess.nll() {\n+            // With `#![feature(nll)]`, we want to present a nice user\n+            // experience, so don't even mention the errors from the\n+            // AST checker.\n+            if self.tcx.sess.features.borrow().nll {\n+                return;\n+            }\n+\n+            // But with -Znll, it's nice to have some note for later.\n             for error in errors {\n                 match *error {\n                     RegionResolutionError::ConcreteFailure(ref origin, ..) |"}, {"sha": "07c5b319970f8e673500b0bb4ad01f1982aa7b93", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/80c510e353b34f006c284f9557e2b59d2f356029/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c510e353b34f006c284f9557e2b59d2f356029/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=80c510e353b34f006c284f9557e2b59d2f356029", "patch": "@@ -1159,10 +1159,45 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n     /// `resolve_type_vars_if_possible` as well as `fully_resolve`.\n-    pub fn resolve_regions_and_report_errors(&self,\n-                                             region_context: DefId,\n-                                             region_map: &region::ScopeTree,\n-                                             outlives_env: &OutlivesEnvironment<'tcx>) {\n+    pub fn resolve_regions_and_report_errors(\n+        &self,\n+        region_context: DefId,\n+        region_map: &region::ScopeTree,\n+        outlives_env: &OutlivesEnvironment<'tcx>,\n+    ) {\n+        self.resolve_regions_and_report_errors_inner(\n+            region_context,\n+            region_map,\n+            outlives_env,\n+            false,\n+        )\n+    }\n+\n+    /// Like `resolve_regions_and_report_errors`, but skips error\n+    /// reporting if NLL is enabled.  This is used for fn bodies where\n+    /// the same error may later be reported by the NLL-based\n+    /// inference.\n+    pub fn resolve_regions_and_report_errors_unless_nll(\n+        &self,\n+        region_context: DefId,\n+        region_map: &region::ScopeTree,\n+        outlives_env: &OutlivesEnvironment<'tcx>,\n+    ) {\n+        self.resolve_regions_and_report_errors_inner(\n+            region_context,\n+            region_map,\n+            outlives_env,\n+            true,\n+        )\n+    }\n+\n+    fn resolve_regions_and_report_errors_inner(\n+        &self,\n+        region_context: DefId,\n+        region_map: &region::ScopeTree,\n+        outlives_env: &OutlivesEnvironment<'tcx>,\n+        will_later_be_reported_by_nll: bool,\n+    ) {\n         assert!(self.is_tainted_by_errors() || self.region_obligations.borrow().is_empty(),\n                 \"region_obligations not empty: {:#?}\",\n                 self.region_obligations.borrow());\n@@ -1187,7 +1222,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // this infcx was in use.  This is totally hokey but\n             // otherwise we have a hard time separating legit region\n             // errors from silly ones.\n-            self.report_region_errors(region_map, &errors); // see error_reporting module\n+            self.report_region_errors(region_map, &errors, will_later_be_reported_by_nll);\n         }\n     }\n "}, {"sha": "64063ec5beda9b4febd656a9723387947ee08acb", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80c510e353b34f006c284f9557e2b59d2f356029/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c510e353b34f006c284f9557e2b59d2f356029/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=80c510e353b34f006c284f9557e2b59d2f356029", "patch": "@@ -124,7 +124,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n         }\n-        rcx.resolve_regions_and_report_errors();\n+        rcx.resolve_regions_and_report_errors_unless_nll();\n \n         assert!(self.tables.borrow().free_region_map.is_empty());\n         self.tables.borrow_mut().free_region_map = rcx.outlives_environment.into_free_region_map();\n@@ -173,7 +173,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir.span(fn_id));\n         }\n \n-        rcx.resolve_regions_and_report_errors();\n+        rcx.resolve_regions_and_report_errors_unless_nll();\n \n         // In this mode, we also copy the free-region-map into the\n         // tables of the enclosing fcx. In the other regionck modes\n@@ -371,6 +371,12 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                                                    &self.outlives_environment);\n     }\n \n+    fn resolve_regions_and_report_errors_unless_nll(&self) {\n+        self.fcx.resolve_regions_and_report_errors_unless_nll(self.subject_def_id,\n+                                                              &self.region_scope_tree,\n+                                                              &self.outlives_environment);\n+    }\n+\n     fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat) {\n         debug!(\"regionck::visit_pat(pat={:?})\", pat);\n         pat.each_binding(|_, id, span, _| {"}, {"sha": "9106f1f0ba69c87d45c1fa0df87b4ea15405a709", "filename": "src/test/compile-fail/regions-struct-not-wf.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs?ref=80c510e353b34f006c284f9557e2b59d2f356029", "patch": "@@ -10,11 +10,15 @@\n \n // Various examples of structs whose fields are not well-formed.\n \n+// revisions:lexical nll\n+\n #![allow(dead_code)]\n+#![cfg_attr(nll, feature(nll))]\n \n struct Ref<'a, T> {\n     field: &'a T\n-        //~^ ERROR the parameter type `T` may not live long enough\n+        //[lexical]~^ ERROR the parameter type `T` may not live long enough\n+        //[nll]~^^ ERROR the parameter type `T` may not live long enough\n }\n \n struct RefOk<'a, T:'a> {\n@@ -23,12 +27,14 @@ struct RefOk<'a, T:'a> {\n \n struct RefIndirect<'a, T> {\n     field: RefOk<'a, T>\n-        //~^ ERROR the parameter type `T` may not live long enough\n+        //[lexical]~^ ERROR the parameter type `T` may not live long enough\n+        //[nll]~^^ ERROR the parameter type `T` may not live long enough\n }\n \n struct DoubleRef<'a, 'b, T> {\n     field: &'a &'b T\n-        //~^ ERROR reference has a longer lifetime than the data it references\n+        //[lexical]~^ ERROR reference has a longer lifetime than the data it references\n+        //[nll]~^^ ERROR reference has a longer lifetime than the data it references\n }\n \n fn main() { }"}, {"sha": "74b086ab18a585415808241b16b8d3d9ab2dc4a5", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=80c510e353b34f006c284f9557e2b59d2f356029", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-Zborrowck=mir -Znll-dump-cause\n+// compile-flags:-Znll-dump-cause\n \n // Test that a structure which tries to store a pointer to `y` into\n // `p` (indirectly) fails to compile."}, {"sha": "babe608354fb92481df3f4465eb8b67dfca2cab3", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body-nll-feature.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs?ref=80c510e353b34f006c284f9557e2b59d2f356029", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we assume that universal types like `T` outlive the\n+// function body. Same as ty-param-fn-body, but uses `feature(nll)`,\n+// which affects error reporting.\n+\n+#![feature(nll)]\n+\n+#![allow(warnings)]\n+#![feature(dyn_trait)]\n+\n+use std::cell::Cell;\n+\n+// No errors here, because `'a` is local to the body.\n+fn region_within_body<T>(t: T) {\n+    let some_int = 22;\n+    let cell = Cell::new(&some_int);\n+    outlives(cell, t)\n+}\n+\n+// Error here, because T: 'a is not satisfied.\n+fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n+    outlives(cell, t)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn outlives<'a, T>(x: Cell<&'a usize>, y: T)\n+where\n+    T: 'a,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "fa9105df070276fcc7620bbda0881496fe31df07", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body-nll-feature.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80c510e353b34f006c284f9557e2b59d2f356029/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr?ref=80c510e353b34f006c284f9557e2b59d2f356029", "patch": "@@ -0,0 +1,10 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/ty-param-fn-body-nll-feature.rs:31:5\n+   |\n+31 |     outlives(cell, t)\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'a`...\n+\n+error: aborting due to previous error\n+"}]}