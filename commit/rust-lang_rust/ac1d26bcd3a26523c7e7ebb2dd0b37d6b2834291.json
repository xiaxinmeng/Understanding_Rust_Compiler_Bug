{"sha": "ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMWQyNmJjZDNhMjY1MjNjN2U3ZWJiMmRkMGIzN2Q2YjI4MzQyOTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-14T15:54:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-14T15:54:42Z"}, "message": "Rollup merge of #80920 - rylev:check_attr-refactor, r=davidtwco\n\nVisit more targets when validating attributes\n\nThis begins to address #80048, allowing for additional validation of attributes.\n\nThere are more refactorings that can be done, though I think they should be tackled in additional PRs:\n* ICE when a builtin attribute is encountered that is not checked\n* Move some of the attr checking done `ast_validation` into `rustc_passes`\n  * note that this requires a bit of additional refactoring, especially of extern items which currently parse attributes (and thus are a part of the AST) but do not possess attributes in their HIR representation.\n* Rename `Target` to `AttributeTarget`\n* Refactor attribute validation completely to go through `Visitor::visit_attribute`.\n  * This would require at a minimum passing `Target` into this method which might be too big of a refactoring to be worth it.\n  * It's also likely not possible to do all the validation this way as some validation requires knowing what other attributes a target has.\n\nr? `@davidtwco`", "tree": {"sha": "96024d4a5568ea17d21e71efd130e71371005e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96024d4a5568ea17d21e71efd130e71371005e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKUfCCRBK7hj4Ov3rIwAAdHIIAGrqPOp67E8AMj2ugv2CDS9U\n/XOSPWSrAKAw8XZFmRbTho3UVQtBs30wKgPdBqhviKXTpW/+nd5fVkfAtO9ytxfl\nxyRDFL2nRxarbccaiQjNIJ89ZkUCHSHzCdmhrWh+N5IZ5Qbv9Rrk68t1aXzukZDj\nznsUzSlcYhiqo5GofknpqqmGqUr5IX9Bmr/IU1KnypJw8DRFMjuXxp+0HewzDF47\nsoLHglaWZjW+GHjdEEae6JjkbVGc7/0DT0ay3Kik5VAXRcZFNfvfOQcaAnSRR8yw\nsZxEQ0w0g2TiaaFnjyiDJOIvAywhJDCVUvi3R8YA4hLEuayrwMJMq7EbOu1mSYQ=\n=apio\n-----END PGP SIGNATURE-----\n", "payload": "tree 96024d4a5568ea17d21e71efd130e71371005e31\nparent 29ed864dc3a066487180d08dcf8b64c6afedebba\nparent 9f0e1d4921bbb40fea71594d7c599c09ab513232\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613318082 +0100\ncommitter GitHub <noreply@github.com> 1613318082 +0100\n\nRollup merge of #80920 - rylev:check_attr-refactor, r=davidtwco\n\nVisit more targets when validating attributes\n\nThis begins to address #80048, allowing for additional validation of attributes.\n\nThere are more refactorings that can be done, though I think they should be tackled in additional PRs:\n* ICE when a builtin attribute is encountered that is not checked\n* Move some of the attr checking done `ast_validation` into `rustc_passes`\n  * note that this requires a bit of additional refactoring, especially of extern items which currently parse attributes (and thus are a part of the AST) but do not possess attributes in their HIR representation.\n* Rename `Target` to `AttributeTarget`\n* Refactor attribute validation completely to go through `Visitor::visit_attribute`.\n  * This would require at a minimum passing `Target` into this method which might be too big of a refactoring to be worth it.\n  * It's also likely not possible to do all the validation this way as some validation requires knowing what other attributes a target has.\n\nr? `@davidtwco`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "html_url": "https://github.com/rust-lang/rust/commit/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ed864dc3a066487180d08dcf8b64c6afedebba", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ed864dc3a066487180d08dcf8b64c6afedebba", "html_url": "https://github.com/rust-lang/rust/commit/29ed864dc3a066487180d08dcf8b64c6afedebba"}, {"sha": "9f0e1d4921bbb40fea71594d7c599c09ab513232", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0e1d4921bbb40fea71594d7c599c09ab513232", "html_url": "https://github.com/rust-lang/rust/commit/9f0e1d4921bbb40fea71594d7c599c09ab513232"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "473477bf22da26b91cbdc7758c364146135046b9", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "patch": "@@ -54,6 +54,7 @@ pub enum Target {\n     ForeignTy,\n     GenericParam(GenericParamKind),\n     MacroDef,\n+    Param,\n }\n \n impl Display for Target {\n@@ -96,6 +97,7 @@ impl Display for Target {\n                     GenericParamKind::Const => \"const parameter\",\n                 },\n                 Target::MacroDef => \"macro def\",\n+                Target::Param => \"function param\",\n             }\n         )\n     }"}, {"sha": "2c79eeeb0e6d22af72a7ed37ce2c6b6f34c4c3e2", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "patch": "@@ -1101,17 +1101,6 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_arm(self, arm);\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n-        self.check_attributes(\n-            macro_def.hir_id,\n-            &macro_def.attrs,\n-            &macro_def.span,\n-            Target::MacroDef,\n-            None,\n-        );\n-        intravisit::walk_macro_def(self, macro_def);\n-    }\n-\n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n@@ -1157,6 +1146,23 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         self.check_attributes(variant.id, variant.attrs, &variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n+\n+    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n+        self.check_attributes(\n+            macro_def.hir_id,\n+            macro_def.attrs,\n+            &macro_def.span,\n+            Target::MacroDef,\n+            None,\n+        );\n+        intravisit::walk_macro_def(self, macro_def);\n+    }\n+\n+    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n+        self.check_attributes(param.hir_id, param.attrs, &param.span, Target::Param, None);\n+\n+        intravisit::walk_param(self, param);\n+    }\n }\n \n fn is_c_like_enum(item: &Item<'_>) -> bool {"}, {"sha": "0e606eac1e8b6d1a17fa74f30a163a63b1f4f4e9", "filename": "src/test/ui/attributes/attrs-on-params.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.rs?ref=ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "patch": "@@ -0,0 +1,8 @@\n+// This checks that incorrect params on function parameters are caught\n+\n+fn function(#[inline] param: u32) {\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes\n+}\n+\n+fn main() {}"}, {"sha": "003f43d371a35ba59154d1880f8d462a37f9368e", "filename": "src/test/ui/attributes/attrs-on-params.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-on-params.stderr?ref=ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "patch": "@@ -0,0 +1,17 @@\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/attrs-on-params.rs:3:13\n+   |\n+LL | fn function(#[inline] param: u32) {\n+   |             ^^^^^^^^^\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/attrs-on-params.rs:3:13\n+   |\n+LL | fn function(#[inline] param: u32) {\n+   |             ^^^^^^^^^-----------\n+   |             |\n+   |             not a function or closure\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "65d8bcd9972e65bf82b6c1b9ecbcccaf34379d24", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs?ref=ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "patch": "@@ -3,8 +3,8 @@\n #![feature(decl_macro)] //~ ERROR `feature` is ambiguous\n \n extern crate builtin_attrs;\n-use builtin_attrs::{test, bench};\n use builtin_attrs::*;\n+use builtin_attrs::{bench, test};\n \n #[repr(C)] //~ ERROR `repr` is ambiguous\n struct S;"}, {"sha": "1ad991db3be4450e6861de7ae4dadd516871d27d", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr?ref=ac1d26bcd3a26523c7e7ebb2dd0b37d6b2834291", "patch": "@@ -12,7 +12,7 @@ LL | #[repr(C)]\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | #[cfg_attr(all(), repr(C))]\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -40,7 +40,7 @@ LL | fn non_macro_expanded_location<#[repr(C)] T>() {\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |         #[repr(C)]\n    |\n    = note: `repr` could refer to a built-in attribute\n note: `repr` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL | #![feature(decl_macro)]\n    |\n    = note: `feature` could refer to a built-in attribute\n note: `feature` could also refer to the attribute macro imported here\n-  --> $DIR/ambiguous-builtin-attrs.rs:7:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:6:5\n    |\n LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^"}]}