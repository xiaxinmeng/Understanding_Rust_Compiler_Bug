{"sha": "3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzk2NDIwMTQ4NmY5ZmRiMDA2YmZiN2QwY2FmOWIxYzNlNmNiNzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-15T14:05:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Handle it in AST pretty printing.", "tree": {"sha": "704f0e7c7655806bcf92b15a94f09efe5c34ea2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/704f0e7c7655806bcf92b15a94f09efe5c34ea2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71", "html_url": "https://github.com/rust-lang/rust/commit/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ab633e4dd56ae2445ec1806d582f50f42117e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ab633e4dd56ae2445ec1806d582f50f42117e9", "html_url": "https://github.com/rust-lang/rust/commit/f0ab633e4dd56ae2445ec1806d582f50f42117e9"}], "stats": {"total": 54, "additions": 14, "deletions": 40}, "files": [{"sha": "c525f2efb49fb07f5a74db41e0d63186b2cdf38b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 40, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3fc964201486f9fdb006bfb7d0caf9b1c3e6cb71", "patch": "@@ -1715,6 +1715,16 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::Block(blk))\n     }\n \n+    pub fn print_let(&mut self, pats: &[P<ast::Pat>], scrutinee: &ast::Expr) -> io::Result<()> {\n+        self.s.word(\"let \")?;\n+\n+        self.print_pats(pats)?;\n+        self.s.space()?;\n+\n+        self.word_space(\"=\")?;\n+        self.print_expr_as_cond(scrutinee)\n+    }\n+\n     fn print_else(&mut self, els: Option<&ast::Expr>) -> io::Result<()> {\n         match els {\n             Some(_else) => {\n@@ -1729,19 +1739,6 @@ impl<'a> State<'a> {\n                         self.print_block(then)?;\n                         self.print_else(e.as_ref().map(|e| &**e))\n                     }\n-                    // Another `else if let` block.\n-                    ast::ExprKind::IfLet(ref pats, ref expr, ref then, ref e) => {\n-                        self.cbox(INDENT_UNIT - 1)?;\n-                        self.ibox(0)?;\n-                        self.s.word(\" else if let \")?;\n-                        self.print_pats(pats)?;\n-                        self.s.space()?;\n-                        self.word_space(\"=\")?;\n-                        self.print_expr_as_cond(expr)?;\n-                        self.s.space()?;\n-                        self.print_block(then)?;\n-                        self.print_else(e.as_ref().map(|e| &**e))\n-                    }\n                     // Final `else` block.\n                     ast::ExprKind::Block(ref b, _) => {\n                         self.cbox(INDENT_UNIT - 1)?;\n@@ -1762,20 +1759,10 @@ impl<'a> State<'a> {\n     pub fn print_if(&mut self, test: &ast::Expr, blk: &ast::Block,\n                     elseopt: Option<&ast::Expr>) -> io::Result<()> {\n         self.head(\"if\")?;\n+\n         self.print_expr_as_cond(test)?;\n         self.s.space()?;\n-        self.print_block(blk)?;\n-        self.print_else(elseopt)\n-    }\n \n-    pub fn print_if_let(&mut self, pats: &[P<ast::Pat>], expr: &ast::Expr, blk: &ast::Block,\n-                        elseopt: Option<&ast::Expr>) -> io::Result<()> {\n-        self.head(\"if let\")?;\n-        self.print_pats(pats)?;\n-        self.s.space()?;\n-        self.word_space(\"=\")?;\n-        self.print_expr_as_cond(expr)?;\n-        self.s.space()?;\n         self.print_block(blk)?;\n         self.print_else(elseopt)\n     }\n@@ -2052,12 +2039,12 @@ impl<'a> State<'a> {\n                 self.word_space(\":\")?;\n                 self.print_type(ty)?;\n             }\n+            ast::ExprKind::Let(ref pats, ref scrutinee) => {\n+                self.print_let(pats, scrutinee)?;\n+            }\n             ast::ExprKind::If(ref test, ref blk, ref elseopt) => {\n                 self.print_if(test, blk, elseopt.as_ref().map(|e| &**e))?;\n             }\n-            ast::ExprKind::IfLet(ref pats, ref expr, ref blk, ref elseopt) => {\n-                self.print_if_let(pats, expr, blk, elseopt.as_ref().map(|e| &**e))?;\n-            }\n             ast::ExprKind::While(ref test, ref blk, opt_label) => {\n                 if let Some(label) = opt_label {\n                     self.print_ident(label.ident)?;\n@@ -2068,19 +2055,6 @@ impl<'a> State<'a> {\n                 self.s.space()?;\n                 self.print_block_with_attrs(blk, attrs)?;\n             }\n-            ast::ExprKind::WhileLet(ref pats, ref expr, ref blk, opt_label) => {\n-                if let Some(label) = opt_label {\n-                    self.print_ident(label.ident)?;\n-                    self.word_space(\":\")?;\n-                }\n-                self.head(\"while let\")?;\n-                self.print_pats(pats)?;\n-                self.s.space()?;\n-                self.word_space(\"=\")?;\n-                self.print_expr_as_cond(expr)?;\n-                self.s.space()?;\n-                self.print_block_with_attrs(blk, attrs)?;\n-            }\n             ast::ExprKind::ForLoop(ref pat, ref iter, ref blk, opt_label) => {\n                 if let Some(label) = opt_label {\n                     self.print_ident(label.ident)?;"}]}