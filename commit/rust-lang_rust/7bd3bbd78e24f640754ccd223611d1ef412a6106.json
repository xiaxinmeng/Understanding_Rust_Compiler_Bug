{"sha": "7bd3bbd78e24f640754ccd223611d1ef412a6106", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZDNiYmQ3OGUyNGY2NDA3NTRjY2QyMjM2MTFkMWVmNDEyYTYxMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-21T10:00:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-21T10:00:04Z"}, "message": "Auto merge of #25552 - GuillaumeGomez:left-hand-error, r=pnkfelix\n\nPart of #24407.", "tree": {"sha": "245b699be6c43bb3bef69a99f759d0872f644618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/245b699be6c43bb3bef69a99f759d0872f644618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd3bbd78e24f640754ccd223611d1ef412a6106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd3bbd78e24f640754ccd223611d1ef412a6106", "html_url": "https://github.com/rust-lang/rust/commit/7bd3bbd78e24f640754ccd223611d1ef412a6106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd3bbd78e24f640754ccd223611d1ef412a6106/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3543099d60d2bc68491ffd9691d4ee5d7f9d082", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3543099d60d2bc68491ffd9691d4ee5d7f9d082", "html_url": "https://github.com/rust-lang/rust/commit/d3543099d60d2bc68491ffd9691d4ee5d7f9d082"}, {"sha": "db9b4357495b9d64d2ce88f62f2db078f4aadfbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9b4357495b9d64d2ce88f62f2db078f4aadfbc", "html_url": "https://github.com/rust-lang/rust/commit/db9b4357495b9d64d2ce88f62f2db078f4aadfbc"}], "stats": {"total": 83, "additions": 73, "deletions": 10}, "files": [{"sha": "b3db7405cfdf44f5cbde4afeb464771987865568", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 73, "deletions": 10, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7bd3bbd78e24f640754ccd223611d1ef412a6106/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd3bbd78e24f640754ccd223611d1ef412a6106/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=7bd3bbd78e24f640754ccd223611d1ef412a6106", "patch": "@@ -282,8 +282,8 @@ be specified exactly one time.\n \n E0063: r##\"\n This error indicates that during an attempt to build a struct or struct-like\n-enum variant, one of the fields was not provided. Each field should be specified\n-exactly once.\n+enum variant, one of the fields was not provided. Each field should be\n+specified exactly once.\n \"##,\n \n E0066: r##\"\n@@ -297,19 +297,36 @@ and [RFC 809] for more details.\n \"##,\n \n E0067: r##\"\n-The left-hand side of an assignment operator must be an lvalue expression. An\n-lvalue expression represents a memory location and includes item paths (ie,\n-namespaced variables), dereferences, indexing expressions, and field references.\n+The left-hand side of a compound assignment expression must be an lvalue\n+expression. An lvalue expression represents a memory location and includes\n+item paths (ie, namespaced variables), dereferences, indexing expressions,\n+and field references.\n \n+Let's start with some bad examples:\n ```\n use std::collections::LinkedList;\n \n-// Good\n-let mut list = LinkedList::new();\n-\n-\n // Bad: assignment to non-lvalue expression\n LinkedList::new() += 1;\n+\n+// ...\n+\n+fn some_func(i: &mut i32) {\n+    i += 12; // Error : '+=' operation cannot be applied on a reference !\n+}\n+\n+And now some good examples:\n+```\n+let mut i : i32 = 0;\n+\n+i += 12; // Good !\n+\n+// ...\n+\n+fn some_func(i: &mut i32) {\n+    *i += 12; // Good !\n+}\n+\n ```\n \"##,\n \n@@ -328,6 +345,53 @@ Since `return;` is just like `return ();`, there is a mismatch between the\n function's return type and the value being returned.\n \"##,\n \n+E0070: r##\"\n+The left-hand side of an assignment operator must be an lvalue expression. An\n+lvalue expression represents a memory location and can be a variable (with\n+optional namespacing), a dereference, an indexing expression or a field\n+reference.\n+\n+More details can be found here:\n+https://doc.rust-lang.org/reference.html#lvalues,-rvalues-and-temporaries\n+\n+Now, we can go further. Here are some bad examples:\n+```\n+struct SomeStruct {\n+    x: i32,\n+    y: i32\n+}\n+const SOME_CONST : i32 = 12;\n+\n+fn some_other_func() {}\n+\n+fn some_function() {\n+    SOME_CONST = 14; // error : a constant value cannot be changed!\n+    1 = 3; // error : 1 isn't a valid lvalue!\n+    some_other_func() = 4; // error : we can't assign value to a function!\n+    SomeStruct.x = 12; // error : SomeStruct a structure name but it is used\n+                       // like a variable!\n+}\n+```\n+\n+And now let's give good examples:\n+\n+```\n+struct SomeStruct {\n+    x: i32,\n+    y: i32\n+}\n+let mut s = SomeStruct {x: 0, y: 0};\n+\n+s.x = 3; // that's good !\n+\n+// ...\n+\n+fn some_func(x: &mut i32) {\n+    *x = 12; // that's good !\n+}\n+```\n+\"##,\n+\n E0072: r##\"\n When defining a recursive struct or enum, any use of the type being defined\n from inside the definition must occur behind a pointer (like `Box` or `&`).\n@@ -931,7 +995,6 @@ register_diagnostics! {\n     E0060,\n     E0061,\n     E0068,\n-    E0070,\n     E0071,\n     E0074,\n     E0075,"}]}