{"sha": "c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26", "node_id": "C_kwDOAAsO6NoAKGMxZWM4ZmYxNGQ0OTE2NDJkOGM4YWU1YTlmM2M5NGRiNGVkYTlmMjY", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-17T20:45:11Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-18T13:25:17Z"}, "message": "dont unchecked create `ErrorGuaranteed` in `BorrowckErrors`", "tree": {"sha": "ace97d75783858dbf7a6508935ec00c965584baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ace97d75783858dbf7a6508935ec00c965584baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26", "html_url": "https://github.com/rust-lang/rust/commit/c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d46c7a3e69966782e163877151c1f0cea8b630a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d46c7a3e69966782e163877151c1f0cea8b630a", "html_url": "https://github.com/rust-lang/rust/commit/9d46c7a3e69966782e163877151c1f0cea8b630a"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "c9daed3ab00bea0656da58289d7c96da388c5566", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=c1ec8ff14d491642d8c8ae5a9f3c94db4eda9f26", "patch": "@@ -192,13 +192,13 @@ fn do_mir_borrowck<'tcx>(\n         }\n     }\n \n-    let mut errors = error::BorrowckErrors::new();\n+    let mut errors = error::BorrowckErrors::new(infcx.tcx);\n \n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_opt_const_arg(def);\n-    if let Some(ErrorGuaranteed { .. }) = tables.tainted_by_errors {\n+    if let Some(e) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n-        errors.set_tainted_by_errors();\n+        errors.set_tainted_by_errors(e);\n     }\n     let upvars: Vec<_> = tables\n         .closure_min_captures_flattened(def.did)\n@@ -2260,6 +2260,7 @@ mod error {\n     use super::*;\n \n     pub struct BorrowckErrors<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n         /// This field keeps track of move errors that are to be reported for given move indices.\n         ///\n         /// There are situations where many errors can be reported for a single move out (see #53807)\n@@ -2282,28 +2283,29 @@ mod error {\n         tainted_by_errors: Option<ErrorGuaranteed>,\n     }\n \n-    impl BorrowckErrors<'_> {\n-        pub fn new() -> Self {\n+    impl<'tcx> BorrowckErrors<'tcx> {\n+        pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n             BorrowckErrors {\n+                tcx,\n                 buffered_move_errors: BTreeMap::new(),\n                 buffered: Default::default(),\n                 tainted_by_errors: None,\n             }\n         }\n \n-        // FIXME(eddyb) this is a suboptimal API because `tainted_by_errors` is\n-        // set before any emission actually happens (weakening the guarantee).\n         pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorGuaranteed>) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+            self.tainted_by_errors = Some(\n+                self.tcx.sess.delay_span_bug(t.span.clone(), \"diagnostic buffered but not emitted\"),\n+            );\n             t.buffer(&mut self.buffered);\n         }\n \n         pub fn buffer_non_error_diag(&mut self, t: DiagnosticBuilder<'_, ()>) {\n             t.buffer(&mut self.buffered);\n         }\n \n-        pub fn set_tainted_by_errors(&mut self) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+        pub fn set_tainted_by_errors(&mut self, e: ErrorGuaranteed) {\n+            self.tainted_by_errors = Some(e);\n         }\n     }\n "}]}