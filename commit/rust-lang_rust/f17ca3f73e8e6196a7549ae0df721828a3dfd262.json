{"sha": "f17ca3f73e8e6196a7549ae0df721828a3dfd262", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxN2NhM2Y3M2U4ZTYxOTZhNzU0OWFlMGRmNzIxODI4YTNkZmQyNjI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-26T20:50:43Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-26T20:58:21Z"}, "message": "Some box cleanup that doesn't break the build.", "tree": {"sha": "79f3a22164cfa8945c5a33737dc639f7e2e06581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f3a22164cfa8945c5a33737dc639f7e2e06581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17ca3f73e8e6196a7549ae0df721828a3dfd262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17ca3f73e8e6196a7549ae0df721828a3dfd262", "html_url": "https://github.com/rust-lang/rust/commit/f17ca3f73e8e6196a7549ae0df721828a3dfd262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17ca3f73e8e6196a7549ae0df721828a3dfd262/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6413421c8ca1ae9075351613160bfa7cd5184f37", "url": "https://api.github.com/repos/rust-lang/rust/commits/6413421c8ca1ae9075351613160bfa7cd5184f37", "html_url": "https://github.com/rust-lang/rust/commit/6413421c8ca1ae9075351613160bfa7cd5184f37"}], "stats": {"total": 94, "additions": 42, "deletions": 52}, "files": [{"sha": "25dfb050abc6b86df17d8fa05e708829a8d6d0a0", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f17ca3f73e8e6196a7549ae0df721828a3dfd262", "patch": "@@ -63,12 +63,6 @@ enum dest {\n     ignore,\n }\n \n-// Heap selectors. Indicate which heap something should go on.\n-enum heap {\n-    heap_shared,\n-    heap_exchange,\n-}\n-\n fn dest_str(ccx: @crate_ctxt, d: dest) -> str {\n     alt d {\n       by_val(v) { #fmt[\"by_val(%s)\", val_str(ccx.tn, *v)] }\n@@ -398,18 +392,16 @@ fn malloc_general_dyn(bcx: block, t: ty::t, heap: heap, size: ValueRef) ->\n     ret {box: box, body: body};\n }\n \n-fn malloc_boxed(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n-    malloc_general_dyn(bcx, t, heap_shared,\n+fn malloc_general(bcx: block, t: ty::t, heap: heap) ->\n+    {box: ValueRef, body: ValueRef} {\n+    malloc_general_dyn(bcx, t, heap,\n                        llsize_of(bcx.ccx(), type_of(bcx.ccx(), t)))\n }\n-fn malloc_unique(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n-    malloc_general_dyn(bcx, t, heap_exchange,\n-                       llsize_of(bcx.ccx(), type_of(bcx.ccx(), t)))\n+fn malloc_boxed(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n+    malloc_general(bcx, t, heap_shared)\n }\n-\n-fn malloc_unique_dyn(bcx: block, t: ty::t, size: ValueRef\n-                    ) -> {box: ValueRef, body: ValueRef} {\n-    malloc_general_dyn(bcx, t, heap_exchange, size)\n+fn malloc_unique(bcx: block, t: ty::t) -> {box: ValueRef, body: ValueRef} {\n+    malloc_general(bcx, t, heap_exchange)\n }\n \n // Type descriptor and type glue stuff\n@@ -1487,6 +1479,19 @@ fn trans_lit(cx: block, e: @ast::expr, lit: ast::lit, dest: dest) -> block {\n     }\n }\n \n+\n+fn trans_boxed_expr(bcx: block, contents: @ast::expr,\n+                    t: ty::t, heap: heap,\n+                    dest: dest) -> block {\n+    let _icx = bcx.insn_ctxt(\"trans_boxed_expr\");\n+    let {box, body} = malloc_general(bcx, t, heap);\n+    add_clean_free(bcx, box, heap);\n+    let bcx = trans_expr_save_in(bcx, contents, body);\n+    revoke_clean(bcx, box);\n+    ret store_in_dest(bcx, box, dest);\n+}\n+\n+\n fn trans_unary(bcx: block, op: ast::unop, e: @ast::expr,\n                un_expr: @ast::expr, dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(\"trans_unary\");\n@@ -1509,35 +1514,25 @@ fn trans_unary(bcx: block, op: ast::unop, e: @ast::expr,\n     alt op {\n       ast::not {\n         let {bcx, val} = trans_temp_expr(bcx, e);\n-        ret store_in_dest(bcx, Not(bcx, val), dest);\n+        store_in_dest(bcx, Not(bcx, val), dest)\n       }\n       ast::neg {\n         let {bcx, val} = trans_temp_expr(bcx, e);\n         let neg = if ty::type_is_fp(e_ty) {\n             FNeg(bcx, val)\n         } else { Neg(bcx, val) };\n-        ret store_in_dest(bcx, neg, dest);\n+        store_in_dest(bcx, neg, dest)\n       }\n       ast::box(_) {\n-        let mut {box, body} = malloc_boxed(bcx, e_ty);\n-        add_clean_free(bcx, box, false);\n-        // Cast the body type to the type of the value. This is needed to\n-        // make enums work, since enums have a different LLVM type depending\n-        // on whether they're boxed or not\n-        let ccx = bcx.ccx();\n-        let llety = T_ptr(type_of(ccx, e_ty));\n-        body = PointerCast(bcx, body, llety);\n-        let bcx = trans_expr_save_in(bcx, e, body);\n-        revoke_clean(bcx, box);\n-        ret store_in_dest(bcx, box, dest);\n+        trans_boxed_expr(bcx, e, e_ty, heap_shared, dest)\n       }\n       ast::uniq(_) {\n-        ret uniq::trans_uniq(bcx, e, un_expr.id, dest);\n+        trans_boxed_expr(bcx, e, e_ty, heap_exchange, dest)\n       }\n       ast::deref {\n         bcx.sess().bug(\"deref expressions should have been \\\n                                translated using trans_lval(), not \\\n-                               trans_unary()\");\n+                               trans_unary()\")\n       }\n     }\n }"}, {"sha": "49bfd53a797e422799bb87e28b35058037628854", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f17ca3f73e8e6196a7549ae0df721828a3dfd262", "patch": "@@ -201,6 +201,12 @@ fn warn_not_to_commit(ccx: @crate_ctxt, msg: str) {\n     }\n }\n \n+// Heap selectors. Indicate which heap something should go on.\n+enum heap {\n+    heap_shared,\n+    heap_exchange,\n+}\n+\n enum cleantype {\n     normal_exit_only,\n     normal_exit_and_unwind\n@@ -274,9 +280,11 @@ fn add_clean_temp_mem(cx: block, val: ValueRef, ty: ty::t) {\n         scope_clean_changed(info);\n     }\n }\n-fn add_clean_free(cx: block, ptr: ValueRef, shared: bool) {\n-    let free_fn = if shared { {|a|base::trans_unique_free(a, ptr)} }\n-    else { {|a|base::trans_free(a, ptr)} };\n+fn add_clean_free(cx: block, ptr: ValueRef, heap: heap) {\n+    let free_fn = alt heap {\n+      heap_shared { {|a|base::trans_free(a, ptr)} }\n+      heap_exchange { {|a|base::trans_unique_free(a, ptr)} }\n+    };\n     in_scope_cx(cx) {|info|\n         vec::push(info.cleanups, clean_temp(ptr, free_fn,\n                                      normal_exit_and_unwind));"}, {"sha": "c0ed90df264b1ef14c08207de05dff4ca75fc88e", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=f17ca3f73e8e6196a7549ae0df721828a3dfd262", "patch": "@@ -285,7 +285,7 @@ fn trans_cast(bcx: block, val: @ast::expr, id: ast::node_id, dest: dest)\n     let ccx = bcx.ccx();\n     let v_ty = expr_ty(bcx, val);\n     let {box, body} = malloc_boxed(bcx, v_ty);\n-    add_clean_free(bcx, box, false);\n+    add_clean_free(bcx, box, heap_shared);\n     let bcx = trans_expr_save_in(bcx, val, body);\n     revoke_clean(bcx, box);\n     let result = get_dest_addr(dest);"}, {"sha": "4a471bd00591355d7379ffb7d2ddd5d20d8b615d", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=f17ca3f73e8e6196a7549ae0df721828a3dfd262", "patch": "@@ -5,8 +5,7 @@ import back::abi;\n import base::{call_memmove,\n               INIT, copy_val, load_if_immediate, get_tydesc,\n               sub_block, do_spill_noroot,\n-              dest, bcx_icx, non_gc_box_cast,\n-              heap, heap_exchange, heap_shared};\n+              dest, bcx_icx, non_gc_box_cast};\n import syntax::codemap::span;\n import shape::llsize_of;\n import build::*;\n@@ -167,14 +166,14 @@ fn trans_evec(bcx: block, args: [@ast::expr]/~,\n           ast::vstore_uniq {\n             let {bcx, val} = alloc_vec(bcx, unit_ty, args.len(),\n                                        heap_exchange);\n-            add_clean_free(bcx, val, true);\n+            add_clean_free(bcx, val, heap_exchange);\n             let dataptr = get_dataptr(bcx, get_bodyptr(bcx, val));\n             {bcx: bcx, val: val, dataptr: dataptr}\n           }\n           ast::vstore_box {\n             let {bcx, val} = alloc_vec(bcx, unit_ty, args.len(),\n                                        heap_shared);\n-            add_clean_free(bcx, val, true);\n+            add_clean_free(bcx, val, heap_shared);\n             let dataptr = get_dataptr(bcx, get_bodyptr(bcx, val));\n             {bcx: bcx, val: val, dataptr: dataptr}\n           }"}, {"sha": "e0440147f16b6add6410015bac532e527799a1e4", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17ca3f73e8e6196a7549ae0df721828a3dfd262/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=f17ca3f73e8e6196a7549ae0df721828a3dfd262", "patch": "@@ -5,19 +5,7 @@ import build::*;\n import base::*;\n import shape::llsize_of;\n \n-export trans_uniq, make_free_glue, autoderef, duplicate;\n-\n-fn trans_uniq(bcx: block, contents: @ast::expr,\n-              node_id: ast::node_id, dest: dest) -> block {\n-    let _icx = bcx.insn_ctxt(\"uniq::trans_uniq\");\n-    let uniq_ty = node_id_type(bcx, node_id);\n-    let contents_ty = content_ty(uniq_ty);\n-    let {box, body} = malloc_unique(bcx, contents_ty);\n-    add_clean_free(bcx, box, true);\n-    let bcx = trans_expr_save_in(bcx, contents, body);\n-    revoke_clean(bcx, box);\n-    ret store_in_dest(bcx, box, dest);\n-}\n+export make_free_glue, autoderef, duplicate;\n \n fn make_free_glue(bcx: block, vptr: ValueRef, t: ty::t)\n     -> block {\n@@ -64,4 +52,4 @@ fn duplicate(bcx: block, v: ValueRef, t: ty::t) -> result {\n     Store(bcx, td, dst_tydesc_ptr);\n \n     ret rslt(bcx, dst_box);\n-}\n\\ No newline at end of file\n+}"}]}