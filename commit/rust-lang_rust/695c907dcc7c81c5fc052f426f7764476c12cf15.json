{"sha": "695c907dcc7c81c5fc052f426f7764476c12cf15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NWM5MDdkY2M3YzgxYzVmYzA1MmY0MjZmNzc2NDQ3NmMxMmNmMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-06T13:16:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-06T13:16:03Z"}, "message": "Auto merge of #31410 - rkruppe:issue31109, r=pnkfelix\n\nIssue #31109 uncovered two semi-related problems:\n\n* A panic in `str::parse::<f64>`\n* A panic in `rustc::middle::const_eval::lit_to_const` where the result of float parsing was unwrapped.\n\nThis series of commits fixes both issues and also drive-by-fixes some things I noticed while tracking down the parsing panic.", "tree": {"sha": "31579fe2c0d9619d1a2101e5021cb266a8e7e4af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31579fe2c0d9619d1a2101e5021cb266a8e7e4af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695c907dcc7c81c5fc052f426f7764476c12cf15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695c907dcc7c81c5fc052f426f7764476c12cf15", "html_url": "https://github.com/rust-lang/rust/commit/695c907dcc7c81c5fc052f426f7764476c12cf15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695c907dcc7c81c5fc052f426f7764476c12cf15/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35635aebab321ff2a4708aeb172351356ad63cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/35635aebab321ff2a4708aeb172351356ad63cf7", "html_url": "https://github.com/rust-lang/rust/commit/35635aebab321ff2a4708aeb172351356ad63cf7"}, {"sha": "a76cb45e340f762d83a9501452db0581ba56db52", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76cb45e340f762d83a9501452db0581ba56db52", "html_url": "https://github.com/rust-lang/rust/commit/a76cb45e340f762d83a9501452db0581ba56db52"}], "stats": {"total": 160, "additions": 119, "deletions": 41}, "files": [{"sha": "725a715f7cf32935dcc81a2b0d976279a4b84b23", "filename": "src/etc/test-float-parse/_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2F_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2F_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2F_common.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -16,7 +16,7 @@ use std::mem::transmute;\n #[allow(dead_code)]\n pub const SEED: [u32; 3] = [0x243f_6a88, 0x85a3_08d3, 0x1319_8a2e];\n \n-pub fn validate(text: String) {\n+pub fn validate(text: &str) {\n     let mut out = io::stdout();\n     let x: f64 = text.parse().unwrap();\n     let f64_bytes: u64 = unsafe { transmute(x) };"}, {"sha": "2486df4446631858dab19c008b73cee3066f0a15", "filename": "src/etc/test-float-parse/few-ones.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Ffew-ones.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Ffew-ones.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Ffew-ones.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     for a in &pow {\n         for b in &pow {\n             for c in &pow {\n-                validate((a | b | c).to_string());\n+                validate(&(a | b | c).to_string());\n             }\n         }\n     }"}, {"sha": "9d12a03dae29017535802cd51d08d5a29d12b177", "filename": "src/etc/test-float-parse/huge-pow10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fhuge-pow10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fhuge-pow10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fhuge-pow10.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -15,7 +15,7 @@ use _common::validate;\n fn main() {\n     for e in 300..310 {\n         for i in 0..100000 {\n-            validate(format!(\"{}e{}\", i, e));\n+            validate(&format!(\"{}e{}\", i, e));\n         }\n     }\n }"}, {"sha": "9598bd12a0d45a67aee0e313a4c66e20a96b52a3", "filename": "src/etc/test-float-parse/long-fractions.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Flong-fractions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Flong-fractions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Flong-fractions.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod _common;\n+\n+use std::char;\n+use _common::validate;\n+\n+fn main() {\n+    for n in 0..10 {\n+        let digit = char::from_digit(n, 10).unwrap();\n+        let mut s = \"0.\".to_string();\n+        for _ in 0..400 {\n+            s.push(digit);\n+            if s.parse::<f64>().is_ok() {\n+                validate(&s);\n+            }\n+        }\n+    }\n+}"}, {"sha": "674c30ad84ed531da78959dd197a5885bea235cb", "filename": "src/etc/test-float-parse/many-digits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fmany-digits.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -23,9 +23,9 @@ fn main() {\n     let mut rnd = IsaacRng::from_seed(&SEED);\n     let mut range = Range::new(0, 10);\n     for _ in 0..5_000_000u64 {\n-        let num_digits = rnd.gen_range(100, 300);\n+        let num_digits = rnd.gen_range(100, 400);\n         let digits = gen_digits(num_digits, &mut range, &mut rnd);\n-        validate(digits);\n+        validate(&digits);\n     }\n }\n "}, {"sha": "1d82912054e2abc45725bbb320c7e1154361bac3", "filename": "src/etc/test-float-parse/rand-f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Frand-f64.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -25,7 +25,7 @@ fn main() {\n         let bits = rnd.next_u64();\n         let x: f64 = unsafe { transmute(bits) };\n         if x.is_finite() {\n-            validate(format!(\"{:e}\", x));\n+            validate(&format!(\"{:e}\", x));\n             i += 1;\n         }\n     }"}, {"sha": "896d63b9f0a01112aadadc68b59951da377b1858", "filename": "src/etc/test-float-parse/runtests.py", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fruntests.py?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -21,8 +21,9 @@\n \n The actual tests (generating decimal strings and feeding them to dec2flt) is\n performed by a set of stand-along rust programs. This script compiles, runs,\n-and supervises them. In particular, the programs report the strings they\n-generate and the floating point numbers they converted those strings to.\n+and supervises them. The programs report the strings they generate and the\n+floating point numbers they converted those strings to, and this script\n+checks that the results are correct.\n \n You can run specific tests rather than all of them by giving their names\n (without .rs extension) as command line parameters.\n@@ -64,9 +65,9 @@\n exit code that's not 0, the test fails.\n The output on stdout is treated as (f64, f32, decimal) record, encoded thusly:\n \n-- The first eight bytes are a binary64 (native endianness).\n-- The following four bytes are a binary32 (native endianness).\n-- Then the corresponding string input follows, in ASCII (no newline).\n+- First, the bits of the f64 encoded as an ASCII hex string.\n+- Second, the bits of the f32 encoded as an ASCII hex string.\n+- Then the corresponding string input, in ASCII\n - The record is terminated with a newline.\n \n Incomplete records are an error. Not-a-Number bit patterns are invalid too."}, {"sha": "4909f7c58f89a6f27e6c847ef635f0c3e2a94b9f", "filename": "src/etc/test-float-parse/short-decimals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fshort-decimals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fshort-decimals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fshort-decimals.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -22,8 +22,8 @@ fn main() {\n             if i % 10 == 0 {\n                 continue;\n             }\n-            validate(format!(\"{}e{}\", i, e));\n-            validate(format!(\"{}e-{}\", i, e));\n+            validate(&format!(\"{}e{}\", i, e));\n+            validate(&format!(\"{}e-{}\", i, e));\n         }\n     }\n }"}, {"sha": "04a7cc2746675477acc39ef100cbe40ddab65b84", "filename": "src/etc/test-float-parse/subnorm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fsubnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fsubnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fsubnorm.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -16,8 +16,8 @@ use _common::validate;\n fn main() {\n     for bits in 0u32..(1 << 21) {\n         let single: f32 = unsafe { transmute(bits) };\n-        validate(format!(\"{:e}\", single));\n+        validate(&format!(\"{:e}\", single));\n         let double: f64 = unsafe { transmute(bits as u64) };\n-        validate(format!(\"{:e}\", double));\n+        validate(&format!(\"{:e}\", double));\n     }\n }"}, {"sha": "50ca5e32609acba5051abdc644e56d812295909d", "filename": "src/etc/test-float-parse/tiny-pow10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Ftiny-pow10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Ftiny-pow10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Ftiny-pow10.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -15,7 +15,7 @@ use _common::validate;\n fn main() {\n     for e in 301..327 {\n         for i in 0..100000 {\n-            validate(format!(\"{}e-{}\", i, e));\n+            validate(&format!(\"{}e-{}\", i, e));\n         }\n     }\n }"}, {"sha": "571ac80e5b0c5ed71ff58a7c445a661ee682f693", "filename": "src/etc/test-float-parse/u32-small.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fu32-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fu32-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fu32-small.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -14,6 +14,6 @@ use _common::validate;\n \n fn main() {\n     for i in 0..(1 << 19) {\n-        validate(i.to_string());\n+        validate(&i.to_string());\n     }\n }"}, {"sha": "5b25c8399319c2ab9d5d4f6950bce834ee201a2f", "filename": "src/etc/test-float-parse/u64-pow2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fu64-pow2.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -16,13 +16,13 @@ use std::u64;\n fn main() {\n     for exp in 19..64 {\n         let power: u64 = 1 << exp;\n-        validate(power.to_string());\n+        validate(&power.to_string());\n         for offset in 1..123 {\n-            validate((power + offset).to_string());\n-            validate((power - offset).to_string());\n+            validate(&(power + offset).to_string());\n+            validate(&(power - offset).to_string());\n         }\n     }\n     for offset in 0..123 {\n-        validate((u64::MAX - offset).to_string());\n+        validate(&(u64::MAX - offset).to_string());\n     }\n }"}, {"sha": "e33c2814bf2f42727ecb791bd505520dfd5a32c6", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -127,7 +127,7 @@ fn algorithm_r<T: RawFloat>(f: &Big, e: i16, z0: T) -> T {\n         // This is written a bit awkwardly because our bignums don't support\n         // negative numbers, so we use the absolute value + sign information.\n         // The multiplication with m_digits can't overflow. If `x` or `y` are large enough that\n-        // we need to worry about overflow, then they are also large enough that`make_ratio` has\n+        // we need to worry about overflow, then they are also large enough that `make_ratio` has\n         // reduced the fraction by a factor of 2^64 or more.\n         let (d2, d_negative) = if x >= y {\n             // Don't need x any more, save a clone().\n@@ -278,7 +278,7 @@ fn quick_start<T: RawFloat>(u: &mut Big, v: &mut Big, k: &mut i16) {\n     // The target ratio is one where u/v is in an in-range significand. Thus our termination\n     // condition is log2(u / v) being the significand bits, plus/minus one.\n     // FIXME Looking at the second bit could improve the estimate and avoid some more divisions.\n-    let target_ratio = f64::sig_bits() as i16;\n+    let target_ratio = T::sig_bits() as i16;\n     let log2_u = u.bit_length() as i16;\n     let log2_v = v.bit_length() as i16;\n     let mut u_shift: i16 = 0;"}, {"sha": "c0690c24bbb68601bf48307bbea69dcf715e25e7", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -230,18 +230,15 @@ fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, ParseFloatError> {\n     if let Some(x) = trivial_cases(&decimal) {\n         return Ok(x);\n     }\n-    // AlgorithmM and AlgorithmR both compute approximately `f * 10^e`.\n-    let max_digits = decimal.integral.len() + decimal.fractional.len() +\n-                     decimal.exp.abs() as usize;\n     // Remove/shift out the decimal point.\n     let e = decimal.exp - decimal.fractional.len() as i64;\n     if let Some(x) = algorithm::fast_path(decimal.integral, decimal.fractional, e) {\n         return Ok(x);\n     }\n     // Big32x40 is limited to 1280 bits, which translates to about 385 decimal digits.\n-    // If we exceed this, perhaps while calculating `f * 10^e` in Algorithm R or Algorithm M,\n-    // we'll crash. So we error out before getting too close, with a generous safety margin.\n-    if max_digits > 375 {\n+    // If we exceed this, we'll crash, so we error out before getting too close (within 10^10).\n+    let upper_bound = bound_intermediate_digits(&decimal, e);\n+    if upper_bound > 375 {\n         return Err(pfe_invalid());\n     }\n     let f = digits_to_big(decimal.integral, decimal.fractional);\n@@ -251,7 +248,7 @@ fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, ParseFloatError> {\n     // FIXME These bounds are rather conservative. A more careful analysis of the failure modes\n     // of Bellerophon could allow using it in more cases for a massive speed up.\n     let exponent_in_range = table::MIN_E <= e && e <= table::MAX_E;\n-    let value_in_range = max_digits <= T::max_normal_digits();\n+    let value_in_range = upper_bound <= T::max_normal_digits() as u64;\n     if exponent_in_range && value_in_range {\n         Ok(algorithm::bellerophon(&f, e))\n     } else {\n@@ -288,13 +285,36 @@ fn simplify(decimal: &mut Decimal) {\n     }\n }\n \n+/// Quick and dirty upper bound on the size (log10) of the largest value that Algorithm R and\n+/// Algorithm M will compute while working on the given decimal.\n+fn bound_intermediate_digits(decimal: &Decimal, e: i64) -> u64 {\n+    // We don't need to worry too much about overflow here thanks to trivial_cases() and the\n+    // parser, which filter out the most extreme inputs for us.\n+    let f_len: u64 = decimal.integral.len() as u64 + decimal.fractional.len() as u64;\n+    if e >= 0 {\n+        // In the case e >= 0, both algorithms compute about `f * 10^e`. Algorithm R proceeds to\n+        // do some complicated calculations with this but we can ignore that for the upper bound\n+        // because it also reduces the fraction beforehand, so we have plenty of buffer there.\n+        f_len + (e as u64)\n+    } else {\n+        // If e < 0, Algorithm R does roughly the same thing, but Algorithm M differs:\n+        // It tries to find a positive number k such that `f << k / 10^e` is an in-range\n+        // significand. This will result in about `2^53 * f * 10^e` < `10^17 * f * 10^e`.\n+        // One input that triggers this is 0.33...33 (375 x 3).\n+        f_len + (e.abs() as u64) + 17\n+    }\n+}\n+\n /// Detect obvious overflows and underflows without even looking at the decimal digits.\n fn trivial_cases<T: RawFloat>(decimal: &Decimal) -> Option<T> {\n     // There were zeros but they were stripped by simplify()\n     if decimal.integral.is_empty() && decimal.fractional.is_empty() {\n         return Some(T::zero());\n     }\n-    // This is a crude approximation of ceil(log10(the real value)).\n+    // This is a crude approximation of ceil(log10(the real value)). We don't need to worry too\n+    // much about overflow here because the input length is tiny (at least compared to 2^64) and\n+    // the parser already handles exponents whose absolute value is greater than 10^18\n+    // (which is still 10^19 short of 2^64).\n     let max_place = decimal.exp + decimal.integral.len() as i64;\n     if max_place > T::inf_cutoff() {\n         return Some(T::infinity());"}, {"sha": "fe6f52406fbc834406485e732d1583407f38f9ec", "filename": "src/libcoretest/num/dec2flt/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fdec2flt%2Fmod.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -25,13 +25,11 @@ macro_rules! test_literal {\n         let x64: f64 = $x;\n         let inputs = &[stringify!($x).into(), format!(\"{:?}\", x64), format!(\"{:e}\", x64)];\n         for input in inputs {\n-            if input != \"inf\" {\n-                assert_eq!(input.parse(), Ok(x64));\n-                assert_eq!(input.parse(), Ok(x32));\n-                let neg_input = &format!(\"-{}\", input);\n-                assert_eq!(neg_input.parse(), Ok(-x64));\n-                assert_eq!(neg_input.parse(), Ok(-x32));\n-            }\n+            assert_eq!(input.parse(), Ok(x64));\n+            assert_eq!(input.parse(), Ok(x32));\n+            let neg_input = &format!(\"-{}\", input);\n+            assert_eq!(neg_input.parse(), Ok(-x64));\n+            assert_eq!(neg_input.parse(), Ok(-x32));\n         }\n     })\n }\n@@ -136,6 +134,17 @@ fn massive_exponent() {\n     assert_eq!(format!(\"1e{}000\", max).parse(), Ok(f64::INFINITY));\n }\n \n+#[test]\n+fn borderline_overflow() {\n+    let mut s = \"0.\".to_string();\n+    for _ in 0..375 {\n+        s.push('3');\n+    }\n+    // At the time of this writing, this returns Err(..), but this is a bug that should be fixed.\n+    // It makes no sense to enshrine that in a test, the important part is that it doesn't panic.\n+    let _ = s.parse::<f64>();\n+}\n+\n #[bench]\n fn bench_0(b: &mut test::Bencher) {\n     b.iter(|| \"0.0\".parse::<f64>());"}, {"sha": "e5fc83cc5f35cc2891a8f7123c42695e32cd8c16", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -26,6 +26,7 @@ use middle::ty::{self, Ty};\n use middle::astconv_util::ast_ty_to_prim_ty;\n use util::num::ToPrimitive;\n use util::nodemap::NodeMap;\n+use session::Session;\n \n use graphviz::IntoCow;\n use syntax::ast;\n@@ -1117,7 +1118,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           debug!(\"const call({:?})\", call_args);\n           try!(eval_const_expr_partial(tcx, &**result, ty_hint, Some(&call_args)))\n       },\n-      hir::ExprLit(ref lit) => lit_to_const(&**lit, ety),\n+      hir::ExprLit(ref lit) => lit_to_const(tcx.sess, e.span, &**lit, ety),\n       hir::ExprBlock(ref block) => {\n         match block.expr {\n             Some(ref expr) => try!(eval_const_expr_partial(tcx, &**expr, ty_hint, fn_args)),\n@@ -1319,7 +1320,7 @@ fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult {\n     }\n }\n \n-fn lit_to_const(lit: &ast::Lit, ty_hint: Option<Ty>) -> ConstVal {\n+fn lit_to_const(sess: &Session, span: Span, lit: &ast::Lit, ty_hint: Option<Ty>) -> ConstVal {\n     match lit.node {\n         ast::LitStr(ref s, _) => Str((*s).clone()),\n         ast::LitByteStr(ref data) => {\n@@ -1339,7 +1340,12 @@ fn lit_to_const(lit: &ast::Lit, ty_hint: Option<Ty>) -> ConstVal {\n         ast::LitInt(n, ast::UnsignedIntLit(_)) => Uint(n),\n         ast::LitFloat(ref n, _) |\n         ast::LitFloatUnsuffixed(ref n) => {\n-            Float(n.parse::<f64>().unwrap() as f64)\n+            if let Ok(x) = n.parse::<f64>() {\n+                Float(x)\n+            } else {\n+                // FIXME(#31407) this is only necessary because float parsing is buggy\n+                sess.span_bug(span, \"could not evaluate float literal (see issue #31407)\");\n+            }\n         }\n         ast::LitBool(b) => Bool(b)\n     }"}, {"sha": "63b3d58b8231bf349f9b70d3120ff84a79c06099", "filename": "src/test/compile-fail/issue-31109.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695c907dcc7c81c5fc052f426f7764476c12cf15/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs?ref=695c907dcc7c81c5fc052f426f7764476c12cf15", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // FIXME(#31407) this error should go away, but in the meantime we test that it\n+    // is accompanied by a somewhat useful error message.\n+    let _: f64 = 1234567890123456789012345678901234567890e-340; //~ ERROR could not evaluate float\n+}"}]}