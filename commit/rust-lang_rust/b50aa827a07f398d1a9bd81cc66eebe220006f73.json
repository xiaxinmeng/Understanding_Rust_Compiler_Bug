{"sha": "b50aa827a07f398d1a9bd81cc66eebe220006f73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MGFhODI3YTA3ZjM5OGQxYTliZDgxY2M2NmVlYmUyMjAwMDZmNzM=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-04-30T00:21:59Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-04-30T00:35:36Z"}, "message": "librustc: Fix pattern matching on cross crate newtype structs.", "tree": {"sha": "a7599a4ae70bba7bd6d8112454fb1b5012a51b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7599a4ae70bba7bd6d8112454fb1b5012a51b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b50aa827a07f398d1a9bd81cc66eebe220006f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b50aa827a07f398d1a9bd81cc66eebe220006f73", "html_url": "https://github.com/rust-lang/rust/commit/b50aa827a07f398d1a9bd81cc66eebe220006f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b50aa827a07f398d1a9bd81cc66eebe220006f73/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbcc3fe63a71d92d194d99dfd5e73fb62d09e79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbcc3fe63a71d92d194d99dfd5e73fb62d09e79a", "html_url": "https://github.com/rust-lang/rust/commit/dbcc3fe63a71d92d194d99dfd5e73fb62d09e79a"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "852eb1b50a499d1500b3c0f620db9c689b1d1305", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b50aa827a07f398d1a9bd81cc66eebe220006f73", "patch": "@@ -551,6 +551,8 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                         Some(vec::append(args, vec::from_slice(r.tail())))\n                     }\n                     def_variant(_, _) => None,\n+\n+                    def_fn(*) |\n                     def_struct(*) => {\n                         // FIXME #4731: Is this right? --pcw\n                         let new_args;"}, {"sha": "1d0fc7053242bb20bf2fec48929079e379a52317", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b50aa827a07f398d1a9bd81cc66eebe220006f73", "patch": "@@ -915,6 +915,7 @@ pub impl mem_categorization_ctxt {\n                         self.cat_pattern(subcmt, *subpat, op);\n                     }\n                 }\n+                Some(&ast::def_fn(*)) |\n                 Some(&ast::def_struct(*)) => {\n                     for subpats.each |subpat| {\n                         let cmt_field = self.cat_anon_struct_field(*subpat,"}, {"sha": "d56474df2b0f8b59c8aa8c0dbcdb6f1550c5316e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b50aa827a07f398d1a9bd81cc66eebe220006f73", "patch": "@@ -4279,6 +4279,7 @@ pub impl Resolver {\n                 pat_enum(path, _) => {\n                     // This must be an enum variant, struct or const.\n                     match self.resolve_path(path, ValueNS, false, visitor) {\n+                        Some(def @ def_fn(*))      |\n                         Some(def @ def_variant(*)) |\n                         Some(def @ def_struct(*))  |\n                         Some(def @ def_const(*)) => {"}, {"sha": "3755cca8c35e97acf40a44b302acba8da1ef7957", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b50aa827a07f398d1a9bd81cc66eebe220006f73/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=b50aa827a07f398d1a9bd81cc66eebe220006f73", "patch": "@@ -291,6 +291,7 @@ pub fn variant_opt(bcx: block, pat_id: ast::node_id)\n             }\n             ::core::util::unreachable();\n         }\n+        ast::def_fn(*) |\n         ast::def_struct(_) => {\n             return lit(UnitLikeStructLit(pat_id));\n         }\n@@ -818,6 +819,7 @@ pub fn get_options(bcx: block, m: &[@Match], col: uint) -> ~[Opt] {\n                 // This could be one of: a tuple-like enum variant, a\n                 // struct-like enum variant, or a struct.\n                 match ccx.tcx.def_map.find(&cur.id) {\n+                    Some(&ast::def_fn(*)) |\n                     Some(&ast::def_variant(*)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    variant_opt(bcx, cur.id));\n@@ -1011,6 +1013,7 @@ pub fn any_tuple_struct_pat(bcx: block, m: &[@Match], col: uint) -> bool {\n         match pat.node {\n             ast::pat_enum(_, Some(_)) => {\n                 match bcx.tcx().def_map.find(&pat.id) {\n+                    Some(&ast::def_fn(*)) |\n                     Some(&ast::def_struct(*)) => true,\n                     _ => false\n                 }\n@@ -1780,6 +1783,7 @@ pub fn bind_irrefutable_pat(bcx: block,\n                         }\n                     }\n                 }\n+                Some(&ast::def_fn(*)) |\n                 Some(&ast::def_struct(*)) => {\n                     match *sub_pats {\n                         None => {"}]}