{"sha": "3ebe0543626111475a2658c544b6d582d199d147", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYmUwNTQzNjI2MTExNDc1YTI2NThjNTQ0YjZkNTgyZDE5OWQxNDc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-08T04:07:42Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-08T04:07:42Z"}, "message": "Replace into() on &str with to_owned()", "tree": {"sha": "a0db0b8f26a059249c0b519334d6b944c8ddf4ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0db0b8f26a059249c0b519334d6b944c8ddf4ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ebe0543626111475a2658c544b6d582d199d147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe0543626111475a2658c544b6d582d199d147", "html_url": "https://github.com/rust-lang/rust/commit/3ebe0543626111475a2658c544b6d582d199d147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ebe0543626111475a2658c544b6d582d199d147/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c776443981d08ccad32ca536554a86a3a46c89b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c776443981d08ccad32ca536554a86a3a46c89b2", "html_url": "https://github.com/rust-lang/rust/commit/c776443981d08ccad32ca536554a86a3a46c89b2"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "c42fbb6f7cf656b27db32c29a3c4490cd6678e9c", "filename": "src/bin/rustfmt-format-diff.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fbin%2Frustfmt-format-diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fbin%2Frustfmt-format-diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt-format-diff.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -120,7 +120,7 @@ fn run(opts: &getopts::Options) -> Result<(), FormatDiffError> {\n \n     let filter = matches\n         .opt_str(\"f\")\n-        .unwrap_or_else(|| DEFAULT_PATTERN.into());\n+        .unwrap_or_else(|| DEFAULT_PATTERN.to_owned());\n \n     let skip_prefix = matches\n         .opt_str(\"p\")\n@@ -247,19 +247,19 @@ fn scan_simple_git_diff() {\n         &ranges,\n         &[\n             Range {\n-                file: \"src/ir/item.rs\".into(),\n+                file: \"src/ir/item.rs\".to_owned(),\n                 range: [148, 158],\n             },\n             Range {\n-                file: \"src/ir/item.rs\".into(),\n+                file: \"src/ir/item.rs\".to_owned(),\n                 range: [160, 170],\n             },\n             Range {\n-                file: \"src/ir/traversal.rs\".into(),\n+                file: \"src/ir/traversal.rs\".to_owned(),\n                 range: [9, 16],\n             },\n             Range {\n-                file: \"src/ir/traversal.rs\".into(),\n+                file: \"src/ir/traversal.rs\".to_owned(),\n                 range: [35, 43],\n             }\n         ]"}, {"sha": "8cd491b6ee38cf3ed8cbf34f17d2a70b7f6b4b62", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -918,7 +918,7 @@ pub fn recover_comment_removed(\n     let snippet = context.snippet(span);\n     if snippet != new && changed_comment_content(&snippet, &new) {\n         // We missed some comments. Keep the original text.\n-        Some(snippet.into())\n+        Some(snippet.to_owned())\n     } else {\n         Some(new)\n     }"}, {"sha": "9fa1d794457a6e5422477d940c56eea2131fed88", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -58,7 +58,7 @@ pub fn format_expr(\n     skip_out_of_file_lines_range!(context, expr.span);\n \n     if contains_skip(&*expr.attrs) {\n-        return Some(context.snippet(expr.span()).into());\n+        return Some(context.snippet(expr.span()).to_owned());\n     }\n \n     let expr_rw = match expr.node {\n@@ -168,7 +168,7 @@ pub fn format_expr(\n         ast::ExprKind::Mac(ref mac) => {\n             rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n                 wrap_str(\n-                    context.snippet(expr.span).into(),\n+                    context.snippet(expr.span).to_owned(),\n                     context.config.max_width(),\n                     shape,\n                 )\n@@ -241,7 +241,7 @@ pub fn format_expr(\n                     } else if needs_space_before_range(context, lhs) {\n                         format!(\" {}\", delim)\n                     } else {\n-                        delim.into()\n+                        delim.to_owned()\n                     };\n                     rewrite_pair(\n                         &*lhs,\n@@ -256,25 +256,25 @@ pub fn format_expr(\n                     let sp_delim = if context.config.spaces_around_ranges() {\n                         format!(\"{} \", delim)\n                     } else {\n-                        delim.into()\n+                        delim.to_owned()\n                     };\n                     rewrite_unary_prefix(context, &sp_delim, &*rhs, shape)\n                 }\n                 (Some(lhs), None) => {\n                     let sp_delim = if context.config.spaces_around_ranges() {\n                         format!(\" {}\", delim)\n                     } else {\n-                        delim.into()\n+                        delim.to_owned()\n                     };\n                     rewrite_unary_suffix(context, &sp_delim, &*lhs, shape)\n                 }\n-                (None, None) => Some(delim.into()),\n+                (None, None) => Some(delim.to_owned()),\n             }\n         }\n         // We do not format these expressions yet, but they should still\n         // satisfy our width restrictions.\n         ast::ExprKind::InPlace(..) | ast::ExprKind::InlineAsm(..) => {\n-            Some(context.snippet(expr.span).into())\n+            Some(context.snippet(expr.span).to_owned())\n         }\n         ast::ExprKind::Catch(ref block) => {\n             if let rw @ Some(_) = rewrite_single_line_block(context, \"do catch \", block, shape) {\n@@ -1308,7 +1308,7 @@ fn rewrite_match(\n             Some(format!(\"match {} {{}}\", cond_str))\n         } else {\n             // Empty match with comments or inner attributes? We are not going to bother, sorry ;)\n-            Some(context.snippet(span).into())\n+            Some(context.snippet(span).to_owned())\n         }\n     } else {\n         Some(format!(\n@@ -1768,7 +1768,7 @@ pub fn rewrite_literal(context: &RewriteContext, l: &ast::Lit, shape: Shape) ->\n     match l.node {\n         ast::LitKind::Str(_, ast::StrStyle::Cooked) => rewrite_string_lit(context, l.span, shape),\n         _ => wrap_str(\n-            context.snippet(l.span).into(),\n+            context.snippet(l.span).to_owned(),\n             context.config.max_width(),\n             shape,\n         ),\n@@ -1802,7 +1802,7 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n             );\n             return wrap_str(indented_string_lit, context.config.max_width(), shape);\n         } else {\n-            return wrap_str(string_lit.into(), context.config.max_width(), shape);\n+            return wrap_str(string_lit.to_owned(), context.config.max_width(), shape);\n         }\n     }\n \n@@ -2534,7 +2534,7 @@ pub fn rewrite_field(\n     prefix_max_width: usize,\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n-        return Some(context.snippet(field.span()).into());\n+        return Some(context.snippet(field.span()).to_owned());\n     }\n     let name = &field.ident.node.to_string();\n     if field.is_shorthand {"}, {"sha": "9fbf814919a230e6148448b3307beae0f2264724", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -148,7 +148,7 @@ impl Rewrite for ast::UseTree {\n                     let path_str = rewrite_prefix(&self.prefix, context, prefix_shape)?;\n                     Some(format!(\"{}::*\", path_str))\n                 } else {\n-                    Some(\"*\".into())\n+                    Some(\"*\".to_owned())\n                 }\n             }\n             ast::UseTreeKind::Simple(ident) => {\n@@ -184,7 +184,7 @@ fn rewrite_import(\n         .and_then(|shape| match tree.kind {\n             // If we have an empty nested group with no attributes, we erase it\n             ast::UseTreeKind::Nested(ref items) if items.is_empty() && attrs.is_empty() => {\n-                Some(\"\".into())\n+                Some(\"\".to_owned())\n             }\n             _ => tree.rewrite(context, shape),\n         });"}, {"sha": "b3647f26f5333ebd2f27d4a9cdb994cef07b7c3a", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -382,7 +382,7 @@ impl<'a> FmtVisitor<'a> {\n \n                             format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n                                 .map(|s| s + suffix)\n-                                .or_else(|| Some(self.snippet(e.span).into()))\n+                                .or_else(|| Some(self.snippet(e.span).to_owned()))\n                         }\n                         None => stmt.rewrite(&self.get_context(), self.shape()),\n                     }\n@@ -526,7 +526,7 @@ impl<'a> FmtVisitor<'a> {\n         if contains_skip(&field.node.attrs) {\n             let lo = field.node.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n-            return Some(self.snippet(span).into());\n+            return Some(self.snippet(span).to_owned());\n         }\n \n         let context = self.get_context();\n@@ -1428,7 +1428,7 @@ pub fn rewrite_struct_field(\n ) -> Option<String> {\n     if contains_skip(&field.attrs) {\n         let snippet = context.snippet(mk_sp(field.attrs[0].span.lo(), field.span.hi()));\n-        return Some(snippet.into());\n+        return Some(snippet.to_owned());\n     }\n \n     let type_annotation_spacing = type_annotation_spacing(context.config);"}, {"sha": "3c5db3c977abf1ccfb25b30faa5f259824578dce", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -162,7 +162,7 @@ pub fn rewrite_macro(\n         loop {\n             match parse_macro_arg(&mut parser) {\n                 Some(arg) => arg_vec.push(arg),\n-                None => return Some(context.snippet(mac.span).into()),\n+                None => return Some(context.snippet(mac.span).to_owned()),\n             }\n \n             match parser.token {\n@@ -182,13 +182,13 @@ pub fn rewrite_macro(\n                                         break;\n                                     }\n                                 }\n-                                None => return Some(context.snippet(mac.span).into()),\n+                                None => return Some(context.snippet(mac.span).to_owned()),\n                             }\n                         }\n                     }\n-                    return Some(context.snippet(mac.span).into());\n+                    return Some(context.snippet(mac.span).to_owned());\n                 }\n-                _ => return Some(context.snippet(mac.span).into()),\n+                _ => return Some(context.snippet(mac.span).to_owned()),\n             }\n \n             parser.bump();"}, {"sha": "74ae537e53421da1e3979fbdbf0a53be4b71e28e", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -122,7 +122,7 @@ impl Rewrite for Pat {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             // FIXME(#819) format pattern macros.\n-            PatKind::Mac(..) => Some(context.snippet(self.span).into()),\n+            PatKind::Mac(..) => Some(context.snippet(self.span).to_owned()),\n         }\n     }\n }"}, {"sha": "69633568755c4f0f3bfae37f40ebf77f8f94bdbb", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -180,10 +180,10 @@ mod test {\n                 Mismatch {\n                     line_number: 2,\n                     lines: vec![\n-                        Context(\"two\".into()),\n-                        Resulting(\"three\".into()),\n-                        Expected(\"trois\".into()),\n-                        Context(\"four\".into()),\n+                        Context(\"two\".to_owned()),\n+                        Resulting(\"three\".to_owned()),\n+                        Expected(\"trois\".to_owned()),\n+                        Context(\"four\".to_owned()),\n                     ],\n                 },\n             ]\n@@ -201,18 +201,18 @@ mod test {\n                 Mismatch {\n                     line_number: 2,\n                     lines: vec![\n-                        Context(\"two\".into()),\n-                        Resulting(\"three\".into()),\n-                        Expected(\"trois\".into()),\n-                        Context(\"four\".into()),\n+                        Context(\"two\".to_owned()),\n+                        Resulting(\"three\".to_owned()),\n+                        Expected(\"trois\".to_owned()),\n+                        Context(\"four\".to_owned()),\n                     ],\n                 },\n                 Mismatch {\n                     line_number: 5,\n                     lines: vec![\n-                        Resulting(\"five\".into()),\n-                        Expected(\"cinq\".into()),\n-                        Context(\"six\".into()),\n+                        Resulting(\"five\".to_owned()),\n+                        Expected(\"cinq\".to_owned()),\n+                        Context(\"six\".to_owned()),\n                     ],\n                 },\n             ]\n@@ -229,7 +229,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 3,\n-                    lines: vec![Resulting(\"three\".into()), Expected(\"trois\".into())],\n+                    lines: vec![Resulting(\"three\".to_owned()), Expected(\"trois\".to_owned())],\n                 },\n             ]\n         );\n@@ -245,7 +245,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 5,\n-                    lines: vec![Context(\"five\".into()), Expected(\"\".into())],\n+                    lines: vec![Context(\"five\".to_owned()), Expected(\"\".to_owned())],\n                 },\n             ]\n         );"}, {"sha": "2ba0b744a5853aeddde8a9674aa0ceebe9ae7c33", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ebe0543626111475a2658c544b6d582d199d147/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebe0543626111475a2658c544b6d582d199d147/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3ebe0543626111475a2658c544b6d582d199d147", "patch": "@@ -420,7 +420,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.push_rewrite(item.span, rewrite);\n             }\n             ast::ItemKind::GlobalAsm(..) => {\n-                let snippet = Some(self.snippet(item.span).into());\n+                let snippet = Some(self.snippet(item.span).to_owned());\n                 self.push_rewrite(item.span, snippet);\n             }\n             ast::ItemKind::MacroDef(..) => {\n@@ -831,7 +831,7 @@ impl Rewrite for ast::Attribute {\n             rewrite_comment(snippet, false, doc_shape, context.config)\n         } else {\n             if contains_comment(snippet) {\n-                return Some(snippet.into());\n+                return Some(snippet.to_owned());\n             }\n             // 1 = `[`\n             let shape = shape.offset_left(prefix.len() + 1)?;\n@@ -1043,7 +1043,7 @@ pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Optio\n     assert!(is_extern_crate(item));\n     let new_str = context.snippet(item.span);\n     Some(if contains_comment(&new_str) {\n-        new_str.into()\n+        new_str.to_owned()\n     } else {\n         let no_whitespace = &new_str.split_whitespace().collect::<Vec<&str>>().join(\" \");\n         String::from(&*Regex::new(r\"\\s;\").unwrap().replace(no_whitespace, \";\"))"}]}