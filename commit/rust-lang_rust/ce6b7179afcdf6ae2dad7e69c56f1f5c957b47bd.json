{"sha": "ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "node_id": "C_kwDOAAsO6NoAKGNlNmI3MTc5YWZjZGY2YWUyZGFkN2U2OWM1NmYxZjVjOTU3YjQ3YmQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-05T21:29:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-05T21:29:36Z"}, "message": "Detect closures assigned to binding in block\n\nFix #58497.", "tree": {"sha": "8f233d536051217a3705a84b8c79c2ebaaa3cee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f233d536051217a3705a84b8c79c2ebaaa3cee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "html_url": "https://github.com/rust-lang/rust/commit/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d284af117716473e1a35cc0d91c170e44e3fc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d284af117716473e1a35cc0d91c170e44e3fc6e", "html_url": "https://github.com/rust-lang/rust/commit/1d284af117716473e1a35cc0d91c170e44e3fc6e"}], "stats": {"total": 109, "additions": 74, "deletions": 35}, "files": [{"sha": "a4943d112042dc212d419f0247933a88cecb158a", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -440,15 +440,14 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         closure_kind: &str,\n         borrowed_path: &str,\n         capture_span: Span,\n+        scope: &str,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             closure_span,\n             E0373,\n-            \"{} may outlive the current function, but it borrows {}, which is owned by the current \\\n-             function\",\n-            closure_kind,\n-            borrowed_path,\n+            \"{closure_kind} may outlive the current {scope}, but it borrows {borrowed_path}, \\\n+             which is owned by the current {scope}\",\n         );\n         err.span_label(capture_span, format!(\"{} is borrowed here\", borrowed_path))\n             .span_label(closure_span, format!(\"may outlive borrowed value {}\", borrowed_path));"}, {"sha": "d99bfc01a4298ccd50fb8d7fa0adec260065e361", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -1423,6 +1423,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             //\n             // then just use the normal error. The closure isn't escaping\n             // and `move` will not help here.\n+            (\n+                Some(name),\n+                BorrowExplanation::UsedLater(LaterUseKind::ClosureCapture, var_or_use_span, _),\n+            ) => self.report_escaping_closure_capture(\n+                borrow_spans,\n+                borrow_span,\n+                &RegionName {\n+                    name: self.synthesize_region_name(),\n+                    source: RegionNameSource::Static,\n+                },\n+                ConstraintCategory::CallArgument(None),\n+                var_or_use_span,\n+                &format!(\"`{}`\", name),\n+                \"block\",\n+            ),\n             (\n                 Some(name),\n                 BorrowExplanation::MustBeValidFor {\n@@ -1443,6 +1458,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     category,\n                     span,\n                     &format!(\"`{}`\", name),\n+                    \"function\",\n                 ),\n             (\n                 name,\n@@ -1895,6 +1911,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         Some(err)\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn report_escaping_closure_capture(\n         &mut self,\n         use_span: UseSpans<'tcx>,\n@@ -1903,6 +1920,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         category: ConstraintCategory<'tcx>,\n         constraint_span: Span,\n         captured_var: &str,\n+        scope: &str,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         let tcx = self.infcx.tcx;\n         let args_span = use_span.args_or_use();\n@@ -1933,8 +1951,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             None => \"closure\",\n         };\n \n-        let mut err =\n-            self.cannot_capture_in_long_lived_closure(args_span, kind, captured_var, var_span);\n+        let mut err = self.cannot_capture_in_long_lived_closure(\n+            args_span,\n+            kind,\n+            captured_var,\n+            var_span,\n+            scope,\n+        );\n         err.span_suggestion_verbose(\n             sugg_span,\n             &format!(\n@@ -1956,10 +1979,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if matches!(use_span.generator_kind(), Some(GeneratorKind::Async(_))) {\n                     err.note(\n                         \"async blocks are not executed immediately and must either take a \\\n-                    reference or ownership of outside variables they use\",\n+                         reference or ownership of outside variables they use\",\n                     );\n                 } else {\n-                    let msg = format!(\"function requires argument type to outlive `{}`\", fr_name);\n+                    let msg = format!(\"{scope} requires argument type to outlive `{fr_name}`\");\n                     err.span_note(constraint_span, &msg);\n                 }\n             }"}, {"sha": "c4ae30151c4bd2ee6eac2beea26dbed1d1438a4d", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -444,6 +444,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// First span returned points to the location of the conflicting use\n     /// Second span if `Some` is returned in the case of closures and points\n     /// to the use of the path\n+    #[instrument(level = \"debug\", skip(self))]\n     fn later_use_kind(\n         &self,\n         borrow: &BorrowData<'tcx>,\n@@ -461,11 +462,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let block = &self.body.basic_blocks[location.block];\n \n                 let kind = if let Some(&Statement {\n-                    kind: StatementKind::FakeRead(box (FakeReadCause::ForLet(_), _)),\n+                    kind: StatementKind::FakeRead(box (FakeReadCause::ForLet(_), place)),\n                     ..\n                 }) = block.statements.get(location.statement_index)\n                 {\n-                    LaterUseKind::FakeLetRead\n+                    if let Some(l) = place.as_local()\n+                        && let local_decl = &self.body.local_decls[l]\n+                        && local_decl.ty.is_closure()\n+                    {\n+                        LaterUseKind::ClosureCapture\n+                    } else {\n+                        LaterUseKind::FakeLetRead\n+                    }\n                 } else if self.was_captured_by_trait_object(borrow) {\n                     LaterUseKind::TraitCapture\n                 } else if location.statement_index == block.statements.len() {"}, {"sha": "579ce90a760f2e977ee9a0a1e65da7827590c4ca", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -200,7 +200,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// increment the counter.\n     ///\n     /// This is _not_ idempotent. Call `give_region_a_name` when possible.\n-    fn synthesize_region_name(&self) -> Symbol {\n+    pub(crate) fn synthesize_region_name(&self) -> Symbol {\n         let c = self.next_region_name.replace_with(|counter| *counter + 1);\n         Symbol::intern(&format!(\"'{:?}\", c))\n     }"}, {"sha": "00f50c33e1ccdb6b64ffb17488756027661ea5d1", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.rs?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -8,10 +8,9 @@ struct Point {\n fn main() {\n     let mut c = {\n         let mut p = Point {x: \"1\".to_string(), y: \"2\".to_string() };\n-        || {\n+        || { //~ ERROR closure may outlive the current block, but it borrows `p`\n            let x = &mut p.x;\n            println!(\"{:?}\", p);\n-            //~^ ERROR `p` does not live long enough\n         }\n     };\n     c();"}, {"sha": "ee923804786852c807d88782b9caa5126d5ba775", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/borrowck/borrowck-3.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fborrowck%2Fborrowck-3.stderr?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -1,18 +1,22 @@\n-error[E0597]: `p` does not live long enough\n-  --> $DIR/borrowck-3.rs:13:29\n+error[E0373]: closure may outlive the current block, but it borrows `p`, which is owned by the current block\n+  --> $DIR/borrowck-3.rs:11:9\n    |\n-LL |     let mut c = {\n-   |         ----- borrow later stored here\n-LL |         let mut p = Point {x: \"1\".to_string(), y: \"2\".to_string() };\n LL |         || {\n-   |         -- value captured here\n+   |         ^^ may outlive borrowed value `p`\n LL |            let x = &mut p.x;\n LL |            println!(\"{:?}\", p);\n-   |                             ^ borrowed value does not live long enough\n-...\n-LL |     };\n-   |     - `p` dropped here while still borrowed\n+   |                             - `p` is borrowed here\n+   |\n+note: block requires argument type to outlive `'1`\n+  --> $DIR/borrowck-3.rs:9:9\n+   |\n+LL |     let mut c = {\n+   |         ^^^^^\n+help: to force the closure to take ownership of `p` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         move || {\n+   |         ++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "51fe118c93ff146c6f67d8da2cdf9437f1d21daa", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     let _f = {\n         let x = 0;\n-        || x //~ ERROR `x` does not live long enough\n+        || x //~ ERROR closure may outlive the current block, but it borrows `x`\n     };\n     _f;\n }"}, {"sha": "43e9af24a7c2bc0d655e0cb36b2145a6284fe741", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.stderr", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -1,16 +1,21 @@\n-error[E0597]: `x` does not live long enough\n-  --> $DIR/unboxed-closure-region.rs:8:12\n+error[E0373]: closure may outlive the current block, but it borrows `x`, which is owned by the current block\n+  --> $DIR/unboxed-closure-region.rs:8:9\n    |\n-LL |     let _f = {\n-   |         -- borrow later stored here\n-LL |         let x = 0;\n LL |         || x\n-   |         -- ^ borrowed value does not live long enough\n+   |         ^^ - `x` is borrowed here\n    |         |\n-   |         value captured here\n-LL |     };\n-   |     - `x` dropped here while still borrowed\n+   |         may outlive borrowed value `x`\n+   |\n+note: block requires argument type to outlive `'1`\n+  --> $DIR/unboxed-closure-region.rs:6:9\n+   |\n+LL |     let _f = {\n+   |         ^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         move || x\n+   |         ++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "d3734e90b7ffa97c47633d0a0b6909356ea26160", "filename": "src/tools/rustfmt/tests/target/issue_4110.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4110.rs?ref=ce6b7179afcdf6ae2dad7e69c56f1f5c957b47bd", "patch": "@@ -20,6 +20,7 @@ fn bindings() {\n                 category,\n                 span,\n                 &format!(\"`{}`\", name),\n+                \"function\",\n             ),\n         (\n             ref name,"}]}