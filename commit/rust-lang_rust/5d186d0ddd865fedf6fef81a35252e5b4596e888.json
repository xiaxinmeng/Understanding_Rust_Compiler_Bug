{"sha": "5d186d0ddd865fedf6fef81a35252e5b4596e888", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMTg2ZDBkZGQ4NjVmZWRmNmZlZjgxYTM1MjUyZTViNDU5NmU4ODg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-08T20:41:53Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-08T20:58:06Z"}, "message": "ICH: Add test case for match-expressions", "tree": {"sha": "4b274883bafe41cb1a97fced3250a48ead61c9b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b274883bafe41cb1a97fced3250a48ead61c9b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d186d0ddd865fedf6fef81a35252e5b4596e888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d186d0ddd865fedf6fef81a35252e5b4596e888", "html_url": "https://github.com/rust-lang/rust/commit/5d186d0ddd865fedf6fef81a35252e5b4596e888", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d186d0ddd865fedf6fef81a35252e5b4596e888/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d2a813d59a916a484f4ead85a61f1251634d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d2a813d59a916a484f4ead85a61f1251634d30", "html_url": "https://github.com/rust-lang/rust/commit/f7d2a813d59a916a484f4ead85a61f1251634d30"}], "stats": {"total": 342, "additions": 342, "deletions": 0}, "files": [{"sha": "95e94a91c5bb1070c5ae1075a67c5673aa2297da", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "added", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/5d186d0ddd865fedf6fef81a35252e5b4596e888/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d186d0ddd865fedf6fef81a35252e5b4596e888/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=5d186d0ddd865fedf6fef81a35252e5b4596e888", "patch": "@@ -0,0 +1,342 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for match expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+// Add Arm ---------------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_arm(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        _ => 100,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_arm(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        2 => 2,\n+        _ => 100,\n+    }\n+}\n+\n+\n+\n+// Change Order Of Arms --------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_order_of_arms(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        _ => 100,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_order_of_arms(x: u32) -> u32 {\n+    match x {\n+        1 => 1,\n+        0 => 0,\n+        _ => 100,\n+    }\n+}\n+\n+\n+\n+// Add Guard Clause ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        _ => 100,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 if y => 1,\n+        _ => 100,\n+    }\n+}\n+\n+\n+\n+// Change Guard Clause ------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 if y => 1,\n+        _ => 100,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 if !y => 1,\n+        _ => 100,\n+    }\n+}\n+\n+\n+\n+// Add @-Binding ---------------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_at_binding(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        _ => x,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_at_binding(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        x @ _ => x,\n+    }\n+}\n+\n+\n+\n+// Change Name of @-Binding ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_name_of_at_binding(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        x @ _ => 7,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_name_of_at_binding(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        y @ _ => 7,\n+    }\n+}\n+\n+\n+\n+// Change Simple Binding To Pattern --------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (0, 0) => 0,\n+        a      => 1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (0, 0) => 0,\n+        (x, y) => 1\n+    }\n+}\n+\n+\n+\n+// Change Name In Pattern ------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_name_in_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (a, 0) => 0,\n+        (a, 1) => a,\n+        _ => 100,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_name_in_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (b, 0) => 0,\n+        (a, 1) => a,\n+        _ => 100,\n+    }\n+}\n+\n+\n+\n+// Change Mutability Of Binding In Pattern -------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (a, 0) => 0,\n+        _      => 1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (mut a, 0) => 0,\n+        _      => 1\n+    }\n+}\n+\n+\n+\n+// Add `ref` To Binding In Pattern -------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (a, 0) => 0,\n+        _      => 1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n+    match (x, x & 1) {\n+        (ref a, 0) => 0,\n+        _      => 1,\n+    }\n+}\n+\n+\n+\n+// Add `&` To Binding In Pattern -------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n+    match (&x, x & 1) {\n+        (a, 0) => 0,\n+        _      => 1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n+    match (&x, x & 1) {\n+        (&a, 0) => 0,\n+        _      => 1,\n+    }\n+}\n+\n+\n+\n+// Change RHS Of Arm -----------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_rhs_of_arm(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        _ => 2,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_rhs_of_arm(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 3,\n+        _ => 2,\n+    }\n+}\n+\n+\n+\n+// Add Alternative To Arm ------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_alternative_to_arm(x: u32) -> u32 {\n+    match x {\n+        0 => 0,\n+        1 => 1,\n+        _ => 2,\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_alternative_to_arm(x: u32) -> u32 {\n+    match x {\n+        0 | 7 => 0,\n+        1 => 3,\n+        _ => 2,\n+    }\n+}"}]}