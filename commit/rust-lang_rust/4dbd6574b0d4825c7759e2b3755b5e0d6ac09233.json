{"sha": "4dbd6574b0d4825c7759e2b3755b5e0d6ac09233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYmQ2NTc0YjBkNDgyNWM3NzU5ZTJiMzc1NWI1ZTBkNmFjMDkyMzM=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:57Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-23T19:11:57Z"}, "message": "rollup merge of #19215: aochagavia/pretty\n\nCloses https://github.com/rust-lang/rust/issues/19077\n\nI would appreciate any guidance on how to write a test for this. I saw some examples in `test/pretty`, but there are different ways to test... With or without `.pp` files, with a `pp-exact` comment, etc.", "tree": {"sha": "5547242f9666aab358c9ce361e4f78f76ada994b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5547242f9666aab358c9ce361e4f78f76ada994b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233", "html_url": "https://github.com/rust-lang/rust/commit/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233/comments", "author": null, "committer": null, "parents": [{"sha": "3594c588bb735117621f6a168116d9e1d086654a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3594c588bb735117621f6a168116d9e1d086654a", "html_url": "https://github.com/rust-lang/rust/commit/3594c588bb735117621f6a168116d9e1d086654a"}, {"sha": "d678684236fece2e8b55515f936c9429036f2d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/d678684236fece2e8b55515f936c9429036f2d73", "html_url": "https://github.com/rust-lang/rust/commit/d678684236fece2e8b55515f936c9429036f2d73"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "6960337c3e2c9dc5f53958f09b2cf748817992a6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4dbd6574b0d4825c7759e2b3755b5e0d6ac09233", "patch": "@@ -11,31 +11,25 @@\n pub use self::AnnNode::*;\n \n use abi;\n-use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n+use ast::{mod, FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n use ast::{MethodImplItem, RegionTyParamBound, TraitTyParamBound};\n use ast::{RequiredMethod, ProvidedMethod, TypeImplItem, TypeTraitItem};\n use ast::{UnboxedClosureKind};\n-use ast;\n use ast_util;\n use owned_slice::OwnedSlice;\n use attr::{AttrMetaMethods, AttributeMethods};\n-use codemap::{CodeMap, BytePos};\n-use codemap;\n+use codemap::{mod, CodeMap, BytePos};\n use diagnostic;\n-use parse::token::{BinOpToken, Token};\n-use parse::token;\n+use parse::token::{mod, BinOpToken, Token};\n use parse::lexer::comments;\n use parse;\n-use print::pp::{break_offset, word, space, zerobreak, hardbreak};\n+use print::pp::{mod, break_offset, word, space, zerobreak, hardbreak};\n use print::pp::{Breaks, Consistent, Inconsistent, eof};\n-use print::pp;\n use ptr::P;\n \n-use std::ascii;\n-use std::io::IoResult;\n-use std::io;\n-use std::mem;\n+use std::{ascii, mem};\n+use std::io::{mod, IoResult};\n \n pub enum AnnNode<'a> {\n     NodeIdent(&'a ast::Ident),\n@@ -2150,21 +2144,22 @@ impl<'a> State<'a> {\n             try!(self.print_pat(&**p));\n         }\n         try!(space(&mut self.s));\n-        match arm.guard {\n-            Some(ref e) => {\n-                try!(self.word_space(\"if\"));\n-                try!(self.print_expr(&**e));\n-                try!(space(&mut self.s));\n-            }\n-            None => ()\n+        if let Some(ref e) = arm.guard {\n+            try!(self.word_space(\"if\"));\n+            try!(self.print_expr(&**e));\n+            try!(space(&mut self.s));\n         }\n         try!(self.word_space(\"=>\"));\n \n         match arm.body.node {\n             ast::ExprBlock(ref blk) => {\n                 // the block will close the pattern's ibox\n-                try!(self.print_block_unclosed_indent(&**blk,\n-                                                      indent_unit));\n+                try!(self.print_block_unclosed_indent(&**blk, indent_unit));\n+\n+                // If it is a user-provided unsafe block, print a comma after it\n+                if let ast::UnsafeBlock(ast::UserProvided) = blk.rules {\n+                    try!(word(&mut self.s, \",\"));\n+                }\n             }\n             _ => {\n                 try!(self.end()); // close the ibox for the pattern"}, {"sha": "6214b3e450f3de19951630936c177d2c094e72e1", "filename": "src/test/pretty/issue-19077.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233/src%2Ftest%2Fpretty%2Fissue-19077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbd6574b0d4825c7759e2b3755b5e0d6ac09233/src%2Ftest%2Fpretty%2Fissue-19077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-19077.rs?ref=4dbd6574b0d4825c7759e2b3755b5e0d6ac09233", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Testing that unsafe blocks in match arms are followed by a comma\n+// pp-exact\n+fn main() {\n+    match true {\n+        true if true => (),\n+        false => unsafe { },\n+        true => { }\n+        false => (),\n+    }\n+}"}]}