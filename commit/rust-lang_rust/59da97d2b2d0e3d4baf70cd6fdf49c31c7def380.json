{"sha": "59da97d2b2d0e3d4baf70cd6fdf49c31c7def380", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZGE5N2QyYjJkMGUzZDRiYWY3MGNkNmZkZjQ5YzMxYzdkZWYzODA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-02T10:08:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-02T10:08:21Z"}, "message": "rustfmt the test", "tree": {"sha": "3e764d2bb80e5207186293d34cbedd155bcbc857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e764d2bb80e5207186293d34cbedd155bcbc857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59da97d2b2d0e3d4baf70cd6fdf49c31c7def380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59da97d2b2d0e3d4baf70cd6fdf49c31c7def380", "html_url": "https://github.com/rust-lang/rust/commit/59da97d2b2d0e3d4baf70cd6fdf49c31c7def380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59da97d2b2d0e3d4baf70cd6fdf49c31c7def380/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c67a7625fbd38b4b986981c553dc7eb5a7a4765", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c67a7625fbd38b4b986981c553dc7eb5a7a4765", "html_url": "https://github.com/rust-lang/rust/commit/6c67a7625fbd38b4b986981c553dc7eb5a7a4765"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "21783fedd39c9ada818cfe30db07fdc311919bfd", "filename": "src/test/run-pass/command-pre-exec.rs", "status": "modified", "additions": 62, "deletions": 30, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/59da97d2b2d0e3d4baf70cd6fdf49c31c7def380/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59da97d2b2d0e3d4baf70cd6fdf49c31c7def380/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs?ref=59da97d2b2d0e3d4baf70cd6fdf49c31c7def380", "patch": "@@ -2,7 +2,6 @@\n // ignore-windows - this is a unix-specific test\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n-\n #![feature(process_exec, rustc_private)]\n \n extern crate libc;\n@@ -11,71 +10,104 @@ use std::env;\n use std::io::Error;\n use std::os::unix::process::CommandExt;\n use std::process::Command;\n-use std::sync::Arc;\n use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::sync::Arc;\n \n fn main() {\n     if let Some(arg) = env::args().nth(1) {\n         match &arg[..] {\n             \"test1\" => println!(\"hello2\"),\n             \"test2\" => assert_eq!(env::var(\"FOO\").unwrap(), \"BAR\"),\n-            \"test3\" => assert_eq!(env::current_dir().unwrap()\n-                                      .to_str().unwrap(), \"/\"),\n+            \"test3\" => assert_eq!(env::current_dir().unwrap().to_str().unwrap(), \"/\"),\n             \"empty\" => {}\n             _ => panic!(\"unknown argument: {}\", arg),\n         }\n-        return\n+        return;\n     }\n \n     let me = env::current_exe().unwrap();\n \n-    let output = unsafe { Command::new(&me).arg(\"test1\").pre_exec(|| {\n-        println!(\"hello\");\n-        Ok(())\n-    }).output().unwrap() };\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"test1\")\n+            .pre_exec(|| {\n+                println!(\"hello\");\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert_eq!(output.stdout, b\"hello\\nhello2\\n\");\n \n-    let output = unsafe { Command::new(&me).arg(\"test2\").pre_exec(|| {\n-        env::set_var(\"FOO\", \"BAR\");\n-        Ok(())\n-    }).output().unwrap() };\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"test2\")\n+            .pre_exec(|| {\n+                env::set_var(\"FOO\", \"BAR\");\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());\n \n-    let output = unsafe { Command::new(&me).arg(\"test3\").pre_exec(|| {\n-        env::set_current_dir(\"/\").unwrap();\n-        Ok(())\n-    }).output().unwrap() };\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"test3\")\n+            .pre_exec(|| {\n+                env::set_current_dir(\"/\").unwrap();\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());\n \n-    let output = unsafe { Command::new(&me).arg(\"bad\").pre_exec(|| {\n-        Err(Error::from_raw_os_error(102))\n-    }).output().unwrap_err() };\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"bad\")\n+            .pre_exec(|| Err(Error::from_raw_os_error(102)))\n+            .output()\n+            .unwrap_err()\n+    };\n     assert_eq!(output.raw_os_error(), Some(102));\n \n     let pid = unsafe { libc::getpid() };\n     assert!(pid >= 0);\n-    let output = unsafe { Command::new(&me).arg(\"empty\").pre_exec(move || {\n-        let child = libc::getpid();\n-        assert!(child >= 0);\n-        assert!(pid != child);\n-        Ok(())\n-    }).output().unwrap() };\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"empty\")\n+            .pre_exec(move || {\n+                let child = libc::getpid();\n+                assert!(child >= 0);\n+                assert!(pid != child);\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());\n \n     let mem = Arc::new(AtomicUsize::new(0));\n     let mem2 = mem.clone();\n-    let output = unsafe { Command::new(&me).arg(\"empty\").pre_exec(move || {\n-        assert_eq!(mem2.fetch_add(1, Ordering::SeqCst), 0);\n-        Ok(())\n-    }).output().unwrap() };\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"empty\")\n+            .pre_exec(move || {\n+                assert_eq!(mem2.fetch_add(1, Ordering::SeqCst), 0);\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n     assert!(output.status.success());\n     assert!(output.stderr.is_empty());\n     assert!(output.stdout.is_empty());"}]}