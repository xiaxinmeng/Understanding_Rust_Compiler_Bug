{"sha": "cc3c5d2700481bae497d6cde825c1d48e79c776a", "node_id": "C_kwDOAAsO6NoAKGNjM2M1ZDI3MDA0ODFiYWU0OTdkNmNkZTgyNWMxZDQ4ZTc5Yzc3NmE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-13T06:42:39Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-13T06:42:39Z"}, "message": "Improve name and documentation of generic_extension\n\nThis function doesn't *create* a (rules based) macro, it *expands* it.\nThus, the documentation was wrong.", "tree": {"sha": "4450e26ac5ba5f10450c336c44e3073514f2c3b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4450e26ac5ba5f10450c336c44e3073514f2c3b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc3c5d2700481bae497d6cde825c1d48e79c776a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc3c5d2700481bae497d6cde825c1d48e79c776a", "html_url": "https://github.com/rust-lang/rust/commit/cc3c5d2700481bae497d6cde825c1d48e79c776a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc3c5d2700481bae497d6cde825c1d48e79c776a/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6499fd9987a2b338892f56cea26c39a6fe64d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6499fd9987a2b338892f56cea26c39a6fe64d18", "html_url": "https://github.com/rust-lang/rust/commit/c6499fd9987a2b338892f56cea26c39a6fe64d18"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "4cc3169180ea5ea01638bd0f83c7afd09512a792", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc3c5d2700481bae497d6cde825c1d48e79c776a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc3c5d2700481bae497d6cde825c1d48e79c776a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=cc3c5d2700481bae497d6cde825c1d48e79c776a", "patch": "@@ -175,7 +175,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n         if !self.valid {\n             return DummyResult::any(sp);\n         }\n-        generic_extension(\n+        expand_macro(\n             cx,\n             sp,\n             self.span,\n@@ -202,8 +202,9 @@ fn trace_macros_note(cx_expansions: &mut FxHashMap<Span, Vec<String>>, sp: Span,\n     cx_expansions.entry(sp).or_default().push(message);\n }\n \n-/// Given `lhses` and `rhses`, this is the new macro we create\n-fn generic_extension<'cx, 'tt>(\n+/// Expands the rules based macro defined by `lhses` and `rhses` for a given\n+/// input `arg`.\n+fn expand_macro<'cx, 'tt>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     def_span: Span,"}]}