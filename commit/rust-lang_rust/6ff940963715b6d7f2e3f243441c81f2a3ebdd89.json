{"sha": "6ff940963715b6d7f2e3f243441c81f2a3ebdd89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZjk0MDk2MzcxNWI2ZDdmMmUzZjI0MzQ0MWM4MWYyYTNlYmRkODk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-24T20:26:58Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-24T20:27:19Z"}, "message": "Add more missing examples for Formatter", "tree": {"sha": "cc50f89638be76ebbb213b5038f54074775cd2ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc50f89638be76ebbb213b5038f54074775cd2ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ff940963715b6d7f2e3f243441c81f2a3ebdd89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff940963715b6d7f2e3f243441c81f2a3ebdd89", "html_url": "https://github.com/rust-lang/rust/commit/6ff940963715b6d7f2e3f243441c81f2a3ebdd89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ff940963715b6d7f2e3f243441c81f2a3ebdd89/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b536704574061cebe431582116b6f91ae5b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b536704574061cebe431582116b6f91ae5b983", "html_url": "https://github.com/rust-lang/rust/commit/21b536704574061cebe431582116b6f91ae5b983"}], "stats": {"total": 81, "additions": 78, "deletions": 3}, "files": [{"sha": "1dc0faa156d69293ac0fe9930c221c2c83985b23", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6ff940963715b6d7f2e3f243441c81f2a3ebdd89/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ff940963715b6d7f2e3f243441c81f2a3ebdd89/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=6ff940963715b6d7f2e3f243441c81f2a3ebdd89", "patch": "@@ -1202,6 +1202,23 @@ impl<'a> Formatter<'a> {\n     ///               is longer than this length\n     ///\n     /// Notably this function ignores the `flag` parameters.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo;\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         formatter.pad(\"Foo\")\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:<4}\", Foo), \"Foo \");\n+    /// assert_eq!(&format!(\"{:0>4}\", Foo), \"0Foo\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad(&mut self, s: &str) -> Result {\n         // Make sure there's a fast path up front\n@@ -1368,7 +1385,7 @@ impl<'a> Formatter<'a> {\n         self.buf.write_str(data)\n     }\n \n-    /// Writes some formatted information into this instance\n+    /// Writes some formatted information into this instance.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_fmt(&mut self, fmt: Arguments) -> Result {\n         write(self.buf, fmt)\n@@ -1381,11 +1398,69 @@ impl<'a> Formatter<'a> {\n                                  or `sign_aware_zero_pad` methods instead\")]\n     pub fn flags(&self) -> u32 { self.flags }\n \n-    /// Character used as 'fill' whenever there is alignment\n+    /// Character used as 'fill' whenever there is alignment.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo;\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         let c = formatter.fill();\n+    ///         if let Some(width) = formatter.width() {\n+    ///             for _ in 0..width {\n+    ///                 write!(formatter, \"{}\", c)?;\n+    ///             }\n+    ///             Ok(())\n+    ///         } else {\n+    ///             write!(formatter, \"{}\", c)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// // We set alignment to the left with \">\".\n+    /// assert_eq!(&format!(\"{:G>3}\", Foo), \"GGG\");\n+    /// assert_eq!(&format!(\"{:t>6}\", Foo), \"tttttt\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn fill(&self) -> char { self.fill }\n \n-    /// Flag indicating what form of alignment was requested\n+    /// Flag indicating what form of alignment was requested.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(fmt_flags_align)]\n+    ///\n+    /// extern crate core;\n+    ///\n+    /// use std::fmt;\n+    /// use core::fmt::Alignment;\n+    ///\n+    /// struct Foo;\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         let s = match formatter.align() {\n+    ///             Alignment::Left    => \"left\",\n+    ///             Alignment::Right   => \"right\",\n+    ///             Alignment::Center  => \"center\",\n+    ///             Alignment::Unknown => \"into the void\",\n+    ///         };\n+    ///         write!(formatter, \"{}\", s)\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(&format!(\"{:<}\", Foo), \"left\");\n+    ///     assert_eq!(&format!(\"{:>}\", Foo), \"right\");\n+    ///     assert_eq!(&format!(\"{:^}\", Foo), \"center\");\n+    ///     assert_eq!(&format!(\"{}\", Foo), \"into the void\");\n+    /// }\n+    /// ```\n     #[unstable(feature = \"fmt_flags_align\", reason = \"method was just created\",\n                issue = \"27726\")]\n     pub fn align(&self) -> Alignment {"}]}