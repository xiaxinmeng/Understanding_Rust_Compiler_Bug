{"sha": "464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "node_id": "C_kwDOAAsO6NoAKDQ2NGVjNjRkZjcwZTFmNmVlNjRlYzJmMmI2MmVhZThmZjQwNWJlZjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T23:02:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T23:02:37Z"}, "message": "Auto merge of #97409 - GuillaumeGomez:rollup-808v9ge, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #97317 (Allow to click on setting text)\n - #97375 (Simplify implementation of `-Z gcc-ld`)\n - #97394 (Add more eslint rules)\n - #97407 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f2ae70252d660c42f8e42ae0887e84f984682075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ae70252d660c42f8e42ae0887e84f984682075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "html_url": "https://github.com/rust-lang/rust/commit/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cbaac699c14b7ac7cc80e54823b2ef6afeb64af", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cbaac699c14b7ac7cc80e54823b2ef6afeb64af", "html_url": "https://github.com/rust-lang/rust/commit/4cbaac699c14b7ac7cc80e54823b2ef6afeb64af"}, {"sha": "f74e61ec055a71304cbc03ae117a7b069482cb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/f74e61ec055a71304cbc03ae117a7b069482cb48", "html_url": "https://github.com/rust-lang/rust/commit/f74e61ec055a71304cbc03ae117a7b069482cb48"}], "stats": {"total": 327, "additions": 154, "deletions": 173}, "files": [{"sha": "6c29692bd3bfe471b6ffa6455d2223fe4452528c", "filename": "compiler/rustc_codegen_ssa/src/back/command.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -105,12 +105,7 @@ impl Command {\n             }\n             Program::Lld(ref p, flavor) => {\n                 let mut c = process::Command::new(p);\n-                c.arg(\"-flavor\").arg(match flavor {\n-                    LldFlavor::Wasm => \"wasm\",\n-                    LldFlavor::Ld => \"gnu\",\n-                    LldFlavor::Link => \"link\",\n-                    LldFlavor::Ld64 => \"darwin\",\n-                });\n+                c.arg(\"-flavor\").arg(flavor.as_str());\n                 if let LldFlavor::Wasm = flavor {\n                     // LLVM expects host-specific formatting for @file\n                     // arguments, but we always generate posix formatted files"}, {"sha": "00f85852493b2e1a8e82c9ec9d6f1786c773da8d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -2698,37 +2698,20 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n         if let LinkerFlavor::Gcc = flavor {\n             match ld_impl {\n                 LdImpl::Lld => {\n-                    if sess.target.lld_flavor == LldFlavor::Ld64 {\n-                        let tools_path = sess.get_tools_search_paths(false);\n-                        let ld64_exe = tools_path\n-                            .into_iter()\n-                            .map(|p| p.join(\"gcc-ld\"))\n-                            .map(|p| {\n-                                p.join(if sess.host.is_like_windows { \"ld64.exe\" } else { \"ld64\" })\n-                            })\n-                            .find(|p| p.exists())\n-                            .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld64) not found\"));\n-                        cmd.cmd().arg({\n-                            let mut arg = OsString::from(\"-fuse-ld=\");\n-                            arg.push(ld64_exe);\n-                            arg\n-                        });\n-                    } else {\n-                        let tools_path = sess.get_tools_search_paths(false);\n-                        let lld_path = tools_path\n-                            .into_iter()\n-                            .map(|p| p.join(\"gcc-ld\"))\n-                            .find(|p| {\n-                                p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" })\n-                                    .exists()\n-                            })\n-                            .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n-                        cmd.cmd().arg({\n-                            let mut arg = OsString::from(\"-B\");\n-                            arg.push(lld_path);\n-                            arg\n-                        });\n-                    }\n+                    let tools_path = sess.get_tools_search_paths(false);\n+                    let gcc_ld_dir = tools_path\n+                        .into_iter()\n+                        .map(|p| p.join(\"gcc-ld\"))\n+                        .find(|p| {\n+                            p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" }).exists()\n+                        })\n+                        .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n+                    cmd.arg({\n+                        let mut arg = OsString::from(\"-B\");\n+                        arg.push(gcc_ld_dir);\n+                        arg\n+                    });\n+                    cmd.arg(format!(\"-Wl,-rustc-lld-flavor={}\", sess.target.lld_flavor.as_str()));\n                 }\n             }\n         } else {"}, {"sha": "6dd245b047cbe56fba534fb8840f77be0ea57aae", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -108,6 +108,15 @@ pub enum LldFlavor {\n }\n \n impl LldFlavor {\n+    pub fn as_str(&self) -> &'static str {\n+        match self {\n+            LldFlavor::Wasm => \"wasm\",\n+            LldFlavor::Ld64 => \"darwin\",\n+            LldFlavor::Ld => \"gnu\",\n+            LldFlavor::Link => \"link\",\n+        }\n+    }\n+\n     fn from_str(s: &str) -> Option<Self> {\n         Some(match s {\n             \"darwin\" => LldFlavor::Ld64,\n@@ -121,13 +130,7 @@ impl LldFlavor {\n \n impl ToJson for LldFlavor {\n     fn to_json(&self) -> Json {\n-        match *self {\n-            LldFlavor::Ld64 => \"darwin\",\n-            LldFlavor::Ld => \"gnu\",\n-            LldFlavor::Link => \"link\",\n-            LldFlavor::Wasm => \"wasm\",\n-        }\n-        .to_json()\n+        self.as_str().to_json()\n     }\n }\n "}, {"sha": "b35eba21e6bd6c8f2125db9d743c5050cdc55f17", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1164,14 +1164,11 @@ impl Step for Assemble {\n             // for `-Z gcc-ld=lld`\n             let gcc_ld_dir = libdir_bin.join(\"gcc-ld\");\n             t!(fs::create_dir(&gcc_ld_dir));\n-            for flavor in [\"ld\", \"ld64\"] {\n-                let lld_wrapper_exe = builder.ensure(crate::tool::LldWrapper {\n-                    compiler: build_compiler,\n-                    target: target_compiler.host,\n-                    flavor_feature: flavor,\n-                });\n-                builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(flavor, target_compiler.host)));\n-            }\n+            let lld_wrapper_exe = builder.ensure(crate::tool::LldWrapper {\n+                compiler: build_compiler,\n+                target: target_compiler.host,\n+            });\n+            builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(\"ld\", target_compiler.host)));\n         }\n \n         if builder.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {"}, {"sha": "cc10d67c551db2da45c32aedc8ca7ffd112f19ab", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -407,11 +407,8 @@ impl Step for Rustc {\n                 let gcc_lld_src_dir = src_dir.join(\"gcc-ld\");\n                 let gcc_lld_dst_dir = dst_dir.join(\"gcc-ld\");\n                 t!(fs::create_dir(&gcc_lld_dst_dir));\n-                for flavor in [\"ld\", \"ld64\"] {\n-                    let exe_name = exe(flavor, compiler.host);\n-                    builder\n-                        .copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n-                }\n+                let exe_name = exe(\"ld\", compiler.host);\n+                builder.copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n             }\n \n             // Man pages"}, {"sha": "2f4d07d77a51faf3a2400fe76be93c5fe14ff40a", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -656,7 +656,6 @@ impl Step for Cargo {\n pub struct LldWrapper {\n     pub compiler: Compiler,\n     pub target: TargetSelection,\n-    pub flavor_feature: &'static str,\n }\n \n impl Step for LldWrapper {\n@@ -676,7 +675,7 @@ impl Step for LldWrapper {\n                 path: \"src/tools/lld-wrapper\",\n                 is_optional_tool: false,\n                 source_type: SourceType::InTree,\n-                extra_features: vec![self.flavor_feature.to_owned()],\n+                extra_features: Vec::new(),\n             })\n             .expect(\"expected to build -- essential tool\");\n "}, {"sha": "03834411d1529ea7337b4a2c2a4a34b689d2a54e", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1 +1 @@\n-0.9.3\n\\ No newline at end of file\n+0.9.5\n\\ No newline at end of file"}, {"sha": "b4dd5f00b87190ad5ef42cbc2a88a783c6ae57ef", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1 +1 @@\n-Subproject commit d9415b7cbfcb4b24062683f429bd0ff535396362\n+Subproject commit b4dd5f00b87190ad5ef42cbc2a88a783c6ae57ef"}, {"sha": "b74825d8f88b685e239ade00f00de68ba4cd63d4", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1 +1 @@\n-Subproject commit 8e36971959ff238b5aa2575fbc7a2e09e1313e82\n+Subproject commit b74825d8f88b685e239ade00f00de68ba4cd63d4"}, {"sha": "2ed26865e8c29ef939dc913a97bd321cadd72a9a", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1 +1 @@\n-Subproject commit e9f93cfcf410bc092c9107b8a41a82f144c761f2\n+Subproject commit 2ed26865e8c29ef939dc913a97bd321cadd72a9a"}, {"sha": "554c00e4805df7f7bffac7db408437d62d6dfb9a", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1 +1 @@\n-Subproject commit 0c02acdb6f48f03907a02ea8e537c3272b4fde9f\n+Subproject commit 554c00e4805df7f7bffac7db408437d62d6dfb9a"}, {"sha": "7afd09b34d30d5deae6c66a7e493588479c42b40", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -47,5 +47,12 @@ module.exports = {\n             { \"beforeColon\": false, \"afterColon\": true, \"mode\": \"strict\" }\n         ],\n         \"func-call-spacing\": [\"error\", \"never\"],\n+        \"space-infix-ops\": \"error\",\n+        \"space-before-function-paren\": [\"error\", \"never\"],\n+        \"space-before-blocks\": \"error\",\n+        \"comma-dangle\": [\"error\", \"always-multiline\"],\n+        \"comma-style\": [\"error\", \"last\"],\n+        \"max-len\": [\"error\", { \"code\": 100, \"tabWidth\": 4 }],\n+        \"eol-last\": [\"error\", \"always\"],\n     }\n };"}, {"sha": "d0229bdb5f23c5f153fd8d7d76e390138078b171", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1415,30 +1415,6 @@ pre.rust {\n #settings-menu.rotate > a img {\n \tanimation: rotating 2s linear infinite;\n }\n-#settings-menu #settings {\n-\tposition: absolute;\n-\tright: 0;\n-\tz-index: 1;\n-\tdisplay: block;\n-\tmargin-top: 7px;\n-\tborder-radius: 3px;\n-\tborder: 1px solid;\n-}\n-#settings-menu #settings .setting-line {\n-\tmargin: 0.6em;\n-}\n-/* This rule is to draw the little arrow connecting the settings menu to the gear icon. */\n-#settings-menu #settings::before {\n-\tcontent: '';\n-\tposition: absolute;\n-\tright: 11px;\n-\tborder: solid;\n-\tborder-width: 1px 1px 0 0;\n-\tdisplay: inline-block;\n-\tpadding: 4px;\n-\ttransform: rotate(-45deg);\n-\ttop: -5px;\n-}\n \n #help-button {\n \tfont-family: \"Fira Sans\", Arial, sans-serif;"}, {"sha": "c69ff04236dcb47c07baf27efa3cae2a031dc5c3", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -46,9 +46,12 @@\n .toggle {\n \tposition: relative;\n \tdisplay: inline-block;\n-\twidth: 45px;\n+\twidth: 100%;\n \theight: 27px;\n \tmargin-right: 20px;\n+\tdisplay: flex;\n+\talign-items: center;\n+\tcursor: pointer;\n }\n \n .toggle input {\n@@ -57,12 +60,12 @@\n }\n \n .slider {\n-\tposition: absolute;\n+\tposition: relative;\n+\twidth: 45px;\n+\tdisplay: block;\n+\theight: 28px;\n+\tmargin-right: 20px;\n \tcursor: pointer;\n-\ttop: 0;\n-\tleft: 0;\n-\tright: 0;\n-\tbottom: 0;\n \tbackground-color: #ccc;\n \ttransition: .3s;\n }\n@@ -95,3 +98,28 @@ input:checked + .slider:before {\n \twidth: 100%;\n \tdisplay: block;\n }\n+\n+div#settings {\n+\tposition: absolute;\n+\tright: 0;\n+\tz-index: 1;\n+\tdisplay: block;\n+\tmargin-top: 7px;\n+\tborder-radius: 3px;\n+\tborder: 1px solid;\n+}\n+#settings .setting-line {\n+\tmargin: 1.2em 0.6em;\n+}\n+/* This rule is to draw the little arrow connecting the settings menu to the gear icon. */\n+div#settings::before {\n+\tcontent: '';\n+\tposition: absolute;\n+\tright: 11px;\n+\tborder: solid;\n+\tborder-width: 1px 1px 0 0;\n+\tdisplay: inline-block;\n+\tpadding: 4px;\n+\ttransform: rotate(-45deg);\n+\ttop: -5px;\n+}"}, {"sha": "0fbc2d0e33c90c601cf43ac0c1abbb5a9e333199", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -63,7 +63,7 @@ function showMain() {\n     removeClass(document.getElementById(MAIN_ID), \"hidden\");\n }\n \n-(function () {\n+(function() {\n     window.rootPath = getVar(\"root-path\");\n     window.currentCrate = getVar(\"current-crate\");\n     window.searchJS =  resourcePath(\"search\", \".js\");\n@@ -929,7 +929,7 @@ function loadCss(cssFileName) {\n     searchState.setup();\n }());\n \n-(function () {\n+(function() {\n     let reset_button_timeout = null;\n \n     window.copy_path = but => {"}, {"sha": "fd7a1449763eb14fc1a74345664baeb05025028b", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -2,7 +2,7 @@\n \n \"use strict\";\n \n-(function () {\n+(function() {\n     // Number of lines shown when code viewer is not expanded\n     const MAX_LINES = 10;\n "}, {"sha": "3d1d942eaa9ee59a26d6987aace289e70b213ea3", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -5,7 +5,7 @@\n \n \"use strict\";\n \n-(function () {\n+(function() {\n     const isSettingsPage = window.location.pathname.endsWith(\"/settings.html\");\n \n     function changeSetting(settingName, value) {\n@@ -130,12 +130,11 @@\n             } else {\n                 // This is a toggle.\n                 const checked = setting[\"default\"] === true ? \" checked\" : \"\";\n-                output += `\n-                    <label class=\"toggle\">\n-                        <input type=\"checkbox\" id=\"${js_data_name}\"${checked}>\n-                        <span class=\"slider\"></span>\n-                    </label>\n-                    <div>${setting_name}</div>`;\n+                output += `<label class=\"toggle\">\\\n+                        <input type=\"checkbox\" id=\"${js_data_name}\"${checked}>\\\n+                        <span class=\"slider\"></span>\\\n+                        <span class=\"label\">${setting_name}</span>\\\n+                    </label>`;\n             }\n             output += \"</div>\";\n         }"}, {"sha": "aaac878d3a37b7bfc020916518ea4fb0784ee924", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -187,7 +187,7 @@ function highlightSourceLines(match) {\n     }\n }\n \n-const handleSourceHighlight = (function () {\n+const handleSourceHighlight = (function() {\n     let prev_line_id = 0;\n \n     const set_fragment = name => {"}, {"sha": "4fcf049923491472e84ecf4be0d933c82de9ccfd", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -4,7 +4,7 @@ const darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n window.mainTheme = document.getElementById(\"mainThemeStyle\");\n \n-const settingsDataset = (function () {\n+const settingsDataset = (function() {\n     const settingsElement = document.getElementById(\"default-settings\");\n     if (settingsElement === null) {\n         return null;\n@@ -163,7 +163,7 @@ function useSystemTheme(value) {\n     }\n }\n \n-const updateSystemTheme = (function () {\n+const updateSystemTheme = (function() {\n     if (!window.matchMedia) {\n         // fallback to the CSS computed value\n         return () => {"}, {"sha": "1b2d1e31f520cf2642dfa56d457c914cad2064df", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -34,7 +34,7 @@ wait-for: \"#settings\"\n \n // We check that the \"Use system theme\" is disabled.\n assert-property: (\"#use-system-theme\", {\"checked\": \"false\"})\n-assert: \"//*[@class='setting-line']/*[text()='Use system theme']\"\n+assert: \"//*[@class='setting-line']//span[text()='Use system theme']\"\n // Meaning that only the \"theme\" menu is showing up.\n assert: \".setting-line:not(.hidden) #theme\"\n assert: \".setting-line.hidden #preferred-dark-theme\"\n@@ -55,7 +55,13 @@ assert: \".setting-line.hidden #theme\"\n assert-text: (\"#preferred-dark-theme .setting-name\", \"Preferred dark theme\")\n assert-text: (\"#preferred-light-theme .setting-name\", \"Preferred light theme\")\n \n+// We now check that clicking on the \"sliders\"' text is like clicking on the slider.\n+// To test it, we use the \"Disable keyboard shortcuts\".\n+local-storage: {\"rustdoc-disable-shortcuts\": \"false\"}\n+click: \".setting-line:last-child .toggle .label\"\n+assert-local-storage: {\"rustdoc-disable-shortcuts\": \"true\"}\n+\n // Now we go to the settings page to check that the CSS is loaded as expected.\n goto: file://|DOC_PATH|/settings.html\n wait-for: \"#settings\"\n-assert-css: (\".setting-line .toggle\", {\"width\": \"45px\", \"margin-right\": \"20px\"})\n+assert-css: (\".setting-line .toggle .slider\", {\"width\": \"45px\", \"margin-right\": \"20px\"})"}, {"sha": "bf5138b16d5bd8f5615e2caa829a378e7e634d12", "filename": "src/tools/lld-wrapper/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftools%2Flld-wrapper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftools%2Flld-wrapper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2FCargo.toml?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -3,9 +3,3 @@ name = \"lld-wrapper\"\n version = \"0.1.0\"\n edition = \"2021\"\n license = \"MIT OR Apache-2.0\"\n-\n-[dependencies]\n-\n-[features]\n-ld = []\n-ld64 = []\n\\ No newline at end of file"}, {"sha": "90bd24a75e0649d82863c41536a532267e96bac0", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "modified", "additions": 38, "deletions": 57, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -1,5 +1,4 @@\n-//! Script to invoke the bundled rust-lld with the correct flavor. The flavor is selected by\n-//! feature.\n+//! Script to invoke the bundled rust-lld with the correct flavor.\n //!\n //! lld supports multiple command line interfaces. If `-flavor <flavor>` are passed as the first\n //! two arguments the `<flavor>` command line interface is used to process the remaining arguments.\n@@ -8,59 +7,33 @@\n //! In Rust with `-Z gcc-ld=lld` we have gcc or clang invoke rust-lld. Since there is no way to\n //! make gcc/clang pass `-flavor <flavor>` as the first two arguments in the linker invocation\n //! and since Windows does not support symbolic links for files this wrapper is used in place of a\n-//! symbolic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n-//! `../rust-lld -flavor ld64` if `ld64` is enabled. On Windows it spawns a `..\\rust-lld.exe`\n+//! symbolic link. It execs `../rust-lld -flavor <flavor>` by propagating the flavor argument\n+//! passed to the wrapper as the first two arguments. On Windows it spawns a `..\\rust-lld.exe`\n //! child process.\n \n-#[cfg(not(any(feature = \"ld\", feature = \"ld64\")))]\n-compile_error!(\"One of the features ld and ld64 must be enabled.\");\n-\n-#[cfg(all(feature = \"ld\", feature = \"ld64\"))]\n-compile_error!(\"Only one of the feature ld or ld64 can be enabled.\");\n-\n-#[cfg(feature = \"ld\")]\n-const FLAVOR: &str = \"ld\";\n-\n-#[cfg(feature = \"ld64\")]\n-const FLAVOR: &str = \"ld64\";\n-\n-use std::env;\n use std::fmt::Display;\n use std::path::{Path, PathBuf};\n-use std::process;\n+use std::{env, process};\n \n-trait ResultExt<T, E> {\n+trait UnwrapOrExitWith<T> {\n     fn unwrap_or_exit_with(self, context: &str) -> T;\n }\n \n-impl<T, E> ResultExt<T, E> for Result<T, E>\n-where\n-    E: Display,\n-{\n+impl<T> UnwrapOrExitWith<T> for Option<T> {\n     fn unwrap_or_exit_with(self, context: &str) -> T {\n-        match self {\n-            Ok(t) => t,\n-            Err(e) => {\n-                eprintln!(\"lld-wrapper: {}: {}\", context, e);\n-                process::exit(1);\n-            }\n-        }\n+        self.unwrap_or_else(|| {\n+            eprintln!(\"lld-wrapper: {}\", context);\n+            process::exit(1);\n+        })\n     }\n }\n \n-trait OptionExt<T> {\n-    fn unwrap_or_exit_with(self, context: &str) -> T;\n-}\n-\n-impl<T> OptionExt<T> for Option<T> {\n+impl<T, E: Display> UnwrapOrExitWith<T> for Result<T, E> {\n     fn unwrap_or_exit_with(self, context: &str) -> T {\n-        match self {\n-            Some(t) => t,\n-            None => {\n-                eprintln!(\"lld-wrapper: {}\", context);\n-                process::exit(1);\n-            }\n-        }\n+        self.unwrap_or_else(|err| {\n+            eprintln!(\"lld-wrapper: {}: {}\", context, err);\n+            process::exit(1);\n+        })\n     }\n }\n \n@@ -81,14 +54,28 @@ fn get_rust_lld_path(current_exe_path: &Path) -> PathBuf {\n }\n \n /// Returns the command for invoking rust-lld with the correct flavor.\n+/// LLD only accepts the flavor argument at the first two arguments, so move it there.\n ///\n /// Exits on error.\n fn get_rust_lld_command(current_exe_path: &Path) -> process::Command {\n     let rust_lld_path = get_rust_lld_path(current_exe_path);\n     let mut command = process::Command::new(rust_lld_path);\n+\n+    let mut flavor = None;\n+    let args = env::args_os()\n+        .skip(1)\n+        .filter(|arg| match arg.to_str().and_then(|s| s.strip_prefix(\"-rustc-lld-flavor=\")) {\n+            Some(suffix) => {\n+                flavor = Some(suffix.to_string());\n+                false\n+            }\n+            None => true,\n+        })\n+        .collect::<Vec<_>>();\n+\n     command.arg(\"-flavor\");\n-    command.arg(FLAVOR);\n-    command.args(env::args_os().skip(1));\n+    command.arg(flavor.unwrap_or_exit_with(\"-rustc-lld-flavor=<flavor> is not passed\"));\n+    command.args(args);\n     command\n }\n \n@@ -101,20 +88,14 @@ fn exec_lld(mut command: process::Command) {\n \n #[cfg(not(unix))]\n fn exec_lld(mut command: process::Command) {\n-    // Windows has no exec(), spawn a child process and wait for it\n+    // Windows has no exec(), spawn a child process and wait for it.\n     let exit_status = command.status().unwrap_or_exit_with(\"error running rust-lld child process\");\n-    if !exit_status.success() {\n-        match exit_status.code() {\n-            Some(code) => {\n-                // return the original lld exit code\n-                process::exit(code)\n-            }\n-            None => {\n-                eprintln!(\"lld-wrapper: rust-lld child process exited with error: {}\", exit_status,);\n-                process::exit(1);\n-            }\n-        }\n-    }\n+    let code = exit_status\n+        .code()\n+        .ok_or(exit_status)\n+        .unwrap_or_exit_with(\"rust-lld child process exited with error\");\n+    // Return the original lld exit code.\n+    process::exit(code);\n }\n \n fn main() {"}, {"sha": "4599e12de5f334391f2c76b4e638cc74830468f5", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/464ec64df70e1f6ee64ec2f2b62eae8ff405bef4/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=464ec64df70e1f6ee64ec2f2b62eae8ff405bef4", "patch": "@@ -19,6 +19,7 @@ function showHelp() {\n     console.log(\"  --help                     : show this message then quit\");\n     console.log(\"  --tests-folder [PATH]      : location of the .GOML tests folder\");\n     console.log(\"  --jobs [NUMBER]            : number of threads to run tests on\");\n+    console.log(\"  --executable-path [PATH]   : path of the browser's executable to be used\");\n }\n \n function isNumeric(s) {\n@@ -34,20 +35,25 @@ function parseOptions(args) {\n         \"show_text\": false,\n         \"no_headless\": false,\n         \"jobs\": -1,\n+        \"executable_path\": null,\n+        \"no_sandbox\": false,\n     };\n     var correspondances = {\n         \"--doc-folder\": \"doc_folder\",\n         \"--tests-folder\": \"tests_folder\",\n         \"--debug\": \"debug\",\n         \"--show-text\": \"show_text\",\n         \"--no-headless\": \"no_headless\",\n+        \"--executable-path\": \"executable_path\",\n+        \"--no-sandbox\": \"no_sandbox\",\n     };\n \n     for (var i = 0; i < args.length; ++i) {\n         if (args[i] === \"--doc-folder\"\n             || args[i] === \"--tests-folder\"\n             || args[i] === \"--file\"\n-            || args[i] === \"--jobs\") {\n+            || args[i] === \"--jobs\"\n+            || args[i] === \"--executable-path\") {\n             i += 1;\n             if (i >= args.length) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n@@ -68,6 +74,9 @@ function parseOptions(args) {\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);\n+        } else if (args[i] === \"--no-sandbox\") {\n+            console.log(\"`--no-sandbox` is being used. Be very careful!\");\n+            opts[correspondances[args[i]]] = true;\n         } else if (correspondances[args[i]]) {\n             opts[correspondances[args[i]]] = true;\n         } else {\n@@ -147,10 +156,17 @@ async function main(argv) {\n         if (opts[\"show_text\"]) {\n             args.push(\"--show-text\");\n         }\n+        if (opts[\"no_sandbox\"]) {\n+            args.push(\"--no-sandbox\");\n+        }\n         if (opts[\"no_headless\"]) {\n             args.push(\"--no-headless\");\n             headless = false;\n         }\n+        if (opts[\"executable_path\"] !== null) {\n+            args.push(\"--executable-path\");\n+            args.push(opts[\"executable_path\"]);\n+        }\n         options.parseArguments(args);\n     } catch (error) {\n         console.error(`invalid argument: ${error}`);"}]}