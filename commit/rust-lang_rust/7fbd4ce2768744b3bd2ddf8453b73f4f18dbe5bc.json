{"sha": "7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "node_id": "C_kwDOAAsO6NoAKDdmYmQ0Y2UyNzY4NzQ0YjNiZDJkZGY4NDUzYjczZjRmMThkYmU1YmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-16T06:31:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-16T06:31:40Z"}, "message": "Auto merge of #89939 - matthiaskrgr:rollup-q3lrdck, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #89509 (Stabilize `unreachable_unchecked` as `const fn`)\n - #89898 (Remove alloc::prelude)\n - #89902 (Restrict the aarch64 outline atomics test to Linux)\n - #89906 (Moved format-version constant to rustdoc-json-types)\n - #89912 (emitter: current substitution can be multi-line)\n - #89914 (Emit impl difference error for GenericBoundFailure too)\n - #89915 (Some outlives cleanup)\n - #89918 (Add some GATs related regression tests)\n - #89921 ([fuchsia] Update process info struct)\n - #89925 (updating docs to mention usage of AtomicBool)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a48662f4f9bb7838999ffaa5042f953bd588447b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48662f4f9bb7838999ffaa5042f953bd588447b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "html_url": "https://github.com/rust-lang/rust/commit/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc0a764e082d9c0abcf37a768d5889247ba13e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc0a764e082d9c0abcf37a768d5889247ba13e2", "html_url": "https://github.com/rust-lang/rust/commit/6cc0a764e082d9c0abcf37a768d5889247ba13e2"}, {"sha": "8e2047042581da8ee5ab8c7ad5780c1d690eecea", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2047042581da8ee5ab8c7ad5780c1d690eecea", "html_url": "https://github.com/rust-lang/rust/commit/8e2047042581da8ee5ab8c7ad5780c1d690eecea"}], "stats": {"total": 419, "additions": 235, "deletions": 184}, "files": [{"sha": "bc1594d82ecf9754908fdb5bcea6cc9c5602448e", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,10 +1,10 @@\n-#![feature(start, core_intrinsics, alloc_prelude, alloc_error_handler, box_syntax)]\n+#![feature(start, core_intrinsics, alloc_error_handler, box_syntax)]\n #![no_std]\n \n extern crate alloc;\n extern crate alloc_system;\n \n-use alloc::prelude::v1::*;\n+use alloc::boxed::Box;\n \n use alloc_system::System;\n "}, {"sha": "74ea7ec4ede69e3670b51be059b322c3ba2cf946", "filename": "compiler/rustc_codegen_gcc/example/alloc_example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Falloc_example.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,10 +1,10 @@\n-#![feature(start, box_syntax, core_intrinsics, alloc_prelude, alloc_error_handler)]\n+#![feature(start, box_syntax, core_intrinsics, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;\n extern crate alloc_system;\n \n-use alloc::prelude::v1::*;\n+use alloc::boxed::Box;\n \n use alloc_system::System;\n "}, {"sha": "9b2094adb150c1a0dd62a2ae975c56afaff6bc21", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -341,7 +341,7 @@ impl CodeSuggestion {\n                     });\n                     buf.push_str(&part.snippet);\n                     let cur_hi = sm.lookup_char_pos(part.span.hi());\n-                    if prev_hi.line == cur_lo.line {\n+                    if prev_hi.line == cur_lo.line && cur_hi.line == cur_lo.line {\n                         // Account for the difference between the width of the current code and the\n                         // snippet being suggested, so that the *later* suggestions are correctly\n                         // aligned on the screen."}, {"sha": "ea9d0eae17e2c46b27a713da65513ef1351e6af9", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -46,7 +46,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 }\n             }\n         }\n-        if let RegionResolutionError::ConcreteFailure(origin, _, _) = error.clone() {\n+        if let RegionResolutionError::ConcreteFailure(origin, _, _)\n+        | RegionResolutionError::GenericBoundFailure(origin, _, _) = error.clone()\n+        {\n             if let SubregionOrigin::CompareImplTypeObligation {\n                 span,\n                 item_name,"}, {"sha": "98f926e9d76d5c8fd079b7edb07f626df4dc2b61", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -2,10 +2,10 @@\n // refers to rules defined in RFC 1214 (`OutlivesFooBar`), so see that\n // RFC for reference.\n \n-use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sso::SsoHashSet;\n-use smallvec::SmallVec;\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {\n@@ -47,14 +47,16 @@ pub enum Component<'tcx> {\n     EscapingProjection(Vec<Component<'tcx>>),\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    /// Push onto `out` all the things that must outlive `'a` for the condition\n-    /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n-    pub fn push_outlives_components(self, ty0: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n-        let mut visited = SsoHashSet::new();\n-        compute_components(self, ty0, out, &mut visited);\n-        debug!(\"components({:?}) = {:?}\", ty0, out);\n-    }\n+/// Push onto `out` all the things that must outlive `'a` for the condition\n+/// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n+pub fn push_outlives_components(\n+    tcx: TyCtxt<'tcx>,\n+    ty0: Ty<'tcx>,\n+    out: &mut SmallVec<[Component<'tcx>; 4]>,\n+) {\n+    let mut visited = SsoHashSet::new();\n+    compute_components(tcx, ty0, out, &mut visited);\n+    debug!(\"components({:?}) = {:?}\", ty0, out);\n }\n \n fn compute_components(", "previous_filename": "compiler/rustc_middle/src/ty/outlives.rs"}, {"sha": "03d6c45a653459220fe75c4fbffe369549a44678", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,5 +1,6 @@\n //! Various code related to computing outlives relations.\n \n+pub mod components;\n pub mod env;\n pub mod obligations;\n pub mod verify;"}, {"sha": "91a22ecc5a994186a4e41990785999fc51a177ea", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,5 +1,5 @@\n //! Code that handles \"type-outlives\" constraints like `T: 'a`. This\n-//! is based on the `push_outlives_components` function defined on the tcx,\n+//! is based on the `push_outlives_components` function defined in rustc_infer,\n //! but it adds a bit of heuristics on top, in particular to deal with\n //! associated types and projections.\n //!\n@@ -59,13 +59,13 @@\n //! might later infer `?U` to something like `&'b u32`, which would\n //! imply that `'b: 'a`.\n \n+use crate::infer::outlives::components::{push_outlives_components, Component};\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::outlives::verify::VerifyBoundCx;\n use crate::infer::{\n     self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, UndoLog, VerifyBound,\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n \n@@ -271,7 +271,7 @@ where\n         assert!(!ty.has_escaping_bound_vars());\n \n         let mut components = smallvec![];\n-        self.tcx.push_outlives_components(ty, &mut components);\n+        push_outlives_components(self.tcx, ty, &mut components);\n         self.components_must_outlive(origin, &components, region);\n     }\n "}, {"sha": "c839f824d1c9c57501111431e430180269c3c517", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,8 +1,8 @@\n use smallvec::smallvec;\n \n+use crate::infer::outlives::components::{push_outlives_components, Component};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::symbol::Ident;\n \n@@ -200,7 +200,7 @@ impl Elaborator<'tcx> {\n \n                 let visited = &mut self.visited;\n                 let mut components = smallvec![];\n-                tcx.push_outlives_components(ty_max, &mut components);\n+                push_outlives_components(tcx, ty_max, &mut components);\n                 self.stack.extend(\n                     components\n                         .into_iter()"}, {"sha": "20d07bdc48a622d171947fbfe2ed7f1b3e813748", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -92,7 +92,6 @@ pub mod fold;\n pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;\n-pub mod outlives;\n pub mod print;\n pub mod query;\n pub mod relate;"}, {"sha": "70816b5722b2d4ae88a62170692238d8ef54adfa", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,12 +1,8 @@\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use crate::traits::query::outlives_bounds::InferCtxtExt as _;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n \n-use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n@@ -180,48 +176,3 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n         )\n     }\n }\n-\n-pub trait OutlivesEnvironmentExt<'tcx> {\n-    fn add_implied_bounds(\n-        &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-        span: Span,\n-    );\n-}\n-\n-impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n-    /// This method adds \"implied bounds\" into the outlives environment.\n-    /// Implied bounds are outlives relationships that we can deduce\n-    /// on the basis that certain types must be well-formed -- these are\n-    /// either the types that appear in the function signature or else\n-    /// the input types to an impl. For example, if you have a function\n-    /// like\n-    ///\n-    /// ```\n-    /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }\n-    /// ```\n-    ///\n-    /// we can assume in the caller's body that `'b: 'a` and that `T:\n-    /// 'b` (and hence, transitively, that `T: 'a`). This method would\n-    /// add those assumptions into the outlives-environment.\n-    ///\n-    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n-    fn add_implied_bounds(\n-        &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-        span: Span,\n-    ) {\n-        debug!(\"add_implied_bounds()\");\n-\n-        for ty in fn_sig_tys {\n-            let ty = infcx.resolve_vars_if_possible(ty);\n-            debug!(\"add_implied_bounds: ty = {}\", ty);\n-            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n-            self.add_outlives_bounds(Some(infcx), implied_bounds)\n-        }\n-    }\n-}"}, {"sha": "ef3493678131f438497731b16d6ed2a2cafd69bd", "filename": "compiler/rustc_trait_selection/src/traits/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -9,7 +9,6 @@ pub mod dropck_outlives;\n pub mod evaluate_obligation;\n pub mod method_autoderef;\n pub mod normalize;\n-pub mod outlives_bounds;\n pub mod type_op;\n \n pub use rustc_middle::traits::query::*;"}, {"sha": "04c382d439d4c0d88d39402d621bb8b2cc3ed17c", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n-use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n+use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]"}, {"sha": "37e007337374fd2553af77fcff1f307c2062e2c1", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -4,14 +4,14 @@\n \n use rustc_hir as hir;\n use rustc_infer::infer::canonical::{self, Canonical};\n+use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::traits::query::OutlivesBound;\n use rustc_infer::traits::TraitEngineExt as _;\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n-use rustc_trait_selection::traits::query::outlives_bounds::OutlivesBound;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n use rustc_trait_selection::traits::wf;\n use rustc_trait_selection::traits::FulfillmentContext;\n@@ -118,7 +118,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_a, r_b)) => {\n                         let ty_a = infcx.resolve_vars_if_possible(ty_a);\n                         let mut components = smallvec![];\n-                        tcx.push_outlives_components(ty_a, &mut components);\n+                        push_outlives_components(tcx, ty_a, &mut components);\n                         implied_bounds_from_components(r_b, components)\n                     }\n                 },"}, {"sha": "7c8b75271871a9a1275ba4cece3796abdfcbf81a", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -76,19 +76,19 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n+use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{self, RegionObligation, RegionckMode};\n+use rustc_infer::infer::{self, InferCtxt, RegionObligation, RegionckMode};\n use rustc_middle::hir::place::{PlaceBase, PlaceWithHirId};\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n-use rustc_trait_selection::infer::OutlivesEnvironmentExt;\n-use rustc_trait_selection::opaque_types::InferCtxtExt;\n+use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use std::ops::Deref;\n \n // a variation on try that just returns unit\n@@ -104,6 +104,51 @@ macro_rules! ignore_err {\n     };\n }\n \n+trait OutlivesEnvironmentExt<'tcx> {\n+    fn add_implied_bounds(\n+        &mut self,\n+        infcx: &InferCtxt<'a, 'tcx>,\n+        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n+        body_id: hir::HirId,\n+        span: Span,\n+    );\n+}\n+\n+impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n+    /// This method adds \"implied bounds\" into the outlives environment.\n+    /// Implied bounds are outlives relationships that we can deduce\n+    /// on the basis that certain types must be well-formed -- these are\n+    /// either the types that appear in the function signature or else\n+    /// the input types to an impl. For example, if you have a function\n+    /// like\n+    ///\n+    /// ```\n+    /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }\n+    /// ```\n+    ///\n+    /// we can assume in the caller's body that `'b: 'a` and that `T:\n+    /// 'b` (and hence, transitively, that `T: 'a`). This method would\n+    /// add those assumptions into the outlives-environment.\n+    ///\n+    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n+    fn add_implied_bounds(\n+        &mut self,\n+        infcx: &InferCtxt<'a, 'tcx>,\n+        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n+        body_id: hir::HirId,\n+        span: Span,\n+    ) {\n+        debug!(\"add_implied_bounds()\");\n+\n+        for ty in fn_sig_tys {\n+            let ty = infcx.resolve_vars_if_possible(ty);\n+            debug!(\"add_implied_bounds: ty = {}\", ty);\n+            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n+            self.add_outlives_bounds(Some(infcx), implied_bounds)\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // PUBLIC ENTRY POINTS\n "}, {"sha": "30aab38b1eb8522cd41e8689ca86e6f0ec4280d0", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -142,23 +142,23 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             }\n         }\n         hir::ItemKind::Fn(ref sig, ..) => {\n-            check_item_fn(tcx, item.hir_id(), item.ident, item.span, sig.decl);\n+            check_item_fn(tcx, item.def_id, item.ident, item.span, sig.decl);\n         }\n         hir::ItemKind::Static(ty, ..) => {\n-            check_item_type(tcx, item.hir_id(), ty.span, false);\n+            check_item_type(tcx, item.def_id, ty.span, false);\n         }\n         hir::ItemKind::Const(ty, ..) => {\n-            check_item_type(tcx, item.hir_id(), ty.span, false);\n+            check_item_type(tcx, item.def_id, ty.span, false);\n         }\n         hir::ItemKind::ForeignMod { items, .. } => {\n             for it in items.iter() {\n                 let it = tcx.hir().foreign_item(it.id);\n                 match it.kind {\n                     hir::ForeignItemKind::Fn(decl, ..) => {\n-                        check_item_fn(tcx, it.hir_id(), it.ident, it.span, decl)\n+                        check_item_fn(tcx, it.def_id, it.ident, it.span, decl)\n                     }\n                     hir::ForeignItemKind::Static(ty, ..) => {\n-                        check_item_type(tcx, it.hir_id(), ty.span, true)\n+                        check_item_type(tcx, it.def_id, ty.span, true)\n                     }\n                     hir::ForeignItemKind::Type => (),\n                 }\n@@ -199,7 +199,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => (None, trait_item.span),\n     };\n     check_object_unsafe_self_trait_by_name(tcx, trait_item);\n-    check_associated_item(tcx, trait_item.hir_id(), span, method_sig);\n+    check_associated_item(tcx, trait_item.def_id, span, method_sig);\n \n     let encl_trait_hir_id = tcx.hir().get_parent_item(hir_id);\n     let encl_trait = tcx.hir().expect_item(encl_trait_hir_id);\n@@ -327,7 +327,7 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => (None, impl_item.span),\n     };\n \n-    check_associated_item(tcx, impl_item.hir_id(), span, method_sig);\n+    check_associated_item(tcx, impl_item.def_id, span, method_sig);\n }\n \n fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n@@ -437,13 +437,13 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n #[tracing::instrument(level = \"debug\", skip(tcx, span, sig_if_method))]\n fn check_associated_item(\n     tcx: TyCtxt<'_>,\n-    item_id: hir::HirId,\n+    item_id: LocalDefId,\n     span: Span,\n     sig_if_method: Option<&hir::FnSig<'_>>,\n ) {\n-    let code = ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id.expect_owner())));\n+    let code = ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id)));\n     for_id(tcx, item_id, span).with_fcx(|fcx| {\n-        let item = fcx.tcx.associated_item(fcx.tcx.hir().local_def_id(item_id));\n+        let item = fcx.tcx.associated_item(item_id);\n \n         let (mut implied_bounds, self_ty) = match item.container {\n             ty::TraitContainer(_) => (FxHashSet::default(), fcx.tcx.types.self_param),\n@@ -455,11 +455,7 @@ fn check_associated_item(\n         match item.kind {\n             ty::AssocKind::Const => {\n                 let ty = fcx.tcx.type_of(item.def_id);\n-                let ty = fcx.normalize_associated_types_in_wf(\n-                    span,\n-                    ty,\n-                    WellFormedLoc::Ty(item_id.expect_owner()),\n-                );\n+                let ty = fcx.normalize_associated_types_in_wf(span, ty, WellFormedLoc::Ty(item_id));\n                 fcx.register_wf_obligation(ty.into(), span, code.clone());\n             }\n             ty::AssocKind::Fn => {\n@@ -481,11 +477,8 @@ fn check_associated_item(\n                 }\n                 if item.defaultness.has_value() {\n                     let ty = fcx.tcx.type_of(item.def_id);\n-                    let ty = fcx.normalize_associated_types_in_wf(\n-                        span,\n-                        ty,\n-                        WellFormedLoc::Ty(item_id.expect_owner()),\n-                    );\n+                    let ty =\n+                        fcx.normalize_associated_types_in_wf(span, ty, WellFormedLoc::Ty(item_id));\n                     fcx.register_wf_obligation(ty.into(), span, code.clone());\n                 }\n             }\n@@ -496,14 +489,13 @@ fn check_associated_item(\n }\n \n fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>) -> CheckWfFcxBuilder<'tcx> {\n-    for_id(tcx, item.hir_id(), item.span)\n+    for_id(tcx, item.def_id, item.span)\n }\n \n-fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_> {\n-    let def_id = tcx.hir().local_def_id(id);\n+fn for_id(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> CheckWfFcxBuilder<'_> {\n     CheckWfFcxBuilder {\n         inherited: Inherited::build(tcx, def_id),\n-        id,\n+        id: hir::HirId::make_owner(def_id),\n         span,\n         param_env: tcx.param_env(def_id),\n     }\n@@ -665,30 +657,25 @@ fn check_associated_type_bounds(fcx: &FnCtxt<'_, '_>, item: &ty::AssocItem, span\n \n fn check_item_fn(\n     tcx: TyCtxt<'_>,\n-    item_id: hir::HirId,\n+    def_id: LocalDefId,\n     ident: Ident,\n     span: Span,\n     decl: &hir::FnDecl<'_>,\n ) {\n-    for_id(tcx, item_id, span).with_fcx(|fcx| {\n-        let def_id = tcx.hir().local_def_id(item_id);\n+    for_id(tcx, def_id, span).with_fcx(|fcx| {\n         let sig = tcx.fn_sig(def_id);\n         let mut implied_bounds = FxHashSet::default();\n         check_fn_or_method(fcx, ident.span, sig, decl, def_id.to_def_id(), &mut implied_bounds);\n         implied_bounds\n     })\n }\n \n-fn check_item_type(tcx: TyCtxt<'_>, item_id: hir::HirId, ty_span: Span, allow_foreign_ty: bool) {\n+fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_foreign_ty: bool) {\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     for_id(tcx, item_id, ty_span).with_fcx(|fcx| {\n-        let ty = tcx.type_of(tcx.hir().local_def_id(item_id));\n-        let item_ty = fcx.normalize_associated_types_in_wf(\n-            ty_span,\n-            ty,\n-            WellFormedLoc::Ty(item_id.expect_owner()),\n-        );\n+        let ty = tcx.type_of(item_id);\n+        let item_ty = fcx.normalize_associated_types_in_wf(ty_span, ty, WellFormedLoc::Ty(item_id));\n \n         let mut forbid_unsized = true;\n         if allow_foreign_ty {\n@@ -701,7 +688,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: hir::HirId, ty_span: Span, allow_fo\n         fcx.register_wf_obligation(\n             item_ty.into(),\n             ty_span,\n-            ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id.expect_owner()))),\n+            ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id))),\n         );\n         if forbid_unsized {\n             fcx.register_bound("}, {"sha": "eb3853b6b3dee9e85eb26a08318607b5e008babb", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -9,6 +9,7 @@ use rustc_span::Span;\n \n mod explicit;\n mod implicit_infer;\n+crate mod outlives_bounds;\n /// Code to write unit test for outlives.\n pub mod test;\n mod utils;"}, {"sha": "4ab5fe26abe56098cc4210db94e1c804cd90afbc", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,11 +1,11 @@\n-use crate::infer::canonical::OriginalQueryValues;\n-use crate::infer::InferCtxt;\n-use crate::traits::query::NoSolution;\n-use crate::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n use rustc_hir as hir;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n+use rustc_trait_selection::infer::canonical::OriginalQueryValues;\n+use rustc_trait_selection::infer::InferCtxt;\n+use rustc_trait_selection::traits::query::NoSolution;\n+use rustc_trait_selection::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n \n pub use rustc_middle::traits::query::OutlivesBound;\n ", "previous_filename": "compiler/rustc_trait_selection/src/traits/query/outlives_bounds.rs"}, {"sha": "76ae2ee43566e9d0ac28a7cf6c49fca342159d70", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::outlives::Component;\n+use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Region, RegionKind, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -35,7 +35,7 @@ pub fn insert_outlives_predicate<'tcx>(\n             // Or if within `struct Foo<U>` you had `T = Vec<U>`, then\n             // we would want to add `U: 'outlived_region`\n             let mut components = smallvec![];\n-            tcx.push_outlives_components(ty, &mut components);\n+            push_outlives_components(tcx, ty, &mut components);\n             for component in components {\n                 match component {\n                     Component::Region(r) => {"}, {"sha": "635708fd4cf6e71a0ba6975068e7c1c34807ac32", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -189,7 +189,6 @@ mod boxed {\n pub mod borrow;\n pub mod collections;\n pub mod fmt;\n-pub mod prelude;\n pub mod raw_vec;\n pub mod rc;\n pub mod slice;"}, {"sha": "0534ad3edc79d541ebe1695f81ffaf7ff455d441", "filename": "library/alloc/src/prelude/mod.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6cc0a764e082d9c0abcf37a768d5889247ba13e2/library%2Falloc%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc0a764e082d9c0abcf37a768d5889247ba13e2/library%2Falloc%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fprelude%2Fmod.rs?ref=6cc0a764e082d9c0abcf37a768d5889247ba13e2", "patch": "@@ -1,15 +0,0 @@\n-//! The alloc Prelude\n-//!\n-//! The purpose of this module is to alleviate imports of commonly-used\n-//! items of the `alloc` crate by adding a glob import to the top of modules:\n-//!\n-//! ```\n-//! # #![allow(unused_imports)]\n-//! #![feature(alloc_prelude)]\n-//! extern crate alloc;\n-//! use alloc::prelude::v1::*;\n-//! ```\n-\n-#![unstable(feature = \"alloc_prelude\", issue = \"58935\")]\n-\n-pub mod v1;"}, {"sha": "6a53b4ca1f6ca961f1c53703c3a56c5e4ca21f72", "filename": "library/alloc/src/prelude/v1.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6cc0a764e082d9c0abcf37a768d5889247ba13e2/library%2Falloc%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc0a764e082d9c0abcf37a768d5889247ba13e2/library%2Falloc%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fprelude%2Fv1.rs?ref=6cc0a764e082d9c0abcf37a768d5889247ba13e2", "patch": "@@ -1,14 +0,0 @@\n-//! The first version of the prelude of `alloc` crate.\n-//!\n-//! See the [module-level documentation](../index.html) for more.\n-\n-#![unstable(feature = \"alloc_prelude\", issue = \"58935\")]\n-\n-#[unstable(feature = \"alloc_prelude\", issue = \"58935\")]\n-pub use crate::borrow::ToOwned;\n-#[unstable(feature = \"alloc_prelude\", issue = \"58935\")]\n-pub use crate::boxed::Box;\n-#[unstable(feature = \"alloc_prelude\", issue = \"58935\")]\n-pub use crate::string::{String, ToString};\n-#[unstable(feature = \"alloc_prelude\", issue = \"58935\")]\n-pub use crate::vec::Vec;"}, {"sha": "95798879155c55cf30d497f1c5d155c81bcf543b", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -44,7 +44,7 @@ use crate::intrinsics;\n /// ```\n #[inline]\n #[stable(feature = \"unreachable\", since = \"1.27.0\")]\n-#[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n+#[rustc_const_stable(feature = \"const_unreachable_unchecked\", since = \"1.57.0\")]\n pub const unsafe fn unreachable_unchecked() -> ! {\n     // SAFETY: the safety contract for `intrinsics::unreachable` must\n     // be upheld by the caller."}, {"sha": "1aeb83931e5aa52fa90a53673ade1958fc01bd7e", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -735,7 +735,7 @@ extern \"rust-intrinsic\" {\n     /// reach code marked with this function.\n     ///\n     /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`].\n-    #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n+    #[rustc_const_stable(feature = \"const_unreachable_unchecked\", since = \"1.57.0\")]\n     pub fn unreachable() -> !;\n \n     /// Informs the optimizer that a condition is always true."}, {"sha": "13b80c05dbb30eb756a541450055caf7c78a656f", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -130,7 +130,6 @@\n #![feature(const_trait_impl)]\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n-#![feature(const_unreachable_unchecked)]\n #![feature(const_default_impls)]\n #![feature(duration_consts_2)]\n #![feature(ptr_metadata)]"}, {"sha": "1247f330875583865cd007a6dd3caba9c5bcce4b", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -62,7 +62,7 @@\n //! some atomic operations. Maximally portable code will want to be careful\n //! about which atomic types are used. `AtomicUsize` and `AtomicIsize` are\n //! generally the most portable, but even then they're not available everywhere.\n-//! For reference, the `std` library requires pointer-sized atomics, although\n+//! For reference, the `std` library requires `AtomicBool`s and pointer-sized atomics, although\n //! `core` does not.\n //!\n //! Currently you'll need to use `#[cfg(target_arch)]` primarily to"}, {"sha": "4dfa2b4ff1eb432aaddd2ba69b195249286ad5cb", "filename": "library/std/src/sys/unix/process/zircon.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -25,9 +25,12 @@ pub const ZX_TASK_TERMINATED: zx_signals_t = ZX_OBJECT_SIGNAL_3;\n \n pub const ZX_RIGHT_SAME_RIGHTS: zx_rights_t = 1 << 31;\n \n+// The upper four bits gives the minor version.\n pub type zx_object_info_topic_t = u32;\n \n-pub const ZX_INFO_PROCESS: zx_object_info_topic_t = 3;\n+pub const ZX_INFO_PROCESS: zx_object_info_topic_t = 3 | (1 << 28);\n+\n+pub type zx_info_process_flags_t = u32;\n \n pub fn zx_cvt<T>(t: T) -> io::Result<T>\n where\n@@ -68,9 +71,9 @@ impl Drop for Handle {\n #[repr(C)]\n pub struct zx_info_process_t {\n     pub return_code: i64,\n-    pub started: bool,\n-    pub exited: bool,\n-    pub debugger_attached: bool,\n+    pub start_time: zx_time_t,\n+    pub flags: zx_info_process_flags_t,\n+    pub reserved1: u32,\n }\n \n extern \"C\" {"}, {"sha": "0031e3915fa40d7bbcaedc3d452000da0a7f913f", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -255,7 +255,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 9,\n+            format_version: types::FORMAT_VERSION,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "9466f84ffcd59192dce3492270034af4efdfdd0a", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -510,5 +510,8 @@ pub struct Static {\n     pub expr: String,\n }\n \n+/// rustdoc format-version.\n+pub const FORMAT_VERSION: u32 = 9;\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "42cef9bb67911e1e19915aac6b4c8cc1216d6310", "filename": "src/test/assembly/asm/aarch64-outline-atomics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -4,6 +4,7 @@\n // compile-flags: --target aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64\n // only-aarch64\n+// only-linux\n \n #![crate_type = \"rlib\"]\n "}, {"sha": "1c3baec5d8638cbd7dd016494a0db5e94199da38", "filename": "src/test/ui/consts/const_unsafe_unreachable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_unreachable_unchecked)]\n-\n const unsafe fn foo(x: bool) -> bool {\n     match x {\n         true => true,\n@@ -12,5 +10,5 @@ const unsafe fn foo(x: bool) -> bool {\n const BAR: bool = unsafe { foo(true) };\n \n fn main() {\n-  assert_eq!(BAR, true);\n+    assert_eq!(BAR, true);\n }"}, {"sha": "b418fea617ceaec29dd407105371ffa2233a4a4b", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,5 +1,4 @@\n // error-pattern: evaluation of constant value failed\n-#![feature(const_unreachable_unchecked)]\n \n const unsafe fn foo(x: bool) -> bool {\n     match x {\n@@ -11,5 +10,5 @@ const unsafe fn foo(x: bool) -> bool {\n const BAR: bool = unsafe { foo(false) };\n \n fn main() {\n-  assert_eq!(BAR, true);\n+    assert_eq!(BAR, true);\n }"}, {"sha": "ec6ce1f5d7c0864bea7caf1b7169376a4fe4eb12", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -7,13 +7,13 @@ LL |     unsafe { intrinsics::unreachable() }\n    |              entering unreachable code\n    |              inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n-  ::: $DIR/const_unsafe_unreachable_ub.rs:7:18\n+  ::: $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |\n LL |         false => std::hint::unreachable_unchecked(),\n-   |                  ---------------------------------- inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:7:18\n+   |                  ---------------------------------- inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:6:18\n ...\n LL | const BAR: bool = unsafe { foo(false) };\n-   |                            ---------- inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:11:28\n+   |                            ---------- inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:10:28\n \n error: aborting due to previous error\n "}, {"sha": "a1c7af128d2ee438fb3339489a3251466e74f225", "filename": "src/test/ui/errors/issue-89280-emitter-overflow-splice-lines.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+trait X {\n+    fn test(x: u32, (\n+//~^ WARN anonymous parameters are deprecated and will be removed in the next edition\n+//~^^ WARN this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+    )) {}\n+}\n+\n+fn main() {}"}, {"sha": "4ec78a298fe6211382f69a473149ef0171c6b054", "filename": "src/test/ui/errors/issue-89280-emitter-overflow-splice-lines.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferrors%2Fissue-89280-emitter-overflow-splice-lines.stderr?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -0,0 +1,23 @@\n+warning: anonymous parameters are deprecated and will be removed in the next edition\n+  --> $DIR/issue-89280-emitter-overflow-splice-lines.rs:4:21\n+   |\n+LL |       fn test(x: u32, (\n+   |  _____________________^\n+LL | |\n+LL | |\n+LL | |     )) {}\n+   | |_____^\n+   |\n+   = note: `#[warn(anonymous_parameters)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+help: try naming the parameter or explicitly ignoring it\n+   |\n+LL ~     fn test(x: u32, _: (\n+LL +\n+LL +\n+LL ~     )) {}\n+   |\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ff2ffec22c4564a65a0b49a151edcab3a61825ec", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -13,7 +13,7 @@ struct Fooy<T>(T);\n \n impl<T> Foo for Fooy<T> {\n     type A<'a> where Self: 'static = (&'a ());\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR `impl` associated type\n     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n     //~^ ERROR `impl` associated type\n     //~| ERROR lifetime bound not satisfied"}, {"sha": "f47b5f81e25b2c2a5fc55d7c3f44021dc827c2e6", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,11 +1,11 @@\n-error[E0310]: the parameter type `T` may not live long enough\n+error: `impl` associated type signature for `A` doesn't match `trait` associated type signature\n   --> $DIR/impl_bounds.rs:15:5\n    |\n+LL |     type A<'a> where Self: 'a;\n+   |     -------------------------- expected\n+...\n LL |     type A<'a> where Self: 'static = (&'a ());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the definition in impl matches the definition from the trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n \n error: `impl` associated type signature for `B` doesn't match `trait` associated type signature\n   --> $DIR/impl_bounds.rs:17:5\n@@ -85,5 +85,5 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0277, E0310, E0478.\n+Some errors have detailed explanations: E0277, E0478.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "f1f05ea6627e8f9282564e85d5732af2eea4488e", "filename": "src/test/ui/generic-associated-types/issue-86787.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -21,8 +21,8 @@ where\n {\n     type T = Either<Left::T, Right::T>;\n     type TRef<'a>\n-    //~^ the associated type\n-    //~^^ the associated type\n+    //~^ `impl` associated type signature\n+    //~^^ `impl` associated type signature\n     where\n     <Left as HasChildrenOf>::T: 'a,\n     <Right as HasChildrenOf>::T: 'a"}, {"sha": "648eff77d73bb876abde0e156833a300d6db1494", "filename": "src/test/ui/generic-associated-types/issue-86787.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -1,29 +1,32 @@\n-error[E0309]: the associated type `<Left as HasChildrenOf>::T` may not live long enough\n+error: `impl` associated type signature for `TRef` doesn't match `trait` associated type signature\n   --> $DIR/issue-86787.rs:23:5\n    |\n+LL |       type TRef<'a>;\n+   |       -------------- expected\n+...\n LL | /     type TRef<'a>\n LL | |\n LL | |\n LL | |     where\n LL | |     <Left as HasChildrenOf>::T: 'a,\n LL | |     <Right as HasChildrenOf>::T: 'a\n-   | |                                    - help: consider adding a where clause: `, <Left as HasChildrenOf>::T: 'a`\n LL | |     = Either<&'a Left::T, &'a Right::T>;\n-   | |________________________________________^ ...so that the definition in impl matches the definition from the trait\n+   | |________________________________________^ found\n \n-error[E0309]: the associated type `<Right as HasChildrenOf>::T` may not live long enough\n+error: `impl` associated type signature for `TRef` doesn't match `trait` associated type signature\n   --> $DIR/issue-86787.rs:23:5\n    |\n+LL |       type TRef<'a>;\n+   |       -------------- expected\n+...\n LL | /     type TRef<'a>\n LL | |\n LL | |\n LL | |     where\n LL | |     <Left as HasChildrenOf>::T: 'a,\n LL | |     <Right as HasChildrenOf>::T: 'a\n-   | |                                    - help: consider adding a where clause: `, <Right as HasChildrenOf>::T: 'a`\n LL | |     = Either<&'a Left::T, &'a Right::T>;\n-   | |________________________________________^ ...so that the definition in impl matches the definition from the trait\n+   | |________________________________________^ found\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "2e65af594a6bd545cfbe1cd066e4844625f1f4d3", "filename": "src/test/ui/generic-associated-types/issue-88287.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(generic_associated_types)]\n+#![feature(type_alias_impl_trait)]\n+\n+use std::future::Future;\n+\n+trait SearchableResource<Criteria> {\n+    type SearchResult;\n+}\n+\n+trait SearchableResourceExt<Criteria>: SearchableResource<Criteria> {\n+    type Future<'f, A: 'f + ?Sized, B: 'f>: Future<Output = Result<Vec<A::SearchResult>, ()>> + 'f\n+    where\n+        A: SearchableResource<B>;\n+\n+    fn search<'c>(&'c self, client: &'c ()) -> Self::Future<'c, Self, Criteria>;\n+}\n+\n+type SearchFutureTy<'f, A, B: 'f>\n+where\n+    A: SearchableResource<B> + ?Sized + 'f,\n+= impl Future<Output = Result<Vec<A::SearchResult>, ()>> + 'f;\n+impl<T, Criteria> SearchableResourceExt<Criteria> for T\n+where\n+    T: SearchableResource<Criteria>,\n+{\n+    type Future<'f, A, B: 'f>\n+    where\n+        A: SearchableResource<B> + ?Sized + 'f,\n+    = SearchFutureTy<'f, A, B>;\n+\n+    fn search<'c>(&'c self, _client: &'c ()) -> Self::Future<'c, Self, Criteria> {\n+        async move { todo!() }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4a405bd3625c128c6b69c8bac1c41c8332f8ae85", "filename": "src/test/ui/generic-associated-types/issue-88405.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88405.rs?ref=7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait SomeTrait {}\n+trait OtherTrait {\n+    type Item;\n+}\n+\n+trait ErrorSimpleExample {\n+    type AssociatedType: SomeTrait;\n+    type GatBounded<T: SomeTrait>;\n+    type ErrorMinimal: OtherTrait<Item = Self::GatBounded<Self::AssociatedType>>;\n+}\n+\n+fn main() {}"}]}