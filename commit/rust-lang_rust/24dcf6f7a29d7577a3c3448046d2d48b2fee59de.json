{"sha": "24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZGNmNmY3YTI5ZDc1NzdhM2MzNDQ4MDQ2ZDJkNDhiMmZlZTU5ZGU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-03T20:07:18Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:47Z"}, "message": "Allow to use super trait bounds in where clauses", "tree": {"sha": "de5838a155bbb04e5e9a23f3ddeb1a19a1a6404b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de5838a155bbb04e5e9a23f3ddeb1a19a1a6404b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/MACgkQgTGiTgx5\n769oVg//SQbuwjzBkarvALN0+8sLb4jxkKvADQDkBYzVsBh26W8TzuUHUx2Q5NKt\nbozSFdf+WDJzFIjNcCwhBj2CEH/2LWlC8SGxt4QMGmLrYHDISjx1EgsNwyPFVbeP\n6hPonaeKU6+8JtjtC2VikpQlU+eXJ1NXF36CvJBYk0fkBDTnH7G4RficgvTens5t\nCZPsnvzkJdz48wDPRE01W6cGkN5c3Gbmcqp87mRbVLGxYpywDZeJ3I0mcd0RpFck\nN8b+uR3atIV1vZyenYOGOp6I0E/L3gK+Cgr6UbhY6Ce+FU8QiKaQJzhi6qXFBC8U\np6V0DssytjRXLxXUbelHgdsjcktSEgMYGxqf0tdFtE3VUCiIm9SvTmoY6OabsP8A\nVORAo+OkGqMuqzAvaxPiL7mCpZf8MJCM8GDrdj+brlTClsz8CzDbS5coFGtsq/1O\nfavTfvvfuP1VZ+3bhFSB0cTIh/xo2+Fo82eGfLXbpiRAOD9w2NiFJDrHr8VCSEEn\nFt3eDFkjJPRt0ImMLzjubxYwAGO848vnDhwcZ6E2oxNxF52a6c1wVNXTKPflCuiN\nbGdBfSSXzQJRRTy7nWvHz+oUEpc2HW3oUtz19q0L6GxBzB7Ir9JTak9nE5DCezPt\n6Evz6DVRd+ruAy6WG/v42MdtOl4mZvP6linyCF9NZH7ktaWnXgw=\n=bm4J\n-----END PGP SIGNATURE-----", "payload": "tree de5838a155bbb04e5e9a23f3ddeb1a19a1a6404b\nparent 361543d776d832b42f022f5b3aa1ab77263bc4a9\nauthor Santiago Pastorino <spastorino@gmail.com> 1604434038 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487027 -0300\n\nAllow to use super trait bounds in where clauses\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "html_url": "https://github.com/rust-lang/rust/commit/24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361543d776d832b42f022f5b3aa1ab77263bc4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/361543d776d832b42f022f5b3aa1ab77263bc4a9", "html_url": "https://github.com/rust-lang/rust/commit/361543d776d832b42f022f5b3aa1ab77263bc4a9"}], "stats": {"total": 190, "additions": 167, "deletions": 23}, "files": [{"sha": "ed032220b54a2f1d249e8f4ad3882c17f93775ef", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "patch": "@@ -438,7 +438,7 @@ rustc_queries! {\n \n         /// To avoid cycles within the predicates of a single item we compute\n         /// per-type-parameter predicates for resolving `T::AssocTy`.\n-        query type_param_predicates(key: (DefId, LocalDefId)) -> ty::GenericPredicates<'tcx> {\n+        query type_param_predicates(key: (DefId, LocalDefId, rustc_span::symbol::Ident)) -> ty::GenericPredicates<'tcx> {\n             desc { |tcx| \"computing the bounds for type parameter `{}`\", {\n                 let id = tcx.hir().local_def_id_to_hir_id(key.1);\n                 tcx.hir().ty_param_name(id)"}, {"sha": "339a068205c8e136ee5707ff4131080fe83a852a", "filename": "compiler/rustc_middle/src/ty/query/keys.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs?ref=24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "patch": "@@ -7,7 +7,7 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_query_system::query::DefaultCacheSelector;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n /// The `Key` trait controls what types can legally be used as the key\n@@ -149,6 +149,17 @@ impl Key for (LocalDefId, DefId) {\n     }\n }\n \n+impl Key for (DefId, LocalDefId, Ident) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        self.0.krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.1.default_span(tcx)\n+    }\n+}\n+\n impl Key for (CrateNum, DefId) {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "e891ea3403f47e3d6fbfb73e59a116dc0d968797", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "patch": "@@ -49,9 +49,10 @@ pub trait AstConv<'tcx> {\n \n     fn default_constness_for_trait_bounds(&self) -> Constness;\n \n-    /// Returns predicates in scope of the form `X: Foo`, where `X` is\n-    /// a type parameter `X` with the given id `def_id`. This is a\n-    /// subset of the full set of predicates.\n+    /// Returns predicates in scope of the form `X: Foo<T>`, where `X`\n+    /// is a type parameter `X` with the given id `def_id` and T\n+    /// matches assoc_name. This is a subset of the full set of\n+    /// predicates.\n     ///\n     /// This is used for one specific purpose: resolving \"short-hand\"\n     /// associated type references like `T::Item`. In principle, we\n@@ -60,7 +61,12 @@ pub trait AstConv<'tcx> {\n     /// but this can lead to cycle errors. The problem is that we have\n     /// to do this resolution *in order to create the predicates in\n     /// the first place*. Hence, we have this \"special pass\".\n-    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx>;\n+    fn get_type_parameter_bounds(\n+        &self,\n+        span: Span,\n+        def_id: DefId,\n+        assoc_name: Ident,\n+    ) -> ty::GenericPredicates<'tcx>;\n \n     /// Returns the lifetime to use when a lifetime is omitted (and not elided).\n     fn re_infer(&self, param: Option<&ty::GenericParamDef>, span: Span)\n@@ -1361,8 +1367,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ty_param_def_id, assoc_name, span,\n         );\n \n-        let predicates =\n-            &self.get_type_parameter_bounds(span, ty_param_def_id.to_def_id()).predicates;\n+        let predicates = &self\n+            .get_type_parameter_bounds(span, ty_param_def_id.to_def_id(), assoc_name)\n+            .predicates;\n \n         debug!(\"find_bound_for_assoc_item: predicates={:#?}\", predicates);\n "}, {"sha": "96ebb781f0bcd69537a352bcba393c03edb00d39", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "patch": "@@ -20,6 +20,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n use rustc_session::Session;\n+use rustc_span::symbol::Ident;\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode};\n \n@@ -183,7 +184,12 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn get_type_parameter_bounds(&self, _: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n+    fn get_type_parameter_bounds(\n+        &self,\n+        _: Span,\n+        def_id: DefId,\n+        assoc_name: Ident,\n+    ) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n         let item_id = tcx.hir().ty_param_owner(hir_id);\n@@ -196,9 +202,23 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n                 self.param_env.caller_bounds().iter().filter_map(|predicate| {\n                     match predicate.skip_binders() {\n                         ty::PredicateAtom::Trait(data, _) if data.self_ty().is_param(index) => {\n-                            // HACK(eddyb) should get the original `Span`.\n-                            let span = tcx.def_span(def_id);\n-                            Some((predicate, span))\n+                            let trait_did = data.def_id();\n+                            if tcx\n+                                .associated_items(trait_did)\n+                                .find_by_name_and_kind(\n+                                    tcx,\n+                                    assoc_name,\n+                                    ty::AssocKind::Type,\n+                                    trait_did,\n+                                )\n+                                .is_some()\n+                            {\n+                                // HACK(eddyb) should get the original `Span`.\n+                                let span = tcx.def_span(def_id);\n+                                Some((predicate, span))\n+                            } else {\n+                                None\n+                            }\n                         }\n                         _ => None,\n                     }"}, {"sha": "756147ca54c2c791c51f6f97e90cb5b71ef35bd1", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 102, "deletions": 11, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "patch": "@@ -310,8 +310,17 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         }\n     }\n \n-    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n-        self.tcx.at(span).type_param_predicates((self.item_def_id, def_id.expect_local()))\n+    fn get_type_parameter_bounds(\n+        &self,\n+        span: Span,\n+        def_id: DefId,\n+        assoc_name: Ident,\n+    ) -> ty::GenericPredicates<'tcx> {\n+        self.tcx.at(span).type_param_predicates((\n+            self.item_def_id,\n+            def_id.expect_local(),\n+            assoc_name,\n+        ))\n     }\n \n     fn re_infer(&self, _: Option<&ty::GenericParamDef>, _: Span) -> Option<ty::Region<'tcx>> {\n@@ -492,7 +501,7 @@ fn get_new_lifetime_name<'tcx>(\n /// `X: Foo` where `X` is the type parameter `def_id`.\n fn type_param_predicates(\n     tcx: TyCtxt<'_>,\n-    (item_def_id, def_id): (DefId, LocalDefId),\n+    (item_def_id, def_id, assoc_name): (DefId, LocalDefId, Ident),\n ) -> ty::GenericPredicates<'_> {\n     use rustc_hir::*;\n \n@@ -517,7 +526,7 @@ fn type_param_predicates(\n     let mut result = parent\n         .map(|parent| {\n             let icx = ItemCtxt::new(tcx, parent);\n-            icx.get_type_parameter_bounds(DUMMY_SP, def_id.to_def_id())\n+            icx.get_type_parameter_bounds(DUMMY_SP, def_id.to_def_id(), assoc_name)\n         })\n         .unwrap_or_default();\n     let mut extend = None;\n@@ -560,12 +569,18 @@ fn type_param_predicates(\n \n     let icx = ItemCtxt::new(tcx, item_def_id);\n     let extra_predicates = extend.into_iter().chain(\n-        icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, OnlySelfBounds(true))\n-            .into_iter()\n-            .filter(|(predicate, _)| match predicate.skip_binders() {\n-                ty::PredicateAtom::Trait(data, _) => data.self_ty().is_param(index),\n-                _ => false,\n-            }),\n+        icx.type_parameter_bounds_in_generics(\n+            ast_generics,\n+            param_id,\n+            ty,\n+            OnlySelfBounds(true),\n+            Some(assoc_name),\n+        )\n+        .into_iter()\n+        .filter(|(predicate, _)| match predicate.skip_binders() {\n+            ty::PredicateAtom::Trait(data, _) => data.self_ty().is_param(index),\n+            _ => false,\n+        }),\n     );\n     result.predicates =\n         tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(extra_predicates));\n@@ -583,6 +598,7 @@ impl ItemCtxt<'tcx> {\n         param_id: hir::HirId,\n         ty: Ty<'tcx>,\n         only_self_bounds: OnlySelfBounds,\n+        assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let constness = self.default_constness_for_trait_bounds();\n         let from_ty_params = ast_generics\n@@ -593,6 +609,10 @@ impl ItemCtxt<'tcx> {\n                 _ => None,\n             })\n             .flat_map(|bounds| bounds.iter())\n+            .filter(|b| match assoc_name {\n+                Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n+                None => true,\n+            })\n             .flat_map(|b| predicates_from_bound(self, ty, b, constness));\n \n         let from_where_clauses = ast_generics\n@@ -611,12 +631,43 @@ impl ItemCtxt<'tcx> {\n                 } else {\n                     None\n                 };\n-                bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b)))\n+                bp.bounds\n+                    .iter()\n+                    .filter(|b| match assoc_name {\n+                        Some(assoc_name) => self.bound_defines_assoc_item(b, assoc_name),\n+                        None => true,\n+                    })\n+                    .filter_map(move |b| bt.map(|bt| (bt, b)))\n             })\n             .flat_map(|(bt, b)| predicates_from_bound(self, bt, b, constness));\n \n         from_ty_params.chain(from_where_clauses).collect()\n     }\n+\n+    fn bound_defines_assoc_item(&self, b: &hir::GenericBound<'_>, assoc_name: Ident) -> bool {\n+        debug!(\"bound_defines_assoc_item(b={:?}, assoc_name={:?})\", b, assoc_name);\n+\n+        match b {\n+            hir::GenericBound::Trait(poly_trait_ref, _) => {\n+                let trait_ref = &poly_trait_ref.trait_ref;\n+                let trait_did = trait_ref.trait_def_id().unwrap();\n+                let traits_did = super_traits_of(self.tcx, trait_did);\n+\n+                traits_did.iter().any(|trait_did| {\n+                    self.tcx\n+                        .associated_items(*trait_did)\n+                        .find_by_name_and_kind(\n+                            self.tcx,\n+                            assoc_name,\n+                            ty::AssocKind::Type,\n+                            *trait_did,\n+                        )\n+                        .is_some()\n+                })\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n /// Tests whether this is the AST for a reference to the type\n@@ -1017,6 +1068,7 @@ fn super_predicates_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> ty::GenericPredi\n         item.hir_id,\n         self_param_ty,\n         OnlySelfBounds(!is_trait_alias),\n+        None,\n     );\n \n     // Combine the two lists to form the complete set of superbounds:\n@@ -1034,6 +1086,45 @@ fn super_predicates_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> ty::GenericPredi\n     ty::GenericPredicates { parent: None, predicates: superbounds }\n }\n \n+pub fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> impl Iterator<Item = DefId> {\n+    let mut set = FxHashSet::default();\n+    let mut stack = vec![trait_def_id];\n+    while let Some(trait_did) = stack.pop() {\n+        if !set.insert(trait_did) {\n+            continue;\n+        }\n+\n+        if trait_did.is_local() {\n+            let trait_hir_id = tcx.hir().local_def_id_to_hir_id(trait_did.expect_local());\n+\n+            let item = match tcx.hir().get(trait_hir_id) {\n+                Node::Item(item) => item,\n+                _ => bug!(\"super_trait_of {} is not an item\", trait_hir_id),\n+            };\n+\n+            let supertraits = match item.kind {\n+                hir::ItemKind::Trait(.., ref supertraits, _) => supertraits,\n+                hir::ItemKind::TraitAlias(_, ref supertraits) => supertraits,\n+                _ => span_bug!(item.span, \"super_trait_of invoked on non-trait\"),\n+            };\n+\n+            for supertrait in supertraits.iter() {\n+                let trait_ref = supertrait.trait_ref();\n+                if let Some(trait_did) = trait_ref.and_then(|trait_ref| trait_ref.trait_def_id()) {\n+                    stack.push(trait_did);\n+                }\n+            }\n+        } else {\n+            let generic_predicates = tcx.super_predicates_of(trait_did);\n+            for (predicate, _) in generic_predicates.predicates {\n+                if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n+                    stack.push(data.def_id());\n+                }\n+            }\n+        }\n+    }\n+}\n+\n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let item = tcx.hir().expect_item(hir_id);"}, {"sha": "fde6b91e6c4e29f1b97f88d08e620716f70a4f56", "filename": "src/test/ui/associated-type-bounds/super-trait-referencing.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsuper-trait-referencing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dcf6f7a29d7577a3c3448046d2d48b2fee59de/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsuper-trait-referencing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fsuper-trait-referencing.rs?ref=24dcf6f7a29d7577a3c3448046d2d48b2fee59de", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+trait Foo {\n+    type Item;\n+}\n+\n+trait Bar<T> {}\n+\n+fn baz<T>()\n+where\n+    T: Foo,\n+    T: Bar<T::Item>,\n+{\n+}\n+\n+fn main() {}"}]}