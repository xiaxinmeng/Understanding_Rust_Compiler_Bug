{"sha": "3600c43f49f9901ffc94a139a8a3655944e91e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDBjNDNmNDlmOTkwMWZmYzk0YTEzOWE4YTM2NTU5NDRlOTFlNGU=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-29T06:01:00Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-29T06:01:00Z"}, "message": "SSR: Don't mix non-path-based rules with path-based\n\nIf any rules contain paths, then we reject any rules that don't contain paths. Allowing a mix leads to strange semantics, since the path-based rules only match things where the path refers to semantically the same thing, whereas the non-path-based rules could match anything. Specifically, if we have a rule like `foo ==>> bar` we only want to match the `foo` that is in the current scope, not any `foo`. However \"foo\" can be parsed as a pattern (BIND_PAT -> NAME -> IDENT). Allowing such a rule through would result in renaming everything called `foo` to `bar`. It'd also be slow, since without a path, we'd have to use the slow-scan search mechanism.", "tree": {"sha": "fab3f6475ddb107c5f19834fc914704c930a1392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab3f6475ddb107c5f19834fc914704c930a1392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3600c43f49f9901ffc94a139a8a3655944e91e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3600c43f49f9901ffc94a139a8a3655944e91e4e", "html_url": "https://github.com/rust-lang/rust/commit/3600c43f49f9901ffc94a139a8a3655944e91e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3600c43f49f9901ffc94a139a8a3655944e91e4e/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8124273dd663f7f1ed43b53defc4a2c52dbc12", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8124273dd663f7f1ed43b53defc4a2c52dbc12", "html_url": "https://github.com/rust-lang/rust/commit/5a8124273dd663f7f1ed43b53defc4a2c52dbc12"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "769720befe64728ab51889b5de87ef5ab8d7b783", "filename": "crates/ra_ssr/src/parsing.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3600c43f49f9901ffc94a139a8a3655944e91e4e/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3600c43f49f9901ffc94a139a8a3655944e91e4e/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fparsing.rs?ref=3600c43f49f9901ffc94a139a8a3655944e91e4e", "patch": "@@ -10,6 +10,7 @@ use crate::{SsrError, SsrPattern, SsrRule};\n use ra_syntax::{ast, AstNode, SmolStr, SyntaxKind, SyntaxNode, T};\n use rustc_hash::{FxHashMap, FxHashSet};\n use std::str::FromStr;\n+use test_utils::mark;\n \n #[derive(Debug)]\n pub(crate) struct ParsedRule {\n@@ -102,14 +103,35 @@ impl RuleBuilder {\n         }\n     }\n \n-    fn build(self) -> Result<Vec<ParsedRule>, SsrError> {\n+    fn build(mut self) -> Result<Vec<ParsedRule>, SsrError> {\n         if self.rules.is_empty() {\n             bail!(\"Not a valid Rust expression, type, item, path or pattern\");\n         }\n+        // If any rules contain paths, then we reject any rules that don't contain paths. Allowing a\n+        // mix leads to strange semantics, since the path-based rules only match things where the\n+        // path refers to semantically the same thing, whereas the non-path-based rules could match\n+        // anything. Specifically, if we have a rule like `foo ==>> bar` we only want to match the\n+        // `foo` that is in the current scope, not any `foo`. However \"foo\" can be parsed as a\n+        // pattern (BIND_PAT -> NAME -> IDENT). Allowing such a rule through would result in\n+        // renaming everything called `foo` to `bar`. It'd also be slow, since without a path, we'd\n+        // have to use the slow-scan search mechanism.\n+        if self.rules.iter().any(|rule| contains_path(&rule.pattern)) {\n+            let old_len = self.rules.len();\n+            self.rules.retain(|rule| contains_path(&rule.pattern));\n+            if self.rules.len() < old_len {\n+                mark::hit!(pattern_is_a_single_segment_path);\n+            }\n+        }\n         Ok(self.rules)\n     }\n }\n \n+/// Returns whether there are any paths in `node`.\n+fn contains_path(node: &SyntaxNode) -> bool {\n+    node.kind() == SyntaxKind::PATH\n+        || node.descendants().any(|node| node.kind() == SyntaxKind::PATH)\n+}\n+\n impl FromStr for SsrRule {\n     type Err = SsrError;\n "}, {"sha": "851e573aecf68aaee2fda05b3c7408de36580580", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3600c43f49f9901ffc94a139a8a3655944e91e4e/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3600c43f49f9901ffc94a139a8a3655944e91e4e/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=3600c43f49f9901ffc94a139a8a3655944e91e4e", "patch": "@@ -886,6 +886,45 @@ fn ufcs_matches_method_call() {\n     );\n }\n \n+#[test]\n+fn pattern_is_a_single_segment_path() {\n+    mark::check!(pattern_is_a_single_segment_path);\n+    // The first function should not be altered because the `foo` in scope at the cursor position is\n+    // a different `foo`. This case is special because \"foo\" can be parsed as a pattern (BIND_PAT ->\n+    // NAME -> IDENT), which contains no path. If we're not careful we'll end up matching the `foo`\n+    // in `let foo` from the first function. Whether we should match the `let foo` in the second\n+    // function is less clear. At the moment, we don't. Doing so sounds like a rename operation,\n+    // which isn't really what SSR is for, especially since the replacement `bar` must be able to be\n+    // resolved, which means if we rename `foo` we'll get a name collision.\n+    assert_ssr_transform(\n+        \"foo ==>> bar\",\n+        r#\"\n+        fn f1() -> i32 {\n+            let foo = 1;\n+            let bar = 2;\n+            foo\n+        }\n+        fn f1() -> i32 {\n+            let foo = 1;\n+            let bar = 2;\n+            foo<|>\n+        }\n+        \"#,\n+        expect![[r#\"\n+            fn f1() -> i32 {\n+                let foo = 1;\n+                let bar = 2;\n+                foo\n+            }\n+            fn f1() -> i32 {\n+                let foo = 1;\n+                let bar = 2;\n+                bar\n+            }\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn replace_local_variable_reference() {\n     // The pattern references a local variable `foo` in the block containing the cursor. We should"}]}