{"sha": "c32cde16ab1cd7d8483d176591c22dbac3520833", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMmNkZTE2YWIxY2Q3ZDg0ODNkMTc2NTkxYzIyZGJhYzM1MjA4MzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-22T00:10:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-22T00:11:29Z"}, "message": "rustdoc: Cleanup", "tree": {"sha": "393dcf05cb14cabe8baa95c47b5d3d3e12a3a30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393dcf05cb14cabe8baa95c47b5d3d3e12a3a30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32cde16ab1cd7d8483d176591c22dbac3520833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32cde16ab1cd7d8483d176591c22dbac3520833", "html_url": "https://github.com/rust-lang/rust/commit/c32cde16ab1cd7d8483d176591c22dbac3520833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32cde16ab1cd7d8483d176591c22dbac3520833/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2b6110ddb99e3d4b67c15321b957bdd4b37671", "html_url": "https://github.com/rust-lang/rust/commit/3c2b6110ddb99e3d4b67c15321b957bdd4b37671"}], "stats": {"total": 218, "additions": 120, "deletions": 98}, "files": [{"sha": "0ceccda209d9c1c7cfbf6c3cb12610e56f48aeee", "filename": "src/rustdoc/pass.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c32cde16ab1cd7d8483d176591c22dbac3520833/src%2Frustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32cde16ab1cd7d8483d176591c22dbac3520833/src%2Frustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpass.rs?ref=c32cde16ab1cd7d8483d176591c22dbac3520833", "patch": "@@ -0,0 +1,79 @@\n+/// A single operation on the document model\n+pub type Pass = {\n+    name: ~str,\n+    f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc\n+};\n+\n+pub fn run_passes(\n+    srv: astsrv::Srv,\n+    doc: doc::Doc,\n+    passes: ~[Pass]\n+) -> doc::Doc {\n+    let mut passno = 0;\n+    do vec::foldl(doc, passes) |doc, pass| {\n+        log(debug, fmt!(\"pass #%d\", passno));\n+        passno += 1;\n+        log(debug, doc);\n+        do time(pass.name) {\n+            pass.f(srv, doc)\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_run_passes() {\n+    fn pass1(\n+        _srv: astsrv::Srv,\n+        doc: doc::Doc\n+    ) -> doc::Doc {\n+        doc::Doc_({\n+            pages: ~[\n+                doc::CratePage({\n+                    topmod: doc::ModDoc_({\n+                        item: {\n+                            name: doc.cratemod().name() + ~\"two\",\n+                            .. doc.cratemod().item\n+                        },\n+                        items: ~[],\n+                        index: None\n+                    })\n+                })\n+            ]\n+        })\n+    }\n+    fn pass2(\n+        _srv: astsrv::Srv,\n+        doc: doc::Doc\n+    ) -> doc::Doc {\n+        doc::Doc_({\n+            pages: ~[\n+                doc::CratePage({\n+                    topmod: doc::ModDoc_({\n+                        item: {\n+                            name: doc.cratemod().name() + ~\"three\",\n+                            .. doc.cratemod().item\n+                        },\n+                        items: ~[],\n+                        index: None\n+                    })\n+                })\n+            ]\n+        })\n+    }\n+    let source = ~\"\";\n+    do astsrv::from_str(source) |srv| {\n+        let passes = ~[\n+            {\n+                name: ~\"\",\n+                f: pass1\n+            },\n+            {\n+                name: ~\"\",\n+                f: pass2\n+            }\n+        ];\n+        let doc = extract::from_srv(srv, ~\"one\");\n+        let doc = run_passes(srv, doc, passes);\n+        assert doc.cratemod().name() == ~\"onetwothree\";\n+    }\n+}"}, {"sha": "adde20e020930eb55dc034741ca7d4e105e6da43", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c32cde16ab1cd7d8483d176591c22dbac3520833/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c32cde16ab1cd7d8483d176591c22dbac3520833/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=c32cde16ab1cd7d8483d176591c22dbac3520833", "patch": "@@ -10,11 +10,10 @@\n #[crate_type = \"bin\"];\n \n #[no_core];\n-\n #[legacy_modes];\n \n-#[allow(vecs_implicitly_copyable,\n-        non_implicitly_copyable_typarams)];\n+#[allow(vecs_implicitly_copyable)];\n+#[allow(non_implicitly_copyable_typarams)];\n \n extern mod core(vers = \"0.4\");\n extern mod std(vers = \"0.4\");\n@@ -24,6 +23,7 @@ extern mod syntax(vers = \"0.4\");\n use core::*;\n use std::par;\n \n+mod pass;\n mod config;\n mod parse;\n mod extract;"}, {"sha": "edbf5ca1a9427d322adf8b66b09a8f99873a2d1b", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 38, "deletions": 95, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/c32cde16ab1cd7d8483d176591c22dbac3520833/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32cde16ab1cd7d8483d176591c22dbac3520833/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=c32cde16ab1cd7d8483d176591c22dbac3520833", "patch": "@@ -1,88 +1,7 @@\n-//! Some utility interfaces\n-\n use doc::ItemUtils;\n use doc::Item;\n-use doc::util;\n-\n-/// A single operation on the document model\n-type Pass = {\n-    name: ~str,\n-    f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc\n-};\n-\n-fn run_passes(\n-    srv: astsrv::Srv,\n-    doc: doc::Doc,\n-    passes: ~[Pass]\n-) -> doc::Doc {\n-    let mut passno = 0;\n-    do vec::foldl(doc, passes) |doc, pass| {\n-        log(debug, fmt!(\"pass #%d\", passno));\n-        passno += 1;\n-        log(debug, doc);\n-        do time(pass.name) {\n-            pass.f(srv, doc)\n-        }\n-    }\n-}\n-\n-#[test]\n-fn test_run_passes() {\n-    fn pass1(\n-        _srv: astsrv::Srv,\n-        doc: doc::Doc\n-    ) -> doc::Doc {\n-        doc::Doc_({\n-            pages: ~[\n-                doc::CratePage({\n-                    topmod: doc::ModDoc_({\n-                        item: {\n-                            name: doc.cratemod().name() + ~\"two\",\n-                            .. doc.cratemod().item\n-                        },\n-                        items: ~[],\n-                        index: None\n-                    })\n-                })\n-            ]\n-        })\n-    }\n-    fn pass2(\n-        _srv: astsrv::Srv,\n-        doc: doc::Doc\n-    ) -> doc::Doc {\n-        doc::Doc_({\n-            pages: ~[\n-                doc::CratePage({\n-                    topmod: doc::ModDoc_({\n-                        item: {\n-                            name: doc.cratemod().name() + ~\"three\",\n-                            .. doc.cratemod().item\n-                        },\n-                        items: ~[],\n-                        index: None\n-                    })\n-                })\n-            ]\n-        })\n-    }\n-    let source = ~\"\";\n-    do astsrv::from_str(source) |srv| {\n-        let passes = ~[\n-            {\n-                name: ~\"\",\n-                f: pass1\n-            },\n-            {\n-                name: ~\"\",\n-                f: pass2\n-            }\n-        ];\n-        let doc = extract::from_srv(srv, ~\"one\");\n-        let doc = run_passes(srv, doc, passes);\n-        assert doc.cratemod().name() == ~\"onetwothree\";\n-    }\n-}\n+use pass::Pass;\n+use config::Config;\n \n fn main(args: ~[~str]) {\n \n@@ -92,8 +11,8 @@ fn main(args: ~[~str]) {\n     }\n \n     let config = match config::parse_config(args) {\n-      result::Ok(config) => config,\n-      result::Err(err) => {\n+      Ok(config) => config,\n+      Err(err) => {\n         io::println(fmt!(\"error: %s\", err));\n         return;\n       }\n@@ -102,43 +21,67 @@ fn main(args: ~[~str]) {\n     run(config);\n }\n \n-fn time<T>(what: ~str, f: fn() -> T) -> T {\n-    let start = std::time::precise_time_s();\n-    let rv = f();\n-    let end = std::time::precise_time_s();\n-    info!(\"time: %3.3f s    %s\", end - start, what);\n-    return rv;\n-}\n-\n /// Runs rustdoc over the given file\n-fn run(config: config::Config) {\n+fn run(config: Config) {\n \n     let source_file = config.input_crate;\n+\n+    // Create an AST service from the source code\n     do astsrv::from_file(source_file.to_str()) |srv| {\n+\n+        // Just time how long it takes for the AST to become available\n         do time(~\"wait_ast\") {\n             do astsrv::exec(srv) |_ctxt| { }\n         };\n+\n+        // Extract the initial doc tree from the AST. This contains\n+        // just names and node ids.\n         let doc = time(~\"extract\", || {\n             let default_name = source_file;\n             extract::from_srv(srv, default_name.to_str())\n         });\n-        run_passes(srv, doc, ~[\n+\n+        // Refine and publish the document\n+        pass::run_passes(srv, doc, ~[\n+            // Generate type and signature strings\n             tystr_pass::mk_pass(),\n+            // Record the full paths to various nodes\n             path_pass::mk_pass(),\n+            // Extract the docs attributes and attach them to doc nodes\n             attr_pass::mk_pass(),\n+            // Perform various text escaping\n             escape_pass::mk_pass(),\n+            // Remove things marked doc(hidden)\n             prune_hidden_pass::mk_pass(),\n+            // Extract brief documentation from the full descriptions\n             desc_to_brief_pass::mk_pass(),\n+            // Massage the text to remove extra indentation\n             unindent_pass::mk_pass(),\n+            // Split text into multiple sections according to headers\n             sectionalize_pass::mk_pass(),\n+            // Trim extra spaces from text\n             trim_pass::mk_pass(),\n+            // Sort items by name\n             sort_item_name_pass::mk_pass(),\n+            // Sort items again by kind\n             sort_item_type_pass::mk_pass(),\n+            // Create indexes appropriate for markdown\n             markdown_index_pass::mk_pass(config),\n+            // Break the document into pages if required by the\n+            // output format\n             page_pass::mk_pass(config.output_style),\n+            // Render\n             markdown_pass::mk_pass(\n                 markdown_writer::make_writer_factory(config)\n             )\n         ]);\n     }\n }\n+\n+fn time<T>(what: ~str, f: fn() -> T) -> T {\n+    let start = std::time::precise_time_s();\n+    let rv = f();\n+    let end = std::time::precise_time_s();\n+    info!(\"time: %3.3f s    %s\", end - start, what);\n+    return rv;\n+}"}]}