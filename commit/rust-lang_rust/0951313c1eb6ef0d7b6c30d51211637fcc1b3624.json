{"sha": "0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTEzMTNjMWViNmVmMGQ3YjZjMzBkNTEyMTE2MzdmY2MxYjM2MjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-22T11:57:31Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-22T14:11:43Z"}, "message": "Remove the C(++) ISAAC Rng from the old rt.\n\nThis has to leave rust_gen_seed and rng_gen_seed around since they're\nused to initialise the std::rand RNGs.", "tree": {"sha": "0a0e65ee4ccfabd9b28a759471f35a19f4c19f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a0e65ee4ccfabd9b28a759471f35a19f4c19f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "html_url": "https://github.com/rust-lang/rust/commit/0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb923c7d3f8b37661f49dc2d384749f0296896a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb923c7d3f8b37661f49dc2d384749f0296896a0", "html_url": "https://github.com/rust-lang/rust/commit/fb923c7d3f8b37661f49dc2d384749f0296896a0"}], "stats": {"total": 393, "additions": 2, "deletions": 391}, "files": [{"sha": "1b818bfee415103d642f0c8a1c9f5bd5cd1644c9", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "patch": "@@ -74,7 +74,6 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/rust_rng.cpp \\\n               rt/rust_upcall.cpp \\\n               rt/rust_uv.cpp \\\n-              rt/isaac/randport.cpp \\\n               rt/miniz.cpp \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\"}, {"sha": "7b753f821d71fd5d7b89394ee6afd35b40cd3a81", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "patch": "@@ -242,7 +242,6 @@ pub mod rustrt {\n     use libc::size_t;\n \n     extern {\n-        pub fn rand_seed_size() -> size_t;\n         pub fn rand_gen_seed(buf: *mut u8, sz: size_t);\n     }\n }\n@@ -822,8 +821,8 @@ pub fn seed() -> ~[u8] {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     unsafe {\n-        let n = rustrt::rand_seed_size() as uint;\n-        let mut s = vec::from_elem(n, 0_u8);\n+        let n = RAND_SIZE * 4;\n+        let mut s = vec::from_elem(n as uint, 0_u8);\n         do s.as_mut_buf |p, sz| {\n             rustrt::rand_gen_seed(p, sz as size_t)\n         }\n@@ -1053,46 +1052,6 @@ mod test {\n                      (f32, (f64, (float,)))) = random();\n     }\n \n-    #[test]\n-    fn compare_isaac_implementation() {\n-        #[fixed_stack_segment]; #[inline(never)];\n-\n-        // This is to verify that the implementation of the ISAAC rng is\n-        // correct (i.e. matches the output of the upstream implementation,\n-        // which is in the runtime)\n-        use libc::size_t;\n-\n-        #[abi = \"cdecl\"]\n-        mod rustrt {\n-            use libc::size_t;\n-\n-            #[allow(non_camel_case_types)] // runtime type\n-            pub enum rust_rng {}\n-\n-            extern {\n-                pub fn rand_new_seeded(buf: *u8, sz: size_t) -> *rust_rng;\n-                pub fn rand_next(rng: *rust_rng) -> u32;\n-                pub fn rand_free(rng: *rust_rng);\n-            }\n-        }\n-\n-        // run against several seeds\n-        do 10.times {\n-            unsafe {\n-                let seed = super::seed();\n-                let rt_rng = do seed.as_imm_buf |p, sz| {\n-                    rustrt::rand_new_seeded(p, sz as size_t)\n-                };\n-                let mut rng = IsaacRng::new_seeded(seed);\n-\n-                do 10000.times {\n-                    assert_eq!(rng.next(), rustrt::rand_next(rt_rng));\n-                }\n-                rustrt::rand_free(rt_rng);\n-            }\n-        }\n-    }\n-\n     #[test]\n     fn test_sample() {\n         let MIN_VAL = 1;"}, {"sha": "c28b35e688d5a11be71eb7099e98121236a84609", "filename": "src/rt/isaac/rand.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fb923c7d3f8b37661f49dc2d384749f0296896a0/src%2Frt%2Fisaac%2Frand.h", "raw_url": "https://github.com/rust-lang/rust/raw/fb923c7d3f8b37661f49dc2d384749f0296896a0/src%2Frt%2Fisaac%2Frand.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fisaac%2Frand.h?ref=fb923c7d3f8b37661f49dc2d384749f0296896a0", "patch": "@@ -1,54 +0,0 @@\n-/*\n-------------------------------------------------------------------------------\n-rand.h: definitions for a random number generator\n-By Bob Jenkins, 1996, Public Domain\n-MODIFIED:\n-  960327: Creation (addition of randinit, really)\n-  970719: use context, not global variables, for internal state\n-  980324: renamed seed to flag\n-  980605: recommend RANDSIZL=4 for noncryptography.\n-  010626: note this is public domain\n-------------------------------------------------------------------------------\n-*/\n-#ifndef STANDARD\n-#include \"standard.h\"\n-#endif\n-\n-#ifndef RAND\n-#define RAND\n-#define RANDSIZL   (8)  /* I recommend 8 for crypto, 4 for simulations */\n-#define RANDSIZ    (1<<RANDSIZL)\n-\n-/* context of random number generator */\n-struct randctx\n-{\n-  ub4 randcnt;\n-  ub4 randrsl[RANDSIZ];\n-  ub4 randmem[RANDSIZ];\n-  ub4 randa;\n-  ub4 randb;\n-  ub4 randc;\n-};\n-typedef  struct randctx  randctx;\n-\n-/*\n-------------------------------------------------------------------------------\n- If (flag==TRUE), then use the contents of randrsl[0..RANDSIZ-1] as the seed.\n-------------------------------------------------------------------------------\n-*/\n-void randinit(randctx *r, word flag);\n-\n-void isaac(randctx *r);\n-\n-\n-/*\n-------------------------------------------------------------------------------\n- Call isaac_rand(/o_ randctx *r _o/) to retrieve a single 32-bit random value\n-------------------------------------------------------------------------------\n-*/\n-#define isaac_rand(r) \\\n-   (!(r)->randcnt-- ? \\\n-     (isaac(r), (r)->randcnt=RANDSIZ-1, (r)->randrsl[(r)->randcnt]) : \\\n-     (r)->randrsl[(r)->randcnt])\n-\n-#endif  /* RAND */"}, {"sha": "a2928a9b5d08e66998136f9d6a51f4808fa6b884", "filename": "src/rt/isaac/randport.cpp", "status": "removed", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/fb923c7d3f8b37661f49dc2d384749f0296896a0/src%2Frt%2Fisaac%2Frandport.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb923c7d3f8b37661f49dc2d384749f0296896a0/src%2Frt%2Fisaac%2Frandport.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fisaac%2Frandport.cpp?ref=fb923c7d3f8b37661f49dc2d384749f0296896a0", "patch": "@@ -1,139 +0,0 @@\n-/*\n-------------------------------------------------------------------------------\n-rand.c: By Bob Jenkins.  My random number generator, ISAAC.  Public Domain\n-MODIFIED:\n-  960327: Creation (addition of randinit, really)\n-  970719: use context, not global variables, for internal state\n-  980324: make a portable version\n-  010626: Note this is public domain\n-  100725: Mask on use of >32 bits, not on assignment: from Paul Eggert\n-------------------------------------------------------------------------------\n-*/\n-#ifndef STANDARD\n-#include \"standard.h\"\n-#endif\n-#ifndef RAND\n-#include \"rand.h\"\n-#endif\n-\n-\n-#define ind(mm,x)  ((mm)[(x>>2)&(RANDSIZ-1)])\n-#define rngstep(mix,a,b,mm,m,m2,r,x) \\\n-{ \\\n-  x = *m;  \\\n-  a = ((a^(mix)) + *(m2++)) & 0xffffffff; \\\n-  *(m++) = y = (ind(mm,x) + a + b) & 0xffffffff; \\\n-  *(r++) = b = (ind(mm,y>>RANDSIZL) + x) & 0xffffffff; \\\n-}\n-\n-void     isaac(randctx *ctx)\n-{\n-   ub4 a,b,x,y,*m,*mm,*m2,*r,*mend;\n-   mm=ctx->randmem; r=ctx->randrsl;\n-   a = ctx->randa; b = ctx->randb + (++ctx->randc);\n-   for (m = mm, mend = m2 = m+(RANDSIZ/2); m<mend; )\n-   {\n-      rngstep( a<<13, a, b, mm, m, m2, r, x);\n-      rngstep( (a & 0xffffffff) >>6 , a, b, mm, m, m2, r, x);\n-      rngstep( a<<2 , a, b, mm, m, m2, r, x);\n-      rngstep( (a & 0xffffffff) >>16, a, b, mm, m, m2, r, x);\n-   }\n-   for (m2 = mm; m2<mend; )\n-   {\n-      rngstep( a<<13, a, b, mm, m, m2, r, x);\n-      rngstep( (a & 0xffffffff) >>6 , a, b, mm, m, m2, r, x);\n-      rngstep( a<<2 , a, b, mm, m, m2, r, x);\n-      rngstep( (a & 0xffffffff) >>16, a, b, mm, m, m2, r, x);\n-   }\n-   ctx->randb = b; ctx->randa = a;\n-}\n-\n-\n-#define mix(a,b,c,d,e,f,g,h) \\\n-{ \\\n-   a^=b<<11;              d+=a; b+=c; \\\n-   b^=(c&0xffffffff)>>2;  e+=b; c+=d; \\\n-   c^=d<<8;               f+=c; d+=e; \\\n-   d^=(e&0xffffffff)>>16; g+=d; e+=f; \\\n-   e^=f<<10;              h+=e; f+=g; \\\n-   f^=(g&0xffffffff)>>4;  a+=f; g+=h; \\\n-   g^=h<<8;               b+=g; h+=a; \\\n-   h^=(a&0xffffffff)>>9;  c+=h; a+=b; \\\n-}\n-\n-/* if (flag==TRUE), then use the contents of randrsl[] to initialize mm[]. */\n-void randinit(randctx *ctx, word flag)\n-{\n-   word i;\n-   ub4 a,b,c,d,e,f,g,h;\n-   ub4 *m,*r;\n-   ctx->randa = ctx->randb = ctx->randc = 0;\n-   m=ctx->randmem;\n-   r=ctx->randrsl;\n-   a=b=c=d=e=f=g=h=0x9e3779b9;  /* the golden ratio */\n-\n-   for (i=0; i<4; ++i)          /* scramble it */\n-   {\n-     mix(a,b,c,d,e,f,g,h);\n-   }\n-\n-   if (flag)\n-   {\n-     /* initialize using the contents of r[] as the seed */\n-     for (i=0; i<RANDSIZ; i+=8)\n-     {\n-       a+=r[i  ]; b+=r[i+1];\n-       c+=r[i+2]; d+=r[i+3];\n-       e+=r[i+4]; f+=r[i+5];\n-       g+=r[i+6]; h+=r[i+7];\n-       mix(a,b,c,d,e,f,g,h);\n-       m[i  ]=a; m[i+1]=b; m[i+2]=c; m[i+3]=d;\n-       m[i+4]=e; m[i+5]=f; m[i+6]=g; m[i+7]=h;\n-     }\n-     /* do a second pass to make all of the seed affect all of m */\n-     for (i=0; i<RANDSIZ; i+=8)\n-     {\n-       a+=m[i  ]; b+=m[i+1];\n-       c+=m[i+2]; d+=m[i+3];\n-       e+=m[i+4]; f+=m[i+5];\n-       g+=m[i+6]; h+=m[i+7];\n-       mix(a,b,c,d,e,f,g,h);\n-       m[i  ]=a; m[i+1]=b; m[i+2]=c; m[i+3]=d;\n-       m[i+4]=e; m[i+5]=f; m[i+6]=g; m[i+7]=h;\n-     }\n-   }\n-   else\n-   {\n-     for (i=0; i<RANDSIZ; i+=8)\n-     {\n-       /* fill in mm[] with messy stuff */\n-       mix(a,b,c,d,e,f,g,h);\n-       m[i  ]=a; m[i+1]=b; m[i+2]=c; m[i+3]=d;\n-       m[i+4]=e; m[i+5]=f; m[i+6]=g; m[i+7]=h;\n-     }\n-   }\n-\n-   isaac(ctx);            /* fill in the first set of results */\n-   ctx->randcnt=RANDSIZ;  /* prepare to use the first set of results */\n-}\n-\n-\n-#ifdef NEVER\n-int main()\n-{\n-  ub4 i,j;\n-  randctx ctx;\n-  ctx.randa=ctx.randb=ctx.randc=(ub4)0;\n-  for (i=0; i<256; ++i) ctx.randrsl[i]=(ub4)0;\n-  randinit(&ctx, TRUE);\n-  for (i=0; i<2; ++i)\n-  {\n-    isaac(&ctx);\n-    for (j=0; j<256; ++j)\n-    {\n-      printf(\"%.8lx\",ctx.randrsl[j]);\n-      if ((j&7)==7) printf(\"\\n\");\n-    }\n-  }\n-}\n-#endif"}, {"sha": "c196a37474b9d3e4adefaebbe4d637b556d7e09d", "filename": "src/rt/isaac/standard.h", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fb923c7d3f8b37661f49dc2d384749f0296896a0/src%2Frt%2Fisaac%2Fstandard.h", "raw_url": "https://github.com/rust-lang/rust/raw/fb923c7d3f8b37661f49dc2d384749f0296896a0/src%2Frt%2Fisaac%2Fstandard.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fisaac%2Fstandard.h?ref=fb923c7d3f8b37661f49dc2d384749f0296896a0", "patch": "@@ -1,50 +0,0 @@\n-/*\n-------------------------------------------------------------------------------\n-Standard definitions and types, Bob Jenkins\n-------------------------------------------------------------------------------\n-*/\n-#ifndef STANDARD\n-# define STANDARD\n-# ifndef STDIO\n-#  include <stdio.h>\n-#  define STDIO\n-# endif\n-# ifndef STDDEF\n-#  include <stddef.h>\n-#  define STDDEF\n-# endif\n-# ifndef STDINT\n-#  include <stdint.h>\n-#  define STDINT\n-# endif\n-\n-typedef  uint64_t  ub8;\n-#define UB8MAXVAL 0xffffffffffffffffLL\n-#define UB8BITS 64\n-typedef   int64_t  sb8;\n-#define SB8MAXVAL 0x7fffffffffffffffLL\n-typedef  uint32_t  ub4;   /* unsigned 4-byte quantities */\n-#define UB4MAXVAL 0xffffffff\n-typedef   int32_t  sb4;\n-#define UB4BITS 32\n-#define SB4MAXVAL 0x7fffffff\n-typedef  uint16_t  ub2;\n-#define UB2MAXVAL 0xffff\n-#define UB2BITS 16\n-typedef   int16_t  sb2;\n-#define SB2MAXVAL 0x7fff\n-typedef   uint8_t  ub1;\n-#define UB1MAXVAL 0xff\n-#define UB1BITS 8\n-typedef    int8_t  sb1;   /* signed 1-byte quantities */\n-#define SB1MAXVAL 0x7f\n-typedef      int  word;  /* fastest type available */\n-\n-#define bis(target,mask)  ((target) |=  (mask))\n-#define bic(target,mask)  ((target) &= ~(mask))\n-#define bit(target,mask)  ((target) &   (mask))\n-#define TRUE  1\n-#define FALSE 0\n-#define SUCCESS 0  /* 1 on VAX */\n-\n-#endif /* STANDARD */"}, {"sha": "eeb0c95337a8bce53b5398b4e778ae828fa6f4a3", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "patch": "@@ -69,35 +69,11 @@ rust_env_pairs() {\n }\n #endif\n \n-extern \"C\" CDECL size_t\n-rand_seed_size() {\n-    return rng_seed_size();\n-}\n-\n extern \"C\" CDECL void\n rand_gen_seed(uint8_t* dest, size_t size) {\n     rng_gen_seed(dest, size);\n }\n \n-extern \"C\" CDECL void *\n-rand_new_seeded(uint8_t* seed, size_t seed_size) {\n-    assert(seed != NULL);\n-    rust_rng *rng = (rust_rng *) malloc(sizeof(rust_rng));\n-    assert(rng != NULL && \"rng alloc failed\");\n-    rng_init(rng, NULL, seed, seed_size);\n-    return rng;\n-}\n-\n-extern \"C\" CDECL uint32_t\n-rand_next(rust_rng *rng) {\n-    return rng_gen_u32(rng);\n-}\n-\n-extern \"C\" CDECL void\n-rand_free(rust_rng *rng) {\n-    free(rng);\n-}\n-\n extern \"C\" CDECL char*\n #if defined(__WIN32__)\n rust_list_dir_val(WIN32_FIND_DATA* entry_ptr) {"}, {"sha": "89754f94b7096842e1076a92229b044762e34c19", "filename": "src/rt/rust_rng.cpp", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frust_rng.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frust_rng.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.cpp?ref=0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "patch": "@@ -32,14 +32,6 @@ win32_require(LPCTSTR fn, BOOL ok) {\n }\n #endif\n \n-size_t\n-rng_seed_size() {\n-    randctx rctx;\n-    return sizeof(rctx.randrsl);\n-}\n-\n-// Initialization helpers for ISAAC RNG\n-\n void\n rng_gen_seed(uint8_t* dest, size_t size) {\n #ifdef __WIN32__\n@@ -80,59 +72,6 @@ rng_gen_seed(uint8_t* dest, size_t size) {\n #endif\n }\n \n-static void\n-isaac_init(randctx *rctx, char *env_seed,\n-           uint8_t* user_seed, size_t seed_len) {\n-    memset(rctx, 0, sizeof(randctx));\n-\n-    if (user_seed != NULL) {\n-        // ignore bytes after the required length\n-        if (seed_len > sizeof(rctx->randrsl)) {\n-            seed_len = sizeof(rctx->randrsl);\n-        }\n-        memcpy(&rctx->randrsl, user_seed, seed_len);\n-    } else if (env_seed != NULL) {\n-        ub4 seed = (ub4) atoi(env_seed);\n-        for (size_t i = 0; i < RANDSIZ; i ++) {\n-            memcpy(&rctx->randrsl[i], &seed, sizeof(ub4));\n-            seed = (seed + 0x7ed55d16) + (seed << 12);\n-        }\n-    } else {\n-        rng_gen_seed((uint8_t*)&rctx->randrsl,\n-                     sizeof(rctx->randrsl));\n-    }\n-\n-    randinit(rctx, 1);\n-}\n-\n-void\n-rng_init(rust_rng* rng, char* env_seed,\n-         uint8_t *user_seed, size_t seed_len) {\n-    isaac_init(&rng->rctx, env_seed, user_seed, seed_len);\n-    rng->reseedable = !user_seed && !env_seed;\n-}\n-\n-static void\n-rng_maybe_reseed(rust_rng* rng) {\n-    // If this RNG has generated more than 32KB of random data and was not\n-    // seeded by the user or RUST_SEED, then we should reseed now.\n-    const size_t RESEED_THRESHOLD = 32 * 1024;\n-    size_t bytes_generated = rng->rctx.randc * sizeof(ub4);\n-    if (bytes_generated < RESEED_THRESHOLD || !rng->reseedable) {\n-        return;\n-    }\n-    rng_gen_seed((uint8_t*)rng->rctx.randrsl,\n-                 sizeof(rng->rctx.randrsl));\n-    randinit(&rng->rctx, 1);\n-}\n-\n-uint32_t\n-rng_gen_u32(rust_rng* rng) {\n-    uint32_t x = isaac_rand(&rng->rctx);\n-    rng_maybe_reseed(rng);\n-    return x;\n-}\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "08335a6f73f79ab777bd6bd1ba71c66e710cfb36", "filename": "src/rt/rust_rng.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frust_rng.h", "raw_url": "https://github.com/rust-lang/rust/raw/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frust_rng.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.h?ref=0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "patch": "@@ -11,22 +11,7 @@\n #ifndef RUST_RNG_H\n #define RUST_RNG_H\n \n-#include \"rand.h\"\n-\n-class rust_kernel;\n-\n-// Initialization helpers for ISAAC RNG\n-\n-struct rust_rng {\n-    randctx rctx;\n-    bool reseedable;\n-};\n-\n-size_t rng_seed_size();\n void rng_gen_seed(uint8_t* dest, size_t size);\n-void rng_init(rust_rng *rng, char *env_seed,\n-              uint8_t *user_seed, size_t seed_len);\n-uint32_t rng_gen_u32(rust_rng *rng);\n \n //\n // Local Variables:"}, {"sha": "186fb387eea500c25b5a184c38cb063c0d97baaa", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/0951313c1eb6ef0d7b6c30d51211637fcc1b3624/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=0951313c1eb6ef0d7b6c30d51211637fcc1b3624", "patch": "@@ -9,11 +9,7 @@ rust_localtime\n rust_timegm\n rust_mktime\n precise_time_ns\n-rand_free\n-rand_new_seeded\n-rand_seed_size\n rand_gen_seed\n-rand_next\n rust_path_is_dir\n rust_path_exists\n rust_get_stdin"}]}