{"sha": "7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhM2I3YzkyNzVmMDU3YWExZDcxZWE3NTE2ZWYzM2E0NGJkZmZiN2Y=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alex@noldorin.com", "date": "2019-02-19T02:56:42Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-02-19T02:56:42Z"}, "message": "Various cosmetic improvements (#3403)", "tree": {"sha": "009cfe505aeb4da3150d487f1d676020549be362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/009cfe505aeb4da3150d487f1d676020549be362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "html_url": "https://github.com/rust-lang/rust/commit/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74755e86ab96ca8eaf9e3cd75a22e83edbfe8d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/74755e86ab96ca8eaf9e3cd75a22e83edbfe8d43", "html_url": "https://github.com/rust-lang/rust/commit/74755e86ab96ca8eaf9e3cd75a22e83edbfe8d43"}], "stats": {"total": 801, "additions": 198, "deletions": 603}, "files": [{"sha": "e7b1e1b854c07025ac06e9391859c2c1c7fd63af", "filename": "build.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::env;\n use std::fs::File;\n use std::io::Write;"}, {"sha": "3379bf2369b1a5629d00daec02c46037cc99877f", "filename": "src/attr.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! Format attributes and meta items.\n \n use syntax::ast;"}, {"sha": "dc1e64a27bb1f9f641abf755bcfc3018656b28b6", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use env_logger;\n #[macro_use]\n extern crate failure;\n@@ -45,7 +35,7 @@ fn main() {\n \n     // Exit with given exit code.\n     //\n-    // NOTE: This immediately terminates the process without doing any cleanup,\n+    // NOTE: this immediately terminates the process without doing any cleanup,\n     // so make sure to finish all necessary cleanup before this is called.\n     std::process::exit(exit_code);\n }"}, {"sha": "e887b940fcef193a9f2be9a720dc3cfa6b8c6094", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,14 +1,4 @@\n-// Copyright 2015-2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Inspired by Paul Woolcock's cargo-fmt (https://github.com/pwoolcoc/cargo-fmt/)\n+// Inspired by Paul Woolcock's cargo-fmt (https://github.com/pwoolcoc/cargo-fmt/).\n \n #![cfg(not(test))]\n #![deny(warnings)]\n@@ -146,12 +136,12 @@ fn format_crate(verbosity: Verbosity, strategy: &CargoFmtStrategy) -> Result<i32\n         get_targets(strategy)?\n     };\n \n-    // Currently only bin and lib files get formatted\n+    // Currently only bin and lib files get formatted.\n     run_rustfmt(&targets, &rustfmt_args, verbosity)\n }\n \n fn get_fmt_args() -> Vec<String> {\n-    // All arguments after -- are passed to rustfmt\n+    // All arguments after -- are passed to rustfmt.\n     env::args().skip_while(|a| a != \"--\").skip(1).collect()\n }\n \n@@ -160,7 +150,7 @@ fn get_fmt_args() -> Vec<String> {\n pub struct Target {\n     /// A path to the main source file of the target.\n     path: PathBuf,\n-    /// A kind of target (e.g. lib, bin, example, ...).\n+    /// A kind of target (e.g., lib, bin, example, ...).\n     kind: String,\n     /// Rust edition for this target.\n     edition: String,"}, {"sha": "3d928623aacc2d07898b50e3ae4870fc5593e925", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,15 +1,5 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Formatting of chained expressions, i.e. expressions which are chained by\n-//! dots: struct and enum field access, method calls, and try shorthand (?).\n+//! Formatting of chained expressions, i.e., expressions that are chained by\n+//! dots: struct and enum field access, method calls, and try shorthand (`?`).\n //!\n //! Instead of walking these subexpressions one-by-one, as is our usual strategy\n //! for expression formatting, we collect maximal sequences of these expressions\n@@ -534,7 +524,7 @@ impl<'a> ChainFormatterShared<'a> {\n     // ```\n     //\n     // In particular, overflowing is effective when the last child is a method with a multi-lined\n-    // block-like argument (e.g. closure):\n+    // block-like argument (e.g., closure):\n     // ```ignore\n     // parent.child1.child2.last_child(|a, b, c| {\n     //     let x = foo(a, b, c);\n@@ -853,7 +843,7 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n     }\n }\n \n-/// Remove try operators (`?`s) that appear in the given string. If removing\n+/// Removes try operators (`?`s) that appear in the given string. If removing\n /// them leaves an empty line, remove that line as well unless it is the first\n /// line (we need the first newline for detecting pre/post comment).\n fn trim_tries(s: &str) -> String {"}, {"sha": "169a3741be46860d8de5d02a5f9ecbe87b7c862e", "filename": "src/checkstyle.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::io::{self, Write};\n use std::path::Path;\n "}, {"sha": "381d083c82fca8944a227080fde745aaca986279", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use syntax::parse::classify;\n use syntax::source_map::Span;\n use syntax::{ast, ptr};\n@@ -360,7 +350,7 @@ pub fn rewrite_last_closure(\n     None\n }\n \n-/// Returns true if the given vector of arguments has more than one `ast::ExprKind::Closure`.\n+/// Returns `true` if the given vector of arguments has more than one `ast::ExprKind::Closure`.\n pub fn args_have_many_closure(args: &[OverflowableItem<'_>]) -> bool {\n     args.iter()\n         .filter_map(|arg| arg.to_expr())"}, {"sha": "83ec810381e42e769a90796c980f532df4c407c8", "filename": "src/comment.rs", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Formatting and tools for comments.\n \n use std::{self, borrow::Cow, iter};\n@@ -54,7 +44,7 @@ fn custom_opener(s: &str) -> &str {\n }\n \n impl<'a> CommentStyle<'a> {\n-    /// Returns true if the commenting style covers a line only.\n+    /// Returns `true` if the commenting style covers a line only.\n     pub fn is_line_comment(&self) -> bool {\n         match *self {\n             CommentStyle::DoubleSlash\n@@ -65,7 +55,7 @@ impl<'a> CommentStyle<'a> {\n         }\n     }\n \n-    /// Returns true if the commenting style can span over multiple lines.\n+    /// Returns `true` if the commenting style can span over multiple lines.\n     pub fn is_block_comment(&self) -> bool {\n         match *self {\n             CommentStyle::SingleBullet | CommentStyle::DoubleBullet | CommentStyle::Exclamation => {\n@@ -75,7 +65,7 @@ impl<'a> CommentStyle<'a> {\n         }\n     }\n \n-    /// Returns true if the commenting style is for documentation.\n+    /// Returns `true` if the commenting style is for documentation.\n     pub fn is_doc_comment(&self) -> bool {\n         match *self {\n             CommentStyle::TripleSlash | CommentStyle::Doc => true,\n@@ -439,7 +429,7 @@ struct ItemizedBlock {\n }\n \n impl ItemizedBlock {\n-    /// Returns true if the line is formatted as an item\n+    /// Returns `true` if the line is formatted as an item\n     fn is_itemized_line(line: &str) -> bool {\n         let trimmed = line.trim_start();\n         trimmed.starts_with(\"* \") || trimmed.starts_with(\"- \")\n@@ -458,7 +448,7 @@ impl ItemizedBlock {\n         }\n     }\n \n-    /// Returns a `StringFormat` used for formatting the content of an item\n+    /// Returns a `StringFormat` used for formatting the content of an item.\n     fn create_string_format<'a>(&'a self, fmt: &'a StringFormat<'_>) -> StringFormat<'a> {\n         StringFormat {\n             opener: \"\",\n@@ -471,8 +461,8 @@ impl ItemizedBlock {\n         }\n     }\n \n-    /// Returns true if the line is part of the current itemized block.\n-    /// If it is, then it is added to the internal lines vec.\n+    /// Returns `true` if the line is part of the current itemized block.\n+    /// If it is, then it is added to the internal lines list.\n     fn add_line(&mut self, line: &str) -> bool {\n         if !ItemizedBlock::is_itemized_line(line)\n             && self.indent <= line.chars().take_while(|c| c.is_whitespace()).count()\n@@ -491,7 +481,7 @@ impl ItemizedBlock {\n             .collect::<String>()\n     }\n \n-    /// Returns the block as a string under its original form\n+    /// Returns the block as a string under its original form.\n     fn original_block_as_string(&self) -> String {\n         self.lines.join(\"\\n\")\n     }\n@@ -842,7 +832,7 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n         .join(\"\\n\")\n }\n \n-/// Returns true if the given string MAY include URLs or alike.\n+/// Returns `true` if the given string MAY include URLs or alike.\n fn has_url(s: &str) -> bool {\n     // This function may return false positive, but should get its job done in most cases.\n     s.contains(\"https://\") || s.contains(\"http://\") || s.contains(\"ftp://\") || s.contains(\"file://\")\n@@ -1000,8 +990,8 @@ impl FindUncommented for str {\n \n // Returns the first byte position after the first comment. The given string\n // is expected to be prefixed by a comment, including delimiters.\n-// Good: \"/* /* inner */ outer */ code();\"\n-// Bad:  \"code(); // hello\\n world!\"\n+// Good: `/* /* inner */ outer */ code();`\n+// Bad:  `code(); // hello\\n world!`\n pub fn find_comment_end(s: &str) -> Option<usize> {\n     let mut iter = CharClasses::new(s.char_indices());\n     for (kind, (i, _c)) in &mut iter {\n@@ -1010,15 +1000,15 @@ pub fn find_comment_end(s: &str) -> Option<usize> {\n         }\n     }\n \n-    // Handle case where the comment ends at the end of s.\n+    // Handle case where the comment ends at the end of `s`.\n     if iter.status == CharClassesStatus::Normal {\n         Some(s.len())\n     } else {\n         None\n     }\n }\n \n-/// Returns true if text contains any comment.\n+/// Returns `true` if text contains any comment.\n pub fn contains_comment(text: &str) -> bool {\n     CharClasses::new(text.chars()).any(|(kind, _)| kind.is_comment())\n }\n@@ -1540,7 +1530,7 @@ impl<'a> Iterator for CommentCodeSlices<'a> {\n }\n \n /// Checks is `new` didn't miss any comment from `span`, if it removed any, return previous text\n-/// (if it fits in the width/offset, else return None), else return `new`\n+/// (if it fits in the width/offset, else return `None`), else return `new`\n pub fn recover_comment_removed(\n     new: String,\n     span: Span,\n@@ -1583,14 +1573,14 @@ pub fn filter_normal_code(code: &str) -> String {\n     buffer\n }\n \n-/// Return true if the two strings of code have the same payload of comments.\n+/// Returns `true` if the two strings of code have the same payload of comments.\n /// The payload of comments is everything in the string except:\n-///     - actual code (not comments)\n-///     - comment start/end marks\n-///     - whitespace\n-///     - '*' at the beginning of lines in block comments\n+/// - actual code (not comments),\n+/// - comment start/end marks,\n+/// - whitespace,\n+/// - '*' at the beginning of lines in block comments.\n fn changed_comment_content(orig: &str, new: &str) -> bool {\n-    // Cannot write this as a fn since we cannot return types containing closures\n+    // Cannot write this as a fn since we cannot return types containing closures.\n     let code_comment_content = |code| {\n         let slices = UngroupedCommentCodeSlices::new(code);\n         slices\n@@ -1625,7 +1615,8 @@ impl<'a> CommentReducer<'a> {\n         let comment = remove_comment_header(comment);\n         CommentReducer {\n             is_block,\n-            at_start_line: false, // There are no supplementary '*' on the first line\n+            // There are no supplementary '*' on the first line.\n+            at_start_line: false,\n             iter: comment.chars(),\n         }\n     }\n@@ -1641,7 +1632,7 @@ impl<'a> Iterator for CommentReducer<'a> {\n                 while c.is_whitespace() {\n                     c = self.iter.next()?;\n                 }\n-                // Ignore leading '*'\n+                // Ignore leading '*'.\n                 if c == '*' {\n                     c = self.iter.next()?;\n                 }\n@@ -1777,7 +1768,7 @@ mod test {\n                                       &wrap_normalize_config).unwrap();\n         assert_eq!(\"/* trimmed */\", comment);\n \n-        // check that different comment style are properly recognised\n+        // Check that different comment style are properly recognised.\n         let comment = rewrite_comment(r#\"/// test1\n                                          /// test2\n                                          /*\n@@ -1788,7 +1779,7 @@ mod test {\n                                       &wrap_normalize_config).unwrap();\n         assert_eq!(\"/// test1\\n/// test2\\n// test3\", comment);\n \n-        // check that the blank line marks the end of a commented paragraph\n+        // Check that the blank line marks the end of a commented paragraph.\n         let comment = rewrite_comment(r#\"// test1\n \n                                          // test2\"#,\n@@ -1797,7 +1788,7 @@ mod test {\n                                       &wrap_normalize_config).unwrap();\n         assert_eq!(\"// test1\\n\\n// test2\", comment);\n \n-        // check that the blank line marks the end of a custom-commented paragraph\n+        // Check that the blank line marks the end of a custom-commented paragraph.\n         let comment = rewrite_comment(r#\"//@ test1\n \n                                          //@ test2\"#,\n@@ -1806,7 +1797,7 @@ mod test {\n                                       &wrap_normalize_config).unwrap();\n         assert_eq!(\"//@ test1\\n\\n//@ test2\", comment);\n \n-        // check that bare lines are just indented but left unchanged otherwise\n+        // Check that bare lines are just indented but otherwise left unchanged.\n         let comment = rewrite_comment(r#\"// test1\n                                          /*\n                                            a bare line!\n@@ -1819,8 +1810,8 @@ mod test {\n         assert_eq!(\"// test1\\n/*\\n a bare line!\\n\\n      another bare line!\\n*/\", comment);\n     }\n \n-    // This is probably intended to be a non-test fn, but it is not used. I'm\n-    // keeping it around unless it helps us test stuff.\n+    // This is probably intended to be a non-test fn, but it is not used.\n+    // We should keep this around unless it helps us test stuff to remove it.\n     fn uncommented(text: &str) -> String {\n         CharClasses::new(text.chars())\n             .filter_map(|(s, c)| match s {"}, {"sha": "4d09eea7c47e0a6846bc448437595e293c62d296", "filename": "src/config/config_type.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use crate::config::file_lines::FileLines;\n use crate::config::options::{IgnoreList, WidthHeuristics};\n \n@@ -60,14 +50,14 @@ impl ConfigType for IgnoreList {\n     }\n }\n \n-/// Check if we're in a nightly build.\n+/// Checks if we're in a nightly build.\n ///\n /// The environment variable `CFG_RELEASE_CHANNEL` is set during the rustc bootstrap\n /// to \"stable\", \"beta\", or \"nightly\" depending on what toolchain is being built.\n /// If we are being built as part of the stable or beta toolchains, we want\n /// to disable unstable configuration options.\n ///\n-/// If we're being built by cargo (e.g. `cargo +nightly install rustfmt-nightly`),\n+/// If we're being built by cargo (e.g., `cargo +nightly install rustfmt-nightly`),\n /// `CFG_RELEASE_CHANNEL` is not set. As we only support being built against the\n /// nightly compiler when installed from crates.io, default to nightly mode.\n macro_rules! is_nightly_channel {\n@@ -297,13 +287,13 @@ macro_rules! create_config {\n                 }\n             }\n \n-            /// Construct a `Config` from the toml file specified at `file_path`.\n+            /// Constructs a `Config` from the toml file specified at `file_path`.\n             ///\n             /// This method only looks at the provided path, for a method that\n             /// searches parents for a `rustfmt.toml` see `from_resolved_toml_path`.\n             ///\n-            /// Return a `Config` if the config could be read and parsed from\n-            /// the file, Error otherwise.\n+            /// Returns a `Config` if the config could be read and parsed from\n+            /// the file, otherwise errors.\n             pub(super) fn from_toml_path(file_path: &Path) -> Result<Config, Error> {\n                 let mut file = File::open(&file_path)?;\n                 let mut toml = String::new();\n@@ -312,7 +302,7 @@ macro_rules! create_config {\n                     .map_err(|err| Error::new(ErrorKind::InvalidData, err))\n             }\n \n-            /// Resolve the config for input in `dir`.\n+            /// Resolves the config for input in `dir`.\n             ///\n             /// Searches for `rustfmt.toml` beginning with `dir`, and\n             /// recursively checking parents of `dir` if no config file is found.\n@@ -441,7 +431,7 @@ macro_rules! create_config {\n                 self.ignore.2.add_prefix(dir);\n             }\n \n-            /// Returns true if the config key was explicitly set and is the default value.\n+            /// Returns `true` if the config key was explicitly set and is the default value.\n             pub fn is_default(&self, key: &str) -> bool {\n                 $(\n                     if let stringify!($i) = key {"}, {"sha": "c085a0b5deb6aaca672b69e60b2e3e2fc1676629", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! This module contains types and functions to support formatting specific line ranges.\n \n use std::collections::HashMap;\n@@ -191,7 +181,7 @@ impl FileLines {\n         FileLines(None)\n     }\n \n-    /// Returns true if this `FileLines` contains all lines in all files.\n+    /// Returns `true` if this `FileLines` contains all lines in all files.\n     pub(crate) fn is_all(&self) -> bool {\n         self.0.is_none()\n     }\n@@ -221,8 +211,8 @@ impl FileLines {\n         }\n     }\n \n-    /// Returns true if `self` includes all lines in all files. Otherwise runs `f` on all ranges in\n-    /// the designated file (if any) and returns true if `f` ever does.\n+    /// Returns `true` if `self` includes all lines in all files. Otherwise runs `f` on all ranges\n+    /// in the designated file (if any) and returns true if `f` ever does.\n     fn file_range_matches<F>(&self, file_name: &FileName, f: F) -> bool\n     where\n         F: FnMut(&Range) -> bool,\n@@ -239,23 +229,23 @@ impl FileLines {\n         }\n     }\n \n-    /// Returns true if `range` is fully contained in `self`.\n+    /// Returns `true` if `range` is fully contained in `self`.\n     #[allow(dead_code)]\n     pub(crate) fn contains(&self, range: &LineRange) -> bool {\n         self.file_range_matches(&range.file_name(), |r| r.contains(Range::from(range)))\n     }\n \n-    /// Returns true if any lines in `range` are in `self`.\n+    /// Returns `true` if any lines in `range` are in `self`.\n     pub(crate) fn intersects(&self, range: &LineRange) -> bool {\n         self.file_range_matches(&range.file_name(), |r| r.intersects(Range::from(range)))\n     }\n \n-    /// Returns true if `line` from `file_name` is in `self`.\n+    /// Returns `true` if `line` from `file_name` is in `self`.\n     pub(crate) fn contains_line(&self, file_name: &FileName, line: usize) -> bool {\n         self.file_range_matches(file_name, |r| r.lo <= line && r.hi >= line)\n     }\n \n-    /// Returns true if all the lines between `lo` and `hi` from `file_name` are in `self`.\n+    /// Returns `true` if all the lines between `lo` and `hi` from `file_name` are in `self`.\n     pub(crate) fn contains_range(&self, file_name: &FileName, lo: usize, hi: usize) -> bool {\n         self.file_range_matches(file_name, |r| r.contains(Range::new(lo, hi)))\n     }"}, {"sha": "7adaecf9d5c11ca5ca417050294c67bb29605238", "filename": "src/config/license.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Flicense.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Flicense.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flicense.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -67,7 +67,7 @@ impl TemplateParser {\n         }\n     }\n \n-    /// Convert a license template into a string which can be turned into a regex.\n+    /// Converts a license template into a string which can be turned into a regex.\n     ///\n     /// The license template could use regex syntax directly, but that would require a lot of manual\n     /// escaping, which is inconvenient. It is therefore literal by default, with optional regex"}, {"sha": "79fd3db5b6e2a4ad0a7883649505076d8da3b03d", "filename": "src/config/lists.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flists.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! Configuration options related to rewriting a list.\n \n use crate::config::config_type::ConfigType;"}, {"sha": "6c09e4b0b1add8fab8e7e35de0bd67593b19de6f", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::cell::Cell;\n use std::default::Default;\n use std::fs::File;\n@@ -65,7 +55,7 @@ create_config! {\n     struct_lit_single_line: bool, true, false,\n         \"Put small struct literals on a single line\";\n     fn_single_line: bool, false, false, \"Put single-expression functions on a single line\";\n-    where_single_line: bool, false, false, \"Force where clauses to be on a single line\";\n+    where_single_line: bool, false, false, \"Force where-clauses to be on a single line\";\n \n     // Imports\n     imports_indent: IndentStyle, IndentStyle::Block, false, \"Indent of imports\";\n@@ -157,7 +147,7 @@ create_config! {\n     make_backup: bool, false, false, \"Backup changed files\";\n }\n \n-/// Load a config by checking the client-supplied options and if appropriate, the\n+/// Loads a config by checking the client-supplied options and if appropriate, the\n /// file system (including searching the file system for overrides).\n pub fn load_config<O: CliOptions>(\n     file_path: Option<&Path>,\n@@ -333,7 +323,7 @@ mod test {\n         assert_eq!(s.contains(\"(unstable)\"), true);\n     }\n \n-    // FIXME(#2183) these tests cannot be run in parallel because they use env vars\n+    // FIXME(#2183): these tests cannot be run in parallel because they use env vars.\n     // #[test]\n     // fn test_as_not_nightly_channel() {\n     //     let mut config = Config::default();"}, {"sha": "be32c14291656430e45bbb4beefe3be015b155a4", "filename": "src/config/options.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::collections::HashSet;\n use std::path::{Path, PathBuf};\n \n@@ -199,7 +189,7 @@ impl NewlineStyle {\n configuration_option_enum! { BraceStyle:\n     AlwaysNextLine,\n     PreferSameLine,\n-    // Prefer same line except where there is a where clause, in which case force\n+    // Prefer same line except where there is a where-clause, in which case force\n     // the brace to the next line.\n     SameLineWhere,\n }"}, {"sha": "d4461293d60f71ebe0ea4ab8c213cf00dfc0badf", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::borrow::Cow;\n use std::cmp::min;\n \n@@ -626,7 +616,7 @@ struct ControlFlow<'a> {\n     matcher: &'a str,\n     connector: &'a str,\n     allow_single_line: bool,\n-    // True if this is an `if` expression in an `else if` :-( hacky\n+    // HACK: `true` if this is an `if` expression in an `else if`.\n     nested_if: bool,\n     span: Span,\n }\n@@ -812,7 +802,7 @@ impl<'a> ControlFlow<'a> {\n     }\n }\n \n-/// Returns true if the last line of pat_str has leading whitespace and it is wider than the\n+/// Returns `true` if the last line of pat_str has leading whitespace and it is wider than the\n /// shape's indent.\n fn last_line_offsetted(start_column: usize, pat_str: &str) -> bool {\n     let mut leading_whitespaces = 0;\n@@ -1402,7 +1392,7 @@ pub fn is_nested_call(expr: &ast::Expr) -> bool {\n     }\n }\n \n-/// Return true if a function call or a method call represented by the given span ends with a\n+/// Returns `true` if a function call or a method call represented by the given span ends with a\n /// trailing comma. This function is used when rewriting macro, as adding or removing a trailing\n /// comma from macro can potentially break the code.\n pub fn span_ends_with_comma(context: &RewriteContext<'_>, span: Span) -> bool {"}, {"sha": "a10a04386aab73f160ed419c9c1d1fd4ff575371", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Inspired by Clang's clang-format-diff:\n //\n // https://github.com/llvm-mirror/clang/blob/master/tools/clang-format/clang-format-diff.py"}, {"sha": "38440802ef2eaa9591947ad923897fc5f7f0b14d", "filename": "src/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -301,7 +301,7 @@ pub(crate) type FormatErrorMap = HashMap<FileName, Vec<FormattingError>>;\n \n #[derive(Default, Debug)]\n pub(crate) struct ReportedErrors {\n-    // Encountered e.g. an IO error.\n+    // Encountered e.g., an IO error.\n     pub(crate) has_operational_errors: bool,\n \n     // Failed to reformat code because of parsing errors.\n@@ -415,7 +415,7 @@ impl Timer {\n }\n \n // Formatting done on a char by char or line by line basis.\n-// FIXME(#20) other stuff for parity with make tidy\n+// FIXME(#20): other stuff for parity with make tidy.\n fn format_lines(\n     text: &mut String,\n     name: &FileName,\n@@ -446,7 +446,7 @@ struct FormatLines<'a> {\n     errors: Vec<FormattingError>,\n     issue_seeker: BadIssueSeeker,\n     line_buffer: String,\n-    // true if the current line contains a string literal.\n+    // `true` if the current line contains a string literal.\n     is_string: bool,\n     format_line: bool,\n     allow_issue_seek: bool,\n@@ -593,7 +593,7 @@ impl<'a> FormatLines<'a> {\n         }\n     }\n \n-    /// Returns true if the line with the given line number was skipped by `#[rustfmt::skip]`.\n+    /// Returns `true` if the line with the given line number was skipped by `#[rustfmt::skip]`.\n     fn is_skipped_line(&self) -> bool {\n         self.skipped_range\n             .iter()"}, {"sha": "67b641a384da0d6becc570256827f873c3098f2d", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,26 +1,15 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use env_logger;\n-\n #[macro_use]\n extern crate log;\n-use rustfmt_nightly as rustfmt;\n \n use std::env;\n use std::io::stdout;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str::FromStr;\n \n+use env_logger;\n use getopts::{Matches, Options};\n+use rustfmt_nightly as rustfmt;\n \n use crate::rustfmt::{load_config, CliOptions, Input, Session};\n "}, {"sha": "43835c30e4b8817c97754b672b2a5e54ca1be0b3", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::fmt;\n@@ -28,8 +18,8 @@ use crate::spanned::Spanned;\n use crate::utils::{is_same_visibility, mk_sp, rewrite_ident};\n use crate::visitor::FmtVisitor;\n \n-/// Returns a name imported by a `use` declaration. e.g. returns `Ordering`\n-/// for `std::cmp::Ordering` and `self` for `std::cmp::self`.\n+/// Returns a name imported by a `use` declaration.\n+/// E.g., returns `Ordering` for `std::cmp::Ordering` and `self` for `std::cmp::self`.\n pub fn path_to_imported_ident(path: &ast::Path) -> ast::Ident {\n     path.segments.last().unwrap().ident\n }\n@@ -87,7 +77,7 @@ impl<'a> FmtVisitor<'a> {\n // when ordering unless the imports are identical except for the alias (rare in\n // practice).\n \n-// FIXME(#2531) - we should unify the comparison code here with the formatting\n+// FIXME(#2531): we should unify the comparison code here with the formatting\n // code elsewhere since we are essentially string-ifying twice. Furthermore, by\n // parsing to our own format on comparison, we repeat a lot of work when\n // sorting.\n@@ -267,7 +257,7 @@ impl UseTree {\n \n     // FIXME: Use correct span?\n     // The given span is essentially incorrect, since we are reconstructing\n-    // use statements. This should not be a problem, though, since we have\n+    // use-statements. This should not be a problem, though, since we have\n     // already tried to extract comment and observed that there are no comment\n     // around the given use item, and the span will not be used afterward.\n     fn from_path(path: Vec<UseSegment>, span: Span) -> UseTree {"}, {"sha": "c89469bff7947511613e4804de983a2a20c62b0c", "filename": "src/issues.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Objects for seeking through a char stream for occurrences of TODO and FIXME.\n // Depending on the loaded configuration, may also check that these have an\n // associated issue number."}, {"sha": "c2568735ad8817a878a30ecc9e4d3660c702423b", "filename": "src/items.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use std::borrow::Cow;\n@@ -715,7 +705,7 @@ pub fn format_impl(\n             false,\n         )?;\n \n-        // If there is no where clause, we may have missing comments between the trait name and\n+        // If there is no where-clause, we may have missing comments between the trait name and\n         // the opening brace.\n         if generics.where_clause.predicates.is_empty() {\n             if let Some(hi) = where_span_end {\n@@ -737,7 +727,7 @@ pub fn format_impl(\n             result.push_str(&where_clause_str);\n             if where_clause_str.contains('\\n') || last_line_contains_single_line_comment(&result) {\n                 // if the where_clause contains extra comments AND\n-                // there is only one where clause predicate\n+                // there is only one where-clause predicate\n                 // recover the suppressed comma in single line where_clause formatting\n                 if generics.where_clause.predicates.len() == 1 {\n                     result.push_str(\",\");\n@@ -868,7 +858,7 @@ fn format_impl_ref_and_type(\n         // ` for`\n         let trait_ref_overhead = if trait_ref.is_some() { 4 } else { 0 };\n         let curly_brace_overhead = if generics.where_clause.predicates.is_empty() {\n-            // If there is no where clause adapt budget for type formatting to take space and curly\n+            // If there is no where-clause adapt budget for type formatting to take space and curly\n             // brace into account.\n             match context.config.brace_style() {\n                 BraceStyle::AlwaysNextLine => 0,\n@@ -1047,7 +1037,7 @@ pub fn format_trait(\n             )?;\n         }\n \n-        // Rewrite where clause.\n+        // Rewrite where-clause.\n         if !generics.where_clause.predicates.is_empty() {\n             let where_density = if context.config.indent_style() == IndentStyle::Block {\n                 Density::Compressed\n@@ -1074,8 +1064,8 @@ pub fn format_trait(\n                 option,\n                 false,\n             )?;\n-            // If the where clause cannot fit on the same line,\n-            // put the where clause on a new line\n+            // If the where-clause cannot fit on the same line,\n+            // put the where-clause on a new line\n             if !where_clause_str.contains('\\n')\n                 && last_line_width(&result) + where_clause_str.len() + offset.width()\n                     > context.config.comment_width()\n@@ -1426,8 +1416,8 @@ fn format_tuple_struct(\n             || offset.block_indent + result.len() + where_clause_str.len() + 1\n                 > context.config.max_width())\n     {\n-        // We need to put the where clause on a new line, but we didn't\n-        // know that earlier, so the where clause will not be indented properly.\n+        // We need to put the where-clause on a new line, but we didn't\n+        // know that earlier, so the where-clause will not be indented properly.\n         result.push('\\n');\n         result.push_str(\n             &(offset.block_only() + (context.config.tab_spaces() - 1)).to_string(context.config),\n@@ -2122,7 +2112,7 @@ fn rewrite_fn_base(\n                 // the closing parenthesis of the argument and the arrow '->' is considered.\n                 let mut sig_length = result.len() + indent.width() + ret_str_len + 1;\n \n-                // If there is no where clause, take into account the space after the return type\n+                // If there is no where-clause, take into account the space after the return type\n                 // and the brace.\n                 if where_clause.predicates.is_empty() {\n                     sig_length += 2;\n@@ -2139,7 +2129,7 @@ fn rewrite_fn_base(\n             } else {\n                 // FIXME: we might want to check that using the arg indent\n                 // doesn't blow our budget, and if it does, then fallback to\n-                // the where clause indent.\n+                // the where-clause indent.\n                 arg_indent\n             };\n \n@@ -2215,7 +2205,7 @@ fn rewrite_fn_base(\n         option,\n         is_args_multi_lined,\n     )?;\n-    // If there are neither where clause nor return type, we may be missing comments between\n+    // If there are neither where-clause nor return type, we may be missing comments between\n     // args and `{`.\n     if where_clause_str.is_empty() {\n         if let ast::FunctionRetTy::Default(ret_span) = fd.output {\n@@ -2245,7 +2235,7 @@ fn rewrite_fn_base(\n struct WhereClauseOption {\n     suppress_comma: bool, // Force no trailing comma\n     snuggle: bool,        // Do not insert newline before `where`\n-    compress_where: bool, // Try single line where clause instead of vertical layout\n+    compress_where: bool, // Try single line where-clause instead of vertical layout\n }\n \n impl WhereClauseOption {\n@@ -2515,8 +2505,8 @@ fn rewrite_generics(\n     generics: &ast::Generics,\n     shape: Shape,\n ) -> Option<String> {\n-    // FIXME: convert bounds to where clauses where they get too big or if\n-    // there is a where clause at all.\n+    // FIXME: convert bounds to where-clauses where they get too big or if\n+    // there is a where-clause at all.\n \n     if generics.params.is_empty() {\n         return Some(ident.to_owned());\n@@ -2593,7 +2583,7 @@ fn rewrite_where_clause_rfc_style(\n     };\n \n     // shape should be vertical only and only if we have `where_single_line` option enabled\n-    // and the number of items of the where clause is equal to 1\n+    // and the number of items of the where-clause is equal to 1\n     let shape_tactic = if where_single_line {\n         DefinitiveListTactic::Horizontal\n     } else {\n@@ -2703,7 +2693,7 @@ fn rewrite_where_clause(\n     let tactic = definitive_tactic(&item_vec, ListTactic::Vertical, Separator::Comma, budget);\n \n     let mut comma_tactic = context.config.trailing_comma();\n-    // Kind of a hack because we don't usually have trailing commas in where clauses.\n+    // Kind of a hack because we don't usually have trailing commas in where-clauses.\n     if comma_tactic == SeparatorTactic::Vertical || where_clause_option.suppress_comma {\n         comma_tactic = SeparatorTactic::Never;\n     }\n@@ -2945,7 +2935,7 @@ pub fn rewrite_extern_crate(context: &RewriteContext<'_>, item: &ast::Item) -> O\n     })\n }\n \n-/// Returns true for `mod foo;`, false for `mod foo { .. }`.\n+/// Returns `true` for `mod foo;`, false for `mod foo { .. }`.\n pub fn is_mod_decl(item: &ast::Item) -> bool {\n     match item.node {\n         ast::ItemKind::Mod(ref m) => m.inner.hi() != item.span.hi(),"}, {"sha": "520a6e66fcd87f954b47352bd358810634833081", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015-2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #![deny(rust_2018_idioms)]\n \n #[macro_use]\n@@ -155,7 +145,7 @@ impl FormattedSnippet {\n             });\n     }\n \n-    /// Returns true if the line n did not get formatted.\n+    /// Returns `true` if the line n did not get formatted.\n     fn is_line_non_formatted(&self, n: usize) -> bool {\n         self.non_formatted_ranges\n             .iter()\n@@ -408,9 +398,9 @@ fn format_snippet(snippet: &str, config: &Config) -> Option<FormattedSnippet> {\n }\n \n /// Format the given code block. Mainly targeted for code block in comment.\n-/// The code block may be incomplete (i.e. parser may be unable to parse it).\n+/// The code block may be incomplete (i.e., parser may be unable to parse it).\n /// To avoid panic in parser, we wrap the code block with a dummy function.\n-/// The returned code block does *not* end with newline.\n+/// The returned code block does **not** end with newline.\n fn format_code_block(code_snippet: &str, config: &Config) -> Option<FormattedSnippet> {\n     const FN_MAIN_PREFIX: &str = \"fn main() {\\n\";\n \n@@ -437,7 +427,7 @@ fn format_code_block(code_snippet: &str, config: &Config) -> Option<FormattedSni\n     let mut is_first = true;\n \n     // While formatting the code, ignore the config's newline style setting and always use \"\\n\"\n-    // instead of \"\\r\\n\" for the newline characters. This is okay because the output here is\n+    // instead of \"\\r\\n\" for the newline characters. This is ok because the output here is\n     // not directly outputted by rustfmt command, but used by the comment formatter's input.\n     // We have output-file-wide \"\\n\" ==> \"\\r\\n\" conversion process after here if it's necessary.\n     let mut config_with_unix_newline = config.clone();"}, {"sha": "cbf5d35c49cc172aeb511d24760f3527b4de1b49", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! Format list-like expressions and items.\n \n use std::cmp;\n@@ -29,7 +19,7 @@ pub struct ListFormatting<'a> {\n     trailing_separator: SeparatorTactic,\n     separator_place: SeparatorPlace,\n     shape: Shape,\n-    // Non-expressions, e.g. items, will have a new line at the end of the list.\n+    // Non-expressions, e.g., items, will have a new line at the end of the list.\n     // Important for comment styles.\n     ends_with_newline: bool,\n     // Remove newlines between list elements for expressions.\n@@ -198,7 +188,7 @@ impl ListItem {\n         }\n     }\n \n-    // true if the item causes something to be written.\n+    // Returns `true` if the item causes something to be written.\n     fn is_substantial(&self) -> bool {\n         fn empty(s: &Option<String>) -> bool {\n             match *s {"}, {"sha": "6bc181fc6f9b5e916718d076490edfe78ff8d8a7", "filename": "src/macros.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Format list-like macro invocations. These are invocations whose token trees\n // can be interpreted as expressions and separated by commas.\n // Note that these token trees do not actually have to be interpreted as\n@@ -601,9 +591,9 @@ fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n \n #[derive(Debug, Clone)]\n enum MacroArgKind {\n-    /// e.g. `$x: expr`.\n+    /// e.g., `$x: expr`.\n     MetaVariable(ast::Ident, String),\n-    /// e.g. `$($foo: expr),*`\n+    /// e.g., `$($foo: expr),*`\n     Repeat(\n         /// `()`, `[]` or `{}`.\n         DelimToken,\n@@ -614,12 +604,12 @@ enum MacroArgKind {\n         /// The repeat token. This could be one of `*`, `+` or `?`.\n         Token,\n     ),\n-    /// e.g. `[derive(Debug)]`\n+    /// e.g., `[derive(Debug)]`\n     Delimited(DelimToken, Vec<ParsedMacroArg>),\n-    /// A possible separator. e.g. `,` or `;`.\n+    /// A possible separator. e.g., `,` or `;`.\n     Separator(String, String),\n     /// Other random stuff that does not fit to other kinds.\n-    /// e.g. `== foo` in `($x: expr == foo)`.\n+    /// e.g., `== foo` in `($x: expr == foo)`.\n     Other(String, String),\n }\n \n@@ -752,13 +742,13 @@ impl ParsedMacroArg {\n \n /// Parses macro arguments on macro def.\n struct MacroArgParser {\n-    /// Holds either a name of the next metavariable, a separator or a junk.\n+    /// Either a name of the next metavariable, a separator, or junk.\n     buf: String,\n     /// The start position on the current buffer.\n     lo: BytePos,\n     /// The first token of the current buffer.\n     start_tok: Token,\n-    /// Set to true if we are parsing a metavariable or a repeat.\n+    /// `true` if we are parsing a metavariable or a repeat.\n     is_meta_var: bool,\n     /// The position of the last token.\n     hi: BytePos,\n@@ -1139,8 +1129,8 @@ fn next_space(tok: &Token) -> SpaceState {\n     }\n }\n \n-/// Tries to convert a macro use into a short hand try expression. Returns None\n-/// when the macro is not an instance of try! (or parsing the inner expression\n+/// Tries to convert a macro use into a short hand try expression. Returns `None`\n+/// when the macro is not an instance of `try!` (or parsing the inner expression\n /// failed).\n pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n     if &mac.node.path.to_string() == \"try\" {"}, {"sha": "c3102f12123472b97c2adb237421ba0a5bc88892", "filename": "src/matches.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! Format match expression.\n \n use std::iter::repeat;\n@@ -35,8 +25,8 @@ use crate::utils::{\n /// A simple wrapper type against `ast::Arm`. Used inside `write_list()`.\n struct ArmWrapper<'a> {\n     pub arm: &'a ast::Arm,\n-    /// True if the arm is the last one in match expression. Used to decide on whether we should add\n-    /// trailing comma to the match arm when `config.trailing_comma() == Never`.\n+    /// `true` if the arm is the last one in match expression. Used to decide on whether we should\n+    /// add trailing comma to the match arm when `config.trailing_comma() == Never`.\n     pub is_last: bool,\n     /// Holds a byte position of `|` at the beginning of the arm pattern, if available.\n     pub beginning_vert: Option<BytePos>,"}, {"sha": "008efd2bef1f55f729f6cc291e8602a05e1a0c06", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::borrow::Cow;\n \n use syntax::source_map::{BytePos, Pos, Span};\n@@ -44,9 +34,8 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub fn format_missing(&mut self, end: BytePos) {\n-        // HACK(topecongiro)\n-        // We use `format_missing()` to extract a missing comment between a macro\n-        // (or alike) and a trailing semicolon. Here we just try to avoid calling\n+        // HACK(topecongiro): we use `format_missing()` to extract a missing comment between\n+        // a macro (or similar) and a trailing semicolon. Here we just try to avoid calling\n         // `format_missing_inner` in the common case where there is no such comment.\n         // This is a hack, ideally we should fix a possible bug in `format_missing_inner`\n         // or refactor `visit_mac` and `rewrite_macro`, but this should suffice to fix the"}, {"sha": "7bb50356ed8d176eb26b59d3d7a8cc1783254375", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::collections::BTreeMap;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -47,7 +37,7 @@ fn path_value(attr: &ast::Attribute) -> Option<Symbol> {\n     }\n }\n \n-// N.B. Even when there are multiple `#[path = ...]` attributes, we just need to\n+// N.B., even when there are multiple `#[path = ...]` attributes, we just need to\n // examine the first one, since rustc ignores the second and the subsequent ones\n // as unused attributes.\n fn find_path_value(attrs: &[ast::Attribute]) -> Option<Symbol> {\n@@ -88,7 +78,7 @@ fn list_submodules<'a>(\n     Ok(())\n }\n \n-/// Find the file corresponding to an external mod\n+/// Finds the file corresponding to an external mod\n fn module_file(\n     id: ast::Ident,\n     attrs: &[ast::Attribute],"}, {"sha": "ac425b591aae1eeba04fb6a55f55576829694a4e", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! Rewrite a list some items with overflow.\n \n use std::cmp::min;\n@@ -513,7 +503,7 @@ impl<'a> Context<'a> {\n                 // When we are rewriting a nested function call, we restrict the\n                 // budget for the inner function to avoid them being deeply nested.\n                 // However, when the inner function has a prefix or a suffix\n-                // (e.g. `foo() as u32`), this budget reduction may produce poorly\n+                // (e.g., `foo() as u32`), this budget reduction may produce poorly\n                 // formatted code, where a prefix or a suffix being left on its own\n                 // line. Here we explicitlly check those cases.\n                 if count_newlines(overflowed) == 1 {"}, {"sha": "421167ad6d729bb800858a21d902fc4c27788d45", "filename": "src/pairs.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use syntax::ast;\n \n use crate::config::lists::*;"}, {"sha": "2140b8d870f9e8130cbdab14e46633eb30610fba", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::ptr;\n use syntax::source_map::{self, BytePos, Span};\n@@ -29,7 +19,8 @@ use crate::spanned::Spanned;\n use crate::types::{rewrite_path, PathContext};\n use crate::utils::{format_mutability, mk_sp, rewrite_ident};\n \n-/// Returns true if the given pattern is short. A short pattern is defined by the following grammar:\n+/// Returns `true` if the given pattern is \"short\".\n+/// A short pattern is defined by the following grammar:\n ///\n /// [small, ntp]:\n ///     - single token\n@@ -152,7 +143,7 @@ impl Rewrite for Pat {\n                 let pats: Option<Vec<String>> =\n                     prefix.chain(slice_pat.into_iter()).chain(suffix).collect();\n \n-                // Check that all the rewrites succeeded, and if not return None.\n+                // Check that all the rewrites succeeded, and if not return `None`.\n                 let pats = pats?;\n \n                 // Unwrap all the sub-strings and join them with commas."}, {"sha": "40f6f07c8dc760c1e15c68f73f21b2d16e3a38ba", "filename": "src/reorder.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! Reorder items.\n //!\n //! `mod`, `extern crate` and `use` declarations are reordered in alphabetical\n@@ -263,7 +253,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         item_length\n     }\n \n-    /// Visit and format the given items. Items are reordered If they are\n+    /// Visits and format the given items. Items are reordered If they are\n     /// consecutive and reorderable.\n     pub fn visit_items_with_reordering(&mut self, mut items: &[&ast::Item]) {\n         while !items.is_empty() {"}, {"sha": "df147e0c42719f32a0b250742550b7d2d475cfc3", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // A generic trait to abstract the rewriting of an element (of the AST).\n \n use std::cell::RefCell;\n@@ -56,7 +46,7 @@ impl<'a> RewriteContext<'a> {\n         self.snippet_provider.span_to_snippet(span).unwrap()\n     }\n \n-    /// Return true if we should use block indent style for rewriting function call.\n+    /// Returns `true` if we should use block indent style for rewriting function call.\n     pub fn use_block_indent(&self) -> bool {\n         self.config.indent_style() == IndentStyle::Block || *self.use_block.borrow()\n     }"}, {"sha": "c6262dcab15e34c0e7a50c00b3ebb597a79a9445", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::collections::VecDeque;\n use std::io;\n use std::io::Write;\n@@ -184,11 +174,11 @@ where\n     }\n }\n \n-/// Convert a Mismatch into a serialised form which just includes\n+/// Converts a `Mismatch` into a serialized form, which just includes\n /// enough information to modify the original file.\n /// Each section starts with a line with three integers, space separated:\n ///     lineno num_removed num_added\n-/// followed by (num_added) lines of added text.  The line numbers are\n+/// followed by (`num_added`) lines of added text. The line numbers are\n /// relative to the original file.\n pub fn output_modified<W>(mut out: W, diff: Vec<Mismatch>)\n where"}, {"sha": "d793d99a3183a4c3c8322c582059e2d064dbc2cf", "filename": "src/shape.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::borrow::Cow;\n use std::cmp::min;\n use std::ops::{Add, Sub};"}, {"sha": "07c1e37fbedd7155025e7c668426fd0307e0342b", "filename": "src/source_file.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::fs;\n use std::io::{self, Write};\n "}, {"sha": "d0c4adbe61d7ea94e07219d02c36e057b59783d1", "filename": "src/source_map.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n //! This module contains utilities that work with the `SourceMap` from `libsyntax`/`syntex_syntax`.\n //! This includes extension traits and methods for looking up spans and line ranges for AST nodes.\n "}, {"sha": "068a3b8b4f4a9cd10896798b2a6859f28beae73d", "filename": "src/spanned.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::cmp::max;\n \n use syntax::{"}, {"sha": "8b910c0b4cedc8f9a44c0bd955c00046262fd591", "filename": "src/string.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Format string literals.\n \n use regex::Regex;\n@@ -163,8 +153,8 @@ pub fn rewrite_string<'a>(\n     wrap_str(result, fmt.config.max_width(), fmt.shape)\n }\n \n-/// Returns the index to the end of the url if the given string includes an\n-/// URL or alike. Otherwise, returns None;\n+/// Returns the index to the end of the URL if the given string includes an\n+/// URL or alike. Otherwise, returns `None`;\n fn detect_url(s: &[&str], index: usize) -> Option<usize> {\n     let start = match s[..=index].iter().rposition(|g| is_whitespace(g)) {\n         Some(pos) => pos + 1,"}, {"sha": "2d1a62ceda5913116d0a4da1f595482bff4089bb", "filename": "src/test/mod.rs", "status": "modified", "additions": 46, "deletions": 54, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs;\n@@ -27,17 +17,17 @@ use crate::{FormatReport, Input, Session};\n const DIFF_CONTEXT_SIZE: usize = 3;\n const CONFIGURATIONS_FILE_NAME: &str = \"Configurations.md\";\n \n-// Returns a `Vec` containing `PathBuf`s of files with a rs extension in the\n+// Returns a `Vec` containing `PathBuf`s of files with an  `rs` extension in the\n // given path. The `recursive` argument controls if files from subdirectories\n // are also returned.\n fn get_test_files(path: &Path, recursive: bool) -> Vec<PathBuf> {\n     let mut files = vec![];\n     if path.is_dir() {\n         for entry in fs::read_dir(path).expect(&format!(\n-            \"Couldn't read directory {}\",\n+            \"couldn't read directory {}\",\n             path.to_str().unwrap()\n         )) {\n-            let entry = entry.expect(\"Couldn't get DirEntry\");\n+            let entry = entry.expect(\"couldn't get `DirEntry`\");\n             let path = entry.path();\n             if path.is_dir() && recursive {\n                 files.append(&mut get_test_files(&path, recursive));\n@@ -51,15 +41,15 @@ fn get_test_files(path: &Path, recursive: bool) -> Vec<PathBuf> {\n \n fn verify_config_used(path: &Path, config_name: &str) {\n     for entry in fs::read_dir(path).expect(&format!(\n-        \"Couldn't read {} directory\",\n+        \"couldn't read {} directory\",\n         path.to_str().unwrap()\n     )) {\n-        let entry = entry.expect(\"Couldn't get directory entry\");\n+        let entry = entry.expect(\"couldn't get directory entry\");\n         let path = entry.path();\n         if path.extension().map_or(false, |f| f == \"rs\") {\n             // check if \"// rustfmt-<config_name>:\" appears in the file.\n             let filebuf = BufReader::new(\n-                fs::File::open(&path).expect(&format!(\"Couldn't read file {}\", path.display())),\n+                fs::File::open(&path).expect(&format!(\"couldn't read file {}\", path.display())),\n             );\n             assert!(\n                 filebuf\n@@ -82,8 +72,8 @@ fn verify_config_test_names() {\n         Path::new(\"tests/source/configs\"),\n         Path::new(\"tests/target/configs\"),\n     ] {\n-        for entry in fs::read_dir(path).expect(\"Couldn't read configs directory\") {\n-            let entry = entry.expect(\"Couldn't get directory entry\");\n+        for entry in fs::read_dir(path).expect(\"couldn't read configs directory\") {\n+            let entry = entry.expect(\"couldn't get directory entry\");\n             let path = entry.path();\n             if path.is_dir() {\n                 let config_name = path.file_name().unwrap().to_str().unwrap();\n@@ -95,17 +85,17 @@ fn verify_config_test_names() {\n     }\n }\n \n-// This writes to the terminal using the same approach (via term::stdout or\n-// println!) that is used by `rustfmt::rustfmt_diff::print_diff`. Writing\n+// This writes to the terminal using the same approach (via `term::stdout` or\n+// `println!`) that is used by `rustfmt::rustfmt_diff::print_diff`. Writing\n // using only one or the other will cause the output order to differ when\n // `print_diff` selects the approach not used.\n fn write_message(msg: &str) {\n     let mut writer = OutputWriter::new(Color::Auto);\n     writer.writeln(msg, None);\n }\n \n-// Integration tests. The files in the tests/source are formatted and compared\n-// to their equivalent in tests/target. The target file and config can be\n+// Integration tests. The files in `tests/source` are formatted and compared\n+// to their equivalent in `tests/target`. The target file and config can be\n // overridden by annotations in the source file. The input and output must match\n // exactly.\n #[test]\n@@ -119,8 +109,8 @@ fn system_tests() {\n     assert_eq!(fails, 0, \"{} system tests failed\", fails);\n }\n \n-// Do the same for tests/coverage-source directory\n-// the only difference is the coverage mode\n+// Do the same for tests/coverage-source directory.\n+// The only difference is the coverage mode.\n #[test]\n fn coverage_tests() {\n     let files = get_test_files(Path::new(\"tests/coverage/source\"), true);\n@@ -205,7 +195,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n     let _ = source_file::write_all_files(&source_file, &mut out, &config);\n     let output = String::from_utf8(out).unwrap();\n \n-    let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n+    let mut expected_file = fs::File::open(&expected_filename).expect(\"couldn't open target\");\n     let mut expected_text = String::new();\n     expected_file\n         .read_to_string(&mut expected_text)\n@@ -290,7 +280,7 @@ fn stdin_formatting_smoke_test() {\n \n #[test]\n fn stdin_parser_panic_caught() {\n-    // https://github.com/rust-lang/rustfmt/issues/3239\n+    // See issue #3239.\n     for text in [\"{\", \"}\"].iter().cloned().map(String::from) {\n         let mut buf = vec![];\n         let mut session = Session::new(Default::default(), Some(&mut buf));\n@@ -304,7 +294,8 @@ fn stdin_parser_panic_caught() {\n fn stdin_disable_all_formatting_test() {\n     match option_env!(\"CFG_RELEASE_CHANNEL\") {\n         None | Some(\"nightly\") => {}\n-        _ => return, // these tests require nightly\n+        // These tests require nightly.\n+        _ => return,\n     }\n     let input = String::from(\"fn main() { println!(\\\"This should not be formatted.\\\"); }\");\n     let mut child = Command::new(rustfmt().to_str().unwrap())\n@@ -407,7 +398,7 @@ fn print_mismatches<T: Fn(u32) -> String>(\n \n fn read_config(filename: &Path) -> Config {\n     let sig_comments = read_significant_comments(filename);\n-    // Look for a config file... If there is a 'config' property in the significant comments, use\n+    // Look for a config file. If there is a 'config' property in the significant comments, use\n     // that. Otherwise, if there are no significant comments at all, look for a config file with\n     // the same name as the test file.\n     let mut config = if !sig_comments.is_empty() {\n@@ -453,7 +444,7 @@ fn idempotent_check(\n ) -> Result<FormatReport, IdempotentCheckError> {\n     let sig_comments = read_significant_comments(filename);\n     let config = if let Some(ref config_file_path) = opt_config {\n-        Config::from_toml_path(config_file_path).expect(\"rustfmt.toml not found\")\n+        Config::from_toml_path(config_file_path).expect(\"`rustfmt.toml` not found\")\n     } else {\n         read_config(filename)\n     };\n@@ -490,43 +481,42 @@ fn get_config(config_file: Option<&Path>) -> Config {\n         }\n     };\n \n-    let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n+    let mut def_config_file = fs::File::open(config_file_name).expect(\"couldn't open config\");\n     let mut def_config = String::new();\n     def_config_file\n         .read_to_string(&mut def_config)\n         .expect(\"Couldn't read config\");\n \n-    Config::from_toml(&def_config, Path::new(\"tests/config/\")).expect(\"Invalid toml\")\n+    Config::from_toml(&def_config, Path::new(\"tests/config/\")).expect(\"invalid TOML\")\n }\n \n-// Reads significant comments of the form: // rustfmt-key: value\n-// into a hash map.\n+// Reads significant comments of the form: `// rustfmt-key: value` into a hash map.\n fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n     let file =\n-        fs::File::open(file_name).expect(&format!(\"Couldn't read file {}\", file_name.display()));\n+        fs::File::open(file_name).expect(&format!(\"couldn't read file {}\", file_name.display()));\n     let reader = BufReader::new(file);\n     let pattern = r\"^\\s*//\\s*rustfmt-([^:]+):\\s*(\\S+)\";\n-    let regex = regex::Regex::new(pattern).expect(\"Failed creating pattern 1\");\n+    let regex = regex::Regex::new(pattern).expect(\"failed creating pattern 1\");\n \n     // Matches lines containing significant comments or whitespace.\n     let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[^:]+:\\s*\\S+)\")\n-        .expect(\"Failed creating pattern 2\");\n+        .expect(\"failed creating pattern 2\");\n \n     reader\n         .lines()\n-        .map(|line| line.expect(\"Failed getting line\"))\n+        .map(|line| line.expect(\"failed getting line\"))\n         .take_while(|line| line_regex.is_match(line))\n         .filter_map(|line| {\n             regex.captures_iter(&line).next().map(|capture| {\n                 (\n                     capture\n                         .get(1)\n-                        .expect(\"Couldn't unwrap capture\")\n+                        .expect(\"couldn't unwrap capture\")\n                         .as_str()\n                         .to_owned(),\n                     capture\n                         .get(2)\n-                        .expect(\"Couldn't unwrap capture\")\n+                        .expect(\"couldn't unwrap capture\")\n                         .as_str()\n                         .to_owned(),\n                 )\n@@ -535,7 +525,7 @@ fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n         .collect()\n }\n \n-// Compare output to input.\n+// Compares output to input.\n // TODO: needs a better name, more explanation.\n fn handle_result(\n     result: HashMap<PathBuf, String>,\n@@ -546,11 +536,11 @@ fn handle_result(\n     for (file_name, fmt_text) in result {\n         // If file is in tests/source, compare to file with same name in tests/target.\n         let target = get_target(&file_name, target);\n-        let open_error = format!(\"Couldn't open target {:?}\", &target);\n+        let open_error = format!(\"couldn't open target {:?}\", &target);\n         let mut f = fs::File::open(&target).expect(&open_error);\n \n         let mut text = String::new();\n-        let read_error = format!(\"Failed reading target {:?}\", &target);\n+        let read_error = format!(\"failed reading target {:?}\", &target);\n         f.read_to_string(&mut text).expect(&read_error);\n \n         // Ignore LF and CRLF difference for Windows.\n@@ -571,7 +561,7 @@ fn handle_result(\n     }\n }\n \n-// Map source file paths to their target paths.\n+// Maps source file paths to their target paths.\n fn get_target(file_name: &Path, target: Option<&str>) -> PathBuf {\n     if let Some(n) = file_name\n         .components()\n@@ -591,7 +581,7 @@ fn get_target(file_name: &Path, target: Option<&str>) -> PathBuf {\n             target_file_name\n         }\n     } else {\n-        // This is either and idempotence check or a self check\n+        // This is either and idempotence check or a self check.\n         file_name.to_owned()\n     }\n }\n@@ -674,10 +664,10 @@ impl ConfigurationSection {\n     ) -> Option<ConfigurationSection> {\n         lazy_static! {\n             static ref CONFIG_NAME_REGEX: regex::Regex =\n-                regex::Regex::new(r\"^## `([^`]+)`\").expect(\"Failed creating configuration pattern\");\n+                regex::Regex::new(r\"^## `([^`]+)`\").expect(\"failed creating configuration pattern\");\n             static ref CONFIG_VALUE_REGEX: regex::Regex =\n                 regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n-                    .expect(\"Failed creating configuration value pattern\");\n+                    .expect(\"failed creating configuration value pattern\");\n         }\n \n         loop {\n@@ -899,7 +889,7 @@ fn configuration_snippet_tests() {\n     fn get_code_blocks() -> Vec<ConfigCodeBlock> {\n         let mut file_iter = BufReader::new(\n             fs::File::open(Path::new(CONFIGURATIONS_FILE_NAME))\n-                .expect(&format!(\"Couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n+                .expect(&format!(\"couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n         )\n         .lines()\n         .map(|l| l.unwrap())\n@@ -945,28 +935,30 @@ fn make_temp_file(file_name: &'static str) -> TempFile {\n     let target_dir = var(\"RUSTFMT_TEST_DIR\").unwrap_or_else(|_| \".\".to_owned());\n     let path = Path::new(&target_dir).join(file_name);\n \n-    let mut file = File::create(&path).expect(\"Couldn't create temp file\");\n+    let mut file = File::create(&path).expect(\"couldn't create temp file\");\n     let content = \"fn main() {}\\n\";\n     file.write_all(content.as_bytes())\n-        .expect(\"Couldn't write temp file\");\n+        .expect(\"couldn't write temp file\");\n     TempFile { path }\n }\n \n impl Drop for TempFile {\n     fn drop(&mut self) {\n         use std::fs::remove_file;\n-        remove_file(&self.path).expect(\"Couldn't delete temp file\");\n+        remove_file(&self.path).expect(\"couldn't delete temp file\");\n     }\n }\n \n fn rustfmt() -> PathBuf {\n     let mut me = env::current_exe().expect(\"failed to get current executable\");\n-    me.pop(); // chop of the test name\n-    me.pop(); // chop off `deps`\n+    // Chop of the test name.\n+    me.pop();\n+    // Chop off `deps`.\n+    me.pop();\n \n-    // if we run `cargo test --release` we might only have a release build\n+    // If we run `cargo test --release`, we might only have a release build.\n     if cfg!(release) {\n-        // ../release/\n+        // `../release/`\n         me.pop();\n         me.push(\"release\");\n     }"}, {"sha": "e2ddc49bf861a64ab8de7601135828d9b485c747", "filename": "src/types.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n "}, {"sha": "e42b5c8c7d189b3ab47848c7ec69668d5690e8d6", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::borrow::Cow;\n \n use bytecount;\n@@ -320,7 +310,7 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n     Span::new(lo, hi, NO_EXPANSION)\n }\n \n-// Return true if the given span does not intersect with file lines.\n+// Returns `true` if the given span does not intersect with file lines.\n macro_rules! out_of_file_lines_range {\n     ($self:ident, $span:expr) => {\n         !$self.config.file_lines().is_all()\n@@ -454,7 +444,7 @@ pub fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr: &str)\n     }\n }\n \n-/// Remove trailing spaces from the specified snippet. We do not remove spaces\n+/// Removes trailing spaces from the specified snippet. We do not remove spaces\n /// inside strings or comments.\n pub fn remove_trailing_white_spaces(text: &str) -> String {\n     let mut buffer = String::with_capacity(text.len());"}, {"sha": "9dca1d600f3794d3ff31ecf9675722a37f4c2250", "filename": "src/vertical.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // Format with vertical alignment.\n \n use std::cmp;"}, {"sha": "0d350e66c1a7e31379bde4ebbb5b553b98270e04", "filename": "src/visitor.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n use std::cell::RefCell;\n \n use syntax::parse::ParseSess;"}, {"sha": "81253c460376c2339e5d8fde614f1bc69a5f3b7c", "filename": "tests/source/configs/struct_field_align_threshold/20.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -97,7 +97,7 @@ struct Qux<'a,\n struct Tuple(/*Comment 1*/ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n              /* Comment 2   */ BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,);\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub struct Foo<'a, Y: Baz>\n     where X: Whatever\n {"}, {"sha": "528b9a0292a9e8eb673a016db93869ea6ba79294", "filename": "tests/source/fn-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-simple.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -19,7 +19,7 @@ fn generic<T>(arg: T) -> &SomeType\n         A,\n         // Second argument\n         B, C, D, /* pre comment */ E /* last comment */) -> &SomeType {\n-    arg(a, b, c, d, e)    \n+    arg(a, b, c, d, e)\n }\n \n fn foo()  ->  !  {}"}, {"sha": "6354d39eb96ad666cc7fc6aa908664ab0000aab8", "filename": "tests/source/itemized-blocks/no_wrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fitemized-blocks%2Fno_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fitemized-blocks%2Fno_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitemized-blocks%2Fno_wrap.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -14,17 +14,17 @@\n //! - when the log level is trace, the whole line is gray (\"bright black\")\n \n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor:\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`], as reported by the remote theater by theater-specific means\n ///  * `to` is the receiving (local) [`ActorId`], as requested by the remote theater\n ///  * `tag` is a tag that identifies the message type\n ///  * `msg` is the (serialized) message\n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor\n fn func1() {}\n \n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor:\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`], as reported by the remote theater by theater-specific means\n ///  * `to` is the receiving (local) [`ActorId`], as requested by the remote theater\n ///  * `tag` is a tag that identifies the message type"}, {"sha": "61448dce8526d1f8d81bab1f00dfb6058466a96b", "filename": "tests/source/itemized-blocks/wrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fitemized-blocks%2Fwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fitemized-blocks%2Fwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fitemized-blocks%2Fwrap.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -22,17 +22,17 @@\n //   - when the log level is trace, the whole line is gray (\"bright black\")\n \n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor:\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`], as reported by the remote theater by theater-specific means\n ///  * `to` is the receiving (local) [`ActorId`], as requested by the remote theater\n ///  * `tag` is a tag that identifies the message type\n ///  * `msg` is the (serialized) message\n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor\n fn func1() {}\n \n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor:\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`], as reported by the remote theater by theater-specific means\n ///  * `to` is the receiving (local) [`ActorId`], as requested by the remote theater\n ///  * `tag` is a tag that identifies the message type"}, {"sha": "f89f4f68da9bafa99ac40c69c4dfbdc5377bb913", "filename": "tests/source/multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmultiple.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -88,7 +88,7 @@ pub struct Foo {\n \n struct Bar;\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub struct Foo<'a, Y: Baz>\n     where X: Whatever\n {"}, {"sha": "b0682d4db3a3493b6b734908ae0a7759b4875d1a", "filename": "tests/source/soft-wrapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fsoft-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fsoft-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fsoft-wrapping.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -8,7 +8,7 @@\n // ggreater than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits off\n // the result are the upper 96 bits of `a`.\n \n-/// Compare the lowest `f32` of both inputs for greater than or equal. The\n+/// Compares the lowest `f32` of both inputs for greater than or equal. The\n /// lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is\n /// greater than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits off\n /// the result are the upper 96 bits of `a`."}, {"sha": "711264a11d391db3ddd40a05b9968addd9513b66", "filename": "tests/source/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -70,7 +70,7 @@ struct Qux<'a,\n struct Tuple(/*Comment 1*/ AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,\n              /* Comment 2   */ BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,);\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub struct Foo<'a, Y: Baz>\n     where X: Whatever\n {"}, {"sha": "4874094ccc4c450a1c44bad1fadfda5d7cf6169a", "filename": "tests/source/type-ascription.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Ftype-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Ftype-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype-ascription.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,9 +1,10 @@\n+\n fn main() {\n     let xxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy  :  SomeTrait<AA, BB, CC>;\n \n     let xxxxxxxxxxxxxxx = yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n     let z = funk(yyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzz, wwwwww): AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\n \n-     x : u32 - 1u32 / 10f32 : u32 \n+    x : u32 - 1u32 / 10f32 : u32\n }"}, {"sha": "53630788fe5c73a196b6e5b004bfb753b3355296", "filename": "tests/source/unions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Fsource%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Funions.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -37,7 +37,7 @@ pub union Writebatch<K: Key> {\n     marker: PhantomData<K>,\n }\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub union Foo<'a, Y: Baz>\n     where X: Whatever\n {"}, {"sha": "5a17f03089c88c64160d6ce89e1ad65a405b848f", "filename": "tests/target/comments-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fcomments-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fcomments-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-fn.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -12,7 +12,7 @@ fn foo<F, G>(\n     e: eeeeeeeeeeeee, /* comment before paren */\n ) -> bar\n where\n-    F: Foo, // COmment after where clause\n+    F: Foo, // COmment after where-clause\n     G: Goo, // final comment\n {\n "}, {"sha": "5ada9b1dd148502635cfaf152dcdcaf374262a53", "filename": "tests/target/configs/combine_control_expr/false.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ffalse.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,6 +1,7 @@\n // rustfmt-indent_style: Block\n // rustfmt-combine_control_expr: false\n-// Combining openings and closings. See https://github.com/rust-lang/fmt-rfcs/issues/61.\n+\n+// Combining openings and closings. See rust-lang/fmt-rfcs#61.\n \n fn main() {\n     // Call"}, {"sha": "52acd26492adda5495f23a7b4f0c9dfb5367d745", "filename": "tests/target/configs/combine_control_expr/true.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fcombine_control_expr%2Ftrue.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -1,6 +1,7 @@\n // rustfmt-indent_style: Block\n // rustfmt-combine_control_expr: true\n-// Combining openings and closings. See https://github.com/rust-lang/fmt-rfcs/issues/61.\n+\n+// Combining openings and closings. See rust-lang/fmt-rfcs#61.\n \n fn main() {\n     // Call"}, {"sha": "848abd3d3cf34656b60a3585a4068cc928fbe2e3", "filename": "tests/target/configs/struct_field_align_threshold/20.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -102,7 +102,7 @@ struct Tuple(\n     BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n );\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub struct Foo<'a, Y: Baz>\n where\n     X: Whatever,"}, {"sha": "3533a81fbc4a45892ec8b8d351d2ecfde5484f56", "filename": "tests/target/issue-3032.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fissue-3032.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fissue-3032.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3032.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -6,7 +6,7 @@ pub fn get_array_index_from_id(_cx: *mut JSContext, id: HandleId) -> Option<u32>\n         }\n         None\n     }\n-    // if id is length atom, -1, otherwise\n+    // If `id` is length atom, `-1`, otherwise:\n     /*return if JSID_IS_ATOM(id) {\n         let atom = JSID_TO_ATOM(id);\n         //let s = *GetAtomChars(id);"}, {"sha": "945c3fbbca03cab7b4aa8e9c33add7d4b6e885b6", "filename": "tests/target/itemized-blocks/no_wrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fitemized-blocks%2Fno_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fitemized-blocks%2Fno_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitemized-blocks%2Fno_wrap.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -14,17 +14,17 @@\n //! - when the log level is trace, the whole line is gray (\"bright black\")\n \n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor:\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`], as reported by the remote theater by theater-specific means\n ///  * `to` is the receiving (local) [`ActorId`], as requested by the remote theater\n ///  * `tag` is a tag that identifies the message type\n ///  * `msg` is the (serialized) message\n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor\n fn func1() {}\n \n /// All the parameters ***except for `from_theater`*** should be inserted as sent by the remote\n-/// theater, ie. as passed to [`Theater::send`] on the remote actor:\n+/// theater, i.e., as passed to [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`], as reported by the remote theater by theater-specific means\n ///  * `to` is the receiving (local) [`ActorId`], as requested by the remote theater\n ///  * `tag` is a tag that identifies the message type"}, {"sha": "0a21c474ca608267a8d53c8a20dd0bdac28da2bb", "filename": "tests/target/itemized-blocks/wrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -39,7 +39,7 @@\n \n /// All the parameters ***except for\n /// `from_theater`*** should be inserted as sent\n-/// by the remote theater, ie. as passed to\n+/// by the remote theater, i.e., as passed to\n /// [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`],\n ///    as reported by the remote theater by\n@@ -51,13 +51,13 @@\n ///  * `msg` is the (serialized) message\n /// All the parameters ***except for\n /// `from_theater`*** should be inserted as sent\n-/// by the remote theater, ie. as passed to\n+/// by the remote theater, i.e., as passed to\n /// [`Theater::send`] on the remote actor\n fn func1() {}\n \n /// All the parameters ***except for\n /// `from_theater`*** should be inserted as sent\n-/// by the remote theater, ie. as passed to\n+/// by the remote theater, i.e., as passed to\n /// [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`],\n ///    as reported by the remote theater by"}, {"sha": "ee6ef220c4bc25aba8a3b7736da8d2c9a7b75e0f", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -114,7 +114,7 @@ pub struct Foo {\n \n struct Bar;\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub struct Foo<'a, Y: Baz>\n where\n     X: Whatever,"}, {"sha": "5b4c6d9e85a52823c7de2ea1a437a24b72b9f245", "filename": "tests/target/soft-wrapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fsoft-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fsoft-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fsoft-wrapping.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -8,7 +8,7 @@\n // ggreater than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits\n // off the result are the upper 96 bits of `a`.\n \n-/// Compare the lowest `f32` of both inputs for greater than or equal. The\n+/// Compares the lowest `f32` of both inputs for greater than or equal. The\n /// lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is\n /// greater than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits\n /// off the result are the upper 96 bits of `a`."}, {"sha": "0495ab3c81cc9451040b9bd97d757f389d20e032", "filename": "tests/target/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -75,7 +75,7 @@ struct Tuple(\n     BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB,\n );\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub struct Foo<'a, Y: Baz>\n where\n     X: Whatever,"}, {"sha": "8ed16b269c23098d02cf837a4682d31a125bc911", "filename": "tests/target/unions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=7a3b7c9275f057aa1d71ea7516ef33a44bdffb7f", "patch": "@@ -37,7 +37,7 @@ pub union Writebatch<K: Key> {\n     marker: PhantomData<K>,\n }\n \n-// With a where clause and generics.\n+// With a where-clause and generics.\n pub union Foo<'a, Y: Baz>\n where\n     X: Whatever,"}]}