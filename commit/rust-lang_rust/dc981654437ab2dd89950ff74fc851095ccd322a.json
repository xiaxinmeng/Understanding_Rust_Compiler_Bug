{"sha": "dc981654437ab2dd89950ff74fc851095ccd322a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOTgxNjU0NDM3YWIyZGQ4OTk1MGZmNzRmYzg1MTA5NWNjZDMyMmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:29:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:49:46Z"}, "message": "Mop up a few extra native -> foreign changes.", "tree": {"sha": "f6ba7d20b264c6bf7761d330562fe23557b0dc33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ba7d20b264c6bf7761d330562fe23557b0dc33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc981654437ab2dd89950ff74fc851095ccd322a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc981654437ab2dd89950ff74fc851095ccd322a", "html_url": "https://github.com/rust-lang/rust/commit/dc981654437ab2dd89950ff74fc851095ccd322a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc981654437ab2dd89950ff74fc851095ccd322a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742c05f87d51e28a1fa020070554c0e9c292a4e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/742c05f87d51e28a1fa020070554c0e9c292a4e5", "html_url": "https://github.com/rust-lang/rust/commit/742c05f87d51e28a1fa020070554c0e9c292a4e5"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "cf7d7208fd271a707f9375a7c577b49ead6eb8d9", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc981654437ab2dd89950ff74fc851095ccd322a/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc981654437ab2dd89950ff74fc851095ccd322a/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=dc981654437ab2dd89950ff74fc851095ccd322a", "patch": "@@ -1580,29 +1580,29 @@ mod test {\n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     fn test_uv_ll_struct_size_sockaddr_in6() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_sockaddr_in6_size();\n         let rust_handle_size = sys::size_of::<sockaddr_in6>();\n         let output = #fmt(\"sockaddr_in6 -- foreign: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         // FIXME #1645 .. rust appears to pad structs to the nearest byte..?\n         // .. can't get the uv::ll::sockaddr_in6 to == 28 :/\n         // .. so the type always appears to be 32 in size.. which is\n         // good, i guess.. better too big than too little\n-        assert (4u+native_handle_size as uint) == rust_handle_size;\n+        assert (4u+foreign_handle_size as uint) == rust_handle_size;\n     }\n     #[test]\n     #[ignore(reason = \"questionable size calculations\")]\n     fn test_uv_ll_struct_size_addr_in() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_addr_in_size();\n         let rust_handle_size = sys::size_of::<addr_in>();\n         let output = #fmt(\"addr_in -- foreign: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         // FIXME #1645 .. see note above about struct padding\n-        assert (4u+native_handle_size as uint) == rust_handle_size;\n+        assert (4u+foreign_handle_size as uint) == rust_handle_size;\n     }\n \n     #[test]\n@@ -1633,25 +1633,25 @@ mod test {\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_uv_getaddrinfo_t() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n         let rust_handle_size = sys::size_of::<uv_getaddrinfo_t>();\n         let output = #fmt(\"uv_getaddrinfo_t -- foreign: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n     #[test]\n     #[ignore(cfg(target_os = \"freebsd\"))]\n     #[ignore(cfg(target_os = \"macos\"))]\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_uv_ll_struct_size_addrinfo() {\n-        let native_handle_size =\n+        let foreign_handle_size =\n             rustrt::rust_uv_helper_addrinfo_size();\n         let rust_handle_size = sys::size_of::<addrinfo>();\n         let output = #fmt(\"addrinfo -- foreign: %u rust: %u\",\n-                          native_handle_size as uint, rust_handle_size);\n+                          foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n-        assert native_handle_size as uint == rust_handle_size;\n+        assert foreign_handle_size as uint == rust_handle_size;\n     }\n }"}]}