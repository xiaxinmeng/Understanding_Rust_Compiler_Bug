{"sha": "688946d671fa4b3c0fae5c676574fba1a0499108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ODk0NmQ2NzFmYTRiM2MwZmFlNWM2NzY1NzRmYmExYTA0OTkxMDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-21T22:12:35Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "restructure `CollectItem` dep-node to separate fn sigs from bodies\n\nSetup two tasks, one of which only processes the signatures, in order to\nisolate the typeck entries for signatures from those for bodies.\n\nFixes #36078\nFixes #37720", "tree": {"sha": "cbb89494a2b387b3ee255639c5824eef6af7a5b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb89494a2b387b3ee255639c5824eef6af7a5b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688946d671fa4b3c0fae5c676574fba1a0499108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688946d671fa4b3c0fae5c676574fba1a0499108", "html_url": "https://github.com/rust-lang/rust/commit/688946d671fa4b3c0fae5c676574fba1a0499108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688946d671fa4b3c0fae5c676574fba1a0499108/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f75c8a98ddcbe3afa769c82a9196af0dd524f65a", "html_url": "https://github.com/rust-lang/rust/commit/f75c8a98ddcbe3afa769c82a9196af0dd524f65a"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "d19bef6babea283e57557f849ac93c2232545531", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=688946d671fa4b3c0fae5c676574fba1a0499108", "patch": "@@ -62,6 +62,7 @@ pub enum DepNode<D: Clone + Debug> {\n     PluginRegistrar,\n     StabilityIndex,\n     CollectItem(D),\n+    CollectItemSig(D),\n     Coherence,\n     EffectCheck,\n     Liveness,\n@@ -206,6 +207,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             HirBody(ref d) => op(d).map(HirBody),\n             MetaData(ref d) => op(d).map(MetaData),\n             CollectItem(ref d) => op(d).map(CollectItem),\n+            CollectItemSig(ref d) => op(d).map(CollectItemSig),\n             CoherenceCheckImpl(ref d) => op(d).map(CoherenceCheckImpl),\n             CoherenceOverlapCheck(ref d) => op(d).map(CoherenceOverlapCheck),\n             CoherenceOverlapCheckSpecial(ref d) => op(d).map(CoherenceOverlapCheckSpecial),"}, {"sha": "09e54cb9c5366ea34b502dc713fd6a95a13a3852", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=688946d671fa4b3c0fae5c676574fba1a0499108", "patch": "@@ -128,13 +128,62 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     ccx: &'a CrateCtxt<'a, 'tcx>\n }\n \n+impl<'a, 'tcx> CollectItemTypesVisitor<'a, 'tcx> {\n+    /// Collect item types is structured into two tasks. The outer\n+    /// task, `CollectItem`, walks the entire content of an item-like\n+    /// thing, including its body. It also spawns an inner task,\n+    /// `CollectItemSig`, which walks only the signature. This inner\n+    /// task is the one that writes the item-type into the various\n+    /// maps.  This setup ensures that the item body is never\n+    /// accessible to the task that computes its signature, so that\n+    /// changes to the body don't affect the signature.\n+    ///\n+    /// Consider an example function `foo` that also has a closure in its body:\n+    ///\n+    /// ```\n+    /// fn foo(<sig>) {\n+    ///     ...\n+    ///     let bar = || ...; // we'll label this closure as \"bar\" below\n+    /// }\n+    /// ```\n+    ///\n+    /// This results in a dep-graph like so. I've labeled the edges to\n+    /// document where they arise.\n+    ///\n+    /// ```\n+    /// [HirBody(foo)] -2--> [CollectItem(foo)] -4-> [ItemSignature(bar)]\n+    ///                       ^           ^\n+    ///                       1           3\n+    /// [Hir(foo)] -----------+-6-> [CollectItemSig(foo)] -5-> [ItemSignature(foo)]\n+    /// ```\n+    ///\n+    /// 1. This is added by the `visit_all_item_likes_in_krate`.\n+    /// 2. This is added when we fetch the item body.\n+    /// 3. This is added because `CollectItem` launches `CollectItemSig`.\n+    ///    - it is arguably false; if we refactor the `with_task` system;\n+    ///      we could get probably rid of it, but it is also harmless enough.\n+    /// 4. This is added by the code in `visit_expr` when we write to `item_types`.\n+    /// 5. This is added by the code in `convert_item` when we write to `item_types`;\n+    ///    note that this write occurs inside the `CollectItemSig` task.\n+    /// 6. Added by explicit `read` below\n+    fn with_collect_item_sig<OP>(&self, id: ast::NodeId, op: OP)\n+        where OP: FnOnce()\n+    {\n+        let def_id = self.ccx.tcx.map.local_def_id(id);\n+        self.ccx.tcx.dep_graph.with_task(DepNode::CollectItemSig(def_id), || {\n+            self.ccx.tcx.map.read(id);\n+            op();\n+        });\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n         Some((&self.ccx.tcx.map, NestedVisitMode::OnlyBodies))\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        convert_item(self.ccx, item);\n+        self.with_collect_item_sig(item.id, || convert_item(self.ccx, item));\n         intravisit::walk_item(self, item);\n     }\n \n@@ -156,7 +205,9 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        convert_impl_item(self.ccx, impl_item);\n+        self.with_collect_item_sig(impl_item.id, || {\n+            convert_impl_item(self.ccx, impl_item)\n+        });\n         intravisit::walk_impl_item(self, impl_item);\n     }\n }"}, {"sha": "4d9ca77969bd7359e7f4f71f6816f5c7e3cc561e", "filename": "src/test/incremental/change_private_impl_method_cc/struct_point.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs?ref=688946d671fa4b3c0fae5c676574fba1a0499108", "patch": "@@ -23,18 +23,16 @@\n #![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n #![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n \n-// FIXME(#37720) these two should be reused, but data gets entangled across crates\n-#![rustc_partition_translated(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n \n extern crate point;\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    // FIXME(#37720) data gets entangled across crates\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n@@ -45,8 +43,7 @@ mod fn_calls_methods_in_same_impl {\n mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    // FIXME(#37720) data gets entangled across crates\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n     pub fn dirty() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);"}, {"sha": "e0047e5ec6455aa805b60c183ee43175fb90918d", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=688946d671fa4b3c0fae5c676574fba1a0499108", "patch": "@@ -19,9 +19,7 @@\n \n #![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n \n-// FIXME(#35078) -- this gets recompiled because we don't separate sig from body\n-#![rustc_partition_translated(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n-\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n #![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"rpass2\")]\n #![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n #![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n@@ -52,8 +50,7 @@ mod point {\n mod fn_calls_changed_method {\n     use point::Point;\n \n-    // FIXME(#35078) -- this gets recompiled because we don't separate sig from body\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_origin();"}, {"sha": "b7f90c09b565cd41e552856c2c75d2bcf8f999bf", "filename": "src/test/incremental/hello_world.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Ftest%2Fincremental%2Fhello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688946d671fa4b3c0fae5c676574fba1a0499108/src%2Ftest%2Fincremental%2Fhello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhello_world.rs?ref=688946d671fa4b3c0fae5c676574fba1a0499108", "patch": "@@ -31,8 +31,7 @@ mod x {\n mod y {\n     use x;\n \n-    // FIXME: This should be clean\n-    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n     pub fn yyyy() {\n         x::xxxx();\n     }"}]}