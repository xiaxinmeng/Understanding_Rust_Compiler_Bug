{"sha": "14c619340e4df07c79e60ac051a0796b30fd0acc", "node_id": "C_kwDOAAsO6NoAKDE0YzYxOTM0MGU0ZGYwN2M3OWU2MGFjMDUxYTA3OTZiMzBmZDBhY2M", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-11-19T23:02:42Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-12-04T00:30:19Z"}, "message": "Add test for evaluate_obligation: Ok(EvaluatedToOkModuloRegions) ICE\n\nAdds the minimial repro test case from #85360. The fix for #85360 was\nsupposed to be #85868 however the repro was resolved in the 2021-07-05\nnightly while #85360 didn't land until 2021-09-03. The reason for that\nis d34a3a401b4e44f289a4d5bf53da83367cbb6aa7 **also** resolves that\nissue.\n\nTo test if #85868 actually fixes #85360, I reverted\nd34a3a401b4e44f289a4d5bf53da83367cbb6aa7 and found that #85868 does\nindeed resolve #85360.\n\nWith that question resolved, add a test case to our incremental test\nsuite for the original Ok(EvaluatedToOkModuloRegions) ICE.\n\nThanks to @lqd for helping track this down!", "tree": {"sha": "a12e89b8a03a0f5a7f367ae7ee4f0590a8ff0d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12e89b8a03a0f5a7f367ae7ee4f0590a8ff0d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14c619340e4df07c79e60ac051a0796b30fd0acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14c619340e4df07c79e60ac051a0796b30fd0acc", "html_url": "https://github.com/rust-lang/rust/commit/14c619340e4df07c79e60ac051a0796b30fd0acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14c619340e4df07c79e60ac051a0796b30fd0acc/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/532d2b14c05f9bc20b2d27cbb5f4550d28343a36", "html_url": "https://github.com/rust-lang/rust/commit/532d2b14c05f9bc20b2d27cbb5f4550d28343a36"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "e05da656db60318dd683477b2a09dfa27658861f", "filename": "src/test/incremental/issue-85360-eval-obligation-ice.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/14c619340e4df07c79e60ac051a0796b30fd0acc/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c619340e4df07c79e60ac051a0796b30fd0acc/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs?ref=14c619340e4df07c79e60ac051a0796b30fd0acc", "patch": "@@ -0,0 +1,117 @@\n+// revisions:cfail1 cfail2\n+// compile-flags: --crate-type=lib --edition=2021\n+// build-pass\n+\n+use core::any::Any;\n+use core::marker::PhantomData;\n+\n+struct DerefWrap<T>(T);\n+\n+impl<T> core::ops::Deref for DerefWrap<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+struct Storage<T, D> {\n+    phantom: PhantomData<(T, D)>,\n+}\n+\n+type ReadStorage<T> = Storage<T, DerefWrap<MaskedStorage<T>>>;\n+\n+pub trait Component {\n+    type Storage;\n+}\n+\n+struct VecStorage;\n+\n+struct Pos;\n+\n+impl Component for Pos {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp<T> {\n+    type Storage = VecStorage;\n+}\n+struct ReadData {\n+    pos_interpdata: ReadStorage<GenericComp<Pos>>,\n+}\n+\n+trait System {\n+    type SystemData;\n+\n+    fn run(data: Self::SystemData, any: Box<dyn Any>);\n+}\n+\n+struct Sys;\n+\n+impl System for Sys {\n+    type SystemData = (ReadData, ReadStorage<Pos>);\n+\n+    fn run((data, pos): Self::SystemData, any: Box<dyn Any>) {\n+        <ReadStorage<GenericComp<Pos>> as SystemData>::setup(any);\n+\n+        ParJoin::par_join((&pos, &data.pos_interpdata));\n+    }\n+}\n+\n+trait ParJoin {\n+    fn par_join(self)\n+    where\n+        Self: Sized,\n+    {\n+    }\n+}\n+\n+impl<'a, T, D> ParJoin for &'a Storage<T, D>\n+where\n+    T: Component,\n+    D: core::ops::Deref<Target = MaskedStorage<T>>,\n+    T::Storage: Sync,\n+{\n+}\n+\n+impl<A, B> ParJoin for (A, B)\n+where\n+    A: ParJoin,\n+    B: ParJoin,\n+{\n+}\n+\n+pub trait SystemData {\n+    fn setup(any: Box<dyn Any>);\n+}\n+\n+impl<T: 'static> SystemData for ReadStorage<T>\n+where\n+    T: Component,\n+{\n+    fn setup(any: Box<dyn Any>) {\n+        let storage: &MaskedStorage<T> = any.downcast_ref().unwrap();\n+\n+        <dyn Any as CastFrom<MaskedStorage<T>>>::cast(&storage);\n+    }\n+}\n+\n+pub struct MaskedStorage<T: Component> {\n+    _inner: T::Storage,\n+}\n+\n+pub unsafe trait CastFrom<T> {\n+    fn cast(t: &T) -> &Self;\n+}\n+\n+unsafe impl<T> CastFrom<T> for dyn Any\n+where\n+    T: Any + 'static,\n+{\n+    fn cast(t: &T) -> &Self {\n+        t\n+    }\n+}"}]}