{"sha": "588c1eb41ff88efe3cc971f341d6f866f66dd62c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OGMxZWI0MWZmODhlZmUzY2M5NzFmMzQxZDZmODY2ZjY2ZGQ2MmM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T20:11:29Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T20:11:29Z"}, "message": "Remove resources from remaining test cases", "tree": {"sha": "b6c19e2425bbdb74f0501754b5e9319fcc57a296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6c19e2425bbdb74f0501754b5e9319fcc57a296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/588c1eb41ff88efe3cc971f341d6f866f66dd62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/588c1eb41ff88efe3cc971f341d6f866f66dd62c", "html_url": "https://github.com/rust-lang/rust/commit/588c1eb41ff88efe3cc971f341d6f866f66dd62c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/588c1eb41ff88efe3cc971f341d6f866f66dd62c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21399dca12a7bd812b89d359e2d838965c25f17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21399dca12a7bd812b89d359e2d838965c25f17d", "html_url": "https://github.com/rust-lang/rust/commit/21399dca12a7bd812b89d359e2d838965c25f17d"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "700c5468e619178fd5389ced5aaae8899abf49de", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=588c1eb41ff88efe3cc971f341d6f866f66dd62c", "patch": "@@ -7,7 +7,11 @@ use std;\n \n export context;\n \n-resource arc_destruct<T: const>(_data: int) { }\n+class arc_destruct<T:const> {\n+  let _data: int;\n+  new(data: int) { self._data = data; }\n+  drop {}\n+}\n \n fn arc<T: const>(_data: T) -> arc_destruct<T> {\n     arc_destruct(0)"}, {"sha": "915adafab6634b25c93538de2cb4b71551139fcd", "filename": "src/test/auxiliary/issue2170lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2170lib.rs?ref=588c1eb41ff88efe3cc971f341d6f866f66dd62c", "patch": "@@ -3,6 +3,8 @@ export rsrc;\n fn foo(_x: i32) {\n }\n \n-resource rsrc(x: i32) {\n-    foo(x);\n+class rsrc {\n+  let x: i32;\n+  new(x: i32) { self.x = x; }\n+  drop { foo(self.x); }\n }\n\\ No newline at end of file"}, {"sha": "789836c9d63284b883a56f8d4eab7428525daeeb", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=588c1eb41ff88efe3cc971f341d6f866f66dd62c", "patch": "@@ -1,6 +1,5 @@\n /*\n-  Minimized version of core::comm (with still-local modifications\n-  to turn a resource into a class) for testing. \n+  Minimized version of core::comm for testing. \n \n   Could probably be more minimal.\n  */"}, {"sha": "681abed478046510e6ad8de815e51e99e515300d", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=588c1eb41ff88efe3cc971f341d6f866f66dd62c", "patch": "@@ -41,7 +41,10 @@ enum st {\n     })\n }\n \n-resource r(_l: @nillist) {\n+class r {\n+  let _l: @nillist;\n+  new(l: @nillist) { self._l = l; }\n+  drop {}\n }\n \n fn recurse_or_fail(depth: int, st: option<st>) {"}, {"sha": "3f8fde8927e3f996a167e7782cea110ab56fbf79", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=588c1eb41ff88efe3cc971f341d6f866f66dd62c", "patch": "@@ -1,6 +1,10 @@\n fn main() {\n-    resource foo(_x: comm::port<()>) {}\n-\n+    class foo {\n+      let _x: comm::port<()>;\n+      new(x: comm::port<()>) { self._x = x; }\n+      drop {}\n+    }\n+   \n     let x = ~mut some(foo(comm::port()));\n \n     task::spawn {|move x| //! ERROR not a sendable value"}, {"sha": "b190491e6d6b6aa9c2454fb27ab0cdb6a6c189ab", "filename": "src/test/compile-fail/regions-in-rsrcs.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588c1eb41ff88efe3cc971f341d6f866f66dd62c/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-rsrcs.rs?ref=588c1eb41ff88efe3cc971f341d6f866f66dd62c", "patch": "@@ -1,19 +1,37 @@\n-resource no0(x: &uint) { //! ERROR to use region types here, the containing type must be declared with a region bound\n+class no0 {\n+  let x: &uint;\n+  new(x: &uint) { self.x = x; } //! ERROR to use region types here, the containing type must be declared with a region bound\n+  drop {}\n }\n \n-resource no1(x: &self.uint) { //! ERROR to use region types here, the containing type must be declared with a region bound\n+class no1 {\n+  let x: &self.uint;\n+  new(x: &self.uint) { self.x = x; } //! ERROR to use region types here, the containing type must be declared with a region bound\n+  drop {}\n }\n \n-resource no2(x: &foo.uint) { //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+class no2 {\n+  let x: &foo.uint;\n+  new(x: &foo.uint) { self.x = x; } //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+  drop {}\n }\n \n-resource yes0/&(x: &uint) {\n+class yes0/& {\n+  let x: &uint;\n+  new(x: &uint) { self.x = x; }\n+  drop {}\n }\n \n-resource yes1/&(x: &self.uint) {\n+class yes1/& {\n+  let x: &self.uint;\n+  new(x: &self.uint) { self.x = x; }\n+  drop {}\n }\n \n-resource yes2/&(x: &foo.uint) { //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+class yes2/& {\n+  let x: &foo.uint;\n+  new(x: &foo.uint) { self.x = x; } //! ERROR named regions other than `self` are not allowed as part of a type declaration\n+  drop {}\n }\n \n fn main() {}\n\\ No newline at end of file"}]}