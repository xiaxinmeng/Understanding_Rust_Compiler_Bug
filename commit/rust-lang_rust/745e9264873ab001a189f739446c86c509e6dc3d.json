{"sha": "745e9264873ab001a189f739446c86c509e6dc3d", "node_id": "C_kwDOAAsO6NoAKDc0NWU5MjY0ODczYWIwMDFhMTg5ZjczOTQ0NmM4NmM1MDllNmRjM2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T21:16:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T21:16:17Z"}, "message": "Auto merge of #93381 - tmiasko:is-self-recursive, r=ecstatic-morse\n\nCheck the number of arguments first in `is_recursive_call`", "tree": {"sha": "b6245aa812811b05e9851c19e16fa3673f2b26a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6245aa812811b05e9851c19e16fa3673f2b26a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/745e9264873ab001a189f739446c86c509e6dc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/745e9264873ab001a189f739446c86c509e6dc3d", "html_url": "https://github.com/rust-lang/rust/commit/745e9264873ab001a189f739446c86c509e6dc3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/745e9264873ab001a189f739446c86c509e6dc3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498eeb72f590e518e19746b346be53713689e207", "url": "https://api.github.com/repos/rust-lang/rust/commits/498eeb72f590e518e19746b346be53713689e207", "html_url": "https://github.com/rust-lang/rust/commit/498eeb72f590e518e19746b346be53713689e207"}, {"sha": "35b5daaaf8ab7675c940687c0898fb4d0300c850", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b5daaaf8ab7675c940687c0898fb4d0300c850", "html_url": "https://github.com/rust-lang/rust/commit/35b5daaaf8ab7675c940687c0898fb4d0300c850"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "bccff37987348807e262a65db548facc20dc7f92", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/745e9264873ab001a189f739446c86c509e6dc3d/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/745e9264873ab001a189f739446c86c509e6dc3d/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=745e9264873ab001a189f739446c86c509e6dc3d", "patch": "@@ -66,8 +66,14 @@ struct Search<'mir, 'tcx> {\n \n impl<'mir, 'tcx> Search<'mir, 'tcx> {\n     /// Returns `true` if `func` refers to the function we are searching in.\n-    fn is_recursive_call(&self, func: &Operand<'tcx>) -> bool {\n+    fn is_recursive_call(&self, func: &Operand<'tcx>, args: &[Operand<'tcx>]) -> bool {\n         let Search { tcx, body, trait_substs, .. } = *self;\n+        // Resolving function type to a specific instance that is being called is expensive.  To\n+        // avoid the cost we check the number of arguments first, which is sufficient to reject\n+        // most of calls as non-recursive.\n+        if args.len() != body.arg_count {\n+            return false;\n+        }\n         let caller = body.source.def_id();\n         let param_env = tcx.param_env(caller);\n \n@@ -141,8 +147,8 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n     fn node_settled(&mut self, bb: BasicBlock) -> ControlFlow<Self::BreakVal> {\n         // When we examine a node for the last time, remember it if it is a recursive call.\n         let terminator = self.body[bb].terminator();\n-        if let TerminatorKind::Call { func, .. } = &terminator.kind {\n-            if self.is_recursive_call(func) {\n+        if let TerminatorKind::Call { func, args, .. } = &terminator.kind {\n+            if self.is_recursive_call(func, args) {\n                 self.reachable_recursive_calls.push(terminator.source_info.span);\n             }\n         }\n@@ -157,7 +163,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n         }\n         // Don't traverse successors of recursive calls or false CFG edges.\n         match self.body[bb].terminator().kind {\n-            TerminatorKind::Call { ref func, .. } => self.is_recursive_call(func),\n+            TerminatorKind::Call { ref func, ref args, .. } => self.is_recursive_call(func, args),\n             TerminatorKind::FalseEdge { imaginary_target, .. } => imaginary_target == target,\n             _ => false,\n         }"}]}