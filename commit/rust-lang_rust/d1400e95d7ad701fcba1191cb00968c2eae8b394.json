{"sha": "d1400e95d7ad701fcba1191cb00968c2eae8b394", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNDAwZTk1ZDdhZDcwMWZjYmExMTkxY2IwMDk2OGMyZWFlOGIzOTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T20:16:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T20:16:07Z"}, "message": "renames", "tree": {"sha": "8085d65e9b226592d334b117036cb7725a5d710f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8085d65e9b226592d334b117036cb7725a5d710f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1400e95d7ad701fcba1191cb00968c2eae8b394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1400e95d7ad701fcba1191cb00968c2eae8b394", "html_url": "https://github.com/rust-lang/rust/commit/d1400e95d7ad701fcba1191cb00968c2eae8b394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1400e95d7ad701fcba1191cb00968c2eae8b394/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6953049e5f67dcc940cc4edc228c1be13a4624d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6953049e5f67dcc940cc4edc228c1be13a4624d1", "html_url": "https://github.com/rust-lang/rust/commit/6953049e5f67dcc940cc4edc228c1be13a4624d1"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "06f9105c6a31b78c137e150d9daf3783ecf05acf", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -172,7 +172,7 @@ fn tuple_expr(p: &mut Parser) -> CompletedMarker {\n fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(PIPE));\n     let m = p.start();\n-    params::list_opt_types(p);\n+    params::param_list_opt_types(p);\n     if fn_ret_type(p) {\n         block(p);\n     } else {"}, {"sha": "d5f75f13ddc65b3a21f00b94f661fcdc797c9b4e", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -236,10 +236,10 @@ fn fn_item(p: &mut Parser) {\n     name(p);\n     // test fn_item_type_params\n     // fn foo<T: Clone + Copy>(){}\n-    type_params::list(p);\n+    type_params::type_param_list(p);\n \n     if p.at(L_PAREN) {\n-        params::list(p);\n+        params::param_list(p);\n     } else {\n         p.error(\"expected function arguments\");\n     }\n@@ -265,7 +265,7 @@ fn type_item(p: &mut Parser) {\n \n     // test type_item_type_params\n     // type Result<T> = ();\n-    type_params::list(p);\n+    type_params::type_param_list(p);\n \n     // test type_item_where_clause\n     // type Foo where Foo: Copy = ();"}, {"sha": "7ced542a4e46eb66a13a3e1c852cf733e3b954c3", "filename": "src/parser/grammar/items/structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -5,7 +5,7 @@ pub(super) fn struct_item(p: &mut Parser) {\n     p.bump();\n \n     name(p);\n-    type_params::list(p);\n+    type_params::type_param_list(p);\n     match p.current() {\n         WHERE_KW => {\n             type_params::where_clause(p);\n@@ -42,7 +42,7 @@ pub(super) fn enum_item(p: &mut Parser) {\n     assert!(p.at(ENUM_KW));\n     p.bump();\n     name(p);\n-    type_params::list(p);\n+    type_params::type_param_list(p);\n     type_params::where_clause(p);\n     if p.expect(L_CURLY) {\n         while !p.at(EOF) && !p.at(R_CURLY) {"}, {"sha": "bda13e56504a1f1d2c91ac59b823eeda5ee2bd9d", "filename": "src/parser/grammar/items/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Ftraits.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -6,7 +6,7 @@ pub(super) fn trait_item(p: &mut Parser) {\n     assert!(p.at(TRAIT_KW));\n     p.bump();\n     name(p);\n-    type_params::list(p);\n+    type_params::type_param_list(p);\n     if p.at(COLON) {\n         type_params::bounds(p);\n     }\n@@ -21,7 +21,7 @@ pub(super) fn impl_item(p: &mut Parser) {\n     assert!(p.at(IMPL_KW));\n     p.bump();\n     if choose_type_params_over_qpath(p) {\n-        type_params::list(p);\n+        type_params::type_param_list(p);\n     }\n \n     // TODO: never type"}, {"sha": "efa88239439f8e00e9138481ea80918735007557", "filename": "src/parser/grammar/params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fparams.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -5,11 +5,11 @@ use super::*;\n // fn b(x: i32) {}\n // fn c(x: i32, ) {}\n // fn d(x: i32, y: ()) {}\n-pub(super) fn list(p: &mut Parser) {\n+pub(super) fn param_list(p: &mut Parser) {\n     list_(p, true)\n }\n \n-pub(super) fn list_opt_types(p: &mut Parser) {\n+pub(super) fn param_list_opt_types(p: &mut Parser) {\n     list_(p, false)\n }\n "}, {"sha": "fe69db09699f3eb4ba80bb6a89b351d5022a8d2d", "filename": "src/parser/grammar/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fpaths.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -71,7 +71,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n fn path_generic_args(p: &mut Parser, mode: Mode) {\n     match mode {\n         Mode::Use => return,\n-        Mode::Type => type_args::list(p, false),\n-        Mode::Expr => type_args::list(p, true),\n+        Mode::Type => type_args::type_arg_list(p, false),\n+        Mode::Expr => type_args::type_arg_list(p, true),\n     }\n }"}, {"sha": "5b960f10bcce4ac36e019878ac92bc777c550f35", "filename": "src/parser/grammar/type_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_args.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-pub(super) fn list(p: &mut Parser, colon_colon_required: bool) {\n+pub(super) fn type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n     let m;\n     match (colon_colon_required, p.nth(0), p.nth(1)) {\n         (_, COLONCOLON, L_ANGLE) => {"}, {"sha": "b31bf52b627fe5416bc8d512db6620498fa67f9a", "filename": "src/parser/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_params.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n \n-pub(super) fn list(p: &mut Parser) {\n+pub(super) fn type_param_list(p: &mut Parser) {\n     if !p.at(L_ANGLE) {\n         return;\n     }"}, {"sha": "565037cb075354fb55b4e13c5899aa3026a951e0", "filename": "src/parser/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1400e95d7ad701fcba1191cb00968c2eae8b394/src%2Fparser%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftypes.rs?ref=d1400e95d7ad701fcba1191cb00968c2eae8b394", "patch": "@@ -166,7 +166,7 @@ fn fn_pointer_type(p: &mut Parser) {\n         return;\n     }\n \n-    params::list(p);\n+    params::param_list(p);\n     // test fn_pointer_type_with_ret\n     // type F = fn() -> ();\n     fn_ret_type(p);\n@@ -179,7 +179,7 @@ fn for_type(p: &mut Parser) {\n     assert!(p.at(FOR_KW));\n     let m = p.start();\n     p.bump();\n-    type_params::list(p);\n+    type_params::type_param_list(p);\n     type_(p);\n     m.complete(p, FOR_TYPE);\n }"}]}