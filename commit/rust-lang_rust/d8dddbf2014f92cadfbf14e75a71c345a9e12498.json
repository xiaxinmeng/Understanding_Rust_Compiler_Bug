{"sha": "d8dddbf2014f92cadfbf14e75a71c345a9e12498", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZGRkYmYyMDE0ZjkyY2FkZmJmMTRlNzVhNzFjMzQ1YTllMTI0OTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-26T17:02:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-05T11:41:03Z"}, "message": "Respect #[rustc_inherit_overflow_checks] in mir::build and trans.", "tree": {"sha": "ae12f6d9ab02d568792b580e6f6b7040bb12dd34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae12f6d9ab02d568792b580e6f6b7040bb12dd34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8dddbf2014f92cadfbf14e75a71c345a9e12498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8dddbf2014f92cadfbf14e75a71c345a9e12498", "html_url": "https://github.com/rust-lang/rust/commit/d8dddbf2014f92cadfbf14e75a71c345a9e12498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8dddbf2014f92cadfbf14e75a71c345a9e12498/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702c47baae8e417d5ca377acb886893e902f2afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/702c47baae8e417d5ca377acb886893e902f2afa", "html_url": "https://github.com/rust-lang/rust/commit/702c47baae8e417d5ca377acb886893e902f2afa"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "67cf5473f79c0855d48bae1a74cd617fcfa591c0", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d8dddbf2014f92cadfbf14e75a71c345a9e12498", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(block = this.as_operand(block, arg));\n                 // Check for -MIN on signed integers\n-                if op == UnOp::Neg && expr.ty.is_signed() && this.check_overflow() {\n+                if this.hir.check_overflow() && op == UnOp::Neg && expr.ty.is_signed() {\n                     let bool_ty = this.hir.bool_ty();\n \n                     let minval = this.minval_literal(expr_span, expr.ty);\n@@ -247,7 +247,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                            lhs: Operand<'tcx>, rhs: Operand<'tcx>) -> BlockAnd<Rvalue<'tcx>> {\n         let scope_id = self.innermost_scope_id();\n         let bool_ty = self.hir.bool_ty();\n-        if op.is_checkable() && ty.is_integral() && self.check_overflow() {\n+        if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n             let result_tup = self.hir.tcx().mk_tup(vec![ty, bool_ty]);\n             let result_value = self.temp(result_tup);\n "}, {"sha": "9d7818a9ba4d67e0c8ea5bdac6a677e5b65cd78c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d8dddbf2014f92cadfbf14e75a71c345a9e12498", "patch": "@@ -55,8 +55,6 @@ pub struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     cached_resume_block: Option<BasicBlock>,\n     /// cached block with the RETURN terminator\n     cached_return_block: Option<BasicBlock>,\n-\n-    has_warned_about_xcrate_overflows: bool\n }\n \n struct CFG<'tcx> {\n@@ -275,8 +273,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             var_indices: FnvHashMap(),\n             unit_temp: None,\n             cached_resume_block: None,\n-            cached_return_block: None,\n-            has_warned_about_xcrate_overflows: false\n+            cached_return_block: None\n         };\n \n         assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n@@ -381,21 +378,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n-\n-    pub fn check_overflow(&mut self) -> bool {\n-        let check = self.hir.tcx().sess.opts.debugging_opts.force_overflow_checks\n-         .unwrap_or(self.hir.tcx().sess.opts.debug_assertions);\n-\n-        if !check && self.hir.may_be_inlined_cross_crate() {\n-            if !self.has_warned_about_xcrate_overflows {\n-                self.hir.tcx().sess.span_warn(self.fn_span,\n-                    \"overflow checks would be missing when used from another crate\");\n-                self.has_warned_about_xcrate_overflows = true;\n-            }\n-        }\n-\n-        check\n-    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "25860ae7ef1ee606d3e0bb1a630157e94f412c65", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d8dddbf2014f92cadfbf14e75a71c345a9e12498", "patch": "@@ -30,50 +30,57 @@ use rustc::ty::{self, Ty, TyCtxt};\n use syntax::parse::token;\n use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n-use syntax::attr;\n+use syntax::attr::AttrMetaMethods;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     constness: hir::Constness,\n \n-    /// True if this MIR can get inlined in other crates.\n-    inline: bool\n+    /// True if this constant/function needs overflow checks.\n+    check_overflow: bool\n }\n \n impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n                src: MirSource)\n                -> Cx<'a, 'gcx, 'tcx> {\n-        let (constness, inline) = match src {\n+        let constness = match src {\n             MirSource::Const(_) |\n-            MirSource::Static(..) => (hir::Constness::Const, false),\n+            MirSource::Static(..) => hir::Constness::Const,\n             MirSource::Fn(id) => {\n-                let def_id = infcx.tcx.map.local_def_id(id);\n                 let fn_like = FnLikeNode::from_node(infcx.tcx.map.get(id));\n                 match fn_like.map(|f| f.kind()) {\n-                    Some(FnKind::ItemFn(_, _, _, c, _, _, attrs)) => {\n-                        let scheme = infcx.tcx.lookup_item_type(def_id);\n-                        let any_types = !scheme.generics.types.is_empty();\n-                        (c, any_types || attr::requests_inline(attrs))\n-                    }\n-                    Some(FnKind::Method(_, m, _, attrs)) => {\n-                        let scheme = infcx.tcx.lookup_item_type(def_id);\n-                        let any_types = !scheme.generics.types.is_empty();\n-                        (m.constness, any_types || attr::requests_inline(attrs))\n-                    }\n-                    _ => (hir::Constness::NotConst, true)\n+                    Some(FnKind::ItemFn(_, _, _, c, _, _, _)) => c,\n+                    Some(FnKind::Method(_, m, _, _)) => m.constness,\n+                    _ => hir::Constness::NotConst\n                 }\n             }\n             MirSource::Promoted(..) => bug!()\n         };\n \n+        let attrs = infcx.tcx.map.attrs(src.item_id());\n+\n+        // Some functions always have overflow checks enabled,\n+        // however, they may not get codegen'd, depending on\n+        // the settings for the crate they are translated in.\n+        let mut check_overflow = attrs.iter().any(|item| {\n+            item.check_name(\"rustc_inherit_overflow_checks\")\n+        });\n+\n+        // Respect -Z force-overflow-checks=on and -C debug-assertions.\n+        check_overflow |= infcx.tcx.sess.opts.debugging_opts.force_overflow_checks\n+               .unwrap_or(infcx.tcx.sess.opts.debug_assertions);\n+\n+        // Constants and const fn's always need overflow checks.\n+        check_overflow |= constness == hir::Constness::Const;\n+\n         Cx {\n             tcx: infcx.tcx,\n             infcx: infcx,\n             constness: constness,\n-            inline: inline\n+            check_overflow: check_overflow\n         }\n     }\n }\n@@ -186,8 +193,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n \n-    pub fn may_be_inlined_cross_crate(&self) -> bool {\n-        self.inline\n+    pub fn check_overflow(&self) -> bool {\n+        self.check_overflow\n     }\n }\n "}, {"sha": "3e3908845e36c5c72e613583683af761c7397c75", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=d8dddbf2014f92cadfbf14e75a71c345a9e12498", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::repr as mir;\n use asm;\n use base;\n use callee::Callee;\n-use common::{self, val_ty, C_null, C_uint, BlockAndBuilder, Result};\n+use common::{self, val_ty, C_bool, C_null, C_uint, BlockAndBuilder, Result};\n use datum::{Datum, Lvalue};\n use debuginfo::DebugLoc;\n use adt;\n@@ -579,6 +579,15 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                       lhs: ValueRef,\n                                       rhs: ValueRef,\n                                       input_ty: Ty<'tcx>) -> OperandValue {\n+        // This case can currently arise only from functions marked\n+        // with #[rustc_inherit_overflow_checks] and inlined from\n+        // another crate (mostly core::num generic/#[inline] fns),\n+        // while the current crate doesn't use overflow checks.\n+        if !bcx.ccx().check_overflow() {\n+            let val = self.trans_scalar_binop(bcx, op, lhs, rhs, input_ty);\n+            return OperandValue::Pair(val, C_bool(bcx.ccx(), false));\n+        }\n+\n         let (val, of) = match op {\n             // These are checked using intrinsics\n             mir::BinOp::Add | mir::BinOp::Sub | mir::BinOp::Mul => {"}, {"sha": "86c4a33896d15ade49115cbcfdf5f74243f2f388", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dddbf2014f92cadfbf14e75a71c345a9e12498/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d8dddbf2014f92cadfbf14e75a71c345a9e12498", "patch": "@@ -502,6 +502,13 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n                                          is just used to make tests pass \\\n                                          and will never be stable\",\n                                         cfg_fn!(rustc_attrs))),\n+    (\"rustc_inherit_overflow_checks\", Whitelisted, Gated(\"rustc_attrs\",\n+                                                         \"the `#[rustc_inherit_overflow_checks]` \\\n+                                                          attribute is just used to control \\\n+                                                          overflow checking behavior of several \\\n+                                                          libcore functions that are inlined \\\n+                                                          across crates and will never be stable\",\n+                                                          cfg_fn!(rustc_attrs))),\n \n     (\"allow_internal_unstable\", Normal, Gated(\"allow_internal_unstable\",\n                                               EXPLAIN_ALLOW_INTERNAL_UNSTABLE,"}]}