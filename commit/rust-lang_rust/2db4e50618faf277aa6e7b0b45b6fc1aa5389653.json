{"sha": "2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYjRlNTA2MThmYWYyNzdhYTZlN2IwYjQ1YjZmYzFhYTUzODk2NTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T12:33:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-19T11:54:25Z"}, "message": "Rewrite build.sh in rust\n\nThis makes it easier to compile cg_clif on systems that don't support\nbash shell scripts like Windows", "tree": {"sha": "16e5161bc9e7bab878fef065247cf8a3355cb6db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e5161bc9e7bab878fef065247cf8a3355cb6db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "html_url": "https://github.com/rust-lang/rust/commit/2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ddb937624265f167f66b034422252d00801cd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddb937624265f167f66b034422252d00801cd29", "html_url": "https://github.com/rust-lang/rust/commit/0ddb937624265f167f66b034422252d00801cd29"}], "stats": {"total": 463, "additions": 372, "deletions": 91}, "files": [{"sha": "3e01020465598ebe74f648cb48d0ed4728eacb6f", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -6,6 +6,7 @@ perf.data\n perf.data.old\n *.events\n *.string*\n+/y.bin\n /build\n /build_sysroot/sysroot_src\n /build_sysroot/compiler-builtins"}, {"sha": "cec110792ceadc283e7832113288bc8febc5bb80", "filename": ".vscode/settings.json", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Fsettings.json?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -49,6 +49,23 @@\n                     \"cfg\": [],\n                 },\n             ]\n+        },\n+        {\n+            \"roots\": [\"./y.rs\"],\n+            \"crates\": [\n+                {\n+                    \"root_module\": \"./y.rs\",\n+                    \"edition\": \"2018\",\n+                    \"deps\": [{ \"crate\": 1, \"name\": \"std\" }],\n+                    \"cfg\": [],\n+                },\n+                {\n+                    \"root_module\": \"./build_sysroot/sysroot_src/library/std/src/lib.rs\",\n+                    \"edition\": \"2018\",\n+                    \"deps\": [],\n+                    \"cfg\": [],\n+                },\n+            ]\n         }\n     ]\n }"}, {"sha": "086b9617fdfa836250813a61ebd302d56a987a20", "filename": "build.sh", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0ddb937624265f167f66b034422252d00801cd29/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0ddb937624265f167f66b034422252d00801cd29/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=0ddb937624265f167f66b034422252d00801cd29", "patch": "@@ -1,88 +0,0 @@\n-#!/usr/bin/env bash\n-set -e\n-\n-# Settings\n-export CHANNEL=\"release\"\n-build_sysroot=\"clif\"\n-target_dir='build'\n-while [[ $# != 0 ]]; do\n-    case $1 in\n-        \"--debug\")\n-            export CHANNEL=\"debug\"\n-            ;;\n-        \"--sysroot\")\n-            build_sysroot=$2\n-            shift\n-            ;;\n-        \"--target-dir\")\n-            target_dir=$2\n-            shift\n-            ;;\n-        *)\n-            echo \"Unknown flag '$1'\"\n-            echo \"Usage: ./build.sh [--debug] [--sysroot none|clif|llvm] [--target-dir DIR]\"\n-            exit 1\n-            ;;\n-    esac\n-    shift\n-done\n-\n-# Build cg_clif\n-unset CARGO_TARGET_DIR\n-unamestr=$(uname)\n-if [[ \"$unamestr\" == 'Linux' || \"$unamestr\" == \"FreeBSD\" ]]; then\n-   export RUSTFLAGS='-Clink-arg=-Wl,-rpath=$ORIGIN/../lib '$RUSTFLAGS\n-elif [[ \"$unamestr\" == 'Darwin' ]]; then\n-   export RUSTFLAGS='-Csplit-debuginfo=unpacked -Clink-arg=-Wl,-rpath,@loader_path/../lib -Zosx-rpath-install-name '$RUSTFLAGS\n-else\n-   echo \"Unsupported os $unamestr\"\n-   exit 1\n-fi\n-if [[ \"$CHANNEL\" == \"release\" ]]; then\n-    cargo build --release\n-else\n-    cargo build\n-fi\n-\n-source scripts/ext_config.sh\n-\n-rm -rf \"$target_dir\"\n-mkdir \"$target_dir\"\n-mkdir \"$target_dir\"/bin \"$target_dir\"/lib\n-ln target/$CHANNEL/cg_clif{,_build_sysroot} \"$target_dir\"/bin\n-ln target/$CHANNEL/*rustc_codegen_cranelift* \"$target_dir\"/lib\n-ln rust-toolchain scripts/config.sh scripts/cargo.sh \"$target_dir\"\n-\n-mkdir -p \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-mkdir -p \"$target_dir/lib/rustlib/$HOST_TRIPLE/lib/\"\n-if [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n-    cp $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib/*.o \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-fi\n-\n-case \"$build_sysroot\" in\n-    \"none\")\n-        ;;\n-    \"llvm\")\n-        cp -r $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib \"$target_dir/lib/rustlib/$TARGET_TRIPLE/\"\n-        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-            cp -r $(rustc --print sysroot)/lib/rustlib/$HOST_TRIPLE/lib \"$target_dir/lib/rustlib/$HOST_TRIPLE/\"\n-        fi\n-        ;;\n-    \"clif\")\n-        echo \"[BUILD] sysroot\"\n-        dir=$(pwd)\n-        cd \"$target_dir\"\n-        time \"$dir/build_sysroot/build_sysroot.sh\"\n-        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-            time TARGET_TRIPLE=\"$HOST_TRIPLE\" \"$dir/build_sysroot/build_sysroot.sh\"\n-        fi\n-        cp lib/rustlib/*/lib/libstd-* lib/\n-        ;;\n-    *)\n-        echo \"Unknown sysroot kind \\`$build_sysroot\\`.\"\n-        echo \"The allowed values are:\"\n-        echo \"    none A sysroot that doesn't contain the standard library\"\n-        echo \"    llvm Copy the sysroot from rustc compiled by cg_llvm\"\n-        echo \"    clif Build a new sysroot using cg_clif\"\n-        exit 1\n-esac"}, {"sha": "cdddeae2a333b4f2a7b79fb1df5a65e116f7cbd8", "filename": "build_system/build_backend.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -0,0 +1,41 @@\n+use std::env;\n+use std::process::{self, Command};\n+\n+pub(crate) fn build_backend(channel: &str) -> String {\n+    let mut cmd = Command::new(\"cargo\");\n+    cmd.arg(\"build\");\n+\n+    match channel {\n+        \"debug\" => {}\n+        \"release\" => {\n+            cmd.arg(\"--release\");\n+        }\n+        _ => unreachable!(),\n+    }\n+\n+    if cfg!(unix) {\n+        if cfg!(target_os = \"macos\") {\n+            cmd.env(\n+                \"RUSTFLAGS\",\n+                \"-Csplit-debuginfo=unpacked \\\n+                -Clink-arg=-Wl,-rpath,@loader_path/../lib \\\n+                -Zosx-rpath-install-name\"\n+                    .to_string()\n+                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n+            );\n+        } else {\n+            cmd.env(\n+                \"RUSTFLAGS\",\n+                \"-Clink-arg=-Wl,-rpath=$ORIGIN/../lib \".to_string()\n+                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n+            );\n+        }\n+    }\n+\n+    eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n+    if !cmd.spawn().unwrap().wait().unwrap().success() {\n+        process::exit(1);\n+    }\n+\n+    crate::rustc_info::get_dylib_name(\"rustc_codegen_cranelift\")\n+}"}, {"sha": "d6ac19dd1cc6230e4ca0d3a5f0d3bae55ff7fe62", "filename": "build_system/build_sysroot.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -0,0 +1,128 @@\n+use crate::{try_hard_link, SysrootKind};\n+use std::env;\n+use std::fs;\n+use std::path::Path;\n+use std::process::{self, Command};\n+\n+pub(crate) fn build_sysroot(\n+    channel: &str,\n+    sysroot_kind: SysrootKind,\n+    target_dir: &Path,\n+    cg_clif_dylib: String,\n+    host_triple: &str,\n+    target_triple: &str,\n+) {\n+    if target_dir.exists() {\n+        fs::remove_dir_all(target_dir).unwrap();\n+    }\n+    fs::create_dir_all(target_dir.join(\"bin\")).unwrap();\n+    fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n+\n+    // Copy the backend\n+    for file in [\"cg_clif\", \"cg_clif_build_sysroot\"] {\n+        try_hard_link(\n+            Path::new(\"target\").join(channel).join(file),\n+            target_dir.join(\"bin\").join(file),\n+        );\n+    }\n+\n+    try_hard_link(\n+        Path::new(\"target\").join(channel).join(&cg_clif_dylib),\n+        target_dir.join(\"lib\").join(cg_clif_dylib),\n+    );\n+\n+    // Copy supporting files\n+    try_hard_link(\"rust-toolchain\", target_dir.join(\"rust-toolchain\"));\n+    try_hard_link(\"scripts/config.sh\", target_dir.join(\"config.sh\"));\n+    try_hard_link(\"scripts/cargo.sh\", target_dir.join(\"cargo.sh\"));\n+\n+    let default_sysroot = crate::rustc_info::get_default_sysroot();\n+\n+    let rustlib = target_dir.join(\"lib\").join(\"rustlib\");\n+    let host_rustlib_lib = rustlib.join(host_triple).join(\"lib\");\n+    let target_rustlib_lib = rustlib.join(target_triple).join(\"lib\");\n+    fs::create_dir_all(&host_rustlib_lib).unwrap();\n+    fs::create_dir_all(&target_rustlib_lib).unwrap();\n+\n+    if target_triple == \"x86_64-pc-windows-gnu\" {\n+        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\").exists() {\n+            eprintln!(\n+                \"The x86_64-pc-windows-gnu target needs to be installed first before it is possible \\\n+                to compile a sysroot for it.\",\n+            );\n+            process::exit(1);\n+        }\n+        for file in fs::read_dir(\n+            default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+        )\n+        .unwrap()\n+        {\n+            let file = file.unwrap().path();\n+            if file.extension().map_or(true, |ext| ext.to_str().unwrap() != \"o\") {\n+                continue; // only copy object files\n+            }\n+            try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n+        }\n+    }\n+\n+    match sysroot_kind {\n+        SysrootKind::None => {} // Nothing to do\n+        SysrootKind::Llvm => {\n+            for file in fs::read_dir(\n+                default_sysroot.join(\"lib\").join(\"rustlib\").join(host_triple).join(\"lib\"),\n+            )\n+            .unwrap()\n+            {\n+                let file = file.unwrap().path();\n+                let file_name_str = file.file_name().unwrap().to_str().unwrap();\n+                if file_name_str.contains(\"rustc_\")\n+                    || file_name_str.contains(\"chalk\")\n+                    || file_name_str.contains(\"tracing\")\n+                    || file_name_str.contains(\"regex\")\n+                {\n+                    // These are large crates that are part of the rustc-dev component and are not\n+                    // necessary to run regular programs.\n+                    continue;\n+                }\n+                try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n+            }\n+\n+            if target_triple != host_triple {\n+                for file in fs::read_dir(\n+                    default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+                )\n+                .unwrap()\n+                {\n+                    let file = file.unwrap().path();\n+                    try_hard_link(&file, target_rustlib_lib.join(file.file_name().unwrap()));\n+                }\n+            }\n+        }\n+        SysrootKind::Clif => {\n+            let cwd = env::current_dir().unwrap();\n+\n+            let mut cmd = Command::new(cwd.join(\"build_sysroot\").join(\"build_sysroot.sh\"));\n+            cmd.current_dir(target_dir).env(\"TARGET_TRIPLE\", target_triple);\n+            eprintln!(\"[BUILD] sysroot\");\n+            if !cmd.spawn().unwrap().wait().unwrap().success() {\n+                process::exit(1);\n+            }\n+\n+            if host_triple != target_triple {\n+                let mut cmd = Command::new(cwd.join(\"build_sysroot\").join(\"build_sysroot.sh\"));\n+                cmd.current_dir(target_dir).env(\"TARGET_TRIPLE\", host_triple);\n+                eprintln!(\"[BUILD] sysroot\");\n+                if !cmd.spawn().unwrap().wait().unwrap().success() {\n+                    process::exit(1);\n+                }\n+            }\n+\n+            for file in fs::read_dir(host_rustlib_lib).unwrap() {\n+                let file = file.unwrap().path();\n+                if file.file_name().unwrap().to_str().unwrap().contains(\"std-\") {\n+                    try_hard_link(&file, target_dir.join(\"lib\").join(file.file_name().unwrap()));\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "28222743022a13602665e64d7f114af3aaaa4848", "filename": "build_system/rustc_info.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -0,0 +1,41 @@\n+use std::path::{Path, PathBuf};\n+use std::process::{Command, Stdio};\n+\n+pub(crate) fn get_host_triple() -> String {\n+    let version_info =\n+        Command::new(\"rustc\").stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;\n+    String::from_utf8(version_info)\n+        .unwrap()\n+        .lines()\n+        .to_owned()\n+        .find(|line| line.starts_with(\"host\"))\n+        .unwrap()\n+        .split(\":\")\n+        .nth(1)\n+        .unwrap()\n+        .trim()\n+        .to_owned()\n+}\n+\n+pub(crate) fn get_default_sysroot() -> PathBuf {\n+    let default_sysroot = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"--print\", \"sysroot\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    Path::new(String::from_utf8(default_sysroot).unwrap().trim()).to_owned()\n+}\n+\n+pub(crate) fn get_dylib_name(crate_name: &str) -> String {\n+    let dylib_name = Command::new(\"rustc\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"--crate-name\", crate_name, \"--crate-type\", \"dylib\", \"--print\", \"file-names\", \"-\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    let dylib_name = String::from_utf8(dylib_name).unwrap().trim().to_owned();\n+    assert!(!dylib_name.contains('\\n'));\n+    assert!(dylib_name.contains(crate_name));\n+    dylib_name\n+}"}, {"sha": "c494e78050ad76d5e08e49831584b09fb077d9c8", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash\n set -e\n \n-./build.sh\n+./y.rs build\n source build/config.sh\n \n echo \"[SETUP] Rust fork\""}, {"sha": "a10924628bb0eba9350b56f5603ead5b068b75f4", "filename": "test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -1,13 +1,13 @@\n #!/usr/bin/env bash\n set -e\n \n-./build.sh --sysroot none \"$@\"\n+./y.rs build --sysroot none \"$@\"\n \n rm -r target/out || true\n \n scripts/tests.sh no_sysroot\n \n-./build.sh \"$@\"\n+./y.rs build \"$@\"\n \n scripts/tests.sh base_sysroot\n scripts/tests.sh extended_sysroot"}, {"sha": "7971e713082f88e21aca49a5edd9a82266f85624", "filename": "y.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/y.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db4e50618faf277aa6e7b0b45b6fc1aa5389653/y.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.rs?ref=2db4e50618faf277aa6e7b0b45b6fc1aa5389653", "patch": "@@ -0,0 +1,141 @@\n+#!/usr/bin/env bash\n+#![allow()] /*This line is ignored by bash\n+# This block is ignored by rustc\n+set -e\n+echo \"[BUILD] y.rs\" 1>&2\n+rustc $0 -o ${0/.rs/.bin} -g\n+exec ${0/.rs/.bin} $@\n+*/\n+\n+//! The build system for cg_clif\n+//!\n+//! # Manual compilation\n+//!\n+//! If your system doesn't support shell scripts you can manually compile and run this file using\n+//! for example:\n+//!\n+//! ```shell\n+//! $ rustc y.rs -o build/y.bin\n+//! $ build/y.bin\n+//! ```\n+//!\n+//! # Naming\n+//!\n+//! The name `y.rs` was chosen to not conflict with rustc's `x.py`.\n+\n+use std::env;\n+use std::fs;\n+use std::path::{Path, PathBuf};\n+use std::process;\n+\n+#[path = \"build_system/build_backend.rs\"]\n+mod build_backend;\n+#[path = \"build_system/build_sysroot.rs\"]\n+mod build_sysroot;\n+#[path = \"build_system/rustc_info.rs\"]\n+mod rustc_info;\n+\n+fn usage() {\n+    eprintln!(\"Usage:\");\n+    eprintln!(\"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--target-dir DIR]\");\n+}\n+\n+macro_rules! arg_error {\n+    ($($err:tt)*) => {{\n+        eprintln!($($err)*);\n+        usage();\n+        std::process::exit(1);\n+    }};\n+}\n+\n+enum Command {\n+    Build,\n+}\n+\n+#[derive(Copy, Clone)]\n+enum SysrootKind {\n+    None,\n+    Clif,\n+    Llvm,\n+}\n+\n+fn main() {\n+    env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n+    env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n+\n+    let mut args = env::args().skip(1);\n+    let command = match args.next().as_deref() {\n+        Some(\"prepare\") => {\n+            if args.next().is_some() {\n+                arg_error!(\"./x.rs prepare doesn't expect arguments\");\n+            }\n+            todo!();\n+        }\n+        Some(\"build\") => Command::Build,\n+        Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n+        Some(command) => arg_error!(\"Unknown command {}\", command),\n+        None => {\n+            usage();\n+            process::exit(0);\n+        }\n+    };\n+\n+    let mut target_dir = PathBuf::from(\"build\");\n+    let mut channel = \"release\";\n+    let mut sysroot_kind = SysrootKind::Clif;\n+    while let Some(arg) = args.next().as_deref() {\n+        match arg {\n+            \"--target-dir\" => {\n+                target_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--target-dir requires argument\");\n+                }))\n+            }\n+            \"--debug\" => channel = \"debug\",\n+            \"--sysroot\" => {\n+                sysroot_kind = match args.next().as_deref() {\n+                    Some(\"none\") => SysrootKind::None,\n+                    Some(\"clif\") => SysrootKind::Clif,\n+                    Some(\"llvm\") => SysrootKind::Llvm,\n+                    Some(arg) => arg_error!(\"Unknown sysroot kind {}\", arg),\n+                    None => arg_error!(\"--sysroot requires argument\"),\n+                }\n+            }\n+            flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n+            arg => arg_error!(\"Unexpected argument {}\", arg),\n+        }\n+    }\n+\n+    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n+        host_triple\n+    } else {\n+        rustc_info::get_host_triple()\n+    };\n+    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n+        if target_triple != \"\" {\n+            target_triple\n+        } else {\n+            host_triple.clone() // Empty target triple can happen on GHA\n+        }\n+    } else {\n+        host_triple.clone()\n+    };\n+\n+    let cg_clif_dylib = build_backend::build_backend(channel);\n+    build_sysroot::build_sysroot(\n+        channel,\n+        sysroot_kind,\n+        &target_dir,\n+        cg_clif_dylib,\n+        &host_triple,\n+        &target_triple,\n+    );\n+}\n+\n+#[track_caller]\n+fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n+    let src = src.as_ref();\n+    let dst = dst.as_ref();\n+    if let Err(_) = fs::hard_link(src, dst) {\n+        fs::copy(src, dst).unwrap(); // Fallback to copying if hardlinking failed\n+    }\n+}"}]}