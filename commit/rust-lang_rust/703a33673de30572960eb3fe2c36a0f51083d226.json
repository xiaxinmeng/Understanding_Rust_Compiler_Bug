{"sha": "703a33673de30572960eb3fe2c36a0f51083d226", "node_id": "C_kwDOAAsO6NoAKDcwM2EzMzY3M2RlMzA1NzI5NjBlYjNmZTJjMzZhMGY1MTA4M2QyMjY", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-03-27T22:41:13Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-04-18T23:53:36Z"}, "message": "Define a dedicated error type for `HandleOrNull` and `HandleOrInvalid`.\n\nDefine a `NotHandle` type, that implements `std::error::Error`, and use\nit as the error type in `HandleOrNull` and `HandleOrInvalid`.", "tree": {"sha": "9e124cf6a2f162edd74afc86ebb2be36d64005e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e124cf6a2f162edd74afc86ebb2be36d64005e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/703a33673de30572960eb3fe2c36a0f51083d226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/703a33673de30572960eb3fe2c36a0f51083d226", "html_url": "https://github.com/rust-lang/rust/commit/703a33673de30572960eb3fe2c36a0f51083d226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/703a33673de30572960eb3fe2c36a0f51083d226/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311e2683e1bad87715b1558f7900e294d24ce491", "url": "https://api.github.com/repos/rust-lang/rust/commits/311e2683e1bad87715b1558f7900e294d24ce491", "html_url": "https://github.com/rust-lang/rust/commit/311e2683e1bad87715b1558f7900e294d24ce491"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "1fb448be5dedf0d61dceea5ee2831a571995e098", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/703a33673de30572960eb3fe2c36a0f51083d226/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703a33673de30572960eb3fe2c36a0f51083d226/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=703a33673de30572960eb3fe2c36a0f51083d226", "patch": "@@ -143,17 +143,17 @@ impl BorrowedHandle<'_> {\n }\n \n impl TryFrom<HandleOrNull> for OwnedHandle {\n-    type Error = ();\n+    type Error = NotHandle;\n \n     #[inline]\n-    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, ()> {\n+    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, NotHandle> {\n         let owned_handle = handle_or_null.0;\n         if owned_handle.handle.is_null() {\n             // Don't call `CloseHandle`; it'd be harmless, except that it could\n             // overwrite the `GetLastError` error.\n             forget(owned_handle);\n \n-            Err(())\n+            Err(NotHandle(()))\n         } else {\n             Ok(owned_handle)\n         }\n@@ -201,23 +201,37 @@ impl OwnedHandle {\n }\n \n impl TryFrom<HandleOrInvalid> for OwnedHandle {\n-    type Error = ();\n+    type Error = NotHandle;\n \n     #[inline]\n-    fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, ()> {\n+    fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, NotHandle> {\n         let owned_handle = handle_or_invalid.0;\n         if owned_handle.handle == c::INVALID_HANDLE_VALUE {\n             // Don't call `CloseHandle`; it'd be harmless, except that it could\n             // overwrite the `GetLastError` error.\n             forget(owned_handle);\n \n-            Err(())\n+            Err(NotHandle(()))\n         } else {\n             Ok(owned_handle)\n         }\n     }\n }\n \n+/// This is the error type used by [`HandleOrInvalid`] and\n+/// [`HandleOrNull`] when attempting to convert into a handle,\n+/// to indicate that the value is not a handle.\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub struct NotHandle(());\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl fmt::Display for NotHandle {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        \"the return value of a Windows API call indicated an error\".fmt(fmt)\n+    }\n+}\n+\n impl AsRawHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_raw_handle(&self) -> RawHandle {"}]}