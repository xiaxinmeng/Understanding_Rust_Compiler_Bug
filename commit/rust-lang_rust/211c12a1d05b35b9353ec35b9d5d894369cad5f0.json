{"sha": "211c12a1d05b35b9353ec35b9d5d894369cad5f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMWMxMmExZDA1YjM1YjkzNTNlYzM1YjlkNWQ4OTQzNjljYWQ1ZjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-22T08:34:14Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-22T08:34:14Z"}, "message": "use compiletest_rs", "tree": {"sha": "48648f42f2d1d7da134e855233d97e62d00d658c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48648f42f2d1d7da134e855233d97e62d00d658c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211c12a1d05b35b9353ec35b9d5d894369cad5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211c12a1d05b35b9353ec35b9d5d894369cad5f0", "html_url": "https://github.com/rust-lang/rust/commit/211c12a1d05b35b9353ec35b9d5d894369cad5f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211c12a1d05b35b9353ec35b9d5d894369cad5f0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d8a07321e5d023ec831355731fd2ddf861ca77", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d8a07321e5d023ec831355731fd2ddf861ca77", "html_url": "https://github.com/rust-lang/rust/commit/86d8a07321e5d023ec831355731fd2ddf861ca77"}], "stats": {"total": 143, "additions": 81, "deletions": 62}, "files": [{"sha": "4827e7fd8a6a762cf3ec69018d58bc4461f79142", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -3,10 +3,24 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"byteorder\"\n version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"compiletest_rs\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.3.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+"}, {"sha": "9fa9f145c72b95411f1f4d340532b80ec5ed6a51", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -12,3 +12,6 @@ name = \"miri\"\n \n [dependencies]\n byteorder = \"0.4.2\"\n+\n+[dev-dependencies]\n+compiletest_rs = \"0.1.1\""}, {"sha": "ebfb379d313488c92657367cef88c172676981b3", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -6,14 +6,13 @@ extern crate rustc_driver;\n \n use miri::interpreter;\n use rustc::session::Session;\n-use rustc_driver::{driver, CompilerCalls, Compilation};\n+use rustc_driver::{driver, CompilerCalls};\n \n struct MiriCompilerCalls;\n \n impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     fn build_controller(&mut self, _: &Session) -> driver::CompileController<'a> {\n         let mut control = driver::CompileController::basic();\n-        control.after_analysis.stop = Compilation::Stop;\n \n         control.after_analysis.callback = Box::new(|state| {\n             state.session.abort_if_errors();"}, {"sha": "d971724f6878bf78c7a37f6e5a60375ef93ff6b1", "filename": "tests/compile-fail/errors.rs", "status": "renamed", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Fcompile-fail%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Fcompile-fail%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ferrors.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -9,33 +8,33 @@ fn overwriting_part_of_relocation_makes_the_rest_undefined() -> i32 {\n         let ptr: *mut _ = &mut p;\n         *(ptr as *mut u32) = 123;\n     }\n-    *p\n+    *p //~ ERROR: attempted to read undefined bytes\n }\n \n #[miri_run]\n fn pointers_to_different_allocations_are_unorderable() -> bool {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    x < y\n+    x < y //~ ERROR: attempted to do math or a comparison on pointers into different allocations\n }\n \n #[miri_run]\n fn invalid_bool() -> u8 {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    if b { 1 } else { 2 }\n+    if b { 1 } else { 2 } //~ ERROR: invalid boolean value read\n }\n \n #[miri_run]\n fn undefined_byte_read() -> u8 {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };\n-    undef + 1\n+    undef + 1 //~ ERROR: attempted to read undefined bytes\n }\n \n #[miri_run]\n fn out_of_bounds_read() -> u8 {\n     let v: Vec<u8> = vec![1, 2];\n-    unsafe { *v.get_unchecked(5) }\n+    unsafe { *v.get_unchecked(5) } //~ ERROR: pointer offset outside bounds of allocation\n }\n \n #[miri_run]\n@@ -44,5 +43,7 @@ fn dangling_pointer_deref() -> i32 {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    unsafe { *p }\n+    unsafe { *p } //~ ERROR: dangling pointer was dereferenced\n }\n+\n+fn main() {}", "previous_filename": "tests/run-pass/errors.rs"}, {"sha": "c7cdb974caea75a0bffd9099e9350b5f4a13da51", "filename": "tests/compile-test.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/86d8a07321e5d023ec831355731fd2ddf861ca77/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8a07321e5d023ec831355731fd2ddf861ca77/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=86d8a07321e5d023ec831355731fd2ddf861ca77", "patch": "@@ -1,37 +0,0 @@\n-use std::{env, fs};\n-use std::process::{Command, Output};\n-\n-fn run_miri(file: &str, sysroot: &str) -> Output {\n-    Command::new(\"cargo\")\n-        .args(&[\"run\", \"--\", \"--sysroot\", sysroot, file])\n-        .output()\n-        .unwrap_or_else(|e| panic!(\"failed to execute process: {}\", e))\n-}\n-\n-#[test]\n-fn run_pass() {\n-    let sysroot = env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n-\n-    let test_files = fs::read_dir(\"./tests/run-pass/\")\n-                         .expect(\"Can't read `run-pass` directory\")\n-                         .filter_map(|entry| entry.ok())\n-                         .filter(|entry| {\n-                             entry.clone()\n-                                  .file_type()\n-                                  .map(|x| x.is_file())\n-                                  .unwrap_or(false)\n-                         })\n-                         .filter_map(|entry| entry.path().to_str().map(|x| x.to_string()));\n-\n-    for file in test_files {\n-        println!(\"{}: compile test running\", file);  \n-\n-        let test_run = run_miri(&file, &sysroot);\n-\n-        if test_run.status.code().unwrap_or(-1) != 0 {\n-            println!(\"{}: error {:?}\", file, test_run);\n-        } else {\n-            println!(\"{}: ok\", file);\n-        }\n-    }\n-}"}, {"sha": "224d7f0611ff7077ba5dc46d8b0b6ef2051daf5a", "filename": "tests/compiletest.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -0,0 +1,23 @@\n+extern crate compiletest_rs as compiletest;\n+\n+use std::path::PathBuf;\n+\n+fn run_mode(mode: &'static str) {\n+    let mut config = compiletest::default_config();\n+    config.rustc_path = \"target/debug/miri\".into();\n+    let path = std::env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n+    config.target_rustcflags = Some(format!(\"--sysroot {}\", path));\n+    config.host_rustcflags = Some(format!(\"--sysroot {}\", path));\n+    let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n+\n+    config.mode = cfg_mode;\n+    config.src_base = PathBuf::from(format!(\"tests/{}\", mode));\n+\n+    compiletest::run_tests(&config);\n+}\n+\n+#[test]\n+fn compile_test() {\n+    run_mode(\"compile-fail\");\n+    run_mode(\"run-pass\");\n+}"}, {"sha": "26a4196b1b975eac33f969a3027d3268321a31ca", "filename": "tests/run-pass/arrays.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Farrays.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -33,3 +32,5 @@ fn index() -> i32 {\n fn array_repeat() -> [u8; 8] {\n     [42; 8]\n }\n+\n+fn main() {}"}, {"sha": "948c09c0fdaabc835755f6b38f0f3c447c1b8902", "filename": "tests/run-pass/bools.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fbools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fbools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbools.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -27,3 +26,5 @@ fn match_bool() -> i16 {\n         _ => 0,\n     }\n }\n+\n+fn main() {}"}, {"sha": "442e58a22a98149869934e5d90badc60ec8600d4", "filename": "tests/run-pass/c_enums.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fc_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fc_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fc_enums.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -20,3 +19,5 @@ fn unsafe_match() -> bool {\n         _ => false,\n     }\n }\n+\n+fn main() {}"}, {"sha": "62ea521d956e5d507cdca54b79cb02cec0d7c650", "filename": "tests/run-pass/calls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fcalls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fcalls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcalls.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -39,3 +38,5 @@ fn cross_crate_fn_call() -> i64 {\n fn test_size_of() -> usize {\n     ::std::mem::size_of::<Option<i32>>()\n }\n+\n+fn main() {}"}, {"sha": "3612cfcb4c4763bf0df2170b385b370e74736ef1", "filename": "tests/run-pass/closures.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclosures.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -37,3 +36,5 @@ fn crazy_closure() -> (i32, i32, i32) {\n //     }\n //     y\n // }\n+\n+fn main() {}"}, {"sha": "3cc01e5829bb9835b7376a6b236fe0c0eb5c27e2", "filename": "tests/run-pass/heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute, box_syntax)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -11,3 +10,5 @@ fn make_box() -> Box<(i16, i16)> {\n fn make_box_syntax() -> Box<(i16, i16)> {\n     box (1, 2)\n }\n+\n+fn main() {}"}, {"sha": "cc113eaed59239564976ad02e417aada391d174c", "filename": "tests/run-pass/ints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fints.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -53,3 +52,5 @@ fn match_int_range() -> i64 {\n         _ => 5,\n     }\n }\n+\n+fn main() {}"}, {"sha": "081e7bb228b4ab1cfd8847abe314d1880c01d9e9", "filename": "tests/run-pass/loops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Floops.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -34,3 +33,5 @@ fn for_loop() -> usize {\n     }\n     sum\n }\n+\n+fn main() {}"}, {"sha": "b66aabb2505c42dcf66e33caac197a7e5bc1c320", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -58,3 +57,5 @@ fn dangling_pointer() -> *const i32 {\n     let b = Box::new(42);\n     &*b as *const i32\n }\n+\n+fn main() {}"}, {"sha": "1d65006ae6f67ae92d77fdc309ca8fadf2b85728", "filename": "tests/run-pass/products.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fproducts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fproducts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fproducts.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -30,3 +29,5 @@ fn field_access() -> (i8, i8) {\n     p.x += 5;\n     (p.x, p.y)\n }\n+\n+fn main() {}"}, {"sha": "b8b101fe8421786f04253ea6d2ac84888dcebc2c", "filename": "tests/run-pass/specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fspecialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fspecialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fspecialization.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute, specialization)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -18,3 +17,5 @@ impl IsUnit for () {\n fn specialization() -> (bool, bool) {\n     (i32::is_unit(), <()>::is_unit())\n }\n+\n+fn main() {}"}, {"sha": "d9c0e3ca1fe4881e030b10f6bb2787bdf8c4f055", "filename": "tests/run-pass/std.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstd.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute, box_syntax)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -44,3 +43,5 @@ fn rc_reference_cycle() -> Loop {\n fn true_assert() {\n     assert_eq!(1, 1);\n }\n+\n+fn main() {}"}, {"sha": "3d71fa4e09f87a8e7759b7bf0b8a6b59eaa0fa44", "filename": "tests/run-pass/strings.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstrings.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -21,3 +20,5 @@ fn hello_bytes() -> &'static [u8; 13] {\n fn hello_bytes_fat() -> &'static [u8] {\n     b\"Hello, world!\"\n }\n+\n+fn main() {}"}, {"sha": "7f92f0d5ffffebb0b8281312dab1063b6a14a005", "filename": "tests/run-pass/sums.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsums.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -53,3 +52,5 @@ fn match_opt_some() -> i8 {\n fn two_nones() -> (Option<i16>, Option<i16>) {\n     (None, None)\n }\n+\n+fn main() {}"}, {"sha": "e9d0f694648b2e5f5b953a60b0c6672cd87c6157", "filename": "tests/run-pass/trivial.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Ftrivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Ftrivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftrivial.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -10,3 +9,5 @@ fn unit_var() {\n     let x = ();\n     x\n }\n+\n+fn main() {}"}, {"sha": "325762289c5bdebfc736495be1c53b8ff2ff5392", "filename": "tests/run-pass/vecs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211c12a1d05b35b9353ec35b9d5d894369cad5f0/tests%2Frun-pass%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecs.rs?ref=211c12a1d05b35b9353ec35b9d5d894369cad5f0", "patch": "@@ -1,4 +1,3 @@\n-#![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n #![allow(dead_code, unused_attributes)]\n \n@@ -36,3 +35,5 @@ fn vec_reallocate() -> Vec<u8> {\n     v.push(5);\n     v\n }\n+\n+fn main() {}"}]}