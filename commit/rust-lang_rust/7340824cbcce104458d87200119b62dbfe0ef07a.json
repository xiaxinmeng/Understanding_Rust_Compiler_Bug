{"sha": "7340824cbcce104458d87200119b62dbfe0ef07a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDA4MjRjYmNjZTEwNDQ1OGQ4NzIwMDExOWI2MmRiZmUwZWYwN2E=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-11T18:12:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T18:38:01Z"}, "message": "Fix autoderef of function calls when the function is not an lval.\n\nAs it turns out, the correct way to handle this is much simpler than what I\ndid originally.\nAlso add more tests.", "tree": {"sha": "a545b2b60683d528c357dd5ed039145124bdc843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a545b2b60683d528c357dd5ed039145124bdc843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7340824cbcce104458d87200119b62dbfe0ef07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7340824cbcce104458d87200119b62dbfe0ef07a", "html_url": "https://github.com/rust-lang/rust/commit/7340824cbcce104458d87200119b62dbfe0ef07a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7340824cbcce104458d87200119b62dbfe0ef07a/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "418aa525107319a224a3299eae8d9c8fdfe02c13", "url": "https://api.github.com/repos/rust-lang/rust/commits/418aa525107319a224a3299eae8d9c8fdfe02c13", "html_url": "https://github.com/rust-lang/rust/commit/418aa525107319a224a3299eae8d9c8fdfe02c13"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "4fd290389e045d400f46e6ecb4b186d8e5fc63cd", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7340824cbcce104458d87200119b62dbfe0ef07a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7340824cbcce104458d87200119b62dbfe0ef07a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7340824cbcce104458d87200119b62dbfe0ef07a", "patch": "@@ -4206,19 +4206,13 @@ fn trans_eager_binop(&@block_ctxt cx, ast::binop op, &ty::t intype,\n     }\n }\n \n-fn autoderef_lval(&@block_ctxt cx, ValueRef v, &ty::t t, bool is_lval)\n-    -> result_t {\n+fn autoderef(&@block_ctxt cx, ValueRef v, &ty::t t) -> result_t {\n     let ValueRef v1 = v;\n     let ty::t t1 = t;\n     auto ccx = cx.fcx.lcx.ccx;\n     while (true) {\n         alt (ty::struct(ccx.tcx, t1)) {\n             case (ty::ty_box(?mt)) {\n-                // If we are working with an lval, we want to\n-                // unconditionally load at the top of the loop\n-                // to get rid of the extra indirection\n-                if (is_lval) { v1 = cx.build.Load(v1); }\n-\n                 auto body =\n                     cx.build.GEP(v1,\n                                  ~[C_int(0), C_int(abi::box_rc_field_body)]);\n@@ -4233,7 +4227,6 @@ fn autoderef_lval(&@block_ctxt cx, ValueRef v, &ty::t t, bool is_lval)\n                 } else { v1 = body; }\n             }\n             case (ty::ty_res(?did, ?inner, ?tps)) {\n-                if (is_lval) { v1 = cx.build.Load(v1); }\n                 t1 = ty::substitute_type_params(ccx.tcx, tps, inner);\n                 v1 = cx.build.GEP(v1, ~[C_int(0), C_int(1)]);\n             }\n@@ -4243,7 +4236,6 @@ fn autoderef_lval(&@block_ctxt cx, ValueRef v, &ty::t t, bool is_lval)\n                     std::ivec::len(variants.(0).args) != 1u) {\n                     break;\n                 }\n-                if (is_lval) { v1 = cx.build.Load(v1); }\n                 t1 = ty::substitute_type_params\n                     (ccx.tcx, tps, variants.(0).args.(0));\n                 if (!ty::type_has_dynamic_size(ccx.tcx, t1)) {\n@@ -4253,18 +4245,11 @@ fn autoderef_lval(&@block_ctxt cx, ValueRef v, &ty::t t, bool is_lval)\n             }\n             case (_) { break; }\n         }\n-        // But if we aren't working with an lval, we get rid of\n-        // a layer of indirection at the bottom of the loop so\n-        // that it is gone when we return...\n-        if (!is_lval) { v1 = load_if_immediate(cx, v1, t1); }\n+        v1 = load_if_immediate(cx, v1, t1);\n     }\n     ret rec(bcx=cx, val=v1, ty=t1);\n }\n \n-fn autoderef(&@block_ctxt cx, ValueRef v, &ty::t t) -> result_t {\n-    ret autoderef_lval(cx, v, t, false);\n-}\n-\n fn trans_binary(&@block_ctxt cx, ast::binop op, &@ast::expr a, &@ast::expr b)\n    -> result {\n \n@@ -5956,7 +5941,8 @@ fn trans_call(&@block_ctxt cx, &@ast::expr f, &option::t[ValueRef] lliterbody,\n         }\n         case (none) {\n             // It's a closure. We have to autoderef.\n-            auto res = autoderef_lval(bcx, f_res.res.val, fn_ty, true);\n+            if (f_res.is_mem) { faddr = load_if_immediate(bcx, faddr, fn_ty);}\n+            auto res = autoderef(bcx, faddr, fn_ty);\n             bcx = res.bcx;\n             fn_ty = res.ty;\n "}, {"sha": "8637c7d03d650a54ec5141983ff8f5d7bff2692e", "filename": "src/test/run-pass/auto-deref-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7340824cbcce104458d87200119b62dbfe0ef07a/src%2Ftest%2Frun-pass%2Fauto-deref-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7340824cbcce104458d87200119b62dbfe0ef07a/src%2Ftest%2Frun-pass%2Fauto-deref-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-deref-fn.rs?ref=7340824cbcce104458d87200119b62dbfe0ef07a", "patch": "@@ -8,4 +8,5 @@ fn main() {\n     assert(f(5) == 6);\n     assert(g(8) == 9);\n     assert(h(0x1badd00d) == 0x1badd00e);\n+    assert((@add1)(42) == 43);\n }"}, {"sha": "3826b9a409c306533dd73b7487c3d7561889484c", "filename": "src/test/run-pass/call-autoderef-tag.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7340824cbcce104458d87200119b62dbfe0ef07a/src%2Ftest%2Frun-pass%2Fcall-autoderef-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7340824cbcce104458d87200119b62dbfe0ef07a/src%2Ftest%2Frun-pass%2Fcall-autoderef-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-autoderef-tag.rs?ref=7340824cbcce104458d87200119b62dbfe0ef07a", "patch": "@@ -0,0 +1,11 @@\n+// xfail-stage0\n+tag int_fn { f(fn(int) -> int); }\n+tag int_box_fn { fb(@fn(int) -> int); }\n+fn add1(int i) -> int { ret i+1; }\n+fn main() {\n+    auto g = f(add1);\n+    assert(g(4) == 5);\n+    assert((f(add1))(5) == 6);\n+    assert((@(f(add1)))(5) == 6);\n+    assert((fb(@add1))(7) == 8);\n+}"}]}