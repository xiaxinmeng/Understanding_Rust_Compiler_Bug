{"sha": "2e8946a6de9dba222e1af8419bbb6f739b63eeea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlODk0NmE2ZGU5ZGJhMjIyZTFhZjg0MTliYmI2ZjczOWI2M2VlZWE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:27:14Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-13T06:27:14Z"}, "message": "literal representation restructure 3\n\nMove suffix check into `check_lit` so that it isn't done repeatedly.", "tree": {"sha": "13345ad4305fab02637b845e7cedd8a539b947a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13345ad4305fab02637b845e7cedd8a539b947a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e8946a6de9dba222e1af8419bbb6f739b63eeea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8946a6de9dba222e1af8419bbb6f739b63eeea", "html_url": "https://github.com/rust-lang/rust/commit/2e8946a6de9dba222e1af8419bbb6f739b63eeea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e8946a6de9dba222e1af8419bbb6f739b63eeea/comments", "author": null, "committer": null, "parents": [{"sha": "2dbd34ffe814e92294992470ac74c57e33372407", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbd34ffe814e92294992470ac74c57e33372407", "html_url": "https://github.com/rust-lang/rust/commit/2dbd34ffe814e92294992470ac74c57e33372407"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "5b234948f241445f82e0f8bcf84b9e1e0cd7e2b6", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2e8946a6de9dba222e1af8419bbb6f739b63eeea/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e8946a6de9dba222e1af8419bbb6f739b63eeea/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=2e8946a6de9dba222e1af8419bbb6f739b63eeea", "patch": "@@ -372,9 +372,15 @@ impl LiteralDigitGrouping {\n                 };\n \n                 let result = (|| {\n+                    if let Some(suffix) = digit_info.suffix {\n+                        if is_mistyped_suffix(suffix) {\n+                            return Err(WarningType::MistypedLiteralSuffix);\n+                        }\n+                    }\n+\n                     match lit.kind {\n                         LitKind::Int(..) => {\n-                            Self::do_lint(digit_info.digits, digit_info.suffix, in_macro)?;\n+                            Self::do_lint(digit_info.digits, in_macro)?;\n                         },\n                         LitKind::Float(..) => {\n                             // Separate digits into integral and fractional parts.\n@@ -385,11 +391,11 @@ impl LiteralDigitGrouping {\n \n                             // Lint integral and fractional parts separately, and then check consistency of digit\n                             // groups if both pass.\n-                            let integral_group_size = Self::do_lint(parts[0], digit_info.suffix, in_macro)?;\n+                            let integral_group_size = Self::do_lint(parts[0], in_macro)?;\n                             if parts.len() > 1 {\n                                 // Lint the fractional part of literal just like integral part, but reversed.\n                                 let fractional_part = &parts[1].chars().rev().collect::<String>();\n-                                let fractional_group_size = Self::do_lint(fractional_part, None, in_macro)?;\n+                                let fractional_group_size = Self::do_lint(fractional_part, in_macro)?;\n                                 let consistent = Self::parts_consistent(integral_group_size,\n                                                                         fractional_group_size,\n                                                                         parts[0].len(),\n@@ -432,12 +438,7 @@ impl LiteralDigitGrouping {\n \n     /// Performs lint on `digits` (no decimal point) and returns the group\n     /// size on success or `WarningType` when emitting a warning.\n-    fn do_lint(digits: &str, suffix: Option<&str>, in_macro: bool) -> Result<usize, WarningType> {\n-        if let Some(suffix) = suffix {\n-            if is_mistyped_suffix(suffix) {\n-                return Err(WarningType::MistypedLiteralSuffix);\n-            }\n-        }\n+    fn do_lint(digits: &str, in_macro: bool) -> Result<usize, WarningType> {\n         // Grab underscore indices with respect to the units digit.\n         let underscore_positions: Vec<usize> = digits\n             .chars()"}]}