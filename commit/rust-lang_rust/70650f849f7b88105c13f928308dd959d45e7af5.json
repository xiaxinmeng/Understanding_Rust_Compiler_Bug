{"sha": "70650f849f7b88105c13f928308dd959d45e7af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNjUwZjg0OWY3Yjg4MTA1YzEzZjkyODMwOGRkOTU5ZDQ1ZTdhZjU=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-06T15:18:23Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-02-06T15:22:17Z"}, "message": "Document that Unique<T> and Shared<T> are non-null", "tree": {"sha": "2d68cf472ece5f7fc0c3d2d8b0ecf09ad6dea0e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d68cf472ece5f7fc0c3d2d8b0ecf09ad6dea0e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70650f849f7b88105c13f928308dd959d45e7af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70650f849f7b88105c13f928308dd959d45e7af5", "html_url": "https://github.com/rust-lang/rust/commit/70650f849f7b88105c13f928308dd959d45e7af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70650f849f7b88105c13f928308dd959d45e7af5/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "html_url": "https://github.com/rust-lang/rust/commit/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "a826f2bb4440f9e4d344fa29d2886bab8b01584a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70650f849f7b88105c13f928308dd959d45e7af5/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70650f849f7b88105c13f928308dd959d45e7af5/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=70650f849f7b88105c13f928308dd959d45e7af5", "patch": "@@ -465,7 +465,7 @@ impl<T: ?Sized> PartialOrd for *mut T {\n     fn ge(&self, other: &*mut T) -> bool { *self >= *other }\n }\n \n-/// A wrapper around a raw `*mut T` that indicates that the possessor\n+/// A wrapper around a raw non-null `*mut T` that indicates that the possessor\n /// of this wrapper owns the referent. This in turn implies that the\n /// `Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n /// `*mut T` (which conveys no particular ownership semantics).  It\n@@ -502,6 +502,10 @@ unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n #[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// `ptr` must be non-null.\n     pub const unsafe fn new(ptr: *mut T) -> Unique<T> {\n         Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n@@ -537,7 +541,7 @@ impl<T> fmt::Pointer for Unique<T> {\n     }\n }\n \n-/// A wrapper around a raw `*mut T` that indicates that the possessor\n+/// A wrapper around a raw non-null `*mut T` that indicates that the possessor\n /// of this wrapper has shared ownership of the referent. Useful for\n /// building abstractions like `Rc<T>` or `Arc<T>`, which internally\n /// use raw pointers to manage the memory that they own.\n@@ -566,6 +570,10 @@ impl<T: ?Sized> !Sync for Shared<T> { }\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Shared<T> {\n     /// Creates a new `Shared`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// `ptr` must be non-null.\n     pub unsafe fn new(ptr: *mut T) -> Self {\n         Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }"}]}