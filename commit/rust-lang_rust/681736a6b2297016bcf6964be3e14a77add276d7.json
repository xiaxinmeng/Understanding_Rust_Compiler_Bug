{"sha": "681736a6b2297016bcf6964be3e14a77add276d7", "node_id": "C_kwDOAAsO6NoAKDY4MTczNmE2YjIyOTcwMTZiY2Y2OTY0YmUzZTE0YTc3YWRkMjc2ZDc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-26T10:26:30Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-02T08:19:15Z"}, "message": "`generic_arg_contains_target`: ignore closures", "tree": {"sha": "cdd1099519acffed3e6b1d0dc2ebbebc281387b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd1099519acffed3e6b1d0dc2ebbebc281387b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681736a6b2297016bcf6964be3e14a77add276d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681736a6b2297016bcf6964be3e14a77add276d7", "html_url": "https://github.com/rust-lang/rust/commit/681736a6b2297016bcf6964be3e14a77add276d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681736a6b2297016bcf6964be3e14a77add276d7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d575e58dc21175a7365577c84c435a243029eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d575e58dc21175a7365577c84c435a243029eb", "html_url": "https://github.com/rust-lang/rust/commit/69d575e58dc21175a7365577c84c435a243029eb"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "7b5c377f7b4caa25ffd21921d538c5e877f23806", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/681736a6b2297016bcf6964be3e14a77add276d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681736a6b2297016bcf6964be3e14a77add276d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=681736a6b2297016bcf6964be3e14a77add276d7", "patch": "@@ -700,8 +700,14 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             match inner.unpack() {\n                 GenericArgKind::Lifetime(_) => {}\n                 GenericArgKind::Type(ty) => {\n-                    if matches!(ty.kind(), ty::Opaque(..)) {\n-                        // Opaque types can't be named by the user right now\n+                    if matches!(ty.kind(), ty::Opaque(..) | ty::Closure(..) | ty::Generator(..)) {\n+                        // Opaque types can't be named by the user right now.\n+                        //\n+                        // Both the generic arguments of closures and generators can\n+                        // also not be named. We may want to only look into the closure\n+                        // signature in case it has no captures, as that can be represented\n+                        // using `fn(T) -> R`.\n+\n                         // FIXME(type_alias_impl_trait): These opaque types\n                         // can actually be named, so it would make sense to\n                         // adjust this case and add a test for it."}, {"sha": "ae879db68ec1302dc5a62f368ced9f624361cf9c", "filename": "src/test/ui/inference/cannot-infer-closure-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681736a6b2297016bcf6964be3e14a77add276d7/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681736a6b2297016bcf6964be3e14a77add276d7/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs?ref=681736a6b2297016bcf6964be3e14a77add276d7", "patch": "@@ -4,10 +4,10 @@ fn main() {\n     // error handles this gracefully, and in particular doesn't generate an extra\n     // note about the `?` operator in the closure body, which isn't relevant to\n     // the inference.\n-    let x = |r| { //~ ERROR type annotations needed for `Result<(), E>`\n+    let x = |r| {\n         let v = r?;\n         Ok(v)\n     };\n \n-    let _ = x(x(Ok(())));\n+    let _ = x(x(Ok(())));  //~ ERROR type annotations needed for `Result<(), E>`\n }"}, {"sha": "3ad8e3cda16e54b8d58ce2d9b1f40c3e4df629eb", "filename": "src/test/ui/inference/cannot-infer-closure-circular.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/681736a6b2297016bcf6964be3e14a77add276d7/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/681736a6b2297016bcf6964be3e14a77add276d7/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr?ref=681736a6b2297016bcf6964be3e14a77add276d7", "patch": "@@ -1,13 +1,13 @@\n error[E0282]: type annotations needed for `Result<(), E>`\n-  --> $DIR/cannot-infer-closure-circular.rs:7:14\n+  --> $DIR/cannot-infer-closure-circular.rs:12:9\n    |\n-LL |     let x = |r| {\n-   |              ^\n+LL |     let _ = x(x(Ok(())));\n+   |         ^\n    |\n-help: consider giving this closure parameter an explicit type, where the type for type parameter `E` is specified\n+help: consider giving this pattern a type, where the type for type parameter `E` is specified\n    |\n-LL |     let x = |r: Result<(), E>| {\n-   |               +++++++++++++++\n+LL |     let _: Result<(), E> = x(x(Ok(())));\n+   |          +++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "9ae97f390d3e4bcb04fb13431c64092f8fc4051e", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/681736a6b2297016bcf6964be3e14a77add276d7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/681736a6b2297016bcf6964be3e14a77add276d7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr?ref=681736a6b2297016bcf6964be3e14a77add276d7", "patch": "@@ -1,13 +1,8 @@\n-error[E0282]: type annotations needed for the closure `fn(Vec<_>)`\n-  --> $DIR/unknown_type_for_closure.rs:2:9\n+error[E0282]: type annotations needed\n+  --> $DIR/unknown_type_for_closure.rs:2:13\n    |\n LL |     let x = |b: Vec<_>| {};\n-   |         ^\n-   |\n-help: consider giving `x` an explicit type, where the type for struct `Vec<_>` is specified\n-   |\n-LL |     let x: [closure@$DIR/unknown_type_for_closure.rs:2:13: 2:27] = |b: Vec<_>| {};\n-   |          +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+   |             ^^^^^^^^^^^^^^ cannot infer type for struct `Vec<_>`\n \n error[E0282]: type annotations needed\n   --> $DIR/unknown_type_for_closure.rs:6:14\n@@ -20,16 +15,11 @@ help: consider giving this closure parameter an explicit type\n LL |     let x = |_: _| {};\n    |               +++\n \n-error[E0282]: type annotations needed for the closure `fn(_)`\n-  --> $DIR/unknown_type_for_closure.rs:10:9\n+error[E0282]: type annotations needed\n+  --> $DIR/unknown_type_for_closure.rs:10:14\n    |\n LL |     let x = |k: _| {};\n-   |         ^\n-   |\n-help: consider giving `x` an explicit type, where the placeholders `_` are specified\n-   |\n-LL |     let x: [closure@$DIR/unknown_type_for_closure.rs:10:13: 10:22] = |k: _| {};\n-   |          +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n+   |              ^ cannot infer type\n \n error[E0282]: type annotations needed\n   --> $DIR/unknown_type_for_closure.rs:14:28"}]}