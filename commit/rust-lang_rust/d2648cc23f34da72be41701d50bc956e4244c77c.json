{"sha": "d2648cc23f34da72be41701d50bc956e4244c77c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNjQ4Y2MyM2YzNGRhNzJiZTQxNzAxZDUwYmM5NTZlNDI0NGM3N2M=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-04T04:50:36Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-04T06:09:49Z"}, "message": "manual: further attribute clarifications\n\n- Sort attributes lexicographically\n- Use new attribute syntax consistently\n- Fix wording describing new attribute syntax\n- Expand section on `repr`", "tree": {"sha": "93e68f1e7a62d79098a22078e80c63f9cce81a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93e68f1e7a62d79098a22078e80c63f9cce81a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2648cc23f34da72be41701d50bc956e4244c77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2648cc23f34da72be41701d50bc956e4244c77c", "html_url": "https://github.com/rust-lang/rust/commit/d2648cc23f34da72be41701d50bc956e4244c77c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2648cc23f34da72be41701d50bc956e4244c77c/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a86d6b4cc9f19a8ad8fe34a627d5543cdd29230c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a86d6b4cc9f19a8ad8fe34a627d5543cdd29230c", "html_url": "https://github.com/rust-lang/rust/commit/a86d6b4cc9f19a8ad8fe34a627d5543cdd29230c"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "1ff0d92d19b978170b7498871fb796d8545530cc", "filename": "src/doc/rust.md", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d2648cc23f34da72be41701d50bc956e4244c77c/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2648cc23f34da72be41701d50bc956e4244c77c/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=d2648cc23f34da72be41701d50bc956e4244c77c", "patch": "@@ -610,7 +610,7 @@ and may optionally begin with any number of `attributes` that apply to the conta\n Attributes on the anonymous crate module define important metadata that influences\n the behavior of the compiler.\n \n-~~~~\n+~~~~ {.rust}\n // Crate ID\n #![crate_id = \"projx#2.5\"]\n \n@@ -1697,7 +1697,7 @@ as any of:\n \n Attributes with a bang (\"!\") after the hash (\"#\") apply to the item that the\n attribute is declared within. Attributes that do not have a bang after the\n-hash by a semi-colon apply to the next item.\n+hash apply to the item that follows the attribute.\n \n An example of attributes:\n \n@@ -1729,53 +1729,54 @@ pub type int8_t = i8;\n \n ### Crate-only attributes\n \n+- `crate_id` - specify the this crate's crate ID.\n - `crate_type` - see [linkage](#linkage).\n - `feature` - see [compiler features](#compiler-features).\n+- `no_main` - disable emitting the `main` symbol. Useful when some other\n+  object being linked to defines `main`.\n - `no_start` - disable linking to the `native` crate, which specifies the\n   \"start\" language item.\n-- `no_main` - disable emitting the `main` symbol. Useful when some\n-  other object being linked to defines `main`.\n - `no_std` - disable linking to the `std` crate.\n-- `crate_id` - specify the this crate's crate ID.\n \n ### Module-only attributes\n \n-- `path` - specifies the file to load the module from. `#[path=\"foo.rs\"] mod\n-  bar;` is equivalent to `mod bar { /* contents of foo.rs */ }`\n - `macro_escape` - macros defined in this module will be visible in the\n   module's parent, after this module has been included.\n - `no_implicit_prelude` - disable injecting `use std::prelude::*` in this\n   module.\n+- `path` - specifies the file to load the module from. `#[path=\"foo.rs\"] mod\n+  bar;` is equivalent to `mod bar { /* contents of foo.rs */ }`. The path is\n+  taken relative to the directory that the current module is in.\n \n ### Function-only attributes\n \n-- `start` - indicates that this function should be used as the entry point,\n-  overriding the \"start\" language item.  See the \"start\" [language\n-  item](#language-items) for more details.\n-- `main` - indicates that this function should be passed to the entry point,\n-  rather than the function in the crate root named `main`.\n - `macro_registrar` - when using loadable syntax extensions, mark this\n   function as the registration point for the current crate's syntax\n   extensions.\n+- `main` - indicates that this function should be passed to the entry point,\n+  rather than the function in the crate root named `main`.\n+- `start` - indicates that this function should be used as the entry point,\n+  overriding the \"start\" language item.  See the \"start\" [language\n+  item](#language-items) for more details.\n \n ### Static-only attributes\n \n+- `address_insignificant` - references to this static may alias with\n+  references to other statics, potentially of unrelated type.\n - `thread_local` - on a `static mut`, this signals that the value of this\n   static may change depending on the current thread. The exact consequences of\n   this are implementation-defined.\n-- `address_insignificant` - references to this static may alias with\n-  references to other statics, potentially of unrelated type.\n \n ### FFI attributes\n \n On an `extern` block, the following attributes are interpreted:\n \n-- `link` - indicate that a native library should be linked to for the\n-  declarations in this block to be linked correctly. See [external\n-  blocks](#external-blocks)\n - `link_args` - specify arguments to the linker, rather than just the library\n   name and type. This is feature gated and the exact behavior is\n   implementation-defined (due to variety of linker invocation syntax).\n+- `link` - indicate that a native library should be linked to for the\n+  declarations in this block to be linked correctly. See [external\n+  blocks](#external-blocks)\n \n On declarations inside an `extern` block, the following attributes are\n interpreted:\n@@ -1787,25 +1788,29 @@ interpreted:\n \n ### Miscellaneous attributes\n \n-- `simd` - on certain tuple structs, derive the arithmetic operators, which\n-  lower to the target's SIMD instructions, if any.\n - `link_section` - on statics and functions, this specifies the section of the\n   object file that this item's contents will be placed into.\n-- `static_assert` - on statics whose type is `bool`, terminates compilation\n-  with an error if it is not initialized to `true`.\n-- `repr` - on C-like enums, this sets the underlying type used for\n-  representation. Useful for FFI.\n+- `macro_export` - export a macro for cross-crate usage.\n - `no_mangle` - on any item, do not apply the standard name mangling. Set the\n   symbol for this item to its identifier.\n - `packed` - on structs or enums, eliminate any padding that would be used to\n   align fields.\n+- `repr` - on C-like enums, this sets the underlying type used for\n+  representation. Useful for FFI. Takes one argument, which is the primitive\n+  type this enum should be represented for, or `C`, which specifies that it\n+  should be the default `enum` size of the C ABI for that platform. Note that\n+  enum representation in C is undefined, and this may be incorrect when the C\n+  code is compiled with certain flags.\n+- `simd` - on certain tuple structs, derive the arithmetic operators, which\n+  lower to the target's SIMD instructions, if any.\n+- `static_assert` - on statics whose type is `bool`, terminates compilation\n+  with an error if it is not initialized to `true`.\n - `unsafe_destructor` - allow implementations of the \"drop\" language item\n   where the type it is implemented for does not implement the \"send\" language\n   item.\n - `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n   destructors from being run twice. Destructors might be run multiple times on\n   the same object with this attribute.\n-- `macro_export` - export a macro for cross-crate usage.\n \n ### Conditional compilation\n "}]}