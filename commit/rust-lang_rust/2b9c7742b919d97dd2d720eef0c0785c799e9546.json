{"sha": "2b9c7742b919d97dd2d720eef0c0785c799e9546", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOWM3NzQyYjkxOWQ5N2RkMmQ3MjBlZWYwYzA3ODVjNzk5ZTk1NDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-31T05:54:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-02T04:28:47Z"}, "message": "Stop propagating link arguments across crates\n\nThis is a fairly brittle modle that doesn't scale well across many crates. It's\nunlikely that all of the downstream crates will have all of the original native\ndependencies of all the upstream crates. In the case that FFI functions are\nreachable, then it should be the responsibility of the downstream crate to link\nagainst the correct library, or the upstream crate should prevent the functions\nfrom being reachable.", "tree": {"sha": "ebca0a2663c6dd210fb6b4642f90e5d16dd45d89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebca0a2663c6dd210fb6b4642f90e5d16dd45d89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b9c7742b919d97dd2d720eef0c0785c799e9546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9c7742b919d97dd2d720eef0c0785c799e9546", "html_url": "https://github.com/rust-lang/rust/commit/2b9c7742b919d97dd2d720eef0c0785c799e9546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b9c7742b919d97dd2d720eef0c0785c799e9546/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c15038db0843835bb075e2b37547e22a65604b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c15038db0843835bb075e2b37547e22a65604b0b", "html_url": "https://github.com/rust-lang/rust/commit/c15038db0843835bb075e2b37547e22a65604b0b"}], "stats": {"total": 48, "additions": 1, "deletions": 47}, "files": [{"sha": "815ec943c49621725a3d1422e79affd9823825d8", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=2b9c7742b919d97dd2d720eef0c0785c799e9546", "patch": "@@ -16,7 +16,7 @@ use lib::llvm::llvm;\n use lib::llvm::ModuleRef;\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::{encoder, csearch, cstore, filesearch};\n+use metadata::{encoder, cstore, filesearch};\n use middle::trans::context::CrateContext;\n use middle::trans::common::gensym_name;\n use middle::ty;\n@@ -1043,14 +1043,6 @@ pub fn link_args(sess: Session,\n     let ula = cstore::get_used_link_args(cstore);\n     for arg in ula.iter() { args.push(arg.to_owned()); }\n \n-    // Add all the link args for external crates.\n-    do cstore::iter_crate_data(cstore) |crate_num, _| {\n-        let link_args = csearch::get_link_args_for_crate(cstore, crate_num);\n-        for link_arg in link_args.move_iter() {\n-            args.push(link_arg);\n-        }\n-    }\n-\n     // # Extern library linking\n \n     // User-supplied library search paths (-L on the cammand line) These are"}, {"sha": "48fe21b334395312915dd373a48ab6b5530126a1", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=2b9c7742b919d97dd2d720eef0c0785c799e9546", "patch": "@@ -261,13 +261,6 @@ pub fn get_item_visibility(cstore: @mut cstore::CStore,\n     decoder::get_item_visibility(cdata, def_id.node)\n }\n \n-pub fn get_link_args_for_crate(cstore: @mut cstore::CStore,\n-                               crate_num: ast::CrateNum)\n-                            -> ~[~str] {\n-    let cdata = cstore::get_crate_data(cstore, crate_num);\n-    decoder::get_link_args_for_crate(cdata)\n-}\n-\n pub fn each_impl(cstore: @mut cstore::CStore,\n                  crate_num: ast::CrateNum,\n                  callback: &fn(ast::DefId)) {"}, {"sha": "56abaa27cce2c10fb4fa93f4f6a42eaa781666f5", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=2b9c7742b919d97dd2d720eef0c0785c799e9546", "patch": "@@ -1456,16 +1456,6 @@ pub fn translate_def_id(cdata: Cmd, did: ast::DefId) -> ast::DefId {\n     }\n }\n \n-pub fn get_link_args_for_crate(cdata: Cmd) -> ~[~str] {\n-    let link_args = reader::get_doc(reader::Doc(cdata.data), tag_link_args);\n-    let mut result = ~[];\n-    do reader::tagged_docs(link_args, tag_link_args_arg) |arg_doc| {\n-        result.push(arg_doc.as_str());\n-        true\n-    };\n-    result\n-}\n-\n pub fn each_impl(cdata: Cmd, callback: &fn(ast::DefId)) {\n     let impls_doc = reader::get_doc(reader::Doc(cdata.data), tag_impls);\n     let _ = do reader::tagged_docs(impls_doc, tag_impls_impl) |impl_doc| {"}, {"sha": "1ad7e416342f5bd5eac81c960141d2d1d6ecc308", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9c7742b919d97dd2d720eef0c0785c799e9546/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2b9c7742b919d97dd2d720eef0c0785c799e9546", "patch": "@@ -75,7 +75,6 @@ struct Stats {\n     attr_bytes: u64,\n     dep_bytes: u64,\n     lang_item_bytes: u64,\n-    link_args_bytes: u64,\n     impl_bytes: u64,\n     misc_bytes: u64,\n     item_bytes: u64,\n@@ -1610,19 +1609,6 @@ fn encode_lang_items(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n     ebml_w.end_tag();   // tag_lang_items\n }\n \n-fn encode_link_args(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n-    ebml_w.start_tag(tag_link_args);\n-\n-    let link_args = cstore::get_used_link_args(ecx.cstore);\n-    for link_arg in link_args.iter() {\n-        ebml_w.start_tag(tag_link_args_arg);\n-        ebml_w.writer.write(link_arg.as_bytes());\n-        ebml_w.end_tag();\n-    }\n-\n-    ebml_w.end_tag();\n-}\n-\n struct ImplVisitor<'self> {\n     ecx: &'self EncodeContext<'self>,\n     ebml_w: &'self mut writer::Encoder,\n@@ -1740,7 +1726,6 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         attr_bytes: 0,\n         dep_bytes: 0,\n         lang_item_bytes: 0,\n-        link_args_bytes: 0,\n         impl_bytes: 0,\n         misc_bytes: 0,\n         item_bytes: 0,\n@@ -1797,11 +1782,6 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     encode_lang_items(&ecx, &mut ebml_w);\n     ecx.stats.lang_item_bytes = wr.tell() - i;\n \n-    // Encode the link args.\n-    i = wr.tell();\n-    encode_link_args(&ecx, &mut ebml_w);\n-    ecx.stats.link_args_bytes = wr.tell() - i;\n-\n     // Encode the def IDs of impls, for coherence checking.\n     i = wr.tell();\n     encode_impls(&ecx, crate, &mut ebml_w);\n@@ -1838,7 +1818,6 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         println!(\" attribute bytes: {}\", ecx.stats.attr_bytes);\n         println!(\"       dep bytes: {}\", ecx.stats.dep_bytes);\n         println!(\" lang item bytes: {}\", ecx.stats.lang_item_bytes);\n-        println!(\" link args bytes: {}\", ecx.stats.link_args_bytes);\n         println!(\"      impl bytes: {}\", ecx.stats.impl_bytes);\n         println!(\"      misc bytes: {}\", ecx.stats.misc_bytes);\n         println!(\"      item bytes: {}\", ecx.stats.item_bytes);"}]}