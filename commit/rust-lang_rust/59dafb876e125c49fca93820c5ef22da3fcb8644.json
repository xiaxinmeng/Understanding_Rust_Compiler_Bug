{"sha": "59dafb876e125c49fca93820c5ef22da3fcb8644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZGFmYjg3NmUxMjVjNDlmY2E5MzgyMGM1ZWYyMmRhM2ZjYjg2NDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T23:07:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T23:07:17Z"}, "message": "Auto merge of #77630 - Dylan-DPC:rollup-kfwl55z, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #76784 (Add some docs to rustdoc::clean::inline and def_id functions)\n - #76911 (fix VecDeque::iter_mut aliasing issues)\n - #77400 (Fix suggestions for x.py setup)\n - #77515 (Update to chalk 0.31)\n - #77568 (inliner: use caller param_env)\n - #77571 (Use matches! for core::char methods)\n - #77582 (Move `EarlyOtherwiseBranch` to mir-opt-level 2)\n - #77590 (Update RLS and Rustfmt)\n - #77605 (Fix rustc_def_path to show the full path and not the trimmed one)\n - #77614 (Let backends access span information)\n - #77624 (Add c as a shorthand check alternative for new options #77603)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "e7f778f98203997578788c8a851fc12e91fd99e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7f778f98203997578788c8a851fc12e91fd99e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59dafb876e125c49fca93820c5ef22da3fcb8644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59dafb876e125c49fca93820c5ef22da3fcb8644", "html_url": "https://github.com/rust-lang/rust/commit/59dafb876e125c49fca93820c5ef22da3fcb8644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59dafb876e125c49fca93820c5ef22da3fcb8644/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "html_url": "https://github.com/rust-lang/rust/commit/98edd1fbf8a68977a2a7c1312eb1ebff80515a92"}, {"sha": "f600154be6600d6749dd38b9b7f5caeb3e98ad1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f600154be6600d6749dd38b9b7f5caeb3e98ad1c", "html_url": "https://github.com/rust-lang/rust/commit/f600154be6600d6749dd38b9b7f5caeb3e98ad1c"}], "stats": {"total": 661, "additions": 405, "deletions": 256}, "files": [{"sha": "6fa6d97ab5431b1a89bee3737839cd3feb7af546", "filename": "Cargo.lock", "status": "modified", "additions": 53, "deletions": 55, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -442,9 +442,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3a7f257e3bcdc56d8877ae31c012bd69fba0be66929d588e603905f2632c0c59\"\n+checksum = \"ca40c97e20f43e4aac2282d342103d45fafad74ad9bfcbaaf0b5d386f9ce1f39\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -454,9 +454,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c43fcc7edf4d51b42f44ed50e2337bd90ddc8e088d0cd78a71db92a6f780f782\"\n+checksum = \"88e3d545394fbc4f7d8fe203c6a78d2b73f82bb119f21af98de1f924c2518e34\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -467,19 +467,19 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"03a4050029ecb2b5a1ff3bfc64c39279179b294821ec2e8891a4a5c6e3a08db0\"\n+checksum = \"8c4183955e084fcc387b515f867ed0e17e9e7301f5eee29c0338d5e63315bb41\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.29.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"828c1f80d4eaf681027cce02050c54a3c97370f81988d31bf2a56df54048746c\"\n+checksum = \"50e8407bba06d9e760011a28060e8f3b3f87b82ea53fb8bfaa43614c19c14dcc\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -2626,9 +2626,9 @@ dependencies = [\n \n [[package]]\n name = \"racer\"\n-version = \"2.1.38\"\n+version = \"2.1.39\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"51dd5fd4247115b28f3e038eb8cda76a0c6f9cb473f769f41f930af8adff22d0\"\n+checksum = \"b9424b4650b9c1134d0a1b34dab82319691e1c95fa8af1658fc640deb1b6823c\"\n dependencies = [\n  \"bitflags\",\n  \"clap\",\n@@ -2954,19 +2954,19 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_arena\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2958af0d6e0458434a25cd3a96f6e19f24f71bf50b900add520dec52e212866b\"\n+checksum = \"e8e941a8fc3878a111d2bbfe78e39522d884136f0b412b12592195f26f653476\"\n dependencies = [\n  \"rustc-ap-rustc_data_structures\",\n  \"smallvec 1.4.2\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_ast\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0c82c2510460f2133548e62399e5acd30c25ae6ece30245baab3d1e00c2fefac\"\n+checksum = \"3b58b6b035710df7f339a2bf86f6dafa876efd95439540970e24609e33598ca6\"\n dependencies = [\n  \"bitflags\",\n  \"rustc-ap-rustc_data_structures\",\n@@ -2981,11 +2981,11 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_ast_passes\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"83977da57f81c6edd89bad47e49136680eaa33288de4abb702e95358c2a0fc6c\"\n+checksum = \"3d379a900d6a1f098490d92ab83e87487dcee2e4ec3f04c3ac4512b5117b64e2\"\n dependencies = [\n- \"itertools 0.8.2\",\n+ \"itertools 0.9.0\",\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_ast_pretty\",\n  \"rustc-ap-rustc_attr\",\n@@ -3000,9 +3000,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_ast_pretty\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"becf4ca1638b214694c71a8752192683048ab8bd47947cc481f57bd48157eeb9\"\n+checksum = \"658d925c0da9e3c5cddc5e54f4fa8c03b41aff1fc6dc5e41837c1118ad010ac0\"\n dependencies = [\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_span\",\n@@ -3012,9 +3012,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_attr\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0f21ca5dadce8a40d75a2756b77eab75b4c2d827f645c622dd93ee2285599640\"\n+checksum = \"3f387037534f34c148aed753622677500e42d190a095670e7ac3fffc09811a59\"\n dependencies = [\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_ast_pretty\",\n@@ -3031,20 +3031,19 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a4cd204764727fde9abf75333eb661f058bfc7242062d91019440fe1b240688b\"\n+checksum = \"14ffd17a37e00d77926a0713f191c59ff3aeb2b551a024c7cfffce14bab79be8\"\n dependencies = [\n  \"bitflags\",\n  \"cfg-if\",\n  \"crossbeam-utils 0.7.2\",\n  \"ena\",\n  \"indexmap\",\n  \"jobserver\",\n- \"lazy_static\",\n  \"libc\",\n  \"measureme\",\n- \"parking_lot 0.10.2\",\n+ \"parking_lot 0.11.0\",\n  \"rustc-ap-rustc_graphviz\",\n  \"rustc-ap-rustc_index\",\n  \"rustc-ap-rustc_macros\",\n@@ -3062,9 +3061,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58116f119e37f14c029f99077b347069621118e048a69df74695b98204e7c136\"\n+checksum = \"2b3263ddcfa9eb911e54a4e8088878dd9fd10e00d8b99b01033ba4a2733fe91d\"\n dependencies = [\n  \"annotate-snippets 0.8.0\",\n  \"atty\",\n@@ -3081,9 +3080,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_expand\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"48e3c4bda9b64b92805bebe7431fdb8e24fd112b35a8c6d2174827441f10a6b2\"\n+checksum = \"e1ab7e68cede8a2273fd8b8623002ce9dc832e061dfc3330e9bcc1fc2a722d73\"\n dependencies = [\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_ast_passes\",\n@@ -3104,32 +3103,31 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_feature\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4b612bb67d3fc49f395b03fc4ea4384a0145b05afbadab725803074ec827632b\"\n+checksum = \"eea2dc95421bc19bbd4d939399833a882c46b684283b4267ad1fcf982fc043d9\"\n dependencies = [\n- \"lazy_static\",\n  \"rustc-ap-rustc_data_structures\",\n  \"rustc-ap-rustc_span\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_fs_util\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7630ad1a73a8434ee920676148cb5440ac57509bd20e94ec41087fb0b1d11c28\"\n+checksum = \"1e44c1804f09635f83f6cf1e04c2e92f8aeb7b4e850ac6c53d373dab02c13053\"\n \n [[package]]\n name = \"rustc-ap-rustc_graphviz\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a603fca4817062eb4fb23ff129d475bd66a69fb32f34ed4362ae950cf814b49d\"\n+checksum = \"dc491f2b9be6e928f6df6b287549b8d50c48e8eff8638345155f40fa2cfb785d\"\n \n [[package]]\n name = \"rustc-ap-rustc_index\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9850c4a5d7c341513e10802bca9588bf8f452ceea2d5cfa87b934246a52622bc\"\n+checksum = \"fa73f3fed413cdb6290738a10267da17b9ae8e02087334778b9a8c9491c5efc0\"\n dependencies = [\n  \"arrayvec\",\n  \"rustc-ap-rustc_macros\",\n@@ -3138,18 +3136,18 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d86722e5a1a615b198327d0d794cd9cbc8b9db4542276fc51fe078924de68ea\"\n+checksum = \"e993881244a92f3b44cf43c8f22ae2ca5cefe4f55a34e2b65b72ee66fe5ad077\"\n dependencies = [\n  \"unicode-xid\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b3fc8482e44cabdda7ac9a8e224aef62ebdf95274d629dac8db3b42321025fea\"\n+checksum = \"4effe366556e1d75344764adf4d54cba7c2fad33dbd07588e96d0853831ddc7c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -3159,9 +3157,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_parse\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3716cdcd978a91dbd4a2788400e90e809527f841426fbeb92f882f9b8582f3ab\"\n+checksum = \"0342675835251571471d3dca9ea1576a853a8dfa1f4b0084db283c861223cb60\"\n dependencies = [\n  \"bitflags\",\n  \"rustc-ap-rustc_ast\",\n@@ -3179,19 +3177,19 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_serialize\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c68046d07988b349b2e1c8bc1c9664a1d06519354aa677b9df358c5c5c058da0\"\n+checksum = \"438255ed968d73bf6573aa18d3b8d33c0a85ecdfd14160ef09ff813938e0606c\"\n dependencies = [\n  \"indexmap\",\n  \"smallvec 1.4.2\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_session\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"85735553501a4de0c8904e37b7ccef79cc1c585a7d7f2cfa02cc38e0d149f982\"\n+checksum = \"7d61ff76dede8eb827f6805754900d1097a7046f938f950231b62b448f55bf78\"\n dependencies = [\n  \"bitflags\",\n  \"getopts\",\n@@ -3210,9 +3208,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_span\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1c49ae8a0d3b9e27c6ffe8febeaa30f899294fff012de70625f9ee81c54fda85\"\n+checksum = \"1c267f15c3cfc82a8a441d2bf86bcccf299d1eb625822468e3d8ee6f7c5a1c89\"\n dependencies = [\n  \"cfg-if\",\n  \"md-5\",\n@@ -3229,9 +3227,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"677.0.0\"\n+version = \"679.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1765f447594740c501c7b666b87639aa7c1dae2bf8c3166d5d2dca16646fd034\"\n+checksum = \"8b1b4b266c4d44aac0f7f83b6741d8f0545b03d1ce32f3b5254f2014225cb96c\"\n dependencies = [\n  \"bitflags\",\n  \"rustc-ap-rustc_data_structures\",\n@@ -4248,7 +4246,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.4.21\"\n+version = \"1.4.22\"\n dependencies = [\n  \"annotate-snippets 0.6.1\",\n  \"anyhow\",\n@@ -5121,9 +5119,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-serde\"\n-version = \"0.1.1\"\n+version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b6ccba2f8f16e0ed268fc765d9b7ff22e965e7185d32f8f1ec8294fe17d86e79\"\n+checksum = \"fb65ea441fbb84f9f6748fd496cf7f63ec9af5bca94dd86456978d055e8eb28b\"\n dependencies = [\n  \"serde\",\n  \"tracing-core\","}, {"sha": "f496f3283da7828291a1c65ce95bd06f5f2759c6", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_span::sym;\n+use rustc_span::{sym, Span};\n use rustc_target::abi::{self, Align, Size};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n@@ -139,6 +139,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMGetInsertBlock(self.llbuilder) }\n     }\n \n+    fn set_span(&self, _span: Span) {}\n+\n     fn position_at_end(&mut self, llbb: &'ll BasicBlock) {\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(self.llbuilder, llbb);"}, {"sha": "26a646b029367c7d39efb96c95d61d8a031fb86b", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -55,6 +55,7 @@ impl<D> DebugScope<D> {\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn set_debug_loc(&self, bx: &mut Bx, source_info: mir::SourceInfo) {\n         let (scope, span) = self.debug_loc(source_info);\n+        bx.set_span(span);\n         if let Some(scope) = scope {\n             bx.set_source_location(scope, span);\n         }"}, {"sha": "0b8289a8dd92c7e7ff46e69a36240d5329cefce9", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -15,6 +15,7 @@ use crate::MemFlags;\n \n use rustc_middle::ty::layout::{HasParamEnv, TyAndLayout};\n use rustc_middle::ty::Ty;\n+use rustc_span::Span;\n use rustc_target::abi::{Abi, Align, Scalar, Size};\n use rustc_target::spec::HasTargetSpec;\n \n@@ -44,6 +45,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn build_sibling_block(&self, name: &str) -> Self;\n     fn cx(&self) -> &Self::CodegenCx;\n     fn llbb(&self) -> Self::BasicBlock;\n+    fn set_span(&self, span: Span);\n \n     fn position_at_end(&mut self, llbb: Self::BasicBlock);\n     fn ret_void(&mut self);"}, {"sha": "f9a450305d0c504a06302141f890f861ea7b05f9", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -26,7 +26,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.29.0\"\n+chalk-ir = \"0.31.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "237a5c7864b1f9a89631662a8b26a4b0d09606c6", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -26,7 +26,7 @@ pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 1 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n             return;\n         }\n         trace!(\"running EarlyOtherwiseBranch on {:?}\", body.source);"}, {"sha": "bec1eb790478c10d6ed1f51c446dcc523078064e", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -45,15 +45,20 @@ impl<'tcx> MirPass<'tcx> for Inline {\n                 // based function.\n                 debug!(\"function inlining is disabled when compiling with `instrument_coverage`\");\n             } else {\n-                Inliner { tcx, codegen_fn_attrs: tcx.codegen_fn_attrs(body.source.def_id()) }\n-                    .run_pass(body);\n+                Inliner {\n+                    tcx,\n+                    param_env: tcx.param_env_reveal_all_normalized(body.source.def_id()),\n+                    codegen_fn_attrs: tcx.codegen_fn_attrs(body.source.def_id()),\n+                }\n+                .run_pass(body);\n             }\n         }\n     }\n }\n \n struct Inliner<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     codegen_fn_attrs: &'tcx CodegenFnAttrs,\n }\n \n@@ -75,17 +80,13 @@ impl Inliner<'tcx> {\n \n         let def_id = caller_body.source.def_id();\n \n-        let param_env = self.tcx.param_env_reveal_all_normalized(def_id);\n-\n         // Only do inlining into fn bodies.\n         let self_hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n         if self.tcx.hir().body_owner_kind(self_hir_id).is_fn_or_closure()\n             && caller_body.source.promoted.is_none()\n         {\n             for (bb, bb_data) in caller_body.basic_blocks().iter_enumerated() {\n-                if let Some(callsite) =\n-                    self.get_valid_function_call(bb, bb_data, caller_body, param_env)\n-                {\n+                if let Some(callsite) = self.get_valid_function_call(bb, bb_data, caller_body) {\n                     callsites.push_back(callsite);\n                 }\n             }\n@@ -131,7 +132,7 @@ impl Inliner<'tcx> {\n                 let callee_body = if self.consider_optimizing(callsite, callee_body) {\n                     self.tcx.subst_and_normalize_erasing_regions(\n                         &callsite.substs,\n-                        param_env,\n+                        self.param_env,\n                         callee_body,\n                     )\n                 } else {\n@@ -159,7 +160,7 @@ impl Inliner<'tcx> {\n                 // Add callsites from inlined function\n                 for (bb, bb_data) in caller_body.basic_blocks().iter_enumerated().skip(start) {\n                     if let Some(new_callsite) =\n-                        self.get_valid_function_call(bb, bb_data, caller_body, param_env)\n+                        self.get_valid_function_call(bb, bb_data, caller_body)\n                     {\n                         // Don't inline the same function multiple times.\n                         if callsite.callee != new_callsite.callee {\n@@ -190,7 +191,6 @@ impl Inliner<'tcx> {\n         bb: BasicBlock,\n         bb_data: &BasicBlockData<'tcx>,\n         caller_body: &Body<'tcx>,\n-        param_env: ParamEnv<'tcx>,\n     ) -> Option<CallSite<'tcx>> {\n         // Don't inline calls that are in cleanup blocks.\n         if bb_data.is_cleanup {\n@@ -201,8 +201,9 @@ impl Inliner<'tcx> {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func: ref op, .. } = terminator.kind {\n             if let ty::FnDef(callee_def_id, substs) = *op.ty(caller_body, self.tcx).kind() {\n-                let instance =\n-                    Instance::resolve(self.tcx, param_env, callee_def_id, substs).ok().flatten()?;\n+                let instance = Instance::resolve(self.tcx, self.param_env, callee_def_id, substs)\n+                    .ok()\n+                    .flatten()?;\n \n                 if let InstanceDef::Virtual(..) = instance.def {\n                     return None;\n@@ -300,9 +301,6 @@ impl Inliner<'tcx> {\n         debug!(\"    final inline threshold = {}\", threshold);\n \n         // FIXME: Give a bonus to functions with only a single caller\n-\n-        let param_env = tcx.param_env(callee_body.source.def_id());\n-\n         let mut first_block = true;\n         let mut cost = 0;\n \n@@ -335,7 +333,7 @@ impl Inliner<'tcx> {\n                     // If the place doesn't actually need dropping, treat it like\n                     // a regular goto.\n                     let ty = place.ty(callee_body, tcx).subst(tcx, callsite.substs).ty;\n-                    if ty.needs_drop(tcx, param_env) {\n+                    if ty.needs_drop(tcx, self.param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {\n                             cost += LANDINGPAD_PENALTY;\n@@ -400,7 +398,7 @@ impl Inliner<'tcx> {\n             let ty = v.ty.subst(tcx, callsite.substs);\n             // Cost of the var is the size in machine-words, if we know\n             // it.\n-            if let Some(size) = type_size_of(tcx, param_env, ty) {\n+            if let Some(size) = type_size_of(tcx, self.param_env, ty) {\n                 cost += (size / ptr_size) as usize;\n             } else {\n                 cost += UNKNOWN_SIZE_COST;"}, {"sha": "b24ede9c53aed1d431ff44aeb8bd68d77c912afd", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -159,6 +159,7 @@ impl DefId {\n         DefId { krate: LOCAL_CRATE, index }\n     }\n \n+    /// Returns whether the item is defined in the crate currently being compiled.\n     #[inline]\n     pub fn is_local(self) -> bool {\n         self.krate == LOCAL_CRATE"}, {"sha": "d2c9b05c5607fbf43123db914a8b33cbba2237c9", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -5,6 +5,7 @@\n //! paths etc in all kinds of annoying scenarios.\n \n use rustc_hir as hir;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{Instance, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n@@ -44,7 +45,7 @@ impl SymbolNamesTest<'tcx> {\n                     tcx.sess.span_err(attr.span, &format!(\"demangling-alt({:#})\", demangling));\n                 }\n             } else if tcx.sess.check_name(attr, DEF_PATH) {\n-                let path = tcx.def_path_str(def_id.to_def_id());\n+                let path = with_no_trimmed_paths(|| tcx.def_path_str(def_id.to_def_id()));\n                 tcx.sess.span_err(attr.span, &format!(\"def-path({})\", path));\n             }\n "}, {"sha": "b176b150cd39ef4287db529c61f12305a3aabab7", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -12,9 +12,9 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.29.0\"\n-chalk-solve = \"0.29.0\"\n-chalk-engine = \"0.29.0\"\n+chalk-ir = \"0.31.0\"\n+chalk-solve = \"0.31.0\"\n+chalk-engine = \"0.31.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "3368c5b769902777789ce31d14f2dcbc29302414", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -22,7 +22,6 @@ use rustc_ast::ast;\n \n pub struct RustIrDatabase<'tcx> {\n     pub(crate) interner: RustInterner<'tcx>,\n-    pub(crate) restatic_placeholder: ty::Region<'tcx>,\n     pub(crate) reempty_placeholder: ty::Region<'tcx>,\n }\n \n@@ -39,11 +38,8 @@ impl<'tcx> RustIrDatabase<'tcx> {\n         bound_vars: SubstsRef<'tcx>,\n     ) -> Vec<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n         let predicates = self.interner.tcx.predicates_of(def_id).predicates;\n-        let mut regions_substitutor = lowering::RegionsSubstitutor::new(\n-            self.interner.tcx,\n-            self.restatic_placeholder,\n-            self.reempty_placeholder,\n-        );\n+        let mut regions_substitutor =\n+            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n         predicates\n             .iter()\n             .map(|(wc, _)| wc.subst(self.interner.tcx, bound_vars))\n@@ -274,11 +270,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n         let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n-        let mut regions_substitutor = lowering::RegionsSubstitutor::new(\n-            self.interner.tcx,\n-            self.restatic_placeholder,\n-            self.reempty_placeholder,\n-        );\n+        let mut regions_substitutor =\n+            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n         let trait_ref = trait_ref.fold_with(&mut regions_substitutor);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n@@ -316,11 +309,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n             let self_ty = trait_ref.self_ty();\n             let self_ty = self_ty.subst(self.interner.tcx, bound_vars);\n-            let mut regions_substitutor = lowering::RegionsSubstitutor::new(\n-                self.interner.tcx,\n-                self.restatic_placeholder,\n-                self.reempty_placeholder,\n-            );\n+            let mut regions_substitutor =\n+                lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n             let self_ty = self_ty.fold_with(&mut regions_substitutor);\n             let lowered_ty = self_ty.lower_into(&self.interner);\n \n@@ -590,6 +580,20 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let substitution = &substs.as_slice(&self.interner)[0..substs.len(&self.interner) - 3];\n         chalk_ir::Substitution::from_iter(&self.interner, substitution)\n     }\n+\n+    fn generator_datum(\n+        &self,\n+        _generator_id: chalk_ir::GeneratorId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::GeneratorDatum<RustInterner<'tcx>>> {\n+        unimplemented!()\n+    }\n+\n+    fn generator_witness_datum(\n+        &self,\n+        _generator_id: chalk_ir::GeneratorId<RustInterner<'tcx>>,\n+    ) -> Arc<chalk_solve::rust_ir::GeneratorWitnessDatum<RustInterner<'tcx>>> {\n+        unimplemented!()\n+    }\n }\n \n /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked"}, {"sha": "391251b6fa554e9d781342e870e5b0533f79f56e", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -427,13 +427,20 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                         chalk_ir::FloatTy::F64 => ty::Float(ast::FloatTy::F64),\n                     },\n                 },\n-                chalk_ir::TypeName::Array => unimplemented!(),\n+                chalk_ir::TypeName::Array => {\n+                    let substs = application_ty.substitution.as_slice(interner);\n+                    let ty = substs[0].assert_ty_ref(interner).lower_into(interner);\n+                    let c = substs[1].assert_const_ref(interner).lower_into(interner);\n+                    ty::Array(ty, interner.tcx.mk_const(c))\n+                }\n                 chalk_ir::TypeName::FnDef(id) => {\n                     ty::FnDef(id.0, application_ty.substitution.lower_into(interner))\n                 }\n                 chalk_ir::TypeName::Closure(closure) => {\n                     ty::Closure(closure.0, application_ty.substitution.lower_into(interner))\n                 }\n+                chalk_ir::TypeName::Generator(_) => unimplemented!(),\n+                chalk_ir::TypeName::GeneratorWitness(_) => unimplemented!(),\n                 chalk_ir::TypeName::Never => ty::Never,\n                 chalk_ir::TypeName::Tuple(_size) => {\n                     ty::Tuple(application_ty.substitution.lower_into(interner))\n@@ -483,7 +490,15 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 universe: ty::UniverseIndex::from_usize(placeholder.ui.counter),\n                 name: ty::BoundVar::from_usize(placeholder.idx),\n             }),\n-            TyData::Alias(_alias_ty) => unimplemented!(),\n+            chalk_ir::TyData::Alias(alias_ty) => match alias_ty {\n+                chalk_ir::AliasTy::Projection(projection) => ty::Projection(ty::ProjectionTy {\n+                    item_def_id: projection.associated_ty_id.0,\n+                    substs: projection.substitution.lower_into(interner),\n+                }),\n+                chalk_ir::AliasTy::Opaque(opaque) => {\n+                    ty::Opaque(opaque.opaque_ty_id.0, opaque.substitution.lower_into(interner))\n+                }\n+            },\n             TyData::Function(_quantified_ty) => unimplemented!(),\n             TyData::BoundVar(_bound) => ty::Bound(\n                 ty::DebruijnIndex::from_usize(_bound.debruijn.depth() as usize),\n@@ -519,8 +534,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n                 ty::BrEnv => unimplemented!(),\n             },\n             ReFree(_) => unimplemented!(),\n-            // FIXME(chalk): need to handle ReStatic\n-            ReStatic => unimplemented!(),\n+            ReStatic => chalk_ir::LifetimeData::Static.intern(interner),\n             ReVar(_) => unimplemented!(),\n             RePlaceholder(placeholder_region) => {\n                 chalk_ir::LifetimeData::Placeholder(chalk_ir::PlaceholderIndex {\n@@ -550,6 +564,7 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                     name: ty::BoundRegion::BrAnon(p.idx as u32),\n                 })\n             }\n+            chalk_ir::LifetimeData::Static => ty::RegionKind::ReStatic,\n             chalk_ir::LifetimeData::Phantom(_, _) => unimplemented!(),\n         };\n         interner.tcx.mk_region(kind)\n@@ -701,7 +716,16 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n                     }),\n                 )\n             }\n-            ty::ExistentialPredicate::Projection(_predicate) => unimplemented!(),\n+            ty::ExistentialPredicate::Projection(predicate) => chalk_ir::Binders::new(\n+                chalk_ir::VariableKinds::empty(interner),\n+                chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq {\n+                    alias: chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n+                        associated_ty_id: chalk_ir::AssocTypeId(predicate.item_def_id),\n+                        substitution: predicate.substs.lower_into(interner),\n+                    }),\n+                    ty: predicate.ty.lower_into(interner),\n+                }),\n+            ),\n             ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n                 chalk_ir::VariableKinds::empty(interner),\n                 chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n@@ -1116,17 +1140,12 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n /// Used to substitute specific `Regions`s with placeholders.\n crate struct RegionsSubstitutor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    restatic_placeholder: ty::Region<'tcx>,\n     reempty_placeholder: ty::Region<'tcx>,\n }\n \n impl<'tcx> RegionsSubstitutor<'tcx> {\n-    crate fn new(\n-        tcx: TyCtxt<'tcx>,\n-        restatic_placeholder: ty::Region<'tcx>,\n-        reempty_placeholder: ty::Region<'tcx>,\n-    ) -> Self {\n-        RegionsSubstitutor { tcx, restatic_placeholder, reempty_placeholder }\n+    crate fn new(tcx: TyCtxt<'tcx>, reempty_placeholder: ty::Region<'tcx>) -> Self {\n+        RegionsSubstitutor { tcx, reempty_placeholder }\n     }\n }\n \n@@ -1137,7 +1156,6 @@ impl<'tcx> TypeFolder<'tcx> for RegionsSubstitutor<'tcx> {\n \n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n         match r {\n-            ty::ReStatic => self.restatic_placeholder,\n             ty::ReEmpty(ui) => {\n                 assert_eq!(ui.as_usize(), 0);\n                 self.reempty_placeholder"}, {"sha": "f174a92274ed622849146650defef8ae10ba9a61", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -42,10 +42,6 @@ crate fn evaluate_goal<'tcx>(\n     let mut placeholders_collector = PlaceholdersCollector::new();\n     obligation.visit_with(&mut placeholders_collector);\n \n-    let restatic_placeholder = tcx.mk_region(ty::RegionKind::RePlaceholder(ty::Placeholder {\n-        universe: ty::UniverseIndex::ROOT,\n-        name: ty::BoundRegion::BrAnon(placeholders_collector.next_anon_region_placeholder),\n-    }));\n     let reempty_placeholder = tcx.mk_region(ty::RegionKind::RePlaceholder(ty::Placeholder {\n         universe: ty::UniverseIndex::ROOT,\n         name: ty::BoundRegion::BrAnon(placeholders_collector.next_anon_region_placeholder + 1),\n@@ -57,8 +53,7 @@ crate fn evaluate_goal<'tcx>(\n     // FIXME(chalk): we really should be substituting these back in the solution\n     let _params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n \n-    let mut regions_substitutor =\n-        RegionsSubstitutor::new(tcx, restatic_placeholder, reempty_placeholder);\n+    let mut regions_substitutor = RegionsSubstitutor::new(tcx, reempty_placeholder);\n     let obligation = obligation.fold_with(&mut regions_substitutor);\n \n     let max_universe = obligation.max_universe.index();\n@@ -101,7 +96,7 @@ crate fn evaluate_goal<'tcx>(\n \n     use chalk_solve::Solver;\n     let mut solver = chalk_engine::solve::SLGSolver::new(32, None);\n-    let db = ChalkRustIrDatabase { interner, restatic_placeholder, reempty_placeholder };\n+    let db = ChalkRustIrDatabase { interner, reempty_placeholder };\n     let solution = chalk_solve::logging::with_tracing_logs(|| solver.solve(&db, &lowered_goal));\n \n     // Ideally, the code to convert *back* to rustc types would live close to"}, {"sha": "ff9b1553bf2fc0014b0594e8460ec99817257895", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -14,6 +14,7 @@ use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::iter::{repeat_with, FromIterator, FusedIterator};\n+use core::marker::PhantomData;\n use core::mem::{self, replace, ManuallyDrop};\n use core::ops::{Index, IndexMut, Range, RangeBounds, Try};\n use core::ptr::{self, NonNull};\n@@ -982,7 +983,14 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n-        IterMut { tail: self.tail, head: self.head, ring: unsafe { self.buffer_as_mut_slice() } }\n+        // SAFETY: The internal `IterMut` safety invariant is established because the\n+        // `ring` we create is a dereferencable slice for lifetime '_.\n+        IterMut {\n+            tail: self.tail,\n+            head: self.head,\n+            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n+            phantom: PhantomData,\n+        }\n     }\n \n     /// Returns a pair of slices which contain, in order, the contents of the\n@@ -1170,11 +1178,14 @@ impl<T> VecDeque<T> {\n         R: RangeBounds<usize>,\n     {\n         let (tail, head) = self.range_tail_head(range);\n+\n+        // SAFETY: The internal `IterMut` safety invariant is established because the\n+        // `ring` we create is a dereferencable slice for lifetime '_.\n         IterMut {\n             tail,\n             head,\n-            // The shared reference we have in &mut self is maintained in the '_ of IterMut.\n-            ring: unsafe { self.buffer_as_mut_slice() },\n+            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n+            phantom: PhantomData,\n         }\n     }\n \n@@ -2493,6 +2504,25 @@ impl<T> RingSlices for &mut [T] {\n     }\n }\n \n+impl<T> RingSlices for *mut [T] {\n+    fn slice(self, from: usize, to: usize) -> Self {\n+        assert!(from <= to && to < self.len());\n+        // Not using `get_unchecked_mut` to keep this a safe operation.\n+        let len = to - from;\n+        ptr::slice_from_raw_parts_mut(self.as_mut_ptr().wrapping_add(from), len)\n+    }\n+\n+    fn split_at(self, mid: usize) -> (Self, Self) {\n+        let len = self.len();\n+        let ptr = self.as_mut_ptr();\n+        assert!(mid <= len);\n+        (\n+            ptr::slice_from_raw_parts_mut(ptr, mid),\n+            ptr::slice_from_raw_parts_mut(ptr.wrapping_add(mid), len - mid),\n+        )\n+    }\n+}\n+\n /// Calculate the number of elements left to be read in the buffer\n #[inline]\n fn count(tail: usize, head: usize, size: usize) -> usize {\n@@ -2662,15 +2692,27 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// [`iter_mut`]: VecDeque::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n-    ring: &'a mut [T],\n+    // Internal safety invariant: the entire slice is dereferencable.\n+    ring: *mut [T],\n     tail: usize,\n     head: usize,\n+    phantom: PhantomData<&'a mut [T]>,\n }\n \n+// SAFETY: we do nothing thread-local and there is no interior mutability,\n+// so the usual structural `Send`/`Sync` apply.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<T: Send> Send for IterMut<'_, T> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<T: Sync> Sync for IterMut<'_, T> {}\n+\n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let (front, back) = RingSlices::ring_slices(&*self.ring, self.head, self.tail);\n+        let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n+        // The `IterMut` invariant also ensures everything is dereferencable.\n+        let (front, back) = unsafe { (&*front, &*back) };\n         f.debug_tuple(\"IterMut\").field(&front).field(&back).finish()\n     }\n }\n@@ -2689,7 +2731,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n \n         unsafe {\n             let elem = self.ring.get_unchecked_mut(tail);\n-            Some(&mut *(elem as *mut _))\n+            Some(&mut *elem)\n         }\n     }\n \n@@ -2704,6 +2746,9 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         F: FnMut(Acc, Self::Item) -> Acc,\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n+        // The `IterMut` invariant also ensures everything is dereferencable.\n+        let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = front.iter_mut().fold(accum, &mut f);\n         back.iter_mut().fold(accum, &mut f)\n     }\n@@ -2735,7 +2780,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n \n         unsafe {\n             let elem = self.ring.get_unchecked_mut(self.head);\n-            Some(&mut *(elem as *mut _))\n+            Some(&mut *elem)\n         }\n     }\n \n@@ -2744,6 +2789,9 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n         F: FnMut(Acc, Self::Item) -> Acc,\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n+        // The `IterMut` invariant also ensures everything is dereferencable.\n+        let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = back.iter_mut().rfold(accum, &mut f);\n         front.iter_mut().rfold(accum, &mut f)\n     }"}, {"sha": "1b847addcf8064c6990daaf31b21db27f3a80b58", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 10, "deletions": 40, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1229,10 +1229,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n-        match *self {\n-            'A'..='Z' | 'a'..='z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, 'A'..='Z' | 'a'..='z')\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n@@ -1265,10 +1262,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n-        match *self {\n-            'A'..='Z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, 'A'..='Z')\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n@@ -1301,10 +1295,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n-        match *self {\n-            'a'..='z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, 'a'..='z')\n     }\n \n     /// Checks if the value is an ASCII alphanumeric character:\n@@ -1340,10 +1331,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n-        match *self {\n-            '0'..='9' | 'A'..='Z' | 'a'..='z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '0'..='9' | 'A'..='Z' | 'a'..='z')\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n@@ -1376,10 +1364,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n-        match *self {\n-            '0'..='9' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '0'..='9')\n     }\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n@@ -1415,10 +1400,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n-        match *self {\n-            '0'..='9' | 'A'..='F' | 'a'..='f' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '0'..='9' | 'A'..='F' | 'a'..='f')\n     }\n \n     /// Checks if the value is an ASCII punctuation character:\n@@ -1455,10 +1437,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n-        match *self {\n-            '!'..='/' | ':'..='@' | '['..='`' | '{'..='~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '!'..='/' | ':'..='@' | '['..='`' | '{'..='~')\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n@@ -1491,10 +1470,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n-        match *self {\n-            '!'..='~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '!'..='~')\n     }\n \n     /// Checks if the value is an ASCII whitespace character:\n@@ -1544,10 +1520,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n-        match *self {\n-            '\\t' | '\\n' | '\\x0C' | '\\r' | ' ' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '\\t' | '\\n' | '\\x0C' | '\\r' | ' ')\n     }\n \n     /// Checks if the value is an ASCII control character:\n@@ -1582,10 +1555,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n-        match *self {\n-            '\\0'..='\\x1F' | '\\x7F' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '\\0'..='\\x1F' | '\\x7F')\n     }\n }\n "}, {"sha": "319a0b4e611ebfedbcdbd8850954f280c6ab852f", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -12,6 +12,7 @@ use getopts::Options;\n \n use crate::builder::Builder;\n use crate::config::{Config, TargetSelection};\n+use crate::setup::Profile;\n use crate::{Build, DocTests};\n \n /// Deserialized version of all flags for this compile.\n@@ -94,7 +95,7 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Setup {\n-        path: String,\n+        profile: Profile,\n     },\n }\n \n@@ -253,7 +254,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                         `/<build_base>/rustfix_missing_coverage.txt`\",\n                 );\n             }\n-            \"check\" => {\n+            \"check\" | \"c\" => {\n                 opts.optflag(\"\", \"all-targets\", \"Check all targets\");\n             }\n             \"bench\" => {\n@@ -533,18 +534,26 @@ Arguments:\n                 Subcommand::Run { paths }\n             }\n             \"setup\" => {\n-                let path = if paths.len() > 1 {\n+                let profile = if paths.len() > 1 {\n                     println!(\"\\nat most one profile can be passed to setup\\n\");\n                     usage(1, &opts, verbose, &subcommand_help)\n                 } else if let Some(path) = paths.pop() {\n-                    t!(path.into_os_string().into_string().map_err(|path| format!(\n-                        \"{} is not a valid UTF8 string\",\n-                        path.to_string_lossy()\n-                    )))\n+                    let profile_string = t!(path.into_os_string().into_string().map_err(\n+                        |path| format!(\"{} is not a valid UTF8 string\", path.to_string_lossy())\n+                    ));\n+\n+                    profile_string.parse().unwrap_or_else(|err| {\n+                        eprintln!(\"error: {}\", err);\n+                        eprintln!(\"help: the available profiles are:\");\n+                        for choice in Profile::all() {\n+                            eprintln!(\"- {}\", choice);\n+                        }\n+                        std::process::exit(1);\n+                    })\n                 } else {\n                     t!(crate::setup::interactive_path())\n                 };\n-                Subcommand::Setup { path }\n+                Subcommand::Setup { profile }\n             }\n             _ => {\n                 usage(1, &opts, verbose, &subcommand_help);"}, {"sha": "147bcf30709f9ce8989f0fe71837ab60ac53ebd3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -471,8 +471,8 @@ impl Build {\n             return clean::clean(self, all);\n         }\n \n-        if let Subcommand::Setup { path: include_name } = &self.config.cmd {\n-            return setup::setup(&self.config.src, include_name);\n+        if let Subcommand::Setup { profile } = &self.config.cmd {\n+            return setup::setup(&self.config.src, *profile);\n         }\n \n         {"}, {"sha": "dcfb9fd673421f6b6ebe21fe4d1242e70f470095", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 63, "deletions": 29, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,11 +1,55 @@\n use crate::t;\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n use std::{\n-    env, fs,\n+    env, fmt, fs,\n     io::{self, Write},\n };\n \n-pub fn setup(src_path: &Path, include_name: &str) {\n+#[derive(Clone, Copy, Eq, PartialEq)]\n+pub enum Profile {\n+    Compiler,\n+    Codegen,\n+    Library,\n+    User,\n+}\n+\n+impl Profile {\n+    fn include_path(&self, src_path: &Path) -> PathBuf {\n+        PathBuf::from(format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), self))\n+    }\n+\n+    pub fn all() -> impl Iterator<Item = Self> {\n+        [Profile::Compiler, Profile::Codegen, Profile::Library, Profile::User].iter().copied()\n+    }\n+}\n+\n+impl FromStr for Profile {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"a\" | \"lib\" | \"library\" => Ok(Profile::Library),\n+            \"b\" | \"compiler\" => Ok(Profile::Compiler),\n+            \"c\" | \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n+            \"d\" | \"maintainer\" | \"user\" => Ok(Profile::User),\n+            _ => Err(format!(\"unknown profile: '{}'\", s)),\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Profile {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Profile::Compiler => write!(f, \"compiler\"),\n+            Profile::Codegen => write!(f, \"codegen\"),\n+            Profile::Library => write!(f, \"library\"),\n+            Profile::User => write!(f, \"user\"),\n+        }\n+    }\n+}\n+\n+pub fn setup(src_path: &Path, profile: Profile) {\n     let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n \n     if cfg_file.as_ref().map_or(false, |f| f.exists()) {\n@@ -14,15 +58,10 @@ pub fn setup(src_path: &Path, include_name: &str) {\n             \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n             file.display()\n         );\n+        println!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, file.display());\n         println!(\n-            \"help: try adding `profile = \\\"{}\\\"` at the top of {}\",\n-            include_name,\n-            file.display()\n-        );\n-        println!(\n-            \"note: this will use the configuration in {}/src/bootstrap/defaults/config.{}.toml\",\n-            src_path.display(),\n-            include_name\n+            \"note: this will use the configuration in {}\",\n+            profile.include_path(src_path).display()\n         );\n         std::process::exit(1);\n     }\n@@ -31,19 +70,17 @@ pub fn setup(src_path: &Path, include_name: &str) {\n     let settings = format!(\n         \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n     profile = \\\"{}\\\"\\n\",\n-        include_name\n+        profile\n     );\n     t!(fs::write(path, settings));\n \n-    let include_path =\n-        format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), include_name);\n-    println!(\"`x.py` will now use the configuration at {}\", include_path);\n+    let include_path = profile.include_path(src_path);\n+    println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n \n-    let suggestions = match include_name {\n-        \"codegen\" | \"compiler\" => &[\"check\", \"build\", \"test\"][..],\n-        \"library\" => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n-        \"user\" => &[\"dist\", \"build\"],\n-        _ => return,\n+    let suggestions = match profile {\n+        Profile::Codegen | Profile::Compiler => &[\"check\", \"build\", \"test\"][..],\n+        Profile::Library => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n+        Profile::User => &[\"dist\", \"build\"],\n     };\n \n     println!();\n@@ -57,15 +94,15 @@ pub fn setup(src_path: &Path, include_name: &str) {\n         println!(\"- `x.py {}`\", cmd);\n     }\n \n-    if include_name != \"user\" {\n+    if profile != Profile::User {\n         println!(\n             \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n         );\n     }\n }\n \n // Used to get the path for `Subcommand::Setup`\n-pub fn interactive_path() -> io::Result<String> {\n+pub fn interactive_path() -> io::Result<Profile> {\n     let mut input = String::new();\n     println!(\n         \"Welcome to the Rust project! What do you want to do with x.py?\n@@ -78,19 +115,16 @@ d) Install Rust from source\"\n         print!(\"Please choose one (a/b/c/d): \");\n         io::stdout().flush()?;\n         io::stdin().read_line(&mut input)?;\n-        break match input.trim().to_lowercase().as_str() {\n-            \"a\" | \"lib\" | \"library\" => \"library\",\n-            \"b\" | \"compiler\" => \"compiler\",\n-            \"c\" | \"llvm\" => \"llvm\",\n-            \"d\" | \"user\" | \"maintainer\" => \"maintainer\",\n-            _ => {\n-                println!(\"error: unrecognized option '{}'\", input.trim());\n+        break match input.trim().to_lowercase().parse() {\n+            Ok(profile) => profile,\n+            Err(err) => {\n+                println!(\"error: {}\", err);\n                 println!(\"note: press Ctrl+C to exit\");\n                 continue;\n             }\n         };\n     };\n-    Ok(template.to_owned())\n+    Ok(template)\n }\n \n // install a git hook to automatically run tidy --bless, if they want"}, {"sha": "7f64d20d8e7cd70d185cc248c5fae005a5638f1f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -290,10 +290,12 @@ pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n     }\n }\n \n+/// Builds all inherent implementations of an ADT (struct/union/enum) or Trait item/path/reexport.\n pub fn build_impls(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>) -> Vec<clean::Item> {\n     let tcx = cx.tcx;\n     let mut impls = Vec::new();\n \n+    // for each implementation of an item represented by `did`, build the clean::Item for that impl\n     for &did in tcx.inherent_impls(did).iter() {\n         build_impl(cx, did, attrs, &mut impls);\n     }\n@@ -320,6 +322,7 @@ fn merge_attrs(\n     merged_attrs.clean(cx)\n }\n \n+/// Builds a specific implementation of a type. The `did` could be a type method or trait method.\n pub fn build_impl(\n     cx: &DocContext<'_>,\n     did: DefId,"}, {"sha": "0c4907fd002943126756ce039cdc2623cdc19d78", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,6 @@\n // NOTE: rustc cannot currently handle bounds of the form `for<'a> <Foo as Bar<'a>>::Assoc: Baz`.\n // This should hopefully be fixed with Chalk.\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "1c493581bc953f9530ec9e2af40bde9b123363f7", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:5\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:5\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n@@ -11,7 +11,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:36\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:36\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n@@ -28,7 +28,7 @@ LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:26:93\n+  --> $DIR/bad-bounds-on-assoc-in-trait.rs:27:93\n    |\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely"}, {"sha": "a9aa2747e52af9b3bc0dece674e18e7ed1afeca2", "filename": "src/test/ui/associated-type-bounds/trait-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-params.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n "}, {"sha": "f1aab2a6da071696f7319932b23439bc1245a76f", "filename": "src/test/ui/associated-type-bounds/union-bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Funion-bounds.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]"}, {"sha": "220ee6af2fc9fed8a71e2347125492d384c9000a", "filename": "src/test/ui/associated-types/associated-types-stream.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-stream.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n+// ignore-compare-mode-chalk\n \n \n trait Stream {"}, {"sha": "a04144ba06b6577be3ce5b4be34c198abac95f63", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n trait Z<'a, T: ?Sized>\n where\n     T: Z<'a, u16>,"}, {"sha": "b48ff97f1211bde961a3049796e60c1f856c8936", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -15,7 +15,7 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n+  --> $DIR/hr-associated-type-bound-param-2.rs:16:14\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n@@ -31,7 +31,7 @@ LL |     type W = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this"}, {"sha": "fc3a85171e273eedcad878c6c8111cbd28641fd7", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n trait Cycle: Sized {\n     type Next: Cycle<Next = Self>;\n }"}, {"sha": "df25f7ac953e7c5a4cabcfb52100e507981f88d4", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -15,7 +15,7 @@ LL |     type U = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:26:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -31,7 +31,7 @@ LL |     type U = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n@@ -47,7 +47,7 @@ LL |     type U = str;\n              <&mut T as Clone>\n \n error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:32:14\n+  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this"}, {"sha": "13735ff2c5a1c57a2e1679f4432e26daec8520bf", "filename": "src/test/ui/deriving/deriving-associated-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-associated-types.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n pub trait DeclaredTrait {\n     type Type;\n }"}, {"sha": "ffe297a5a6a2fa151cdad712ac1c2bf949606af9", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n use std::fmt::Debug;\n \n type Foo = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable"}, {"sha": "b32cf94985497619f295bf3fd5a5f225831bde26", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:3:12\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:4:12\n    |\n LL | type Foo = impl Debug;\n    |            ^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | type Foo = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:11:16\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:12:16\n    |\n LL |     type Baa = impl Debug;\n    |                ^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type Baa = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: associated type defaults are unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:5\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:5\n    |\n LL |     type Assoc = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Assoc = impl Debug;\n    = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:18\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     type Assoc = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:24\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:24\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                        ^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:37\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:37\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:49\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:49\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:28:70\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:29:70\n    |\n LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n    |                                                                      ^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl D\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:21\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:21\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                     ^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:34\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:34\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                  ^^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:46\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:46\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -98,7 +98,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:39:67\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:40:67\n    |\n LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n    |                                                                   ^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debu\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:22:18\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n LL |     type Assoc = impl Debug;\n    |                  ^^^^^^^^^^"}, {"sha": "238f3fa31ed7206e7909db43e061adde7ef3ad69", "filename": "src/test/ui/impl-trait/example-calendar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexample-calendar.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n \n #![feature(fn_traits,\n            step_trait,"}, {"sha": "ee09a66ef537abc5e7af81b7a149089d9de6cff9", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,6 @@\n // edition:2018\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n \n #![feature(type_alias_impl_trait)]\n "}, {"sha": "f954ce9f090e6d5944f1322781ecb00a7fdf61b1", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:13:14\n+  --> $DIR/issue-55872-2.rs:14:14\n    |\n LL |     type E = impl std::marker::Copy;\n    |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:15:28\n+  --> $DIR/issue-55872-2.rs:16:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "b12bfbcda9dc353e5ffcd109acb3471c5bcb406a", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n pub trait Bar {"}, {"sha": "41d7beb22fa22553d296d576900e7ef7c6ac90c6", "filename": "src/test/ui/impl-trait/issue-55872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:13:28\n+  --> $DIR/issue-55872.rs:14:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "efa4e614be5b0e4f3e29eb4176b50461f3df8e86", "filename": "src/test/ui/issues/issue-23122-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,3 +1,5 @@\n+// ignore-compare-mode-chalk\n+\n trait Next {\n     type Next: Next;\n }"}, {"sha": "8613c1ef8c201e2982293d726029bb64e5fe9ea8", "filename": "src/test/ui/issues/issue-23122-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n-  --> $DIR/issue-23122-1.rs:8:5\n+  --> $DIR/issue-23122-1.rs:10:5\n    |\n LL |     type Next = <GetNext<T> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7866b931ec4b9d023e41fb3555d8ad86aef6a21c", "filename": "src/test/ui/issues/issue-23122-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,3 +1,4 @@\n+// ignore-compare-mode-chalk\n trait Next {\n     type Next: Next;\n }"}, {"sha": "ce3bffe602ca06721078a9f98297ac05d3e285d9", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:8:5\n+  --> $DIR/issue-23122-2.rs:9:5\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "184f5cb26c54633c1795eb1c69e215ff5ad773cd", "filename": "src/test/ui/issues/issue-28561.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// ignore-compare-mode-chalk\n #[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n struct Array<T> {\n     f00: [T; 00],"}, {"sha": "f6b56610ec7d93d18ae832d4f0cb62093a49e4a4", "filename": "src/test/ui/issues/issue-33187.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33187.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-compare-mode-chalk\n struct Foo<A: Repr>(<A as Repr>::Data);\n \n impl<A> Copy for Foo<A> where <A as Repr>::Data: Copy { }"}, {"sha": "e0c47197eaa034427219ccc538f435f3920500d8", "filename": "src/test/ui/issues/issue-37051.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// ignore-compare-mode-chalk\n \n #![feature(associated_type_defaults)]\n "}, {"sha": "4fcb41485d0e2bdbb6711125d0e55df719cf74c1", "filename": "src/test/ui/issues/issue-50301.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-50301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-50301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50301.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,6 @@\n // Tests that HRTBs are correctly accepted -- https://github.com/rust-lang/rust/issues/50301\n // check-pass\n+// ignore-compare-mode-chalk\n trait Trait\n where\n     for<'a> &'a Self::IntoIter: IntoIterator<Item = u32>,"}, {"sha": "61d4070d485e7df01ddeddc9e982e6db25f119b9", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here\n@@ -10,7 +10,7 @@ LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL | pub trait Graph<'a> {\n    |                 -- lifetime `'a` defined here"}, {"sha": "1086669ee7463cb0c4bb7009f6c5eb6f87e21209", "filename": "src/test/ui/issues/issue-55796.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,3 +1,5 @@\n+// ignore-compare-mode-chalk\n+\n pub trait EdgeTrait<N> {\n     fn target(&self) -> N;\n }"}, {"sha": "ffe3bb737ad6a2f8afc28e97e8f774e645c04467", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,47 +1,47 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 5:17...\n-  --> $DIR/issue-55796.rs:5:17\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 7:17...\n+  --> $DIR/issue-55796.rs:7:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:16:40: 16:54]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:16:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:18:40: 18:54]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the expression is assignable\n-  --> $DIR/issue-55796.rs:16:9\n+  --> $DIR/issue-55796.rs:18:9\n    |\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `Box<(dyn Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n               found `Box<dyn Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 5:17...\n-  --> $DIR/issue-55796.rs:5:17\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 7:17...\n+  --> $DIR/issue-55796.rs:7:17\n    |\n LL | pub trait Graph<'a> {\n    |                 ^^\n-note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:21:39: 21:53]>` will meet its required lifetime bounds\n-  --> $DIR/issue-55796.rs:21:9\n+note: ...so that the type `Map<<Self as Graph<'a>>::EdgesIter, [closure@$DIR/issue-55796.rs:23:39: 23:53]>` will meet its required lifetime bounds\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the expression is assignable\n-  --> $DIR/issue-55796.rs:21:9\n+  --> $DIR/issue-55796.rs:23:9\n    |\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "44ea9f12d38ff8012f8a752e5ce1b7ccd6fafec2", "filename": "src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74564-if-expr-stack-overflow.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,6 @@\n // build-pass\n // ignore-tidy-filelength\n+// ignore-compare-mode-chalk\n #![crate_type = \"rlib\"]\n \n fn banana(v: &str) -> u32 {"}, {"sha": "262402df2cc5ae4a05aa9b919aade9cd66ab6e78", "filename": "src/test/ui/mir/mir-inlining/ice-issue-77564.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77564.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -0,0 +1,38 @@\n+// run-pass\n+// compile-flags:-Zmir-opt-level=2\n+\n+use std::mem::MaybeUninit;\n+const N: usize = 2;\n+\n+trait CollectArray<A>: Iterator<Item = A> {\n+    fn inner_array(&mut self) -> [A; N];\n+    fn collect_array(&mut self) -> [A; N] {\n+        let result = self.inner_array();\n+        assert!(self.next().is_none());\n+        result\n+    }\n+}\n+\n+impl<A, I: ?Sized> CollectArray<A> for I\n+where\n+    I: Iterator<Item = A>,\n+{\n+    fn inner_array(&mut self) -> [A; N] {\n+        let mut result: [MaybeUninit<A>; N] = unsafe { MaybeUninit::uninit().assume_init() };\n+        for (dest, item) in result.iter_mut().zip(self) {\n+            *dest = MaybeUninit::new(item);\n+        }\n+        let temp_ptr: *const [MaybeUninit<A>; N] = &result;\n+        unsafe { std::ptr::read(temp_ptr as *const [A; N]) }\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(\n+        [[1, 2], [3, 4]]\n+            .iter()\n+            .map(|row| row.iter().collect_array())\n+            .collect_array(),\n+        [[&1, &2], [&3, &4]]\n+    );\n+}"}, {"sha": "d15e402460794c1e0b129a14074ebd9eeb483495", "filename": "src/test/ui/nll/ty-outlives/issue-53789-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fissue-53789-2.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,6 +1,7 @@\n // Regression test for #53789.\n //\n // check-pass\n+// ignore-compare-mode-chalk\n \n use std::collections::BTreeMap;\n use std::ops::Range;"}, {"sha": "6eb2aa980d1521b8b9029354d006e9b7b6d530bb", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,6 @@\n // Check that we check that default associated types satisfy the required\n // bounds on them.\n+// ignore-compare-mode-chalk\n \n #![feature(specialization)]\n //~^ WARNING `specialization` is incomplete"}, {"sha": "337972ea2b7936f2496c13d08dbba3017c3e4efc", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `specialization` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/deafult-associated-type-bound-1.rs:4:12\n+  --> $DIR/deafult-associated-type-bound-1.rs:5:12\n    |\n LL | #![feature(specialization)]\n    |            ^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/deafult-associated-type-bound-1.rs:18:5\n+  --> $DIR/deafult-associated-type-bound-1.rs:19:5\n    |\n LL |     type U: Clone;\n    |             ----- required by this bound in `X::U`"}, {"sha": "c866f9bd3b79100d8e0ed587136cac1b2aeb2d2a", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -64,7 +64,7 @@ error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::A\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as Bar>::method)\n+error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:71:13\n    |\n LL |             #[rustc_def_path]"}, {"sha": "1ada54cc102ed022fe0e9b6de98fdbaf0eefc4e9", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -69,8 +69,8 @@ fn main() {\n                 //[v0]~| ERROR demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n                 //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n-            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as Bar>::method)\n-               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as Bar>::method)\n+            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n+               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n             fn method(&self) {}\n         }\n     };"}, {"sha": "db5eda0db5074899c563d007470fcaf57f8422af", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -64,7 +64,7 @@ error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ..\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as Bar>::method)\n+error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:71:13\n    |\n LL |             #[rustc_def_path]"}, {"sha": "add9662938069b557ff861a803dabe6f8c2ed398", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n #![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;"}, {"sha": "79e2682da3ea8ee4dcfb6bf3915e70d526f9f071", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:20:42\n+  --> $DIR/issue-53598.rs:21:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^"}, {"sha": "c785ea2ee57d088fb5d96746caf56f250375b038", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// ignore-compare-mode-chalk\n #![feature(arbitrary_self_types)]\n #![feature(type_alias_impl_trait)]\n "}, {"sha": "dc6be87ee9365839e100409c245c4ffefa7067be", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:16:58\n+  --> $DIR/issue-57700.rs:17:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^"}, {"sha": "14d21418ae853db0e24a4cc27a6c3b945a455334", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,3 +1,5 @@\n+// ignore-compare-mode-chalk\n+\n trait Bug {\n     type Item: Bug;\n "}, {"sha": "d8e514a2cf45b6c3055e68ea9a535f53184482c8", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59dafb876e125c49fca93820c5ef22da3fcb8644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/issue-60371.rs:8:17\n+  --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:8:17\n+  --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n@@ -17,7 +17,7 @@ LL |     type Item = impl Bug;\n              <&() as Bug>\n \n error: could not find defining uses\n-  --> $DIR/issue-60371.rs:8:17\n+  --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^"}, {"sha": "9bfb47a79299d52f45304367762c9bfc96d9ed7c", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1 +1 @@\n-Subproject commit 4d5e9df12b6a75d7ab48a7de060a97265ce49cee\n+Subproject commit 9bfb47a79299d52f45304367762c9bfc96d9ed7c"}, {"sha": "97d0301011533e1c131c0edd660d77b4bd476c8b", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=59dafb876e125c49fca93820c5ef22da3fcb8644", "patch": "@@ -1 +1 @@\n-Subproject commit 01f2eadccc74cf70eb11e6300ffa7e02b18b0027\n+Subproject commit 97d0301011533e1c131c0edd660d77b4bd476c8b"}]}