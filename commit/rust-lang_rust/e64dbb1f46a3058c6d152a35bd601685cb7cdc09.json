{"sha": "e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NGRiYjFmNDZhMzA1OGM2ZDE1MmEzNWJkNjAxNjg1Y2I3Y2RjMDk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-05T11:03:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T11:03:37Z"}, "message": "Rollup merge of #82483 - tmiasko:option-from-str, r=matthewjasper\n\nUse FromStr trait for number option parsing\n\nReplace `parse_uint` with generic `parse_number` based on `FromStr`.\nUse it for parsing inlining threshold to avoid casting later.", "tree": {"sha": "2b914299377ab1ae561b43094ccaa40f6d69de8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b914299377ab1ae561b43094ccaa40f6d69de8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgau6KCRBK7hj4Ov3rIwAAdHIIADSk/ZkO+OxQEeBc4ZDP6Az9\nOEzJMyRUqPXxp52dR0vRR499Nvs27dYQvbLfQzkVdcpen1WSmoQKqjwlXUhfL0cl\nU1R7vn47RAI7FYnV0h4dHFcgYSASk+0Rs/a3n89hmQWv6Flk5i2WoptmwvIK+CeJ\nR3+EpbeoeLdjfZ/ZxqK6LGQXLqojM3lt98lbSrR90GNl52s0D6ExypbDmg1Cr0aP\nHrsPORV+SamI7lbk/Q4xnIgleimKDHesci9umR77RRXBKiOiMiLuWueXVnXZjtoU\n2zdnuhtCoj2MRALZCqBrX98SqbmfV+rmQQHTEUdpnOOSAVH3WL72x0+7vtE3ICk=\n=DneM\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b914299377ab1ae561b43094ccaa40f6d69de8d\nparent 54ea8e1b82a67202e64f8aac1ed57bc7b987e508\nparent 1ec905766d0c8b76ecef22d1948fe87a490da3fd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617620617 +0200\ncommitter GitHub <noreply@github.com> 1617620617 +0200\n\nRollup merge of #82483 - tmiasko:option-from-str, r=matthewjasper\n\nUse FromStr trait for number option parsing\n\nReplace `parse_uint` with generic `parse_number` based on `FromStr`.\nUse it for parsing inlining threshold to avoid casting later.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "html_url": "https://github.com/rust-lang/rust/commit/e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ea8e1b82a67202e64f8aac1ed57bc7b987e508", "url": "https://api.github.com/repos/rust-lang/rust/commits/54ea8e1b82a67202e64f8aac1ed57bc7b987e508", "html_url": "https://github.com/rust-lang/rust/commit/54ea8e1b82a67202e64f8aac1ed57bc7b987e508"}, {"sha": "1ec905766d0c8b76ecef22d1948fe87a490da3fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec905766d0c8b76ecef22d1948fe87a490da3fd", "html_url": "https://github.com/rust-lang/rust/commit/1ec905766d0c8b76ecef22d1948fe87a490da3fd"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "b628ae3ae3afccbc6afa3eda3e80e8a5438555c1", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "patch": "@@ -1047,7 +1047,7 @@ pub unsafe fn with_llvm_pmb(\n     // thresholds copied from clang.\n     match (opt_level, opt_size, inline_threshold) {\n         (.., Some(t)) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t as u32);\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t);\n         }\n         (llvm::CodeGenOptLevel::Aggressive, ..) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);"}, {"sha": "04d06864ee14fea4ad950454a08f26a71c709534", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "patch": "@@ -107,7 +107,7 @@ pub struct ModuleConfig {\n     pub vectorize_loop: bool,\n     pub vectorize_slp: bool,\n     pub merge_functions: bool,\n-    pub inline_threshold: Option<usize>,\n+    pub inline_threshold: Option<u32>,\n     pub new_llvm_pass_manager: bool,\n     pub emit_lifetime_markers: bool,\n }"}, {"sha": "ec04bf7d05418785c929923d3c0a1ac03cb5b237", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "patch": "@@ -2332,6 +2332,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(PathBuf);\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n+    impl_dep_tracking_hash_via_hash!(Option<u32>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<NonZeroUsize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);"}, {"sha": "a184608ed29bfb8d7fa2607addac75dba7dabac3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e64dbb1f46a3058c6d152a35bd601685cb7cdc09/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=e64dbb1f46a3058c6d152a35bd601685cb7cdc09", "patch": "@@ -251,9 +251,9 @@ macro_rules! options {\n         pub const parse_list: &str = \"a space-separated list of strings\";\n         pub const parse_opt_list: &str = parse_list;\n         pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n-        pub const parse_uint: &str = \"a number\";\n-        pub const parse_opt_uint: &str = parse_uint;\n-        pub const parse_threads: &str = parse_uint;\n+        pub const parse_number: &str = \"a number\";\n+        pub const parse_opt_number: &str = parse_number;\n+        pub const parse_threads: &str = parse_number;\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n@@ -417,16 +417,16 @@ macro_rules! options {\n             }\n         }\n \n-        /// Use this for any uint option that has a static default.\n-        fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n+        /// Use this for any numeric option that has a static default.\n+        fn parse_number<T: Copy + FromStr>(slot: &mut T, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n                 None => false\n             }\n         }\n \n-        /// Use this for any uint option that lacks a static default.\n-        fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+        /// Use this for any numeric option that lacks a static default.\n+        fn parse_opt_number<T: Copy + FromStr>(slot: &mut Option<T>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n                 None => false\n@@ -787,13 +787,13 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"this option is deprecated and does nothing\"),\n     code_model: Option<CodeModel> = (None, parse_code_model, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n-    codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    codegen_units: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n     control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [TRACKED],\n         \"use Windows Control Flow Guard (default: no)\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"explicitly enable the `cfg(debug_assertions)` directive\"),\n-    debuginfo: usize = (0, parse_uint, [TRACKED],\n+    debuginfo: usize = (0, parse_number, [TRACKED],\n         \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n         2 = full debug info with variable and type information; default: 0)\"),\n     default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n@@ -808,7 +808,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"force use of unwind tables\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n-    inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_threshold: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"set the threshold for inlining a function\"),\n     link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n@@ -996,9 +996,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n     inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable MIR inlining (default: no)\"),\n-    inline_mir_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_mir_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"a default MIR inlining threshold (default: 50)\"),\n-    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"inlining threshold for functions with inline hint (default: 100)\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether `#[inline]` functions are in all CGUs\"),\n@@ -1034,7 +1034,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n-    mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: yes for LLVM >= 12, otherwise no)\"),\n@@ -1155,7 +1155,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help (default: no)\"),\n-    terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    terminal_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"set the current terminal width\"),\n     tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),"}]}