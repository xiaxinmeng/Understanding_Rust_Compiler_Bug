{"sha": "7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOGFlNDQwM2UzZDEwY2E4MzA0YjRhMWJkOTBhYzdjYWRlNWQ3MTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:56:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T03:56:37Z"}, "message": "rustdoc: deny(deprecated_self)", "tree": {"sha": "9dfce6881dc7fa6c572036a0aef0a5327d41ca4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dfce6881dc7fa6c572036a0aef0a5327d41ca4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "html_url": "https://github.com/rust-lang/rust/commit/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366812a5c3b1933a9175c39af2567ce348b5281d", "url": "https://api.github.com/repos/rust-lang/rust/commits/366812a5c3b1933a9175c39af2567ce348b5281d", "html_url": "https://github.com/rust-lang/rust/commit/366812a5c3b1933a9175c39af2567ce348b5281d"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "2d3e84b319edc4766118c4bcdf13292a167e83f9", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "patch": "@@ -164,7 +164,7 @@ trait TheShunnedHouse {\n      * * unkempt_yard - A yard dating from a time when the region was partly\n      *                  open country\n      */\n-    fn dingy_house(unkempt_yard: int);\n+    fn dingy_house(&self, unkempt_yard: int);\n \n     /**\n      * The house was--and for that matter still is--of a kind to attract\n@@ -183,15 +183,15 @@ trait TheShunnedHouse {\n      * the removal of the bodies to the North Burial Ground made it\n      * decently possible to cut through the old family plots.\n      */\n-    fn construct() -> bool;\n+    fn construct(&self) -> bool;\n }\n \n /// Whatever\n impl OmNomNomy: TheShunnedHouse {\n-    fn dingy_house(_unkempt_yard: int) {\n+    fn dingy_house(&self, _unkempt_yard: int) {\n     }\n \n-    fn construct() -> bool {\n+    fn construct(&self) -> bool {\n         fail;\n     }\n }"}, {"sha": "e51c8106f3d415494e288cba9f6f190316ae67a8", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "patch": "@@ -175,7 +175,7 @@ pub struct IndexEntry {\n }\n \n impl Doc {\n-    fn CrateDoc() -> CrateDoc {\n+    fn CrateDoc(&self) -> CrateDoc {\n         option::get(vec::foldl(None, self.pages, |_m, page| {\n             match copy *page {\n               doc::CratePage(doc) => Some(doc),\n@@ -184,14 +184,14 @@ impl Doc {\n         }))\n     }\n \n-    fn cratemod() -> ModDoc {\n+    fn cratemod(&self) -> ModDoc {\n         copy self.CrateDoc().topmod\n     }\n }\n \n /// Some helper methods on ModDoc, mostly for testing\n impl ModDoc {\n-    fn mods() -> ~[ModDoc] {\n+    fn mods(&self) -> ~[ModDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               ModTag(ModDoc) => Some(ModDoc),\n@@ -200,7 +200,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn nmods() -> ~[NmodDoc] {\n+    fn nmods(&self) -> ~[NmodDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               NmodTag(nModDoc) => Some(nModDoc),\n@@ -209,7 +209,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn fns() -> ~[FnDoc] {\n+    fn fns(&self) -> ~[FnDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               FnTag(FnDoc) => Some(FnDoc),\n@@ -218,7 +218,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn consts() -> ~[ConstDoc] {\n+    fn consts(&self) -> ~[ConstDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               ConstTag(ConstDoc) => Some(ConstDoc),\n@@ -227,7 +227,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn enums() -> ~[EnumDoc] {\n+    fn enums(&self) -> ~[EnumDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               EnumTag(EnumDoc) => Some(EnumDoc),\n@@ -236,7 +236,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn traits() -> ~[TraitDoc] {\n+    fn traits(&self) -> ~[TraitDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               TraitTag(TraitDoc) => Some(TraitDoc),\n@@ -245,7 +245,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn impls() -> ~[ImplDoc] {\n+    fn impls(&self) -> ~[ImplDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               ImplTag(ImplDoc) => Some(ImplDoc),\n@@ -254,7 +254,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn types() -> ~[TyDoc] {\n+    fn types(&self) -> ~[TyDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n               TyTag(TyDoc) => Some(TyDoc),\n@@ -263,7 +263,7 @@ impl ModDoc {\n         }\n     }\n \n-    fn structs() -> ~[StructDoc] {\n+    fn structs(&self) -> ~[StructDoc] {\n         do vec::filter_map(self.items) |itemtag| {\n             match copy *itemtag {\n                 StructTag(StructDoc) => Some(StructDoc),"}, {"sha": "50e4fd759c44024ac913cacba8c62f34b4bed552", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "patch": "@@ -38,22 +38,22 @@ pub type Writer = fn~(v: WriteInstr);\n pub type WriterFactory = fn~(page: doc::Page) -> Writer;\n \n pub trait WriterUtils {\n-    fn write_str(+str: ~str);\n-    fn write_line(+str: ~str);\n-    fn write_done();\n+    fn write_str(&self, +str: ~str);\n+    fn write_line(&self, +str: ~str);\n+    fn write_done(&self);\n }\n \n impl Writer: WriterUtils {\n-    fn write_str(str: ~str) {\n-        self(Write(str));\n+    fn write_str(&self, str: ~str) {\n+        (*self)(Write(str));\n     }\n \n-    fn write_line(str: ~str) {\n+    fn write_line(&self, str: ~str) {\n         self.write_str(str + ~\"\\n\");\n     }\n \n-    fn write_done() {\n-        self(Done)\n+    fn write_done(&self) {\n+        (*self)(Done)\n     }\n }\n "}, {"sha": "ab17d829c69732b93e3282218e48eef3dbf9e39e", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=7d8ae4403e3d10ca8304b4a1bd90ac7cade5d713", "patch": "@@ -22,7 +22,6 @@\n #[no_core];\n \n #[allow(non_implicitly_copyable_typarams)];\n-#[allow(deprecated_self)];\n \n extern mod core(vers = \"0.6\");\n extern mod std(vers = \"0.6\");"}]}