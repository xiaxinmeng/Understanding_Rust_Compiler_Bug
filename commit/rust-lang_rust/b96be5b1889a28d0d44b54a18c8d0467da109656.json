{"sha": "b96be5b1889a28d0d44b54a18c8d0467da109656", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NmJlNWIxODg5YTI4ZDBkNDRiNTRhMThjOGQwNDY3ZGExMDk2NTY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-14T03:47:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-19T23:16:26Z"}, "message": "Avoid `as_str()` in `ParamTy::is_self`.\n\nIt's a hot function, and a direct `Symbol` comparison is faster.\n\nThe patch also converts some `&InternedString`s to `InternedString`.", "tree": {"sha": "bcad83a43ffe47f7168aa9d343d18ceedda972f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcad83a43ffe47f7168aa9d343d18ceedda972f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96be5b1889a28d0d44b54a18c8d0467da109656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96be5b1889a28d0d44b54a18c8d0467da109656", "html_url": "https://github.com/rust-lang/rust/commit/b96be5b1889a28d0d44b54a18c8d0467da109656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96be5b1889a28d0d44b54a18c8d0467da109656/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afcb5628523b0baae5704ad34ac1aba8ba10de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afcb5628523b0baae5704ad34ac1aba8ba10de6", "html_url": "https://github.com/rust-lang/rust/commit/6afcb5628523b0baae5704ad34ac1aba8ba10de6"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "22312e7459be125af26df08568861237e5afa534", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b96be5b1889a28d0d44b54a18c8d0467da109656", "patch": "@@ -609,9 +609,9 @@ impl Generics {\n         own_counts\n     }\n \n-    pub fn get_named(&self, name: &InternedString) -> Option<&GenericParam> {\n+    pub fn get_named(&self, name: InternedString) -> Option<&GenericParam> {\n         for param in &self.params {\n-            if *name == param.name.ident().as_interned_str() {\n+            if name == param.name.ident().as_interned_str() {\n                 return Some(param);\n             }\n         }"}, {"sha": "e4505a240379f0047bbde6f12e9f1e85c2f7612d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b96be5b1889a28d0d44b54a18c8d0467da109656", "patch": "@@ -194,20 +194,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 let mut sp = cm.def_span(self.hir().span_by_hir_id(node));\n                 if let Some(param) = self.hir()\n                     .get_generics(scope)\n-                    .and_then(|generics| generics.get_named(&br.name))\n+                    .and_then(|generics| generics.get_named(br.name))\n                 {\n                     sp = param.span;\n                 }\n                 (format!(\"the lifetime {} as defined on\", br.name), sp)\n             }\n             ty::ReFree(ty::FreeRegion {\n-                bound_region: ty::BoundRegion::BrNamed(_, ref name),\n+                bound_region: ty::BoundRegion::BrNamed(_, name),\n                 ..\n             }) => {\n                 let mut sp = cm.def_span(self.hir().span_by_hir_id(node));\n                 if let Some(param) = self.hir()\n                     .get_generics(scope)\n-                    .and_then(|generics| generics.get_named(&name))\n+                    .and_then(|generics| generics.get_named(name))\n                 {\n                     sp = param.span;\n                 }"}, {"sha": "feade7a8f56f26d1c8b7e4b73e8bca45f4d8af60", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=b96be5b1889a28d0d44b54a18c8d0467da109656", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     ) -> Option<AnonymousArgInfo<'_>> {\n         let (id, bound_region) = match *anon_region {\n             ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n-            ty::ReEarlyBound(ref ebr) => (\n+            ty::ReEarlyBound(ebr) => (\n                 self.tcx().parent(ebr.def_id).unwrap(),\n                 ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n             ),"}, {"sha": "d20840ef7cf4de89d6118a99cbe29790e8bf3352", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=b96be5b1889a28d0d44b54a18c8d0467da109656", "patch": "@@ -1136,7 +1136,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n         // FIXME(#50125): Ignoring `Self` with `index != 0` might lead to weird behavior elsewhere,\n         // but this should only be possible when using `-Z continue-parse-after-error` like\n         // `compile-fail/issue-36638.rs`.\n-        self.name == keywords::SelfUpper.name().as_str() && self.index == 0\n+        self.name.as_symbol() == keywords::SelfUpper.name() && self.index == 0\n     }\n }\n "}, {"sha": "452293ac4ea8c6e478e3fda1f0067164b2f497ac", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96be5b1889a28d0d44b54a18c8d0467da109656/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=b96be5b1889a28d0d44b54a18c8d0467da109656", "patch": "@@ -60,8 +60,8 @@ impl RegionName {\n     }\n \n     #[allow(dead_code)]\n-    crate fn name(&self) -> &InternedString {\n-        &self.name\n+    crate fn name(&self) -> InternedString {\n+        self.name\n     }\n \n     crate fn highlight_region_name(\n@@ -206,7 +206,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         match error_region {\n             ty::ReEarlyBound(ebr) => {\n                 if ebr.has_name() {\n-                    let span = self.get_named_span(tcx, error_region, &ebr.name);\n+                    let span = self.get_named_span(tcx, error_region, ebr.name);\n                     Some(RegionName {\n                         name: ebr.name,\n                         source: RegionNameSource::NamedEarlyBoundRegion(span)\n@@ -223,7 +223,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n                 ty::BoundRegion::BrNamed(_, name) => {\n-                    let span = self.get_named_span(tcx, error_region, &name);\n+                    let span = self.get_named_span(tcx, error_region, name);\n                     Some(RegionName {\n                         name,\n                         source: RegionNameSource::NamedFreeRegion(span),\n@@ -306,7 +306,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         error_region: &RegionKind,\n-        name: &InternedString,\n+        name: InternedString,\n     ) -> Span {\n         let scope = error_region.free_region_binding_scope(tcx);\n         let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);"}]}