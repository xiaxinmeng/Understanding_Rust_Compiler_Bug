{"sha": "ca57832db636fedeeb529a1cc1feab0befef2ab0", "node_id": "C_kwDOAAsO6NoAKGNhNTc4MzJkYjYzNmZlZGVlYjUyOWExY2MxZmVhYjBiZWZlZjJhYjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:16:36Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:16:36Z"}, "message": "Add more regression tests", "tree": {"sha": "e14e400a20af862b72e6565b3e9c1f6f5e3eeb1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e14e400a20af862b72e6565b3e9c1f6f5e3eeb1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca57832db636fedeeb529a1cc1feab0befef2ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca57832db636fedeeb529a1cc1feab0befef2ab0", "html_url": "https://github.com/rust-lang/rust/commit/ca57832db636fedeeb529a1cc1feab0befef2ab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca57832db636fedeeb529a1cc1feab0befef2ab0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe6f36224e92db6fbde952e0b7e50863161f6ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe6f36224e92db6fbde952e0b7e50863161f6ee", "html_url": "https://github.com/rust-lang/rust/commit/7fe6f36224e92db6fbde952e0b7e50863161f6ee"}], "stats": {"total": 129, "additions": 123, "deletions": 6}, "files": [{"sha": "90e2b6b698cf832ec4a2d45e266e173369a3062f", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca57832db636fedeeb529a1cc1feab0befef2ab0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57832db636fedeeb529a1cc1feab0befef2ab0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=ca57832db636fedeeb529a1cc1feab0befef2ab0", "patch": "@@ -1705,29 +1705,29 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         });\n     }\n \n+    #[instrument(level = \"debug\", skip(self, infcx, errors_buffer))]\n     fn check_member_constraints(\n         &self,\n         infcx: &InferCtxt<'tcx>,\n         errors_buffer: &mut RegionErrors<'tcx>,\n     ) {\n         let member_constraints = self.member_constraints.clone();\n         for m_c_i in member_constraints.all_indices() {\n-            debug!(\"check_member_constraint(m_c_i={:?})\", m_c_i);\n+            debug!(?m_c_i);\n             let m_c = &member_constraints[m_c_i];\n             let member_region_vid = m_c.member_region_vid;\n             debug!(\n-                \"check_member_constraint: member_region_vid={:?} with value {}\",\n-                member_region_vid,\n-                self.region_value_str(member_region_vid),\n+                ?member_region_vid,\n+                value = ?self.region_value_str(member_region_vid),\n             );\n             let choice_regions = member_constraints.choice_regions(m_c_i);\n-            debug!(\"check_member_constraint: choice_regions={:?}\", choice_regions);\n+            debug!(?choice_regions);\n \n             // Did the member region wind up equal to any of the option regions?\n             if let Some(o) =\n                 choice_regions.iter().find(|&&o_r| self.eval_equal(o_r, m_c.member_region_vid))\n             {\n-                debug!(\"check_member_constraint: evaluated as equal to {:?}\", o);\n+                debug!(\"evaluated as equal to {:?}\", o);\n                 continue;\n             }\n "}, {"sha": "ee9bce15d3478e2e73c5b266a7d983f01383c5db", "filename": "src/test/ui/type-alias-impl-trait/imply_bounds_from_bounds.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs?ref=ca57832db636fedeeb529a1cc1feab0befef2ab0", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Callable {\n+    type Output;\n+    fn call() -> Self::Output;\n+}\n+\n+impl<'a> Callable for &'a () {\n+    type Output = impl Sized;\n+    fn call() -> Self::Output {}\n+}\n+\n+fn test<'a>() -> impl Sized {\n+    <&'a () as Callable>::call()\n+}\n+\n+fn want_static<T: 'static>(_: T) {}\n+\n+fn test2<'a>() {\n+    want_static(<&'a () as Callable>::call());\n+}\n+\n+fn main() {}"}, {"sha": "ae21a9134a41662ced017662cb09323902481db4", "filename": "src/test/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs?ref=ca57832db636fedeeb529a1cc1feab0befef2ab0", "patch": "@@ -0,0 +1,38 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Callable {\n+    type Output;\n+    fn call(x: Self) -> Self::Output;\n+}\n+\n+trait PlusOne {\n+    fn plus_one(&mut self);\n+}\n+\n+impl<'a> PlusOne for &'a mut i32 {\n+    fn plus_one(&mut self) {\n+        **self += 1;\n+    }\n+}\n+\n+impl<T: PlusOne> Callable for T {\n+    type Output = impl PlusOne;\n+    fn call(t: T) -> Self::Output { t }\n+}\n+\n+fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n+    <&'a mut i32 as Callable>::call(y)\n+    //~^ ERROR hidden type for `impl PlusOne` captures lifetime that does not appear in bounds\n+}\n+\n+fn main() {\n+    let mut z = 42;\n+    let mut thing = test(&mut z);\n+    let mut thing2 = test(&mut z);\n+    thing.plus_one();\n+    assert_eq!(z, 43);\n+    thing2.plus_one();\n+    assert_eq!(z, 44);\n+    thing.plus_one();\n+    assert_eq!(z, 45);\n+}"}, {"sha": "0ed8a703b6dc54cb8690a316b278e8f043315948", "filename": "src/test/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr?ref=ca57832db636fedeeb529a1cc1feab0befef2ab0", "patch": "@@ -0,0 +1,16 @@\n+error[E0700]: hidden type for `impl PlusOne` captures lifetime that does not appear in bounds\n+  --> $DIR/imply_bounds_from_bounds_param.rs:24:5\n+   |\n+LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n+   |         -- hidden type `<&'a mut i32 as Callable>::Output` captures the lifetime `'a` as defined here\n+LL |     <&'a mut i32 as Callable>::call(y)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to declare that `impl PlusOne` captures `'a`, you can add an explicit `'a` lifetime bound\n+   |\n+LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne + 'a {\n+   |                                             ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "4e805ee308f4d9edb107019be39b995f5b414bcc", "filename": "src/test/ui/type-alias-impl-trait/self_implication.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself_implication.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca57832db636fedeeb529a1cc1feab0befef2ab0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself_implication.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself_implication.rs?ref=ca57832db636fedeeb529a1cc1feab0befef2ab0", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+fn foo() {\n+    struct Foo<'a> {\n+        x: &'a mut u8,\n+    }\n+    impl<'a> Foo<'a> {\n+        fn foo(&self) -> impl Sized {}\n+    }\n+    // use site\n+    let mut x = 5;\n+    let y = Foo { x: &mut x };\n+    let z = y.foo();\n+    let _a = &x; // invalidate the `&'a mut`in `y`\n+    let _b = z; // this should *not* check that `'a` in the type `Foo<'a>::foo::opaque` is live\n+}\n+\n+fn bar() {\n+    struct Foo<'a> {\n+        x: &'a mut u8,\n+    }\n+\n+    // desugared\n+    type FooX<'a> = impl Sized;\n+    impl<'a> Foo<'a> {\n+        fn foo(&self) -> FooX<'a> {}\n+    }\n+\n+    // use site\n+    let mut x = 5;\n+    let y = Foo { x: &mut x };\n+    let z = y.foo();\n+    let _a = &x; // invalidate the `&'a mut`in `y`\n+    let _b = z; // this should *not* check that `'a` in the type `Foo<'a>::foo::opaque` is live\n+}\n+\n+fn main() {}"}]}