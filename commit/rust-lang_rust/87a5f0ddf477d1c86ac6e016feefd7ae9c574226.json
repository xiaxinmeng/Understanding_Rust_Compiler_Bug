{"sha": "87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YTVmMGRkZjQ3N2QxYzg2YWM2ZTAxNmZlZWZkN2FlOWM1NzQyMjY=", "commit": {"author": {"name": "Clark Gaebel", "email": "cgaebel@mozilla.com", "date": "2014-10-25T02:31:17Z"}, "committer": {"name": "Clark Gaebel", "email": "cgaebel@mozilla.com", "date": "2014-10-25T03:12:53Z"}, "message": "Make the Vec data structure layout match raw::Slice.\n\nFixes #18302\n\nr? @thestinger", "tree": {"sha": "e88eca7cc4bbd69e9bc1e1808fc2a974742c91ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e88eca7cc4bbd69e9bc1e1808fc2a974742c91ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "html_url": "https://github.com/rust-lang/rust/commit/87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/comments", "author": null, "committer": null, "parents": [{"sha": "a10917a6a9b087d10ac4fd0186b719218627281e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a10917a6a9b087d10ac4fd0186b719218627281e", "html_url": "https://github.com/rust-lang/rust/commit/a10917a6a9b087d10ac4fd0186b719218627281e"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "d4115df7da4787e13e9c43e219d90d4606ea1c02", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "patch": "@@ -292,7 +292,7 @@ impl<T> BoxedSlice<T> for Box<[T]> {\n     #[experimental]\n     fn into_vec(mut self) -> Vec<T> {\n         unsafe {\n-            let xs = Vec::from_raw_parts(self.len(), self.len(), self.as_mut_ptr());\n+            let xs = Vec::from_raw_parts(self.as_mut_ptr(), self.len(), self.len());\n             mem::forget(self);\n             xs\n         }"}, {"sha": "c44a03b05cd35d7f3f6664dc68f0d871e1757cb6", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "patch": "@@ -780,7 +780,7 @@ pub mod raw {\n     #[inline]\n     pub unsafe fn from_parts(buf: *mut u8, length: uint, capacity: uint) -> String {\n         String {\n-            vec: Vec::from_raw_parts(length, capacity, buf),\n+            vec: Vec::from_raw_parts(buf, length, capacity),\n         }\n     }\n "}, {"sha": "c57a465df3780e085b7fd07cc01be1fad37eafb2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "patch": "@@ -103,9 +103,9 @@ use slice::{Items, MutItems};\n #[unsafe_no_drop_flag]\n #[stable]\n pub struct Vec<T> {\n+    ptr: *mut T,\n     len: uint,\n     cap: uint,\n-    ptr: *mut T\n }\n \n impl<T> Vec<T> {\n@@ -125,7 +125,7 @@ impl<T> Vec<T> {\n         // non-null value which is fine since we never call deallocate on the ptr\n         // if cap is 0. The reason for this is because the pointer of a slice\n         // being NULL would break the null pointer optimization for enums.\n-        Vec { len: 0, cap: 0, ptr: EMPTY as *mut T }\n+        Vec { ptr: EMPTY as *mut T, len: 0, cap: 0 }\n     }\n \n     /// Constructs a new, empty `Vec` with the specified capacity.\n@@ -159,14 +159,14 @@ impl<T> Vec<T> {\n     #[stable]\n     pub fn with_capacity(capacity: uint) -> Vec<T> {\n         if mem::size_of::<T>() == 0 {\n-            Vec { len: 0, cap: uint::MAX, ptr: EMPTY as *mut T }\n+            Vec { ptr: EMPTY as *mut T, len: 0, cap: uint::MAX }\n         } else if capacity == 0 {\n             Vec::new()\n         } else {\n             let size = capacity.checked_mul(&mem::size_of::<T>())\n                                .expect(\"capacity overflow\");\n             let ptr = unsafe { allocate(size, mem::min_align_of::<T>()) };\n-            Vec { len: 0, cap: capacity, ptr: ptr as *mut T }\n+            Vec { ptr: ptr as *mut T, len: 0, cap: capacity }\n         }\n     }\n \n@@ -237,9 +237,9 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     #[experimental]\n-    pub unsafe fn from_raw_parts(length: uint, capacity: uint,\n-                                 ptr: *mut T) -> Vec<T> {\n-        Vec { len: length, cap: capacity, ptr: ptr }\n+    pub unsafe fn from_raw_parts(ptr: *mut T, length: uint,\n+                                 capacity: uint) -> Vec<T> {\n+        Vec { ptr: ptr, len: length, cap: capacity }\n     }\n \n     /// Consumes the `Vec`, partitioning it based on a predicate.\n@@ -1680,7 +1680,7 @@ impl<'a, T> Drop for DerefVec<'a, T> {\n pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> {\n     unsafe {\n         DerefVec {\n-            x: Vec::from_raw_parts(x.len(), x.len(), x.as_ptr() as *mut T),\n+            x: Vec::from_raw_parts(x.as_ptr() as *mut T, x.len(), x.len()),\n             l: ContravariantLifetime::<'a>\n         }\n     }\n@@ -1929,7 +1929,7 @@ impl<T> Vec<T> {\n                 let vec_cap = pv.vec.capacity();\n                 let vec_ptr = pv.vec.as_mut_ptr() as *mut U;\n                 mem::forget(pv);\n-                Vec::from_raw_parts(vec_len, vec_cap, vec_ptr)\n+                Vec::from_raw_parts(vec_ptr, vec_len, vec_cap)\n             }\n         } else {\n             // Put the `Vec` into the `PartialVecZeroSized` structure and"}, {"sha": "4f09b34557c74e93ab2938474406992381a77e14", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87a5f0ddf477d1c86ac6e016feefd7ae9c574226/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=87a5f0ddf477d1c86ac6e016feefd7ae9c574226", "patch": "@@ -74,7 +74,7 @@ impl<T> OwnedSlice<T> {\n     pub fn into_vec(self) -> Vec<T> {\n         // null is ok, because len == 0 in that case, as required by Vec.\n         unsafe {\n-            let ret = Vec::from_raw_parts(self.len, self.len, self.data);\n+            let ret = Vec::from_raw_parts(self.data, self.len, self.len);\n             // the vector owns the allocation now\n             mem::forget(self);\n             ret"}]}