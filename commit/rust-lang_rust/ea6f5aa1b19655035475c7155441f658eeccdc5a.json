{"sha": "ea6f5aa1b19655035475c7155441f658eeccdc5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNmY1YWExYjE5NjU1MDM1NDc1YzcxNTU0NDFmNjU4ZWVjY2RjNWE=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-10-30T03:46:49Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-10-30T03:46:49Z"}, "message": "Implement rand and args, cleanup other modules", "tree": {"sha": "e3bedb493e44c8e0cfd120e3d8ead6a13ed2e2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3bedb493e44c8e0cfd120e3d8ead6a13ed2e2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea6f5aa1b19655035475c7155441f658eeccdc5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6f5aa1b19655035475c7155441f658eeccdc5a", "html_url": "https://github.com/rust-lang/rust/commit/ea6f5aa1b19655035475c7155441f658eeccdc5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea6f5aa1b19655035475c7155441f658eeccdc5a/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b35dd1f20b011cb6807ee56c5829753351b977", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b35dd1f20b011cb6807ee56c5829753351b977", "html_url": "https://github.com/rust-lang/rust/commit/b1b35dd1f20b011cb6807ee56c5829753351b977"}], "stats": {"total": 103, "additions": 29, "deletions": 74}, "files": [{"sha": "52ba030e7c6401c7856fa2d41dbcf01348b74acf", "filename": "src/libstd/sys/redox/args.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fargs.rs?ref=ea6f5aa1b19655035475c7155441f658eeccdc5a", "patch": "@@ -52,9 +52,10 @@ impl DoubleEndedIterator for Args {\n mod imp {\n     use os::unix::prelude::*;\n     use mem;\n-    use ffi::{CStr, OsString};\n+    use ffi::OsString;\n     use marker::PhantomData;\n-    use libc;\n+    use slice;\n+    use str;\n     use super::Args;\n \n     use sys_common::mutex::Mutex;\n@@ -63,9 +64,12 @@ mod imp {\n     static LOCK: Mutex = Mutex::new();\n \n     pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-        let args = (0..argc).map(|i| {\n-            CStr::from_ptr(*argv.offset(i) as *const libc::c_char).to_bytes().to_vec()\n-        }).collect();\n+        let mut args: Vec<Vec<u8>> = Vec::new();\n+        for i in 0..argc {\n+            let len = *(argv.offset(i * 2)) as usize;\n+            let ptr = *(argv.offset(i * 2 + 1));\n+            args.push(slice::from_raw_parts(ptr, len).to_vec());\n+        }\n \n         LOCK.lock();\n         let ptr = get_global_ptr();"}, {"sha": "f6c8fec545b97777ee36ef47366aeccdba619699", "filename": "src/libstd/sys/redox/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fcondvar.rs?ref=ea6f5aa1b19655035475c7155441f658eeccdc5a", "patch": "@@ -28,7 +28,6 @@ impl Condvar {\n \n     #[inline]\n     pub fn notify_one(&self) {\n-        ::sys_common::util::dumb_print(format_args!(\"condvar notify_one\\n\"));\n         unsafe {\n             let seq = self.seq.get();\n \n@@ -40,7 +39,6 @@ impl Condvar {\n \n     #[inline]\n     pub fn notify_all(&self) {\n-        ::sys_common::util::dumb_print(format_args!(\"condvar notify_all\\n\"));\n         unsafe {\n             let lock = self.lock.get();\n             let seq = self.seq.get();\n@@ -57,7 +55,6 @@ impl Condvar {\n \n     #[inline]\n     pub fn wait(&self, mutex: &Mutex) {\n-        ::sys_common::util::dumb_print(format_args!(\"condvar wait\\n\"));\n         unsafe {\n             let lock = self.lock.get();\n             let seq = self.seq.get();"}, {"sha": "9c50c547965a832a5136c6c2f2ab79e9e8abd905", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=ea6f5aa1b19655035475c7155441f658eeccdc5a", "patch": "@@ -49,32 +49,14 @@ impl FileDesc {\n     }\n \n     pub fn set_cloexec(&self) -> io::Result<()> {\n-        ::sys_common::util::dumb_print(format_args!(\"Set cloexec\\n\"));\n-        unimplemented!();\n-        /*\n-        unsafe {\n-            let previous = cvt(libc::fcntl(self.fd, libc::F_GETFD, 0))?;\n-            cvt(libc::fcntl(self.fd, libc::F_SETFD, previous | libc::FD_CLOEXEC))?;\n-            Ok(())\n-        }\n-        */\n+        ::sys_common::util::dumb_print(format_args!(\"{}: set cloexec\\n\", self.fd));\n+        //unimplemented!();\n+        Ok(())\n     }\n \n     pub fn set_nonblocking(&self, _nonblocking: bool) -> io::Result<()> {\n-        ::sys_common::util::dumb_print(format_args!(\"Set nonblocking\\n\"));\n+        ::sys_common::util::dumb_print(format_args!(\"{}: set nonblocking\\n\", self.fd));\n         unimplemented!();\n-        /*\n-        unsafe {\n-            let previous = cvt(libc::fcntl(self.fd, libc::F_GETFL, 0))?;\n-            let new = if nonblocking {\n-                previous | libc::O_NONBLOCK\n-            } else {\n-                previous & !libc::O_NONBLOCK\n-            };\n-            cvt(libc::fcntl(self.fd, libc::F_SETFL, new))?;\n-            Ok(())\n-        }\n-        */\n     }\n \n     pub fn duplicate(&self) -> io::Result<FileDesc> {"}, {"sha": "4c2b0de8bd94ba45a6ee5be5a75e690745726d1d", "filename": "src/libstd/sys/redox/mutex.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmutex.rs?ref=ea6f5aa1b19655035475c7155441f658eeccdc5a", "patch": "@@ -65,22 +65,18 @@ impl Mutex {\n     /// Try to lock the mutex\n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        ::sys_common::util::dumb_print(format_args!(\"mutex try lock\\n\"));\n         mutex_try_lock(self.lock.get())\n     }\n \n     /// Lock the mutex\n     #[inline]\n     pub unsafe fn lock(&self) {\n-        ::sys_common::util::dumb_print(format_args!(\"mutex lock\\n\"));\n-        mutex_try_lock(self.lock.get());\n-        //mutex_lock(self.lock.get());\n+        mutex_lock(self.lock.get());\n     }\n \n     /// Unlock the mutex\n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        ::sys_common::util::dumb_print(format_args!(\"mutex unlock\\n\"));\n         mutex_unlock(self.lock.get());\n     }\n \n@@ -119,7 +115,6 @@ impl ReentrantMutex {\n     /// Try to lock the mutex\n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        ::sys_common::util::dumb_print(format_args!(\"remutex try_lock\\n\"));\n         let pid = getpid().unwrap();\n         if *self.own_count.get() > 0 && *self.owner.get() == pid {\n             *self.own_count.get() += 1;\n@@ -138,7 +133,6 @@ impl ReentrantMutex {\n     /// Lock the mutex\n     #[inline]\n     pub unsafe fn lock(&self) {\n-        ::sys_common::util::dumb_print(format_args!(\"remutex lock\\n\"));\n         let pid = getpid().unwrap();\n         if *self.own_count.get() > 0 && *self.owner.get() == pid {\n             *self.own_count.get() += 1;\n@@ -152,7 +146,6 @@ impl ReentrantMutex {\n     /// Unlock the mutex\n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        ::sys_common::util::dumb_print(format_args!(\"remutex unlock\\n\"));\n         let pid = getpid().unwrap();\n         if *self.own_count.get() > 0 && *self.owner.get() == pid {\n             *self.own_count.get() -= 1;"}, {"sha": "309201352c404bb7fb9b373b12a94facfe62eb7f", "filename": "src/libstd/sys/redox/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos.rs?ref=ea6f5aa1b19655035475c7155441f658eeccdc5a", "patch": "@@ -15,7 +15,7 @@\n use os::unix::prelude::*;\n \n use error::Error as StdError;\n-use ffi::{CString, CStr, OsString, OsStr};\n+use ffi::{OsString, OsStr};\n use fmt;\n use io::{self, Read, Write};\n use iter;"}, {"sha": "b6968f285d7aa022205cc88835da16eefade5ec1", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=ea6f5aa1b19655035475c7155441f658eeccdc5a", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use os::unix::prelude::*;\n-\n use collections::hash_map::HashMap;\n use env;\n-use ffi::{OsStr, CString};\n+use ffi::OsStr;\n use fmt;\n use io::{self, Error, ErrorKind};\n use libc::{self, pid_t, c_int, gid_t, uid_t};\n@@ -344,13 +342,6 @@ impl Command {\n     }\n }\n \n-fn os2c(s: &OsStr, saw_nul: &mut bool) -> CString {\n-    CString::new(s.as_bytes()).unwrap_or_else(|_e| {\n-        *saw_nul = true;\n-        CString::new(\"<string-with-nul>\").unwrap()\n-    })\n-}\n-\n impl Stdio {\n     fn to_child_stdio(&self, readable: bool)\n                       -> io::Result<(ChildStdio, Option<AnonPipe>)> {\n@@ -403,18 +394,6 @@ impl ChildStdio {\n     }\n }\n \n-fn pair_to_key(key: &OsStr, value: &OsStr, saw_nul: &mut bool) -> CString {\n-    let (key, value) = (key.as_bytes(), value.as_bytes());\n-    let mut v = Vec::with_capacity(key.len() + value.len() + 1);\n-    v.extend(key);\n-    v.push(b'=');\n-    v.extend(value);\n-    CString::new(v).unwrap_or_else(|_e| {\n-        *saw_nul = true;\n-        CString::new(\"foo=bar\").unwrap()\n-    })\n-}\n-\n impl fmt::Debug for Command {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:?}\", self.program)?;"}, {"sha": "7d2df6bf957694d45d48fc67282c2e456d4d3f3a", "filename": "src/libstd/sys/redox/rand.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6f5aa1b19655035475c7155441f658eeccdc5a/src%2Flibstd%2Fsys%2Fredox%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Frand.rs?ref=ea6f5aa1b19655035475c7155441f658eeccdc5a", "patch": "@@ -8,33 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use fs::File;\n use io;\n+use libc;\n use rand::Rng;\n-use rand::reader::ReaderRng;\n \n-pub struct OsRng {\n-    inner: ReaderRng<File>,\n-}\n+pub struct OsRng;\n \n impl OsRng {\n     /// Create a new `OsRng`.\n     pub fn new() -> io::Result<OsRng> {\n-        let reader = File::open(\"rand:\")?;\n-        let reader_rng = ReaderRng::new(reader);\n-\n-        Ok(OsRng { inner: reader_rng })\n+        Ok(OsRng)\n     }\n }\n \n impl Rng for OsRng {\n     fn next_u32(&mut self) -> u32 {\n-        self.inner.next_u32()\n+        self.next_u64() as u32\n     }\n     fn next_u64(&mut self) -> u64 {\n-        self.inner.next_u64()\n+        unsafe { libc::random() }\n     }\n-    fn fill_bytes(&mut self, v: &mut [u8]) {\n-        self.inner.fill_bytes(v)\n+    fn fill_bytes(&mut self, buf: &mut [u8]) {\n+        for chunk in buf.chunks_mut(8) {\n+            let mut rand: u64 = self.next_u64();\n+            for b in chunk.iter_mut() {\n+                *b = rand as u8;\n+                rand = rand >> 8;\n+            }\n+        }\n     }\n }"}]}