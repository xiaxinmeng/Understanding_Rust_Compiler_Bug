{"sha": "356369dd08f968b74b8bdee3a177f9919194914b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NjM2OWRkMDhmOTY4Yjc0YjhiZGVlM2ExNzdmOTkxOTE5NDkxNGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-23T14:01:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-23T14:01:22Z"}, "message": "test against passing invalid shared refs around", "tree": {"sha": "540e14a7910b7d59a2afa103000fbe4d248dc9bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/540e14a7910b7d59a2afa103000fbe4d248dc9bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356369dd08f968b74b8bdee3a177f9919194914b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356369dd08f968b74b8bdee3a177f9919194914b", "html_url": "https://github.com/rust-lang/rust/commit/356369dd08f968b74b8bdee3a177f9919194914b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356369dd08f968b74b8bdee3a177f9919194914b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5388037f8a16d3bf443f348e28873d255db044d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5388037f8a16d3bf443f348e28873d255db044d0", "html_url": "https://github.com/rust-lang/rust/commit/5388037f8a16d3bf443f348e28873d255db044d0"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "785a15c4704a34565ecae4109284f204bc1377a5", "filename": "tests/compile-fail/stacked_borrows/load_invalid_shr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/356369dd08f968b74b8bdee3a177f9919194914b/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356369dd08f968b74b8bdee3a177f9919194914b/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fload_invalid_shr.rs?ref=356369dd08f968b74b8bdee3a177f9919194914b", "patch": "@@ -0,0 +1,9 @@\n+// Make sure that we cannot load from memory a `&` that got already invalidated.\n+fn main() {\n+    let x = &mut 42;\n+    let xraw = x as *mut _;\n+    let xref = unsafe { &*xraw };\n+    let xref_in_mem = Box::new(xref);\n+    let _val = *x; // invalidate xraw\n+    let _val = *xref_in_mem; //~ ERROR Shr reference with non-reactivatable tag: Location should be frozen\n+}"}, {"sha": "8b7a846d849c0f322191f6eb02ee71cc0559ee63", "filename": "tests/compile-fail/stacked_borrows/pass_invalid_shr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/356369dd08f968b74b8bdee3a177f9919194914b/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356369dd08f968b74b8bdee3a177f9919194914b/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fpass_invalid_shr.rs?ref=356369dd08f968b74b8bdee3a177f9919194914b", "patch": "@@ -0,0 +1,10 @@\n+// Make sure that we cannot pass by argument a `&` that got already invalidated.\n+fn foo(_: &i32) {}\n+\n+fn main() {\n+    let x = &mut 42;\n+    let xraw = &*x as *const _;\n+    let xref = unsafe { &*xraw };\n+    let _val = *x; // invalidate xraw\n+    foo(xref); //~ ERROR Shr reference with non-reactivatable tag: Location should be frozen\n+}"}, {"sha": "89c94127b0b7143e79297b557397812c21ef2b71", "filename": "tests/compile-fail/stacked_borrows/return_invalid_shr.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/356369dd08f968b74b8bdee3a177f9919194914b/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356369dd08f968b74b8bdee3a177f9919194914b/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Freturn_invalid_shr.rs?ref=356369dd08f968b74b8bdee3a177f9919194914b", "patch": "@@ -0,0 +1,11 @@\n+// Make sure that we cannot return a `&` that got already invalidated.\n+fn foo(x: &mut (i32, i32)) -> &i32 {\n+    let xraw = x as *mut (i32, i32);\n+    let ret = unsafe { &(*xraw).1 };\n+    let _val = *x; // invalidate xraw and its children\n+    ret //~ ERROR Shr reference with non-reactivatable tag: Location should be frozen\n+}\n+\n+fn main() {\n+    foo(&mut (1, 2));\n+}"}]}