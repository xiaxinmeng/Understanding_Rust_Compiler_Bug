{"sha": "33eaa94f90932b282cd81ff17ff6de287c34d4c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZWFhOTRmOTA5MzJiMjgyY2Q4MWZmMTdmZjZkZTI4N2MzNGQ0Yzc=", "commit": {"author": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-28T12:07:49Z"}, "committer": {"name": "Nikolai Vazquez", "email": "nvazquez1297@gmail.com", "date": "2017-09-28T12:07:49Z"}, "message": "Remove mem::transmute used in OsStr conversions", "tree": {"sha": "55b506055784493727dfbd02a34d285fed7af789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55b506055784493727dfbd02a34d285fed7af789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33eaa94f90932b282cd81ff17ff6de287c34d4c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33eaa94f90932b282cd81ff17ff6de287c34d4c7", "html_url": "https://github.com/rust-lang/rust/commit/33eaa94f90932b282cd81ff17ff6de287c34d4c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33eaa94f90932b282cd81ff17ff6de287c34d4c7/comments", "author": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nvzqz", "id": 10367662, "node_id": "MDQ6VXNlcjEwMzY3NjYy", "avatar_url": "https://avatars.githubusercontent.com/u/10367662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nvzqz", "html_url": "https://github.com/nvzqz", "followers_url": "https://api.github.com/users/nvzqz/followers", "following_url": "https://api.github.com/users/nvzqz/following{/other_user}", "gists_url": "https://api.github.com/users/nvzqz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nvzqz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nvzqz/subscriptions", "organizations_url": "https://api.github.com/users/nvzqz/orgs", "repos_url": "https://api.github.com/users/nvzqz/repos", "events_url": "https://api.github.com/users/nvzqz/events{/privacy}", "received_events_url": "https://api.github.com/users/nvzqz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "755fd29b60484e550b7fd52985b05a42442e8993", "url": "https://api.github.com/repos/rust-lang/rust/commits/755fd29b60484e550b7fd52985b05a42442e8993", "html_url": "https://github.com/rust-lang/rust/commit/755fd29b60484e550b7fd52985b05a42442e8993"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "e7558c3c02266b2fda66bea92a04e48676e5db22", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33eaa94f90932b282cd81ff17ff6de287c34d4c7/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33eaa94f90932b282cd81ff17ff6de287c34d4c7/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=33eaa94f90932b282cd81ff17ff6de287c34d4c7", "patch": "@@ -260,7 +260,8 @@ impl OsString {\n     /// ```\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {\n-        unsafe { mem::transmute(self.inner.into_box()) }\n+        let rw = Box::into_raw(self.inner.into_box()) as *mut OsStr;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n@@ -394,7 +395,7 @@ impl OsStr {\n     }\n \n     fn from_inner(inner: &Slice) -> &OsStr {\n-        unsafe { mem::transmute(inner) }\n+        unsafe { &*(inner as *const Slice as *const OsStr) }\n     }\n \n     /// Yields a [`&str`] slice if the `OsStr` is valid Unicode.\n@@ -511,23 +512,24 @@ impl OsStr {\n     /// [`OsString`]: struct.OsString.html\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_os_string(self: Box<OsStr>) -> OsString {\n-        let inner: Box<Slice> = unsafe { mem::transmute(self) };\n-        OsString { inner: Buf::from_box(inner) }\n+        let boxed = unsafe { Box::from_raw(Box::into_raw(self) as *mut Slice) };\n+        OsString { inner: Buf::from_box(boxed) }\n     }\n \n     /// Gets the underlying byte representation.\n     ///\n     /// Note: it is *crucial* that this API is private, to avoid\n     /// revealing the internal, platform-specific encodings.\n     fn bytes(&self) -> &[u8] {\n-        unsafe { mem::transmute(&self.inner) }\n+        &self.inner.inner\n     }\n }\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]\n impl<'a> From<&'a OsStr> for Box<OsStr> {\n     fn from(s: &'a OsStr) -> Box<OsStr> {\n-        unsafe { mem::transmute(s.inner.into_box()) }\n+        let rw = Box::into_raw(s.inner.into_box()) as *mut OsStr;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n@@ -548,7 +550,8 @@ impl From<OsString> for Box<OsStr> {\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     fn default() -> Box<OsStr> {\n-        unsafe { mem::transmute(Slice::empty_box()) }\n+        let rw = Box::into_raw(Slice::empty_box()) as *mut OsStr;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n "}]}