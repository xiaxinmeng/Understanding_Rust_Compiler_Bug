{"sha": "dc41851882b4d847308badc7fbb0da4975023bb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDE4NTE4ODJiNGQ4NDczMDhiYWRjN2ZiYjBkYTQ5NzUwMjNiYjI=", "commit": {"author": {"name": "Peter Hrvola", "email": "peter.hrvola@hotmail.com", "date": "2018-04-01T08:01:51Z"}, "committer": {"name": "Peter Hrvola", "email": "peter.hrvola@hotmail.com", "date": "2018-04-01T08:01:51Z"}, "message": "Fixed nits from PR review #49392", "tree": {"sha": "cc82435d467062440b97567bf574ae0cf0c92a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc82435d467062440b97567bf574ae0cf0c92a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc41851882b4d847308badc7fbb0da4975023bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc41851882b4d847308badc7fbb0da4975023bb2", "html_url": "https://github.com/rust-lang/rust/commit/dc41851882b4d847308badc7fbb0da4975023bb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc41851882b4d847308badc7fbb0da4975023bb2/comments", "author": {"login": "hrvolapeter", "id": 6537500, "node_id": "MDQ6VXNlcjY1Mzc1MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6537500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrvolapeter", "html_url": "https://github.com/hrvolapeter", "followers_url": "https://api.github.com/users/hrvolapeter/followers", "following_url": "https://api.github.com/users/hrvolapeter/following{/other_user}", "gists_url": "https://api.github.com/users/hrvolapeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrvolapeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrvolapeter/subscriptions", "organizations_url": "https://api.github.com/users/hrvolapeter/orgs", "repos_url": "https://api.github.com/users/hrvolapeter/repos", "events_url": "https://api.github.com/users/hrvolapeter/events{/privacy}", "received_events_url": "https://api.github.com/users/hrvolapeter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hrvolapeter", "id": 6537500, "node_id": "MDQ6VXNlcjY1Mzc1MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6537500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrvolapeter", "html_url": "https://github.com/hrvolapeter", "followers_url": "https://api.github.com/users/hrvolapeter/followers", "following_url": "https://api.github.com/users/hrvolapeter/following{/other_user}", "gists_url": "https://api.github.com/users/hrvolapeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrvolapeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrvolapeter/subscriptions", "organizations_url": "https://api.github.com/users/hrvolapeter/orgs", "repos_url": "https://api.github.com/users/hrvolapeter/repos", "events_url": "https://api.github.com/users/hrvolapeter/events{/privacy}", "received_events_url": "https://api.github.com/users/hrvolapeter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4954e3e828377a1034d5e434e0a2b69426497ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4954e3e828377a1034d5e434e0a2b69426497ea4", "html_url": "https://github.com/rust-lang/rust/commit/4954e3e828377a1034d5e434e0a2b69426497ea4"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "0e41ede6aa5800802099b9a64dc4a7da23e29efb", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc41851882b4d847308badc7fbb0da4975023bb2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41851882b4d847308badc7fbb0da4975023bb2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=dc41851882b4d847308badc7fbb0da4975023bb2", "patch": "@@ -1306,7 +1306,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn check_if_path_is_moved(\n+    fn check_if_full_path_is_moved(\n         &mut self,\n         context: Context,\n         desired_action: InitializationRequiringAction,\n@@ -1355,7 +1355,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //\n         // This code covers scenarios 1, 2, and 3.\n \n-        debug!(\"check_if_path_is_moved place: {:?}\", place);\n+        debug!(\"check_if_full_path_is_moved place: {:?}\", place);\n         match self.move_path_closest_to(place) {\n             Ok(mpi) => {\n                 if maybe_uninits.contains(&mpi) {\n@@ -1399,7 +1399,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // 1. Move of `a.b.c`, use of `a` or `a.b`\n         //    partial initialization support, one might have `a.x`\n         //    initialized but not `a.b`.\n-        // 2. All bad scenarios from `check_if_path_is_moved`\n+        // 2. All bad scenarios from `check_if_full_path_is_moved`\n         //\n         // OK scenarios:\n         //\n@@ -1409,7 +1409,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //    must have been initialized for the use to be sound.\n         // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`\n \n-        self.check_if_path_is_moved(context, desired_action, place_span, flow_state);\n+        self.check_if_full_path_is_moved(context, desired_action, place_span, flow_state);\n \n         // A move of any shallow suffix of `place` also interferes\n         // with an attempt to use `place`. This is scenario 3 above.\n@@ -1494,17 +1494,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     match *elem {\n                         ProjectionElem::Index(_/*operand*/) |\n                         ProjectionElem::ConstantIndex { .. } |\n-                        // assigning to P[i] requires `P` initialized.\n+                        // assigning to P[i] requires P to be valid.\n                         ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>\n                         // assigning to (P->variant) is okay if assigning to `P` is okay\n                         //\n                         // FIXME: is this true even if P is a adt with a dtor?\n                         { }\n \n+                        // assigning to (*P) requires P to be initialized\n                         ProjectionElem::Deref => {\n-                            self.check_if_path_is_moved(\n+                            self.check_if_full_path_is_moved(\n                                 context, InitializationRequiringAction::Use,\n                                 (base, span), flow_state);\n+                            // (base initialized; no need to\n+                            // recur further)\n+                            break;\n                         }\n \n                         ProjectionElem::Subslice { .. } => {"}]}