{"sha": "47a0f78b3b7087550b82564f3bfe0b3701683c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YTBmNzhiM2I3MDg3NTUwYjgyNTY0ZjNiZmUwYjM3MDE2ODNjNjY=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-11T13:05:08Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-11T13:07:16Z"}, "message": "Fix normalisation of multi-line doc attributes", "tree": {"sha": "ed8679c582f0a89b3786de81b1e1beb3326feede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8679c582f0a89b3786de81b1e1beb3326feede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47a0f78b3b7087550b82564f3bfe0b3701683c66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzWyQoACgkQKTh7Wnqv\nhj8qhQgAl8CbZqcUkGAwgyBu35/m5YqcOuJ70ldye4yECqcRP+ZNf7SSR5PoNHJk\nxaEA6qhC4zb5rXSItl86Yr0anMPQ8HXA8QED+WxpZvIdeK4+J69GlQvJFng4tNaG\nhtOUgjLoGhjleSvRicobaSK/5lPMJM6B6EDjbHwkmaE1NmuHEs93qqfqFk6xot1g\nHJbU3OCnfZZnfCTrjQ2or5Bj1q0AZh8V7DGKn+nAct3horuXfWT38yRSrKPRtQD6\np/I1LvEvQziojbgJjDWBvcFnsfdWHw6PQYCAwmJcnnYlZ3gRR9kn80n7+F/W25sp\nfL1XE833jmflWDP5VuapZHuEZvr4Yw==\n=AYUP\n-----END PGP SIGNATURE-----", "payload": "tree ed8679c582f0a89b3786de81b1e1beb3326feede\nparent 7fc181d11159bf16603bde3f383406e4223b1c8a\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557579908 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557580036 +0200\n\nFix normalisation of multi-line doc attributes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47a0f78b3b7087550b82564f3bfe0b3701683c66", "html_url": "https://github.com/rust-lang/rust/commit/47a0f78b3b7087550b82564f3bfe0b3701683c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47a0f78b3b7087550b82564f3bfe0b3701683c66/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fc181d11159bf16603bde3f383406e4223b1c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc181d11159bf16603bde3f383406e4223b1c8a", "html_url": "https://github.com/rust-lang/rust/commit/7fc181d11159bf16603bde3f383406e4223b1c8a"}], "stats": {"total": 103, "additions": 98, "deletions": 5}, "files": [{"sha": "378c56b83a39c785f5b30052f6de3f9431cdecbc", "filename": "src/attr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47a0f78b3b7087550b82564f3bfe0b3701683c66/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a0f78b3b7087550b82564f3bfe0b3701683c66/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=47a0f78b3b7087550b82564f3bfe0b3701683c66", "patch": "@@ -3,6 +3,7 @@\n use syntax::ast;\n use syntax::source_map::{BytePos, Span, DUMMY_SP};\n \n+use self::doc_comment::DocCommentFormatter;\n use crate::comment::{contains_comment, rewrite_doc_comment, CommentStyle};\n use crate::config::lists::*;\n use crate::config::IndentStyle;\n@@ -14,6 +15,8 @@ use crate::shape::Shape;\n use crate::types::{rewrite_path, PathContext};\n use crate::utils::{count_newlines, mk_sp};\n \n+mod doc_comment;\n+\n /// Returns attributes on the given statement.\n pub(crate) fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n     match stmt.node {\n@@ -331,11 +334,9 @@ impl Rewrite for ast::Attribute {\n                             ast::AttrStyle::Outer => CommentStyle::TripleSlash,\n                         };\n \n-                        // Remove possible whitespace from the `CommentStyle::opener()` so that\n-                        // the literal itself has control over the comment's leading spaces.\n-                        let opener = comment_style.opener().trim_end();\n-\n-                        let doc_comment = format!(\"{}{}\", opener, literal);\n+                        let doc_comment_formatter =\n+                            DocCommentFormatter::new(literal, comment_style);\n+                        let doc_comment = format!(\"{}\", doc_comment_formatter);\n                         return rewrite_doc_comment(\n                             &doc_comment,\n                             shape.comment(context.config),"}, {"sha": "e687492fb89226dff5f203588b1e540a54989ada", "filename": "src/attr/doc_comment.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/47a0f78b3b7087550b82564f3bfe0b3701683c66/src%2Fattr%2Fdoc_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a0f78b3b7087550b82564f3bfe0b3701683c66/src%2Fattr%2Fdoc_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr%2Fdoc_comment.rs?ref=47a0f78b3b7087550b82564f3bfe0b3701683c66", "patch": "@@ -0,0 +1,92 @@\n+use crate::comment::CommentStyle;\n+use std::fmt::{self, Display};\n+use syntax_pos::symbol::Symbol;\n+\n+pub(super) struct DocCommentFormatter<'a> {\n+    literal: &'a Symbol,\n+    style: CommentStyle<'a>,\n+}\n+\n+impl<'a> DocCommentFormatter<'a> {\n+    pub(super) fn new(literal: &'a Symbol, style: CommentStyle<'a>) -> Self {\n+        Self { literal, style }\n+    }\n+}\n+\n+impl Display for DocCommentFormatter<'_> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let opener = self.style.opener().trim_end();\n+\n+        let literal_as_str = self.literal.as_str().get();\n+        let line_count = literal_as_str.lines().count();\n+        let last_line_index = line_count - 1;\n+        let lines = literal_as_str.lines().enumerate();\n+\n+        for (index, line) in lines {\n+            if index == last_line_index {\n+                write!(formatter, \"{}{}\", opener, line)?;\n+            } else {\n+                writeln!(formatter, \"{}{}\", opener, line)?;\n+            }\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use syntax_pos::{Globals, GLOBALS};\n+\n+    #[test]\n+    fn literal_controls_leading_spaces() {\n+        test_doc_comment_is_formatted_correctly(\n+            \"    Lorem ipsum\",\n+            \"///    Lorem ipsum\",\n+            CommentStyle::TripleSlash,\n+        );\n+    }\n+\n+    #[test]\n+    fn single_line_doc_comment_is_formatted_correctly() {\n+        test_doc_comment_is_formatted_correctly(\n+            \"Lorem ipsum\",\n+            \"///Lorem ipsum\",\n+            CommentStyle::TripleSlash,\n+        );\n+    }\n+\n+    #[test]\n+    fn multi_line_doc_comment_is_formatted_correctly() {\n+        test_doc_comment_is_formatted_correctly(\n+            \"Lorem ipsum\\nDolor sit amet\",\n+            \"///Lorem ipsum\\n///Dolor sit amet\",\n+            CommentStyle::TripleSlash,\n+        );\n+    }\n+\n+    #[test]\n+    fn whitespace_within_lines_is_preserved() {\n+        test_doc_comment_is_formatted_correctly(\n+            \" Lorem ipsum \\n Dolor sit amet \",\n+            \"/// Lorem ipsum \\n/// Dolor sit amet \",\n+            CommentStyle::TripleSlash,\n+        );\n+    }\n+\n+    fn test_doc_comment_is_formatted_correctly(\n+        literal: &str,\n+        expected_comment: &str,\n+        style: CommentStyle<'_>,\n+    ) {\n+        GLOBALS.set(&Globals::new(), || {\n+            let literal = Symbol::gensym(literal);\n+\n+            assert_eq!(\n+                expected_comment,\n+                format!(\"{}\", DocCommentFormatter::new(&literal, style))\n+            );\n+        });\n+    }\n+}"}]}