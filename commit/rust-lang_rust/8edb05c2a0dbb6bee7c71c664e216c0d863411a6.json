{"sha": "8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZGIwNWMyYTBkYmI2YmVlN2M3MWM2NjRlMjE2YzBkODYzNDExYTY=", "commit": {"author": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-05-20T16:35:47Z"}, "committer": {"name": "Tom Eccles", "email": "tom.eccles@codethink.co.uk", "date": "2020-06-04T14:59:59Z"}, "message": "test: ui: skip tests which aren't appropriate for RISC-V", "tree": {"sha": "2a4fa2636f956ce66dcc9b27f0cf32b96a6fa238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a4fa2636f956ce66dcc9b27f0cf32b96a6fa238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "html_url": "https://github.com/rust-lang/rust/commit/8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/comments", "author": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tblah", "id": 3716681, "node_id": "MDQ6VXNlcjM3MTY2ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/3716681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tblah", "html_url": "https://github.com/tblah", "followers_url": "https://api.github.com/users/tblah/followers", "following_url": "https://api.github.com/users/tblah/following{/other_user}", "gists_url": "https://api.github.com/users/tblah/gists{/gist_id}", "starred_url": "https://api.github.com/users/tblah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tblah/subscriptions", "organizations_url": "https://api.github.com/users/tblah/orgs", "repos_url": "https://api.github.com/users/tblah/repos", "events_url": "https://api.github.com/users/tblah/events{/privacy}", "received_events_url": "https://api.github.com/users/tblah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627957100c9b810a10c30a11cf1a8a3188d5f9f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/627957100c9b810a10c30a11cf1a8a3188d5f9f4", "html_url": "https://github.com/rust-lang/rust/commit/627957100c9b810a10c30a11cf1a8a3188d5f9f4"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "a3f645247714619b465929a3174b086eb1554a42", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -3,6 +3,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n "}, {"sha": "3dccca784151e6b0ce2b2ee77b12c2c3825af03c", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:24:17\n+  --> $DIR/borrowck-asm.rs:25:17\n    |\n LL |         let x = &mut 0isize;\n    |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n@@ -11,7 +11,7 @@ LL |         let z = x;\n    |                 ^ value used here after move\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:31:37\n+  --> $DIR/borrowck-asm.rs:32:37\n    |\n LL |         let y = &mut x;\n    |                 ------ borrow of `x` occurs here\n@@ -23,7 +23,7 @@ LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:39:36\n+  --> $DIR/borrowck-asm.rs:40:36\n    |\n LL |         let x = 3;\n    |             -\n@@ -35,7 +35,7 @@ LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n    |                                    ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:53:36\n+  --> $DIR/borrowck-asm.rs:54:36\n    |\n LL |         let x = 3;\n    |             -\n@@ -47,13 +47,13 @@ LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n    |                                    ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:60:37\n+  --> $DIR/borrowck-asm.rs:61:37\n    |\n LL |             llvm_asm!(\"nop\" : \"=*r\"(x));\n    |                                     ^ use of possibly-uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:68:36\n+  --> $DIR/borrowck-asm.rs:69:36\n    |\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n@@ -65,7 +65,7 @@ LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:76:45\n+  --> $DIR/borrowck-asm.rs:77:45\n    |\n LL |         let x = &mut 2;\n    |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait"}, {"sha": "a7824d919674d4f1946a381de65cff76d399223e", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,6 @@\n // ignore-arm stdcall isn't supported\n // ignore-aarch64 stdcall isn't supported\n+// ignore-riscv64 stdcall isn't supported\n \n extern \"stdcall\" {\n     fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling"}, {"sha": "89ea65fd43fe4766e374be822f75f76c92c80cb1", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,11 +1,11 @@\n error[E0045]: C-variadic function must have C or cdecl calling convention\n-  --> $DIR/variadic-ffi-1.rs:5:5\n+  --> $DIR/variadic-ffi-1.rs:6:5\n    |\n LL |     fn printf(_: *const u8, ...);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n error[E0060]: this function takes at least 2 arguments but 0 arguments were supplied\n-  --> $DIR/variadic-ffi-1.rs:16:9\n+  --> $DIR/variadic-ffi-1.rs:17:9\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n@@ -16,7 +16,7 @@ LL |         foo();\n    |         expected at least 2 arguments\n \n error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n-  --> $DIR/variadic-ffi-1.rs:17:9\n+  --> $DIR/variadic-ffi-1.rs:18:9\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n@@ -27,7 +27,7 @@ LL |         foo(1);\n    |         expected at least 2 arguments\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:19:56\n+  --> $DIR/variadic-ffi-1.rs:20:56\n    |\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                -------------------------------------   ^^^ expected non-variadic fn, found variadic function\n@@ -38,7 +38,7 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n                  found fn item `unsafe extern \"C\" fn(_, _, ...) {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:20:54\n+  --> $DIR/variadic-ffi-1.rs:21:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                -----------------------------------   ^^^ expected variadic fn, found non-variadic function\n@@ -49,37 +49,37 @@ LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n                  found fn item `extern \"C\" fn(_, _) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:22:19\n+  --> $DIR/variadic-ffi-1.rs:23:19\n    |\n LL |         foo(1, 2, 3f32);\n    |                   ^^^^ help: cast the value to `c_double`: `3f32 as c_double`\n \n error[E0617]: can't pass `bool` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:23:19\n+  --> $DIR/variadic-ffi-1.rs:24:19\n    |\n LL |         foo(1, 2, true);\n    |                   ^^^^ help: cast the value to `c_int`: `true as c_int`\n \n error[E0617]: can't pass `i8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:24:19\n+  --> $DIR/variadic-ffi-1.rs:25:19\n    |\n LL |         foo(1, 2, 1i8);\n    |                   ^^^ help: cast the value to `c_int`: `1i8 as c_int`\n \n error[E0617]: can't pass `u8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:25:19\n+  --> $DIR/variadic-ffi-1.rs:26:19\n    |\n LL |         foo(1, 2, 1u8);\n    |                   ^^^ help: cast the value to `c_uint`: `1u8 as c_uint`\n \n error[E0617]: can't pass `i16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:26:19\n+  --> $DIR/variadic-ffi-1.rs:27:19\n    |\n LL |         foo(1, 2, 1i16);\n    |                   ^^^^ help: cast the value to `c_int`: `1i16 as c_int`\n \n error[E0617]: can't pass `u16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:27:19\n+  --> $DIR/variadic-ffi-1.rs:28:19\n    |\n LL |         foo(1, 2, 1u16);\n    |                   ^^^^ help: cast the value to `c_uint`: `1u16 as c_uint`"}, {"sha": "7de561df1361f7594704d06237b1d8b96b5696dd", "filename": "src/test/ui/cfg/conditional-compile-arch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fcfg%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fconditional-compile-arch.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -36,3 +36,6 @@ pub fn main() { }\n \n #[cfg(target_arch = \"sparc64\")]\n pub fn main() { }\n+\n+#[cfg(target_arch = \"riscv64\")]\n+pub fn main() { }"}, {"sha": "3c3e229104e0e2d51c8e6865c402466c14af0fa4", "filename": "src/test/ui/extern/extern-methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-arm\n // ignore-aarch64\n+// ignore-riscv64 fastcall isn't supported\n \n trait A {\n     extern \"fastcall\" fn test1(i: i32);"}, {"sha": "c6ff8a43204de69f99cb12ae4849fe04c5a9ecf3", "filename": "src/test/ui/extern/extern-thiscall.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fextern%2Fextern-thiscall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fextern%2Fextern-thiscall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-thiscall.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-arm\n // ignore-aarch64\n+// ignore-riscv64 thiscall isn't supported\n \n #![feature(abi_thiscall)]\n "}, {"sha": "da50c3fb927a4e885a85ed9e57382f34fc15f9d4", "filename": "src/test/ui/extern/extern-vectorcall.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fextern%2Fextern-vectorcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fextern%2Fextern-vectorcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-vectorcall.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-arm\n // ignore-aarch64\n+// ignore-riscv64 vectorcall isn't supported\n \n #![feature(abi_vectorcall)]\n "}, {"sha": "440570c54943a2c7c0423c7ac0015b55fe2b257d", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,6 +1,8 @@\n // Test that the MSP430 interrupt ABI cannot be used when msp430_interrupt\n // feature gate is not used.\n \n+// ignore-riscv64 msp430 is not supported\n+\n extern \"msp430-interrupt\" fn foo() {}\n //~^ ERROR msp430-interrupt ABI is experimental and subject to change\n "}, {"sha": "554226bd2b962e272d7dfec1fbec7d3daf9dc44f", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-msp430-interrupt.rs:4:8\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:6:8\n    |\n LL | extern \"msp430-interrupt\" fn foo() {}\n    |        ^^^^^^^^^^^^^^^^^^"}, {"sha": "2868d3d396da6f6083936128af4655033d0094e4", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -6,6 +6,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-mips"}, {"sha": "5fbafe60b913f456223d51f18ba52e281d85be5c", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,5 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/llvm-asm-bad-clobber.rs:22:42\n+  --> $DIR/llvm-asm-bad-clobber.rs:23:42\n    |\n LL |         llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n    |                                          ^^^^^^^"}, {"sha": "e3bc7d29941326a3f486d9d18654e3a742f23620", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -3,6 +3,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-mips"}, {"sha": "11c3ed08ddf3fbc19f89f5a520326af829f6ec3a", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,11 +1,11 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:23:44\n+  --> $DIR/llvm-asm-in-bad-modifier.rs:24:44\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n    |                                            ^^^^\n \n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:24:44\n+  --> $DIR/llvm-asm-in-bad-modifier.rs:25:44\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n    |                                            ^^^^"}, {"sha": "daae0c8147a76170fce3f1b83c6d2a5d8223fce9", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -7,6 +7,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-mips"}, {"sha": "644ccdf2293e85a968b9201119c3bbe5fd240cc6", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,11 +1,11 @@\n warning: unrecognized option\n-  --> $DIR/llvm-asm-misplaced-option.rs:24:69\n+  --> $DIR/llvm-asm-misplaced-option.rs:25:69\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n    |                                                                     ^^^^\n \n warning: expected a clobber, found an option\n-  --> $DIR/llvm-asm-misplaced-option.rs:31:85\n+  --> $DIR/llvm-asm-misplaced-option.rs:32:85\n    |\n LL |         llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n    |                                                                                     ^^^^^^^^^^"}, {"sha": "9c62532c824f2597bce1f9c6b1267fb1d1c7ddf2", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -3,6 +3,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-mips"}, {"sha": "9b0aa6be1e91ea99e0917a93fa02a18a76a5173a", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/llvm-asm-out-assign-imm.rs:24:39\n+  --> $DIR/llvm-asm-out-assign-imm.rs:25:39\n    |\n LL |     let x: isize;\n    |         - help: make this binding mutable: `mut x`"}, {"sha": "72edb339b19bb6b12821dbec0084b554be04c151", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -3,6 +3,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-mips"}, {"sha": "afed53e2921f3ecc60d3bfcab8e08bbe85a8751e", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,5 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/llvm-asm-out-no-modifier.rs:22:34\n+  --> $DIR/llvm-asm-out-no-modifier.rs:23:34\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n    |                                  ^^^"}, {"sha": "acf4cf9ff95d76593711f094e99d29ee51946a77", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -3,6 +3,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-mips"}, {"sha": "ac034ab52871bd22a806546f4c543cdb6cea64ae", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/llvm-asm-out-read-uninit.rs:22:48\n+  --> $DIR/llvm-asm-out-read-uninit.rs:23:48\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n    |                                                ^ use of possibly-uninitialized `x`"}, {"sha": "10fbba36d3f9d1e0f281034e4254d2faea9b0d52", "filename": "src/test/ui/target-feature/gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -7,6 +7,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-sparc\n // ignore-sparc64\n // ignore-s390x"}, {"sha": "2d6abcc0a0150d46aabe57d95d84834d1424f043", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:30:18\n+  --> $DIR/gate.rs:31:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "98afded6712d7d353c37fa25bb378c63f00a002e", "filename": "src/test/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -7,6 +7,7 @@\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n+// ignore-riscv64\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64"}, {"sha": "f3995f118d3e9c8862be0513f02380b46c556880", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edb05c2a0dbb6bee7c71c664e216c0d863411a6/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=8edb05c2a0dbb6bee7c71c664e216c0d863411a6", "patch": "@@ -1,29 +1,29 @@\n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:16:1\n+  --> $DIR/invalid-attribute.rs:17:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:18:18\n+  --> $DIR/invalid-attribute.rs:19:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:21:18\n+  --> $DIR/invalid-attribute.rs:22:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:23:18\n+  --> $DIR/invalid-attribute.rs:24:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:27:1\n+  --> $DIR/invalid-attribute.rs:28:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | fn bar() {}\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:33:1\n+  --> $DIR/invalid-attribute.rs:34:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | mod another {}\n    | -------------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:38:1\n+  --> $DIR/invalid-attribute.rs:39:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:43:1\n+  --> $DIR/invalid-attribute.rs:44:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | struct Foo;\n    | ----------- not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:48:1\n+  --> $DIR/invalid-attribute.rs:49:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | enum Bar { }\n    | ------------ not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:53:1\n+  --> $DIR/invalid-attribute.rs:54:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL | union Qux { f1: u16, f2: u16 }\n    | ------------------------------ not a function\n \n error: attribute should be applied to a function\n-  --> $DIR/invalid-attribute.rs:58:1\n+  --> $DIR/invalid-attribute.rs:59:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -89,13 +89,13 @@ LL | trait Baz { }\n    | ------------- not a function\n \n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:63:1\n+  --> $DIR/invalid-attribute.rs:64:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:85:5\n+  --> $DIR/invalid-attribute.rs:86:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |     || {};\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:73:5\n+  --> $DIR/invalid-attribute.rs:74:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}