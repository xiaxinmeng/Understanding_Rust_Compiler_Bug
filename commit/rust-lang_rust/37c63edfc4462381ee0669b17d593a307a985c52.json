{"sha": "37c63edfc4462381ee0669b17d593a307a985c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzYzZWRmYzQ0NjIzODFlZTA2NjliMTdkNTkzYTMwN2E5ODVjNTI=", "commit": {"author": {"name": "Dillon Amburgey", "email": "dillona@dillona.com", "date": "2020-03-21T17:17:01Z"}, "committer": {"name": "Dillon Amburgey", "email": "dillona@dillona.com", "date": "2020-03-21T17:17:01Z"}, "message": "Validate git setup before accessing functionality", "tree": {"sha": "08c80aed41b98a107fadc43f6c6aabd7baa0261e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c80aed41b98a107fadc43f6c6aabd7baa0261e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c63edfc4462381ee0669b17d593a307a985c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c63edfc4462381ee0669b17d593a307a985c52", "html_url": "https://github.com/rust-lang/rust/commit/37c63edfc4462381ee0669b17d593a307a985c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c63edfc4462381ee0669b17d593a307a985c52/comments", "author": {"login": "dillona", "id": 135138, "node_id": "MDQ6VXNlcjEzNTEzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/135138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dillona", "html_url": "https://github.com/dillona", "followers_url": "https://api.github.com/users/dillona/followers", "following_url": "https://api.github.com/users/dillona/following{/other_user}", "gists_url": "https://api.github.com/users/dillona/gists{/gist_id}", "starred_url": "https://api.github.com/users/dillona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dillona/subscriptions", "organizations_url": "https://api.github.com/users/dillona/orgs", "repos_url": "https://api.github.com/users/dillona/repos", "events_url": "https://api.github.com/users/dillona/events{/privacy}", "received_events_url": "https://api.github.com/users/dillona/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dillona", "id": 135138, "node_id": "MDQ6VXNlcjEzNTEzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/135138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dillona", "html_url": "https://github.com/dillona", "followers_url": "https://api.github.com/users/dillona/followers", "following_url": "https://api.github.com/users/dillona/following{/other_user}", "gists_url": "https://api.github.com/users/dillona/gists{/gist_id}", "starred_url": "https://api.github.com/users/dillona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dillona/subscriptions", "organizations_url": "https://api.github.com/users/dillona/orgs", "repos_url": "https://api.github.com/users/dillona/repos", "events_url": "https://api.github.com/users/dillona/events{/privacy}", "received_events_url": "https://api.github.com/users/dillona/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98803c182b2ba6ef5dccb6bf501958249295eac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "html_url": "https://github.com/rust-lang/rust/commit/98803c182b2ba6ef5dccb6bf501958249295eac0"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "6653c505bf538118cec97bb0b1233b5ef52cc1ca", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/37c63edfc4462381ee0669b17d593a307a985c52/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c63edfc4462381ee0669b17d593a307a985c52/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=37c63edfc4462381ee0669b17d593a307a985c52", "patch": "@@ -4,7 +4,7 @@ use crate::Build;\n use build_helper::{output, t};\n use ignore::WalkBuilder;\n use std::path::Path;\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n \n fn rustfmt(src: &Path, rustfmt: &Path, path: &Path, check: bool) {\n     let mut cmd = Command::new(&rustfmt);\n@@ -56,16 +56,48 @@ pub fn format(build: &Build, check: bool) {\n     for ignore in rustfmt_config.ignore {\n         ignore_fmt.add(&format!(\"!{}\", ignore)).expect(&ignore);\n     }\n-    let untracked_paths_output = output(\n-        Command::new(\"git\").arg(\"status\").arg(\"--porcelain\").arg(\"--untracked-files=normal\"),\n-    );\n-    let untracked_paths = untracked_paths_output\n-        .lines()\n-        .filter(|entry| entry.starts_with(\"??\"))\n-        .map(|entry| entry.split(\" \").nth(1).expect(\"every git status entry should list a path\"));\n-    for untracked_path in untracked_paths {\n-        eprintln!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n-        ignore_fmt.add(&format!(\"!{}\", untracked_path)).expect(&untracked_path);\n+    let git_available = match Command::new(\"git\")\n+        .arg(\"--version\")\n+        .stdout(Stdio::null())\n+        .stderr(Stdio::null())\n+        .status()\n+    {\n+        Ok(status) => status.success(),\n+        Err(_) => false,\n+    };\n+    if git_available {\n+        let in_working_tree = match Command::new(\"git\")\n+            .arg(\"rev-parse\")\n+            .arg(\"--is-inside-work-tree\")\n+            .stdout(Stdio::null())\n+            .stderr(Stdio::null())\n+            .status()\n+        {\n+            Ok(status) => status.success(),\n+            Err(_) => false,\n+        };\n+        if in_working_tree {\n+            let untracked_paths_output = output(\n+                Command::new(\"git\")\n+                    .arg(\"status\")\n+                    .arg(\"--porcelain\")\n+                    .arg(\"--untracked-files=normal\"),\n+            );\n+            let untracked_paths = untracked_paths_output\n+                .lines()\n+                .filter(|entry| entry.starts_with(\"??\"))\n+                .map(|entry| {\n+                    entry.split(\" \").nth(1).expect(\"every git status entry should list a path\")\n+                });\n+            for untracked_path in untracked_paths {\n+                eprintln!(\"skip untracked path {} during rustfmt invocations\", untracked_path);\n+                ignore_fmt.add(&format!(\"!{}\", untracked_path)).expect(&untracked_path);\n+            }\n+        } else {\n+            eprintln!(\"Not in git tree. Skipping git-aware format checks\");\n+        }\n+    } else {\n+        eprintln!(\"Could not find usable git. Skipping git-aware format checks\");\n     }\n     let ignore_fmt = ignore_fmt.build().unwrap();\n "}]}