{"sha": "4896b259ebad8d3bfe54568698d2f24796824828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTZiMjU5ZWJhZDhkM2JmZTU0NTY4Njk4ZDJmMjQ3OTY4MjQ4Mjg=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-03-11T11:45:57Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-03-11T11:45:57Z"}, "message": "Filter out proc_macro and proc_macro_attribute", "tree": {"sha": "67d3c57ce2258ab9e4d8b2eba1c1d5266046df56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d3c57ce2258ab9e4d8b2eba1c1d5266046df56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4896b259ebad8d3bfe54568698d2f24796824828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4896b259ebad8d3bfe54568698d2f24796824828", "html_url": "https://github.com/rust-lang/rust/commit/4896b259ebad8d3bfe54568698d2f24796824828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4896b259ebad8d3bfe54568698d2f24796824828/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cdac4a9c798f8e22a4db220020713175eb9159b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdac4a9c798f8e22a4db220020713175eb9159b", "html_url": "https://github.com/rust-lang/rust/commit/1cdac4a9c798f8e22a4db220020713175eb9159b"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "a07b8f4942b7efba17ec7527a9e7af596dd22b76", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4896b259ebad8d3bfe54568698d2f24796824828/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896b259ebad8d3bfe54568698d2f24796824828/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=4896b259ebad8d3bfe54568698d2f24796824828", "patch": "@@ -17,6 +17,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_target::spec::abi::Abi;\n use std::borrow::Cow;\n+use syntax::ast::Attribute;\n use syntax::errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n@@ -88,14 +89,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         match kind {\n             FnKind::ItemFn(.., header, _, attrs) => {\n-                if header.abi != Abi::Rust {\n+                if header.abi != Abi::Rust || requires_exact_signature(attrs) {\n                     return;\n                 }\n-                for a in attrs {\n-                    if a.meta_item_list().is_some() && a.name() == \"proc_macro_derive\" {\n-                        return;\n-                    }\n-                }\n             },\n             FnKind::Method(..) => (),\n             _ => return,\n@@ -323,6 +319,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n     }\n }\n \n+/// Functions marked with these attributes must have the exact signature.\n+fn requires_exact_signature(attrs: &[Attribute]) -> bool {\n+    attrs.iter().any(|attr| {\n+        [\"proc_macro\", \"proc_macro_attribute\", \"proc_macro_derive\"]\n+            .iter()\n+            .any(|&allow| attr.name() == allow)\n+    })\n+}\n+\n struct MovedVariablesCtxt<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     moved_vars: FxHashSet<HirId>,"}, {"sha": "78a0e92d1797976c8a1fcfcdb28aa4d21f90e168", "filename": "tests/ui/needless_pass_by_value_proc_macro.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4896b259ebad8d3bfe54568698d2f24796824828/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4896b259ebad8d3bfe54568698d2f24796824828/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs?ref=4896b259ebad8d3bfe54568698d2f24796824828", "patch": "@@ -9,3 +9,13 @@ use proc_macro::TokenStream;\n pub fn foo(_input: TokenStream) -> TokenStream {\n     unimplemented!()\n }\n+\n+#[proc_macro]\n+pub fn bar(_input: TokenStream) -> TokenStream {\n+    unimplemented!()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn baz(_args: TokenStream, _input: TokenStream) -> TokenStream {\n+    unimplemented!()\n+}"}]}