{"sha": "325682ad56d23369059ea93d5a8d44e5782e41cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNTY4MmFkNTZkMjMzNjkwNTllYTkzZDVhOGQ0NGU1NzgyZTQxY2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-07T17:33:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-07T17:33:24Z"}, "message": "Auto merge of #1301 - RalfJung:global-leaks, r=RalfJung\n\nmemory reachable through globals is not a leak\n\nBlocked on https://github.com/rust-lang/rust/pull/70762\nFixes https://github.com/rust-lang/miri/issues/940", "tree": {"sha": "304ad82747b1eb8b36174ce04c6279ea9bb4332c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304ad82747b1eb8b36174ce04c6279ea9bb4332c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/325682ad56d23369059ea93d5a8d44e5782e41cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/325682ad56d23369059ea93d5a8d44e5782e41cf", "html_url": "https://github.com/rust-lang/rust/commit/325682ad56d23369059ea93d5a8d44e5782e41cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/325682ad56d23369059ea93d5a8d44e5782e41cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3342f155e16b4d9aef92e90b766108eedbee33e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3342f155e16b4d9aef92e90b766108eedbee33e4", "html_url": "https://github.com/rust-lang/rust/commit/3342f155e16b4d9aef92e90b766108eedbee33e4"}, {"sha": "7841f445932096adcf07944b707af73fc73830f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7841f445932096adcf07944b707af73fc73830f1", "html_url": "https://github.com/rust-lang/rust/commit/7841f445932096adcf07944b707af73fc73830f1"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "b1fd330a9d66553e26f0a8702f0faf3159c862d7", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/325682ad56d23369059ea93d5a8d44e5782e41cf/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/325682ad56d23369059ea93d5a8d44e5782e41cf/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=325682ad56d23369059ea93d5a8d44e5782e41cf", "patch": "@@ -1 +1 @@\n-e6cef0445779724b469ab7b9a8d3c05d9e848ca8\n+42abbd8878d3b67238f3611b0587c704ba94f39c"}, {"sha": "3c598373050667f4e516046d8bf5475e076576bd", "filename": "src/machine.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/325682ad56d23369059ea93d5a8d44e5782e41cf/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/325682ad56d23369059ea93d5a8d44e5782e41cf/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=325682ad56d23369059ea93d5a8d44e5782e41cf", "patch": "@@ -6,6 +6,7 @@ use std::cell::RefCell;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n use std::time::Instant;\n+use std::fmt;\n \n use log::trace;\n use rand::rngs::StdRng;\n@@ -69,6 +70,31 @@ impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n     }\n }\n \n+impl MayLeak for MiriMemoryKind {\n+    #[inline(always)]\n+    fn may_leak(self) -> bool {\n+        use self::MiriMemoryKind::*;\n+        match self {\n+            Rust | C | WinHeap | Env => false,\n+            Machine | Global => true,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for MiriMemoryKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use self::MiriMemoryKind::*;\n+        match self {\n+            Rust => write!(f, \"Rust heap\"),\n+            C => write!(f, \"C heap\"),\n+            WinHeap => write!(f, \"Windows heap\"),\n+            Machine => write!(f, \"machine-managed memory\"),\n+            Env => write!(f, \"environment variable\"),\n+            Global => write!(f, \"global\"),\n+        }\n+    }\n+}\n+\n /// Extra per-allocation data\n #[derive(Debug, Clone)]\n pub struct AllocExtra {\n@@ -525,14 +551,3 @@ impl AllocationExtra<Tag> for AllocExtra {\n         }\n     }\n }\n-\n-impl MayLeak for MiriMemoryKind {\n-    #[inline(always)]\n-    fn may_leak(self) -> bool {\n-        use self::MiriMemoryKind::*;\n-        match self {\n-            Rust | C | WinHeap | Env => false,\n-            Machine | Global => true,\n-        }\n-    }\n-}"}, {"sha": "50a590e448a6ab61a8383fc4f72423f27bd31915", "filename": "tests/compile-fail/stack_free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/325682ad56d23369059ea93d5a8d44e5782e41cf/tests%2Fcompile-fail%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/325682ad56d23369059ea93d5a8d44e5782e41cf/tests%2Fcompile-fail%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstack_free.rs?ref=325682ad56d23369059ea93d5a8d44e5782e41cf", "patch": "@@ -1,7 +1,7 @@\n // Validation/SB changes why we fail\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-// error-pattern: deallocating `Stack` memory using `Machine(Rust)` deallocation operation\n+// error-pattern: deallocating stack variable memory using Rust heap deallocation operation\n \n fn main() {\n     let x = 42;"}, {"sha": "b12cbbf6e64f71e71fe37d77aced2e85e9cef871", "filename": "tests/run-pass/leak-in-static.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/325682ad56d23369059ea93d5a8d44e5782e41cf/tests%2Frun-pass%2Fleak-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/325682ad56d23369059ea93d5a8d44e5782e41cf/tests%2Frun-pass%2Fleak-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fleak-in-static.rs?ref=325682ad56d23369059ea93d5a8d44e5782e41cf", "patch": "@@ -0,0 +1,8 @@\n+static mut LEAKER: Option<Box<Vec<i32>>> = None;\n+\n+fn main() {\n+    // Having memory \"leaked\" in globals is allowed.\n+    unsafe {\n+        LEAKER = Some(Box::new(vec![0; 42]));\n+    }\n+}"}, {"sha": "7689b85f765037c8e15dd96d88fe074b363346a2", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/325682ad56d23369059ea93d5a8d44e5782e41cf/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/325682ad56d23369059ea93d5a8d44e5782e41cf/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=325682ad56d23369059ea93d5a8d44e5782e41cf", "patch": "@@ -77,9 +77,6 @@ fn main() {\n     test(None, |_old_val| { debug_assert!(false); loop {} });\n     test(None, |_old_val| { unsafe { (1 as *const i32).read() }; loop {} }); // trigger debug-assertion in libstd\n \n-    // Cleanup: reset to default hook.\n-    drop(std::panic::take_hook());\n-\n     eprintln!(\"Success!\"); // Make sure we get this in stderr\n }\n "}]}