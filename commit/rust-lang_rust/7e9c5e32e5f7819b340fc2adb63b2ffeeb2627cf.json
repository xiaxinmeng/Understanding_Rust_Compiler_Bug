{"sha": "7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOWM1ZTMyZTVmNzgxOWIzNDBmYzJhZGI2M2IyZmZlZWIyNjI3Y2Y=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-29T19:02:06Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-29T19:02:06Z"}, "message": "Merge #1344\n\n1344: Highlight primitive types r=matklad a=lnicola\n\nThis is a hack to get better highlighting of primitive types until #1340.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "a7cd01d9b83182fa8c5bb0c3767b7cb04f8d3f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cd01d9b83182fa8c5bb0c3767b7cb04f8d3f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf", "html_url": "https://github.com/rust-lang/rust/commit/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "cb21a219987eac0f8dc08f0c858e8a7154fccd04", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb21a219987eac0f8dc08f0c858e8a7154fccd04", "html_url": "https://github.com/rust-lang/rust/commit/cb21a219987eac0f8dc08f0c858e8a7154fccd04"}, {"sha": "b1e59cb095fa891b9739f6da4f2686e50d64be04", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e59cb095fa891b9739f6da4f2686e50d64be04", "html_url": "https://github.com/rust-lang/rust/commit/b1e59cb095fa891b9739f6da4f2686e50d64be04"}], "stats": {"total": 97, "additions": 55, "deletions": 42}, "files": [{"sha": "d79d35bf310ba5a6d49fafc161270e6e9102ab98", "filename": "crates/ra_ide_api/src/snapshots/highlighting.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf", "patch": "@@ -19,13 +19,13 @@\n </style>\n <pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"type\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"function\">x</span>: <span class=\"text\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"function\">y</span>: <span class=\"text\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"function\">x</span>: <span class=\"type\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"function\">y</span>: <span class=\"type\">i32</span>,\n }\n \n-<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type type\">T</span>&gt;() -&gt; <span class=\"type\">T</span> {\n+<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type\">T</span>&gt;() -&gt; <span class=\"type\">T</span> {\n     <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>();\n-    <span class=\"function\">foo</span>::&lt;<span class=\"type text\">i32</span>&gt;();\n+    <span class=\"function\">foo</span>::&lt;<span class=\"type\">i32</span>&gt;();\n }\n \n <span class=\"comment\">// comment</span>"}, {"sha": "4b24754a800b3bdf409544e216669255c3e27b6c", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 51, "deletions": 38, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=7e9c5e32e5f7819b340fc2adb63b2ffeeb2627cf", "patch": "@@ -30,6 +30,14 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n     }\n }\n \n+fn is_prim_type(node: &ast::NameRef) -> bool {\n+    match node.text().as_str() {\n+        \"u8\" | \"i8\" | \"u16\" | \"i16\" | \"u32\" | \"i32\" | \"u64\" | \"i64\" | \"u128\" | \"i128\" | \"usize\"\n+        | \"isize\" | \"f32\" | \"f64\" | \"bool\" | \"char\" | \"str\" => true,\n+        _ => false,\n+    }\n+}\n+\n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let source_file = db.parse(file_id).tree;\n@@ -62,46 +70,52 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             ATTR => \"attribute\",\n             NAME_REF => {\n                 if let Some(name_ref) = node.as_node().and_then(ast::NameRef::cast) {\n-                    use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n-                    use hir::{ModuleDef, ImplItem};\n+                    // FIXME: revisit this after #1340\n+                    if is_prim_type(name_ref) {\n+                        \"type\"\n+                    } else {\n+                        use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n+                        use hir::{ModuleDef, ImplItem};\n \n-                    // FIXME: try to reuse the SourceAnalyzers\n-                    let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n-                    match classify_name_ref(db, &analyzer, name_ref) {\n-                        Some(Method(_)) => \"function\",\n-                        Some(Macro(_)) => \"macro\",\n-                        Some(FieldAccess(_)) => \"field\",\n-                        Some(AssocItem(ImplItem::Method(_))) => \"function\",\n-                        Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n-                        Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n-                        Some(Def(ModuleDef::Module(_))) => \"module\",\n-                        Some(Def(ModuleDef::Function(_))) => \"function\",\n-                        Some(Def(ModuleDef::Struct(_))) => \"type\",\n-                        Some(Def(ModuleDef::Union(_))) => \"type\",\n-                        Some(Def(ModuleDef::Enum(_))) => \"type\",\n-                        Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Const(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Static(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Trait(_))) => \"type\",\n-                        Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n-                        Some(SelfType(_)) => \"type\",\n-                        Some(Pat(ptr)) => {\n-                            binding_hash = Some({\n-                                let text = ptr\n-                                    .syntax_node_ptr()\n-                                    .to_node(&source_file.syntax())\n-                                    .text()\n-                                    .to_smol_string();\n-                                let shadow_count =\n-                                    bindings_shadow_count.entry(text.clone()).or_default();\n-                                calc_binding_hash(file_id, &text, *shadow_count)\n-                            });\n+                        // FIXME: try to reuse the SourceAnalyzers\n+                        let analyzer =\n+                            hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n+                        match classify_name_ref(db, &analyzer, name_ref) {\n+                            Some(Method(_)) => \"function\",\n+                            Some(Macro(_)) => \"macro\",\n+                            Some(FieldAccess(_)) => \"field\",\n+                            Some(AssocItem(ImplItem::Method(_))) => \"function\",\n+                            Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n+                            Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n+                            Some(Def(ModuleDef::Module(_))) => \"module\",\n+                            Some(Def(ModuleDef::Function(_))) => \"function\",\n+                            Some(Def(ModuleDef::Struct(_))) => \"type\",\n+                            Some(Def(ModuleDef::Union(_))) => \"type\",\n+                            Some(Def(ModuleDef::Enum(_))) => \"type\",\n+                            Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n+                            Some(Def(ModuleDef::Const(_))) => \"constant\",\n+                            Some(Def(ModuleDef::Static(_))) => \"constant\",\n+                            Some(Def(ModuleDef::Trait(_))) => \"type\",\n+                            Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n+                            Some(SelfType(_)) => \"type\",\n+                            Some(Pat(ptr)) => {\n+                                binding_hash = Some({\n+                                    let text = ptr\n+                                        .syntax_node_ptr()\n+                                        .to_node(&source_file.syntax())\n+                                        .text()\n+                                        .to_smol_string();\n+                                    let shadow_count =\n+                                        bindings_shadow_count.entry(text.clone()).or_default();\n+                                    calc_binding_hash(file_id, &text, *shadow_count)\n+                                });\n \n-                            \"variable\"\n+                                \"variable\"\n+                            }\n+                            Some(SelfParam(_)) => \"type\",\n+                            Some(GenericParam(_)) => \"type\",\n+                            None => \"text\",\n                         }\n-                        Some(SelfParam(_)) => \"type\",\n-                        Some(GenericParam(_)) => \"type\",\n-                        None => \"text\",\n                     }\n                 } else {\n                     \"text\"\n@@ -138,7 +152,6 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     \"text\"\n                 }\n             }\n-            TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM => \"type\",\n             INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n             LIFETIME => \"parameter\",\n             T![unsafe] => \"keyword.unsafe\","}]}