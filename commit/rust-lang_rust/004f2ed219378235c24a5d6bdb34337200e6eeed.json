{"sha": "004f2ed219378235c24a5d6bdb34337200e6eeed", "node_id": "C_kwDOAAsO6NoAKDAwNGYyZWQyMTkzNzgyMzVjMjRhNWQ2YmRiMzQzMzcyMDBlNmVlZWQ", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-04T02:03:55Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-04T02:03:55Z"}, "message": "Do not recover from `Ty?` in macro parsing\n\nFollow up to #92746. Address #94510.", "tree": {"sha": "522a9f7069f5099bda0f7f8077773baa2a61f86d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/522a9f7069f5099bda0f7f8077773baa2a61f86d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/004f2ed219378235c24a5d6bdb34337200e6eeed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/004f2ed219378235c24a5d6bdb34337200e6eeed", "html_url": "https://github.com/rust-lang/rust/commit/004f2ed219378235c24a5d6bdb34337200e6eeed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/004f2ed219378235c24a5d6bdb34337200e6eeed/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32cbc7630b2d6b7141e2588f91380c1a58cf0016", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cbc7630b2d6b7141e2588f91380c1a58cf0016", "html_url": "https://github.com/rust-lang/rust/commit/32cbc7630b2d6b7141e2588f91380c1a58cf0016"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "40daf4eb28fc1b558e78fbf8e1b016b048b731ac", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/004f2ed219378235c24a5d6bdb34337200e6eeed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004f2ed219378235c24a5d6bdb34337200e6eeed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=004f2ed219378235c24a5d6bdb34337200e6eeed", "patch": "@@ -1,5 +1,5 @@\n use super::pat::Expected;\n-use super::ty::{AllowPlus, IsAsCast};\n+use super::ty::{AllowPlus, RecoverQuestionMark};\n use super::{\n     BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions,\n     SemiColonMode, SeqSep, TokenExpectType, TokenType,\n@@ -1049,9 +1049,9 @@ impl<'a> Parser<'a> {\n     pub(super) fn maybe_recover_from_question_mark(\n         &mut self,\n         ty: P<Ty>,\n-        is_as_cast: IsAsCast,\n+        recover_question_mark: RecoverQuestionMark,\n     ) -> P<Ty> {\n-        if let IsAsCast::Yes = is_as_cast {\n+        if let RecoverQuestionMark::No = recover_question_mark {\n             return ty;\n         }\n         if self.token == token::Question {"}, {"sha": "40902fa18331333568612d39c47405282c111909", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/004f2ed219378235c24a5d6bdb34337200e6eeed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004f2ed219378235c24a5d6bdb34337200e6eeed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=004f2ed219378235c24a5d6bdb34337200e6eeed", "patch": "@@ -140,7 +140,7 @@ impl<'a> Parser<'a> {\n             }\n \n             NonterminalKind::Ty => {\n-                token::NtTy(self.collect_tokens_no_attrs(|this| this.parse_ty())?)\n+                token::NtTy(self.collect_tokens_no_attrs(|this| this.parse_no_question_mark_recover())?)\n             }\n             // this could be handled like a token, since it is one\n             NonterminalKind::Ident"}, {"sha": "436c5bd4fcac23fc7b62f5f305d0442530613c21", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/004f2ed219378235c24a5d6bdb34337200e6eeed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004f2ed219378235c24a5d6bdb34337200e6eeed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=004f2ed219378235c24a5d6bdb34337200e6eeed", "patch": "@@ -44,7 +44,7 @@ pub(super) enum RecoverQPath {\n     No,\n }\n \n-pub(super) enum IsAsCast {\n+pub(super) enum RecoverQuestionMark {\n     Yes,\n     No,\n }\n@@ -105,7 +105,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -119,7 +119,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             Some(ty_params),\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -133,7 +133,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -150,7 +150,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -163,9 +163,21 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::Yes,\n+            RecoverQuestionMark::No,\n         )\n     }\n+\n+    pub(super) fn parse_no_question_mark_recover(&mut self) -> PResult<'a, P<Ty>> {\n+        self.parse_ty_common(\n+            AllowPlus::Yes,\n+            AllowCVariadic::No,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::Yes,\n+            None,\n+            RecoverQuestionMark::No,\n+        )\n+    }\n+\n     /// Parse a type without recovering `:` as `->` to avoid breaking code such as `where fn() : for<'a>`\n     pub(super) fn parse_ty_for_where_clause(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n@@ -174,7 +186,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::OnlyFatArrow,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -193,7 +205,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n-                IsAsCast::No,\n+                RecoverQuestionMark::Yes,\n             )?;\n             FnRetTy::Ty(ty)\n         } else if recover_return_sign.can_recover(&self.token.kind) {\n@@ -214,7 +226,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n-                IsAsCast::No,\n+                RecoverQuestionMark::Yes,\n             )?;\n             FnRetTy::Ty(ty)\n         } else {\n@@ -229,7 +241,7 @@ impl<'a> Parser<'a> {\n         recover_qpath: RecoverQPath,\n         recover_return_sign: RecoverReturnSign,\n         ty_generics: Option<&Generics>,\n-        is_as_cast: IsAsCast,\n+        recover_question_mark: RecoverQuestionMark,\n     ) -> PResult<'a, P<Ty>> {\n         let allow_qpath_recovery = recover_qpath == RecoverQPath::Yes;\n         maybe_recover_from_interpolated_ty_qpath!(self, allow_qpath_recovery);\n@@ -305,7 +317,7 @@ impl<'a> Parser<'a> {\n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n-        let ty = self.maybe_recover_from_question_mark(ty, is_as_cast);\n+        let ty = self.maybe_recover_from_question_mark(ty, recover_question_mark);\n         self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)\n     }\n "}, {"sha": "e2a681ddd11155a07290586ddd46c14630fb8342", "filename": "src/test/ui/parser/trailing-question-in-macro-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/004f2ed219378235c24a5d6bdb34337200e6eeed/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004f2ed219378235c24a5d6bdb34337200e6eeed/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.rs?ref=004f2ed219378235c24a5d6bdb34337200e6eeed", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! fn_expr {\n+    ($return_type:ty : $body:expr) => {\n+        (|| -> $return_type { $body })()\n+    };\n+    ($body:expr) => {\n+        (|| $body)()\n+    };\n+}\n+\n+\n+fn main() {\n+    fn_expr!{ o?.when(|&i| i > 0)?.when(|&i| i%2 == 0) };\n+    //~^ ERROR cannot find value `o` in this scope\n+}"}, {"sha": "c096ae04fbbb6dd277ab9a4049baee571b1baab3", "filename": "src/test/ui/parser/trailing-question-in-macro-type.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/004f2ed219378235c24a5d6bdb34337200e6eeed/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/004f2ed219378235c24a5d6bdb34337200e6eeed/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.stderr?ref=004f2ed219378235c24a5d6bdb34337200e6eeed", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `o` in this scope\n+  --> $DIR/trailing-question-in-macro-type.rs:12:15\n+   |\n+LL |     fn_expr!{ o?.when(|&i| i > 0)?.when(|&i| i%2 == 0) };\n+   |               ^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}