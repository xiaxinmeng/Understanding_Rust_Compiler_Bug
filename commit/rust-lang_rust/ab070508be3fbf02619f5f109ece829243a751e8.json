{"sha": "ab070508be3fbf02619f5f109ece829243a751e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDcwNTA4YmUzZmJmMDI2MTlmNWYxMDllY2U4MjkyNDNhNzUxZTg=", "commit": {"author": {"name": "Kampfkarren", "email": "boynedmaster@gmail.com", "date": "2018-12-13T15:43:13Z"}, "committer": {"name": "Kampfkarren", "email": "boynedmaster@gmail.com", "date": "2018-12-13T15:43:13Z"}, "message": "Lint for Vec<Box<T: Sized>> - Closes #3530", "tree": {"sha": "95ffe3607d8b1d6d241354e2379540001f3d2ed2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ffe3607d8b1d6d241354e2379540001f3d2ed2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab070508be3fbf02619f5f109ece829243a751e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab070508be3fbf02619f5f109ece829243a751e8", "html_url": "https://github.com/rust-lang/rust/commit/ab070508be3fbf02619f5f109ece829243a751e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab070508be3fbf02619f5f109ece829243a751e8/comments", "author": {"login": "Kampfkarren", "id": 3190756, "node_id": "MDQ6VXNlcjMxOTA3NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3190756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kampfkarren", "html_url": "https://github.com/Kampfkarren", "followers_url": "https://api.github.com/users/Kampfkarren/followers", "following_url": "https://api.github.com/users/Kampfkarren/following{/other_user}", "gists_url": "https://api.github.com/users/Kampfkarren/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kampfkarren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kampfkarren/subscriptions", "organizations_url": "https://api.github.com/users/Kampfkarren/orgs", "repos_url": "https://api.github.com/users/Kampfkarren/repos", "events_url": "https://api.github.com/users/Kampfkarren/events{/privacy}", "received_events_url": "https://api.github.com/users/Kampfkarren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kampfkarren", "id": 3190756, "node_id": "MDQ6VXNlcjMxOTA3NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3190756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kampfkarren", "html_url": "https://github.com/Kampfkarren", "followers_url": "https://api.github.com/users/Kampfkarren/followers", "following_url": "https://api.github.com/users/Kampfkarren/following{/other_user}", "gists_url": "https://api.github.com/users/Kampfkarren/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kampfkarren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kampfkarren/subscriptions", "organizations_url": "https://api.github.com/users/Kampfkarren/orgs", "repos_url": "https://api.github.com/users/Kampfkarren/repos", "events_url": "https://api.github.com/users/Kampfkarren/events{/privacy}", "received_events_url": "https://api.github.com/users/Kampfkarren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/379c934f3f0c1266e2a4112a4babe7ec0a6368ce", "html_url": "https://github.com/rust-lang/rust/commit/379c934f3f0c1266e2a4112a4babe7ec0a6368ce"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "9e3f0a6505dc7b5175eb7e0d984fd119f2a8090b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab070508be3fbf02619f5f109ece829243a751e8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab070508be3fbf02619f5f109ece829243a751e8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ab070508be3fbf02619f5f109ece829243a751e8", "patch": "@@ -766,6 +766,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::UNIT_ARG,\n         types::UNIT_CMP,\n         types::UNNECESSARY_CAST,\n+        types::VEC_BOX_SIZED,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,\n@@ -931,6 +932,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::TYPE_COMPLEXITY,\n         types::UNIT_ARG,\n         types::UNNECESSARY_CAST,\n+        types::VEC_BOX_SIZED,\n         unused_label::UNUSED_LABEL,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);"}, {"sha": "b85f21ce9703a7fe744f7c8a03a473fe7b2e80c6", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ab070508be3fbf02619f5f109ece829243a751e8/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab070508be3fbf02619f5f109ece829243a751e8/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ab070508be3fbf02619f5f109ece829243a751e8", "patch": "@@ -24,7 +24,7 @@ use crate::rustc_target::spec::abi::Abi;\n use crate::rustc_typeck::hir_ty_to_ty;\n use crate::syntax::ast::{FloatTy, IntTy, UintTy};\n use crate::syntax::errors::DiagnosticBuilder;\n-use crate::syntax::source_map::Span;\n+use crate::syntax::source_map::{DUMMY_SP, Span};\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n@@ -68,6 +68,33 @@ declare_clippy_lint! {\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n \n+/// **What it does:** Checks for use of `Vec<Box<T>>` where T: Sized anywhere in the code.\n+///\n+/// **Why is this bad?** `Vec` already keeps its contents in a separate area on\n+/// the heap. So if you `Box` its contents, you just add another level of indirection.\n+///\n+/// **Known problems:** Vec<Box<T: Sized>> makes sense if T is a large type (see #3530, 1st comment).\n+///\n+/// **Example:**\n+/// ```rust\n+/// struct X {\n+///     values: Vec<Box<i32>>,\n+/// }\n+/// ```\n+///\n+/// Better:\n+///\n+/// ```rust\n+/// struct X {\n+///     values: Vec<i32>,\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub VEC_BOX_SIZED,\n+    complexity,\n+    \"usage of `Vec<Box<T>>` where T: Sized, vector elements are already on the heap\"\n+}\n+\n /// **What it does:** Checks for use of `Option<Option<_>>` in function signatures and type\n /// definitions\n ///\n@@ -148,7 +175,7 @@ declare_clippy_lint! {\n \n impl LintPass for TypePass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(BOX_VEC, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n+        lint_array!(BOX_VEC, VEC_BOX_SIZED, OPTION_OPTION, LINKEDLIST, BORROWED_BOX)\n     }\n }\n \n@@ -238,6 +265,40 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                         );\n                         return; // don't recurse into the type\n                     }\n+                } else if match_def_path(cx.tcx, def_id, &paths::VEC) {\n+                    if_chain! {\n+                        // Get the _ part of Vec<_>\n+                        if let Some(ref last) = last_path_segment(qpath).args;\n+                        if let Some(ty) = last.args.iter().find_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            GenericArg::Lifetime(_) => None,\n+                        });\n+                        // ty is now _ at this point\n+                        if let TyKind::Path(ref ty_qpath) = ty.node;\n+                        let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n+                        if let Some(def_id) = opt_def_id(def);\n+                        if Some(def_id) == cx.tcx.lang_items().owned_box();\n+                        // At this point, we know ty is Box<T>, now get T\n+                        if let Some(ref last) = last_path_segment(ty_qpath).args;\n+                        if let Some(ty) = last.args.iter().find_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            GenericArg::Lifetime(_) => None,\n+                        });\n+                        if let TyKind::Path(ref ty_qpath) = ty.node;\n+                        let def = cx.tables.qpath_def(ty_qpath, ty.hir_id);\n+                        if let Some(def_id) = opt_def_id(def);\n+                        let boxed_type = cx.tcx.type_of(def_id);\n+                        if boxed_type.is_sized(cx.tcx.at(DUMMY_SP), cx.param_env);\n+                        then {\n+                            span_help_and_lint(\n+                                cx,\n+                                VEC_BOX_SIZED,\n+                                ast_ty.span,\n+                                \"you seem to be trying to use `Vec<Box<T>>`, but T is Sized. Consider using just `Vec<T>`\",\n+                                \"`Vec<T>` is already on the heap, `Vec<Box<T>>` makes an extra allocation.\",\n+                            )\n+                        }\n+                    }\n                 } else if match_def_path(cx.tcx, def_id, &paths::OPTION) {\n                     if match_type_parameter(cx, qpath, &paths::OPTION) {\n                         span_lint("}, {"sha": "d740f95edfe27fbf4e32223ca8a1de8358b1b4c7", "filename": "tests/ui/vec_box_sized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab070508be3fbf02619f5f109ece829243a751e8/tests%2Fui%2Fvec_box_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab070508be3fbf02619f5f109ece829243a751e8/tests%2Fui%2Fvec_box_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.rs?ref=ab070508be3fbf02619f5f109ece829243a751e8", "patch": "@@ -0,0 +1,17 @@\n+struct SizedStruct {\n+\t_a: i32,\n+}\n+\n+struct UnsizedStruct {\n+\t_a: [i32],\n+}\n+\n+struct StructWithVecBox {\n+\tsized_type: Vec<Box<SizedStruct>>,\n+}\n+\n+struct StructWithVecBoxButItsUnsized {\n+\tunsized_type: Vec<Box<UnsizedStruct>>,\n+}\n+\n+fn main() {}"}, {"sha": "80f54b51a40b5e46aa21507dd7176881e4bfc5b0", "filename": "tests/ui/vec_box_sized.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab070508be3fbf02619f5f109ece829243a751e8/tests%2Fui%2Fvec_box_sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab070508be3fbf02619f5f109ece829243a751e8/tests%2Fui%2Fvec_box_sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_box_sized.stderr?ref=ab070508be3fbf02619f5f109ece829243a751e8", "patch": "@@ -0,0 +1,11 @@\n+error: you seem to be trying to use `Vec<Box<T>>`, but T is Sized. Consider using just `Vec<T>`\n+  --> $DIR/vec_box_sized.rs:10:14\n+   |\n+10 |     sized_type: Vec<Box<SizedStruct>>,\n+   |                 ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::vec-box-sized` implied by `-D warnings`\n+   = help: `Vec<T>` is already on the heap, `Vec<Box<T>>` makes an extra allocation.\n+\n+error: aborting due to previous error\n+"}]}