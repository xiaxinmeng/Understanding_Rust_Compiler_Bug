{"sha": "9fa6b3c15758e85657d5be051cfa57022a8bbe57", "node_id": "C_kwDOAAsO6NoAKDlmYTZiM2MxNTc1OGU4NTY1N2Q1YmUwNTFjZmE1NzAyMmE4YmJlNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T06:29:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T06:29:46Z"}, "message": "Auto merge of #99929 - the8472:default-iters, r=scottmcm\n\nImplement Default for some alloc/core iterators\n\nAdd `Default` impls to the following collection iterators:\n\n* slice::{Iter, IterMut}\n* binary_heap::IntoIter\n* btree::map::{Iter, IterMut, Keys, Values, Range, IntoIter, IntoKeys, IntoValues}\n* btree::set::{Iter, IntoIter, Range}\n* linked_list::IntoIter\n* vec::IntoIter\n\nand these adapters:\n\n* adapters::{Chain, Cloned, Copied, Rev, Enumerate, Flatten, Fuse, Rev}\n\nFor iterators which are generic over allocators it only implements it for the global allocator because we can't conjure an allocator from nothing or would have to turn the allocator field into an `Option` just for this change.\n\nThese changes will be insta-stable.\n\nACP: https://github.com/rust-lang/libs-team/issues/77", "tree": {"sha": "833bbcd08e49656c242961cf5e6de45eadca7fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/833bbcd08e49656c242961cf5e6de45eadca7fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa6b3c15758e85657d5be051cfa57022a8bbe57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa6b3c15758e85657d5be051cfa57022a8bbe57", "html_url": "https://github.com/rust-lang/rust/commit/9fa6b3c15758e85657d5be051cfa57022a8bbe57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa6b3c15758e85657d5be051cfa57022a8bbe57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a69af213f4bf23014dc91903e7a934c88f6b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a69af213f4bf23014dc91903e7a934c88f6b9e", "html_url": "https://github.com/rust-lang/rust/commit/24a69af213f4bf23014dc91903e7a934c88f6b9e"}, {"sha": "e44836faf6ff114805062f723b349d6e10bf86b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e44836faf6ff114805062f723b349d6e10bf86b6", "html_url": "https://github.com/rust-lang/rust/commit/e44836faf6ff114805062f723b349d6e10bf86b6"}], "stats": {"total": 371, "additions": 371, "deletions": 0}, "files": [{"sha": "d0a87e3fb9fd5c09976f44d4a855dcd1ce096fe9", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -1468,6 +1468,20 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IntoIter<T> {\n+    /// Creates an empty `binary_heap::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::binary_heap;\n+    /// let iter: binary_heap::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        IntoIter { iter: Default::default() }\n+    }\n+}\n+\n // In addition to the SAFETY invariants of the following three unsafe traits\n // also refer to the vec::in_place_collect module documentation to get an overview\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]"}, {"sha": "61db46314b780b50063625021d643e8f0b47c566", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -362,6 +362,20 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a, K: 'a, V: 'a> Default for Iter<'a, K, V> {\n+    /// Creates an empty `btree_map::Iter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Iter<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Iter { range: Default::default(), length: 0 }\n+    }\n+}\n+\n /// A mutable iterator over the entries of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its\n@@ -386,6 +400,20 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<'a, K: 'a, V: 'a> Default for IterMut<'a, K, V> {\n+    /// Creates an empty `btree_map::IterMut`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IterMut<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        IterMut { range: Default::default(), length: 0, _marker: PhantomData {} }\n+    }\n+}\n+\n /// An owning iterator over the entries of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n@@ -421,6 +449,23 @@ impl<K: Debug, V: Debug, A: Allocator + Clone> Debug for IntoIter<K, V, A> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V, A> Default for IntoIter<K, V, A>\n+where\n+    A: Allocator + Default + Clone,\n+{\n+    /// Creates an empty `btree_map::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IntoIter<u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        IntoIter { range: Default::default(), length: 0, alloc: Default::default() }\n+    }\n+}\n+\n /// An iterator over the keys of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`keys`] method on [`BTreeMap`]. See its\n@@ -1768,6 +1813,20 @@ impl<K, V> Clone for Keys<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for Keys<'_, K, V> {\n+    /// Creates an empty `btree_map::Keys`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Keys<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Keys { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n@@ -1809,6 +1868,20 @@ impl<K, V> Clone for Values<'_, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for Values<'_, K, V> {\n+    /// Creates an empty `btree_map::Values`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Values<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Values { inner: Default::default() }\n+    }\n+}\n+\n /// An iterator produced by calling `drain_filter` on BTreeMap.\n #[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]\n pub struct DrainFilter<\n@@ -1945,6 +2018,20 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V> Default for Range<'_, K, V> {\n+    /// Creates an empty `btree_map::Range`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Range<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.count(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Range { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     type Item = &'a mut V;\n@@ -2021,6 +2108,23 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoKeys<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoKeys<K, V, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V, A> Default for IntoKeys<K, V, A>\n+where\n+    A: Allocator + Default + Clone,\n+{\n+    /// Creates an empty `btree_map::IntoKeys`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IntoKeys<u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        IntoKeys { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> Iterator for IntoValues<K, V, A> {\n     type Item = V;\n@@ -2055,6 +2159,23 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoValues<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoValues<K, V, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<K, V, A> Default for IntoValues<K, V, A>\n+where\n+    A: Allocator + Default + Clone,\n+{\n+    /// Creates an empty `btree_map::IntoValues`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IntoValues<u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        IntoValues { inner: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> {"}, {"sha": "a85a3162451bf25b027a2824a885762f7215578e", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -19,6 +19,12 @@ impl<'a, K: 'a, V: 'a> Clone for LeafRange<marker::Immut<'a>, K, V> {\n     }\n }\n \n+impl<B, K, V> Default for LeafRange<B, K, V> {\n+    fn default() -> Self {\n+        LeafRange { front: None, back: None }\n+    }\n+}\n+\n impl<BorrowType, K, V> LeafRange<BorrowType, K, V> {\n     pub fn none() -> Self {\n         LeafRange { front: None, back: None }\n@@ -124,6 +130,12 @@ pub struct LazyLeafRange<BorrowType, K, V> {\n     back: Option<LazyLeafHandle<BorrowType, K, V>>,\n }\n \n+impl<B, K, V> Default for LazyLeafRange<B, K, V> {\n+    fn default() -> Self {\n+        LazyLeafRange { front: None, back: None }\n+    }\n+}\n+\n impl<'a, K: 'a, V: 'a> Clone for LazyLeafRange<marker::Immut<'a>, K, V> {\n     fn clone(&self) -> Self {\n         LazyLeafRange { front: self.front.clone(), back: self.back.clone() }"}, {"sha": "a7cb3948aa112ddf8846844b3cab3dc014cdfa64", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -1539,6 +1539,21 @@ impl<T, A: Allocator + Clone> Iterator for IntoIter<T, A> {\n         self.iter.size_hint()\n     }\n }\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for Iter<'_, T> {\n+    /// Creates an empty `btree_set::Iter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_set;\n+    /// let iter: btree_set::Iter<'_, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Iter { iter: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, A: Allocator + Clone> DoubleEndedIterator for IntoIter<T, A> {\n     fn next_back(&mut self) -> Option<T> {\n@@ -1555,6 +1570,23 @@ impl<T, A: Allocator + Clone> ExactSizeIterator for IntoIter<T, A> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T, A: Allocator + Clone> FusedIterator for IntoIter<T, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T, A> Default for IntoIter<T, A>\n+where\n+    A: Allocator + Default + Clone,\n+{\n+    /// Creates an empty `btree_set::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_set;\n+    /// let iter: btree_set::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        IntoIter { iter: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n impl<T> Clone for Range<'_, T> {\n     fn clone(&self) -> Self {\n@@ -1593,6 +1625,20 @@ impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Range<'_, T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for Range<'_, T> {\n+    /// Creates an empty `btree_set::Range`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_set;\n+    /// let iter: btree_set::Range<'_, u8> = Default::default();\n+    /// assert_eq!(iter.count(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Range { iter: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, A: Allocator + Clone> Clone for Difference<'_, T, A> {\n     fn clone(&self) -> Self {"}, {"sha": "080a4a14eda6ea7d13fe98cb1b93563a4470b066", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -1075,6 +1075,20 @@ impl<T> ExactSizeIterator for Iter<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Iter<'_, T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for Iter<'_, T> {\n+    /// Creates an empty `linked_list::Iter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::linked_list;\n+    /// let iter: linked_list::Iter<'_, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Iter { head: None, tail: None, len: 0, marker: Default::default() }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for IterMut<'a, T> {\n     type Item = &'a mut T;\n@@ -1129,6 +1143,13 @@ impl<T> ExactSizeIterator for IterMut<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IterMut<'_, T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IterMut<'_, T> {\n+    fn default() -> Self {\n+        IterMut { head: None, tail: None, len: 0, marker: Default::default() }\n+    }\n+}\n+\n /// A cursor over a `LinkedList`.\n ///\n /// A `Cursor` is like an iterator, except that it can freely seek back-and-forth.\n@@ -1808,6 +1829,20 @@ impl<T> ExactSizeIterator for IntoIter<T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T> Default for IntoIter<T> {\n+    /// Creates an empty `linked_list::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::linked_list;\n+    /// let iter: linked_list::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        LinkedList::new().into_iter()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for LinkedList<T> {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {"}, {"sha": "f6525eb90038641135dfab6520414afffd1e54b2", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -347,6 +347,24 @@ impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T, A> Default for IntoIter<T, A>\n+where\n+    A: Allocator + Default,\n+{\n+    /// Creates an empty `vec::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::vec;\n+    /// let iter: vec::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// assert_eq!(iter.as_slice(), &[]);\n+    /// ```\n+    fn default() -> Self {\n+        super::Vec::new_in(Default::default()).into_iter()\n+    }\n+}\n+\n #[doc(hidden)]\n #[unstable(issue = \"none\", feature = \"std_internals\")]\n #[rustc_unsafe_specialization_marker]"}, {"sha": "d4b2640e81dc9c51f8372ce52f4a93efc36d19f4", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -282,6 +282,28 @@ where\n {\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<A: Default, B: Default> Default for Chain<A, B> {\n+    /// Creates a `Chain` from the default values for `A` and `B`.\n+    ///\n+    /// ```\n+    /// # use core::iter::Chain;\n+    /// # use core::slice;\n+    /// # use std::collections::{btree_set, BTreeSet};\n+    /// # use std::mem;\n+    /// struct Foo<'a>(Chain<slice::Iter<'a, u8>, btree_set::Iter<'a, u8>>);\n+    ///\n+    /// let set = BTreeSet::<u8>::new();\n+    /// let slice: &[u8] = &[];\n+    /// let mut foo = Foo(slice.iter().chain(set.iter()));\n+    ///\n+    /// // take requires `Default`\n+    /// let _: Chain<_, _> = mem::take(&mut foo.0);\n+    fn default() -> Self {\n+        Chain::new(Default::default(), Default::default())\n+    }\n+}\n+\n #[inline]\n fn and_then_or_clear<T, U>(opt: &mut Option<T>, f: impl FnOnce(&mut T) -> Option<U>) -> Option<U> {\n     let x = f(opt.as_mut()?);"}, {"sha": "bb7e1660c6eb2d62c86f4a6c00050af9a7c9ab9e", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -153,3 +153,17 @@ where\n         item.clone()\n     }\n }\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I: Default> Default for Cloned<I> {\n+    /// Creates a `Cloned` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use core::iter::Cloned;\n+    /// let iter: Cloned<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Self::new(Default::default())\n+    }\n+}"}, {"sha": "a076ab925e366d97d2c6bba2cccc9017e0a17a79", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -240,3 +240,17 @@ where\n         }\n     }\n }\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I: Default> Default for Copied<I> {\n+    /// Creates a `Copied` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use core::iter::Copied;\n+    /// let iter: Copied<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Self::new(Default::default())\n+    }\n+}"}, {"sha": "8c32a35a12f86af13d5346ebf7a09f74ec4af12f", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -264,3 +264,17 @@ where\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I: Default> Default for Enumerate<I> {\n+    /// Creates an `Enumerate` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use std::iter::Enumerate;\n+    /// let iter: Enumerate<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Enumerate::new(Default::default())\n+    }\n+}"}, {"sha": "e4020c45f71bcc6a40f04fe183d328c202efaf3b", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -302,6 +302,24 @@ where\n {\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I> Default for Flatten<I>\n+where\n+    I: Default + Iterator<Item: IntoIterator>,\n+{\n+    /// Creates a `Flatten` iterator from the default value of `I`.\n+    ///\n+    /// ```\n+    /// # use core::slice;\n+    /// # use std::iter::Flatten;\n+    /// let iter: Flatten<slice::Iter<'_, [u8; 4]>> = Default::default();\n+    /// assert_eq!(iter.count(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Flatten::new(Default::default())\n+    }\n+}\n+\n /// Real logic of both `Flatten` and `FlatMap` which simply delegate to\n /// this type.\n #[derive(Clone, Debug)]"}, {"sha": "de91c188eeb2ab62d8711700f24c1c87f6de4949", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -181,6 +181,21 @@ where\n     }\n }\n \n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I: Default> Default for Fuse<I> {\n+    /// Creates a `Fuse` iterator from the default value of `I`.\n+    ///\n+    /// ```\n+    /// # use core::slice;\n+    /// # use std::iter::Fuse;\n+    /// let iter: Fuse<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Fuse { iter: Default::default() }\n+    }\n+}\n+\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n // SAFETY: `TrustedLen` requires that an accurate length is reported via `size_hint()`. As `Fuse`\n // is just forwarding this to the wrapped iterator `I` this property is preserved and it is safe to"}, {"sha": "8ae6d96fde4cc045165b02473c5ae10d98a83cdc", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -135,3 +135,17 @@ impl<I> FusedIterator for Rev<I> where I: FusedIterator + DoubleEndedIterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I> TrustedLen for Rev<I> where I: TrustedLen + DoubleEndedIterator {}\n+\n+#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<I: Default> Default for Rev<I> {\n+    /// Creates a `Rev` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use core::iter::Rev;\n+    /// let iter: Rev<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n+    fn default() -> Self {\n+        Rev::new(Default::default())\n+    }\n+}"}, {"sha": "a800da546b45007cf65a4cde5c7103a77a90bc30", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa6b3c15758e85657d5be051cfa57022a8bbe57/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=9fa6b3c15758e85657d5be051cfa57022a8bbe57", "patch": "@@ -393,6 +393,20 @@ macro_rules! iterator {\n                 }\n             }\n         }\n+\n+        #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+        impl<T> Default for $name<'_, T> {\n+            /// Creates an empty slice iterator.\n+            ///\n+            /// ```\n+            #[doc = concat!(\"# use core::slice::\", stringify!($name), \";\")]\n+            #[doc = concat!(\"let iter: \", stringify!($name<'_, u8>), \" = Default::default();\")]\n+            /// assert_eq!(iter.len(), 0);\n+            /// ```\n+            fn default() -> Self {\n+                (& $( $mut_ )? []).into_iter()\n+            }\n+        }\n     }\n }\n "}]}