{"sha": "1aac00fad391d7f714be1401992e95d5dffcb300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYWMwMGZhZDM5MWQ3ZjcxNGJlMTQwMTk5MmU5NWQ1ZGZmY2IzMDA=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2018-09-10T05:53:42Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2018-09-10T05:53:42Z"}, "message": "A slice covering exactly half the address space is not OK", "tree": {"sha": "758909f7f6239b73bc0c16757e7d6a3ebabb0e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/758909f7f6239b73bc0c16757e7d6a3ebabb0e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aac00fad391d7f714be1401992e95d5dffcb300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aac00fad391d7f714be1401992e95d5dffcb300", "html_url": "https://github.com/rust-lang/rust/commit/1aac00fad391d7f714be1401992e95d5dffcb300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aac00fad391d7f714be1401992e95d5dffcb300/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b77508e233c724bcaf9821f62dbe45dc4b4cdb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b77508e233c724bcaf9821f62dbe45dc4b4cdb3", "html_url": "https://github.com/rust-lang/rust/commit/7b77508e233c724bcaf9821f62dbe45dc4b4cdb3"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "7fd8e2599f9886935875df24275ae3de02d73d51", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1aac00fad391d7f714be1401992e95d5dffcb300/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aac00fad391d7f714be1401992e95d5dffcb300/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1aac00fad391d7f714be1401992e95d5dffcb300", "patch": "@@ -3852,8 +3852,8 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n /// them from other data. You can obtain a pointer that is usable as `data`\n /// for zero-length slices using [`NonNull::dangling()`].\n ///\n-/// The total size of the slice must be no larger than `isize::MAX` **bytes**\n-/// in memory. See the safety documentation of [`pointer::offset`].\n+/// The total size of the slice must lower than `isize::MAX` **bytes** in\n+/// memory. See the safety documentation of [`pointer::offset`].\n ///\n /// # Caveat\n ///\n@@ -3881,7 +3881,7 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n-    debug_assert!(len * mem::size_of::<T>() <= isize::MAX as usize,\n+    debug_assert!(len * mem::size_of::<T>() < isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n     Repr { raw: FatPtr { data, len } }.rust\n }\n@@ -3892,8 +3892,8 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n /// This function is unsafe for the same reasons as [`from_raw_parts`], as well\n /// as not being able to provide a non-aliasing guarantee of the returned\n /// mutable slice. `data` must be non-null and aligned even for zero-length\n-/// slices as with [`from_raw_parts`]. The total size of the slice must be no\n-/// larger than `isize::MAX` **bytes** in memory. See the safety documentation\n+/// slices as with [`from_raw_parts`]. The total size of the slice must be\n+/// lower than `isize::MAX` **bytes** in memory. See the safety documentation\n /// of [`pointer::offset`].\n ///\n /// See the documentation of [`from_raw_parts`] for more details.\n@@ -3904,7 +3904,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n-    debug_assert!(len * mem::size_of::<T>() <= isize::MAX as usize,\n+    debug_assert!(len * mem::size_of::<T>() < isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n     Repr { raw: FatPtr { data, len} }.rust_mut\n }"}]}