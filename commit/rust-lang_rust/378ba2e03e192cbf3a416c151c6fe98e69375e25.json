{"sha": "378ba2e03e192cbf3a416c151c6fe98e69375e25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OGJhMmUwM2UxOTJjYmYzYTQxNmMxNTFjNmZlOThlNjkzNzVlMjU=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-08-04T10:06:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-04T10:06:39Z"}, "message": "Rollup merge of #5846 - dima74:map_flatten.map_to_option, r=flip1995\n\nHandle mapping to Option in `map_flatten` lint\n\nFixes #4496\n\nThe existing [`map_flatten`](https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten) lint suggests changing `expr.map(...).flatten()` to `expr.flat_map(...)` when `expr` is `Iterator`. This PR changes suggestion to `filter_map` instead of `flat_map` when mapping to `Option`, because it is more natural\n\nAlso here are some questions:\n* If expression has type which implements `Iterator` trait (`match_trait_method(cx, expr, &paths::ITERATOR) == true`), how can I get type of iterator elements? Currently I use return type of closure inside `map`, but probably it is not good way\n* I would like to change suggestion range to cover only `.map(...).flatten()`, that is from:\n```\n    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `vec![5_i8; 6].into_iter().flat_map\n```\nto\n```\n    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n```\nIs it ok?\n* Is `map_flatten` lint intentionally in `pedantic` category, or could it be moved to `complexity`?\n\nchangelog: Handle mapping to Option in [`map_flatten`](https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten) lint", "tree": {"sha": "aca648d6e6706cdfd713850b4cd01e05fab27467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aca648d6e6706cdfd713850b4cd01e05fab27467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378ba2e03e192cbf3a416c151c6fe98e69375e25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKTMvCRBK7hj4Ov3rIwAAdHIIAEFLxFyIoWU3LusjHd0fsQCH\na8gtz9ztNjFxtK369A6E1SKg9JGZE8rFuiSfSbZ35hQy8N04aVrGnsqn6tHL33Td\ntmyxmoMuqFT/jXBPWPv1K2c0UIIU7Q5xkW0dbNQHlDlXjQPMDBRtdN6yassq3ko3\noyDhfDl0pTZmSTstJutmZ5NblYOMRSXfd3p4cHnav3vhkt+MgOPd4EEq2C9vguc6\nC+NLMr+KDfsmUMCPlLHb104P1qzYGfDk9fGw8iqSxYBH32rVlFIQ+gsazjaYIF9X\n1XfDAmW46h8CqvsS396nB7JiRlMVAf8xCQPZ+4XnrFIMDRVWMaOJWOIgb13itk8=\n=6+2K\n-----END PGP SIGNATURE-----\n", "payload": "tree aca648d6e6706cdfd713850b4cd01e05fab27467\nparent ca2a25d966de0007dea8676833da1c764c9d5e00\nparent d4ba561aafb501972f581c1f8e6d1885959f9306\nauthor Philipp Krones <hello@philkrones.com> 1596535599 +0200\ncommitter GitHub <noreply@github.com> 1596535599 +0200\n\nRollup merge of #5846 - dima74:map_flatten.map_to_option, r=flip1995\n\nHandle mapping to Option in `map_flatten` lint\n\nFixes #4496\n\nThe existing [`map_flatten`](https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten) lint suggests changing `expr.map(...).flatten()` to `expr.flat_map(...)` when `expr` is `Iterator`. This PR changes suggestion to `filter_map` instead of `flat_map` when mapping to `Option`, because it is more natural\n\nAlso here are some questions:\n* If expression has type which implements `Iterator` trait (`match_trait_method(cx, expr, &paths::ITERATOR) == true`), how can I get type of iterator elements? Currently I use return type of closure inside `map`, but probably it is not good way\n* I would like to change suggestion range to cover only `.map(...).flatten()`, that is from:\n```\n    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `vec![5_i8; 6].into_iter().flat_map\n```\nto\n```\n    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n```\nIs it ok?\n* Is `map_flatten` lint intentionally in `pedantic` category, or could it be moved to `complexity`?\n\nchangelog: Handle mapping to Option in [`map_flatten`](https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten) lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378ba2e03e192cbf3a416c151c6fe98e69375e25", "html_url": "https://github.com/rust-lang/rust/commit/378ba2e03e192cbf3a416c151c6fe98e69375e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378ba2e03e192cbf3a416c151c6fe98e69375e25/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca2a25d966de0007dea8676833da1c764c9d5e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2a25d966de0007dea8676833da1c764c9d5e00", "html_url": "https://github.com/rust-lang/rust/commit/ca2a25d966de0007dea8676833da1c764c9d5e00"}, {"sha": "d4ba561aafb501972f581c1f8e6d1885959f9306", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ba561aafb501972f581c1f8e6d1885959f9306", "html_url": "https://github.com/rust-lang/rust/commit/d4ba561aafb501972f581c1f8e6d1885959f9306"}], "stats": {"total": 108, "additions": 87, "deletions": 21}, "files": [{"sha": "9217324b18cc4188e33b9e548bb854ee7242295f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/378ba2e03e192cbf3a416c151c6fe98e69375e25/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378ba2e03e192cbf3a416c151c6fe98e69375e25/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=378ba2e03e192cbf3a416c151c6fe98e69375e25", "patch": "@@ -2569,34 +2569,48 @@ fn lint_ok_expect(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ok_args: &[hir::Ex\n fn lint_map_flatten<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.map().flatten()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `map(..).flatten()` on an `Iterator`. \\\n-                    This is more succinctly expressed by calling `.flat_map(..)`\";\n-        let self_snippet = snippet(cx, map_args[0].span, \"..\");\n+        let map_closure_ty = cx.typeck_results().expr_ty(&map_args[1]);\n+        let is_map_to_option = match map_closure_ty.kind {\n+            ty::Closure(_, _) | ty::FnDef(_, _) | ty::FnPtr(_) => {\n+                let map_closure_sig = match map_closure_ty.kind {\n+                    ty::Closure(_, substs) => substs.as_closure().sig(),\n+                    _ => map_closure_ty.fn_sig(cx.tcx),\n+                };\n+                let map_closure_return_ty = cx.tcx.erase_late_bound_regions(&map_closure_sig.output());\n+                is_type_diagnostic_item(cx, map_closure_return_ty, sym!(option_type))\n+            },\n+            _ => false,\n+        };\n+\n+        let method_to_use = if is_map_to_option {\n+            // `(...).map(...)` has type `impl Iterator<Item=Option<...>>\n+            \"filter_map\"\n+        } else {\n+            // `(...).map(...)` has type `impl Iterator<Item=impl Iterator<...>>\n+            \"flat_map\"\n+        };\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n-        let hint = format!(\"{0}.flat_map({1})\", self_snippet, func_snippet);\n+        let hint = format!(\".{0}({1})\", method_to_use, func_snippet);\n         span_lint_and_sugg(\n             cx,\n             MAP_FLATTEN,\n-            expr.span,\n-            msg,\n-            \"try using `flat_map` instead\",\n+            expr.span.with_lo(map_args[0].span.hi()),\n+            \"called `map(..).flatten()` on an `Iterator`\",\n+            &format!(\"try using `{}` instead\", method_to_use),\n             hint,\n             Applicability::MachineApplicable,\n         );\n     }\n \n     // lint if caller of `.map().flatten()` is an Option\n     if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_args[0]), sym!(option_type)) {\n-        let msg = \"called `map(..).flatten()` on an `Option`. \\\n-                    This is more succinctly expressed by calling `.and_then(..)`\";\n-        let self_snippet = snippet(cx, map_args[0].span, \"..\");\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n-        let hint = format!(\"{0}.and_then({1})\", self_snippet, func_snippet);\n+        let hint = format!(\".and_then({})\", func_snippet);\n         span_lint_and_sugg(\n             cx,\n             MAP_FLATTEN,\n-            expr.span,\n-            msg,\n+            expr.span.with_lo(map_args[0].span.hi()),\n+            \"called `map(..).flatten()` on an `Option`\",\n             \"try using `and_then` instead\",\n             hint,\n             Applicability::MachineApplicable,"}, {"sha": "a5fdf7df613d325d6b5bf80ed09647806581adb0", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/378ba2e03e192cbf3a416c151c6fe98e69375e25/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/378ba2e03e192cbf3a416c151c6fe98e69375e25/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=378ba2e03e192cbf3a416c151c6fe98e69375e25", "patch": "@@ -5,6 +5,20 @@\n #![allow(clippy::map_identity)]\n \n fn main() {\n+    // mapping to Option on Iterator\n+    fn option_id(x: i8) -> Option<i8> {\n+        Some(x)\n+    }\n+    let option_id_ref: fn(i8) -> Option<i8> = option_id;\n+    let option_id_closure = |x| Some(x);\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id).collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_ref).collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_closure).collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(|x| x.checked_add(1)).collect();\n+\n+    // mapping to Iterator on Iterator\n     let _: Vec<_> = vec![5_i8; 6].into_iter().flat_map(|x| 0..x).collect();\n+\n+    // mapping to Option on Option\n     let _: Option<_> = (Some(Some(1))).and_then(|x| x);\n }"}, {"sha": "abbc4e16e567951af8a952810e2a7bce9724d832", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/378ba2e03e192cbf3a416c151c6fe98e69375e25/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378ba2e03e192cbf3a416c151c6fe98e69375e25/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=378ba2e03e192cbf3a416c151c6fe98e69375e25", "patch": "@@ -5,6 +5,20 @@\n #![allow(clippy::map_identity)]\n \n fn main() {\n+    // mapping to Option on Iterator\n+    fn option_id(x: i8) -> Option<i8> {\n+        Some(x)\n+    }\n+    let option_id_ref: fn(i8) -> Option<i8> = option_id;\n+    let option_id_closure = |x| Some(x);\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+\n+    // mapping to Iterator on Iterator\n     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+\n+    // mapping to Option on Option\n     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n }"}, {"sha": "b6479cd69eac4f49f6a0abf08c55dc3ba7f0224d", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/378ba2e03e192cbf3a416c151c6fe98e69375e25/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/378ba2e03e192cbf3a416c151c6fe98e69375e25/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=378ba2e03e192cbf3a416c151c6fe98e69375e25", "patch": "@@ -1,16 +1,40 @@\n-error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)`\n-  --> $DIR/map_flatten.rs:8:21\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:14:46\n    |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n-error: called `map(..).flatten()` on an `Option`. This is more succinctly expressed by calling `.and_then(..)`\n-  --> $DIR/map_flatten.rs:9:24\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:15:46\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n+\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:16:46\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n+\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:17:46\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n+\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:20:46\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n+\n+error: called `map(..).flatten()` on an `Option`\n+  --> $DIR/map_flatten.rs:23:39\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `(Some(Some(1))).and_then(|x| x)`\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 6 previous errors\n "}]}