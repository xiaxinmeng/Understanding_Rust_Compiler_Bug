{"sha": "cc6473d342ca017a983ff5805a4fde052b7301d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNjQ3M2QzNDJjYTAxN2E5ODNmZjU4MDVhNGZkZTA1MmI3MzAxZDU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-18T22:24:53Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-19T14:06:29Z"}, "message": "Rollup merge of #55970 - RalfJung:miri-backtrace, r=@oli-obk\n\nMiri backtrace improvements\n\nNicer pretty-printing of the `RUST_CTFE_BACKTRACE`-backtraces:\n```\n  0: backtrace::backtrace::libunwind::trace::hc410fcb66fe85b11\n           at /home/r/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/libunwind.rs:53\n     backtrace::backtrace::trace::h2106294a22648407\n           at /home/r/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/mod.rs:42\n  1: backtrace::capture::Backtrace::new_unresolved::h5d8d98b993d092ba\n           at /home/r/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/capture.rs:88\n  2: <rustc::mir::interpret::error::EvalError<'tcx> as core::convert::From<rustc::mir::interpret::error::EvalErrorKind<'tcx, u64>>>::from::h6355269b2a661412\n           at librustc/mir/interpret/error.rs:236\n  3: <T as core::convert::Into<U>>::into::h70fcb917509539bd\n           at /home/r/src/rust/rustc.2/src/libcore/convert.rs:455\n  4: <rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, miri::Evaluator<'tcx>> as miri::fn_call::EvalContextExt<'tcx, 'mir>>::emulate_foreign_item::h9cde0e3ce7455a4a\n           at src/fn_call.rs:292\n  5: <rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, miri::Evaluator<'tcx>> as miri::fn_call::EvalContextExt<'tcx, 'mir>>::find_fn::h83f89524b9d1a49a\n           at src/fn_call.rs:74\n  6: <miri::Evaluator<'tcx> as rustc_mir::interpret::machine::Machine<'a, 'mir, 'tcx>>::find_fn::hf9980473c4775f0c\n           at src/lib.rs:345\n     rustc_mir::interpret::terminator::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::eval_fn_call::h401dec4a687f96e9\n           at /home/r/src/rust/rustc.2/src/librustc_mir/interpret/terminator.rs:285\n```\nIndentation is now consistent with `RUST_BACKTRACE`, and the frame number is not repeated when there are multiple symbols for a frame.\n\nAlso preserve the `ty::Instance` for the internal backtrace (showing which frames in the user code where on the interpreter stack when the error happened), used by miri to avoid printing spans for libstd internals:\n```\nerror[E0080]: constant evaluation error: the evaluated program panicked\n   --> /home/r/src/rust/rustc.2/src/libstd/panicking.rs:525:9\n    |\n525 |         __rust_start_panic(obj as usize)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked\n    |\n    = note: inside call to `std::panicking::rust_panic` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:496:5\n    = note: inside call to `std::panicking::rust_panic_with_hook` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:390:5\n    = note: inside call to `std::panicking::continue_panic_fmt` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:345:5\nnote: inside call to `std::rt::begin_panic_fmt` at <::std::macros::panic macros>:8:1\n   --> tests/compile-fail/panic.rs:4:5\n    |\n4   |     assert_eq!(5, 6);\n    |     ^^^^^^^^^^^^^^^^^\n    = note: inside call to `main` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:74:34\n    = note: inside call to closure at /home/r/src/rust/rustc.2/src/libstd/rt.rs:59:75\n    = note: inside call to closure at /home/r/src/rust/rustc.2/src/libstd/sys_common/backtrace.rs:136:5\n    = note: inside call to `std::sys_common::backtrace::__rust_begin_short_backtrace::<[closure@DefId(1/1:1913 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]::{{closure}}[0]) 0:&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:59:13\n    = note: inside call to closure at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:310:40\n    = note: inside call to `std::panicking::try::do_call::<[closure@DefId(1/1:1912 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:306:5\n    = note: inside call to `std::panicking::try::<i32, [closure@DefId(1/1:1912 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe]>` at /home/r/src/rust/rustc.2/src/libstd/panic.rs:398:9\n    = note: inside call to `std::panic::catch_unwind::<[closure@DefId(1/1:1912 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:58:25\n    = note: inside call to `std::rt::lang_start_internal` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:74:5\n    = note: inside call to `std::rt::lang_start::<()>`\n```\nAlso notice that we show filenames and line numbers here now.\n\nr? @oli-obk", "tree": {"sha": "a16d2007f74fd83eb55f77da0e0fe147133fe18c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16d2007f74fd83eb55f77da0e0fe147133fe18c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6473d342ca017a983ff5805a4fde052b7301d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvyw2YACgkQ/vbIBR0O\nATwimw//RZ7htZr1mwB95on5/XGjvIh+GhGG/mO6Vv2bwC+XxasyY0aR1SSeWAlq\n9UQJ0PcX9ahYiHLsqZ5Dy/ZQsFsjABD1B4e1Lt0tMjzF9cRtcoKqxh17g+yfR9Df\nG2R4GujTLVvDNFwpjaKdLZQVWAgN4o8hRQzCUriKTrLja636grihnAZVE/XhNGMW\nNRbvCQaZxmR0yK7U6VfHKjLRkPeqPqEAxrs9zSI5eg4jM/zaHhbcZ+u6PxayL0WI\nQkryLCu+W0bpdLWCuJy8tjK7gkP2CPsPYtmKEwCyO6fbV5zxrgBGFQ3oL2lr8870\naJoCyEOou7K6t4WdppyK0hHSJGuHo9Y0nhCyS7IcW2KgZH1/sHlxS40SgagdAenU\nLqk3JFyjBh5a4cWS3jNZiU4U4cyg6B7Mp2rQ1/84pS8+5VbVKM+Zbcsohc8zKFey\nIj4X9VKr9rxpTyWhk/eSIy7ZSKZ8D1vJQr85jUVGanZSm5ZvjfWs0UyyuQYPO/oc\nB0kJb1R4IygkMzEfmluPqYWBxpbXq0XJU3hF8uQxnXZdGzAgQ6wHrrmCfcnrUUeA\nHhGmReCD59eQBOtw4Ki5ixLFVNbgOHk1/0oiOKyAOwb92uqJrurAeQQIjjYnMGgD\nmZJkB0kkr7dFH+uD/INdMBhizaJk1CFf3E0RzyWHYg6BQSCMNG8=\n=FATl\n-----END PGP SIGNATURE-----", "payload": "tree a16d2007f74fd83eb55f77da0e0fe147133fe18c\nparent 6ecbb05d76daa3d49ef3aab0fe4ba1406fd7fe7f\nparent 62cf9abcf6611c598894e9a8abac6c54a72d862d\nauthor Pietro Albini <pietro@pietroalbini.org> 1542579893 +0100\ncommitter kennytm <kennytm@gmail.com> 1542636389 +0800\n\nRollup merge of #55970 - RalfJung:miri-backtrace, r=@oli-obk\n\nMiri backtrace improvements\n\nNicer pretty-printing of the `RUST_CTFE_BACKTRACE`-backtraces:\n```\n  0: backtrace::backtrace::libunwind::trace::hc410fcb66fe85b11\n           at /home/r/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/libunwind.rs:53\n     backtrace::backtrace::trace::h2106294a22648407\n           at /home/r/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/backtrace/mod.rs:42\n  1: backtrace::capture::Backtrace::new_unresolved::h5d8d98b993d092ba\n           at /home/r/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.9/src/capture.rs:88\n  2: <rustc::mir::interpret::error::EvalError<'tcx> as core::convert::From<rustc::mir::interpret::error::EvalErrorKind<'tcx, u64>>>::from::h6355269b2a661412\n           at librustc/mir/interpret/error.rs:236\n  3: <T as core::convert::Into<U>>::into::h70fcb917509539bd\n           at /home/r/src/rust/rustc.2/src/libcore/convert.rs:455\n  4: <rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, miri::Evaluator<'tcx>> as miri::fn_call::EvalContextExt<'tcx, 'mir>>::emulate_foreign_item::h9cde0e3ce7455a4a\n           at src/fn_call.rs:292\n  5: <rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, miri::Evaluator<'tcx>> as miri::fn_call::EvalContextExt<'tcx, 'mir>>::find_fn::h83f89524b9d1a49a\n           at src/fn_call.rs:74\n  6: <miri::Evaluator<'tcx> as rustc_mir::interpret::machine::Machine<'a, 'mir, 'tcx>>::find_fn::hf9980473c4775f0c\n           at src/lib.rs:345\n     rustc_mir::interpret::terminator::<impl rustc_mir::interpret::eval_context::EvalContext<'a, 'mir, 'tcx, M>>::eval_fn_call::h401dec4a687f96e9\n           at /home/r/src/rust/rustc.2/src/librustc_mir/interpret/terminator.rs:285\n```\nIndentation is now consistent with `RUST_BACKTRACE`, and the frame number is not repeated when there are multiple symbols for a frame.\n\nAlso preserve the `ty::Instance` for the internal backtrace (showing which frames in the user code where on the interpreter stack when the error happened), used by miri to avoid printing spans for libstd internals:\n```\nerror[E0080]: constant evaluation error: the evaluated program panicked\n   --> /home/r/src/rust/rustc.2/src/libstd/panicking.rs:525:9\n    |\n525 |         __rust_start_panic(obj as usize)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked\n    |\n    = note: inside call to `std::panicking::rust_panic` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:496:5\n    = note: inside call to `std::panicking::rust_panic_with_hook` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:390:5\n    = note: inside call to `std::panicking::continue_panic_fmt` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:345:5\nnote: inside call to `std::rt::begin_panic_fmt` at <::std::macros::panic macros>:8:1\n   --> tests/compile-fail/panic.rs:4:5\n    |\n4   |     assert_eq!(5, 6);\n    |     ^^^^^^^^^^^^^^^^^\n    = note: inside call to `main` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:74:34\n    = note: inside call to closure at /home/r/src/rust/rustc.2/src/libstd/rt.rs:59:75\n    = note: inside call to closure at /home/r/src/rust/rustc.2/src/libstd/sys_common/backtrace.rs:136:5\n    = note: inside call to `std::sys_common::backtrace::__rust_begin_short_backtrace::<[closure@DefId(1/1:1913 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]::{{closure}}[0]) 0:&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:59:13\n    = note: inside call to closure at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:310:40\n    = note: inside call to `std::panicking::try::do_call::<[closure@DefId(1/1:1912 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc.2/src/libstd/panicking.rs:306:5\n    = note: inside call to `std::panicking::try::<i32, [closure@DefId(1/1:1912 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe]>` at /home/r/src/rust/rustc.2/src/libstd/panic.rs:398:9\n    = note: inside call to `std::panic::catch_unwind::<[closure@DefId(1/1:1912 ~ std[78f0]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32>` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:58:25\n    = note: inside call to `std::rt::lang_start_internal` at /home/r/src/rust/rustc.2/src/libstd/rt.rs:74:5\n    = note: inside call to `std::rt::lang_start::<()>`\n```\nAlso notice that we show filenames and line numbers here now.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6473d342ca017a983ff5805a4fde052b7301d5", "html_url": "https://github.com/rust-lang/rust/commit/cc6473d342ca017a983ff5805a4fde052b7301d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6473d342ca017a983ff5805a4fde052b7301d5/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecbb05d76daa3d49ef3aab0fe4ba1406fd7fe7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecbb05d76daa3d49ef3aab0fe4ba1406fd7fe7f", "html_url": "https://github.com/rust-lang/rust/commit/6ecbb05d76daa3d49ef3aab0fe4ba1406fd7fe7f"}, {"sha": "62cf9abcf6611c598894e9a8abac6c54a72d862d", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cf9abcf6611c598894e9a8abac6c54a72d862d", "html_url": "https://github.com/rust-lang/rust/commit/62cf9abcf6611c598894e9a8abac6c54a72d862d"}], "stats": {"total": 178, "additions": 100, "deletions": 78}, "files": [{"sha": "64685446e8fe14383a52e610b2fa96a5911eedde", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=cc6473d342ca017a983ff5805a4fde052b7301d5", "patch": "@@ -389,10 +389,10 @@ impl_stable_hash_for!(enum mir::interpret::ErrorHandled {\n     TooGeneric\n });\n \n-impl_stable_hash_for!(struct mir::interpret::FrameInfo {\n-    span,\n+impl_stable_hash_for!(struct mir::interpret::FrameInfo<'tcx> {\n+    call_site,\n     lint_root,\n-    location\n+    instance\n });\n \n impl_stable_hash_for!(struct ty::ClosureSubsts<'tcx> { substs });"}, {"sha": "f1c95e0f00024a57204a55a8dfb0ce82b0947aa8", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=cc6473d342ca017a983ff5805a4fde052b7301d5", "patch": "@@ -10,20 +10,20 @@\n \n use std::{fmt, env};\n \n+use hir::map::definitions::DefPathData;\n use mir;\n-use ty::{Ty, layout};\n+use ty::{self, Ty, layout};\n use ty::layout::{Size, Align, LayoutError};\n use rustc_target::spec::abi::Abi;\n \n use super::{Pointer, InboundsCheck, ScalarMaybeUndef};\n \n use backtrace::Backtrace;\n \n-use ty;\n use ty::query::TyCtxtAt;\n use errors::DiagnosticBuilder;\n \n-use syntax_pos::Span;\n+use syntax_pos::{Pos, Span};\n use syntax::ast;\n use syntax::symbol::Symbol;\n \n@@ -52,16 +52,35 @@ pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n     pub error: ::mir::interpret::EvalErrorKind<'tcx, u64>,\n-    pub stacktrace: Vec<FrameInfo>,\n+    pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct FrameInfo {\n-    pub span: Span,\n-    pub location: String,\n+pub struct FrameInfo<'tcx> {\n+    pub call_site: Span, // this span is in the caller!\n+    pub instance: ty::Instance<'tcx>,\n     pub lint_root: Option<ast::NodeId>,\n }\n \n+impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ty::tls::with(|tcx| {\n+            if tcx.def_key(self.instance.def_id()).disambiguated_data.data\n+                == DefPathData::ClosureExpr\n+            {\n+                write!(f, \"inside call to closure\")?;\n+            } else {\n+                write!(f, \"inside call to `{}`\", self.instance)?;\n+            }\n+            if !self.call_site.is_dummy() {\n+                let lo = tcx.sess.source_map().lookup_char_pos_adj(self.call_site.lo());\n+                write!(f, \" at {}:{}:{}\", lo.filename, lo.line, lo.col.to_usize() + 1)?;\n+            }\n+            Ok(())\n+        })\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n     pub fn struct_error(&self,\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n@@ -135,8 +154,13 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             struct_error(tcx, message)\n         };\n         err.span_label(self.span, self.error.to_string());\n-        for FrameInfo { span, location, .. } in &self.stacktrace {\n-            err.span_label(*span, format!(\"inside call to `{}`\", location));\n+        // Skip the last, which is just the environment of the constant.  The stacktrace\n+        // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n+        // on constant values.\n+        if self.stacktrace.len() > 0 {\n+            for frame_info in &self.stacktrace[..self.stacktrace.len()-1] {\n+                err.span_label(frame_info.call_site, frame_info.to_string());\n+            }\n         }\n         Ok(err)\n     }\n@@ -172,16 +196,23 @@ fn print_backtrace(backtrace: &mut Backtrace) -> String {\n     write!(trace_text, \"backtrace frames: {}\\n\", backtrace.frames().len()).unwrap();\n     'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n         if frame.symbols().is_empty() {\n-            write!(trace_text, \"{}: no symbols\\n\", i).unwrap();\n+            write!(trace_text, \"  {}: no symbols\\n\", i).unwrap();\n         }\n+        let mut first = true;\n         for symbol in frame.symbols() {\n-            write!(trace_text, \"{}: \", i).unwrap();\n+            if first {\n+                write!(trace_text, \"  {}: \", i).unwrap();\n+                first = false;\n+            } else {\n+                let len = i.to_string().len();\n+                write!(trace_text, \"  {}  \", \" \".repeat(len)).unwrap();\n+            }\n             if let Some(name) = symbol.name() {\n                 write!(trace_text, \"{}\\n\", name).unwrap();\n             } else {\n                 write!(trace_text, \"<unknown>\\n\").unwrap();\n             }\n-            write!(trace_text, \"\\tat \").unwrap();\n+            write!(trace_text, \"           at \").unwrap();\n             if let Some(file_path) = symbol.filename() {\n                 write!(trace_text, \"{}\", file_path.display()).unwrap();\n             } else {"}, {"sha": "dbda506d115af256d3c0d05e9a532b2ebb8a63d4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=cc6473d342ca017a983ff5805a4fde052b7301d5", "patch": "@@ -14,7 +14,6 @@ use std::mem;\n use syntax::source_map::{self, Span, DUMMY_SP};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n-use rustc::hir::map::definitions::DefPathData;\n use rustc::mir;\n use rustc::ty::layout::{\n     self, Size, Align, HasDataLayout, LayoutOf, TyLayout\n@@ -654,11 +653,10 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n     }\n \n-    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo> {\n+    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo<'tcx>> {\n         let mut last_span = None;\n         let mut frames = Vec::new();\n-        // skip 1 because the last frame is just the environment of the constant\n-        for &Frame { instance, span, mir, block, stmt, .. } in self.stack().iter().skip(1).rev() {\n+        for &Frame { instance, span, mir, block, stmt, .. } in self.stack().iter().rev() {\n             // make sure we don't emit frames that are duplicates of the previous\n             if explicit_span == Some(span) {\n                 last_span = Some(span);\n@@ -671,13 +669,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             } else {\n                 last_span = Some(span);\n             }\n-            let location = if self.tcx.def_key(instance.def_id()).disambiguated_data.data\n-                == DefPathData::ClosureExpr\n-            {\n-                \"closure\".to_owned()\n-            } else {\n-                instance.to_string()\n-            };\n             let block = &mir.basic_blocks()[block];\n             let source_info = if stmt < block.statements.len() {\n                 block.statements[stmt].source_info\n@@ -688,7 +679,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 mir::ClearCrossCrate::Set(ref ivs) => Some(ivs[source_info.scope].lint_root),\n                 mir::ClearCrossCrate::Clear => None,\n             };\n-            frames.push(FrameInfo { span, location, lint_root });\n+            frames.push(FrameInfo { call_site: span, instance, lint_root });\n         }\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n         frames"}, {"sha": "4246ec2dad332f34c8dd49c50ca41d8939dbacee", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc6473d342ca017a983ff5805a4fde052b7301d5/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=cc6473d342ca017a983ff5805a4fde052b7301d5", "patch": "@@ -5,61 +5,61 @@ LL | const fn a() -> usize { b() } //~ ERROR evaluation of constant value failed\n    |                         ^^^\n    |                         |\n    |                         reached the configured maximum number of stack frames\n-   |                         inside call to `b`\n+   |                         inside call to `b` at $DIR/infinite-recursion-const-fn.rs:13:25\n LL | const fn b() -> usize { a() }\n    |                         ---\n    |                         |\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n-   |                         inside call to `a`\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n+   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:14:25\n LL | const ARR: [i32; a()] = [5; 6];\n-   |                  --- inside call to `a`\n+   |                  --- inside call to `a` at $DIR/infinite-recursion-const-fn.rs:15:18\n \n error: aborting due to previous error\n "}]}