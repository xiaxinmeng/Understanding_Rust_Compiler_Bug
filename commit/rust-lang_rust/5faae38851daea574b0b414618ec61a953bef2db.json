{"sha": "5faae38851daea574b0b414618ec61a953bef2db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYWFlMzg4NTFkYWVhNTc0YjBiNDE0NjE4ZWM2MWE5NTNiZWYyZGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-09T17:30:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-09T17:33:02Z"}, "message": "apfloat: improve doc comments", "tree": {"sha": "17eaa120c582b71fbfeebfa77cc53609ce670541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17eaa120c582b71fbfeebfa77cc53609ce670541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5faae38851daea574b0b414618ec61a953bef2db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5faae38851daea574b0b414618ec61a953bef2db", "html_url": "https://github.com/rust-lang/rust/commit/5faae38851daea574b0b414618ec61a953bef2db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5faae38851daea574b0b414618ec61a953bef2db/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "534b42394d743511db1335d5ed08d507ab7c6e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/534b42394d743511db1335d5ed08d507ab7c6e73", "html_url": "https://github.com/rust-lang/rust/commit/534b42394d743511db1335d5ed08d507ab7c6e73"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "2df4d2a4e9de9aea9481af5cad3df22e651a85f8", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5faae38851daea574b0b414618ec61a953bef2db/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5faae38851daea574b0b414618ec61a953bef2db/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=5faae38851daea574b0b414618ec61a953bef2db", "patch": "@@ -551,12 +551,13 @@ pub trait Float\n     fn ilogb(self) -> ExpInt;\n \n     /// Returns: self * 2<sup>exp</sup> for integral exponents.\n+    /// Equivalent to C standard library function `ldexp`.\n     fn scalbn_r(self, exp: ExpInt, round: Round) -> Self;\n     fn scalbn(self, exp: ExpInt) -> Self {\n         self.scalbn_r(exp, Round::NearestTiesToEven)\n     }\n \n-    /// Equivalent of C standard library function.\n+    /// Equivalent to C standard library function with the same name.\n     ///\n     /// While the C standard says exp is an unspecified value for infinity and nan,\n     /// this returns INT_MAX for infinities, and INT_MIN for NaNs (see `ilogb`)."}]}