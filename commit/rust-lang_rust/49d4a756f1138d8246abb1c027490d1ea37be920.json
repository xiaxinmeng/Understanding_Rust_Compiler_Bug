{"sha": "49d4a756f1138d8246abb1c027490d1ea37be920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZDRhNzU2ZjExMzhkODI0NmFiYjFjMDI3NDkwZDFlYTM3YmU5MjA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-09T09:20:56Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T02:14:32Z"}, "message": "Remove unused code from rustc_ast", "tree": {"sha": "60d5973cc6aaccd3b9a036669b38f107b6826574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d5973cc6aaccd3b9a036669b38f107b6826574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d4a756f1138d8246abb1c027490d1ea37be920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d4a756f1138d8246abb1c027490d1ea37be920", "html_url": "https://github.com/rust-lang/rust/commit/49d4a756f1138d8246abb1c027490d1ea37be920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d4a756f1138d8246abb1c027490d1ea37be920/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7791f485ba51a4eda241a0ec70d7933858b124b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7791f485ba51a4eda241a0ec70d7933858b124b", "html_url": "https://github.com/rust-lang/rust/commit/d7791f485ba51a4eda241a0ec70d7933858b124b"}], "stats": {"total": 64, "additions": 0, "deletions": 64}, "files": [{"sha": "8f156aea2ff5be2e8c6cd3246bad44082f908e0a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=49d4a756f1138d8246abb1c027490d1ea37be920", "patch": "@@ -167,13 +167,6 @@ pub enum GenericArgs {\n }\n \n impl GenericArgs {\n-    pub fn is_parenthesized(&self) -> bool {\n-        match *self {\n-            Parenthesized(..) => true,\n-            _ => false,\n-        }\n-    }\n-\n     pub fn is_angle_bracketed(&self) -> bool {\n         match *self {\n             AngleBracketed(..) => true,\n@@ -857,13 +850,6 @@ impl BinOpKind {\n         }\n     }\n \n-    pub fn is_shift(&self) -> bool {\n-        match *self {\n-            BinOpKind::Shl | BinOpKind::Shr => true,\n-            _ => false,\n-        }\n-    }\n-\n     pub fn is_comparison(&self) -> bool {\n         use BinOpKind::*;\n         // Note for developers: please keep this as is;\n@@ -873,11 +859,6 @@ impl BinOpKind {\n             And | Or | Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr | Shl | Shr => false,\n         }\n     }\n-\n-    /// Returns `true` if the binary operator takes its arguments by value\n-    pub fn is_by_value(&self) -> bool {\n-        !self.is_comparison()\n-    }\n }\n \n pub type BinOp = Spanned<BinOpKind>;\n@@ -896,14 +877,6 @@ pub enum UnOp {\n }\n \n impl UnOp {\n-    /// Returns `true` if the unary operator takes its argument by value\n-    pub fn is_by_value(u: UnOp) -> bool {\n-        match u {\n-            UnOp::Neg | UnOp::Not => true,\n-            _ => false,\n-        }\n-    }\n-\n     pub fn to_string(op: UnOp) -> &'static str {\n         match op {\n             UnOp::Deref => \"*\",\n@@ -1753,13 +1726,6 @@ impl IntTy {\n         }\n     }\n \n-    pub fn val_to_string(&self, val: i128) -> String {\n-        // Cast to a `u128` so we can correctly print `INT128_MIN`. All integral types\n-        // are parsed as `u128`, so we wouldn't want to print an extra negative\n-        // sign.\n-        format!(\"{}{}\", val as u128, self.name_str())\n-    }\n-\n     pub fn bit_width(&self) -> Option<u64> {\n         Some(match *self {\n             IntTy::Isize => return None,\n@@ -1818,10 +1784,6 @@ impl UintTy {\n         }\n     }\n \n-    pub fn val_to_string(&self, val: u128) -> String {\n-        format!(\"{}{}\", val, self.name_str())\n-    }\n-\n     pub fn bit_width(&self) -> Option<u64> {\n         Some(match *self {\n             UintTy::Usize => return None,"}, {"sha": "8351be222f6bdd4b2dc81a077ff2619ff1923d7f", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=49d4a756f1138d8246abb1c027490d1ea37be920", "patch": "@@ -101,11 +101,6 @@ impl NestedMetaItem {\n         self.meta_item().is_some()\n     }\n \n-    /// Returns `true` if the variant is `Literal`.\n-    pub fn is_literal(&self) -> bool {\n-        self.literal().is_some()\n-    }\n-\n     /// Returns `true` if `self` is a `MetaItem` and the meta item is a word.\n     pub fn is_word(&self) -> bool {\n         self.meta_item().map_or(false, |meta_item| meta_item.is_word())\n@@ -232,10 +227,6 @@ impl MetaItem {\n     pub fn is_value_str(&self) -> bool {\n         self.value_str().is_some()\n     }\n-\n-    pub fn is_meta_item_list(&self) -> bool {\n-        self.meta_item_list().is_some()\n-    }\n }\n \n impl AttrItem {"}, {"sha": "e3992582c0bca223c6bf399b0ee5606065d951a9", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=49d4a756f1138d8246abb1c027490d1ea37be920", "patch": "@@ -54,16 +54,6 @@ pub enum DelimToken {\n     NoDelim,\n }\n \n-impl DelimToken {\n-    pub fn len(self) -> usize {\n-        if self == NoDelim { 0 } else { 1 }\n-    }\n-\n-    pub fn is_empty(self) -> bool {\n-        self == NoDelim\n-    }\n-}\n-\n #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum LitKind {\n     Bool, // AST only, must never appear in a `Token`"}, {"sha": "8acb6b2f375898fbdadd4a79e0a2c256950b05db", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=49d4a756f1138d8246abb1c027490d1ea37be920", "patch": "@@ -295,12 +295,6 @@ impl TokenStream {\n                 .collect(),\n         ))\n     }\n-\n-    pub fn map<F: FnMut(TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n-        TokenStream(Lrc::new(\n-            self.0.iter().map(|(tree, is_joint)| (f(tree.clone()), *is_joint)).collect(),\n-        ))\n-    }\n }\n \n // 99.5%+ of the time we have 1 or 2 elements in this vector."}, {"sha": "be5516ef4718b3564514cb930c1aee6a9f022365", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d4a756f1138d8246abb1c027490d1ea37be920/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=49d4a756f1138d8246abb1c027490d1ea37be920", "patch": "@@ -231,7 +231,6 @@ impl AssocOp {\n     }\n }\n \n-pub const PREC_RESET: i8 = -100;\n pub const PREC_CLOSURE: i8 = -40;\n pub const PREC_JUMP: i8 = -30;\n pub const PREC_RANGE: i8 = -10;"}]}