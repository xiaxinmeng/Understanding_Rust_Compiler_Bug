{"sha": "6ead1c869944b3d1cafd0ea73aa26939e95be117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYWQxYzg2OTk0NGIzZDFjYWZkMGVhNzNhYTI2OTM5ZTk1YmUxMTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-05T14:17:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:20Z"}, "message": "rename `ConstraintSet` to `OutlivesConstraintSet`", "tree": {"sha": "1d92522d13773491da0a056b771b87fcd6faf7aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d92522d13773491da0a056b771b87fcd6faf7aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ead1c869944b3d1cafd0ea73aa26939e95be117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ead1c869944b3d1cafd0ea73aa26939e95be117", "html_url": "https://github.com/rust-lang/rust/commit/6ead1c869944b3d1cafd0ea73aa26939e95be117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ead1c869944b3d1cafd0ea73aa26939e95be117/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddc63ce19ffa87825b000e47294e9ec05e223126", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc63ce19ffa87825b000e47294e9ec05e223126", "html_url": "https://github.com/rust-lang/rust/commit/ddc63ce19ffa87825b000e47294e9ec05e223126"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "1d9e6064c416b38c813ac31d70522cf3b7d4d803", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=6ead1c869944b3d1cafd0ea73aa26939e95be117", "patch": "@@ -1,6 +1,6 @@\n use crate::borrow_check::nll::type_check::Locations;\n use crate::borrow_check::nll::constraints::OutlivesConstraintIndex;\n-use crate::borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::constraints::{OutlivesConstraintSet, OutlivesConstraint};\n use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;\n@@ -77,7 +77,7 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n     /// reporting.\n     crate fn new(\n         direction: D,\n-        set: &ConstraintSet,\n+        set: &OutlivesConstraintSet,\n         num_region_vars: usize,\n     ) -> Self {\n         let mut first_constraints = IndexVec::from_elem_n(None, num_region_vars);\n@@ -103,7 +103,7 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n     /// and not constraints.\n     crate fn region_graph<'rg>(\n         &'rg self,\n-        set: &'rg ConstraintSet,\n+        set: &'rg OutlivesConstraintSet,\n         static_region: RegionVid,\n     ) -> RegionGraph<'rg, D> {\n         RegionGraph::new(set, self, static_region)\n@@ -113,7 +113,7 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n     crate fn outgoing_edges<'a>(\n         &'a self,\n         region_sup: RegionVid,\n-        constraints: &'a ConstraintSet,\n+        constraints: &'a OutlivesConstraintSet,\n         static_region: RegionVid,\n     ) -> Edges<'a, D> {\n         //if this is the `'static` region and the graph's direction is normal,\n@@ -142,7 +142,7 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n \n crate struct Edges<'s, D: ConstraintGraphDirecton> {\n     graph: &'s ConstraintGraph<D>,\n-    constraints: &'s ConstraintSet,\n+    constraints: &'s OutlivesConstraintSet,\n     pointer: Option<OutlivesConstraintIndex>,\n     next_static_idx: Option<usize>,\n     static_region: RegionVid,\n@@ -180,7 +180,7 @@ impl<'s, D: ConstraintGraphDirecton> Iterator for Edges<'s, D> {\n /// reverse) constraint graph. It implements the graph traits and is\n /// usd for doing the SCC computation.\n crate struct RegionGraph<'s, D: ConstraintGraphDirecton> {\n-    set: &'s ConstraintSet,\n+    set: &'s OutlivesConstraintSet,\n     constraint_graph: &'s ConstraintGraph<D>,\n     static_region: RegionVid,\n }\n@@ -191,7 +191,7 @@ impl<'s, D: ConstraintGraphDirecton> RegionGraph<'s, D> {\n     /// construct SCCs for region inference but also for error\n     /// reporting.\n     crate fn new(\n-        set: &'s ConstraintSet,\n+        set: &'s OutlivesConstraintSet,\n         constraint_graph: &'s ConstraintGraph<D>,\n         static_region: RegionVid,\n     ) -> Self {"}, {"sha": "6121ed0cf0d1c3282b87dc813de3f85b294e8407", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=6ead1c869944b3d1cafd0ea73aa26939e95be117", "patch": "@@ -13,14 +13,14 @@ crate mod graph;\n /// a unique `OutlivesConstraintIndex` and you can index into the set\n /// (`constraint_set[i]`) to access the constraint details.\n #[derive(Clone, Default)]\n-crate struct ConstraintSet {\n+crate struct OutlivesConstraintSet {\n     outlives: IndexVec<OutlivesConstraintIndex, OutlivesConstraint>,\n }\n \n-impl ConstraintSet {\n+impl OutlivesConstraintSet {\n     crate fn push(&mut self, constraint: OutlivesConstraint) {\n         debug!(\n-            \"ConstraintSet::push({:?}: {:?} @ {:?}\",\n+            \"OutlivesConstraintSet::push({:?}: {:?} @ {:?}\",\n             constraint.sup, constraint.sub, constraint.locations\n         );\n         if constraint.sup == constraint.sub {\n@@ -34,7 +34,7 @@ impl ConstraintSet {\n     /// easy to find the constraints affecting a particular region.\n     ///\n     /// N.B., this graph contains a \"frozen\" view of the current\n-    /// constraints. Any new constraints added to the `ConstraintSet`\n+    /// constraints. Any new constraints added to the `OutlivesConstraintSet`\n     /// after the graph is built will not be present in the graph.\n     crate fn graph(&self, num_region_vars: usize) -> graph::NormalConstraintGraph {\n         graph::ConstraintGraph::new(graph::Normal, self, num_region_vars)\n@@ -63,7 +63,7 @@ impl ConstraintSet {\n     }\n }\n \n-impl Index<OutlivesConstraintIndex> for ConstraintSet {\n+impl Index<OutlivesConstraintIndex> for OutlivesConstraintSet {\n     type Output = OutlivesConstraint;\n \n     fn index(&self, i: OutlivesConstraintIndex) -> &Self::Output {"}, {"sha": "4a44c41eb819e790ed35e38d38d97475e56a4605", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=6ead1c869944b3d1cafd0ea73aa26939e95be117", "patch": "@@ -1,6 +1,6 @@\n use super::universal_regions::UniversalRegions;\n use crate::borrow_check::nll::constraints::graph::NormalConstraintGraph;\n-use crate::borrow_check::nll::constraints::{ConstraintSccIndex, ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::constraints::{ConstraintSccIndex, OutlivesConstraintSet, OutlivesConstraint};\n use crate::borrow_check::nll::region_infer::values::{\n     PlaceholderIndices, RegionElement, ToElementIndex\n };\n@@ -49,7 +49,7 @@ pub struct RegionInferenceContext<'tcx> {\n     liveness_constraints: LivenessValues<RegionVid>,\n \n     /// The outlives constraints computed by the type-check.\n-    constraints: Rc<ConstraintSet>,\n+    constraints: Rc<OutlivesConstraintSet>,\n \n     /// The constraint-set, but in graph form, making it easy to traverse\n     /// the constraints adjacent to a particular region. Used to construct\n@@ -186,7 +186,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         placeholder_indices: Rc<PlaceholderIndices>,\n         universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n         _body: &Body<'tcx>,\n-        outlives_constraints: ConstraintSet,\n+        outlives_constraints: OutlivesConstraintSet,\n         closure_bounds_mapping: FxHashMap<\n             Location,\n             FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,"}, {"sha": "4af78fa5e0f42e4dd64979434aeb0384ff7ebb94", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=6ead1c869944b3d1cafd0ea73aa26939e95be117", "patch": "@@ -1,5 +1,5 @@\n use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::nll::constraints::ConstraintSet;\n+use crate::borrow_check::nll::constraints::OutlivesConstraintSet;\n use crate::borrow_check::nll::facts::{AllFacts, AllFactsExt};\n use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n use crate::borrow_check::nll::universal_regions::UniversalRegions;\n@@ -107,7 +107,7 @@ fn compute_live_locals(\n fn regions_that_outlive_free_regions(\n     num_region_vars: usize,\n     universal_regions: &UniversalRegions<'tcx>,\n-    constraint_set: &ConstraintSet,\n+    constraint_set: &OutlivesConstraintSet,\n ) -> FxHashSet<RegionVid> {\n     // Build a graph of the outlives constraints thus far. This is\n     // a reverse graph, so for each constraint `R1: R2` we have an"}, {"sha": "221eb871dbf85d865a3fdfd12c9268af1aac4f4a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ead1c869944b3d1cafd0ea73aa26939e95be117/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=6ead1c869944b3d1cafd0ea73aa26939e95be117", "patch": "@@ -4,7 +4,7 @@\n \n use crate::borrow_check::borrow_set::BorrowSet;\n use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use crate::borrow_check::nll::constraints::{OutlivesConstraintSet, OutlivesConstraint};\n use crate::borrow_check::nll::facts::AllFacts;\n use crate::borrow_check::nll::region_infer::values::LivenessValues;\n use crate::borrow_check::nll::region_infer::values::PlaceholderIndex;\n@@ -127,7 +127,7 @@ pub(crate) fn type_check<'tcx>(\n         placeholder_indices: PlaceholderIndices::default(),\n         placeholder_index_to_region: IndexVec::default(),\n         liveness_constraints: LivenessValues::new(elements.clone()),\n-        outlives_constraints: ConstraintSet::default(),\n+        outlives_constraints: OutlivesConstraintSet::default(),\n         closure_bounds_mapping: Default::default(),\n         type_tests: Vec::default(),\n     };\n@@ -884,7 +884,7 @@ crate struct MirTypeckRegionConstraints<'tcx> {\n     /// hence it must report on their liveness constraints.\n     crate liveness_constraints: LivenessValues<RegionVid>,\n \n-    crate outlives_constraints: ConstraintSet,\n+    crate outlives_constraints: OutlivesConstraintSet,\n \n     crate closure_bounds_mapping:\n         FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,"}]}