{"sha": "3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTFlOGI3N2RiNDQzNzc1ZWVhMmNjZDQwYjBjZjFlMjdkYzc3ZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-30T12:56:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-30T12:56:58Z"}, "message": "Lexer: move numbers to a separate file", "tree": {"sha": "dee794779536390e1becbc6939d23076e4137586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dee794779536390e1becbc6939d23076e4137586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "html_url": "https://github.com/rust-lang/rust/commit/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5217dbb76593a1dba1ff3db3ca0221c457e687", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5217dbb76593a1dba1ff3db3ca0221c457e687", "html_url": "https://github.com/rust-lang/rust/commit/2d5217dbb76593a1dba1ff3db3ca0221c457e687"}], "stats": {"total": 136, "additions": 73, "deletions": 63}, "files": [{"sha": "e60dbbe8ec92a163d128b2bca41af9d2e670abb5", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 63, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "patch": "@@ -7,6 +7,9 @@ use self::ptr::Ptr;\n mod classes;\n use self::classes::*;\n \n+mod numbers;\n+use self::numbers::scan_number;\n+\n pub fn next_token(text: &str) -> Token {\n     assert!(!text.is_empty());\n     let mut ptr = Ptr::new(text);\n@@ -50,69 +53,6 @@ fn scan_ident(c: char, ptr: &mut Ptr) -> SyntaxKind {\n     IDENT\n }\n \n-fn scan_number(c: char, ptr: &mut Ptr) -> SyntaxKind {\n-    if c == '0' {\n-        match ptr.next().unwrap_or('\\0') {\n-            'b' | 'o' => {\n-                ptr.bump();\n-                scan_digits(ptr, false);\n-            }\n-            'x' => {\n-                ptr.bump();\n-                scan_digits(ptr, true);\n-            }\n-            '0'...'9' | '_' | '.' | 'e' | 'E' => {\n-                scan_digits(ptr, true);\n-            }\n-            _ => return INT_NUMBER,\n-        }\n-    } else {\n-        scan_digits(ptr, false);\n-    }\n-\n-    // might be a float, but don't be greedy if this is actually an\n-    // integer literal followed by field/method access or a range pattern\n-    // (`0..2` and `12.foo()`)\n-    if ptr.next_is('.') && !(ptr.nnext_is('.') || ptr.nnext_is_p(is_ident_start)) {\n-        // might have stuff after the ., and if it does, it needs to start\n-        // with a number\n-        ptr.bump();\n-        scan_digits(ptr, false);\n-        scan_float_exponent(ptr);\n-        return FLOAT_NUMBER;\n-    }\n-    // it might be a float if it has an exponent\n-    if ptr.next_is('e') || ptr.next_is('E') {\n-        scan_float_exponent(ptr);\n-        return FLOAT_NUMBER;\n-    }\n-    INT_NUMBER\n-}\n-\n-fn scan_digits(ptr: &mut Ptr, allow_hex: bool) {\n-    while let Some(c) = ptr.next() {\n-        match c {\n-            '_' | '0'...'9' => {\n-                ptr.bump();\n-            }\n-            'a'...'f' | 'A' ... 'F' if allow_hex => {\n-                ptr.bump();\n-            }\n-            _ => return\n-        }\n-    }\n-}\n-\n-fn scan_float_exponent(ptr: &mut Ptr) {\n-    if ptr.next_is('e') || ptr.next_is('E') {\n-        ptr.bump();\n-        if ptr.next_is('-') || ptr.next_is('+') {\n-            ptr.bump();\n-        }\n-        scan_digits(ptr, false);\n-    }\n-}\n-\n fn string_literal_start(c: char, c1: Option<char>, c2: Option<char>) -> bool {\n     match (c, c1, c2) {\n         ('r', Some('\"'), _) |"}, {"sha": "4c7edfe1ccb03cb0fe31ab226c6ad6dfec6a5eb4", "filename": "src/lexer/numbers.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/src%2Flexer%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/src%2Flexer%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fnumbers.rs?ref=3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "patch": "@@ -0,0 +1,68 @@\n+use lexer::ptr::Ptr;\n+use lexer::classes::*;\n+\n+use {SyntaxKind};\n+use syntax_kinds::*;\n+\n+pub(crate) fn scan_number(c: char, ptr: &mut Ptr) -> SyntaxKind {\n+    if c == '0' {\n+        match ptr.next().unwrap_or('\\0') {\n+            'b' | 'o' => {\n+                ptr.bump();\n+                scan_digits(ptr, false);\n+            }\n+            'x' => {\n+                ptr.bump();\n+                scan_digits(ptr, true);\n+            }\n+            '0'...'9' | '_' | '.' | 'e' | 'E' => {\n+                scan_digits(ptr, true);\n+            }\n+            _ => return INT_NUMBER,\n+        }\n+    } else {\n+        scan_digits(ptr, false);\n+    }\n+\n+    // might be a float, but don't be greedy if this is actually an\n+    // integer literal followed by field/method access or a range pattern\n+    // (`0..2` and `12.foo()`)\n+    if ptr.next_is('.') && !(ptr.nnext_is('.') || ptr.nnext_is_p(is_ident_start)) {\n+        // might have stuff after the ., and if it does, it needs to start\n+        // with a number\n+        ptr.bump();\n+        scan_digits(ptr, false);\n+        scan_float_exponent(ptr);\n+        return FLOAT_NUMBER;\n+    }\n+    // it might be a float if it has an exponent\n+    if ptr.next_is('e') || ptr.next_is('E') {\n+        scan_float_exponent(ptr);\n+        return FLOAT_NUMBER;\n+    }\n+    INT_NUMBER\n+}\n+\n+fn scan_digits(ptr: &mut Ptr, allow_hex: bool) {\n+    while let Some(c) = ptr.next() {\n+        match c {\n+            '_' | '0'...'9' => {\n+                ptr.bump();\n+            }\n+            'a'...'f' | 'A' ... 'F' if allow_hex => {\n+                ptr.bump();\n+            }\n+            _ => return\n+        }\n+    }\n+}\n+\n+fn scan_float_exponent(ptr: &mut Ptr) {\n+    if ptr.next_is('e') || ptr.next_is('E') {\n+        ptr.bump();\n+        if ptr.next_is('-') || ptr.next_is('+') {\n+            ptr.bump();\n+        }\n+        scan_digits(ptr, false);\n+    }\n+}"}, {"sha": "0c0d37627031cb38d0cf10347169db9df437094f", "filename": "tests/data/lexer/0004_number.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/tests%2Fdata%2Flexer%2F0004_number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/tests%2Fdata%2Flexer%2F0004_number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0004_number.rs?ref=3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "patch": "@@ -5,3 +5,4 @@\n 0e+1\n 0.e+1\n 0.0E-2\n+0___0.10000____0000e+111__\n\\ No newline at end of file"}, {"sha": "94fe0302d6ba9a1498a59c688b687b2955aad9fc", "filename": "tests/data/lexer/0004_number.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/tests%2Fdata%2Flexer%2F0004_number.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3e91e8b77db443775eea2ccd40b0cf1e27dc77d8/tests%2Fdata%2Flexer%2F0004_number.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0004_number.txt?ref=3e91e8b77db443775eea2ccd40b0cf1e27dc77d8", "patch": "@@ -60,3 +60,4 @@ INT_NUMBER 1 \"1\"\n WHITESPACE 1 \"\\n\"\n FLOAT_NUMBER 6 \"0.0E-2\"\n WHITESPACE 1 \"\\n\"\n+FLOAT_NUMBER 26 \"0___0.10000____0000e+111__\""}]}