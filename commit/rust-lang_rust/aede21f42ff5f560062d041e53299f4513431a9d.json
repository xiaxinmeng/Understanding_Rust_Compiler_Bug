{"sha": "aede21f42ff5f560062d041e53299f4513431a9d", "node_id": "C_kwDOAAsO6NoAKGFlZGUyMWY0MmZmNWY1NjAwNjJkMDQxZTUzMjk5ZjQ1MTM0MzFhOWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-04T01:06:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-04T01:06:41Z"}, "message": "Rollup merge of #94404 - pierwill:newtype-index-noord-2, r=Aaron1011\n\nMake Ord and PartialOrd opt-out in `newtype_index`\n\nPart of work on #90317. This will allow us to do\n\n```diff\nrustc_index::newtype_index! {\n    /// A unique ID associated with a macro invocation and expansion.\n    pub struct LocalExpnId {\n        ENCODABLE = custom\n        DEBUG_FORMAT = \"expn{}\"\n+       ORD_IMPL = off\n    }\n}\n```", "tree": {"sha": "419e17b93160536168f2a8276f0e85137dc42349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/419e17b93160536168f2a8276f0e85137dc42349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aede21f42ff5f560062d041e53299f4513431a9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIWYhCRBK7hj4Ov3rIwAA1MwIAHfYvIagKSO5ix4iRwQV49FH\nQj9THQ73MBv+1m9MdvmXL27z2C0pwcV20o93vEL6cxX7qULX28TTpOVdTHT2+9ft\n+mqXQichO/HiV0/pq2bm1KhwLKuIY60rT8OrYIiKqZoJGaF4BwRWjt45e9Q3nT3O\nWhvJayGfbQU3/9DwSVH0gcHTvAyOxyz8aMDixDMQsWXKGbygvZXplWeUmrT4I/1E\ncVe/HvPWn+FT5IAfvSp+i1z4QmAuo+og24SL1KKPnJXfrFdRyu9e6on13NJ6WB0z\nGwicWMRurxZizvdNis3Uvq9SxNcZLRUnAJmAnZPZiTieClApol/xpH7nzNTkZew=\n=3Fhs\n-----END PGP SIGNATURE-----\n", "payload": "tree 419e17b93160536168f2a8276f0e85137dc42349\nparent 79c71d1f9e41aad3c8104ed7b7fe6762823076a6\nparent c08a9a4f1d03f48ae38dba885fce96fad785a2de\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646356001 +0100\ncommitter GitHub <noreply@github.com> 1646356001 +0100\n\nRollup merge of #94404 - pierwill:newtype-index-noord-2, r=Aaron1011\n\nMake Ord and PartialOrd opt-out in `newtype_index`\n\nPart of work on #90317. This will allow us to do\n\n```diff\nrustc_index::newtype_index! {\n    /// A unique ID associated with a macro invocation and expansion.\n    pub struct LocalExpnId {\n        ENCODABLE = custom\n        DEBUG_FORMAT = \"expn{}\"\n+       ORD_IMPL = off\n    }\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aede21f42ff5f560062d041e53299f4513431a9d", "html_url": "https://github.com/rust-lang/rust/commit/aede21f42ff5f560062d041e53299f4513431a9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aede21f42ff5f560062d041e53299f4513431a9d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c71d1f9e41aad3c8104ed7b7fe6762823076a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c71d1f9e41aad3c8104ed7b7fe6762823076a6", "html_url": "https://github.com/rust-lang/rust/commit/79c71d1f9e41aad3c8104ed7b7fe6762823076a6"}, {"sha": "c08a9a4f1d03f48ae38dba885fce96fad785a2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08a9a4f1d03f48ae38dba885fce96fad785a2de", "html_url": "https://github.com/rust-lang/rust/commit/c08a9a4f1d03f48ae38dba885fce96fad785a2de"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "f5968a8a7ea73ce15c9b7f1ffb0c1a42c0b98019", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/aede21f42ff5f560062d041e53299f4513431a9d/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aede21f42ff5f560062d041e53299f4513431a9d/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=aede21f42ff5f560062d041e53299f4513431a9d", "patch": "@@ -10,6 +10,7 @@ mod kw {\n     syn::custom_keyword!(MAX);\n     syn::custom_keyword!(ENCODABLE);\n     syn::custom_keyword!(custom);\n+    syn::custom_keyword!(ORD_IMPL);\n }\n \n #[derive(Debug)]\n@@ -42,6 +43,7 @@ impl Parse for Newtype {\n         let mut max = None;\n         let mut consts = Vec::new();\n         let mut encodable = true;\n+        let mut ord = true;\n \n         // Parse an optional trailing comma\n         let try_comma = || -> Result<()> {\n@@ -99,13 +101,20 @@ impl Parse for Newtype {\n                     encodable = false;\n                     continue;\n                 }\n+                if body.lookahead1().peek(kw::ORD_IMPL) {\n+                    body.parse::<kw::ORD_IMPL>()?;\n+                    body.parse::<Token![=]>()?;\n+                    body.parse::<kw::custom>()?;\n+                    ord = false;\n+                    continue;\n+                }\n \n                 // We've parsed everything that the user provided, so we're done\n                 if body.is_empty() {\n                     break;\n                 }\n \n-                // Otherwise, we are parsng a user-defined constant\n+                // Otherwise, we are parsing a user-defined constant\n                 let const_attrs = body.call(Attribute::parse_outer)?;\n                 body.parse::<Token![const]>()?;\n                 let const_name: Ident = body.parse()?;\n@@ -137,6 +146,40 @@ impl Parse for Newtype {\n             quote! {}\n         };\n \n+        if ord {\n+            derive_paths.push(parse_quote!(Ord));\n+            derive_paths.push(parse_quote!(PartialOrd));\n+        }\n+\n+        let step = if ord {\n+            quote! {\n+                impl ::std::iter::Step for #name {\n+                    #[inline]\n+                    fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n+                        <usize as ::std::iter::Step>::steps_between(\n+                            &Self::index(*start),\n+                            &Self::index(*end),\n+                        )\n+                    }\n+\n+                    #[inline]\n+                    fn forward_checked(start: Self, u: usize) -> Option<Self> {\n+                        Self::index(start).checked_add(u).map(Self::from_usize)\n+                    }\n+\n+                    #[inline]\n+                    fn backward_checked(start: Self, u: usize) -> Option<Self> {\n+                        Self::index(start).checked_sub(u).map(Self::from_usize)\n+                    }\n+                }\n+\n+                // Safety: The implementation of `Step` upholds all invariants.\n+                unsafe impl ::std::iter::TrustedStep for #name {}\n+            }\n+        } else {\n+            quote! {}\n+        };\n+\n         let debug_impl = match debug_format {\n             DebugFormat::Custom => quote! {},\n             DebugFormat::Format(format) => {\n@@ -152,7 +195,7 @@ impl Parse for Newtype {\n \n         Ok(Self(quote! {\n             #(#attrs)*\n-            #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, #(#derive_paths),*)]\n+            #[derive(Clone, Copy, PartialEq, Eq, Hash, #(#derive_paths),*)]\n             #[rustc_layout_scalar_valid_range_end(#max)]\n             #vis struct #name {\n                 private: u32,\n@@ -247,28 +290,7 @@ impl Parse for Newtype {\n                 }\n             }\n \n-            impl ::std::iter::Step for #name {\n-                #[inline]\n-                fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n-                    <usize as ::std::iter::Step>::steps_between(\n-                        &Self::index(*start),\n-                        &Self::index(*end),\n-                    )\n-                }\n-\n-                #[inline]\n-                fn forward_checked(start: Self, u: usize) -> Option<Self> {\n-                    Self::index(start).checked_add(u).map(Self::from_usize)\n-                }\n-\n-                #[inline]\n-                fn backward_checked(start: Self, u: usize) -> Option<Self> {\n-                    Self::index(start).checked_sub(u).map(Self::from_usize)\n-                }\n-            }\n-\n-            // Safety: The implementation of `Step` upholds all invariants.\n-            unsafe impl ::std::iter::TrustedStep for #name {}\n+            #step\n \n             impl From<#name> for u32 {\n                 #[inline]"}]}