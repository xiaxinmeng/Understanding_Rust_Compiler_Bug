{"sha": "628b2173265e19cb5d22b86349618b0ab88cf5c2", "node_id": "C_kwDOAAsO6NoAKDYyOGIyMTczMjY1ZTE5Y2I1ZDIyYjg2MzQ5NjE4YjBhYjg4Y2Y1YzI", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-10-30T10:47:47Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-02-05T19:15:17Z"}, "message": "Optimize `core::str::Chars::count`", "tree": {"sha": "6d8f680d120bd2087bd9531ee691193532e4c03f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8f680d120bd2087bd9531ee691193532e4c03f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/628b2173265e19cb5d22b86349618b0ab88cf5c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmH+zMUACgkQ4u/UMJ4R\nyKjzDA/+JbqzFtZEmjsjHMtwl63D0FyIzZRR1lKWOM1AIfp4LmnTIJUsqAmkzort\nGiGz935nZ9gtnhdHWNM5pMF8IuhX0wt7E3F7cyt49a6QOEj6gMI4qvv5mlb1pnmb\nK3g93uS6UjiJFzDqUcOCrW0BZFfm1443myDj98Ds3Eu8ppVeRErm0FNRIySYOUTU\nrGapFG7Xgua0vWcy6anjng7nbWCwo0kK0/4JcOspMXK8hxueCFswBj2vRL7JhIaB\nTlFQHSfzxUEBpJThxSpzvJ3JEeCp86lQcixdm6NDjn+I9G/bFo0HNpL3Yc0Ae+25\nc3oC5vhj8sdUBGx5W9FRxcce6eI5tf+riti7lAWYd0QU9MOWeY/3MNd7PC/ViQCt\nIMU7tPELTmQvwQXYYPYRm7FWaog7xN7zSDdR7dmD/DtOz44X8jqAUex1uFv/fnwe\nndwJyrSCkT8MiSrEVqQvMKQS0GgladdhZgq54car35xf4HJi6fHeKaNCcJSIuYbn\nhT1hLO+kylb1DCwQ5go7VKfAJmouAjokbyE5a9hOVoEsDBmG3HI3v1KueMKj5sxd\n0WFbk0OpnMhx9rXFMWMUiVFyJC3lglcrDcvxc0QexFZ3CFVIniDIPmTU6xABYMt6\nWxeaUKMA2rqHfqdbc5Fxf/NyRISMEQljqfLrRERnxdFo2pT5A30=\n=xKOL\n-----END PGP SIGNATURE-----", "payload": "tree 6d8f680d120bd2087bd9531ee691193532e4c03f\nparent 71226d717a1fb57122e47e63b97295e703319cb0\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1635590867 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1644088517 -0800\n\nOptimize `core::str::Chars::count`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/628b2173265e19cb5d22b86349618b0ab88cf5c2", "html_url": "https://github.com/rust-lang/rust/commit/628b2173265e19cb5d22b86349618b0ab88cf5c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/628b2173265e19cb5d22b86349618b0ab88cf5c2/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71226d717a1fb57122e47e63b97295e703319cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71226d717a1fb57122e47e63b97295e703319cb0", "html_url": "https://github.com/rust-lang/rust/commit/71226d717a1fb57122e47e63b97295e703319cb0"}], "stats": {"total": 375, "additions": 346, "deletions": 29}, "files": [{"sha": "3dcbc54be4e8d79dcc919401f13fd2ac55547725", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=628b2173265e19cb5d22b86349618b0ab88cf5c2", "patch": "@@ -2230,3 +2230,43 @@ fn utf8_chars() {\n     assert!((!from_utf8(&[0xf0, 0xff, 0x10]).is_ok()));\n     assert!((!from_utf8(&[0xf0, 0xff, 0xff, 0x10]).is_ok()));\n }\n+\n+#[test]\n+fn utf8_char_counts() {\n+    let strs = [(\"e\", 1), (\"\u00e9\", 1), (\"\u20ac\", 1), (\"\\u{10000}\", 1), (\"e\u00e9\u20ac\\u{10000}\", 4)];\n+    let mut reps = vec![1, 8, 64, 256, 512, 1024];\n+    if cfg!(not(miri)) {\n+        reps.push(1 << 16);\n+    }\n+    let counts = if cfg!(miri) { 0..1 } else { 0..8 };\n+    let padding = counts.map(|len| \" \".repeat(len)).collect::<Vec<String>>();\n+\n+    for repeat in reps {\n+        for (tmpl_str, tmpl_char_count) in strs {\n+            for pad_start in &padding {\n+                for pad_end in &padding {\n+                    // Create a string with padding...\n+                    let with_padding =\n+                        format!(\"{}{}{}\", pad_start, tmpl_str.repeat(repeat), pad_end);\n+                    // ...and then skip past that padding. This should ensure\n+                    // that we test several different alignments for both head\n+                    // and tail.\n+                    let si = pad_start.len();\n+                    let ei = with_padding.len() - pad_end.len();\n+                    let target = &with_padding[si..ei];\n+\n+                    assert!(!target.starts_with(\" \") && !target.ends_with(\" \"));\n+                    let expected_count = tmpl_char_count * repeat;\n+                    assert_eq!(\n+                        expected_count,\n+                        target.chars().count(),\n+                        \"wrong count for `{:?}.repeat({})` (padding: `{:?}`)\",\n+                        tmpl_str,\n+                        repeat,\n+                        (pad_start.len(), pad_end.len()),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "78865d81fb90c3f965e3d061d11d38f387fdb55f", "filename": "library/core/benches/str.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fbenches%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fbenches%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fstr.rs?ref=628b2173265e19cb5d22b86349618b0ab88cf5c2", "patch": "@@ -1,33 +1,10 @@\n use std::str;\n use test::{black_box, Bencher};\n \n-const LOREM_SHORT: &str = \"Lorem ipsum\";\n-\n-const LOREM: &str = \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n-Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\n-Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.\n-Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\n-Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.\n-At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur\";\n-\n-const EMOJI: &str = \"\ud83d\ude00\ud83d\ude03\ud83d\ude04\ud83d\ude01\ud83d\ude06\ud83d\ude05\ud83e\udd23\ud83d\ude02\ud83d\ude42\ud83d\ude43\ud83d\ude09\ud83d\ude0a\ud83d\ude07\ud83e\udd70\ud83d\ude0d\ud83e\udd29\ud83d\ude18\ud83d\ude17\u263a\ud83d\ude1a\ud83d\ude19\ud83e\udd72\ud83d\ude0b\ud83d\ude1b\ud83d\ude1c\ud83e\udd2a\ud83d\ude1d\ud83e\udd11\ud83e\udd17\ud83e\udd2d\ud83e\udd2b\ud83e\udd14\ud83e\udd10\ud83e\udd28\ud83d\ude10\ud83d\ude11\ud83d\ude36\ud83d\ude36\u200d\ud83c\udf2b\ufe0f\ud83d\ude0f\ud83d\ude12\ud83d\ude44\ud83d\ude2c\ud83d\ude2e\u200d\ud83d\udca8\ud83e\udd25\ud83d\ude0c\ud83d\ude14\ud83d\ude2a\ud83e\udd24\ud83d\ude34\ud83d\ude37\ud83e\udd12\ud83e\udd15\ud83e\udd22\ud83e\udd2e\ud83e\udd27\ud83e\udd75\ud83e\udd76\ud83e\udd74\ud83d\ude35\ud83d\ude35\u200d\ud83d\udcab\ud83e\udd2f\ud83e\udd20\ud83e\udd73\ud83e\udd78\ud83d\ude0e\ud83e\udd13\ud83e\uddd0\ud83d\ude15\ud83d\ude1f\ud83d\ude41\u2639\ud83d\ude2e\ud83d\ude2f\ud83d\ude32\ud83d\ude33\ud83e\udd7a\ud83d\ude26\ud83d\ude27\ud83d\ude28\ud83d\ude30\ud83d\ude25\ud83d\ude22\ud83d\ude2d\ud83d\ude31\ud83d\ude16\ud83d\ude23\ud83d\ude1e\ud83d\ude13\ud83d\ude29\ud83d\ude2b\ud83e\udd71\ud83d\ude24\ud83d\ude21\ud83d\ude20\ud83e\udd2c\ud83d\ude08\ud83d\udc7f\ud83d\udc80\u2620\ud83d\udca9\ud83e\udd21\ud83d\udc79\ud83d\udc7a\ud83d\udc7b\ud83d\udc7d\ud83d\udc7e\ud83e\udd16\ud83d\ude3a\ud83d\ude38\ud83d\ude39\ud83d\ude3b\ud83d\ude3c\ud83d\ude3d\ud83d\ude40\ud83d\ude3f\ud83d\ude3e\ud83d\ude48\ud83d\ude49\ud83d\ude4a\ud83d\udc8b\ud83d\udc8c\ud83d\udc98\ud83d\udc9d\ud83d\udc96\ud83d\udc97\ud83d\udc93\ud83d\udc9e\ud83d\udc95\ud83d\udc9f\u2763\ud83d\udc94\u2764\ufe0f\u200d\ud83d\udd25\u2764\ufe0f\u200d\ud83e\ude79\u2764\ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\ud83e\udd0e\ud83d\udda4\ud83e\udd0d\ud83d\udcaf\ud83d\udca2\ud83d\udca5\ud83d\udcab\ud83d\udca6\ud83d\udca8\ud83d\udd73\ud83d\udca3\ud83d\udcac\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f\ud83d\udde8\ud83d\uddef\ud83d\udcad\ud83d\udca4\ud83d\udc4b\ud83e\udd1a\ud83d\udd90\u270b\ud83d\udd96\ud83d\udc4c\ud83e\udd0c\ud83e\udd0f\u270c\ud83e\udd1e\ud83e\udd1f\ud83e\udd18\ud83e\udd19\ud83d\udc48\ud83d\udc49\ud83d\udc46\ud83d\udd95\ud83d\udc47\u261d\ud83d\udc4d\ud83d\udc4e\u270a\ud83d\udc4a\ud83e\udd1b\ud83e\udd1c\ud83d\udc4f\ud83d\ude4c\ud83d\udc50\ud83e\udd32\ud83e\udd1d\ud83d\ude4f\u270d\ud83d\udc85\ud83e\udd33\ud83d\udcaa\ud83e\uddbe\ud83e\uddbf\ud83e\uddb5\ud83e\uddb6\ud83d\udc42\ud83e\uddbb\ud83d\udc43\ud83e\udde0\ud83e\udec0\ud83e\udec1\ud83e\uddb7\ud83e\uddb4\ud83d\udc40\ud83d\udc41\ud83d\udc45\ud83d\udc44\ud83d\udc76\ud83e\uddd2\ud83d\udc66\ud83d\udc67\ud83e\uddd1\ud83d\udc71\ud83d\udc68\ud83e\uddd4\ud83e\uddd4\u200d\u2642\ufe0f\ud83e\uddd4\u200d\u2640\ufe0f\ud83d\udc68\u200d\ud83e\uddb0\ud83d\udc68\u200d\ud83e\uddb1\ud83d\udc68\u200d\ud83e\uddb3\ud83d\udc68\u200d\ud83e\uddb2\ud83d\udc69\ud83d\udc69\u200d\ud83e\uddb0\ud83e\uddd1\u200d\ud83e\uddb0\ud83d\udc69\u200d\ud83e\uddb1\ud83e\uddd1\u200d\ud83e\uddb1\ud83d\udc69\u200d\ud83e\uddb3\ud83e\uddd1\u200d\ud83e\uddb3\ud83d\udc69\u200d\ud83e\uddb2\ud83e\uddd1\u200d\ud83e\uddb2\ud83d\udc71\u200d\u2640\ufe0f\ud83d\udc71\u200d\u2642\ufe0f\ud83e\uddd3\ud83d\udc74\ud83d\udc75\ud83d\ude4d\ud83d\ude4d\u200d\u2642\ufe0f\ud83d\ude4d\u200d\u2640\ufe0f\ud83d\ude4e\ud83d\ude4e\u200d\u2642\ufe0f\ud83d\ude4e\u200d\u2640\ufe0f\ud83d\ude45\ud83d\ude45\u200d\u2642\ufe0f\ud83d\ude45\u200d\u2640\ufe0f\ud83d\ude46\ud83d\ude46\u200d\u2642\ufe0f\ud83d\ude46\u200d\u2640\ufe0f\ud83d\udc81\ud83d\udc81\u200d\u2642\ufe0f\ud83d\udc81\u200d\u2640\ufe0f\ud83d\ude4b\ud83d\ude4b\u200d\u2642\ufe0f\ud83d\ude4b\u200d\u2640\ufe0f\ud83e\uddcf\ud83e\uddcf\u200d\u2642\ufe0f\ud83e\uddcf\u200d\u2640\ufe0f\ud83d\ude47\ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2640\ufe0f\ud83e\udd26\ud83e\udd26\u200d\u2642\ufe0f\ud83e\udd26\u200d\u2640\ufe0f\ud83e\udd37\ud83e\udd37\u200d\u2642\ufe0f\ud83e\udd37\u200d\u2640\ufe0f\ud83e\uddd1\u200d\u2695\ufe0f\ud83d\udc68\u200d\u2695\ufe0f\ud83d\udc69\u200d\u2695\ufe0f\ud83e\uddd1\u200d\ud83c\udf93\ud83d\udc68\u200d\ud83c\udf93\ud83d\udc69\u200d\ud83c\udf93\ud83e\uddd1\u200d\ud83c\udfeb\ud83d\udc68\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83e\uddd1\u200d\u2696\ufe0f\ud83d\udc68\u200d\u2696\ufe0f\ud83d\udc69\u200d\u2696\ufe0f\ud83e\uddd1\u200d\ud83c\udf3e\ud83d\udc68\u200d\ud83c\udf3e\ud83d\udc69\u200d\ud83c\udf3e\ud83e\uddd1\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83e\uddd1\u200d\ud83d\udd27\ud83d\udc68\u200d\ud83d\udd27\ud83d\udc69\u200d\ud83d\udd27\ud83e\uddd1\u200d\ud83c\udfed\ud83d\udc68\u200d\ud83c\udfed\ud83d\udc69\u200d\ud83c\udfed\ud83e\uddd1\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc69\u200d\ud83d\udcbc\ud83e\uddd1\u200d\ud83d\udd2c\ud83d\udc68\u200d\ud83d\udd2c\ud83d\udc69\u200d\ud83d\udd2c\ud83e\uddd1\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb\ud83e\uddd1\u200d\ud83c\udfa4\ud83d\udc68\u200d\ud83c\udfa4\ud83d\udc69\u200d\ud83c\udfa4\ud83e\uddd1\u200d\ud83c\udfa8\ud83d\udc68\u200d\ud83c\udfa8\ud83d\udc69\u200d\ud83c\udfa8\ud83e\uddd1\u200d\u2708\ufe0f\ud83d\udc68\u200d\u2708\ufe0f\ud83d\udc69\u200d\u2708\ufe0f\ud83e\uddd1\u200d\ud83d\ude80\ud83d\udc68\u200d\ud83d\ude80\ud83d\udc69\u200d\ud83d\ude80\ud83e\uddd1\u200d\ud83d\ude92\ud83d\udc68\u200d\ud83d\ude92\ud83d\udc69\u200d\ud83d\ude92\ud83d\udc6e\ud83d\udc6e\u200d\u2642\ufe0f\ud83d\udc6e\u200d\u2640\ufe0f\ud83d\udd75\ud83d\udd75\ufe0f\u200d\u2642\ufe0f\ud83d\udd75\ufe0f\u200d\u2640\ufe0f\ud83d\udc82\ud83d\udc82\u200d\u2642\ufe0f\ud83d\udc82\u200d\u2640\ufe0f\ud83e\udd77\ud83d\udc77\ud83d\udc77\u200d\u2642\ufe0f\ud83d\udc77\u200d\u2640\ufe0f\ud83e\udd34\ud83d\udc78\ud83d\udc73\ud83d\udc73\u200d\u2642\ufe0f\ud83d\udc73\u200d\u2640\ufe0f\ud83d\udc72\ud83e\uddd5\ud83e\udd35\ud83e\udd35\u200d\u2642\ufe0f\ud83e\udd35\u200d\u2640\ufe0f\ud83d\udc70\ud83d\udc70\u200d\u2642\ufe0f\ud83d\udc70\u200d\u2640\ufe0f\ud83e\udd30\ud83e\udd31\ud83d\udc69\u200d\ud83c\udf7c\ud83d\udc68\u200d\ud83c\udf7c\ud83e\uddd1\u200d\ud83c\udf7c\ud83d\udc7c\ud83c\udf85\ud83e\udd36\ud83e\uddd1\u200d\ud83c\udf84\ud83e\uddb8\ud83e\uddb8\u200d\u2642\ufe0f\ud83e\uddb8\u200d\u2640\ufe0f\ud83e\uddb9\ud83e\uddb9\u200d\u2642\ufe0f\ud83e\uddb9\u200d\u2640\ufe0f\ud83e\uddd9\ud83e\uddd9\u200d\u2642\ufe0f\ud83e\uddd9\u200d\u2640\ufe0f\ud83e\uddda\ud83e\uddda\u200d\u2642\ufe0f\ud83e\uddda\u200d\u2640\ufe0f\ud83e\udddb\ud83e\udddb\u200d\u2642\ufe0f\ud83e\udddb\u200d\u2640\ufe0f\ud83e\udddc\ud83e\udddc\u200d\u2642\ufe0f\ud83e\udddc\u200d\u2640\ufe0f\ud83e\udddd\ud83e\udddd\u200d\u2642\ufe0f\ud83e\udddd\u200d\u2640\ufe0f\ud83e\uddde\ud83e\uddde\u200d\u2642\ufe0f\ud83e\uddde\u200d\u2640\ufe0f\ud83e\udddf\ud83e\udddf\u200d\u2642\ufe0f\ud83e\udddf\u200d\u2640\ufe0f\ud83d\udc86\ud83d\udc86\u200d\u2642\ufe0f\ud83d\udc86\u200d\u2640\ufe0f\ud83d\udc87\ud83d\udc87\u200d\u2642\ufe0f\ud83d\udc87\u200d\u2640\ufe0f\ud83d\udeb6\ud83d\udeb6\u200d\u2642\ufe0f\ud83d\udeb6\u200d\u2640\ufe0f\ud83e\uddcd\ud83e\uddcd\u200d\u2642\ufe0f\ud83e\uddcd\u200d\u2640\ufe0f\ud83e\uddce\ud83e\uddce\u200d\u2642\ufe0f\ud83e\uddce\u200d\u2640\ufe0f\ud83e\uddd1\u200d\ud83e\uddaf\ud83d\udc68\u200d\ud83e\uddaf\ud83d\udc69\u200d\ud83e\uddaf\ud83e\uddd1\u200d\ud83e\uddbc\ud83d\udc68\u200d\ud83e\uddbc\ud83d\udc69\u200d\ud83e\uddbc\ud83e\uddd1\u200d\ud83e\uddbd\ud83d\udc68\u200d\ud83e\uddbd\ud83d\udc69\u200d\ud83e\uddbd\ud83c\udfc3\ud83c\udfc3\u200d\u2642\ufe0f\ud83c\udfc3\u200d\u2640\ufe0f\ud83d\udc83\ud83d\udd7a\ud83d\udd74\ud83d\udc6f\ud83d\udc6f\u200d\u2642\ufe0f\ud83d\udc6f\u200d\u2640\ufe0f\ud83e\uddd6\ud83e\uddd6\u200d\u2642\ufe0f\ud83e\uddd6\u200d\u2640\ufe0f\ud83e\uddd7\ud83e\uddd7\u200d\u2642\ufe0f\ud83e\uddd7\u200d\u2640\ufe0f\ud83e\udd3a\ud83c\udfc7\u26f7\ud83c\udfc2\ud83c\udfcc\ud83c\udfcc\ufe0f\u200d\u2642\ufe0f\ud83c\udfcc\ufe0f\u200d\u2640\ufe0f\ud83c\udfc4\ud83c\udfc4\u200d\u2642\ufe0f\ud83c\udfc4\u200d\u2640\ufe0f\ud83d\udea3\ud83d\udea3\u200d\u2642\ufe0f\ud83d\udea3\u200d\u2640\ufe0f\ud83c\udfca\ud83c\udfca\u200d\u2642\ufe0f\ud83c\udfca\u200d\u2640\ufe0f\u26f9\u26f9\ufe0f\u200d\u2642\ufe0f\u26f9\ufe0f\u200d\u2640\ufe0f\ud83c\udfcb\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f\ud83d\udeb4\ud83d\udeb4\u200d\u2642\ufe0f\ud83d\udeb4\u200d\u2640\ufe0f\ud83d\udeb5\ud83d\udeb5\u200d\u2642\ufe0f\ud83d\udeb5\u200d\u2640\ufe0f\ud83e\udd38\ud83e\udd38\u200d\u2642\ufe0f\ud83e\udd38\u200d\u2640\ufe0f\ud83e\udd3c\ud83e\udd3c\u200d\u2642\ufe0f\ud83e\udd3c\u200d\u2640\ufe0f\ud83e\udd3d\ud83e\udd3d\u200d\u2642\ufe0f\ud83e\udd3d\u200d\u2640\ufe0f\ud83e\udd3e\ud83e\udd3e\u200d\u2642\ufe0f\ud83e\udd3e\u200d\u2640\ufe0f\ud83e\udd39\ud83e\udd39\u200d\u2642\ufe0f\ud83e\udd39\u200d\u2640\ufe0f\ud83e\uddd8\ud83e\uddd8\u200d\u2642\ufe0f\ud83e\uddd8\u200d\u2640\ufe0f\ud83d\udec0\ud83d\udecc\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83d\udc6d\ud83d\udc6b\ud83d\udc6c\ud83d\udc8f\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83d\udc91\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83d\udc6a\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67\ud83d\udc68\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc67\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67\ud83d\udc69\u200d\ud83d\udc66\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66\ud83d\udc69\u200d\ud83d\udc67\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67\ud83d\udde3\ud83d\udc64\ud83d\udc65\ud83e\udec2\ud83d\udc63\ud83e\uddb0\ud83e\uddb1\ud83e\uddb3\ud83e\uddb2\ud83d\udc35\ud83d\udc12\ud83e\udd8d\ud83e\udda7\ud83d\udc36\ud83d\udc15\ud83e\uddae\ud83d\udc15\u200d\ud83e\uddba\ud83d\udc29\ud83d\udc3a\ud83e\udd8a\ud83e\udd9d\ud83d\udc31\ud83d\udc08\ud83d\udc08\u200d\u2b1b\ud83e\udd81\ud83d\udc2f\ud83d\udc05\ud83d\udc06\ud83d\udc34\ud83d\udc0e\ud83e\udd84\ud83e\udd93\ud83e\udd8c\ud83e\uddac\ud83d\udc2e\ud83d\udc02\ud83d\udc03\ud83d\udc04\ud83d\udc37\ud83d\udc16\ud83d\udc17\ud83d\udc3d\ud83d\udc0f\ud83d\udc11\ud83d\udc10\ud83d\udc2a\ud83d\udc2b\ud83e\udd99\ud83e\udd92\ud83d\udc18\ud83e\udda3\ud83e\udd8f\ud83e\udd9b\ud83d\udc2d\ud83d\udc01\ud83d\udc00\ud83d\udc39\ud83d\udc30\ud83d\udc07\ud83d\udc3f\ud83e\uddab\ud83e\udd94\ud83e\udd87\ud83d\udc3b\ud83d\udc3b\u200d\u2744\ufe0f\ud83d\udc28\ud83d\udc3c\ud83e\udda5\ud83e\udda6\ud83e\udda8\ud83e\udd98\ud83e\udda1\ud83d\udc3e\ud83e\udd83\ud83d\udc14\ud83d\udc13\ud83d\udc23\ud83d\udc24\ud83d\udc25\ud83d\udc26\ud83d\udc27\ud83d\udd4a\ud83e\udd85\ud83e\udd86\ud83e\udda2\ud83e\udd89\ud83e\udda4\ud83e\udeb6\ud83e\udda9\ud83e\udd9a\ud83e\udd9c\ud83d\udc38\ud83d\udc0a\ud83d\udc22\ud83e\udd8e\ud83d\udc0d\ud83d\udc32\ud83d\udc09\ud83e\udd95\ud83e\udd96\ud83d\udc33\ud83d\udc0b\ud83d\udc2c\ud83e\uddad\ud83d\udc1f\ud83d\udc20\ud83d\udc21\ud83e\udd88\ud83d\udc19\ud83d\udc1a\ud83d\udc0c\ud83e\udd8b\ud83d\udc1b\ud83d\udc1c\ud83d\udc1d\ud83e\udeb2\ud83d\udc1e\ud83e\udd97\ud83e\udeb3\ud83d\udd77\ud83d\udd78\ud83e\udd82\ud83e\udd9f\ud83e\udeb0\ud83e\udeb1\ud83e\udda0\ud83d\udc90\ud83c\udf38\ud83d\udcae\ud83c\udff5\ud83c\udf39\ud83e\udd40\ud83c\udf3a\ud83c\udf3b\ud83c\udf3c\ud83c\udf37\ud83c\udf31\ud83e\udeb4\ud83c\udf32\ud83c\udf33\ud83c\udf34\ud83c\udf35\ud83c\udf3e\ud83c\udf3f\u2618\ud83c\udf40\ud83c\udf41\ud83c\udf42\ud83c\udf43\ud83c\udf47\ud83c\udf48\ud83c\udf49\ud83c\udf4a\ud83c\udf4b\ud83c\udf4c\ud83c\udf4d\ud83e\udd6d\ud83c\udf4e\ud83c\udf4f\ud83c\udf50\ud83c\udf51\ud83c\udf52\ud83c\udf53\ud83e\uded0\ud83e\udd5d\ud83c\udf45\ud83e\uded2\ud83e\udd65\ud83e\udd51\ud83c\udf46\ud83e\udd54\ud83e\udd55\ud83c\udf3d\ud83c\udf36\ud83e\uded1\ud83e\udd52\ud83e\udd6c\ud83e\udd66\ud83e\uddc4\ud83e\uddc5\ud83c\udf44\ud83e\udd5c\ud83c\udf30\ud83c\udf5e\ud83e\udd50\ud83e\udd56\ud83e\uded3\ud83e\udd68\ud83e\udd6f\ud83e\udd5e\ud83e\uddc7\ud83e\uddc0\ud83c\udf56\ud83c\udf57\ud83e\udd69\ud83e\udd53\ud83c\udf54\ud83c\udf5f\ud83c\udf55\ud83c\udf2d\ud83e\udd6a\ud83c\udf2e\ud83c\udf2f\ud83e\uded4\ud83e\udd59\ud83e\uddc6\ud83e\udd5a\ud83c\udf73\ud83e\udd58\ud83c\udf72\ud83e\uded5\ud83e\udd63\ud83e\udd57\ud83c\udf7f\ud83e\uddc8\ud83e\uddc2\ud83e\udd6b\ud83c\udf71\ud83c\udf58\ud83c\udf59\ud83c\udf5a\ud83c\udf5b\ud83c\udf5c\ud83c\udf5d\ud83c\udf60\ud83c\udf62\ud83c\udf63\ud83c\udf64\ud83c\udf65\ud83e\udd6e\ud83c\udf61\ud83e\udd5f\ud83e\udd60\ud83e\udd61\ud83e\udd80\ud83e\udd9e\ud83e\udd90\ud83e\udd91\ud83e\uddaa\ud83c\udf66\ud83c\udf67\ud83c\udf68\ud83c\udf69\ud83c\udf6a\ud83c\udf82\ud83c\udf70\ud83e\uddc1\ud83e\udd67\ud83c\udf6b\ud83c\udf6c\ud83c\udf6d\ud83c\udf6e\ud83c\udf6f\ud83c\udf7c\ud83e\udd5b\u2615\ud83e\uded6\ud83c\udf75\ud83c\udf76\ud83c\udf7e\ud83c\udf77\ud83c\udf78\ud83c\udf79\ud83c\udf7a\ud83c\udf7b\ud83e\udd42\ud83e\udd43\ud83e\udd64\ud83e\uddcb\ud83e\uddc3\ud83e\uddc9\ud83e\uddca\ud83e\udd62\ud83c\udf7d\ud83c\udf74\ud83e\udd44\ud83d\udd2a\ud83c\udffa\ud83c\udf0d\ud83c\udf0e\ud83c\udf0f\ud83c\udf10\ud83d\uddfa\ud83d\uddfe\ud83e\udded\ud83c\udfd4\u26f0\ud83c\udf0b\ud83d\uddfb\ud83c\udfd5\ud83c\udfd6\ud83c\udfdc\ud83c\udfdd\ud83c\udfde\ud83c\udfdf\ud83c\udfdb\ud83c\udfd7\ud83e\uddf1\ud83e\udea8\ud83e\udeb5\ud83d\uded6\ud83c\udfd8\ud83c\udfda\ud83c\udfe0\ud83c\udfe1\ud83c\udfe2\ud83c\udfe3\ud83c\udfe4\ud83c\udfe5\ud83c\udfe6\ud83c\udfe8\ud83c\udfe9\ud83c\udfea\ud83c\udfeb\ud83c\udfec\ud83c\udfed\ud83c\udfef\ud83c\udff0\ud83d\udc92\ud83d\uddfc\ud83d\uddfd\u26ea\ud83d\udd4c\ud83d\uded5\ud83d\udd4d\u26e9\ud83d\udd4b\u26f2\u26fa\ud83c\udf01\ud83c\udf03\ud83c\udfd9\ud83c\udf04\ud83c\udf05\ud83c\udf06\ud83c\udf07\ud83c\udf09\u2668\ud83c\udfa0\ud83c\udfa1\ud83c\udfa2\ud83d\udc88\ud83c\udfaa\ud83d\ude82\ud83d\ude83\ud83d\ude84\ud83d\ude85\ud83d\ude86\ud83d\ude87\ud83d\ude88\ud83d\ude89\ud83d\ude8a\ud83d\ude9d\ud83d\ude9e\ud83d\ude8b\ud83d\ude8c\ud83d\ude8d\ud83d\ude8e\ud83d\ude90\ud83d\ude91\ud83d\ude92\ud83d\ude93\ud83d\ude94\ud83d\ude95\ud83d\ude96\ud83d\ude97\ud83d\ude98\ud83d\ude99\ud83d\udefb\ud83d\ude9a\ud83d\ude9b\ud83d\ude9c\ud83c\udfce\ud83c\udfcd\ud83d\udef5\ud83e\uddbd\ud83e\uddbc\ud83d\udefa\ud83d\udeb2\ud83d\udef4\ud83d\udef9\ud83d\udefc\ud83d\ude8f\ud83d\udee3\ud83d\udee4\ud83d\udee2\u26fd\ud83d\udea8\ud83d\udea5\ud83d\udea6\ud83d\uded1\ud83d\udea7\u2693\u26f5\ud83d\udef6\ud83d\udea4\ud83d\udef3\u26f4\ud83d\udee5\ud83d\udea2\u2708\ud83d\udee9\ud83d\udeeb\ud83d\udeec\ud83e\ude82\ud83d\udcba\ud83d\ude81\ud83d\ude9f\ud83d\udea0\ud83d\udea1\ud83d\udef0\ud83d\ude80\ud83d\udef8\ud83d\udece\ud83e\uddf3\u231b\u23f3\u231a\u23f0\u23f1\u23f2\ud83d\udd70\ud83d\udd5b\ud83d\udd67\ud83d\udd50\ud83d\udd5c\ud83d\udd51\ud83d\udd5d\ud83d\udd52\ud83d\udd5e\ud83d\udd53\ud83d\udd5f\ud83d\udd54\ud83d\udd60\ud83d\udd55\ud83d\udd61\ud83d\udd56\ud83d\udd62\ud83d\udd57\ud83d\udd63\ud83d\udd58\ud83d\udd64\ud83d\udd59\ud83d\udd65\ud83d\udd5a\ud83d\udd66\ud83c\udf11\ud83c\udf12\ud83c\udf13\ud83c\udf14\ud83c\udf15\ud83c\udf16\ud83c\udf17\ud83c\udf18\ud83c\udf19\ud83c\udf1a\ud83c\udf1b\ud83c\udf1c\ud83c\udf21\u2600\ud83c\udf1d\ud83c\udf1e\ud83e\ude90\u2b50\ud83c\udf1f\ud83c\udf20\ud83c\udf0c\u2601\u26c5\u26c8\ud83c\udf24\ud83c\udf25\ud83c\udf26\ud83c\udf27\ud83c\udf28\ud83c\udf29\ud83c\udf2a\ud83c\udf2b\ud83c\udf2c\ud83c\udf00\ud83c\udf08\ud83c\udf02\u2602\u2614\u26f1\u26a1\u2744\u2603\u26c4\u2604\ud83d\udd25\ud83d\udca7\ud83c\udf0a\ud83c\udf83\ud83c\udf84\ud83c\udf86\ud83c\udf87\ud83e\udde8\u2728\ud83c\udf88\ud83c\udf89\ud83c\udf8a\ud83c\udf8b\ud83c\udf8d\ud83c\udf8e\ud83c\udf8f\ud83c\udf90\ud83c\udf91\ud83e\udde7\ud83c\udf80\ud83c\udf81\ud83c\udf97\ud83c\udf9f\ud83c\udfab\ud83c\udf96\ud83c\udfc6\ud83c\udfc5\ud83e\udd47\ud83e\udd48\ud83e\udd49\u26bd\u26be\ud83e\udd4e\ud83c\udfc0\ud83c\udfd0\ud83c\udfc8\ud83c\udfc9\ud83c\udfbe\ud83e\udd4f\ud83c\udfb3\ud83c\udfcf\ud83c\udfd1\ud83c\udfd2\ud83e\udd4d\ud83c\udfd3\ud83c\udff8\ud83e\udd4a\ud83e\udd4b\ud83e\udd45\u26f3\u26f8\ud83c\udfa3\ud83e\udd3f\ud83c\udfbd\ud83c\udfbf\ud83d\udef7\ud83e\udd4c\ud83c\udfaf\ud83e\ude80\ud83e\ude81\ud83c\udfb1\ud83d\udd2e\ud83e\ude84\ud83e\uddff\ud83c\udfae\ud83d\udd79\ud83c\udfb0\ud83c\udfb2\ud83e\udde9\ud83e\uddf8\ud83e\ude85\ud83e\ude86\u2660\u2665\u2666\u2663\u265f\ud83c\udccf\ud83c\udc04\ud83c\udfb4\ud83c\udfad\ud83d\uddbc\ud83c\udfa8\ud83e\uddf5\ud83e\udea1\ud83e\uddf6\ud83e\udea2\ud83d\udc53\ud83d\udd76\ud83e\udd7d\ud83e\udd7c\ud83e\uddba\ud83d\udc54\ud83d\udc55\ud83d\udc56\ud83e\udde3\ud83e\udde4\ud83e\udde5\ud83e\udde6\ud83d\udc57\ud83d\udc58\ud83e\udd7b\ud83e\ude71\ud83e\ude72\ud83e\ude73\ud83d\udc59\ud83d\udc5a\ud83d\udc5b\ud83d\udc5c\ud83d\udc5d\ud83d\udecd\ud83c\udf92\ud83e\ude74\ud83d\udc5e\ud83d\udc5f\ud83e\udd7e\ud83e\udd7f\ud83d\udc60\ud83d\udc61\ud83e\ude70\ud83d\udc62\ud83d\udc51\ud83d\udc52\ud83c\udfa9\ud83c\udf93\ud83e\udde2\ud83e\ude96\u26d1\ud83d\udcff\ud83d\udc84\ud83d\udc8d\ud83d\udc8e\ud83d\udd07\ud83d\udd08\ud83d\udd09\ud83d\udd0a\ud83d\udce2\ud83d\udce3\ud83d\udcef\ud83d\udd14\ud83d\udd15\ud83c\udfbc\ud83c\udfb5\ud83c\udfb6\ud83c\udf99\ud83c\udf9a\ud83c\udf9b\ud83c\udfa4\ud83c\udfa7\ud83d\udcfb\ud83c\udfb7\ud83e\ude97\ud83c\udfb8\ud83c\udfb9\ud83c\udfba\ud83c\udfbb\ud83e\ude95\ud83e\udd41\";\n-\n-#[bench]\n-fn str_char_count_lorem(b: &mut Bencher) {\n-    b.iter(|| black_box(LOREM).chars().count());\n-}\n-\n-#[bench]\n-fn str_char_count_lorem_short(b: &mut Bencher) {\n-    b.iter(|| black_box(LOREM_SHORT).chars().count());\n-}\n-\n-#[bench]\n-fn str_char_count_emoji(b: &mut Bencher) {\n-    b.iter(|| black_box(EMOJI).chars().count());\n-}\n+mod char_count;\n+mod corpora;\n \n #[bench]\n fn str_validate_emoji(b: &mut Bencher) {\n-    b.iter(|| str::from_utf8(black_box(EMOJI.as_bytes())));\n+    b.iter(|| str::from_utf8(black_box(corpora::emoji::LARGE.as_bytes())));\n }"}, {"sha": "f19d0941142546949422ea9850f7bddfaaa2ec92", "filename": "library/core/benches/str/char_count.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fbenches%2Fstr%2Fchar_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fbenches%2Fstr%2Fchar_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fstr%2Fchar_count.rs?ref=628b2173265e19cb5d22b86349618b0ab88cf5c2", "patch": "@@ -0,0 +1,101 @@\n+use super::corpora::*;\n+use test::{black_box, Bencher};\n+\n+macro_rules! define_benches {\n+    ($( fn $name: ident($arg: ident: &str) $body: block )+) => {\n+        define_benches!(mod en_small, en::SMALL, $($name $arg $body)+);\n+        define_benches!(mod en_medium, en::MEDIUM, $($name $arg $body)+);\n+        define_benches!(mod en_large, en::LARGE, $($name $arg $body)+);\n+        define_benches!(mod en_huge, en::HUGE, $($name $arg $body)+);\n+\n+        define_benches!(mod zh_small, zh::SMALL, $($name $arg $body)+);\n+        define_benches!(mod zh_medium, zh::MEDIUM, $($name $arg $body)+);\n+        define_benches!(mod zh_large, zh::LARGE, $($name $arg $body)+);\n+        define_benches!(mod zh_huge, zh::HUGE, $($name $arg $body)+);\n+\n+        define_benches!(mod ru_small, ru::SMALL, $($name $arg $body)+);\n+        define_benches!(mod ru_medium, ru::MEDIUM, $($name $arg $body)+);\n+        define_benches!(mod ru_large, ru::LARGE, $($name $arg $body)+);\n+        define_benches!(mod ru_huge, ru::HUGE, $($name $arg $body)+);\n+\n+        define_benches!(mod emoji_small, emoji::SMALL, $($name $arg $body)+);\n+        define_benches!(mod emoji_medium, emoji::MEDIUM, $($name $arg $body)+);\n+        define_benches!(mod emoji_large, emoji::LARGE, $($name $arg $body)+);\n+        define_benches!(mod emoji_huge, emoji::HUGE, $($name $arg $body)+);\n+    };\n+    (mod $mod_name: ident, $input: expr, $($name: ident $arg: ident $body: block)+) => {\n+        mod $mod_name {\n+            use super::*;\n+            $(\n+                #[bench]\n+                fn $name(bencher: &mut Bencher) {\n+                    let input = $input;\n+                    bencher.bytes = input.len() as u64;\n+                    let mut input_s = input.to_string();\n+                    bencher.iter(|| {\n+                        let $arg: &str = &black_box(&mut input_s);\n+                        black_box($body)\n+                    })\n+                }\n+            )+\n+        }\n+    };\n+}\n+\n+define_benches! {\n+    fn case00_cur_libcore(s: &str) {\n+        cur_libcore(s)\n+    }\n+\n+    fn case01_old_libcore(s: &str) {\n+        old_libcore(s)\n+    }\n+\n+    fn case02_iter_increment(s: &str) {\n+        iterator_increment(s)\n+    }\n+\n+    fn case03_manual_char_len(s: &str) {\n+        manual_char_len(s)\n+    }\n+}\n+\n+fn cur_libcore(s: &str) -> usize {\n+    s.chars().count()\n+}\n+#[inline]\n+fn utf8_is_cont_byte(byte: u8) -> bool {\n+    (byte as i8) < -64\n+}\n+fn old_libcore(s: &str) -> usize {\n+    s.as_bytes().iter().filter(|&&byte| !utf8_is_cont_byte(byte)).count()\n+}\n+\n+fn iterator_increment(s: &str) -> usize {\n+    let mut c = 0;\n+    for _ in s.chars() {\n+        c += 1;\n+    }\n+    c\n+}\n+\n+fn manual_char_len(s: &str) -> usize {\n+    let s = s.as_bytes();\n+    let mut c = 0;\n+    let mut i = 0;\n+    let l = s.len();\n+    while i < l {\n+        let b = s[i];\n+        if b < 0x80 {\n+            i += 1;\n+        } else if b < 0xe0 {\n+            i += 2;\n+        } else if b < 0xf0 {\n+            i += 3;\n+        } else {\n+            i += 4;\n+        }\n+        c += 1;\n+    }\n+    c\n+}"}, {"sha": "fefde757150349ece50323439373fb3acedad535", "filename": "library/core/benches/str/corpora.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fbenches%2Fstr%2Fcorpora.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fbenches%2Fstr%2Fcorpora.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fstr%2Fcorpora.rs?ref=628b2173265e19cb5d22b86349618b0ab88cf5c2", "patch": "@@ -0,0 +1,83 @@\n+//! Exposes a number of modules with different kinds of strings.\n+//!\n+//! Each module contains `&str` constants named `SMALL`, `MEDIUM`, `LARGE`, and\n+//! `HUGE`.\n+//!\n+//! - The `SMALL` string is generally around 30-40 bytes.\n+//! - The `MEDIUM` string is generally around 600-700 bytes.\n+//! - The `LARGE` string is the `MEDIUM` string repeated 8x, and is\u00a0around 5kb.\n+//! - The `HUGE` string is the `LARGE` string repeated 8x (or the `MEDIUM`\n+//!   string repeated 64x), and is around 40kb.\n+//!\n+//! Except for `mod emoji` (which is just a bunch of emoji), the strings were\n+//! pulled from (localizations of) rust-lang.org.\n+\n+macro_rules! repeat8 {\n+    ($s:expr) => {\n+        concat!($s, $s, $s, $s, $s, $s, $s, $s)\n+    };\n+}\n+\n+macro_rules! define_consts {\n+    ($s:literal) => {\n+        pub const MEDIUM: &str = $s;\n+        pub const LARGE: &str = repeat8!($s);\n+        pub const HUGE: &str = repeat8!(repeat8!(repeat8!($s)));\n+    };\n+}\n+\n+pub mod en {\n+    pub const SMALL: &str = \"Mary had a little lamb, Little lamb\";\n+    define_consts! {\n+        \"Rust is blazingly fast and memory-efficient: with no runtime or garbage\n+         collector, it can power performance-critical services, run on embedded\n+         devices, and easily integrate with other languages.  Rust\u2019s rich type system\n+         and ownership model guarantee memory-safety and thread-safety \u2014 enabling you\n+         to eliminate many classes of bugs at compile-time.  Rust has great\n+         documentation, a friendly compiler with useful error messages, and top-notch\n+         tooling \u2014 an integrated package manager and build tool, smart multi-editor\n+         support with auto-completion and type inspections, an auto-formatter, and\n+         more.\"\n+    }\n+}\n+\n+pub mod zh {\n+    pub const SMALL: &str = \"\u5ea6\u60ca\u4eba\u4e14\u5185\u5b58\u5229\u7528\u7387\u6781\u9ad8\";\n+    define_consts! {\n+        \"Rust   \u901f\u5ea6\u60ca\u4eba\u4e14\u5185\u5b58\u5229\u7528\u7387\u6781\u9ad8\u3002\u7531\u4e8e\\\n+         \u6ca1\u6709\u8fd0\u884c\u65f6\u548c\u5783\u573e\u56de\u6536\uff0c\u5b83\u80fd\u591f\u80dc\u4efb\u5bf9\u6027\u80fd\u8981\\\n+         \u6c42\u7279\u522b\u9ad8\u7684\u670d\u52a1\uff0c\u53ef\u4ee5\u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\\\n+         \u8fd8\u80fd\u8f7b\u677e\u548c\u5176\u4ed6\u8bed\u8a00\u96c6\u6210\u3002Rust \u4e30\u5bcc\u7684\u7c7b\u578b\\\n+         \u7cfb\u7edf\u548c\u6240\u6709\u6743\u6a21\u578b\u4fdd\u8bc1\u4e86\u5185\u5b58\u5b89\u5168\u548c\u7ebf\u7a0b\u5b89\u5168\uff0c\\\n+         \u8ba9\u60a8\u5728\u7f16\u8bd1\u671f\u5c31\u80fd\u591f\u6d88\u9664\u5404\u79cd\u5404\u6837\u7684\u9519\u8bef\u3002\\\n+         Rust \u62e5\u6709\u51fa\u8272\u7684\u6587\u6863\u3001\u53cb\u597d\u7684\u7f16\u8bd1\u5668\u548c\u6e05\u6670\\\n+         \u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\uff0c \u8fd8\u96c6\u6210\u4e86\u4e00\u6d41\u7684\u5de5\u5177\u2014\u2014\\\n+         \u5305\u7ba1\u7406\u5668\u548c\u6784\u5efa\u5de5\u5177\uff0c \u667a\u80fd\u5730\u81ea\u52a8\u8865\u5168\u548c\u7c7b\\\n+         \u578b\u68c0\u9a8c\u7684\u591a\u7f16\u8f91\u5668\u652f\u6301\uff0c \u4ee5\u53ca\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\\\n+         \u7801\u7b49\u7b49\u3002\"\n+    }\n+}\n+\n+pub mod ru {\n+    pub const SMALL: &str = \"\u0421\u043e\u0442\u043d\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u043f\u043e\";\n+    define_consts! {\n+        \"\u0421\u043e\u0442\u043d\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043c\u0438\u0440\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 Rust \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445\\\n+         \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u044b\u0445 \u043a\u0440\u043e\u0441\u0441-\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441\\\n+         \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438. \u0422\u0430\u043a\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043a\u0430\u043a Firefox,\\\n+         Dropbox \u0438 Cloudflare, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 Rust. Rust \u043e\u0442\u043b\u0438\u0447\u043d\u043e\\\n+         \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u043a \u0434\u043b\u044f \u0441\u0442\u0430\u0440\u0442\u0430\u043f\u043e\u0432, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439,\\\n+         \u043a\u0430\u043a \u0434\u043b\u044f \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0445\\\n+         web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432. \u041c\u043e\u0439 \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043a\u043e\u043c\u043f\u043b\u0438\u043c\u0435\u043d\u0442 Rust.\"\n+    }\n+}\n+\n+pub mod emoji {\n+    pub const SMALL: &str = \"\ud83d\ude00\ud83d\ude03\ud83d\ude04\ud83d\ude01\ud83d\ude06\ud83d\ude05\ud83e\udd23\ud83d\ude02\ud83d\ude42\ud83d\ude43\ud83d\ude09\ud83d\ude0a\ud83d\ude07\ud83e\udd70\ud83d\ude0d\ud83e\udd29\ud83d\ude18\";\n+    define_consts! {\n+        \"\ud83d\ude00\ud83d\ude03\ud83d\ude04\ud83d\ude01\ud83d\ude06\ud83d\ude05\ud83e\udd23\ud83d\ude02\ud83d\ude42\ud83d\ude43\ud83d\ude09\ud83d\ude0a\ud83d\ude07\ud83e\udd70\ud83d\ude0d\ud83e\udd29\ud83d\ude18\ud83d\ude17\u263a\ud83d\ude1a\ud83d\ude19\ud83e\udd72\ud83d\ude0b\ud83d\ude1b\ud83d\ude1c\ud83e\udd2a\ud83d\ude1d\ud83e\udd11\ud83e\udd17\ud83e\udd2d\ud83e\udd2b\ud83e\udd14\ud83e\udd10\ud83e\udd28\ud83d\ude10\ud83d\ude11\ud83d\ude36\ud83d\ude36\u200d\ud83c\udf2b\ufe0f\ud83d\ude0f\ud83d\ude12\\\n+         \ud83d\ude44\ud83d\ude2c\ud83d\ude2e\u200d\ud83d\udca8\ud83e\udd25\ud83d\ude0c\ud83d\ude14\ud83d\ude2a\ud83e\udd24\ud83d\ude34\ud83d\ude37\ud83e\udd12\ud83e\udd15\ud83e\udd22\ud83e\udd2e\ud83e\udd27\ud83e\udd75\ud83e\udd76\ud83e\udd74\ud83d\ude35\ud83d\ude35\u200d\ud83d\udcab\ud83e\udd2f\ufffd\ufffd\ud83e\udd73\ud83e\udd78\ud83d\ude0e\ud83e\udd13\ud83e\uddd0\ud83d\ude15\ud83d\ude1f\ud83d\ude41\u2639\ud83d\ude2e\ud83d\ude2f\ud83d\ude32\ud83d\ude33\ud83e\udd7a\ud83d\ude26\ud83d\ude27\ud83d\ude28\\\n+         \ud83d\ude30\ud83d\ude25\ud83d\ude22\ud83d\ude2d\ud83d\ude31\ud83d\ude16\ud83d\ude23\ud83d\ude1e\ud83d\ude13\ud83d\ude29\ud83d\ude2b\ud83e\udd71\ud83d\ude24\ud83d\ude21\ud83d\ude20\ud83e\udd2c\ud83d\ude08\ud83d\udc7f\ud83d\udc80\u2620\ud83d\udca9\ud83e\udd21\ud83d\udc79\ud83d\udc7a\ud83d\udc7b\ud83d\udc7d\ud83d\udc7e\ud83e\udd16\ud83d\ude3a\ud83d\ude38\ud83d\ude39\ud83d\ude3b\ud83d\ude3c\ud83d\ude3d\ud83d\ude40\ud83d\ude3f\ud83d\ude3e\ud83d\ude48\ud83d\ude49\ud83d\ude4a\\\n+         \ud83d\udc8b\ud83d\udc8c\ud83d\udc98\ud83d\udc9d\ud83d\udc96\ud83d\udc97\ud83d\udc93\ufffd\ufffd\ud83d\udc95\ud83d\udc9f\u2763\ud83d\udc94\u2764\ufe0f\u200d\ud83d\udd25\u2764\ufe0f\u200d\ud83e\ude79\u2764\ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\ud83e\udd0e\ud83d\udda4\ud83e\udd0d\ud83d\udcaf\ud83d\udca2\ud83d\udca5\ud83d\udcab\ud83d\udca6\ud83d\udca8\ud83d\udd73\ud83d\udcac\ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f\ud83d\udde8\ud83d\uddef\ud83d\udcad\ud83d\udca4\ud83d\udc4b\\\n+         \ud83e\udd1a\ud83d\udd90\u270b\ud83d\udd96\ud83d\udc4c\ud83e\udd0c\ud83e\udd0f\u270c\"\n+    }\n+}"}, {"sha": "464c6889c323a6a577b08460591c289503a7afb4", "filename": "library/core/src/str/count.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fsrc%2Fstr%2Fcount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fsrc%2Fstr%2Fcount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fcount.rs?ref=628b2173265e19cb5d22b86349618b0ab88cf5c2", "patch": "@@ -0,0 +1,116 @@\n+//! Code for efficiently counting the number of `char`s in a UTF-8 encoded\n+//! string.\n+//!\n+//! Broadly, UTF-8 encodes `char`s as a \"leading\" byte which begins the `char`,\n+//! followed by some number (possibly 0) of continuation bytes.\n+//!\n+//! The leading byte can have a number of bit-patterns (with the specific\n+//! pattern indicating how many continuation bytes follow), but the continuation\n+//! bytes are always in the format `0b10XX_XXXX` (where the `X`s can take any\n+//! value). That is, the most significant bit is set, and the second most\n+//! significant bit is unset.\n+//!\n+//! To count the number of characters, we can just count the number of bytes in\n+//! the string which are not continuation bytes, which can be done many bytes at\n+//! a time fairly easily.\n+//!\n+//! Note: Because the term \"leading byte\" can sometimes be ambiguous (for\n+//! example, it could also refer to the first byte of a slice), we'll often use\n+//! the term \"non-continuation byte\" to refer to these bytes in the code.\n+\n+pub(super) fn count_chars(s: &str) -> usize {\n+    // For correctness, `CHUNK_SIZE` must be:\n+    // - Less than or equal to 255, otherwise we'll overflow bytes in `counts`.\n+    // - A multiple of `UNROLL_INNER`, otherwise our `break` inside the\n+    //   `body.chunks(CHUNK_SIZE)` loop.\n+    //\n+    // For performance, `CHUNK_SIZE` should be:\n+    // - Relatively cheap to `%` against.\n+    // - Large enough to avoid paying for the cost of the `sum_bytes_in_usize`\n+    //   too often.\n+    const CHUNK_SIZE: usize = 192;\n+    const UNROLL_INNER: usize = 4;\n+\n+    // Check the properties of `CHUNK_SIZE` / `UNROLL_INNER` that are required\n+    // for correctness.\n+    const _: [(); 1] = [(); (CHUNK_SIZE < 256 && (CHUNK_SIZE % UNROLL_INNER) == 0) as usize];\n+    // SAFETY: transmuting `[u8]` to `[usize]` is safe except for size\n+    // differences which are handled by `align_to`.\n+    let (head, body, tail) = unsafe { s.as_bytes().align_to::<usize>() };\n+\n+    let mut total = char_count_general_case(head) + char_count_general_case(tail);\n+    // Split `body` into `CHUNK_SIZE` chunks to reduce the frequency with which\n+    // we call `sum_bytes_in_usize`.\n+    for chunk in body.chunks(CHUNK_SIZE) {\n+        // We accumulate intermediate sums in `counts`, where each byte contains\n+        // a subset of the sum of this chunk, like a `[u8; size_of::<usize>()]`.\n+        let mut counts = 0;\n+        let unrolled_chunks = chunk.array_chunks::<UNROLL_INNER>();\n+        // If there's a remainder (know can only happen for the last item in\n+        // `chunks`, because `CHUNK_SIZE % UNROLL == 0`), then we need to\n+        // account for that (although we don't use it to later).\n+        let remainder = unrolled_chunks.remainder();\n+        for unrolled in unrolled_chunks {\n+            for &word in unrolled {\n+                // Because `CHUNK_SIZE` is < 256, this addition can't cause the\n+                // count in any of the bytes to overflow into a subsequent byte.\n+                counts += contains_non_continuation_byte(word);\n+            }\n+        }\n+\n+        // Sum the values in `counts` (which, again, is conceptually a `[u8;\n+        // size_of::<usize>()]`), and accumulate the result into `total`.\n+        total += sum_bytes_in_usize(counts);\n+\n+        // If there's any data in `remainder`, then handle it. This will only\n+        // happen for the last `chunk` in `body.chunks()` (because `CHUNK_SIZE`\n+        // is divisible by `UNROLL_INNER`), so we explicitly break at the end\n+        // (which seems to help LLVM out).\n+        if !remainder.is_empty() {\n+            // Accumulate all the data in the remainder.\n+            let mut counts = 0;\n+            for &word in remainder {\n+                counts += contains_non_continuation_byte(word);\n+            }\n+            total += sum_bytes_in_usize(counts);\n+            break;\n+        }\n+    }\n+    total\n+}\n+\n+// Checks each byte of `w` to see if it contains the first byte in a UTF-8\n+// sequence. Bytes in `w` which are continuation bytes are left as `0x00` (e.g.\n+// false), and bytes which are non-continuation bytes are left as `0x01` (e.g.\n+// true)\n+#[inline]\n+fn contains_non_continuation_byte(w: usize) -> usize {\n+    let lsb = 0x0101_0101_0101_0101u64 as usize;\n+    ((!w >> 7) | (w >> 6)) & lsb\n+}\n+\n+// Morally equivalent to `values.to_ne_bytes().into_iter().sum::<usize>()`, but\n+// more efficient.\n+#[inline]\n+fn sum_bytes_in_usize(values: usize) -> usize {\n+    const LSB_SHORTS: usize = 0x0001_0001_0001_0001_u64 as usize;\n+    const SKIP_BYTES: usize = 0x00ff_00ff_00ff_00ff_u64 as usize;\n+\n+    let pair_sum: usize = (values & SKIP_BYTES) + ((values >> 8) & SKIP_BYTES);\n+    pair_sum.wrapping_mul(LSB_SHORTS) >> ((core::mem::size_of::<usize>() - 2) * 8)\n+}\n+\n+// This is the most direct implementation of the concept of \"count the number of\n+// bytes in the string which are not continuation bytes\", and is used for the\n+// head and tail of the input string (the first and last item in the tuple\n+// returned by `slice::align_to`).\n+fn char_count_general_case(s: &[u8]) -> usize {\n+    const CONT_MASK_U8: u8 = 0b0011_1111;\n+    const TAG_CONT_U8: u8 = 0b1000_0000;\n+    let mut leads = 0;\n+    for &byte in s {\n+        let is_lead = (byte & !CONT_MASK_U8) != TAG_CONT_U8;\n+        leads += is_lead as usize;\n+    }\n+    leads\n+}"}, {"sha": "e529bccbc7999ee1ea852e4cc6cd90cab17101cc", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=628b2173265e19cb5d22b86349618b0ab88cf5c2", "patch": "@@ -12,7 +12,7 @@ use crate::slice::{self, Split as SliceSplit};\n use super::from_utf8_unchecked;\n use super::pattern::Pattern;\n use super::pattern::{DoubleEndedSearcher, ReverseSearcher, Searcher};\n-use super::validations::{next_code_point, next_code_point_reverse, utf8_is_cont_byte};\n+use super::validations::{next_code_point, next_code_point_reverse};\n use super::LinesAnyMap;\n use super::{BytesIsNotEmpty, UnsafeBytesToStr};\n use super::{CharEscapeDebugContinue, CharEscapeDefault, CharEscapeUnicode};\n@@ -46,8 +46,7 @@ impl<'a> Iterator for Chars<'a> {\n \n     #[inline]\n     fn count(self) -> usize {\n-        // length in `char` is equal to the number of non-continuation bytes\n-        self.iter.filter(|&&byte| !utf8_is_cont_byte(byte)).count()\n+        super::count::count_chars(self.as_str())\n     }\n \n     #[inline]"}, {"sha": "fceea2366da54d8cc2fe7ddfe26ef8cf875d8a28", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628b2173265e19cb5d22b86349618b0ab88cf5c2/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=628b2173265e19cb5d22b86349618b0ab88cf5c2", "patch": "@@ -7,6 +7,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n mod converts;\n+mod count;\n mod error;\n mod iter;\n mod traits;"}]}