{"sha": "7ba934fe5866e6aedd8d18e95f8c54e17e18ea51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTkzNGZlNTg2NmU2YWVkZDhkMThlOTVmOGM1NGUxN2UxOGVhNTE=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-03-24T02:23:30Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-03-24T02:23:30Z"}, "message": "fill match arms with empty block rather than unit tuple", "tree": {"sha": "75f5ed463bcced84e4644b96ec080fdf7972ac26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f5ed463bcced84e4644b96ec080fdf7972ac26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51", "html_url": "https://github.com/rust-lang/rust/commit/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9494f114798f66b5f2174cf518a2951a82571d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9494f114798f66b5f2174cf518a2951a82571d3", "html_url": "https://github.com/rust-lang/rust/commit/f9494f114798f66b5f2174cf518a2951a82571d3"}], "stats": {"total": 97, "additions": 50, "deletions": 47}, "files": [{"sha": "62dcb3808902c2962ef9cb273aa6d708508bd3a1", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=7ba934fe5866e6aedd8d18e95f8c54e17e18ea51", "patch": "@@ -275,8 +275,8 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => (),\n-        Action::Stop => (),\n+        Action::Move { distance } => {}\n+        Action::Stop => {}\n     }\n }\n \"#####,"}, {"sha": "a7c315ca1c1fe26e1234f0da856249e73a1d5b9e", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=7ba934fe5866e6aedd8d18e95f8c54e17e18ea51", "patch": "@@ -30,8 +30,8 @@ use ast::{MatchArm, Pat};\n //\n // fn handle(action: Action) {\n //     match action {\n-//         Action::Move { distance } => (),\n-//         Action::Stop => (),\n+//         Action::Move { distance } => {}\n+//         Action::Stop => {}\n //     }\n // }\n // ```\n@@ -57,7 +57,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n             .into_iter()\n             .filter_map(|variant| build_pat(ctx.db, module, variant))\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))\n-            .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()))\n+            .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n             .collect()\n     } else if let Some(enum_defs) = resolve_tuple_of_enum_def(&ctx.sema, &expr) {\n         // Partial fill not currently supported for tuple of enums.\n@@ -86,7 +86,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n                 ast::Pat::from(make::tuple_pat(patterns))\n             })\n             .filter(|variant_pat| is_variant_missing(&mut arms, variant_pat))\n-            .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()))\n+            .map(|pat| make::match_arm(iter::once(pat), make::expr_empty_block()))\n             .collect()\n     } else {\n         return None;\n@@ -192,8 +192,8 @@ mod tests {\n             fn main() {\n                 match A::As<|> {\n                     A::As,\n-                    A::Bs{x,y:Some(_)} => (),\n-                    A::Cs(_, Some(_)) => (),\n+                    A::Bs{x,y:Some(_)} => {}\n+                    A::Cs(_, Some(_)) => {}\n                 }\n             }\n             \"#,\n@@ -227,8 +227,8 @@ mod tests {\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Bs{x,y:Some(_)} => (),\n-                    A::Cs(_, Some(_)) => (),\n+                    A::Bs{x,y:Some(_)} => {}\n+                    A::Cs(_, Some(_)) => {}\n                 }\n             }\n             \"#,\n@@ -240,9 +240,9 @@ mod tests {\n             }\n             fn main() {\n                 match <|>A::As {\n-                    A::Bs{x,y:Some(_)} => (),\n-                    A::Cs(_, Some(_)) => (),\n-                    A::As => (),\n+                    A::Bs{x,y:Some(_)} => {}\n+                    A::Cs(_, Some(_)) => {}\n+                    A::As => {}\n                 }\n             }\n             \"#,\n@@ -261,7 +261,7 @@ mod tests {\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Cs(_) | A::Bs => (),\n+                    A::Cs(_) | A::Bs => {}\n                 }\n             }\n             \"#,\n@@ -273,8 +273,8 @@ mod tests {\n             }\n             fn main() {\n                 match <|>A::As {\n-                    A::Cs(_) | A::Bs => (),\n-                    A::As => (),\n+                    A::Cs(_) | A::Bs => {}\n+                    A::As => {}\n                 }\n             }\n             \"#,\n@@ -299,8 +299,8 @@ mod tests {\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Bs if 0 < 1 => (),\n-                    A::Ds(_value) => (),\n+                    A::Bs if 0 < 1 => {}\n+                    A::Ds(_value) => { let x = 1; }\n                     A::Es(B::Xs) => (),\n                 }\n             }\n@@ -319,11 +319,11 @@ mod tests {\n             }\n             fn main() {\n                 match <|>A::As {\n-                    A::Bs if 0 < 1 => (),\n-                    A::Ds(_value) => (),\n+                    A::Bs if 0 < 1 => {}\n+                    A::Ds(_value) => { let x = 1; }\n                     A::Es(B::Xs) => (),\n-                    A::As => (),\n-                    A::Cs => (),\n+                    A::As => {}\n+                    A::Cs => {}\n                 }\n             }\n             \"#,\n@@ -360,11 +360,11 @@ mod tests {\n             fn main() {\n                 let a = A::As;\n                 match <|>a {\n-                    A::As => (),\n-                    A::Bs => (),\n-                    A::Cs(_) => (),\n-                    A::Ds(_, _) => (),\n-                    A::Es { x, y } => (),\n+                    A::As => {}\n+                    A::Bs => {}\n+                    A::Cs(_) => {}\n+                    A::Ds(_, _) => {}\n+                    A::Es { x, y } => {}\n                 }\n             }\n             \"#,\n@@ -405,10 +405,10 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match <|>(a, b) {\n-                    (A::One, B::One) => (),\n-                    (A::One, B::Two) => (),\n-                    (A::Two, B::One) => (),\n-                    (A::Two, B::Two) => (),\n+                    (A::One, B::One) => {}\n+                    (A::One, B::Two) => {}\n+                    (A::Two, B::One) => {}\n+                    (A::Two, B::Two) => {}\n                 }\n             }\n             \"#,\n@@ -449,10 +449,10 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match <|>(&a, &b) {\n-                    (A::One, B::One) => (),\n-                    (A::One, B::Two) => (),\n-                    (A::Two, B::One) => (),\n-                    (A::Two, B::Two) => (),\n+                    (A::One, B::One) => {}\n+                    (A::One, B::Two) => {}\n+                    (A::Two, B::One) => {}\n+                    (A::Two, B::Two) => {}\n                 }\n             }\n             \"#,\n@@ -477,7 +477,7 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match (a<|>, b) {\n-                    (A::Two, B::One) => (),\n+                    (A::Two, B::One) => {}\n                 }\n             }\n             \"#,\n@@ -502,10 +502,10 @@ mod tests {\n                 let a = A::One;\n                 let b = B::One;\n                 match (a<|>, b) {\n-                    (A::Two, B::One) => (),\n-                    (A::One, B::One) => (),\n-                    (A::One, B::Two) => (),\n-                    (A::Two, B::Two) => (),\n+                    (A::Two, B::One) => {}\n+                    (A::One, B::One) => {}\n+                    (A::One, B::Two) => {}\n+                    (A::Two, B::Two) => {}\n                 }\n             }\n             \"#,\n@@ -555,7 +555,7 @@ mod tests {\n \n             fn foo(a: &A) {\n                 match <|>a {\n-                    A::As => (),\n+                    A::As => {}\n                 }\n             }\n             \"#,\n@@ -580,7 +580,7 @@ mod tests {\n \n             fn foo(a: &mut A) {\n                 match <|>a {\n-                    A::Es { x, y } => (),\n+                    A::Es { x, y } => {}\n                 }\n             }\n             \"#,\n@@ -611,7 +611,7 @@ mod tests {\n \n             fn main() {\n                 match E::X {\n-                    <|>_ => {},\n+                    <|>_ => {}\n                 }\n             }\n             \"#,\n@@ -620,8 +620,8 @@ mod tests {\n \n             fn main() {\n                 match <|>E::X {\n-                    E::X => (),\n-                    E::Y => (),\n+                    E::X => {}\n+                    E::Y => {}\n                 }\n             }\n             \"#,\n@@ -648,8 +648,8 @@ mod tests {\n \n             fn main() {\n                 match <|>X {\n-                    X => (),\n-                    foo::E::Y => (),\n+                    X => {}\n+                    foo::E::Y => {}\n                 }\n             }\n             \"#,"}, {"sha": "1145b69e892d98def60a988d6d443e1f19388d81", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba934fe5866e6aedd8d18e95f8c54e17e18ea51/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=7ba934fe5866e6aedd8d18e95f8c54e17e18ea51", "patch": "@@ -87,6 +87,9 @@ pub fn block_from_expr(e: ast::Expr) -> ast::Block {\n pub fn expr_unit() -> ast::Expr {\n     expr_from_text(\"()\")\n }\n+pub fn expr_empty_block() -> ast::Expr {\n+    expr_from_text(\"{}\")\n+}\n pub fn expr_unimplemented() -> ast::Expr {\n     expr_from_text(\"unimplemented!()\")\n }"}]}