{"sha": "1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlM2JkYzA4Yzk1NWE1NWY2OWE0YzJkZjRhODI5YTUyZjViMGMyMWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-05T21:55:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-11T21:34:01Z"}, "message": "Try to use the first char in the trait name as type param", "tree": {"sha": "87c48a36e174fc8da9146365b7d86611875a2691", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c48a36e174fc8da9146365b7d86611875a2691"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "html_url": "https://github.com/rust-lang/rust/commit/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01169572a23dc599a5a4c2f338afe68e62b295fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/01169572a23dc599a5a4c2f338afe68e62b295fa", "html_url": "https://github.com/rust-lang/rust/commit/01169572a23dc599a5a4c2f338afe68e62b295fa"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "f26fc402a9ac2d7c1cec78fba72bd201a1d994d8", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "patch": "@@ -438,13 +438,15 @@ impl GenericParam<'hir> {\n }\n \n pub trait NextTypeParamName {\n-    fn next_type_param_name(&self) -> &'static str;\n+    fn next_type_param_name(&self, name: Option<&str>) -> String;\n }\n \n impl NextTypeParamName for &[GenericParam<'_>] {\n-    fn next_type_param_name(&self) -> &'static str {\n+    fn next_type_param_name(&self, name: Option<&str>) -> String {\n         // This is the whitelist of possible parameter names that we might suggest.\n-        let possible_names = [\"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\n+        let name = name.and_then(|n| n.chars().next()).map(|c| c.to_string().to_uppercase());\n+        let name = name.as_ref().map(|s| s.as_str());\n+        let possible_names = [name.unwrap_or(\"T\"), \"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\"];\n         let used_names = self\n             .iter()\n             .filter_map(|p| match p.name {\n@@ -457,6 +459,7 @@ impl NextTypeParamName for &[GenericParam<'_>] {\n             .iter()\n             .find(|n| !used_names.contains(&Symbol::intern(n)))\n             .unwrap_or(&\"ParamName\")\n+            .to_string()\n     }\n }\n "}, {"sha": "152b4fb7c566e243c48e989661963150a321ac0b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "patch": "@@ -211,14 +211,14 @@ fn suggest_restriction(\n             }\n         }\n \n-        let type_param_name = generics.params.next_type_param_name();\n+        let type_param_name = generics.params.next_type_param_name(Some(&name));\n         // The type param `T: Trait` we will suggest to introduce.\n         let type_param = format!(\"{}: {}\", type_param_name, name);\n \n         // FIXME: modify the `trait_ref` instead of string shenanigans.\n         // Turn `<impl Trait as Foo>::Bar: Qux` into `<T as Foo>::Bar: Qux`.\n         let pred = trait_ref.without_const().to_predicate().to_string();\n-        let pred = pred.replace(&impl_name, type_param_name);\n+        let pred = pred.replace(&impl_name, &type_param_name);\n         let mut sugg = vec![\n             match generics\n                 .params"}, {"sha": "47754c3704c79c1004e87f2cac8913e0ca464984", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "patch": "@@ -135,7 +135,7 @@ crate fn placeholder_type_error(\n     if placeholder_types.is_empty() {\n         return;\n     }\n-    let type_name = generics.next_type_param_name();\n+    let type_name = generics.next_type_param_name(None);\n \n     let mut sugg: Vec<_> =\n         placeholder_types.iter().map(|sp| (*sp, (*type_name).to_string())).collect();"}, {"sha": "6e9e8821cfea788236640aafe3733744b07a4c7a", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs?ref=1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "patch": "@@ -24,7 +24,7 @@ fn baz(t: impl std::fmt::Debug, constraints: impl Iterator) {\n     }\n }\n \n-fn bat<K, T: std::fmt::Debug>(t: T, constraints: impl Iterator, _: K) {\n+fn bat<I, T: std::fmt::Debug>(t: T, constraints: impl Iterator, _: I) {\n     for constraint in constraints {\n         qux(t);\n         qux(constraint);"}, {"sha": "e1c40e2537b3ec29bb63aeb71b67c2864d6b3171", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "patch": "@@ -10,7 +10,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn foo<T: Iterator>(constraints: T) where <T as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn foo<I: Iterator>(constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n    |       ^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -25,7 +25,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bar<T, U: Iterator>(t: T, constraints: U) where T: std::fmt::Debug, <U as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn bar<T, I: Iterator>(t: T, constraints: I) where T: std::fmt::Debug, <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n    |         ^^^^^^^^^^^^^                     ^                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -40,7 +40,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn baz<T: Iterator>(t: impl std::fmt::Debug, constraints: T) where <T as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn baz<I: Iterator>(t: impl std::fmt::Debug, constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n    |       ^^^^^^^^^^^^^                                       ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -55,7 +55,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bat<K, T: std::fmt::Debug, U: Iterator>(t: T, constraints: U, _: K) where <U as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn bat<I, T: std::fmt::Debug, U: Iterator>(t: T, constraints: U, _: I) where <U as std::iter::Iterator>::Item: std::fmt::Debug  {\n    |                             ^^^^^^^^^^^^^                     ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -70,7 +70,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bak<T: Iterator + std::fmt::Debug>(constraints: T) where <T as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors"}]}