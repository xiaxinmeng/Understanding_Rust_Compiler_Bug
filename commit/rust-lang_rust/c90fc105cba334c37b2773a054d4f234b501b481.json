{"sha": "c90fc105cba334c37b2773a054d4f234b501b481", "node_id": "C_kwDOAAsO6NoAKGM5MGZjMTA1Y2JhMzM0YzM3YjI3NzNhMDU0ZDRmMjM0YjUwMWI0ODE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-06T10:56:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-06T11:26:29Z"}, "message": "Querify early_lint_checks.", "tree": {"sha": "42d55952dce82e9ea6e666d28628047f576085d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d55952dce82e9ea6e666d28628047f576085d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c90fc105cba334c37b2773a054d4f234b501b481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c90fc105cba334c37b2773a054d4f234b501b481", "html_url": "https://github.com/rust-lang/rust/commit/c90fc105cba334c37b2773a054d4f234b501b481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c90fc105cba334c37b2773a054d4f234b501b481/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "html_url": "https://github.com/rust-lang/rust/commit/b7e2b049f3ef7e082af832fa53ab6af0a45baa62"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "91fcb5d266a987cdecce1d684f7476e6a0dbd656", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c90fc105cba334c37b2773a054d4f234b501b481", "patch": "@@ -436,6 +436,7 @@ fn compute_hir_hash(\n pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {\n     let sess = tcx.sess;\n     tcx.ensure().output_filenames(());\n+    let _ = tcx.early_lint_checks(()); // Borrows `resolver_for_lowering`.\n     let (mut resolver, krate) = tcx.resolver_for_lowering(()).steal();\n \n     let ast_index = index_crate(&resolver.node_id_to_def_id, &krate);"}, {"sha": "e321a9847ba06e516181a492ab2796a38e986eb1", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=c90fc105cba334c37b2773a054d4f234b501b481", "patch": "@@ -331,6 +331,7 @@ fn run_compiler(\n             if let Some(ppm) = &sess.opts.pretty {\n                 if ppm.needs_ast_map() {\n                     queries.global_ctxt()?.enter(|tcx| {\n+                        tcx.ensure().early_lint_checks(());\n                         pretty::print_after_hir_lowering(tcx, *ppm);\n                         Ok(())\n                     })?;"}, {"sha": "4a02981f9543dbd5ff46d28c8fc23142732adbf1", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c90fc105cba334c37b2773a054d4f234b501b481", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::parallel;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::PResult;\n-use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n+use rustc_expand::base::{ExtCtxt, LintStoreExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_lint::{unerased_lint_store, BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n@@ -302,6 +302,16 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n \n     // Done with macro expansion!\n \n+    resolver.resolve_crate(&krate);\n+\n+    krate\n+}\n+\n+fn early_lint_checks(tcx: TyCtxt<'_>, (): ()) {\n+    let sess = tcx.sess;\n+    let (resolver, krate) = &*tcx.resolver_for_lowering(()).borrow();\n+    let mut lint_buffer = resolver.lint_buffer.steal();\n+\n     if sess.opts.unstable_opts.input_stats {\n         eprintln!(\"Post-expansion node count: {}\", count_nodes(&krate));\n     }\n@@ -310,8 +320,6 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n         hir_stats::print_ast_stats(&krate, \"POST EXPANSION AST STATS\", \"ast-stats-2\");\n     }\n \n-    resolver.resolve_crate(&krate);\n-\n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     sess.time(\"complete_gated_feature_checking\", || {\n         rustc_ast_passes::feature_gate::check_crate(&krate, sess);\n@@ -321,7 +329,7 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n         for early_lint in buffered_lints.drain(..) {\n-            resolver.lint_buffer().add_early_lint(early_lint);\n+            lint_buffer.add_early_lint(early_lint);\n         }\n     });\n \n@@ -340,20 +348,16 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n         }\n     });\n \n-    sess.time(\"early_lint_checks\", || {\n-        let lint_buffer = Some(std::mem::take(resolver.lint_buffer()));\n-        rustc_lint::check_ast_node(\n-            sess,\n-            false,\n-            lint_store,\n-            resolver.registered_tools(),\n-            lint_buffer,\n-            rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n-            &krate,\n-        )\n-    });\n-\n-    krate\n+    let lint_store = unerased_lint_store(tcx);\n+    rustc_lint::check_ast_node(\n+        sess,\n+        false,\n+        lint_store,\n+        tcx.registered_tools(()),\n+        Some(lint_buffer),\n+        rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n+        &**krate,\n+    )\n }\n \n // Returns all the paths that correspond to generated files.\n@@ -630,6 +634,7 @@ pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     providers.hir_crate = rustc_ast_lowering::lower_to_hir;\n     providers.output_filenames = output_filenames;\n     providers.resolver_for_lowering = resolver_for_lowering;\n+    providers.early_lint_checks = early_lint_checks;\n     proc_macro_decls::provide(providers);\n     rustc_const_eval::provide(providers);\n     rustc_middle::hir::provide(providers);"}, {"sha": "5e3225b74ac000281700b966333ce8450e045d64", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=c90fc105cba334c37b2773a054d4f234b501b481", "patch": "@@ -526,6 +526,7 @@ pub enum BuiltinLintDiagnostics {\n \n /// Lints that are buffered up early on in the `Session` before the\n /// `LintLevels` is calculated.\n+#[derive(Debug)]\n pub struct BufferedEarlyLint {\n     /// The span of code that we are linting on.\n     pub span: MultiSpan,\n@@ -544,7 +545,7 @@ pub struct BufferedEarlyLint {\n     pub diagnostic: BuiltinLintDiagnostics,\n }\n \n-#[derive(Default)]\n+#[derive(Default, Debug)]\n pub struct LintBuffer {\n     pub map: FxIndexMap<NodeId, Vec<BufferedEarlyLint>>,\n }"}, {"sha": "05f6531a7c4b1b0c897052a15acd8caf46de1441", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c90fc105cba334c37b2773a054d4f234b501b481", "patch": "@@ -31,6 +31,10 @@ rustc_queries! {\n         desc { \"compute registered tools for crate\" }\n     }\n \n+    query early_lint_checks(_: ()) -> () {\n+        desc { \"perform lints prior to macro expansion\" }\n+    }\n+\n     query resolutions(_: ()) -> &'tcx ty::ResolverGlobalCtxt {\n         feedable\n         no_hash"}, {"sha": "9894baa9e18cc38864120583ec80ae16e4cc0716", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c90fc105cba334c37b2773a054d4f234b501b481", "patch": "@@ -34,6 +34,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -44,6 +45,7 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{Decodable, Encodable};\n+use rustc_session::lint::LintBuffer;\n pub use rustc_session::lint::RegisteredTools;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -211,6 +213,9 @@ pub struct ResolverAstLowering {\n     pub builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n     /// List functions and methods for which lifetime elision was successful.\n     pub lifetime_elision_allowed: FxHashSet<ast::NodeId>,\n+\n+    /// Lints that were emitted by the resolver and early lints.\n+    pub lint_buffer: Steal<LintBuffer>,\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "13d4c01f2599038041558d2b6cf6b9f9d4122f8b", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fc105cba334c37b2773a054d4f234b501b481/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c90fc105cba334c37b2773a054d4f234b501b481", "patch": "@@ -27,6 +27,7 @@ use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, MappedReadGuard};\n use rustc_errors::{\n     Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, SubdiagnosticMessage,\n@@ -1441,6 +1442,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             trait_map: self.trait_map,\n             builtin_macro_kinds: self.builtin_macro_kinds,\n             lifetime_elision_allowed: self.lifetime_elision_allowed,\n+            lint_buffer: Steal::new(self.lint_buffer),\n         };\n         ResolverOutputs { global_ctxt, ast_lowering }\n     }"}]}