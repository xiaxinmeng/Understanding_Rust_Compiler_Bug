{"sha": "52d3fc93f2194b0646e5447f29e6702b7c71ddae", "node_id": "C_kwDOAAsO6NoAKDUyZDNmYzkzZjIxOTRiMDY0NmU1NDQ3ZjI5ZTY3MDJiN2M3MWRkYWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-15T16:59:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-17T21:20:20Z"}, "message": "Move WF goal to clause", "tree": {"sha": "2573b926180d72ae93ee65090aac54fbeae0edb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2573b926180d72ae93ee65090aac54fbeae0edb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52d3fc93f2194b0646e5447f29e6702b7c71ddae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52d3fc93f2194b0646e5447f29e6702b7c71ddae", "html_url": "https://github.com/rust-lang/rust/commit/52d3fc93f2194b0646e5447f29e6702b7c71ddae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52d3fc93f2194b0646e5447f29e6702b7c71ddae/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a29070f07e47a244c8199ad582f93172019743", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a29070f07e47a244c8199ad582f93172019743", "html_url": "https://github.com/rust-lang/rust/commit/a8a29070f07e47a244c8199ad582f93172019743"}], "stats": {"total": 145, "additions": 81, "deletions": 64}, "files": [{"sha": "6ca702cfdfc3edc77e4492cd1ea19c47072b013d", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -330,7 +330,8 @@ fn check_opaque_type_well_formed<'tcx>(\n     // Require the hidden type to be well-formed with only the generics of the opaque type.\n     // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n     // hidden type is well formed even without those bounds.\n-    let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()));\n+    let predicate =\n+        ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(definition_ty.into())));\n     ocx.register_obligation(Obligation::misc(tcx, definition_span, def_id, param_env, predicate));\n \n     // Check that all obligations are satisfied by the implementation's"}, {"sha": "33f75437478b517ac31766f02368c95b82f28f84", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -1419,9 +1419,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 //\n                 // See #91068 for an example.\n                 self.prove_predicates(\n-                    sig.inputs_and_output\n-                        .iter()\n-                        .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),\n+                    sig.inputs_and_output.iter().map(|ty| {\n+                        ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(\n+                            ty.into(),\n+                        )))\n+                    }),\n                     term_location.to_locations(),\n                     ConstraintCategory::Boring,\n                 );\n@@ -1850,7 +1852,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 let array_ty = rvalue.ty(body.local_decls(), tcx);\n                 self.prove_predicate(\n-                    ty::PredicateKind::WellFormed(array_ty.into()),\n+                    ty::PredicateKind::Clause(ty::Clause::WellFormed(array_ty.into())),\n                     Locations::Single(location),\n                     ConstraintCategory::Boring,\n                 );"}, {"sha": "3b55c52c342052fb304babdf7ef83d4748500d81", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -1527,10 +1527,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Clause::TypeOutlives(_) => {\n                         // Do nothing, we deal with regions separately\n                     }\n-                    ty::Clause::RegionOutlives(_) | ty::Clause::ConstArgHasType(..) => bug!(),\n+                    ty::Clause::RegionOutlives(_)\n+                    | ty::Clause::ConstArgHasType(..)\n+                    | ty::Clause::WellFormed(_) => bug!(),\n                 },\n-                ty::PredicateKind::WellFormed(_)\n-                | ty::PredicateKind::AliasRelate(..)\n+                ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(_, _, _)\n                 | ty::PredicateKind::Subtype(_)"}, {"sha": "c09734d6e6983de46966c710b9b18297b24d0560", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -439,7 +439,8 @@ fn check_opaque_meets_bounds<'tcx>(\n     // Additionally require the hidden type to be well-formed with only the generics of the opaque type.\n     // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n     // hidden type is well formed even without those bounds.\n-    let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_ty.into()));\n+    let predicate =\n+        ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(hidden_ty.into())));\n     ocx.register_obligation(Obligation::new(tcx, misc_cause, param_env, predicate));\n \n     // Check that all obligations are satisfied by the implementation's"}, {"sha": "838b212ef878210f0c07a1fe69e840e1acaa15e7", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -321,7 +321,9 @@ fn compare_method_predicate_entailment<'tcx>(\n             infcx.tcx,\n             ObligationCause::dummy(),\n             param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(unnormalized_impl_fty.into())),\n+            ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(\n+                unnormalized_impl_fty.into(),\n+            ))),\n         ));\n     }\n "}, {"sha": "132335e74ef9d6accfb67a920bcce4f66dbc8632", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n             self.tcx(),\n             cause,\n             param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n+            ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(arg))),\n         ));\n     }\n }\n@@ -1876,7 +1876,8 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n             // We lower empty bounds like `Vec<dyn Copy>:` as\n             // `WellFormed(Vec<dyn Copy>)`, which will later get checked by\n             // regular WF checking\n-            if let ty::PredicateKind::WellFormed(..) = pred.kind().skip_binder() {\n+            if let ty::PredicateKind::Clause(ty::Clause::WellFormed(..)) = pred.kind().skip_binder()\n+            {\n                 continue;\n             }\n             // Match the existing behavior."}, {"sha": "843896d85aa0cf0d38ad4eb36ca1029b93cfcb0f", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -219,7 +219,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n                     } else {\n                         let span = bound_pred.bounded_ty.span;\n                         let predicate = ty::Binder::bind_with_vars(\n-                            ty::PredicateKind::WellFormed(ty.into()),\n+                            ty::PredicateKind::Clause(ty::Clause::WellFormed(ty.into())),\n                             bound_vars,\n                         );\n                         predicates.insert((predicate.to_predicate(tcx), span));"}, {"sha": "f2618b3daf1477cd1d284649b705fa4903ce761e", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -79,7 +79,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n                 self.tcx,\n                 cause,\n                 self.param_env,\n-                ty::PredicateKind::WellFormed(tcx_ty.into()),\n+                ty::PredicateKind::Clause(ty::Clause::WellFormed(tcx_ty.into())),\n             ));\n \n             for error in ocx.select_all_or_error() {"}, {"sha": "4517d24d154a9536f1899d787ab08dea09bebe14", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -542,7 +542,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n         | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n         | ty::PredicateKind::AliasRelate(..)\n-        | ty::PredicateKind::WellFormed(_)\n+        | ty::PredicateKind::Clause(ty::Clause::WellFormed(_))\n         | ty::PredicateKind::Subtype(_)\n         | ty::PredicateKind::Coerce(_)\n         | ty::PredicateKind::ObjectSafe(_)"}, {"sha": "ecdf8dca5c1204f61e36e18f4e2e73b7e11f0458", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                     | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-                    | ty::PredicateKind::WellFormed(..)\n+                    | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n                     | ty::PredicateKind::AliasRelate(..)\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ClosureKind(..)"}, {"sha": "9b593ddccfdd9a4160680f59955313ab24cd1469", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -483,7 +483,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx,\n             cause,\n             self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n+            ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(arg))),\n         ));\n     }\n \n@@ -668,7 +668,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n-                | ty::PredicateKind::WellFormed(..)\n+                | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)"}, {"sha": "cca97d1051720cb1a129b34d4dfcf4732105d2fc", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -452,7 +452,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tcx,\n             obligation.cause,\n             self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())),\n+            ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(method_ty.into()))),\n         ));\n \n         let callee = MethodCallee { def_id, substs, sig: fn_sig };"}, {"sha": "e4c2f61da5626825c7fb3968d0259b2ebe63ccb6", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -838,7 +838,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-                | ty::PredicateKind::WellFormed(..)\n+                | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))"}, {"sha": "66e771b794aad2f6a64965ea8ef2d76d6072e85e", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -696,7 +696,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n \n                 // Don't point out the span of `WellFormed` predicates.\n-                if !matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) {\n+                if !matches!(\n+                    p.kind().skip_binder(),\n+                    ty::PredicateKind::Clause(ty::Clause::Projection(..) | ty::Clause::Trait(..))\n+                ) {\n                     continue;\n                 };\n "}, {"sha": "152c56572b6914f3f173218368497b64d763be3d", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -417,7 +417,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n                 self.tcx(),\n                 self.trace.cause.clone(),\n                 self.param_env,\n-                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into())),\n+                ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(b_ty.into()))),\n             ));\n         }\n "}, {"sha": "3edf98cc869cfac30bbe7f80b6a6e166cb5d42e1", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -29,7 +29,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n             | ty::PredicateKind::AliasRelate(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)\n-            | ty::PredicateKind::WellFormed(..)\n+            | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))"}, {"sha": "66056de03b57204d1c52a62936e850f94f6d7129", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -227,7 +227,7 @@ impl<'tcx, O: Elaboratable<'tcx>> Elaborator<'tcx, O> {\n                 debug!(?data, ?obligations, \"super_predicates\");\n                 self.extend_deduped(obligations);\n             }\n-            ty::PredicateKind::WellFormed(..) => {\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(..)) => {\n                 // Currently, we do not elaborate WF predicates,\n                 // although we easily could.\n             }"}, {"sha": "6262d875552b4ae88c1751569f924b4dcba15808", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -1610,7 +1610,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     Clause(Clause::Projection(..)) |\n                     AliasRelate(..) |\n                     // Ignore bounds that a user can't type\n-                    WellFormed(..) |\n+                    Clause(Clause::WellFormed(..)) |\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |"}, {"sha": "aa2af5bb2b0855350c476564fa47b33d01ec2768", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -270,7 +270,7 @@ impl FlagComputation {\n                 self.add_alias_ty(projection_ty);\n                 self.add_term(term);\n             }\n-            ty::PredicateKind::WellFormed(arg) => {\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => {\n                 self.add_substs(slice::from_ref(&arg));\n             }\n             ty::PredicateKind::ObjectSafe(_def_id) => {}"}, {"sha": "155adda02a95340e406257ea74367db85a1f4ab7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -523,7 +523,7 @@ impl<'tcx> Predicate<'tcx> {\n             ty::PredicateKind::Clause(ty::Clause::Trait(data)) => {\n                 tcx.trait_is_coinductive(data.def_id())\n             }\n-            ty::PredicateKind::WellFormed(_) => true,\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(_)) => true,\n             _ => false,\n         }\n     }\n@@ -536,7 +536,7 @@ impl<'tcx> Predicate<'tcx> {\n     #[inline]\n     pub fn allow_normalization(self) -> bool {\n         match self.kind().skip_binder() {\n-            PredicateKind::WellFormed(_) => false,\n+            PredicateKind::Clause(Clause::WellFormed(_)) => false,\n             PredicateKind::Clause(Clause::Trait(_))\n             | PredicateKind::Clause(Clause::RegionOutlives(_))\n             | PredicateKind::Clause(Clause::TypeOutlives(_))\n@@ -584,6 +584,9 @@ pub enum Clause<'tcx> {\n     /// Ensures that a const generic argument to a parameter `const N: u8`\n     /// is of type `u8`.\n     ConstArgHasType(Const<'tcx>, Ty<'tcx>),\n+\n+    /// No syntax: `T` well-formed.\n+    WellFormed(GenericArg<'tcx>),\n }\n \n impl<'tcx> Binder<'tcx, Clause<'tcx>> {\n@@ -610,9 +613,6 @@ pub enum PredicateKind<'tcx> {\n     /// Prove a clause\n     Clause(Clause<'tcx>),\n \n-    /// No syntax: `T` well-formed.\n-    WellFormed(GenericArg<'tcx>),\n-\n     /// Trait must be object-safe.\n     ObjectSafe(DefId),\n \n@@ -1324,7 +1324,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n-            | PredicateKind::WellFormed(..)\n+            | PredicateKind::Clause(Clause::WellFormed(..))\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::Clause(Clause::TypeOutlives(..))\n@@ -1345,7 +1345,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n-            | PredicateKind::WellFormed(..)\n+            | PredicateKind::Clause(Clause::WellFormed(..))\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::Clause(Clause::TypeOutlives(..))\n@@ -1367,7 +1367,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n-            | PredicateKind::WellFormed(..)\n+            | PredicateKind::Clause(Clause::WellFormed(..))\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::ConstEvaluatable(..)"}, {"sha": "4f8566c215c1aba9eef74cfc2dda3743776e6af3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -2877,7 +2877,7 @@ define_print_and_forward_display! {\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n                 p!(\"the constant `\", print(ct), \"` has type `\", print(ty), \"`\")\n             },\n-            ty::PredicateKind::WellFormed(arg) => p!(print(arg), \" well-formed\"),\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => p!(print(arg), \" well-formed\"),\n             ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 p!(\"the trait `\", print_def_path(trait_def_id, &[]), \"` is object-safe\")\n             }"}, {"sha": "6db49c7300f41ecfdbcfbc70e122aa9b2e91ec85", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -179,6 +179,7 @@ impl<'tcx> fmt::Debug for ty::Clause<'tcx> {\n             ty::Clause::RegionOutlives(ref pair) => pair.fmt(f),\n             ty::Clause::TypeOutlives(ref pair) => pair.fmt(f),\n             ty::Clause::Projection(ref pair) => pair.fmt(f),\n+            ty::Clause::WellFormed(ref data) => write!(f, \"WellFormed({:?})\", data),\n         }\n     }\n }\n@@ -189,7 +190,6 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n             ty::PredicateKind::Clause(ref a) => a.fmt(f),\n             ty::PredicateKind::Subtype(ref pair) => pair.fmt(f),\n             ty::PredicateKind::Coerce(ref pair) => pair.fmt(f),\n-            ty::PredicateKind::WellFormed(data) => write!(f, \"WellFormed({:?})\", data),\n             ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 write!(f, \"ObjectSafe({:?})\", trait_def_id)\n             }"}, {"sha": "0c23ae2b68f5860014d0344b1081f7b8bb6ca3d0", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -183,7 +183,7 @@ where\n                 ty.visit_with(self)\n             }\n             ty::PredicateKind::ConstEvaluatable(ct) => ct.visit_with(self),\n-            ty::PredicateKind::WellFormed(arg) => arg.visit_with(self),\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => arg.visit_with(self),\n \n             ty::PredicateKind::ObjectSafe(_)\n             | ty::PredicateKind::ClosureKind(_, _, _)"}, {"sha": "c353ddf6fdd7e707d468746571ccefa54e01e4e0", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                     self.compute_object_safe_goal(trait_def_id)\n                 }\n-                ty::PredicateKind::WellFormed(arg) => {\n+                ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => {\n                     self.compute_well_formed_goal(Goal { param_env, predicate: arg })\n                 }\n                 ty::PredicateKind::Ambiguous => {"}, {"sha": "ddc28e6128d7c913193754680355f77d9e49b284", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -119,7 +119,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                     )\n                                 }\n                                 ty::PredicateKind::Clause(_)\n-                                | ty::PredicateKind::WellFormed(_)\n                                 | ty::PredicateKind::ObjectSafe(_)\n                                 | ty::PredicateKind::ClosureKind(_, _, _)\n                                 | ty::PredicateKind::ConstEvaluatable(_)"}, {"sha": "03e01d61996f620d4ad0d75cc81b523f6afeab87", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -826,7 +826,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 // we start out with a `ParamEnv` with no inference variables,\n                 // and these don't correspond to adding any new bounds to\n                 // the `ParamEnv`.\n-                ty::PredicateKind::WellFormed(..)\n+                ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n                 | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::AliasRelate(..)\n                 | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "558cd9ebf21a0856517aef20ee6b2c9bf7f79b04", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -1048,7 +1048,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         self.report_closure_error(&obligation, closure_def_id, found_kind, kind)\n                     }\n \n-                    ty::PredicateKind::WellFormed(ty) => {\n+                    ty::PredicateKind::Clause(ty::Clause::WellFormed(ty)) => {\n                         match self.tcx.sess.opts.unstable_opts.trait_solver {\n                             TraitSolver::Classic => {\n                                 // WF predicates cannot themselves make\n@@ -2415,7 +2415,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 err\n             }\n \n-            ty::PredicateKind::WellFormed(arg) => {\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if arg.references_error()"}, {"sha": "c29e01786016154a4d7b5833b92189ec728ea360", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n                 | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n-                | ty::PredicateKind::WellFormed(_)\n+                | ty::PredicateKind::Clause(ty::Clause::WellFormed(_))\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(_)\n@@ -433,7 +433,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::WellFormed(arg) => {\n+                ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => {\n                     match wf::obligations(\n                         self.selcx.infcx,\n                         obligation.param_env,"}, {"sha": "3a197d78c5f241be80c5ebd982804150437c6c32", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -310,7 +310,7 @@ fn predicate_references_self<'tcx>(\n \n         ty::PredicateKind::AliasRelate(..) => bug!(\"`AliasRelate` not allowed as assumption\"),\n \n-        ty::PredicateKind::WellFormed(..)\n+        ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n         | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n@@ -361,7 +361,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         | ty::PredicateKind::Subtype(..)\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-        | ty::PredicateKind::WellFormed(..)\n+        | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))"}, {"sha": "7405ca31cdeadf3362a114ea5b965ee6a0860bbf", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -67,7 +67,8 @@ fn relate_mir_and_user_ty<'tcx>(\n     ocx.eq(&cause, param_env, mir_ty, user_ty)?;\n \n     // FIXME(#104764): We should check well-formedness before normalization.\n-    let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(user_ty.into()));\n+    let predicate =\n+        ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(user_ty.into())));\n     ocx.register_obligation(Obligation::new(ocx.infcx.tcx, cause, param_env, predicate));\n     Ok(())\n }\n@@ -119,7 +120,9 @@ fn relate_mir_and_user_substs<'tcx>(\n         let impl_self_ty = ocx.normalize(&cause, param_env, impl_self_ty);\n \n         ocx.eq(&cause, param_env, self_ty, impl_self_ty)?;\n-        let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(impl_self_ty.into()));\n+        let predicate = ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(\n+            impl_self_ty.into(),\n+        )));\n         ocx.register_obligation(Obligation::new(tcx, cause.clone(), param_env, predicate));\n     }\n \n@@ -134,7 +137,7 @@ fn relate_mir_and_user_substs<'tcx>(\n     // them?  This would only be relevant if some input\n     // type were ill-formed but did not appear in `ty`,\n     // which...could happen with normalization...\n-    let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()));\n+    let predicate = ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(ty.into())));\n     ocx.register_obligation(Obligation::new(tcx, cause, param_env, predicate));\n     Ok(())\n }"}, {"sha": "90683d7e066509b3f45a260a085c5d160db2ed84", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -137,7 +137,7 @@ pub fn compute_implied_outlives_bounds_inner<'tcx>(\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}\n \n                 // We need to search through *all* WellFormed predicates\n-                ty::PredicateKind::WellFormed(arg) => {\n+                ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => {\n                     wf_args.push(arg);\n                 }\n "}, {"sha": "0a64ffc42b2810bab1d2615e38d0594e52ec5af7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -674,7 +674,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n \n-                ty::PredicateKind::WellFormed(arg) => {\n+                ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => {\n                     // So, there is a bit going on here. First, `WellFormed` predicates\n                     // are coinductive, like trait predicates with auto traits.\n                     // This means that we need to detect if we have recursively"}, {"sha": "ee609c34d1bd175a84b6e01c30915a51ece5126f", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -160,7 +160,7 @@ pub fn predicate_obligations<'tcx>(\n             wf.compute(ct.into());\n             wf.compute(ty.into());\n         }\n-        ty::PredicateKind::WellFormed(arg) => {\n+        ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => {\n             wf.compute(arg);\n         }\n \n@@ -386,7 +386,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         cause,\n                         depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n+                        ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(arg))),\n                     )\n                 }),\n         );\n@@ -478,7 +478,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         cause.clone(),\n                         depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)),\n+                        ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(arg))),\n                     )\n                 }),\n         );\n@@ -541,7 +541,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 cause,\n                                 self.recursion_depth,\n                                 self.param_env,\n-                                ty::Binder::dummy(ty::PredicateKind::WellFormed(ct.into())),\n+                                ty::Binder::dummy(ty::PredicateKind::Clause(\n+                                    ty::Clause::WellFormed(ct.into()),\n+                                )),\n                             ));\n                         }\n                         ty::ConstKind::Expr(_) => {\n@@ -784,7 +786,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         cause,\n                         self.recursion_depth,\n                         param_env,\n-                        ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into())),\n+                        ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::WellFormed(\n+                            ty.into(),\n+                        ))),\n                     ));\n                 }\n             }\n@@ -969,7 +973,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n                 | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n-                | ty::PredicateKind::WellFormed(..)\n+                | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "8112c3ed3b14b6f21b88df76c6a788118529f655", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -122,7 +122,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                         predicate.lower_into(interner),\n                     ))\n                 }\n-                ty::PredicateKind::WellFormed(arg) => match arg.unpack() {\n+                ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => match arg.unpack() {\n                     ty::GenericArgKind::Type(ty) => chalk_ir::DomainGoal::WellFormed(\n                         chalk_ir::WellFormed::Ty(ty.lower_into(interner)),\n                     ),\n@@ -192,7 +192,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                     chalk_ir::WhereClause::AliasEq(predicate.lower_into(interner)),\n                 ))\n             }\n-            ty::PredicateKind::WellFormed(arg) => match arg.unpack() {\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(arg)) => match arg.unpack() {\n                 GenericArgKind::Type(ty) => match ty.kind() {\n                     // FIXME(chalk): In Chalk, a placeholder is WellFormed if it\n                     // `FromEnv`. However, when we \"lower\" Params, we don't update\n@@ -672,7 +672,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             ty::PredicateKind::Clause(ty::Clause::Projection(predicate)) => {\n                 Some(chalk_ir::WhereClause::AliasEq(predicate.lower_into(interner)))\n             }\n-            ty::PredicateKind::WellFormed(_ty) => None,\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(_ty)) => None,\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::ObjectSafe(..)\n@@ -807,7 +807,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n                 ))\n             }\n             ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_predicate)) => None,\n-            ty::PredicateKind::WellFormed(_ty) => None,\n+            ty::PredicateKind::Clause(ty::Clause::WellFormed(_ty)) => None,\n             ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "71357efae9bf3e3cb5169551ab749adb54b41510", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -62,7 +62,7 @@ fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n         | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n         | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n         | ty::PredicateKind::AliasRelate(..)\n-        | ty::PredicateKind::WellFormed(..)\n+        | ty::PredicateKind::Clause(ty::Clause::WellFormed(..))\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Subtype(..)"}, {"sha": "4ebe7e3227603522b7d9c73dbfb3d9659c9d2dbc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -345,7 +345,7 @@ pub(crate) fn clean_predicate<'tcx>(\n         }\n         // FIXME(generic_const_exprs): should this do something?\n         ty::PredicateKind::ConstEvaluatable(..) => None,\n-        ty::PredicateKind::WellFormed(..) => None,\n+        ty::PredicateKind::Clause(ty::Clause::WellFormed(..)) => None,\n         ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n         ty::PredicateKind::Subtype(..)"}, {"sha": "b132e69269d8dec690411ccc4d5387f522e6b2c4", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d3fc93f2194b0646e5447f29e6702b7c71ddae/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d3fc93f2194b0646e5447f29e6702b7c71ddae/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=52d3fc93f2194b0646e5447f29e6702b7c71ddae", "patch": "@@ -33,7 +33,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                     | ty::Clause::Trait(..)\n                     | ty::Clause::ConstArgHasType(..),\n                 )\n-                | ty::PredicateKind::WellFormed(_)\n+                | ty::PredicateKind::Clause(ty::Clause::WellFormed(_))\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,"}]}