{"sha": "fc028b81803277f7552355052bb277b10a066249", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDI4YjgxODAzMjc3Zjc1NTIzNTUwNTJiYjI3N2IxMGEwNjYyNDk=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-03-29T00:39:59Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-04-18T00:43:16Z"}, "message": "Convert sNaN to quiet NaN instead of returning errors", "tree": {"sha": "4b35ee86211a59bc6178614cc214cae6fccc747b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b35ee86211a59bc6178614cc214cae6fccc747b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc028b81803277f7552355052bb277b10a066249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc028b81803277f7552355052bb277b10a066249", "html_url": "https://github.com/rust-lang/rust/commit/fc028b81803277f7552355052bb277b10a066249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc028b81803277f7552355052bb277b10a066249/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdab5cdc6336793968d790b1512fdfeeed2260e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdab5cdc6336793968d790b1512fdfeeed2260e4", "html_url": "https://github.com/rust-lang/rust/commit/bdab5cdc6336793968d790b1512fdfeeed2260e4"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "40bf7f17c3aa6bd29036522935491b3c02504ec2", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fc028b81803277f7552355052bb277b10a066249/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc028b81803277f7552355052bb277b10a066249/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=fc028b81803277f7552355052bb277b10a066249", "patch": "@@ -1254,29 +1254,35 @@ impl f32 {\n     /// representation into the `f32` type, similar to the\n     /// `transmute` function.\n     ///\n-    /// Note that this function is distinct from casting.\n+    /// There is only one difference to a bare `transmute`:\n+    /// Due to the implications onto Rust's safety promises being\n+    /// uncertain, if the representation of a signaling NaN \"sNaN\" float\n+    /// is passed to the function, a quiet NaN will be returned\n+    /// instead.\n     ///\n-    /// Returns `Err(())` if the representation of a signaling NaN \"sNaN\"\n-    /// float, is passed to the function.\n+    /// Note that this function is distinct from casting.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(float_bits_conv)]\n     /// use std::f32;\n-    /// let v = f32::from_bits(0x41480000).unwrap();\n+    /// let v = f32::from_bits(0x41480000);\n     /// let difference = (v - 12.5).abs();\n     /// assert!(difference <= 1e-5);\n     /// // Example for a signaling NaN value:\n-    /// assert_eq!(f32::from_bits(0x7F800001), Err(()));\n+    /// let snan = 0x7F800001;\n+    /// assert_ne!(f32::from_bits(snan).to_bits(), snan);\n     /// ```\n     #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n     #[inline]\n-    pub fn from_bits(v: u32) -> Result<Self, ()> {\n+    pub fn from_bits(v: u32) -> Self {\n         match v {\n+            // sNaN limits source:\n+            // https://www.doc.ic.ac.uk/~eedwards/compsys/float/nan.html\n             0x7F800001 ... 0x7FBFFFFF |\n-            0xFF800001 ... 0xFFBFFFFF => Err(()),\n-            _ => Ok(unsafe { ::mem::transmute(v) }),\n+            0xFF800001 ... 0xFFBFFFFF => ::f32::NAN,\n+            _ => unsafe { ::mem::transmute(v) },\n         }\n     }\n }\n@@ -1930,9 +1936,9 @@ mod tests {\n         assert_eq!((12.5f32).to_bits(), 0x41480000);\n         assert_eq!((1337f32).to_bits(), 0x44a72000);\n         assert_eq!((-14.25f32).to_bits(), 0xc1640000);\n-        assert_approx_eq!(f32::from_bits(0x3f800000).unwrap(), 1.0);\n-        assert_approx_eq!(f32::from_bits(0x41480000).unwrap(), 12.5);\n-        assert_approx_eq!(f32::from_bits(0x44a72000).unwrap(), 1337.0);\n-        assert_approx_eq!(f32::from_bits(0xc1640000).unwrap(), -14.25);\n+        assert_approx_eq!(f32::from_bits(0x3f800000), 1.0);\n+        assert_approx_eq!(f32::from_bits(0x41480000), 12.5);\n+        assert_approx_eq!(f32::from_bits(0x44a72000), 1337.0);\n+        assert_approx_eq!(f32::from_bits(0xc1640000), -14.25);\n     }\n }"}, {"sha": "80bc149b1a40a011dfcdcf5ccfc4247d0ad37164", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fc028b81803277f7552355052bb277b10a066249/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc028b81803277f7552355052bb277b10a066249/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=fc028b81803277f7552355052bb277b10a066249", "patch": "@@ -1146,29 +1146,35 @@ impl f64 {\n     /// representation into the `f64` type, similar to the\n     /// `transmute` function.\n     ///\n-    /// Note that this function is distinct from casting.\n+    /// There is only one difference to a bare `transmute`:\n+    /// Due to the implications onto Rust's safety promises being\n+    /// uncertain, if the representation of a signaling NaN \"sNaN\" float\n+    /// is passed to the function, a quiet NaN will be returned\n+    /// instead.\n     ///\n-    /// Returns `Err(())` if the representation of a signaling NaN \"sNaN\"\n-    /// float, is passed to the function.\n+    /// Note that this function is distinct from casting.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(float_bits_conv)]\n     /// use std::f64;\n-    /// let v = f64::from_bits(0x4029000000000000).unwrap();\n+    /// let v = f64::from_bits(0x4029000000000000);\n     /// let difference = (v - 12.5).abs();\n     /// assert!(difference <= 1e-5);\n     /// // Example for a signaling NaN value:\n-    /// assert_eq!(f64::from_bits(0x7FF0000000000001), Err(()));\n+    /// let snan = 0x7FF0000000000001;\n+    /// assert_ne!(f64::from_bits(snan).to_bits(), snan);\n     /// ```\n     #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n     #[inline]\n-    pub fn from_bits(v: u64) -> Result<Self, ()> {\n+    pub fn from_bits(v: u64) -> Self {\n         match v {\n+            // sNaN limits source:\n+            // https://www.doc.ic.ac.uk/~eedwards/compsys/float/nan.html\n             0x7FF0000000000001 ... 0x7FF7FFFFFFFFFFFF |\n-            0xFFF0000000000001 ... 0xFFF7FFFFFFFFFFFF => Err(()),\n-            _ => Ok(unsafe { ::mem::transmute(v) }),\n+            0xFFF0000000000001 ... 0xFFF7FFFFFFFFFFFF => ::f64::NAN,\n+            _ => unsafe { ::mem::transmute(v) },\n         }\n     }\n }\n@@ -1815,9 +1821,9 @@ mod tests {\n         assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n         assert_eq!((1337f64).to_bits(), 0x4094e40000000000);\n         assert_eq!((-14.25f64).to_bits(), 0xc02c800000000000);\n-        assert_approx_eq!(f64::from_bits(0x3ff0000000000000).unwrap(), 1.0);\n-        assert_approx_eq!(f64::from_bits(0x4029000000000000).unwrap(), 12.5);\n-        assert_approx_eq!(f64::from_bits(0x4094e40000000000).unwrap(), 1337.0);\n-        assert_approx_eq!(f64::from_bits(0xc02c800000000000).unwrap(), -14.25);\n+        assert_approx_eq!(f64::from_bits(0x3ff0000000000000), 1.0);\n+        assert_approx_eq!(f64::from_bits(0x4029000000000000), 12.5);\n+        assert_approx_eq!(f64::from_bits(0x4094e40000000000), 1337.0);\n+        assert_approx_eq!(f64::from_bits(0xc02c800000000000), -14.25);\n     }\n }"}]}