{"sha": "0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYzQ4YjQ3YThjNjdlYjI4ZTdiODlhNmMwODEwZGM5NDQ2Mzc3Zjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T02:53:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T03:27:27Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "6ecc7fd6e3031c1d57e85dd6612489903a595b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ecc7fd6e3031c1d57e85dd6612489903a595b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "html_url": "https://github.com/rust-lang/rust/commit/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e265c2e0af99a81caf888fc39cc903dc74f1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e265c2e0af99a81caf888fc39cc903dc74f1cd", "html_url": "https://github.com/rust-lang/rust/commit/11e265c2e0af99a81caf888fc39cc903dc74f1cd"}], "stats": {"total": 695, "additions": 386, "deletions": 309}, "files": [{"sha": "98b46511f04584fbfff7f5d6be4b11a8ed28b40e", "filename": "src/doc/guide-error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-error-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-error-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-error-handling.md?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -147,10 +147,10 @@ for all but the most trivial of situations.\n Here's an example of using `Result`:\n \n ```rust\n-#[deriving(Show)]\n+#[derive(Show)]\n enum Version { Version1, Version2 }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum ParseError { InvalidHeaderLength, InvalidVersion }\n \n fn parse_version(header: &[u8]) -> Result<Version, ParseError> {"}, {"sha": "1f12c05f37e34475d9f892eae3274c1f1220343e", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -262,6 +262,7 @@ referenced Rust object.\n Rust code:\n \n ~~~~no_run\n+# use std::boxed::Box;\n \n #[repr(C)]\n struct RustObject {\n@@ -286,7 +287,7 @@ extern {\n \n fn main() {\n     // Create the object that will be referenced in the callback\n-    let mut rust_object = box RustObject { a: 5 };\n+    let mut rust_object = Box::new(RustObject { a: 5 });\n \n     unsafe {\n         register_callback(&mut *rust_object, callback);"}, {"sha": "3db4da73f932ebf73d8c13a909ffd8d6702a2eff", "filename": "src/doc/guide-ownership.md", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-ownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-ownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ownership.md?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -81,27 +81,29 @@ therefore deallocates the memory for you. Here's the equivalent example in\n Rust:\n \n ```rust\n+# use std::boxed::Box;\n {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n }\n ```\n \n-The `box` keyword creates a `Box<T>` (specifically `Box<int>` in this case) by\n-allocating a small segment of memory on the heap with enough space to fit an\n-`int`. But where in the code is the box deallocated? We said before that we\n-must have a deallocation for each allocation. Rust handles this for you. It\n+The `Box::new` function creates a `Box<T>` (specifically `Box<int>` in this\n+case) by allocating a small segment of memory on the heap with enough space to\n+fit an `int`. But where in the code is the box deallocated? We said before that\n+we must have a deallocation for each allocation. Rust handles this for you. It\n knows that our handle, `x`, is the owning reference to our box. Rust knows that\n `x` will go out of scope at the end of the block, and so it inserts a call to\n deallocate the memory at the end of the scope. Because the compiler does this\n-for us, it's impossible to forget. We always have exactly one deallocation paired\n-with each of our allocations.\n+for us, it's impossible to forget. We always have exactly one deallocation\n+  paired with each of our allocations.\n \n This is pretty straightforward, but what happens when we want to pass our box\n to a function? Let's look at some code:\n \n ```rust\n+# use std::boxed::Box;\n fn main() {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     add_one(x);\n }\n@@ -115,8 +117,9 @@ This code works, but it's not ideal. For example, let's add one more line of\n code, where we print out the value of `x`:\n \n ```{rust,ignore}\n+# use std::boxed::Box;\n fn main() {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     add_one(x);\n \n@@ -148,8 +151,9 @@ To fix this, we can have `add_one` give ownership back when it's done with the\n box:\n \n ```rust\n+# use std::boxed::Box;\n fn main() {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     let y = add_one(x);\n "}, {"sha": "4c35fae3ecc51d22b7a52a34b545f8e476da8456", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -455,12 +455,13 @@ fn rc_succ(x: Rc<int>) -> int { *x + 1 }\n Note that the caller of your function will have to modify their calls slightly:\n \n ```{rust}\n+# use std::boxed::Box;\n use std::rc::Rc;\n \n fn succ(x: &int) -> int { *x + 1 }\n \n let ref_x = &5i;\n-let box_x = box 5i;\n+let box_x = Box::new(5i);\n let rc_x  = Rc::new(5i);\n \n succ(ref_x);\n@@ -477,24 +478,17 @@ those contents.\n heap allocation in Rust. Creating a box looks like this:\n \n ```{rust}\n-let x = box(std::boxed::HEAP) 5i;\n+# use std::boxed::Box;\n+let x = Box::new(5i);\n ```\n \n-`box` is a keyword that does 'placement new,' which we'll talk about in a bit.\n-`box` will be useful for creating a number of heap-allocated types, but is not\n-quite finished yet. In the meantime, `box`'s type defaults to\n-`std::boxed::HEAP`, and so you can leave it off:\n-\n-```{rust}\n-let x = box 5i;\n-```\n-\n-As you might assume from the `HEAP`, boxes are heap allocated. They are\n-deallocated automatically by Rust when they go out of scope:\n+Boxes are heap allocated and they are deallocated automatically by Rust when\n+they go out of scope:\n \n ```{rust}\n+# use std::boxed::Box;\n {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     // stuff happens\n \n@@ -513,8 +507,9 @@ You don't need to fully grok the theory of affine types or regions to grok\n boxes, though. As a rough approximation, you can treat this Rust code:\n \n ```{rust}\n+# use std::boxed::Box;\n {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     // stuff happens\n }\n@@ -553,12 +548,13 @@ for more detail on how lifetimes work.\n Using boxes and references together is very common. For example:\n \n ```{rust}\n+# use std::boxed::Box;\n fn add_one(x: &int) -> int {\n     *x + 1\n }\n \n fn main() {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     println!(\"{}\", add_one(&*x));\n }\n@@ -570,12 +566,13 @@ function, and since it's only reading the value, allows it.\n We can borrow `x` multiple times, as long as it's not simultaneous:\n \n ```{rust}\n+# use std::boxed::Box;\n fn add_one(x: &int) -> int {\n     *x + 1\n }\n \n fn main() {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     println!(\"{}\", add_one(&*x));\n     println!(\"{}\", add_one(&*x));\n@@ -586,12 +583,13 @@ fn main() {\n Or as long as it's not a mutable borrow. This will error:\n \n ```{rust,ignore}\n+# use std::boxed::Box;\n fn add_one(x: &mut int) -> int {\n     *x + 1\n }\n \n fn main() {\n-    let x = box 5i;\n+    let x = Box::new(5i);\n \n     println!(\"{}\", add_one(&*x)); // error: cannot borrow immutable dereference\n                                   // of `&`-pointer as mutable\n@@ -612,22 +610,23 @@ Sometimes, you need a recursive data structure. The simplest is known as a\n \n \n ```{rust}\n-#[deriving(Show)]\n+# use std::boxed::Box;\n+#[derive(Show)]\n enum List<T> {\n     Cons(T, Box<List<T>>),\n     Nil,\n }\n \n fn main() {\n-    let list: List<int> = List::Cons(1, box List::Cons(2, box List::Cons(3, box List::Nil)));\n+    let list: List<int> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Cons(3, Box::new(List::Nil))))));\n     println!(\"{:?}\", list);\n }\n ```\n \n This prints:\n \n ```text\n-Cons(1, box Cons(2, box Cons(3, box Nil)))\n+Cons(1, Box(Cons(2, Box(Cons(3, Box(Nil))))))\n ```\n \n The reference to another `List` inside of the `Cons` enum variant must be a box,\n@@ -667,6 +666,7 @@ In many languages with pointers, you'd return a pointer from a function\n so as to avoid copying a large data structure. For example:\n \n ```{rust}\n+# use std::boxed::Box;\n struct BigStruct {\n     one: int,\n     two: int,\n@@ -675,15 +675,15 @@ struct BigStruct {\n }\n \n fn foo(x: Box<BigStruct>) -> Box<BigStruct> {\n-    return box *x;\n+    return Box::new(*x);\n }\n \n fn main() {\n-    let x = box BigStruct {\n+    let x = Box::new(BigStruct {\n         one: 1,\n         two: 2,\n         one_hundred: 100,\n-    };\n+    });\n \n     let y = foo(x);\n }\n@@ -695,6 +695,7 @@ than the hundred `int`s that make up the `BigStruct`.\n This is an antipattern in Rust. Instead, write this:\n \n ```{rust}\n+# use std::boxed::Box;\n struct BigStruct {\n     one: int,\n     two: int,\n@@ -707,13 +708,13 @@ fn foo(x: Box<BigStruct>) -> BigStruct {\n }\n \n fn main() {\n-    let x = box BigStruct {\n+    let x = Box::new(BigStruct {\n         one: 1,\n         two: 2,\n         one_hundred: 100,\n-    };\n+    });\n \n-    let y = box foo(x);\n+    let y = Box::new(foo(x));\n }\n ```\n "}, {"sha": "25ca07ad74fe87047b44e6b48ae337653832dfa6", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -197,6 +197,7 @@ extern crate libc;\n use libc::{c_void, size_t, malloc, free};\n use std::mem;\n use std::ptr;\n+# use std::boxed::Box;\n \n // Define a wrapper around the handle returned by the foreign code.\n // Unique<T> has the same semantics as Box<T>\n@@ -265,7 +266,7 @@ impl<T: Send> Drop for Unique<T> {\n // A comparison between the built-in `Box` and this reimplementation\n fn main() {\n     {\n-        let mut x = box 5i;\n+        let mut x = Box::new(5i);\n         *x = 10;\n     } // `x` is freed here\n \n@@ -653,7 +654,7 @@ sugar for dynamic allocations via `malloc` and `free`:\n \n ```\n #![no_std]\n-#![feature(lang_items)]\n+#![feature(lang_items, box_syntax)]\n \n extern crate libc;\n "}, {"sha": "5ab3063033fc2123a26bbde921c9e41ba826f0e1", "filename": "src/doc/guide.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -3802,18 +3802,19 @@ enum List {             // error: illegal recursive enum type\n \n But the compiler complains that the type is recursive, that is, it could be\n arbitrarily large. To remedy this, Rust provides a fixed-size container called\n-a **box** that can hold any type. You can box up any value with the `box`\n-keyword. Our boxed List gets the type `Box<List>` (more on the notation when we\n+a **Box** that can hold any type. You can box up any value with the `Box::new`\n+function. Our boxed List gets the type `Box<List>` (more on the notation when we\n get to generics):\n \n ```{rust}\n+# use std::boxed::Box;\n enum List {\n     Node(u32, Box<List>),\n     Nil\n }\n \n fn main() {\n-    let list = List::Node(0, box List::Node(1, box List::Nil));\n+    let list = List::Node(0, Box::new(List::Node(1, Box::new(List::Nil))));\n }\n ```\n \n@@ -3826,8 +3827,9 @@ just like regular references. This (rather silly) example dynamically allocates\n an integer `5` and makes `x` a pointer to it:\n \n ```{rust}\n+# use std::boxed::Box;\n {\n-    let x = box 5;\n+    let x = Box::new(5);\n     println!(\"{}\", *x);     // Prints 5\n }\n ```\n@@ -3858,7 +3860,8 @@ Boxes are the sole owner of their contents, so you cannot take a mutable\n reference to them and then use the original box:\n \n ```{rust,ignore}\n-let mut x = box 5;\n+# use std::boxed::Box;\n+let mut x = Box::new(5);\n let y = &mut x;\n \n *x; // you might expect 5, but this is actually an error\n@@ -3879,7 +3882,8 @@ As long as `y` is borrowing the contents, we cannot use `x`. After `y` is\n done borrowing the value, we can use it again. This works fine:\n \n ```{rust}\n-let mut x = box 5;\n+# use std::boxed::Box;\n+let mut x = Box::new(5);\n \n {\n     let y = &mut x;"}, {"sha": "804b6b9f63cf080847ca2c4ba127ab1afb68786e", "filename": "src/doc/reference.md", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -1588,10 +1588,11 @@ pointer values (pointing to a type for which an implementation of the given\n trait is in scope) to pointers to the trait name, used as a type.\n \n ```\n+# use std::boxed::Box;\n # trait Shape { }\n # impl Shape for int { }\n # let mycircle = 0i;\n-let myshape: Box<Shape> = box mycircle as Box<Shape>;\n+let myshape: Box<Shape> = Box::new(mycircle) as Box<Shape>;\n ```\n \n The resulting value is a box containing the value that was cast, along with\n@@ -1646,12 +1647,13 @@ fn radius_times_area<T: Circle>(c: T) -> f64 {\n Likewise, supertrait methods may also be called on trait objects.\n \n ```{.ignore}\n+# use std::boxed::Box;\n # trait Shape { fn area(&self) -> f64; }\n # trait Circle : Shape { fn radius(&self) -> f64; }\n # impl Shape for int { fn area(&self) -> f64 { 0.0 } }\n # impl Circle for int { fn radius(&self) -> f64 { 0.0 } }\n # let mycircle = 0;\n-let mycircle = box mycircle as Box<Circle>;\n+let mycircle = Box::new(mycircle) as Box<Circle>;\n let nonsense = mycircle.radius() * mycircle.area();\n ```\n \n@@ -3376,14 +3378,17 @@ stands for a *single* data field, whereas a wildcard `..` stands for *all* the\n fields of a particular variant. For example:\n \n ```\n+#![feature(box_syntax)]\n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n \n-let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n+fn main() {\n+    let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n \n-match x {\n-    List::Cons(_, box List::Nil) => panic!(\"singleton list\"),\n-    List::Cons(..)               => return,\n-    List::Nil                    => panic!(\"empty list\")\n+    match x {\n+        List::Cons(_, box List::Nil) => panic!(\"singleton list\"),\n+        List::Cons(..)               => return,\n+        List::Nil                    => panic!(\"empty list\")\n+    }\n }\n ```\n \n@@ -3436,25 +3441,28 @@ the inside of the match.\n An example of a `match` expression:\n \n ```\n+#![feature(box_syntax)]\n # fn process_pair(a: int, b: int) { }\n # fn process_ten() { }\n \n enum List<X> { Nil, Cons(X, Box<List<X>>) }\n \n-let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n+fn main() {\n+    let x: List<int> = List::Cons(10, box List::Cons(11, box List::Nil));\n \n-match x {\n-    List::Cons(a, box List::Cons(b, _)) => {\n-        process_pair(a, b);\n-    }\n-    List::Cons(10, _) => {\n-        process_ten();\n-    }\n-    List::Nil => {\n-        return;\n-    }\n-    _ => {\n-        panic!();\n+    match x {\n+        List::Cons(a, box List::Cons(b, _)) => {\n+            process_pair(a, b);\n+        }\n+        List::Cons(10, _) => {\n+            process_ten();\n+        }\n+        List::Nil => {\n+            return;\n+        }\n+        _ => {\n+            panic!();\n+        }\n     }\n }\n ```\n@@ -3468,6 +3476,8 @@ Subpatterns can also be bound to variables by the use of the syntax `variable @\n subpattern`. For example:\n \n ```\n+#![feature(box_syntax)]\n+\n enum List { Nil, Cons(uint, Box<List>) }\n \n fn is_sorted(list: &List) -> bool {\n@@ -3781,12 +3791,13 @@ enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n An example of a *recursive* type and its use:\n \n ```\n+# use std::boxed::Box;\n enum List<T> {\n-  Nil,\n-  Cons(T, Box<List<T>>)\n+    Nil,\n+    Cons(T, Box<List<T>>)\n }\n \n-let a: List<int> = List::Cons(7, box List::Cons(13, box List::Nil));\n+let a: List<int> = List::Cons(7, Box::new(List::Cons(13, Box::new(List::Nil))));\n ```\n \n ### Pointer types\n@@ -3893,6 +3904,7 @@ implementation of `R`, and the pointer value of `E`.\n An example of an object type:\n \n ```\n+# use std::boxed::Box;\n trait Printable {\n   fn stringify(&self) -> String;\n }\n@@ -3906,7 +3918,7 @@ fn print(a: Box<Printable>) {\n }\n \n fn main() {\n-   print(box 10i as Box<Printable>);\n+   print(Box::new(10i) as Box<Printable>);\n }\n ```\n \n@@ -4100,7 +4112,8 @@ the type of a box is `std::owned::Box<T>`.\n An example of a box type and value:\n \n ```\n-let x: Box<int> = box 10;\n+# use std::boxed::Box;\n+let x: Box<int> = Box::new(10);\n ```\n \n Box values exist in 1:1 correspondence with their heap allocation, copying a\n@@ -4109,7 +4122,8 @@ copy of a box to move ownership of the value. After a value has been moved,\n the source location cannot be used unless it is reinitialized.\n \n ```\n-let x: Box<int> = box 10;\n+# use std::boxed::Box;\n+let x: Box<int> = Box::new(10);\n let y = x;\n // attempting to use `x` will result in an error here\n ```"}, {"sha": "97b198164ebd8bfe65223bd0fc3ef8c241c8604f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -33,12 +33,15 @@ use core::ops::{Deref, DerefMut};\n /// The following two examples are equivalent:\n ///\n /// ```rust\n+/// #![feature(box_syntax)]\n /// use std::boxed::HEAP;\n ///\n+/// fn main() {\n /// # struct Bar;\n /// # impl Bar { fn new(_a: int) { } }\n-/// let foo = box(HEAP) Bar::new(2);\n-/// let foo = box Bar::new(2);\n+///     let foo = box(HEAP) Bar::new(2);\n+///     let foo = box Bar::new(2);\n+/// }\n /// ```\n #[lang = \"exchange_heap\"]\n #[experimental = \"may be renamed; uncertain about custom allocator design\"]\n@@ -49,10 +52,9 @@ pub static HEAP: () = ();\n #[stable]\n pub struct Box<T>(Unique<T>);\n \n-#[unstable]\n impl<T> Box<T> {\n     /// Moves `x` into a freshly allocated box on the global exchange heap.\n-    #[unstable]\n+    #[stable]\n     pub fn new(x: T) -> Box<T> {\n         box x\n     }"}, {"sha": "02933c763efe5f56997f72c2fd6feeb91d68fa59", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -125,7 +125,7 @@ const MIN_ALIGN: uint = 8;\n           not(feature = \"external_crate\"),\n           any(target_arch = \"x86\",\n               target_arch = \"x86_64\",\n-              target_arch = \"aarch64\"))]\n+              target_arch = \"aarch64\")))]\n const MIN_ALIGN: uint = 16;\n \n #[cfg(feature = \"external_funcs\")]"}, {"sha": "f208ff9dc0517ee096b6b68625a3dd7337aee96b", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -28,8 +28,10 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(unsafe_destructor)]\n #![feature(unboxed_closures)]\n+#![feature(box_syntax)]\n #![allow(missing_docs)]\n \n extern crate alloc;"}, {"sha": "0ff869d618316f9aac4e881eb7e97c80f614ebea", "filename": "src/libcollections/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcollections%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcollections%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fmacros.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -13,7 +13,7 @@\n #[stable]\n macro_rules! vec {\n     ($($x:expr),*) => ({\n-        let xs: $crate::boxed::Box<[_]> = box [$($x),*];\n+        let xs: $crate::boxed::Box<[_]> = $crate::boxed::Box::new([$($x),*]);\n         $crate::slice::SliceExt::into_vec(xs)\n     });\n     ($($x:expr,)*) => (vec![$($x),*])"}, {"sha": "cb3fbd461cdf6574f0b37db955b053e8c0791fc1", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -245,7 +245,7 @@ pub trait SliceExt {\n     /// ```rust\n     /// let v = &[1i, 2, 3, 4];\n     /// for win in v.windows(2) {\n-    ///     println!(\"{}\", win);\n+    ///     println!(\"{:?}\", win);\n     /// }\n     /// ```\n     #[stable]\n@@ -268,7 +268,7 @@ pub trait SliceExt {\n     /// ```rust\n     /// let v = &[1i, 2, 3, 4, 5];\n     /// for win in v.chunks(2) {\n-    ///     println!(\"{}\", win);\n+    ///     println!(\"{:?}\", win);\n     /// }\n     /// ```\n     #[stable]\n@@ -554,7 +554,7 @@ pub trait SliceExt {\n     /// let mut perms = v.permutations();\n     ///\n     /// for p in perms {\n-    ///   println!(\"{}\", p);\n+    ///   println!(\"{:?}\", p);\n     /// }\n     /// ```\n     ///"}, {"sha": "c8b3616a4042e293b40b033c41cf2be957e9de63", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -42,6 +42,7 @@\n #![experimental]\n #![allow(missing_docs)]\n \n+#[cfg(not(stage0))]\n use marker::Sized;\n \n pub type GlueFn = extern \"Rust\" fn(*const i8);"}, {"sha": "273a51665ce8aaad77befe2df0c668fe39c0e95c", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -2804,7 +2804,7 @@ pub fn iterate<T, F>(seed: T, f: F) -> Iterate<T, F> where\n         T: Clone,\n         F: FnMut(T) -> T,\n     {\n-        let &(ref mut f, ref mut val, ref mut first) = st;\n+        let &mut (ref mut f, ref mut val, ref mut first) = st;\n         if *first {\n             *first = false;\n         } else {"}, {"sha": "af5aba53bf4787bc54717213514b7e8766a2fd75", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -58,6 +58,7 @@\n \n #![no_std]\n #![allow(unknown_features, raw_pointer_derive)]\n+#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(intrinsics, lang_items)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]"}, {"sha": "c1cf3c6213148c35c5306b570fb61a24555e7e96", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -17,5 +17,9 @@\n #![stable]\n #![doc(primitive = \"isize\")]\n \n-#[cfg(target_word_size = \"32\")] int_module! { isize, 32 }\n-#[cfg(target_word_size = \"64\")] int_module! { isize, 64 }\n+#[cfg(any(all(stage0, target_word_size = \"32\"),\n+          all(not(stage0), target_pointer_width = \"32\")))]\n+int_module! { isize, 32 }\n+#[cfg(any(all(stage0, target_word_size = \"64\"),\n+          all(not(stage0), target_pointer_width = \"64\")))]\n+int_module! { isize, 64 }"}, {"sha": "deee67b6d2fd7ba1237ee780d8956a75f06b12d2", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -66,10 +66,11 @@\n //! not (`None`).\n //!\n //! ```\n+//! # use std::boxed::Box;\n //! let optional: Option<Box<int>> = None;\n //! check_optional(&optional);\n //!\n-//! let optional: Option<Box<int>> = Some(box 9000);\n+//! let optional: Option<Box<int>> = Some(Box::new(9000));\n //! check_optional(&optional);\n //!\n //! fn check_optional(optional: &Option<Box<int>>) {\n@@ -148,7 +149,6 @@ use self::Option::*;\n use clone::Clone;\n use cmp::{Eq, Ord};\n use default::Default;\n-use fmt;\n use iter::{ExactSizeIterator};\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator};\n use mem;"}, {"sha": "a17cd410303a56ef06965cd00ae38ac24f10358b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -46,12 +46,13 @@\n //! though unsafely, transformed from one type to the other.\n //!\n //! ```\n+//! # use std::boxed::Box;\n //! use std::mem;\n //!\n //! unsafe {\n-//!     let my_num: Box<int> = box 10;\n+//!     let my_num: Box<int> = Box::new(10);\n //!     let my_num: *const int = mem::transmute(my_num);\n-//!     let my_speed: Box<int> = box 88;\n+//!     let my_speed: Box<int> = Box::new(88);\n //!     let my_speed: *mut int = mem::transmute(my_speed);\n //!\n //!     // By taking ownership of the original `Box<T>` though"}, {"sha": "d48820aee06408541fc81615827d0546876b64c7", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -113,6 +113,5 @@ fn test_custom_state() {\n         ::std::hash::hash::<_, CustomHasher>(t)\n     }\n \n-    let custom = Custom { hash: 5 };\n     assert_eq!(hash(&Custom { hash: 5 }), 5);\n }"}, {"sha": "c12981b7d24847a0458b2aba8531c42bf8498621", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -7,8 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs, unsafe_destructor, slicing_syntax, default_type_params)]\n+\n+#![feature(unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(box_syntax)]\n \n extern crate core;\n extern crate test;"}, {"sha": "485549cc552ac504a080e96bb9b915d831ab5f0d", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::iter::range;\n-\n pub fn op1() -> Result<int, &'static str> { Ok(666) }\n pub fn op2() -> Result<int, &'static str> { Err(\"sadface\") }\n "}, {"sha": "497e339b316c1f0096940329a7e5a732f67b96d7", "filename": "src/librand/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -194,7 +194,7 @@ pub trait Rng : Sized {\n     ///\n     /// let mut rng = thread_rng();\n     /// let x = rng.gen_iter::<uint>().take(10).collect::<Vec<uint>>();\n-    /// println!(\"{}\", x);\n+    /// println!(\"{:?}\", x);\n     /// println!(\"{:?}\", rng.gen_iter::<(f64, bool)>().take(5)\n     ///                     .collect::<Vec<(f64, bool)>>());\n     /// ```\n@@ -291,9 +291,9 @@ pub trait Rng : Sized {\n     /// let mut rng = thread_rng();\n     /// let mut y = [1i, 2, 3];\n     /// rng.shuffle(&mut y);\n-    /// println!(\"{}\", y.as_slice());\n+    /// println!(\"{:?}\", y.as_slice());\n     /// rng.shuffle(&mut y);\n-    /// println!(\"{}\", y.as_slice());\n+    /// println!(\"{:?}\", y.as_slice());\n     /// ```\n     fn shuffle<T>(&mut self, values: &mut [T]) {\n         let mut i = values.len();"}, {"sha": "7d893f3a106cc7180af782f813563b8132ec228a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -1918,7 +1918,7 @@ impl LintPass for HardwiredLints {\n }\n \n /// Forbids using the `#[feature(...)]` attribute\n-#[deriving(Copy)]\n+#[derive(Copy)]\n pub struct UnstableFeatures;\n \n declare_lint!(UNSTABLE_FEATURES, Allow,"}, {"sha": "db4d99fe4940d6669bb06668e2315edc2b77bd72", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -443,7 +443,7 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n     }\n \n     for note in note.into_iter() {\n-        sess.note(note.index(&FullRange));\n+        sess.note(&note[]);\n     }\n \n     for span in def.into_iter() {"}, {"sha": "72b1669843a672d586799a058db132b94207b186", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -116,7 +116,7 @@ pub struct Options {\n     pub unstable_features: UnstableFeatures\n }\n \n-#[deriving(Clone, Copy)]\n+#[derive(Clone, Copy)]\n pub enum UnstableFeatures {\n     /// Hard errors for unstable features are active, as on\n     /// beta/stable channels."}, {"sha": "fcd20158c0a2919fcc296b8773b8dc90d03e159b", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -29,7 +29,8 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n-#![feature(slicing_syntax)]\n+#![allow(unknown_features)]\n+#![feature(slicing_syntax, box_syntax)]\n \n extern crate syntax;\n extern crate serialize;"}, {"sha": "a798ec9aaf76059c00087c6995507597410ac8e6", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -61,7 +61,7 @@ fn remove_message(e: &mut ExpectErrorEmitter, msg: &str, lvl: Level) {\n             e.messages.remove(i);\n         }\n         None => {\n-            panic!(\"Unexpected error: {} Expected: {}\",\n+            panic!(\"Unexpected error: {} Expected: {:?}\",\n                   msg, e.messages);\n         }\n     }"}, {"sha": "92883371ec9db815c0a2448bbd4b5dfd92a85626", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -51,7 +51,7 @@ use std::rc::Rc;\n use llvm::{ValueRef, True, IntEQ, IntNE};\n use back::abi::FAT_PTR_ADDR;\n use middle::subst;\n-use middle::ty::{mod, Ty, UnboxedClosureTyper};\n+use middle::ty::{self, Ty, UnboxedClosureTyper};\n use middle::ty::Disr;\n use syntax::ast;\n use syntax::attr;"}, {"sha": "ac50445be2f9b41adea0427d9c49b003b83bad36", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -1345,7 +1345,7 @@ pub fn with_field_tys<'tcx, R, F>(tcx: &ty::ctxt<'tcx>,\n                                 tcx, enum_id, variant_id);\n                             let fields = struct_fields(tcx, variant_id, substs);\n                             let fields = monomorphize::normalize_associated_type(tcx, &fields);\n-                            op(variant_info.disr_val, &fields.index[])\n+                            op(variant_info.disr_val, &fields[])\n                         }\n                         _ => {\n                             tcx.sess.bug(\"resolve didn't map this expr to a \\"}, {"sha": "9d4aa23960db957fd83c15bc34a3d50cbc547f4e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -68,9 +68,13 @@ fn get_base_type_def_id<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n             Some(t.principal_def_id())\n         }\n \n+        ty_uniq(_) => {\n+            inference_context.tcx.lang_items.owned_box()\n+        }\n+\n         ty_bool | ty_char | ty_int(..) | ty_uint(..) | ty_float(..) |\n         ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_tup(..) |\n-        ty_param(..) | ty_err | ty_open(..) | ty_uniq(_) |\n+        ty_param(..) | ty_err | ty_open(..) |\n         ty_ptr(_) | ty_rptr(_, _) | ty_projection(..) => {\n             None\n         }"}, {"sha": "fbb3c40ee99f659d62a5e93382f3876fd344ab34", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -2454,7 +2454,7 @@ fn lang_struct(cx: &DocContext, did: Option<ast::DefId>,\n }\n \n /// An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`\n-#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable)]\n+#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Show)]\n pub struct TypeBinding {\n     pub name: String,\n     pub ty: Type"}, {"sha": "10698259739996a1943b9dbd7900e984cfa98cf3", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -163,7 +163,7 @@ impl<K, V, S> Encodable for HashMap<K, V, S>\n           S: HashState,\n           <S as HashState>::Hasher: Hasher<Output=u64>\n {\n-    fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {\n+    fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n         e.emit_map(self.len(), |e| {\n             let mut i = 0;\n             for (key, val) in self.iter() {\n@@ -201,7 +201,7 @@ impl<T, S> Encodable for HashSet<T, S>\n           S: HashState,\n           <S as HashState>::Hasher: Hasher<Output=u64>\n {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+    fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n         s.emit_seq(self.len(), |s| {\n             let mut i = 0;\n             for e in self.iter() {"}, {"sha": "96fff64d2214d9e5ac20a388fcb9b4fdac7082ee", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -175,7 +175,7 @@\n //! use std::f64;\n //! use std::num::Float;\n //!\n-//! #[deriving(Show)]\n+//! #[derive(Show)]\n //! struct Vector2D {\n //!     x: int,\n //!     y: int,"}, {"sha": "1c48b20c4447f0eba091a41dfa2b3d0bcda8731d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -1284,7 +1284,7 @@ impl<'a> Writer for &'a mut (Writer+'a) {\n ///     process_input(tee);\n /// }\n ///\n-/// println!(\"input processed: {}\", output);\n+/// println!(\"input processed: {:?}\", output);\n /// # }\n /// ```\n pub struct RefWriter<'a, W:'a> {"}, {"sha": "3fa1efe1ccdfe569d4707209951efc6364761c02", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -403,7 +403,7 @@ pub fn random<T: Rand>() -> T {\n ///\n /// let mut rng = thread_rng();\n /// let sample = sample(&mut rng, range(1i, 100), 5);\n-/// println!(\"{}\", sample);\n+/// println!(\"{:?}\", sample);\n /// ```\n pub fn sample<T, I: Iterator<Item=T>, R: Rng>(rng: &mut R,\n                                          mut iter: I,"}, {"sha": "a7330f7c67c91f772fdc4b3f3dfa860cf498e3d5", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -270,7 +270,7 @@ pub fn readdir(p: &Path) -> IoResult<Vec<Path>> {\n                             return Err(IoError {\n                                 kind: io::InvalidInput,\n                                 desc: \"path was not valid UTF-16\",\n-                                detail: Some(format!(\"path was not valid UTF-16: {}\", filename)),\n+                                detail: Some(format!(\"path was not valid UTF-16: {:?}\", filename)),\n                             })\n                         }, // FIXME #12056: Convert the UCS-2 to invalid utf-8 instead of erroring\n                     }"}, {"sha": "0a9e0aedd3da886090240d604cdfb2726361d1f8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -1730,11 +1730,8 @@ pub struct MacroDef {\n \n #[cfg(test)]\n mod test {\n-    use serialize::json;\n     use serialize;\n-    use codemap::*;\n     use super::*;\n-    use std::fmt;\n \n     // are ASTs encodable?\n     #[test]"}, {"sha": "9ef996ac3179b15e4acb483cd13579b1709b2311", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -1295,7 +1295,7 @@ impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n \n #[cfg(test)]\n mod test {\n-    use super::{pattern_bindings, expand_crate, contains_macro_use};\n+    use super::{pattern_bindings, expand_crate};\n     use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer, ExpansionConfig};\n     use ast;\n     use ast::{Attribute_, AttrOuter, MetaWord, Name};\n@@ -1404,22 +1404,6 @@ mod test {\n         expand_crate(&sess, test_ecfg(), vec!(), vec!(), crate_ast);\n     }\n \n-    // make a MetaWord outer attribute with the given name\n-    fn make_dummy_attr(s: &str) -> ast::Attribute {\n-        Spanned {\n-            span:codemap::DUMMY_SP,\n-            node: Attribute_ {\n-                id: attr::mk_attr_id(),\n-                style: AttrOuter,\n-                value: P(Spanned {\n-                    node: MetaWord(token::intern_and_get_ident(s)),\n-                    span: codemap::DUMMY_SP,\n-                }),\n-                is_sugared_doc: false,\n-            }\n-        }\n-    }\n-\n     fn expand_crate_str(crate_str: String) -> ast::Crate {\n         let ps = parse::new_parse_sess();\n         let crate_ast = string_to_parser(&ps, crate_str).parse_crate_mod();\n@@ -1655,7 +1639,7 @@ mod test {\n                     let varref_idents : Vec<ast::Ident>\n                         = varref.segments.iter().map(|s| s.identifier)\n                         .collect();\n-                    println!(\"varref #{}: {}, resolves to {}\",idx, varref_idents, varref_name);\n+                    println!(\"varref #{}: {:?}, resolves to {}\",idx, varref_idents, varref_name);\n                     let string = token::get_ident(final_varref_ident);\n                     println!(\"varref's first segment's string: \\\"{}\\\"\", string.get());\n                     println!(\"binding #{}: {}, resolves to {}\","}, {"sha": "28b9eaa54aabcbab7f527a6ea8253c98e432eb8a", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -107,19 +107,6 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n         // `#![no_implicit_prelude]` at the crate level.\n         // fold_mod() will insert glob path.\n         if !no_prelude(&krate.attrs[]) {\n-            // only add `use std::prelude::*;` if there wasn't a\n-            // `#![no_implicit_prelude]` at the crate level.\n-            // fold_mod() will insert glob path.\n-            let globs_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n-                                                 attr::mk_list_item(\n-                InternedString::new(\"feature\"),\n-                vec!(\n-                    attr::mk_word_item(InternedString::new(\"globs\")),\n-                )));\n-            // std_inject runs after feature checking so manually mark this attr\n-            attr::mark_used(&globs_attr);\n-            krate.attrs.push(globs_attr);\n-\n             krate.module = self.fold_mod(krate.module);\n         }\n         krate"}, {"sha": "ae9804423bbd65152ddb05144b3b96184c8b411d", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n+#![feature(box_syntax)]\n \n extern crate syntax;\n "}, {"sha": "06051b874939b82570b5613e877ae87186821af0", "filename": "src/test/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n+#![feature(box_syntax)]\n \n extern crate syntax;\n "}, {"sha": "9eeb7ee88571ec50bdd98c0b91e906a99cf26933", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar, quote)]\n+#![feature(box_syntax)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "e01a95d461b21347e29a576213c2c52b2cad3727", "filename": "src/test/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n+#![feature(box_syntax)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "c460c60b02b06053ebd246fe766aab83baaa968e", "filename": "src/test/auxiliary/plugin_crate_outlive_expansion_phase.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_crate_outlive_expansion_phase.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // force-host\n \n #![feature(plugin_registrar)]\n+#![feature(box_syntax)]\n \n extern crate rustc;\n "}, {"sha": "a091e0853f96f7e9bc07d6c8a7ac4a3894de0405", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -103,6 +103,6 @@ fn main() {\n         args.into_iter().map(|x| x.to_string()).collect()\n     };\n \n-    println!(\"{}\", args);\n+    println!(\"{:?}\", args);\n     run(args.as_slice());\n }"}, {"sha": "a9e6cef38aaa615e25445c9fe531a4d25467d121", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -112,6 +112,6 @@ fn main() {\n         args.clone().into_iter().map(|x| x.to_string()).collect()\n     };\n \n-    println!(\"{}\", args);\n+    println!(\"{:?}\", args);\n     run(args.as_slice());\n }"}, {"sha": "03268b401933a4d2ac81383233e8796b20fc44a8", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -13,6 +13,8 @@\n \n // multi tasking k-nucleotide\n \n+#![feature(box_syntax)]\n+\n use std::ascii::{AsciiExt, OwnedAsciiExt};\n use std::cmp::Ordering::{self, Less, Greater, Equal};\n use std::collections::HashMap;\n@@ -62,7 +64,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n \n    let mut buffer = String::new();\n    for &(ref k, v) in pairs_sorted.iter() {\n-       buffer.push_str(format!(\"{} {:0.3}\\n\",\n+       buffer.push_str(format!(\"{:?} {:0.3}\\n\",\n                                k.to_ascii_uppercase(),\n                                v).as_slice());\n    }\n@@ -191,8 +193,8 @@ fn main() {\n            // start processing if this is the one\n            ('>', false) => {\n                match line.as_slice().slice_from(1).find_str(\"THREE\") {\n-                   option::Option::Some(_) => { proc_mode = true; }\n-                   option::Option::None    => { }\n+                   Some(_) => { proc_mode = true; }\n+                   None    => { }\n                }\n            }\n \n@@ -221,6 +223,6 @@ fn main() {\n \n    // now fetch and print result messages\n    for (ii, _sz) in sizes.iter().enumerate() {\n-       println!(\"{}\", from_child[ii].recv().unwrap());\n+       println!(\"{:?}\", from_child[ii].recv().unwrap());\n    }\n }"}, {"sha": "9057372d2cfa04bcd59d411caf1e53bcff088ea0", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -40,6 +40,8 @@\n \n // ignore-android see #10393 #13206\n \n+#![feature(box_syntax)]\n+\n use std::ascii::OwnedAsciiExt;\n use std::iter::repeat;\n use std::slice;"}, {"sha": "074c05923129933845e45c144534c6d0819cd86e", "filename": "src/test/bench/shootout-regex-dna.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -41,6 +41,8 @@\n // ignore-stage1\n // ignore-cross-compile #12102\n \n+#![feature(box_syntax)]\n+\n extern crate regex;\n \n use std::io;"}, {"sha": "786bbdfc8030a6d1722564b8476b67764608ff9e", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-pretty very bad with line comments\n \n+#![feature(box_syntax)]\n #![allow(non_snake_case)]\n \n use std::io::BufferedReader;"}, {"sha": "dc536102d5dfde62699882edff1ba60a24c6b723", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n+#![feature(unsafe_destructor, box_syntax)]\n \n use std::os;\n use std::thread::Thread;"}, {"sha": "5a7788ed855ac16ec00e71ddb0de7e59e8d78a70", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // Test that we detect nested calls that could free pointers evaluated\n // for earlier arguments.\n \n+#![feature(box_syntax)]\n \n fn rewrite(v: &mut Box<uint>) -> uint {\n     *v = box 22;"}, {"sha": "263b7f9576b9f53b792f827cfe67403e09f0d0b1", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // Test that we detect nested calls that could free pointers evaluated\n // for earlier arguments.\n \n+#![feature(box_syntax)]\n \n fn rewrite(v: &mut Box<uint>) -> uint {\n     *v = box 22;"}, {"sha": "84f4e4f8817ca320dbe94837ed014a4f41d22a04", "filename": "src/test/compile-fail/borrowck-borrow-immut-deref-of-box-as-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct A;\n \n impl A {"}, {"sha": "04ad583a2db425b2e09610f21e9570f9f33c0a7b", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n //buggy.rs\n \n+#![feature(box_syntax)]\n+\n extern crate collections;\n use std::collections::HashMap;\n "}, {"sha": "bd22b61fe3b604b377f3621fe97229e0b81b426f", "filename": "src/test/compile-fail/borrowck-box-insensitivity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct A {\n     x: Box<int>,\n     y: int,"}, {"sha": "9aec8de46b6d994151c9c9be9304d5fee5071217", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // Ensure that invoking a closure counts as a unique immutable borrow\n \n #![feature(unboxed_closures)]\n+#![feature(box_syntax)]\n \n type Fn<'a> = Box<FnMut() + 'a>;\n "}, {"sha": "126003b5d824d043a84b1aa54c57ce2fc621fe7e", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n+#![feature(box_syntax)]\n \n fn get(x: &int) -> int {\n     *x"}, {"sha": "e1f557cfab2d7609b1f1c723e95ab0575858cc4a", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -12,6 +12,7 @@\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n+#![feature(box_syntax)]\n \n fn a() {\n     let mut x = 3i;"}, {"sha": "9aa9a50483c664ca5e9506eb92d7c58be2872df1", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -12,6 +12,7 @@\n // cannot also be supplied a borrowed version of that\n // variable's contents. Issue #11192.\n \n+#![feature(box_syntax)]\n \n struct Foo {\n   x: int"}, {"sha": "52761fa348868964f3225a1212b10ebb84ed98f2", "filename": "src/test/compile-fail/borrowck-field-sensitivity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct A { a: int, b: Box<int> }\n \n fn deref_after_move() {"}, {"sha": "bdcbc839c0056672bd42636aebb78afa02172976", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // Issue #16205.\n \n+#![feature(box_syntax)]\n+\n struct Foo {\n     a: [Box<int>; 3],\n }"}, {"sha": "8e46db5eba8bcb3c7072bab11dec757284d8bc3e", "filename": "src/test/compile-fail/borrowck-issue-14498.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,8 @@\n // This tests that we can't modify Box<&mut T> contents while they\n // are borrowed.\n \n+#![feature(box_syntax)]\n+\n struct A { a: int }\n struct B<'a> { a: Box<&'a mut int> }\n "}, {"sha": "fa80bf38cfed9cfab29c4133e06bcd2bbcf3db2e", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let x = Some(box 1i);\n     match x {"}, {"sha": "f531b585ddef8b8602cc44971035e278f6e1a393", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let x = Some(box 1i);\n     match x {"}, {"sha": "8a618dfec1183de46d4ebb77f04a05f7107281ee", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -14,6 +14,7 @@\n // either genuine or would require more advanced changes.  The latter\n // cases are noted.\n \n+#![feature(box_syntax)]\n \n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}"}, {"sha": "954b801024421b18665d0a4759b7bfd7582f4784", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -14,6 +14,7 @@\n // either genuine or would require more advanced changes.  The latter\n // cases are noted.\n \n+#![feature(box_syntax)]\n \n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}"}, {"sha": "d5419b0585111121f22652816b431d8cdf2f43ea", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -14,6 +14,7 @@\n // either genuine or would require more advanced changes.  The latter\n // cases are noted.\n \n+#![feature(box_syntax)]\n \n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}"}, {"sha": "8b39b6ff661b3d7bb706b702d1e1585daa40f6c7", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n \n fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {"}, {"sha": "f588dbab4fa148c4531a9bd60002c2e0dfe1e49b", "filename": "src/test/compile-fail/borrowck-loan-blocks-move.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn take(_v: Box<int>) {\n }"}, {"sha": "e59baa1e37c8c29d06402d69f07995153828b514", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n     f(v);\n }"}, {"sha": "20212762188174fc66a5a9c9adad132dd6a45225", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let bar = box 3;\n     let _g = |&mut:| {"}, {"sha": "4984987c5ca924e28ff1f8325aa320bb9238322d", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n enum Foo {\n     Foo1(Box<u32>, Box<u32>),"}, {"sha": "936092df42e62084f8d2a307c06bb4b8e28e5221", "filename": "src/test/compile-fail/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,8 @@\n // verify that an error is raised when trying to move out of a\n // borrowed path.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let a = box box 2i;\n     let b = &a;"}, {"sha": "35aef1352d1de82729ba96bbc223b932ccb09a46", "filename": "src/test/compile-fail/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn call_f<F:FnOnce() -> int>(f: F) -> int {\n     f()\n }"}, {"sha": "bdf6fe1f21d2c6858e75b7a719017480d42bf02e", "filename": "src/test/compile-fail/borrowck-move-subcomponent.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,7 @@\n // Tests that the borrow checker checks all components of a path when moving\n // out.\n \n+#![feature(box_syntax)]\n \n struct S {\n   x : Box<int>"}, {"sha": "e90d25c781b42821eb51a2a5bb814aafcba5bfdf", "filename": "src/test/compile-fail/borrowck-multiple-captures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n use std::thread::Thread;\n \n fn borrow<T>(_: &T) { }"}, {"sha": "6985d203fb163cc554940e8646d4d56ffeebdb83", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n struct node_ {\n     a: Box<cycle>"}, {"sha": "5e6d235574e69e1e68130086ad9f497943b6977b", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n use std::ops::Index;\n \n struct MyVec<T> {"}, {"sha": "b0e8b2a523bd885e2a4d968835097f7d1f6d7e3e", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn borrow(_v: &int) {}\n "}, {"sha": "45813c45f03658cfa6d99f1a10c07f055eee6118", "filename": "src/test/compile-fail/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct A { a: int, b: int }\n \n impl Copy for A {}"}, {"sha": "c13faacfee44341a13efef42194b633125f816d4", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // Verifies all possible restrictions for statics values.\n \n+#![feature(box_syntax)]\n+\n use std::marker;\n \n struct WithDtor;"}, {"sha": "25abd904d21ccb4a3dad5151b5fc00e87122de4c", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n trait noisy {\n   fn speak(&self);"}, {"sha": "ff96ea93184e635c6e7c920d076fa07a1b984e89", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,8 @@\n // Test that cross-borrowing (implicitly converting from `Box<T>` to `&T`) is\n // forbidden when `T` is a trait.\n \n+#![feature(box_syntax)]\n+\n struct Foo;\n trait Trait {}\n impl Trait for Foo {}"}, {"sha": "6c40ca558de1134c5c0532d021f8126d0bbf1e72", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // Forbid assignment into a dynamically sized type.\n \n+#![feature(box_syntax)]\n+\n struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,"}, {"sha": "78f70b9add0516cd0934a1ade242b4badd130fb2", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // Forbid assignment into a dynamically sized type.\n \n+#![feature(box_syntax)]\n+\n struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,"}, {"sha": "74e952364cd4523dd8fed3f751eda3bfa88c3671", "filename": "src/test/compile-fail/dst-rvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // Check that dynamically sized rvalues are forbidden\n \n+#![feature(box_syntax)]\n+\n pub fn main() {\n     let _x: Box<str> = box *\"hello world\";\n     //~^ ERROR E0161"}, {"sha": "723192952f2ee5b46e9c1e5f81449c226a172721", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(unboxed_closures)]\n+#![feature(box_syntax)]\n \n fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n "}, {"sha": "3635c4dbb0263580981e3d4a6b6f4b0120736587", "filename": "src/test/compile-fail/infinite-autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern: reached the recursion limit while auto-dereferencing\n \n+#![feature(box_syntax)]\n+\n use std::ops::Deref;\n \n struct Foo;"}, {"sha": "453746ffd6af1155ee034aff7b836d7e818434f6", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn test<'x>(x: &'x int) {\n     drop::<Box<for<'z> FnMut(&'z int) -> &'z int>>(box |z| {\n         x"}, {"sha": "11c577f9dc38ddcf80d88aa3b51401ae06c48854", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let x = box 1i;\n     let f = move|:| {"}, {"sha": "3784d3d6437ae87a024f69c151811efa401649cc", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct Foo {\n     x: int\n }"}, {"sha": "f0089b0ae5b348f91e0643fa64a3d11c7363d505", "filename": "src/test/compile-fail/issue-11515.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct Test<'s> {\n     func: Box<FnMut()+'static>\n }"}, {"sha": "560cbe1b8a87f2240a89f43056afc2d54dd501f2", "filename": "src/test/compile-fail/issue-11844.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11844.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let a = Some(box 1);\n     match a {"}, {"sha": "71e4598d635606ec401a08c6353a70d7a903614e", "filename": "src/test/compile-fail/issue-11925.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let r = {\n         let x = box 42i;"}, {"sha": "2d87bdaf5242e3a6a6f4a4ac09135a2d779815ab", "filename": "src/test/compile-fail/issue-12127.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12127.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn do_it(x: &int) { }\n \n fn main() {"}, {"sha": "3187465530292d1ec67ce172fcd2b0390767855a", "filename": "src/test/compile-fail/issue-12470.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12470.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n trait X {\n     fn get_i(&self) -> int;\n }"}, {"sha": "18e4ccc331196f59483622aa78ef34325db3c367", "filename": "src/test/compile-fail/issue-14915.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let x: Box<isize> = box 0;\n "}, {"sha": "ba993259216e5a979ec184a16ac731b5a5afa8df", "filename": "src/test/compile-fail/issue-17263.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct Foo { a: int, b: int }\n \n fn main() {"}, {"sha": "a28162159a510a68fd1baf10ae8b4f0f3a38a6c4", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let _foo = &[1u, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`"}, {"sha": "d3678f7d87fdbd9ca085d551bf48da9f2176b36b", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,8 @@\n // Test that moves of unsized values within closures are caught\n // and rejected.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     (|&:| box *[0us].as_slice())();\n     //~^ ERROR cannot move out of dereference"}, {"sha": "e2dbad56f84f29c6755a9a4bde131c457d9a940c", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n // error-pattern: too big for the current architecture\n \n+#![feature(box_syntax)]\n+\n #[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n fn main() {\n     let n = 0u;"}, {"sha": "657ef85233d5f278ec43e91efe8259f5305ab3cd", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n use std::cell::RefCell;\n \n fn main() {"}, {"sha": "06939d8f35801dbf86ead216eaeebeee2a86a504", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n mod my_mod {\n     pub struct MyStruct {"}, {"sha": "f35332a2f039e152f25a648a13e0a966f8331f5a", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(unboxed_closures)]\n+#![feature(box_syntax)]\n \n fn id<T>(t: T) -> T { t }\n "}, {"sha": "72074d64edc3d0dbb5875e6d77e7071c8ba8f888", "filename": "src/test/compile-fail/issue-5439.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5439.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n struct Foo {\n     foo: int,"}, {"sha": "cf98f1572e56049aaa48ae32626acb14e482228a", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n trait Foo {}\n impl Foo for u8 {}\n "}, {"sha": "27230989f63bc3c4cd993525fc61bdcbc3e63b7c", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -12,6 +12,7 @@\n // transferring ownership of the owned box before invoking the stack\n // closure results in a crash.\n \n+#![feature(box_syntax)]\n \n fn twice(x: Box<uint>) -> uint {\n      *x * 2"}, {"sha": "d246e4e54d017501a122ba54f39f523e868a99d3", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n use std::cell::RefCell;\n use std::rc::Rc;\n "}, {"sha": "b4df38a6aac038847db004524e80666913603e8f", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n use std::cell::RefCell;\n "}, {"sha": "e188fa9b813fe8d3eb95fce0f3a2ca542cc0f5b1", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n trait Foo {\n }\n "}, {"sha": "34e77353463d1102c3ad380c071e184d37c09a46", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,8 @@\n // Issue #14061: tests the interaction between generic implementation\n // parameter bounds and trait objects.\n \n+#![feature(box_syntax)]\n+\n struct S<T>;\n \n trait Gettable<T> {}"}, {"sha": "192e358283fa736d7854b3b97845399559438e44", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // Test that Copy bounds inherited by trait are checked.\n \n+#![feature(box_syntax)]\n+\n use std::any::Any;\n \n trait Foo : Copy {"}, {"sha": "1702cefec6d3adee56cd63b2134c802e6be968e2", "filename": "src/test/compile-fail/lint-owned-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(dead_code)]\n #![forbid(box_pointers)]\n-\n+#![feature(box_syntax)]\n \n struct Foo {\n     x: Box<int> //~ ERROR type uses owned"}, {"sha": "08a523fb8ffb2211b4b223049c8e809ac13d577c", "filename": "src/test/compile-fail/liveness-move-call-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-move-call-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-move-call-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-call-arg.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn take(_x: Box<int>) {}\n "}, {"sha": "b2142258fb01d5e330b1444c1e8653914244f288", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let y: Box<int> = box 42;\n     let mut x: Box<int>;"}, {"sha": "549cf523d0329eb5feeb3024b699d8fa461d484d", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let y: Box<int> = box 42;\n     let mut x: Box<int>;"}, {"sha": "e1cd12989cacda1cef3478a16cb28932acabd300", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn main() {\n     let x = box 5i;\n     let y = x;"}, {"sha": "ce1b372a4c11ea901bc39ac9d0838d77d5703bc4", "filename": "src/test/compile-fail/macros-nonfatal-errors.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -22,9 +22,6 @@ enum CantDeriveThose {}\n fn main() {\n     doesnt_exist!(); //~ ERROR\n \n-    bytes!(invalid); //~ ERROR non-literal in bytes!\n-    //~^ WARN `bytes!` is deprecated\n-\n     asm!(invalid); //~ ERROR\n \n     concat_idents!(\"not\", \"idents\"); //~ ERROR"}, {"sha": "ba2205f5868d4ccb22f09b8addaba1e9845110b6", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n extern crate collections;\n \n use std::collections::HashMap;"}, {"sha": "78b6736c1c86d3c1557ee25449e7634151c6ea5d", "filename": "src/test/compile-fail/move-out-of-tuple-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct Foo(Box<int>);\n \n fn main() {"}, {"sha": "0f5e012ef19504c503493e1c324e472284c09aa0", "filename": "src/test/compile-fail/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n use std::uint;\n \n fn test(_x: Box<uint>) {}"}, {"sha": "f410541f0b7e93a15eefae799cf4e74a71771e62", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -12,6 +12,7 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct R<'a> {"}, {"sha": "397b22c486e776dd19875c7d47f234f6c9a74615", "filename": "src/test/compile-fail/moves-based-on-type-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn dup(x: Box<int>) -> Box<(Box<int>,Box<int>)> { box() (x, x) } //~ ERROR use of moved value\n fn main() {"}, {"sha": "6c351f887132d378e77e81064fadc7b21090237d", "filename": "src/test/compile-fail/moves-sru-moved-field.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-sru-moved-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmoves-sru-moved-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-sru-moved-field.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n type Noncopyable = Box<int>;\n "}, {"sha": "90bc0019531b3e8cef6acec550775d046e6d3b79", "filename": "src/test/compile-fail/mut-cross-borrowing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn f(_: &mut int) {}\n \n fn main() {"}, {"sha": "bfabcff511686cebca49b56f1081a9520c614f05", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn main() {\n     let f;"}, {"sha": "417bd9b57ee0a65d331bc6fc1520f14861f1abe9", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn main() {\n     let f;"}, {"sha": "e4521873a61fdc5c7bd99c5a5f502d5f2ea5de76", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -11,6 +11,8 @@\n // Test that attempts to implicitly coerce a value into an\n // object respect the lifetime bound on the object type.\n \n+#![feature(box_syntax)]\n+\n trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n "}, {"sha": "8a03f36972dd187f96a7df753aa1562f7a7ead57", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n trait X {}\n \n trait Iter {"}, {"sha": "675f86b58f4e84d73f8f6fc94df93a94bbbd4c9b", "filename": "src/test/compile-fail/regions-close-object-into-object.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n trait A<T> {}\n struct B<'a, T>(&'a (A<T>+'a));"}, {"sha": "e17786e6a5112f9605d5046f88f97f25e22d31db", "filename": "src/test/compile-fail/regions-close-over-borrowed-ref-in-obj.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n trait Foo { }\n \n impl<'a> Foo for &'a int { }"}, {"sha": "985ae6116f0061175c748518d5a1b08df12fdf26", "filename": "src/test/compile-fail/regions-close-over-type-parameter-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-1.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n // Test for what happens when a type parameter `A` is closed over into\n // an object. This should yield errors unless `A` (and the object)\n // both have suitable bounds."}, {"sha": "85ff336b4cbdac7c6f63e16e9b4ceaee138c1710", "filename": "src/test/compile-fail/regions-close-over-type-parameter-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n // Test for what happens when a type parameter `A` is closed over into\n // an object. This should yield errors unless `A` (and the object)\n // both have suitable bounds."}, {"sha": "2aa77b2e53d717a4998229ebc87d0ba974316696", "filename": "src/test/compile-fail/regions-close-over-type-parameter-multiple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-multiple.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n // Various tests where we over type parameters with multiple lifetime\n // bounds.\n "}, {"sha": "74b36958c92f1166790972f6d80f7d7a0b6b6814", "filename": "src/test/compile-fail/regions-close-param-into-object.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n trait X {}\n "}, {"sha": "e8054779774b6c924b3afb0606d39aa9fb45e5d5", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x int) {"}, {"sha": "b849ddf7b820103f6e0d2dff1b141cb286729d79", "filename": "src/test/compile-fail/regions-proc-bound-capture.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n fn borrowed_proc<'a>(x: &'a int) -> Box<FnMut()->(int) + 'a> {\n     // This is legal, because the region bound on `proc`\n     // states that it captures `x`."}, {"sha": "12f5f2954995fd15d7b9550089fe050d4b24b759", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n struct closure_box<'a> {"}, {"sha": "32d89607e4b3ec3533496b06622217bc77e85f70", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n struct ctxt { v: uint }\n "}, {"sha": "22e43c0bf896595dbfbbccc8cff815e093250ca9", "filename": "src/test/compile-fail/regions-trait-variance.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n // Issue #12470.\n \n trait X {"}, {"sha": "1a3d7821159c3fc5874697724a42866f31e72deb", "filename": "src/test/compile-fail/shadowed-type-parameter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // Test that shadowed lifetimes generate an error.\n \n+#![feature(box_syntax)]\n+\n struct Foo<T>;\n \n impl<T> Foo<T> {\n@@ -22,7 +24,7 @@ impl<T> Foo<T> {\n     }\n }\n \n-trait<T> Bar<T> {\n+trait Bar<T> {\n     fn shadow_in_required<T>(&self);\n     //~^ ERROR type parameter `T` shadows another type parameter\n "}, {"sha": "fd05f05502e9cafba7a17039d548afb60f7d8cda", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n static mut a: Box<int> = box 3;\n //~^ ERROR statics are not allowed to have custom pointers"}, {"sha": "42f9d24bc52bb190486662f9fa0196b0977b6418", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n fn f<T:'static>(_: T) {}\n "}, {"sha": "d03696cbbbcc482f92eaecace20738dd0c464367", "filename": "src/test/compile-fail/syntax-extension-bytes-non-ascii-char-literal.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let vec = bytes!('\u03bb'); //~ ERROR non-ascii char literal in bytes!\n-    //~^ WARN `bytes!` is deprecated\n-}"}, {"sha": "8e7c6147758ca9354e544d1879e1182943b5279c", "filename": "src/test/compile-fail/syntax-extension-bytes-too-large-integer-literal.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let vec = bytes!(1024); //~ ERROR too large integer literal in bytes!\n-    //~^ WARN `bytes!` is deprecated\n-}"}, {"sha": "1a9aa3753eec7747827309818eaa9894d5236a27", "filename": "src/test/compile-fail/syntax-extension-bytes-too-large-u8-literal.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let vec = bytes!(1024u8); //~ ERROR too large u8 literal in bytes!\n-    //~^ WARN `bytes!` is deprecated\n-}"}, {"sha": "c2d4973594371e326bae074757d8482345971b03", "filename": "src/test/compile-fail/syntax-extension-bytes-too-small-integer-literal.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let vec = bytes!(-1024); //~ ERROR non-literal in bytes\n-    //~^ WARN `bytes!` is deprecated\n-}"}, {"sha": "ac33ffb60e294f11ba9df9373f58e980fd045125", "filename": "src/test/compile-fail/syntax-extension-bytes-too-small-u8-literal.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let vec = bytes!(-1024u8); //~ ERROR non-literal in bytes\n-    //~^ WARN `bytes!` is deprecated\n-}"}, {"sha": "f6b3659354c5ba4ef231e571588ca0a57d2b679c", "filename": "src/test/compile-fail/syntax-extension-bytes-unsupported-literal.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let vec = bytes!(45f64); //~ ERROR unsupported literal in bytes!\n-    //~^ WARN `bytes!` is deprecated\n-}"}, {"sha": "1ddfc5b7ccd487d9369e73b06df65189f4fc6292", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n struct Struct {\n     person: &'static str"}, {"sha": "9c78d7ea2439aa782d689793c93dde9dd52c643b", "filename": "src/test/compile-fail/trait-coercion-generic-regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n struct Struct {\n     person: &'static str"}, {"sha": "f66034e395c8828921331f9dc0738820f600d5ce", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n impl bar for int { fn dup(&self) -> int { *self } fn blah<X>(&self) {} }"}, {"sha": "5ba660495f705729afef7c24c15da9d5ec6214a5", "filename": "src/test/compile-fail/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct Foo {\n     f: int,\n }"}, {"sha": "4d6f04da026611b134e9f64e3fdb7930b47bb86f", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n #![feature(unboxed_closures)]\n \n // Tests that we can't move out of an unboxed closure environment"}, {"sha": "2dde11ada28550dde36abcf8960192f9ce967396", "filename": "src/test/compile-fail/unique-object-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n trait Foo {\n     fn f(&self);"}, {"sha": "04eaa3d7ae0679aabfa0f5d1112ea87fc2e9f89e", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n #[derive(Show)]\n struct r {\n   b: bool,"}, {"sha": "ae354729b920238299a52af3c749150eb238a5aa", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n use std::rc::Rc;\n "}, {"sha": "b558989304f642738f477c1765be3cfd818bd53a", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(unsafe_destructor)]\n \n+#![feature(box_syntax)]\n+\n use std::cell::Cell;\n \n #[derive(Show)]"}, {"sha": "d8a82d8fbf0467863cf201616693610afce9c8db", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-tidy-linelength\n \n+#![feature(box_syntax)]\n+\n use std::fmt;\n \n struct Number {"}, {"sha": "ce0f2808e33feac3270e8b2eec28043150998ea4", "filename": "src/test/compile-fail/use-after-move-self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n \n struct S {\n     x: Box<int>,"}, {"sha": "53d2befc49d063736d2d7699b271eab0ada9f632", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -64,6 +64,7 @@\n // lldb-check:[...]$6 = 26.5\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct SomeStruct {"}, {"sha": "c7e5987fbcfa2532c359b6a2bb6bc47b6d18a62a", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -42,6 +42,7 @@\n \n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n fn main() {"}, {"sha": "fc186a0b5b21f3a905117b3fa7574a24a880473d", "filename": "src/test/debuginfo/borrowed-unique-basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -112,6 +112,7 @@\n // lldb-check:[...]$12 = 3.5\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n fn main() {"}, {"sha": "0439e3dc34d4941071ed92d97bb029d40ff9a20b", "filename": "src/test/debuginfo/box.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbox.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -32,6 +32,7 @@\n // lldb-check:[...]$1 = (2, 3.5)\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n fn main() {"}, {"sha": "6397efa0a96a3a4f0b7765283d07fd8cdf2e2fef", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -35,6 +35,7 @@\n // lldb-check:[...]$1 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct StructWithSomePadding {"}, {"sha": "f8b125694002d7f065b8829456f999f0821e119d", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -46,6 +46,7 @@\n // lldb-check:[...]$3 = 110\n // lldb-command:continue\n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {"}, {"sha": "73289c56befc4933a44f9a8edc39994747119b6e", "filename": "src/test/debuginfo/destructured-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-fn-argument.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -311,6 +311,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n use self::Univariant::Unit;"}, {"sha": "103bdc0355084ff0a12df5a1406cde950a88cdc5", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -153,6 +153,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct {"}, {"sha": "1fd598e18c16d65238fcfe2c91b14c871884faf6", "filename": "src/test/debuginfo/destructured-local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-local.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -244,6 +244,7 @@\n \n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n use self::Univariant::Unit;"}, {"sha": "66cd73622ffb454865551685e13334276bd4aacb", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -112,6 +112,7 @@\n // lldb-check:[...]$14 = -10.5\n // lldb-command:continue\n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct<T> {"}, {"sha": "732e1d5c50029260b7905973294c57d22ad74c91", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -113,6 +113,7 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n enum Enum {"}, {"sha": "c1785951e2348852373da508a8d07d307a1bf0d5", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -113,6 +113,7 @@\n // lldb-command:continue\n \n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct<T> {"}, {"sha": "d88a32b8475a3bcdb06b7691cf23a2413e71e816", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -113,6 +113,7 @@\n // lldb-command:continue\n \n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct {"}, {"sha": "5622d17225ba8e5f7db63ed202861fa9a6a091ed", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -113,6 +113,7 @@\n // lldb-command:continue\n \n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct {"}, {"sha": "02f7808221a85e9449732879db1e65019d658b3e", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -113,6 +113,7 @@\n // lldb-command:continue\n \n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct TupleStruct(int, f64);"}, {"sha": "2cbe9f43789d92a2f9627d83eb8b3031e024cfe2", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -69,6 +69,7 @@\n // gdb-command:continue\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n use self::Opt::{Empty, Val};"}, {"sha": "a1074e490f7eb9f9e8b28d41cc4c25f74441213c", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -112,6 +112,7 @@\n // lldb-check:[...]$14 = -10\n // lldb-command:continue\n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct {"}, {"sha": "f0da6e26870bd021ce6b60dc7cb4537c8bcd3539", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -112,6 +112,7 @@\n // lldb-check:[...]$14 = -10.5\n // lldb-command:continue\n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct {"}, {"sha": "b95190f875a605cd477f589f21c166c530522f3a", "filename": "src/test/debuginfo/trait-pointers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-pointers.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -16,6 +16,7 @@\n // lldb-command:run\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n trait Trait {"}, {"sha": "156e5f12ad5e8684c8490da403f43db8c27d793f", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -173,6 +173,7 @@\n // gdb-command:whatis closure2\n // gdb-check:type = struct (closure, usize)\n \n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n use self::Enum1::{Variant1_1, Variant1_2};"}, {"sha": "08622b2dca8fbe6fc43fe15d3732cece79934f6a", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -42,6 +42,7 @@\n // lldb-check:[...]$2 = TheOnlyCase(123234)\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since"}, {"sha": "d7831c983c05014781a8603c68ad91cab3e60d69", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -79,6 +79,7 @@\n // lldb-command:continue\n \n #![allow(unused_variables)]\n+#![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct {"}, {"sha": "30a07ea46ddd3bcca1a7a46e478d54c34a9c28e5", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -41,7 +41,7 @@\n // lldb-check:[...]$2 = 5\n \n #![allow(unused_variables)]\n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n struct Struct {"}, {"sha": "9daf6abba11436da90195a4c37f834dd5f548672", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -70,7 +70,7 @@\n // lldb-command:print *owned\n // lldb-check:[...]$9 = 6\n \n-#![feature(unboxed_closures)]\n+#![feature(unboxed_closures, box_syntax)]\n #![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n "}, {"sha": "c72d685b311c65c0bef8d2db196e5e40d4e022a5", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n struct Foo {\n     f: int\n }"}, {"sha": "195055f12d1e4010aa7a6fb147a60b8f170a1036", "filename": "src/test/run-pass-valgrind/cleanup-auto-borrow-obj.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcleanup-auto-borrow-obj.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -13,6 +13,7 @@\n // schedule cleanups when auto borrowing trait objects.\n // This program should be valgrind clean.\n \n+#![feature(box_syntax)]\n \n static mut DROP_RAN: bool = false;\n "}, {"sha": "47e2a18a9992a95192f3de4d5672fc535cbdd599", "filename": "src/test/run-pass-valgrind/dst-dtor-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n static mut DROP_RAN: bool = false;\n \n struct Foo;"}, {"sha": "2c7b89d680a3d92275c096f97dd55f35eb6de962", "filename": "src/test/run-pass-valgrind/dst-dtor-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(box_syntax)]\n+\n static mut DROP_RAN: int = 0;\n \n struct Foo;"}, {"sha": "168218e1b1e274698d2aeefd9b70aefc9c62844b", "filename": "src/test/run-pass/box-new.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass%2Fbox-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass%2Fbox-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-new.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -9,6 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!(foo); //~ ERROR non-literal in bytes!\n-    //~^ WARN `bytes!` is deprecated\n+    let _a = Box::new(1);\n }", "previous_filename": "src/test/compile-fail/syntax-extension-bytes-non-literal.rs"}, {"sha": "2ce8c40c77183e847e9d32002c76f093afba0e25", "filename": "src/test/run-pass/bytes-macro-static.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Frun-pass%2Fbytes-macro-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Frun-pass%2Fbytes-macro-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbytes-macro-static.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-static FOO: &'static [u8] = bytes!(\"hello, world\");\n-\n-pub fn main() {\n-    let b: &'static [u8] = match true {\n-        true => bytes!(\"test\"),\n-        false => unreachable!()\n-    };\n-\n-    assert_eq!(b, \"test\".as_bytes());\n-    assert_eq!(FOO, \"hello, world\".as_bytes());\n-}"}, {"sha": "7e508d91c877de0f60401616ea79404ab2b8c8f0", "filename": "src/test/run-pass/cfg_attr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg_attr.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -14,37 +14,37 @@ use std::fmt::Show;\n \n struct NotShowable;\n \n-#[cfg_attr(set1, deriving(Show))]\n+#[cfg_attr(set1, derive(Show))]\n struct Set1;\n \n-#[cfg_attr(notset, deriving(Show))]\n+#[cfg_attr(notset, derive(Show))]\n struct Notset(NotShowable);\n \n-#[cfg_attr(not(notset), deriving(Show))]\n+#[cfg_attr(not(notset), derive(Show))]\n struct NotNotset;\n \n-#[cfg_attr(not(set1), deriving(Show))]\n+#[cfg_attr(not(set1), derive(Show))]\n struct NotSet1(NotShowable);\n \n-#[cfg_attr(all(set1, set2), deriving(Show))]\n+#[cfg_attr(all(set1, set2), derive(Show))]\n struct AllSet1Set2;\n \n-#[cfg_attr(all(set1, notset), deriving(Show))]\n+#[cfg_attr(all(set1, notset), derive(Show))]\n struct AllSet1Notset(NotShowable);\n \n-#[cfg_attr(any(set1, notset), deriving(Show))]\n+#[cfg_attr(any(set1, notset), derive(Show))]\n struct AnySet1Notset;\n \n-#[cfg_attr(any(notset, notset2), deriving(Show))]\n+#[cfg_attr(any(notset, notset2), derive(Show))]\n struct AnyNotsetNotset2(NotShowable);\n \n-#[cfg_attr(all(not(notset), any(set1, notset)), deriving(Show))]\n+#[cfg_attr(all(not(notset), any(set1, notset)), derive(Show))]\n struct Complex;\n \n-#[cfg_attr(any(notset, not(any(set1, notset))), deriving(Show))]\n+#[cfg_attr(any(notset, not(any(set1, notset))), derive(Show))]\n struct ComplexNot(NotShowable);\n \n-#[cfg_attr(any(target_endian = \"little\", target_endian = \"big\"), deriving(Show))]\n+#[cfg_attr(any(target_endian = \"little\", target_endian = \"big\"), derive(Show))]\n struct KeyValue;\n \n fn is_show<T: Show>() {}"}, {"sha": "d204f808e4471d9fdb1db81dacde7979c2000518", "filename": "src/test/run-pass/ext-expand-inner-exprs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc48b47a8c67eb28e7b89a6c0810dc9446377f7/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs?ref=0dc48b47a8c67eb28e7b89a6c0810dc9446377f7", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static FOO : &'static [u8] = bytes!(concat!(concat!(\"hel\", \"lo\"), \"world\"));\n+static FOO : &'static str = concat!(concat!(\"hel\", \"lo\"), \"world\");\n \n pub fn main() {\n-    assert_eq!(FOO, \"helloworld\".as_bytes());\n+    assert_eq!(FOO, \"helloworld\");\n }"}, {"sha": "1f92677fb6f895e61de0f9478b82a1d78397f613", "filename": "src/test/run-pass/syntax-extension-bytes.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-static static_vec: &'static [u8] = bytes!(\"abc\", 0xFF, '!');\n-\n-pub fn main() {\n-    let vec: &'static [u8] = bytes!(\"abc\");\n-    let expected: &[u8] = &[97_u8, 98_u8, 99_u8];\n-    assert_eq!(vec, expected);\n-\n-    let vec: &'static [u8] = bytes!(\"null\", 0);\n-    let expected: &[u8] = &[110_u8, 117_u8, 108_u8, 108_u8, 0_u8];\n-    assert_eq!(vec, expected);\n-\n-    let vec: &'static [u8] = bytes!(' ', \" \", 32, 32u8);\n-    let expected: &[u8] = &[32_u8, 32_u8, 32_u8, 32_u8];\n-    assert_eq!(vec, expected);\n-\n-    let expected: &[u8] = &[97_u8, 98_u8, 99_u8, 255_u8, 33_u8];\n-    assert_eq!(static_vec, expected);\n-}"}]}