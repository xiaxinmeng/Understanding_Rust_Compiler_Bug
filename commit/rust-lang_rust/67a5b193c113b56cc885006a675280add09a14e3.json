{"sha": "67a5b193c113b56cc885006a675280add09a14e3", "node_id": "C_kwDOAAsO6NoAKDY3YTViMTkzYzExM2I1NmNjODg1MDA2YTY3NTI4MGFkZDA5YTE0ZTM", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-05T23:30:37Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-11-19T00:10:26Z"}, "message": "Check for duplicate attributes.", "tree": {"sha": "96e300821fe92c7b0e8d212e7597a8f149840782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e300821fe92c7b0e8d212e7597a8f149840782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a5b193c113b56cc885006a675280add09a14e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a5b193c113b56cc885006a675280add09a14e3", "html_url": "https://github.com/rust-lang/rust/commit/67a5b193c113b56cc885006a675280add09a14e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a5b193c113b56cc885006a675280add09a14e3/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc946fcd326f7d85d4af096efdc73538622568e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc946fcd326f7d85d4af096efdc73538622568e9", "html_url": "https://github.com/rust-lang/rust/commit/cc946fcd326f7d85d4af096efdc73538622568e9"}], "stats": {"total": 964, "additions": 791, "deletions": 173}, "files": [{"sha": "f25b2d8f566c08eede2513d580e8bcbb32b4e7d7", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 272, "deletions": 155, "changes": 427, "blob_url": "https://github.com/rust-lang/rust/blob/67a5b193c113b56cc885006a675280add09a14e3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a5b193c113b56cc885006a675280add09a14e3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=67a5b193c113b56cc885006a675280add09a14e3", "patch": "@@ -1,5 +1,6 @@\n //! Built-in attributes and `cfg` flag gating.\n \n+use AttributeDuplicates::*;\n use AttributeGate::*;\n use AttributeType::*;\n \n@@ -88,11 +89,66 @@ impl AttributeGate {\n /// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n #[derive(Clone, Copy, Default)]\n pub struct AttributeTemplate {\n+    /// If `true`, the attribute is allowed to be a bare word like `#[test]`.\n     pub word: bool,\n+    /// If `Some`, the attribute is allowed to take a list of items like `#[allow(..)]`.\n     pub list: Option<&'static str>,\n+    /// If `Some`, the attribute is allowed to be a name/value pair where the\n+    /// value is a string, like `#[must_use = \"reason\"]`.\n     pub name_value_str: Option<&'static str>,\n }\n \n+/// How to handle multiple duplicate attributes on the same item.\n+#[derive(Clone, Copy, Default)]\n+pub enum AttributeDuplicates {\n+    /// Duplicates of this attribute are allowed.\n+    ///\n+    /// This should only be used with attributes where duplicates have semantic\n+    /// meaning, or some kind of \"additive\" behavior. For example, `#[warn(..)]`\n+    /// can be specified multiple times, and it combines all the entries. Or use\n+    /// this if there is validation done elsewhere.\n+    #[default]\n+    DuplicatesOk,\n+    /// Duplicates after the first attribute will be an unused_attribute warning.\n+    ///\n+    /// This is usually used for \"word\" attributes, where they are used as a\n+    /// boolean marker, like `#[used]`. It is not necessarily wrong that there\n+    /// are duplicates, but the others should probably be removed.\n+    WarnFollowing,\n+    /// Same as `WarnFollowing`, but only issues warnings for word-style attributes.\n+    ///\n+    /// This is only for special cases, for example multiple `#[macro_use]` can\n+    /// be warned, but multiple `#[macro_use(...)]` should not because the list\n+    /// form has different meaning from the word form.\n+    WarnFollowingWordOnly,\n+    /// Duplicates after the first attribute will be an error.\n+    ///\n+    /// This should be used where duplicates would be ignored, but carry extra\n+    /// meaning that could cause confusion. For example, `#[stable(since=\"1.0\")]\n+    /// #[stable(since=\"2.0\")]`, which version should be used for `stable`?\n+    ErrorFollowing,\n+    /// Duplicates preceding the last instance of the attribute will be an error.\n+    ///\n+    /// This is the same as `ErrorFollowing`, except the last attribute is the\n+    /// one that is \"used\". This is typically used in cases like codegen\n+    /// attributes which usually only honor the last attribute.\n+    ErrorPreceding,\n+    /// Duplicates after the first attribute will be an unused_attribute warning\n+    /// with a note that this will be an error in the future.\n+    ///\n+    /// This should be used for attributes that should be `ErrorFollowing`, but\n+    /// because older versions of rustc silently accepted (and ignored) the\n+    /// attributes, this is used to transition.\n+    FutureWarnFollowing,\n+    /// Duplicates preceding the last instance of the attribute will be a\n+    /// warning, with a note that this will be an error in the future.\n+    ///\n+    /// This is the same as `FutureWarnFollowing`, except the last attribute is\n+    /// the one that is \"used\". Ideally these can eventually migrate to\n+    /// `ErrorPreceding`.\n+    FutureWarnPreceding,\n+}\n+\n /// A convenience macro for constructing attribute templates.\n /// E.g., `template!(Word, List: \"description\")` means that the attribute\n /// supports forms `#[attr]` and `#[attr(description)]`.\n@@ -114,36 +170,45 @@ macro_rules! template {\n }\n \n macro_rules! ungated {\n-    ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n-        BuiltinAttribute { name: sym::$attr, type_: $typ, template: $tpl, gate: Ungated }\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(,)?) => {\n+        BuiltinAttribute {\n+            name: sym::$attr,\n+            type_: $typ,\n+            template: $tpl,\n+            gate: Ungated,\n+            duplicates: $duplicates,\n+        }\n     };\n }\n \n macro_rules! gated {\n-    ($attr:ident, $typ:expr, $tpl:expr, $gate:ident, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr, $gate:ident, $msg:expr $(,)?) => {\n         BuiltinAttribute {\n             name: sym::$attr,\n             type_: $typ,\n             template: $tpl,\n+            duplicates: $duplicates,\n             gate: Gated(Stability::Unstable, sym::$gate, $msg, cfg_fn!($gate)),\n         }\n     };\n-    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr, $msg:expr $(,)?) => {\n         BuiltinAttribute {\n             name: sym::$attr,\n             type_: $typ,\n             template: $tpl,\n+            duplicates: $duplicates,\n             gate: Gated(Stability::Unstable, sym::$attr, $msg, cfg_fn!($attr)),\n         }\n     };\n }\n \n macro_rules! rustc_attr {\n-    (TEST, $attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n+    (TEST, $attr:ident, $typ:expr, $tpl:expr, $duplicate:expr $(,)?) => {\n         rustc_attr!(\n             $attr,\n             $typ,\n             $tpl,\n+            $duplicate,\n             concat!(\n                 \"the `#[\",\n                 stringify!($attr),\n@@ -152,11 +217,12 @@ macro_rules! rustc_attr {\n             ),\n         )\n     };\n-    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr, $msg:expr $(,)?) => {\n         BuiltinAttribute {\n             name: sym::$attr,\n             type_: $typ,\n             template: $tpl,\n+            duplicates: $duplicates,\n             gate: Gated(Stability::Unstable, sym::rustc_attrs, $msg, cfg_fn!(rustc_attrs)),\n         }\n     };\n@@ -175,6 +241,7 @@ pub struct BuiltinAttribute {\n     pub name: Symbol,\n     pub type_: AttributeType,\n     pub template: AttributeTemplate,\n+    pub duplicates: AttributeDuplicates,\n     pub gate: AttributeGate,\n }\n \n@@ -186,121 +253,135 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     // Conditional compilation:\n-    ungated!(cfg, Normal, template!(List: \"predicate\")),\n-    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\")),\n+    ungated!(cfg, Normal, template!(List: \"predicate\"), DuplicatesOk),\n+    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\"), DuplicatesOk),\n \n     // Testing:\n-    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\"), WarnFollowing),\n     ungated!(\n         should_panic, Normal,\n-        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n+        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"), FutureWarnFollowing,\n     ),\n     // FIXME(Centril): This can be used on stable but shouldn't.\n-    ungated!(reexport_test_harness_main, CrateLevel, template!(NameValueStr: \"name\")),\n+    ungated!(reexport_test_harness_main, CrateLevel, template!(NameValueStr: \"name\"), ErrorFollowing),\n \n     // Macros:\n-    ungated!(automatically_derived, Normal, template!(Word)),\n-    // FIXME(#14407)\n-    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\")),\n-    ungated!(macro_escape, Normal, template!(Word)), // Deprecated synonym for `macro_use`.\n-    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\")),\n-    ungated!(proc_macro, Normal, template!(Word)),\n+    ungated!(automatically_derived, Normal, template!(Word), WarnFollowing),\n+    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\"), WarnFollowingWordOnly),\n+    ungated!(macro_escape, Normal, template!(Word), WarnFollowing), // Deprecated synonym for `macro_use`.\n+    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\"), WarnFollowing),\n+    ungated!(proc_macro, Normal, template!(Word), ErrorFollowing),\n     ungated!(\n         proc_macro_derive, Normal,\n-        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"),\n+        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"), ErrorFollowing,\n     ),\n-    ungated!(proc_macro_attribute, Normal, template!(Word)),\n+    ungated!(proc_macro_attribute, Normal, template!(Word), ErrorFollowing),\n \n     // Lints:\n-    ungated!(warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(\n+        warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    ungated!(\n+        allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    ungated!(\n+        forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    ungated!(\n+        deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\"), FutureWarnFollowing),\n     gated!(\n-        must_not_suspend, Normal, template!(Word, NameValueStr: \"reason\"), must_not_suspend,\n-        experimental!(must_not_suspend)\n+        must_not_suspend, Normal, template!(Word, NameValueStr: \"reason\"), WarnFollowing,\n+        must_not_suspend, experimental!(must_not_suspend)\n     ),\n-    // FIXME(#14407)\n     ungated!(\n         deprecated, Normal,\n         template!(\n             Word,\n             List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n             NameValueStr: \"reason\"\n         ),\n+        // This has special duplicate handling in E0550 to handle duplicates with rustc_deprecated\n+        DuplicatesOk\n     ),\n \n     // Crate properties:\n-    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\")),\n-    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\")),\n-    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\")),\n+    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\"), FutureWarnFollowing),\n+    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\"), FutureWarnFollowing),\n+    // crate_id is deprecated\n+    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\"), FutureWarnFollowing),\n \n     // ABI, linking, symbols, and FFI\n     ungated!(\n         link, Normal,\n         template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\"\"#),\n+        DuplicatesOk,\n     ),\n-    ungated!(link_name, Normal, template!(NameValueStr: \"name\")),\n-    ungated!(no_link, Normal, template!(Word)),\n-    ungated!(repr, Normal, template!(List: \"C\")),\n-    ungated!(export_name, Normal, template!(NameValueStr: \"name\")),\n-    ungated!(link_section, Normal, template!(NameValueStr: \"name\")),\n-    ungated!(no_mangle, Normal, template!(Word)),\n-    ungated!(used, Normal, template!(Word)),\n+    ungated!(link_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n+    ungated!(no_link, Normal, template!(Word), WarnFollowing),\n+    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk),\n+    ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n+    ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n+    ungated!(no_mangle, Normal, template!(Word), WarnFollowing),\n+    ungated!(used, Normal, template!(Word), WarnFollowing),\n \n     // Limits:\n-    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\")),\n-    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n+    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n     gated!(\n-        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), const_eval_limit,\n-        experimental!(const_eval_limit)\n+        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n+        const_eval_limit, experimental!(const_eval_limit)\n     ),\n     gated!(\n-        move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), large_assignments,\n-        experimental!(move_size_limit)\n+        move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n+        large_assignments, experimental!(move_size_limit)\n     ),\n \n     // Entry point:\n-    ungated!(main, Normal, template!(Word)),\n-    ungated!(start, Normal, template!(Word)),\n-    ungated!(no_start, CrateLevel, template!(Word)),\n-    ungated!(no_main, CrateLevel, template!(Word)),\n+    ungated!(main, Normal, template!(Word), WarnFollowing),\n+    ungated!(start, Normal, template!(Word), WarnFollowing),\n+    ungated!(no_start, CrateLevel, template!(Word), WarnFollowing),\n+    ungated!(no_main, CrateLevel, template!(Word), WarnFollowing),\n \n     // Modules, prelude, and resolution:\n-    ungated!(path, Normal, template!(NameValueStr: \"file\")),\n-    ungated!(no_std, CrateLevel, template!(Word)),\n-    ungated!(no_implicit_prelude, Normal, template!(Word)),\n-    ungated!(non_exhaustive, Normal, template!(Word)),\n+    ungated!(path, Normal, template!(NameValueStr: \"file\"), FutureWarnFollowing),\n+    ungated!(no_std, CrateLevel, template!(Word), WarnFollowing),\n+    ungated!(no_implicit_prelude, Normal, template!(Word), WarnFollowing),\n+    ungated!(non_exhaustive, Normal, template!(Word), WarnFollowing),\n \n     // Runtime\n-    ungated!(windows_subsystem, Normal, template!(NameValueStr: \"windows|console\")),\n-    ungated!(panic_handler, Normal, template!(Word)), // RFC 2070\n+    ungated!(\n+        windows_subsystem, Normal,\n+        template!(NameValueStr: \"windows|console\"), FutureWarnFollowing\n+    ),\n+    ungated!(panic_handler, Normal, template!(Word), WarnFollowing), // RFC 2070\n \n     // Code generation:\n-    ungated!(inline, Normal, template!(Word, List: \"always|never\")),\n-    ungated!(cold, Normal, template!(Word)),\n-    ungated!(no_builtins, Normal, template!(Word)),\n-    ungated!(target_feature, Normal, template!(List: r#\"enable = \"name\"\"#)),\n-    ungated!(track_caller, Normal, template!(Word)),\n+    ungated!(inline, Normal, template!(Word, List: \"always|never\"), FutureWarnFollowing),\n+    ungated!(cold, Normal, template!(Word), WarnFollowing),\n+    ungated!(no_builtins, Normal, template!(Word), WarnFollowing),\n+    ungated!(target_feature, Normal, template!(List: r#\"enable = \"name\"\"#), DuplicatesOk),\n+    ungated!(track_caller, Normal, template!(Word), WarnFollowing),\n     gated!(\n         no_sanitize, Normal,\n-        template!(List: \"address, memory, thread\"),\n+        template!(List: \"address, memory, thread\"), DuplicatesOk,\n         experimental!(no_sanitize)\n     ),\n-    gated!(no_coverage, Normal, template!(Word), experimental!(no_coverage)),\n+    gated!(no_coverage, Normal, template!(Word), WarnFollowing, experimental!(no_coverage)),\n \n-    // FIXME: #14408 assume docs are used since rustdoc looks at them.\n-    ungated!(doc, Normal, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),\n+    ungated!(\n+        doc, Normal, template!(List: \"hidden|inline|...\", NameValueStr: \"string\"), DuplicatesOk\n+    ),\n \n     // ==========================================================================\n     // Unstable attributes:\n     // ==========================================================================\n \n     // Linking:\n-    gated!(naked, Normal, template!(Word), naked_functions, experimental!(naked)),\n+    gated!(naked, Normal, template!(Word), WarnFollowing, naked_functions, experimental!(naked)),\n     gated!(\n-        link_ordinal, Normal, template!(List: \"ordinal\"), raw_dylib,\n+        link_ordinal, Normal, template!(List: \"ordinal\"), ErrorPreceding, raw_dylib,\n         experimental!(link_ordinal)\n     ),\n \n@@ -309,6 +390,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         name: sym::plugin,\n         type_: CrateLevel,\n         template: template!(List: \"name\"),\n+        duplicates: DuplicatesOk,\n         gate: Gated(\n             Stability::Deprecated(\n                 \"https://github.com/rust-lang/rust/pull/64675\",\n@@ -321,42 +403,52 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     },\n \n     // Testing:\n-    gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n+    gated!(allow_fail, Normal, template!(Word), WarnFollowing, experimental!(allow_fail)),\n     gated!(\n-        test_runner, CrateLevel, template!(List: \"path\"), custom_test_frameworks,\n+        test_runner, CrateLevel, template!(List: \"path\"), ErrorFollowing, custom_test_frameworks,\n         \"custom test frameworks are an unstable feature\",\n     ),\n     // RFC #1268\n-    gated!(marker, Normal, template!(Word), marker_trait_attr, experimental!(marker)),\n     gated!(\n-        thread_local, Normal, template!(Word),\n+        marker, Normal, template!(Word), WarnFollowing, marker_trait_attr, experimental!(marker)\n+    ),\n+    gated!(\n+        thread_local, Normal, template!(Word), WarnFollowing,\n         \"`#[thread_local]` is an experimental feature, and does not currently handle destructors\",\n     ),\n-    gated!(no_core, CrateLevel, template!(Word), experimental!(no_core)),\n+    gated!(no_core, CrateLevel, template!(Word), WarnFollowing, experimental!(no_core)),\n     // RFC 2412\n     gated!(\n-        optimize, Normal, template!(List: \"size|speed\"), optimize_attribute,\n+        optimize, Normal, template!(List: \"size|speed\"), ErrorPreceding, optimize_attribute,\n         experimental!(optimize),\n     ),\n     // RFC 2867\n-    gated!(instruction_set, Normal, template!(List: \"set\"), isa_attribute, experimental!(instruction_set)),\n+    gated!(\n+        instruction_set, Normal, template!(List: \"set\"), ErrorPreceding,\n+        isa_attribute, experimental!(instruction_set)\n+    ),\n \n-    gated!(ffi_returns_twice, Normal, template!(Word), experimental!(ffi_returns_twice)),\n-    gated!(ffi_pure, Normal, template!(Word), experimental!(ffi_pure)),\n-    gated!(ffi_const, Normal, template!(Word), experimental!(ffi_const)),\n     gated!(\n-        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"),\n+        ffi_returns_twice, Normal, template!(Word), WarnFollowing, experimental!(ffi_returns_twice)\n+    ),\n+    gated!(ffi_pure, Normal, template!(Word), WarnFollowing, experimental!(ffi_pure)),\n+    gated!(ffi_const, Normal, template!(Word), WarnFollowing, experimental!(ffi_const)),\n+    gated!(\n+        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"), DuplicatesOk,\n         experimental!(register_attr),\n     ),\n     gated!(\n-        register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"),\n+        register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"), DuplicatesOk,\n         experimental!(register_tool),\n     ),\n \n-    gated!(cmse_nonsecure_entry, Normal, template!(Word), experimental!(cmse_nonsecure_entry)),\n+    gated!(\n+        cmse_nonsecure_entry, Normal, template!(Word), WarnFollowing,\n+        experimental!(cmse_nonsecure_entry)\n+    ),\n     // RFC 2632\n     gated!(\n-        default_method_body_is_const, Normal, template!(Word), const_trait_impl,\n+        default_method_body_is_const, Normal, template!(Word), WarnFollowing, const_trait_impl,\n         \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n         as `const`, which may be removed or renamed in the future.\"\n     ),\n@@ -365,71 +457,76 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // ==========================================================================\n \n-    ungated!(feature, CrateLevel, template!(List: \"name1, name1, ...\")),\n-    // FIXME(#14407) -- only looked at on-demand so we can't\n-    // guarantee they'll have already been checked.\n+    ungated!(feature, CrateLevel, template!(List: \"name1, name1, ...\"), DuplicatesOk),\n+    // DuplicatesOk since it has its own validation\n     ungated!(\n         rustc_deprecated, Normal,\n-        template!(List: r#\"since = \"version\", reason = \"...\"\"#)\n+        template!(List: r#\"since = \"version\", reason = \"...\"\"#), DuplicatesOk // See E0550\n+    ),\n+    // DuplicatesOk since it has its own validation\n+    ungated!(\n+        stable, Normal, template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk\n     ),\n-    // FIXME(#14407)\n-    ungated!(stable, Normal, template!(List: r#\"feature = \"name\", since = \"version\"\"#)),\n-    // FIXME(#14407)\n     ungated!(\n         unstable, Normal,\n-        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk,\n     ),\n-    // FIXME(#14407)\n-    ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#)),\n-    // FIXME(#14407)\n-    ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#)),\n+    ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     gated!(\n-        allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n+        allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"allow_internal_unstable side-steps feature gating and stability checks\",\n     ),\n     gated!(\n-        rustc_allow_const_fn_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n+        rustc_allow_const_fn_unstable, Normal,\n+        template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"rustc_allow_const_fn_unstable side-steps feature gating and stability checks\"\n     ),\n     gated!(\n-        allow_internal_unsafe, Normal, template!(Word),\n+        allow_internal_unsafe, Normal, template!(Word), WarnFollowing,\n         \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n \n     // ==========================================================================\n     // Internal attributes: Type system related:\n     // ==========================================================================\n \n-    gated!(fundamental, Normal, template!(Word), experimental!(fundamental)),\n+    gated!(fundamental, Normal, template!(Word), WarnFollowing, experimental!(fundamental)),\n     gated!(\n-        may_dangle, Normal, template!(Word), dropck_eyepatch,\n+        may_dangle, Normal, template!(Word), WarnFollowing, dropck_eyepatch,\n         \"`may_dangle` has unstable semantics and may be removed in the future\",\n     ),\n \n     // ==========================================================================\n     // Internal attributes: Runtime related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_allocator, Normal, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_allocator_nounwind, Normal, template!(Word), IMPL_DETAIL),\n-    gated!(alloc_error_handler, Normal, template!(Word), experimental!(alloc_error_handler)),\n+    rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_allocator_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    gated!(\n+        alloc_error_handler, Normal, template!(Word), WarnFollowing,\n+        experimental!(alloc_error_handler)\n+    ),\n     gated!(\n-        default_lib_allocator, Normal, template!(Word), allocator_internals,\n+        default_lib_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(default_lib_allocator),\n     ),\n     gated!(\n-        needs_allocator, Normal, template!(Word), allocator_internals,\n+        needs_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(needs_allocator),\n     ),\n-    gated!(panic_runtime, Normal, template!(Word), experimental!(panic_runtime)),\n-    gated!(needs_panic_runtime, Normal, template!(Word), experimental!(needs_panic_runtime)),\n+    gated!(panic_runtime, Normal, template!(Word), WarnFollowing, experimental!(panic_runtime)),\n     gated!(\n-        compiler_builtins, Normal, template!(Word),\n+        needs_panic_runtime, Normal, template!(Word), WarnFollowing,\n+        experimental!(needs_panic_runtime)\n+    ),\n+    gated!(\n+        compiler_builtins, Normal, template!(Word), WarnFollowing,\n         \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n         which contains compiler-rt intrinsics and will never be stable\",\n     ),\n     gated!(\n-        profiler_runtime, Normal, template!(Word),\n+        profiler_runtime, Normal, template!(Word), WarnFollowing,\n         \"the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate \\\n         which contains the profiler runtime and will never be stable\",\n     ),\n@@ -439,24 +536,26 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     gated!(\n-        linkage, Normal, template!(NameValueStr: \"external|internal|...\"),\n+        linkage, Normal, template!(NameValueStr: \"external|internal|...\"), ErrorPreceding,\n         \"the `linkage` attribute is experimental and not portable across platforms\",\n     ),\n-    rustc_attr!(rustc_std_internal_symbol, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_std_internal_symbol, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n     rustc_attr!(\n         rustc_builtin_macro, Normal,\n-        template!(Word, List: \"name, /*opt*/ attributes(name1, name2, ...)\"),\n+        template!(Word, List: \"name, /*opt*/ attributes(name1, name2, ...)\"), ErrorFollowing,\n         IMPL_DETAIL,\n     ),\n-    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n     rustc_attr!(\n         rustc_macro_transparency, Normal,\n-        template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n+        template!(NameValueStr: \"transparent|semitransparent|opaque\"), ErrorFollowing,\n         \"used internally for testing macro hygiene\",\n     ),\n \n@@ -470,39 +569,49 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             List: r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n             NameValueStr: \"message\"\n         ),\n+        ErrorFollowing,\n         INTERNAL_UNSTABLE\n     ),\n     // Enumerates \"identity-like\" conversion methods to suggest on type mismatch.\n-    rustc_attr!(rustc_conversion_suggestion, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_conversion_suggestion, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n+    ),\n     // Prevents field reads in the marked trait or method to be considered\n     // during dead code analysis.\n-    rustc_attr!(rustc_trivial_field_reads, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_trivial_field_reads, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Const related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_promotable, Normal, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_legacy_const_generics, Normal, template!(List: \"N\"), INTERNAL_UNSTABLE),\n+    rustc_attr!(rustc_promotable, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(\n+        rustc_legacy_const_generics, Normal, template!(List: \"N\"), ErrorFollowing,\n+        INTERNAL_UNSTABLE\n+    ),\n     // Do not const-check this function's body. It will always get replaced during CTFE.\n-    rustc_attr!(rustc_do_not_const_check, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_do_not_const_check, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Layout related:\n     // ==========================================================================\n \n     rustc_attr!(\n-        rustc_layout_scalar_valid_range_start, Normal, template!(List: \"value\"),\n+        rustc_layout_scalar_valid_range_start, Normal, template!(List: \"value\"), ErrorFollowing,\n         \"the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable \\\n         niche optimizations in libcore and will never be stable\",\n     ),\n     rustc_attr!(\n-        rustc_layout_scalar_valid_range_end, Normal, template!(List: \"value\"),\n+        rustc_layout_scalar_valid_range_end, Normal, template!(List: \"value\"), ErrorFollowing,\n         \"the `#[rustc_layout_scalar_valid_range_end]` attribute is just used to enable \\\n         niche optimizations in libcore and will never be stable\",\n     ),\n     rustc_attr!(\n-        rustc_nonnull_optimization_guaranteed, Normal, template!(Word),\n+        rustc_nonnull_optimization_guaranteed, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable \\\n         niche optimizations in libcore and will never be stable\",\n     ),\n@@ -511,13 +620,14 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Misc:\n     // ==========================================================================\n     gated!(\n-        lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n+        lang, Normal, template!(NameValueStr: \"name\"), DuplicatesOk, lang_items,\n         \"language items are subject to change\",\n     ),\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n         type_: Normal,\n         template: template!(NameValueStr: \"name\"),\n+        duplicates: ErrorFollowing,\n         gate: Gated(\n             Stability::Unstable,\n             sym::rustc_attrs,\n@@ -527,41 +637,43 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     },\n     gated!(\n         // Used in resolve:\n-        prelude_import, Normal, template!(Word),\n+        prelude_import, Normal, template!(Word), WarnFollowing,\n         \"`#[prelude_import]` is for use by rustc only\",\n     ),\n     gated!(\n-        rustc_paren_sugar, Normal, template!(Word), unboxed_closures,\n+        rustc_paren_sugar, Normal, template!(Word), WarnFollowing, unboxed_closures,\n         \"unboxed_closures are still evolving\",\n     ),\n     rustc_attr!(\n-        rustc_inherit_overflow_checks, Normal, template!(Word),\n+        rustc_inherit_overflow_checks, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_inherit_overflow_checks]` attribute is just used to control \\\n         overflow checking behavior of several libcore functions that are inlined \\\n         across crates and will never be stable\",\n     ),\n-    rustc_attr!(rustc_reservation_impl, Normal, template!(NameValueStr: \"reservation message\"),\n-                \"the `#[rustc_reservation_impl]` attribute is internally used \\\n-                 for reserving for `for<T> From<!> for T` impl\"\n+    rustc_attr!(\n+        rustc_reservation_impl, Normal,\n+        template!(NameValueStr: \"reservation message\"), ErrorFollowing,\n+        \"the `#[rustc_reservation_impl]` attribute is internally used \\\n+         for reserving for `for<T> From<!> for T` impl\"\n     ),\n     rustc_attr!(\n-        rustc_test_marker, Normal, template!(Word),\n+        rustc_test_marker, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n     ),\n     rustc_attr!(\n-        rustc_unsafe_specialization_marker, Normal, template!(Word),\n+        rustc_unsafe_specialization_marker, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_unsafe_specialization_marker]` attribute is used to check specializations\"\n     ),\n     rustc_attr!(\n-        rustc_specialization_trait, Normal, template!(Word),\n+        rustc_specialization_trait, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_specialization_trait]` attribute is used to check specializations\"\n     ),\n     rustc_attr!(\n-        rustc_main, Normal, template!(Word),\n+        rustc_main, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_main]` attribute is used internally to specify test entry point function\",\n     ),\n     rustc_attr!(\n-        rustc_skip_array_during_method_dispatch, Normal, template!(Word),\n+        rustc_skip_array_during_method_dispatch, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_skip_array_during_method_dispatch]` attribute is used to exclude a trait \\\n         from method dispatch when the receiver is an array, for compatibility in editions < 2021.\"\n     ),\n@@ -570,48 +682,53 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Testing:\n     // ==========================================================================\n \n-    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_strict_coherence, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n-    rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_strict_coherence, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_variance, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\"), WarnFollowing),\n+    rustc_attr!(TEST, rustc_regions, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(\n         TEST, rustc_error, Normal,\n-        template!(Word, List: \"delay_span_bug_from_inside_query\")\n+        template!(Word, List: \"delay_span_bug_from_inside_query\"), WarnFollowingWordOnly\n+    ),\n+    rustc_attr!(TEST, rustc_dump_user_substs, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_evaluate_where_clauses, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(\n+        TEST, rustc_if_this_changed, Normal, template!(Word, List: \"DepNode\"), DuplicatesOk\n+    ),\n+    rustc_attr!(\n+        TEST, rustc_then_this_would_need, Normal, template!(List: \"DepNode\"), DuplicatesOk\n     ),\n-    rustc_attr!(TEST, rustc_dump_user_substs, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_evaluate_where_clauses, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_if_this_changed, Normal, template!(Word, List: \"DepNode\")),\n-    rustc_attr!(TEST, rustc_then_this_would_need, Normal, template!(List: \"DepNode\")),\n     rustc_attr!(\n         TEST, rustc_clean, Normal,\n         template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n+        DuplicatesOk,\n     ),\n     rustc_attr!(\n         TEST, rustc_partition_reused, Normal,\n-        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#), DuplicatesOk,\n     ),\n     rustc_attr!(\n         TEST, rustc_partition_codegened, Normal,\n-        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#), DuplicatesOk,\n     ),\n     rustc_attr!(\n         TEST, rustc_expected_cgu_reuse, Normal,\n-        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n-    ),\n-    rustc_attr!(TEST, rustc_symbol_name, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_polymorphize_error, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_def_path, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_mir, Normal, template!(List: \"arg1, arg2, ...\")),\n-    rustc_attr!(TEST, rustc_dump_program_clauses, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_dump_env_program_clauses, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_object_lifetime_default, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_dump_vtable, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/)),\n+        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#), DuplicatesOk,\n+    ),\n+    rustc_attr!(TEST, rustc_symbol_name, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_polymorphize_error, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_def_path, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_mir, Normal, template!(List: \"arg1, arg2, ...\"), DuplicatesOk),\n+    rustc_attr!(TEST, rustc_dump_program_clauses, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_dump_env_program_clauses, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_object_lifetime_default, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_dump_vtable, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/), DuplicatesOk),\n     gated!(\n-        omit_gdb_pretty_printer_section, Normal, template!(Word),\n+        omit_gdb_pretty_printer_section, Normal, template!(Word), WarnFollowing,\n         \"the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\",\n     ),\n ];"}, {"sha": "bfc537cfae2cb9365e41917064f2e55b10af621a", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67a5b193c113b56cc885006a675280add09a14e3/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a5b193c113b56cc885006a675280add09a14e3/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=67a5b193c113b56cc885006a675280add09a14e3", "patch": "@@ -11,6 +11,7 @@\n //! even if it is stabilized or removed, *do not remove it*. Instead, move the\n //! symbol to the `accepted` or `removed` modules respectively.\n \n+#![feature(derive_default_enum)]\n #![feature(once_cell)]\n \n mod accepted;\n@@ -146,6 +147,7 @@ pub fn find_feature_issue(feature: Symbol, issue: GateIssue) -> Option<NonZeroU3\n \n pub use accepted::ACCEPTED_FEATURES;\n pub use active::{Features, ACTIVE_FEATURES, INCOMPATIBLE_FEATURES};\n+pub use builtin_attrs::AttributeDuplicates;\n pub use builtin_attrs::{\n     deprecated_attributes, find_gated_cfg, is_builtin_attr_name, AttributeGate, AttributeTemplate,\n     AttributeType, BuiltinAttribute, GatedCfg, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,"}, {"sha": "270d6504b01d3fe2e0627cf3a4d8681a77e3742e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 101, "deletions": 17, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/67a5b193c113b56cc885006a675280add09a14e3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a5b193c113b56cc885006a675280add09a14e3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=67a5b193c113b56cc885006a675280add09a14e3", "patch": "@@ -9,9 +9,9 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n \n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, NestedMetaItem};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n-use rustc_feature::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n+use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -23,6 +23,7 @@ use rustc_session::lint::builtin::{\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use std::collections::hash_map::Entry;\n \n pub(crate) fn target_from_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -69,7 +70,7 @@ impl CheckAttrVisitor<'tcx> {\n         let mut doc_aliases = FxHashMap::default();\n         let mut is_valid = true;\n         let mut specified_inline = None;\n-        let mut seen = FxHashSet::default();\n+        let mut seen = FxHashMap::default();\n         let attrs = self.tcx.hir().attrs(hir_id);\n         for attr in attrs {\n             let attr_is_valid = match attr.name_or_empty() {\n@@ -148,6 +149,8 @@ impl CheckAttrVisitor<'tcx> {\n                 _ => {}\n             }\n \n+            let builtin = attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name));\n+\n             if hir_id != CRATE_HIR_ID {\n                 if let Some(BuiltinAttribute { type_: AttributeType::CrateLevel, .. }) =\n                     attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name))\n@@ -165,21 +168,28 @@ impl CheckAttrVisitor<'tcx> {\n                 }\n             }\n \n-            // Duplicate attributes\n-            match attr.name_or_empty() {\n-                name @ sym::macro_use => {\n-                    let args = attr.meta_item_list().unwrap_or_else(Vec::new);\n-                    let args: Vec<_> = args.iter().map(|arg| arg.name_or_empty()).collect();\n-                    if !seen.insert((name, args)) {\n-                        self.tcx.struct_span_lint_hir(\n-                            UNUSED_ATTRIBUTES,\n-                            hir_id,\n+            if let Some(BuiltinAttribute { duplicates, .. }) = builtin {\n+                check_duplicates(self.tcx, attr, hir_id, *duplicates, &mut seen);\n+            }\n+\n+            // Warn on useless empty attributes.\n+            if matches!(attr.name_or_empty(), sym::macro_use)\n+                && attr.meta_item_list().map_or(false, |list| list.is_empty())\n+            {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"unused attribute\")\n+                        .span_suggestion(\n                             attr.span,\n-                            |lint| lint.build(\"unused attribute\").emit(),\n-                        );\n-                    }\n-                }\n-                _ => {}\n+                            \"remove this attribute\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .note(&format!(\n+                            \"attribute `{}` with an empty list has no effect\",\n+                            attr.name_or_empty()\n+                        ))\n+                        .emit();\n+                });\n             }\n         }\n \n@@ -1990,3 +2000,77 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_attrs, ..*providers };\n }\n+\n+fn check_duplicates(\n+    tcx: TyCtxt<'_>,\n+    attr: &Attribute,\n+    hir_id: HirId,\n+    duplicates: AttributeDuplicates,\n+    seen: &mut FxHashMap<Symbol, Span>,\n+) {\n+    use AttributeDuplicates::*;\n+    if matches!(duplicates, WarnFollowingWordOnly) && !attr.is_word() {\n+        return;\n+    }\n+    match duplicates {\n+        DuplicatesOk => {}\n+        WarnFollowing | FutureWarnFollowing | WarnFollowingWordOnly | FutureWarnPreceding => {\n+            match seen.entry(attr.name_or_empty()) {\n+                Entry::Occupied(mut entry) => {\n+                    let (this, other) = if matches!(duplicates, FutureWarnPreceding) {\n+                        let to_remove = entry.insert(attr.span);\n+                        (to_remove, attr.span)\n+                    } else {\n+                        (attr.span, *entry.get())\n+                    };\n+                    tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, this, |lint| {\n+                        let mut db = lint.build(\"unused attribute\");\n+                        db.span_note(other, \"attribute also specified here\").span_suggestion(\n+                            this,\n+                            \"remove this attribute\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        if matches!(duplicates, FutureWarnFollowing | FutureWarnPreceding) {\n+                            db.warn(\n+                                \"this was previously accepted by the compiler but is \\\n+                                 being phased out; it will become a hard error in \\\n+                                 a future release!\",\n+                            );\n+                        }\n+                        db.emit();\n+                    });\n+                }\n+                Entry::Vacant(entry) => {\n+                    entry.insert(attr.span);\n+                }\n+            }\n+        }\n+        ErrorFollowing | ErrorPreceding => match seen.entry(attr.name_or_empty()) {\n+            Entry::Occupied(mut entry) => {\n+                let (this, other) = if matches!(duplicates, ErrorPreceding) {\n+                    let to_remove = entry.insert(attr.span);\n+                    (to_remove, attr.span)\n+                } else {\n+                    (attr.span, *entry.get())\n+                };\n+                tcx.sess\n+                    .struct_span_err(\n+                        this,\n+                        &format!(\"multiple `{}` attributes\", attr.name_or_empty()),\n+                    )\n+                    .span_note(other, \"attribute also specified here\")\n+                    .span_suggestion(\n+                        this,\n+                        \"remove this attribute\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+            }\n+            Entry::Vacant(entry) => {\n+                entry.insert(attr.span);\n+            }\n+        },\n+    }\n+}"}, {"sha": "074d5a92ad62035244c311ad2953beb2e72ced3c", "filename": "src/test/ui/lint/unused/unused-attr-duplicate.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/67a5b193c113b56cc885006a675280add09a14e3/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a5b193c113b56cc885006a675280add09a14e3/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-duplicate.rs?ref=67a5b193c113b56cc885006a675280add09a14e3", "patch": "@@ -0,0 +1,108 @@\n+// Tests for repeating attribute warnings.\n+// aux-build:lint_unused_extern_crate.rs\n+// compile-flags:--test\n+// Not tested due to extra requirements:\n+// - panic_handler: needs extra setup\n+// - target_feature: platform-specific\n+// - link_section: platform-specific\n+// - proc_macro, proc_macro_derive, proc_macro_attribute: needs to be a\n+//   proc-macro, and have special handling for mixing.\n+// - unstable attributes (not going to bother)\n+// - no_main: extra setup\n+#![deny(unused_attributes)]\n+#![crate_name = \"unused_attr_duplicate\"]\n+#![crate_name = \"unused_attr_duplicate2\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+#![crate_type = \"bin\"]\n+#![crate_type = \"rlib\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+#![recursion_limit = \"128\"]\n+#![recursion_limit = \"256\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+#![type_length_limit = \"1048576\"]\n+#![type_length_limit = \"1\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+#![no_std]\n+#![no_std] //~ ERROR unused attribute\n+#![no_implicit_prelude]\n+#![no_implicit_prelude] //~ ERROR unused attribute\n+#![windows_subsystem = \"console\"]\n+#![windows_subsystem = \"windows\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+#![no_builtins]\n+#![no_builtins] //~ ERROR unused attribute\n+\n+#[no_link]\n+#[no_link] //~ ERROR unused attribute\n+extern crate lint_unused_extern_crate;\n+\n+#[macro_use]\n+#[macro_use] //~ ERROR unused attribute\n+pub mod m {\n+    #[macro_export]\n+    #[macro_export] //~ ERROR unused attribute\n+    macro_rules! foo {\n+        () => {};\n+    }\n+}\n+\n+#[path = \"auxiliary/lint_unused_extern_crate.rs\"]\n+#[path = \"bar.rs\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+pub mod from_path;\n+\n+#[test]\n+#[ignore]\n+#[ignore = \"some text\"] //~ ERROR unused attribute\n+#[should_panic]\n+#[should_panic(expected = \"values don't match\")] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+fn t1() {}\n+\n+#[must_use]\n+#[must_use = \"some message\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+// No warnings for #[repr], would require more logic.\n+#[repr(C)]\n+#[repr(C)]\n+#[non_exhaustive]\n+#[non_exhaustive] //~ ERROR unused attribute\n+pub struct X;\n+\n+#[automatically_derived]\n+#[automatically_derived] //~ ERROR unused attribute\n+impl X {}\n+\n+#[inline(always)]\n+#[inline(never)] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+#[cold]\n+#[cold] //~ ERROR unused attribute\n+#[track_caller]\n+#[track_caller] //~ ERROR unused attribute\n+pub fn xyz() {}\n+\n+// No warnings for #[link], would require more logic.\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n+extern \"C\" {\n+    #[link_name = \"this_does_not_exist\"] //~ ERROR unused attribute\n+    //~^ WARN this was previously accepted\n+    #[link_name = \"rust_dbg_extern_identity_u32\"]\n+    pub fn name_in_rust(v: u32) -> u32;\n+}\n+\n+#[export_name = \"exported_symbol_name\"] //~ ERROR unused attribute\n+//~^ WARN this was previously accepted\n+#[export_name = \"exported_symbol_name2\"]\n+pub fn export_test() {}\n+\n+#[no_mangle]\n+#[no_mangle] //~ ERROR unused attribute\n+pub fn no_mangle_test() {}\n+\n+#[used]\n+#[used] //~ ERROR unused attribute\n+static FOO: u32 = 0;\n+\n+fn main() {}"}, {"sha": "d4305add0aa4f08bbcc61bab292086cc9290b23e", "filename": "src/test/ui/lint/unused/unused-attr-duplicate.stderr", "status": "added", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/rust-lang/rust/blob/67a5b193c113b56cc885006a675280add09a14e3/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a5b193c113b56cc885006a675280add09a14e3/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-duplicate.stderr?ref=67a5b193c113b56cc885006a675280add09a14e3", "patch": "@@ -0,0 +1,306 @@\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:36:1\n+   |\n+LL | #[no_link]\n+   | ^^^^^^^^^^ help: remove this attribute\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-attr-duplicate.rs:12:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:35:1\n+   |\n+LL | #[no_link]\n+   | ^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:40:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:39:1\n+   |\n+LL | #[macro_use]\n+   | ^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:50:1\n+   |\n+LL | #[path = \"bar.rs\"]\n+   | ^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:49:1\n+   |\n+LL | #[path = \"auxiliary/lint_unused_extern_crate.rs\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:56:1\n+   |\n+LL | #[ignore = \"some text\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:55:1\n+   |\n+LL | #[ignore]\n+   | ^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:58:1\n+   |\n+LL | #[should_panic(expected = \"values don't match\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:57:1\n+   |\n+LL | #[should_panic]\n+   | ^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:63:1\n+   |\n+LL | #[must_use = \"some message\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:62:1\n+   |\n+LL | #[must_use]\n+   | ^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:69:1\n+   |\n+LL | #[non_exhaustive]\n+   | ^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:68:1\n+   |\n+LL | #[non_exhaustive]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:73:1\n+   |\n+LL | #[automatically_derived]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:72:1\n+   |\n+LL | #[automatically_derived]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:77:1\n+   |\n+LL | #[inline(never)]\n+   | ^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:76:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:80:1\n+   |\n+LL | #[cold]\n+   | ^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:79:1\n+   |\n+LL | #[cold]\n+   | ^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:82:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:81:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:95:1\n+   |\n+LL | #[export_name = \"exported_symbol_name\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:97:1\n+   |\n+LL | #[export_name = \"exported_symbol_name2\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:101:1\n+   |\n+LL | #[no_mangle]\n+   | ^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:100:1\n+   |\n+LL | #[no_mangle]\n+   | ^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:105:1\n+   |\n+LL | #[used]\n+   | ^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:104:1\n+   |\n+LL | #[used]\n+   | ^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:89:5\n+   |\n+LL |     #[link_name = \"this_does_not_exist\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:91:5\n+   |\n+LL |     #[link_name = \"rust_dbg_extern_identity_u32\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:14:1\n+   |\n+LL | #![crate_name = \"unused_attr_duplicate2\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:13:1\n+   |\n+LL | #![crate_name = \"unused_attr_duplicate\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:17:1\n+   |\n+LL | #![crate_type = \"rlib\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:16:1\n+   |\n+LL | #![crate_type = \"bin\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:20:1\n+   |\n+LL | #![recursion_limit = \"256\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:19:1\n+   |\n+LL | #![recursion_limit = \"128\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:23:1\n+   |\n+LL | #![type_length_limit = \"1\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:22:1\n+   |\n+LL | #![type_length_limit = \"1048576\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:26:1\n+   |\n+LL | #![no_std]\n+   | ^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:25:1\n+   |\n+LL | #![no_std]\n+   | ^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:28:1\n+   |\n+LL | #![no_implicit_prelude]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:27:1\n+   |\n+LL | #![no_implicit_prelude]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:30:1\n+   |\n+LL | #![windows_subsystem = \"windows\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:29:1\n+   |\n+LL | #![windows_subsystem = \"console\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:33:1\n+   |\n+LL | #![no_builtins]\n+   | ^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:32:1\n+   |\n+LL | #![no_builtins]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/unused-attr-duplicate.rs:43:5\n+   |\n+LL |     #[macro_export]\n+   |     ^^^^^^^^^^^^^^^ help: remove this attribute\n+   |\n+note: attribute also specified here\n+  --> $DIR/unused-attr-duplicate.rs:42:5\n+   |\n+LL |     #[macro_export]\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "6de7ffb2f635b2f971ba37188d165c4cd6d22078", "filename": "src/test/ui/macros/macro-use-all-and-none.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67a5b193c113b56cc885006a675280add09a14e3/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-all-and-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a5b193c113b56cc885006a675280add09a14e3/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-all-and-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-all-and-none.stderr?ref=67a5b193c113b56cc885006a675280add09a14e3", "patch": "@@ -2,13 +2,14 @@ warning: unused attribute\n   --> $DIR/macro-use-all-and-none.rs:7:1\n    |\n LL | #[macro_use()]\n-   | ^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^ help: remove this attribute\n    |\n note: the lint level is defined here\n   --> $DIR/macro-use-all-and-none.rs:4:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n+   = note: attribute `macro_use` with an empty list has no effect\n \n warning: 1 warning emitted\n "}]}