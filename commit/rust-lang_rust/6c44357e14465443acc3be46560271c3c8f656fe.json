{"sha": "6c44357e14465443acc3be46560271c3c8f656fe", "node_id": "C_kwDOAAsO6NoAKDZjNDQzNTdlMTQ0NjU0NDNhY2MzYmU0NjU2MDI3MWMzYzhmNjU2ZmU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-11T03:58:54Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-11T03:58:54Z"}, "message": "fix(doctest): treat fatal parse errors as incomplete attributes\n\nFixes #99089", "tree": {"sha": "159ea0c282e3c1b21841cf90096e36f205c64a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/159ea0c282e3c1b21841cf90096e36f205c64a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c44357e14465443acc3be46560271c3c8f656fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c44357e14465443acc3be46560271c3c8f656fe", "html_url": "https://github.com/rust-lang/rust/commit/6c44357e14465443acc3be46560271c3c8f656fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c44357e14465443acc3be46560271c3c8f656fe/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f893495e3da91dc319d37861b803eed9d6c8c7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f893495e3da91dc319d37861b803eed9d6c8c7c7", "html_url": "https://github.com/rust-lang/rust/commit/f893495e3da91dc319d37861b803eed9d6c8c7c7"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "39ec6a6085640509a9b4895153bad362bcd5edd9", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6c44357e14465443acc3be46560271c3c8f656fe/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c44357e14465443acc3be46560271c3c8f656fe/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6c44357e14465443acc3be46560271c3c8f656fe", "patch": "@@ -726,31 +726,58 @@ fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n         // Empty content so nothing to check in here...\n         return true;\n     }\n-    rustc_span::create_session_if_not_set_then(edition, |_| {\n-        let filename = FileName::anon_source_code(source);\n-        let sess = ParseSess::with_silent_emitter(None);\n-        let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source.to_owned())\n-        {\n-            Ok(p) => p,\n-            Err(_) => {\n-                debug!(\"Cannot build a parser to check mod attr so skipping...\");\n-                return true;\n+    rustc_driver::catch_fatal_errors(|| {\n+        rustc_span::create_session_if_not_set_then(edition, |_| {\n+            use rustc_errors::emitter::EmitterWriter;\n+            use rustc_errors::Handler;\n+            use rustc_span::source_map::FilePathMapping;\n+\n+            let filename = FileName::anon_source_code(source);\n+            // Any errors in parsing should also appear when the doctest is compiled for real, so just\n+            // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n+            let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+            let fallback_bundle =\n+                rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+\n+            let emitter = EmitterWriter::new(\n+                box io::sink(),\n+                None,\n+                None,\n+                fallback_bundle,\n+                false,\n+                false,\n+                false,\n+                None,\n+                false,\n+            );\n+\n+            let handler = Handler::with_emitter(false, None, box emitter);\n+            let sess = ParseSess::with_span_handler(handler, sm);\n+            let mut parser =\n+                match maybe_new_parser_from_source_str(&sess, filename, source.to_owned()) {\n+                    Ok(p) => p,\n+                    Err(_) => {\n+                        debug!(\"Cannot build a parser to check mod attr so skipping...\");\n+                        return true;\n+                    }\n+                };\n+            // If a parsing error happened, it's very likely that the attribute is incomplete.\n+            if let Err(e) = parser.parse_attribute(InnerAttrPolicy::Permitted) {\n+                e.cancel();\n+                return false;\n             }\n-        };\n-        // If a parsing error happened, it's very likely that the attribute is incomplete.\n-        if parser.parse_attribute(InnerAttrPolicy::Permitted).is_err() {\n-            return false;\n-        }\n-        // We now check if there is an unclosed delimiter for the attribute. To do so, we look at\n-        // the `unclosed_delims` and see if the opening square bracket was closed.\n-        parser\n-            .unclosed_delims()\n-            .get(0)\n-            .map(|unclosed| {\n-                unclosed.unclosed_span.map(|s| s.lo()).unwrap_or(BytePos(0)) != BytePos(2)\n-            })\n-            .unwrap_or(true)\n+            // We now check if there is an unclosed delimiter for the attribute. To do so, we look at\n+            // the `unclosed_delims` and see if the opening square bracket was closed.\n+            parser\n+                .unclosed_delims()\n+                .get(0)\n+                .map(|unclosed| {\n+                    unclosed.unclosed_span.map(|s| s.lo()).unwrap_or(BytePos(0)) != BytePos(2)\n+                })\n+                .unwrap_or(true)\n+        })\n     })\n+    .unwrap_or(false)\n }\n \n fn partition_source(s: &str, edition: Edition) -> (String, String, String) {"}, {"sha": "a30472ac56b24aa1e59edc438fe5ff6be8578a14", "filename": "src/test/rustdoc-ui/doctest-multiline-crate-attribute.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c44357e14465443acc3be46560271c3c8f656fe/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c44357e14465443acc3be46560271c3c8f656fe/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.rs?ref=6c44357e14465443acc3be46560271c3c8f656fe", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags:--test --test-args=--test-threads=1\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// check-pass\n+\n+/// ```\n+/// #![deprecated(since = \"5.2\", note = \"foo was rarely used. \\\n+///    Users should instead use bar\")]\n+/// ```\n+pub fn f() {}"}, {"sha": "07a4f657dea6a15405d7ad22a0b570f1d20814f9", "filename": "src/test/rustdoc-ui/doctest-multiline-crate-attribute.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c44357e14465443acc3be46560271c3c8f656fe/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6c44357e14465443acc3be46560271c3c8f656fe/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.stdout?ref=6c44357e14465443acc3be46560271c3c8f656fe", "patch": "@@ -0,0 +1,6 @@\n+\n+running 1 test\n+test $DIR/doctest-multiline-crate-attribute.rs - f (line 6) ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}]}