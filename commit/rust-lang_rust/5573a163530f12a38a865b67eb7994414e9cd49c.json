{"sha": "5573a163530f12a38a865b67eb7994414e9cd49c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzNhMTYzNTMwZjEyYTM4YTg2NWI2N2ViNzk5NDQxNGU5Y2Q0OWM=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-04T00:11:02Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-10-12T23:17:12Z"}, "message": "Use `try{}` in `try_fold` to decouple library from `Try` details", "tree": {"sha": "99f6896c26de88f6225d9e8377d5a8dc7861f03c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f6896c26de88f6225d9e8377d5a8dc7861f03c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5573a163530f12a38a865b67eb7994414e9cd49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5573a163530f12a38a865b67eb7994414e9cd49c", "html_url": "https://github.com/rust-lang/rust/commit/5573a163530f12a38a865b67eb7994414e9cd49c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5573a163530f12a38a865b67eb7994414e9cd49c/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dae8cdcc8fa879cea6a4bbbfa5b32e97be4c306", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dae8cdcc8fa879cea6a4bbbfa5b32e97be4c306", "html_url": "https://github.com/rust-lang/rust/commit/8dae8cdcc8fa879cea6a4bbbfa5b32e97be4c306"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "2e070d71224422b9bb0e190e802a2d5fd1de0084", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -109,7 +109,7 @@ where\n             acc = b.try_fold(acc, f)?;\n             // we don't fuse the second iterator\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     fn fold<Acc, F>(self, mut acc: Acc, mut f: F) -> Acc\n@@ -292,7 +292,7 @@ where\n             acc = a.try_rfold(acc, f)?;\n             // we don't fuse the second iterator\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     fn rfold<Acc, F>(self, mut acc: Acc, mut f: F) -> Acc"}, {"sha": "35adb4f69d854eec06cab4edfdf17eb80bcda98d", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -317,7 +317,7 @@ where\n         }\n         self.backiter = None;\n \n-        Try::from_ok(init)\n+        try { init }\n     }\n \n     #[inline]\n@@ -397,7 +397,7 @@ where\n         }\n         self.frontiter = None;\n \n-        Try::from_ok(init)\n+        try { init }\n     }\n \n     #[inline]"}, {"sha": "60ac3524e66964c65b3c37e1d6c517815c5bc788", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -303,7 +303,7 @@ where\n             acc = iter.try_fold(acc, fold)?;\n             self.iter = None;\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     #[inline]\n@@ -353,7 +353,7 @@ where\n             acc = iter.try_rfold(acc, fold)?;\n             self.iter = None;\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     #[inline]"}, {"sha": "ba66ba2912f67a1bd72430409be90ce75b793aed", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -579,7 +579,7 @@ where\n         })?;\n \n         if is_empty {\n-            return Try::from_ok(acc);\n+            return try { acc };\n         }\n \n         loop {\n@@ -715,7 +715,7 @@ where\n         if self.first_take {\n             self.first_take = false;\n             match self.iter.next() {\n-                None => return Try::from_ok(acc),\n+                None => return try { acc },\n                 Some(x) => acc = f(acc, x)?,\n             }\n         }\n@@ -792,7 +792,7 @@ where\n         }\n \n         match self.next_back() {\n-            None => Try::from_ok(init),\n+            None => try { init },\n             Some(x) => {\n                 let acc = f(init, x)?;\n                 from_fn(nth_back(&mut self.iter, self.step)).try_fold(acc, f)\n@@ -1075,7 +1075,7 @@ fn filter_try_fold<'a, T, Acc, R: Try<Ok = Acc>>(\n     predicate: &'a mut impl FnMut(&T) -> bool,\n     mut fold: impl FnMut(Acc, T) -> R + 'a,\n ) -> impl FnMut(Acc, T) -> R + 'a {\n-    move |acc, item| if predicate(&item) { fold(acc, item) } else { R::from_ok(acc) }\n+    move |acc, item| if predicate(&item) { fold(acc, item) } else { try { acc } }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1229,7 +1229,7 @@ fn filter_map_try_fold<'a, T, B, Acc, R: Try<Ok = Acc>>(\n ) -> impl FnMut(Acc, T) -> R + 'a {\n     move |acc, item| match f(item) {\n         Some(x) => fold(acc, x),\n-        None => R::from_ok(acc),\n+        None => try { acc },\n     }\n }\n \n@@ -1660,7 +1660,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n         R: Try<Ok = B>,\n     {\n         let acc = match self.peeked.take() {\n-            Some(None) => return Try::from_ok(init),\n+            Some(None) => return try { init },\n             Some(Some(v)) => f(init, v)?,\n             None => init,\n         };\n@@ -1703,7 +1703,7 @@ where\n         R: Try<Ok = B>,\n     {\n         match self.peeked.take() {\n-            Some(None) => Try::from_ok(init),\n+            Some(None) => try { init },\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n                 Ok(acc) => f(acc, v),\n                 Err(e) => {\n@@ -1938,7 +1938,7 @@ where\n         if !self.flag {\n             match self.next() {\n                 Some(v) => init = fold(init, v)?,\n-                None => return Try::from_ok(init),\n+                None => return try { init },\n             }\n         }\n         self.iter.try_fold(init, fold)\n@@ -2065,13 +2065,13 @@ where\n                     ControlFlow::from_try(fold(acc, x))\n                 } else {\n                     *flag = true;\n-                    ControlFlow::Break(Try::from_ok(acc))\n+                    ControlFlow::Break(try { acc })\n                 }\n             }\n         }\n \n         if self.flag {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let flag = &mut self.flag;\n             let p = &mut self.predicate;\n@@ -2180,7 +2180,7 @@ where\n         let Self { iter, predicate } = self;\n         iter.try_fold(init, |acc, x| match predicate(x) {\n             Some(item) => ControlFlow::from_try(fold(acc, item)),\n-            None => ControlFlow::Break(Try::from_ok(acc)),\n+            None => ControlFlow::Break(try { acc }),\n         })\n         .into_try()\n     }\n@@ -2316,7 +2316,7 @@ where\n         if n > 0 {\n             // nth(n) skips n+1\n             if self.iter.nth(n - 1).is_none() {\n-                return Try::from_ok(init);\n+                return try { init };\n             }\n         }\n         self.iter.try_fold(init, fold)\n@@ -2382,7 +2382,7 @@ where\n \n         let n = self.len();\n         if n == 0 {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             self.iter.try_rfold(init, check(n, fold)).into_try()\n         }\n@@ -2509,7 +2509,7 @@ where\n         }\n \n         if self.n == 0 {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let n = &mut self.n;\n             self.iter.try_fold(init, check(n, fold)).into_try()\n@@ -2587,11 +2587,11 @@ where\n         R: Try<Ok = Acc>,\n     {\n         if self.n == 0 {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let len = self.iter.len();\n             if len > self.n && self.iter.nth_back(len - self.n - 1).is_none() {\n-                Try::from_ok(init)\n+                try { init }\n             } else {\n                 self.iter.try_rfold(init, fold)\n             }\n@@ -2687,7 +2687,7 @@ where\n             mut fold: impl FnMut(Acc, B) -> R + 'a,\n         ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n             move |acc, x| match f(state, x) {\n-                None => ControlFlow::Break(Try::from_ok(acc)),\n+                None => ControlFlow::Break(try { acc }),\n                 Some(x) => ControlFlow::from_try(fold(acc, x)),\n             }\n         }\n@@ -2951,7 +2951,7 @@ where\n                 Ok(x) => ControlFlow::from_try(f(acc, x)),\n                 Err(e) => {\n                     *error = Err(e);\n-                    ControlFlow::Break(Try::from_ok(acc))\n+                    ControlFlow::Break(try { acc })\n                 }\n             })\n             .into_try()"}, {"sha": "cd8ab11cb842641ede0ed39576e8328ad2ff0fa9", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -713,7 +713,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         R: Try<Ok = B>,\n     {\n         if self.is_empty() {\n-            return Try::from_ok(init);\n+            return try { init };\n         }\n \n         let mut accum = init;\n@@ -731,7 +731,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     #[inline]\n@@ -818,7 +818,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         R: Try<Ok = B>,\n     {\n         if self.is_empty() {\n-            return Try::from_ok(init);\n+            return try { init };\n         }\n \n         let mut accum = init;\n@@ -836,7 +836,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     #[inline]"}, {"sha": "465b427624dddba82b4f305f4ada551e076b5b07", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -221,7 +221,7 @@ pub trait DoubleEndedIterator: Iterator {\n         while let Some(x) = self.next_back() {\n             accum = f(accum, x)?;\n         }\n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     /// An iterator method that reduces the iterator's elements to a single,"}, {"sha": "de671ec13d1e861a0163213d213e52da8dd50694", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -1887,7 +1887,7 @@ pub trait Iterator {\n         while let Some(x) = self.next() {\n             accum = f(accum, x)?;\n         }\n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     /// An iterator method that applies a fallible function to each item in the"}, {"sha": "ff2696bb0a4cc9f4b8b5d690ff15de64ff08d617", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5573a163530f12a38a865b67eb7994414e9cd49c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5573a163530f12a38a865b67eb7994414e9cd49c", "patch": "@@ -127,6 +127,7 @@\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n #![feature(transparent_unions)]\n+#![feature(try_blocks)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n #![feature(untagged_unions)]"}]}