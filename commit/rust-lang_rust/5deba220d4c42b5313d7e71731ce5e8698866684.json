{"sha": "5deba220d4c42b5313d7e71731ce5e8698866684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZWJhMjIwZDRjNDJiNTMxM2Q3ZTcxNzMxY2U1ZTg2OTg4NjY2ODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-01T16:22:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-01T16:22:26Z"}, "message": "Auto merge of #46278 - MaloJaffre:ci-compiler-docs, r=kennytm\n\nAdd compiler docs testing to CI.\n\nFixes #47025.\nI don't know if `x86_64-gnu` is the right builder for this, but there seems to be time left on [Travis](https://travis-ci.org/rust-lang/rust/jobs/307488864).\n\nRemaining problems blocking this PR:\n- [x] broken links caused by rustdoc issues:\n  - [x] `pub use self::Enum::...`: #46766 and #46767 (fixed by #47050, thanks @ollie27!)\n  - [x] `impl Deref for DerefToStdType`: #32129 (ignored in linkchecker)\n  - [x] `#[feature(decl_macro)]` and `use std::vec`: #47038 (ignored in linkchecker)\n  - [x]  `rustc_data_structures::sync::{Lrc, RwLock}` aliases `std` types: #32130 (ignored in linkchecker)\n- [x] markdown differences, in rust repository and in external crates, now failing the build with #46880 merged (all fixed)\n- [x] multiple crate updates needed: `rand`, `log`, `parking_lot_core`, `flate2`\n  - [x] submodule updates needed to deduplicate dependencies: `rust-installer`, ~`cargo`~ (done by #47052)\n  - [x] #44953 test broken by `log` update (removed, this can be controversial)\n- [x] Waiting `x86_64-gnu` build results ([done](https://travis-ci.org/rust-lang/rust/builds/323451069))\n\nSee individual commits for more details.", "tree": {"sha": "2a63ce6b6a4fc9521a9b525a5bfa87c773640133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a63ce6b6a4fc9521a9b525a5bfa87c773640133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5deba220d4c42b5313d7e71731ce5e8698866684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5deba220d4c42b5313d7e71731ce5e8698866684", "html_url": "https://github.com/rust-lang/rust/commit/5deba220d4c42b5313d7e71731ce5e8698866684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5deba220d4c42b5313d7e71731ce5e8698866684/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f2745e7ccd247da50f0cb18318ac477e5bccbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f2745e7ccd247da50f0cb18318ac477e5bccbf", "html_url": "https://github.com/rust-lang/rust/commit/d5f2745e7ccd247da50f0cb18318ac477e5bccbf"}, {"sha": "2449230cce246f48d9faa212b41a6430b1e373b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2449230cce246f48d9faa212b41a6430b1e373b3", "html_url": "https://github.com/rust-lang/rust/commit/2449230cce246f48d9faa212b41a6430b1e373b3"}], "stats": {"total": 489, "additions": 255, "deletions": 234}, "files": [{"sha": "52bfa2ab1090ee432ffecfae6cc42d593e531894", "filename": "src/Cargo.lock", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -28,7 +28,7 @@ name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"std_unicode 0.0.0\",\n ]\n \n@@ -198,7 +198,7 @@ dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.6.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"psapi-sys 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -250,7 +250,7 @@ dependencies = [\n  \"git2 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -373,7 +373,7 @@ dependencies = [\n  \"filetime 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -389,7 +389,7 @@ dependencies = [\n  \"filetime 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -600,7 +600,7 @@ name = \"env_logger\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -609,7 +609,7 @@ name = \"env_logger\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -677,15 +677,6 @@ version = \"0.1.0\"\n name = \"find_impls\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"flate2\"\n-version = \"0.2.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"flate2\"\n version = \"1.0.1\"\n@@ -729,19 +720,17 @@ dependencies = [\n \n [[package]]\n name = \"fuchsia-zircon\"\n-version = \"0.2.1\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"fuchsia-zircon-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-zircon-sys 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"fuchsia-zircon-sys\"\n-version = \"0.2.0\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"futf\"\n@@ -782,7 +771,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"git2 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -798,7 +787,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -822,7 +811,7 @@ version = \"0.29.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -860,7 +849,7 @@ name = \"html5ever\"\n version = \"0.20.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"markup5ever 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -890,7 +879,7 @@ dependencies = [\n  \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"globset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -915,7 +904,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -943,7 +932,7 @@ version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -957,7 +946,7 @@ version = \"8.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1067,8 +1056,19 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"log\"\n-version = \"0.3.8\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"log_settings\"\n@@ -1122,7 +1122,7 @@ dependencies = [\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1240,7 +1240,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"num-integer 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1369,17 +1369,17 @@ version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.2.8\"\n+version = \"0.2.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1417,7 +1417,7 @@ version = \"0.7.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1510,7 +1510,7 @@ dependencies = [\n  \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_syntax 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1527,10 +1527,10 @@ dependencies = [\n \n [[package]]\n name = \"rand\"\n-version = \"0.3.18\"\n+version = \"0.3.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"fuchsia-zircon 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fuchsia-zircon 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1552,7 +1552,7 @@ dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1629,7 +1629,7 @@ dependencies = [\n  \"jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"languageserver-types 0.16.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rayon 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-analysis 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1650,7 +1650,7 @@ version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"radix_trie 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1708,11 +1708,11 @@ dependencies = [\n  \"backtrace 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -1774,8 +1774,8 @@ dependencies = [\n name = \"rustc_back\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -1794,7 +1794,7 @@ name = \"rustc_borrowck\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n@@ -1807,7 +1807,7 @@ name = \"rustc_const_eval\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -1837,9 +1837,9 @@ name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1852,7 +1852,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_allocator 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -1893,8 +1893,8 @@ name = \"rustc_incremental\"\n version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -1906,7 +1906,7 @@ dependencies = [\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1938,8 +1938,8 @@ dependencies = [\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n- \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -1958,7 +1958,7 @@ dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n@@ -1988,7 +1988,7 @@ dependencies = [\n name = \"rustc_passes\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n@@ -2027,7 +2027,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -2039,7 +2039,7 @@ dependencies = [\n name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -2056,9 +2056,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2085,8 +2085,8 @@ name = \"rustc_trans_utils\"\n version = \"0.0.0\"\n dependencies = [\n  \"ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -2111,7 +2111,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"fmt_macros 0.0.0\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -2150,7 +2150,7 @@ dependencies = [\n  \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2330,7 +2330,7 @@ dependencies = [\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"profiler_builtins 0.0.0\",\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_asan 0.0.0\",\n  \"rustc_lsan 0.0.0\",\n  \"rustc_msan 0.0.0\",\n@@ -2413,7 +2413,7 @@ name = \"syntax\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -2447,7 +2447,7 @@ version = \"0.52.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2469,7 +2469,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_pos 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2493,7 +2493,7 @@ name = \"tempdir\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2837,14 +2837,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"934799b6c1de475a012a02dab0ace1ace43789ee4b99bcfbf1a2e3e8ced5de82\"\n \"checksum failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c7cdda555bb90c9bb67a3b670a0f42de8e73f5981524123ad8578aafec8ddb8b\"\n \"checksum filetime 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa75ec8f7927063335a9583e7fa87b0110bb888cf766dc01b54c0ff70d760c8e\"\n-\"checksum flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6234dd4468ae5d1e2dbb06fe2b058696fdc50a339c68a393aefbf00bc81e423\"\n \"checksum flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fac2277e84e5e858483756647a9d0aa8d9a2b7cba517fd84325a0aaa69a0909\"\n \"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n \"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n \"checksum fs2 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ab76cfd2aaa59b7bf6688ad9ba15bbae64bff97f04ea02144cfd3443e5c2866\"\n-\"checksum fuchsia-zircon 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6c0581a4e363262e52b87f59ee2afe3415361c6ec35e665924eb08afe8ff159\"\n-\"checksum fuchsia-zircon-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"43f3795b4bae048dc6123a6b972cadde2e676f9ded08aef6bb77f5f157684a82\"\n+\"checksum fuchsia-zircon 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd510087c325af53ba24f3be8f1c081b0982319adcb8b03cad764512923ccc19\"\n+\"checksum fuchsia-zircon-sys 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08b3a6f13ad6b96572b53ce7af74543132f1a7055ccceb6d073dd36c54481859\"\n \"checksum futf 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51f93f3de6ba1794dcd5810b3546d004600a59a98266487c8407bc4b24e398f3\"\n \"checksum futures 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"118b49cac82e04121117cbd3121ede3147e885627d82c4546b87c702debb90c1\"\n \"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n@@ -2876,7 +2875,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum libgit2-sys 0.6.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82fc20bd8beefe7c9f98aae2d3cff78e57f544cdd83d58fe181ec37a5fbe0c77\"\n \"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n \"checksum libz-sys 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87f737ad6cc6fd6eefe3d9dc5412f1573865bded441300904d2f42269e140f16\"\n-\"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n+\"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n+\"checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum lzma-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1b93b78f89e8737dac81837fc8f5521ac162abcba902e1a3db949d55346d1da\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n@@ -2906,7 +2906,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum os_pipe 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"998bfbb3042e715190fe2a41abfa047d7e8cb81374d2977d7f100eacd8619cb1\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e7f7c9857874e54afeb950eebeae662b1e51a2493666d2ea4c0a5d91dcf0412\"\n-\"checksum parking_lot_core 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"12d20aac4f67aa75f681aded784bac91f910ba3f2af1812573cdcf687414e122\"\n+\"checksum parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6bf05dc61189828dfd7a59fd6e66d538e88d6b30390da1124a291e09fd3098b3\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n \"checksum phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cb325642290f28ee14d8c6201159949a872f220c62af6e110a56ea914fbe42fc\"\n@@ -2924,7 +2924,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum racer 2.0.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"034f1c4528581c40a60e96875467c03315868084e08ff4ceb46a00f7be3b16b4\"\n \"checksum radix_trie 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"211c49b6a9995cac0fd1dd9ca60b42cf3a51e151a12eb954b3a9e75513426ee8\"\n-\"checksum rand 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6475140dfd8655aeb72e1fd4b7a1cc1c202be65d71669476e392fe62532b9edd\"\n+\"checksum rand 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e7944d95d25ace8f377da3ac7068ce517e4c646754c43a1b1849177bbf72e59\"\n \"checksum rayon 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ed02d09394c94ffbdfdc755ad62a132e94c3224a8354e78a1200ced34df12edf\"\n \"checksum rayon-core 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e64b609139d83da75902f88fd6c01820046840a18471e4dfcd5ac7c0f46bea53\"\n \"checksum redox_syscall 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab105df655884ede59d45b7070c8a65002d921461ee813a024558ca16030eea0\""}, {"sha": "444a8fe5da87ada787299721764de0589d7cd722", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -16,5 +16,9 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-sanitizers --enable-profiler\n+ENV RUST_CONFIGURE_ARGS \\\n+ --build=x86_64-unknown-linux-gnu \\\n+ --enable-sanitizers \\\n+ --enable-profiler \\\n+ --enable-compiler-docs\n ENV SCRIPT python2.7 ../x.py test"}, {"sha": "e635df5204007e7496256236695ad80f154370f8", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -148,10 +148,11 @@ impl<T> TypedArena<T> {\n         }\n     }\n \n-    /// Allocates a slice of objects that are copy into the `TypedArena`, returning a mutable\n+    /// Allocates a slice of objects that are copied into the `TypedArena`, returning a mutable\n     /// reference to it. Will panic if passed a zero-sized types.\n     ///\n     /// Panics:\n+    ///\n     ///  - Zero-sized types\n     ///  - Zero-length slices\n     #[inline]\n@@ -369,6 +370,7 @@ impl DroplessArena {\n     /// reference to it. Will panic if passed a zero-sized type.\n     ///\n     /// Panics:\n+    ///\n     ///  - Zero-sized types\n     ///  - Zero-length slices\n     #[inline]"}, {"sha": "cd893b9784ab6aa4a117587df3348aa5a74d0428", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -306,7 +306,7 @@ pub enum LabelText<'a> {\n     LabelStr(Cow<'a, str>),\n \n     /// This kind of label uses the graphviz label escString type:\n-    /// http://www.graphviz.org/content/attrs#kescString\n+    /// <http://www.graphviz.org/content/attrs#kescString>\n     ///\n     /// Occurrences of backslashes (`\\`) are not escaped; instead they\n     /// are interpreted as initiating an escString escape sequence.\n@@ -326,7 +326,7 @@ pub enum LabelText<'a> {\n }\n \n /// The style for a node or edge.\n-/// See http://www.graphviz.org/doc/info/attrs.html#k:style for descriptions.\n+/// See <http://www.graphviz.org/doc/info/attrs.html#k:style> for descriptions.\n /// Note that some of these are not valid for edges.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Style {"}, {"sha": "9dad3c2031d40c9d6b2451f1dc2dc446cb32120b", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -54,4 +54,4 @@ byteorder = { version = \"1.1\", features = [\"i128\"]}\n # tl;dr; this is not needed to get `rustc` to compile, but if you remove it then\n #        later crate stop compiling. If you can remove this and everything\n #        compiles, then please feel free to do so!\n-flate2 = \"0.2\"\n+flate2 = \"1.0\""}, {"sha": "7e46c202a84d43d561e6b368d53a5225584fa23b", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -56,7 +56,7 @@ impl<M: DepTrackingMapConfig> MemoizationMap for RefCell<DepTrackingMap<M>> {\n     /// map; and `CurrentTask` represents the current task when\n     /// `memoize` is invoked.\n     ///\n-    /// **Important:* when `op` is invoked, the current task will be\n+    /// **Important:** when `op` is invoked, the current task will be\n     /// switched to `Map(key)`. Therefore, if `op` makes use of any\n     /// HIR nodes or shared state accessed through its closure\n     /// environment, it must explicitly register a read of that"}, {"sha": "3816bbc1a3378f06b69017e33fa6acefd22be80b", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -158,8 +158,8 @@ impl DepGraph {\n     /// what state they have access to. In particular, we want to\n     /// prevent implicit 'leaks' of tracked state into the task (which\n     /// could then be read without generating correct edges in the\n-    /// dep-graph -- see the [README] for more details on the\n-    /// dep-graph). To this end, the task function gets exactly two\n+    /// dep-graph -- see the module-level [README] for more details on\n+    /// the dep-graph). To this end, the task function gets exactly two\n     /// pieces of state: the context `cx` and an argument `arg`. Both\n     /// of these bits of state must be of some type that implements\n     /// `DepGraphSafe` and hence does not leak.\n@@ -178,7 +178,7 @@ impl DepGraph {\n     /// - If you need 3+ arguments, use a tuple for the\n     ///   `arg` parameter.\n     ///\n-    /// [README]: README.md\n+    /// [README]: https://github.com/rust-lang/rust/blob/master/src/librustc/dep_graph/README.md\n     pub fn with_task<C, A, R, HCX>(&self,\n                                    key: DepNode,\n                                    cx: C,"}, {"sha": "8e4a4d32c0badd5df7c597f3bece364c2b4fc0cb", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -71,13 +71,16 @@ pub enum Def {\n /// `base_def` is definition of resolved part of the\n /// path, `unresolved_segments` is the number of unresolved\n /// segments.\n-///     module::Type::AssocX::AssocY::MethodOrAssocType\n-///     ^~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-///     base_def      unresolved_segments = 3\n ///\n-///     <T as Trait>::AssocX::AssocY::MethodOrAssocType\n-///           ^~~~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~\n-///           base_def        unresolved_segments = 2\n+/// ```text\n+/// module::Type::AssocX::AssocY::MethodOrAssocType\n+/// ^~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+/// base_def      unresolved_segments = 3\n+///\n+/// <T as Trait>::AssocX::AssocY::MethodOrAssocType\n+///       ^~~~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~\n+///       base_def        unresolved_segments = 2\n+/// ```\n #[derive(Copy, Clone, Debug)]\n pub struct PathResolution {\n     base_def: Def,"}, {"sha": "1eaacdb1d7ff341cba89d1ccc922cdc5dc87bda0", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -33,6 +33,7 @@ use syntax_pos::Span;\n /// and a body (as well as a NodeId, a span, etc).\n ///\n /// More specifically, it is one of either:\n+///\n ///   - A function item,\n ///   - A closure expr (i.e. an ExprClosure), or\n ///   - The default implementation for a trait method."}, {"sha": "7d3699b35eb23b35377978ca5c10c7226e28eb20", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -588,7 +588,9 @@ pub type CrateConfig = HirVec<P<MetaItem>>;\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n-/// For more details, see [the module-level README](README.md).\n+/// For more details, see the module-level [README].\n+///\n+/// [README]: https://github.com/rust-lang/rust/blob/master/src/librustc/hir/README.md.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {\n     pub module: Mod,"}, {"sha": "f5b88dbc2a9c77aab5b619f5b9a524a80440ae28", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -147,21 +147,25 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// Let's work through an example to explain how it works.  Assume\n     /// the current function is as follows:\n     ///\n-    ///     fn foo<'a, 'b>(..) -> (impl Bar<'a>, impl Bar<'b>)\n+    /// ```text\n+    /// fn foo<'a, 'b>(..) -> (impl Bar<'a>, impl Bar<'b>)\n+    /// ```\n     ///\n     /// Here, we have two `impl Trait` types whose values are being\n     /// inferred (the `impl Bar<'a>` and the `impl\n     /// Bar<'b>`). Conceptually, this is sugar for a setup where we\n     /// define underlying abstract types (`Foo1`, `Foo2`) and then, in\n     /// the return type of `foo`, we *reference* those definitions:\n     ///\n-    ///     abstract type Foo1<'x>: Bar<'x>;\n-    ///     abstract type Foo2<'x>: Bar<'x>;\n-    ///     fn foo<'a, 'b>(..) -> (Foo1<'a>, Foo2<'b>) { .. }\n-    ///                        //  ^^^^ ^^\n-    ///                        //  |    |\n-    ///                        //  |    substs\n-    ///                        //  def_id\n+    /// ```text\n+    /// abstract type Foo1<'x>: Bar<'x>;\n+    /// abstract type Foo2<'x>: Bar<'x>;\n+    /// fn foo<'a, 'b>(..) -> (Foo1<'a>, Foo2<'b>) { .. }\n+    ///                    //  ^^^^ ^^\n+    ///                    //  |    |\n+    ///                    //  |    substs\n+    ///                    //  def_id\n+    /// ```\n     ///\n     /// As indicating in the comments above, each of those references\n     /// is (in the compiler) basically a substitution (`substs`)\n@@ -175,8 +179,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// `Foo2`.  That is, this gives rise to higher-order (pattern) unification\n     /// constraints like:\n     ///\n-    ///     for<'a> (Foo1<'a> = C1)\n-    ///     for<'b> (Foo1<'b> = C2)\n+    /// ```text\n+    /// for<'a> (Foo1<'a> = C1)\n+    /// for<'b> (Foo1<'b> = C2)\n+    /// ```\n     ///\n     /// For these equation to be satisfiable, the types `C1` and `C2`\n     /// can only refer to a limited set of regions. For example, `C1`\n@@ -189,15 +195,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// regions. In fact, it is fairly likely that they do! Consider\n     /// this possible definition of `foo`:\n     ///\n-    ///     fn foo<'a, 'b>(x: &'a i32, y: &'b i32) -> (impl Bar<'a>, impl Bar<'b>) {\n+    /// ```text\n+    /// fn foo<'a, 'b>(x: &'a i32, y: &'b i32) -> (impl Bar<'a>, impl Bar<'b>) {\n     ///         (&*x, &*y)\n     ///     }\n+    /// ```\n     ///\n     /// Here, the values for the concrete types of the two impl\n     /// traits will include inference variables:\n     ///\n-    ///     &'0 i32\n-    ///     &'1 i32\n+    /// ```text\n+    /// &'0 i32\n+    /// &'1 i32\n+    /// ```\n     ///\n     /// Ordinarily, the subtyping rules would ensure that these are\n     /// sufficiently large. But since `impl Bar<'a>` isn't a specific\n@@ -207,7 +217,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// inferred type are regions that could validly appear.\n     ///\n     /// This is actually a bit of a tricky constraint in general. We\n-    /// want to say that each variable (e.g., `'0``) can only take on\n+    /// want to say that each variable (e.g., `'0`) can only take on\n     /// values that were supplied as arguments to the abstract type\n     /// (e.g., `'a` for `Foo1<'a>`) or `'static`, which is always in\n     /// scope. We don't have a constraint quite of this kind in the current\n@@ -225,7 +235,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ///\n     /// In some cases, there is no minimum. Consider this example:\n     ///\n-    ///    fn baz<'a, 'b>() -> impl Trait<'a, 'b> { ... }\n+    /// ```text\n+    /// fn baz<'a, 'b>() -> impl Trait<'a, 'b> { ... }\n+    /// ```\n     ///\n     /// Here we would report an error, because `'a` and `'b` have no\n     /// relation to one another.\n@@ -245,8 +257,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// which is the current function. It also means that we can\n     /// take \"implied bounds\" into account in some cases:\n     ///\n-    ///     trait SomeTrait<'a, 'b> { }\n-    ///     fn foo<'a, 'b>(_: &'a &'b u32) -> impl SomeTrait<'a, 'b> { .. }\n+    /// ```text\n+    /// trait SomeTrait<'a, 'b> { }\n+    /// fn foo<'a, 'b>(_: &'a &'b u32) -> impl SomeTrait<'a, 'b> { .. }\n+    /// ```\n     ///\n     /// Here, the fact that `'b: 'a` is known only because of the\n     /// implied bounds from the `&'a &'b u32` parameter, and is not"}, {"sha": "049bf4470cbc64575b8ef5754a0d81b30590caeb", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -53,9 +53,9 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n /// expression for the indexed statement, until the end of the block.\n ///\n /// So: the following code can be broken down into the scopes beneath:\n-/// ```\n+///\n+/// ```text\n /// let a = f().g( 'b: { let x = d(); let y = d(); x.h(y)  }   ) ;\n-/// ```\n ///\n ///                                                              +-+ (D12.)\n ///                                                        +-+       (D11.)\n@@ -82,6 +82,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n /// (R10.): Remainder scope for block `'b:`, stmt 1 (let y = ...).\n /// (D11.): DestructionScope for temporaries and bindings from block `'b:`.\n /// (D12.): DestructionScope for temporaries created during M1 (e.g. f()).\n+/// ```\n ///\n /// Note that while the above picture shows the destruction scopes\n /// as following their corresponding node scopes, in the internal"}, {"sha": "3aa94b3469942bea97eedf6ef9e9b42779cf58fe", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! MIR datatypes and passes. See [the README](README.md) for details.\n+//! MIR datatypes and passes. See the module-level [README] for details.\n+//!\n+//! [README]: https://github.com/rust-lang/rust/blob/master/src/librustc/mir/README.md\n \n use graphviz::IntoCow;\n use middle::const_val::ConstVal;\n@@ -495,6 +497,7 @@ pub struct LocalDecl<'tcx> {\n     ///\n     /// That's it, if we have a let-statement like the one in this\n     /// function:\n+    ///\n     /// ```\n     /// fn foo(x: &str) {\n     ///     #[allow(unused_mut)]\n@@ -538,6 +541,7 @@ pub struct LocalDecl<'tcx> {\n     ///\n     /// The end result looks like this:\n     ///\n+    /// ```text\n     /// ROOT SCOPE\n     ///  \u2502{ argument x: &str }\n     ///  \u2502\n@@ -557,6 +561,7 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502{ let x: u32 }\n     ///  \u2502 \u2502\u2190 x.source_info.scope\n     ///  \u2502 \u2502\u2190 `drop(x)` // this accesses `x: u32`\n+    /// ```\n     pub syntactic_scope: VisibilityScope,\n }\n "}, {"sha": "6482ecc7ee16124f8597c8905f5a975f017ba189", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -906,6 +906,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     /// For defaulted traits, we use a co-inductive strategy to solve, so\n     /// that recursion is ok. This routine returns true if the top of the\n     /// stack (`cycle[0]`):\n+    ///\n     /// - is a defaulted trait, and\n     /// - it also appears in the backtrace at some position `X`; and,\n     /// - all the predicates at positions `X..` between `X` an the top are"}, {"sha": "6df6bb9df232044512896ae1db652ae9787fb40b", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -22,38 +22,38 @@ use ty::subst::Substs;\n /// Here are some common scenarios:\n ///\n /// 1. The simplest cases are where a pointer is not adjusted fat vs thin.\n-/// Here the pointer will be dereferenced N times (where a dereference can\n-/// happen to raw or borrowed pointers or any smart pointer which implements\n-/// Deref, including Box<_>). The types of dereferences is given by\n-/// `autoderefs`.  It can then be auto-referenced zero or one times, indicated\n-/// by `autoref`, to either a raw or borrowed pointer. In these cases unsize is\n-/// `false`.\n+///    Here the pointer will be dereferenced N times (where a dereference can\n+///    happen to raw or borrowed pointers or any smart pointer which implements\n+///    Deref, including Box<_>). The types of dereferences is given by\n+///    `autoderefs`.  It can then be auto-referenced zero or one times, indicated\n+///    by `autoref`, to either a raw or borrowed pointer. In these cases unsize is\n+///    `false`.\n ///\n /// 2. A thin-to-fat coercion involves unsizing the underlying data. We start\n-/// with a thin pointer, deref a number of times, unsize the underlying data,\n-/// then autoref. The 'unsize' phase may change a fixed length array to a\n-/// dynamically sized one, a concrete object to a trait object, or statically\n-/// sized struct to a dynamically sized one. E.g., &[i32; 4] -> &[i32] is\n-/// represented by:\n+///    with a thin pointer, deref a number of times, unsize the underlying data,\n+///    then autoref. The 'unsize' phase may change a fixed length array to a\n+///    dynamically sized one, a concrete object to a trait object, or statically\n+///    sized struct to a dynamically sized one. E.g., &[i32; 4] -> &[i32] is\n+///    represented by:\n ///\n-/// ```\n-/// Deref(None) -> [i32; 4],\n-/// Borrow(AutoBorrow::Ref) -> &[i32; 4],\n-/// Unsize -> &[i32],\n-/// ```\n+///    ```\n+///    Deref(None) -> [i32; 4],\n+///    Borrow(AutoBorrow::Ref) -> &[i32; 4],\n+///    Unsize -> &[i32],\n+///    ```\n ///\n-/// Note that for a struct, the 'deep' unsizing of the struct is not recorded.\n-/// E.g., `struct Foo<T> { x: T }` we can coerce &Foo<[i32; 4]> to &Foo<[i32]>\n-/// The autoderef and -ref are the same as in the above example, but the type\n-/// stored in `unsize` is `Foo<[i32]>`, we don't store any further detail about\n-/// the underlying conversions from `[i32; 4]` to `[i32]`.\n+///    Note that for a struct, the 'deep' unsizing of the struct is not recorded.\n+///    E.g., `struct Foo<T> { x: T }` we can coerce &Foo<[i32; 4]> to &Foo<[i32]>\n+///    The autoderef and -ref are the same as in the above example, but the type\n+///    stored in `unsize` is `Foo<[i32]>`, we don't store any further detail about\n+///    the underlying conversions from `[i32; 4]` to `[i32]`.\n ///\n /// 3. Coercing a `Box<T>` to `Box<Trait>` is an interesting special case.  In\n-/// that case, we have the pointer we need coming in, so there are no\n-/// autoderefs, and no autoref. Instead we just do the `Unsize` transformation.\n-/// At some point, of course, `Box` should move out of the compiler, in which\n-/// case this is analogous to transforming a struct. E.g., Box<[i32; 4]> ->\n-/// Box<[i32]> is an `Adjust::Unsize` with the target `Box<[i32]>`.\n+///    that case, we have the pointer we need coming in, so there are no\n+///    autoderefs, and no autoref. Instead we just do the `Unsize` transformation.\n+///    At some point, of course, `Box` should move out of the compiler, in which\n+///    case this is analogous to transforming a struct. E.g., Box<[i32; 4]> ->\n+///    Box<[i32]> is an `Adjust::Unsize` with the target `Box<[i32]>`.\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Adjustment<'tcx> {\n     pub kind: Adjust<'tcx>,"}, {"sha": "e21eb8bbf8ad25847d91f3770b6ef78fbe7f1680", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -778,8 +778,10 @@ impl<'tcx> CommonTypes<'tcx> {\n \n /// The central data structure of the compiler. It stores references\n /// to the various **arenas** and also houses the results of the\n-/// various **compiler queries** that have been performed. See [the\n-/// README](README.md) for more deatils.\n+/// various **compiler queries** that have been performed. See the\n+/// module-level [README] for more details.\n+///\n+/// [README]: https://github.com/rust-lang/rust/blob/master/src/librustc/ty/README.md\n #[derive(Copy, Clone)]\n pub struct TyCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     gcx: &'a GlobalCtxt<'gcx>,"}, {"sha": "63bf52a9bdf786d7603cf2cf43f8e4a012927d0f", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -28,7 +28,7 @@ pub enum InstanceDef<'tcx> {\n     Item(DefId),\n     Intrinsic(DefId),\n \n-    /// <fn() as FnTrait>::call_*\n+    /// \\<fn() as FnTrait>::call_*\n     /// def-id is FnTrait::call_*\n     FnPtrShim(DefId, Ty<'tcx>),\n "}, {"sha": "2a8c259dff89b4bab9009a3a75d3d1424dd7b366", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -340,8 +340,8 @@ impl AddAssign for Size {\n \n /// Alignment of a type in bytes, both ABI-mandated and preferred.\n /// Each field is a power of two, giving the alignment a maximum\n-/// value of 2^(2^8 - 1), which is limited by LLVM to a i32, with\n-/// a maximum capacity of 2^31 - 1 or 2147483647.\n+/// value of 2<sup>(2<sup>8</sup> - 1)</sup>, which is limited by LLVM to a i32, with\n+/// a maximum capacity of 2<sup>31</sup> - 1 or 2147483647.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Align {\n     abi: u8,\n@@ -651,11 +651,13 @@ impl Scalar {\n }\n \n /// The first half of a fat pointer.\n+///\n /// - For a trait object, this is the address of the box.\n /// - For a slice, this is the base address.\n pub const FAT_PTR_ADDR: usize = 0;\n \n /// The second half of a fat pointer.\n+///\n /// - For a trait object, this is the address of the vtable.\n /// - For a slice, this is the length.\n pub const FAT_PTR_EXTRA: usize = 1;"}, {"sha": "2cea8c01cdf9604fde2adbe03f19928c67542618", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -1098,8 +1098,8 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n /// In particular, form #1 is \"desugared\" to the combination of a\n /// normal trait predicate (`T : TraitRef<...>`) and one of these\n /// predicates. Form #2 is a broader form in that it also permits\n-/// equality between arbitrary types. Processing an instance of Form\n-/// #2 eventually yields one of these `ProjectionPredicate`\n+/// equality between arbitrary types. Processing an instance of\n+/// Form #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct ProjectionPredicate<'tcx> {\n@@ -1401,7 +1401,7 @@ bitflags! {\n         /// fields/variants) and as such, whether downstream crates must match exhaustively on the\n         /// fields/variants of this data type.\n         ///\n-        /// See RFC 2008 (https://github.com/rust-lang/rfcs/pull/2008).\n+        /// See RFC 2008 (<https://github.com/rust-lang/rfcs/pull/2008>).\n         const IS_NON_EXHAUSTIVE   = 1 << 5;\n     }\n }"}, {"sha": "433c72f4b2ca67c503ccbb82974896d474c1f152", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -673,6 +673,7 @@ impl<T> Binder<T> {\n     /// accounting.\n     ///\n     /// Some examples where `skip_binder` is reasonable:\n+    ///\n     /// - extracting the def-id from a PolyTraitRef;\n     /// - comparing the self type of a PolyTraitRef to see if it is equal to\n     ///   a type parameter `X`, since the type `X`  does not reference any regions\n@@ -992,8 +993,8 @@ pub type Region<'tcx> = &'tcx RegionKind;\n /// happen, you can use `leak_check`. This is more clearly explained\n /// by infer/higher_ranked/README.md.\n ///\n-/// [1] http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n-/// [2] http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n+/// [1]: http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n+/// [2]: http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n #[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub enum RegionKind {\n     // Region bound in a type or fn declaration which will be\n@@ -1647,10 +1648,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     ///\n     /// Note that during type checking, we use an inference variable\n     /// to represent the closure kind, because it has not yet been\n-    /// inferred. Once [upvar inference] is complete, that type varibale\n-    /// will be unified.\n-    ///\n-    /// [upvar inference]: src/librustc_typeck/check/upvar.rs\n+    /// inferred. Once upvar inference (in `src/librustc_typeck/check/upvar.rs`)\n+    /// is complete, that type variable will be unified.\n     pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {\n         match self.sty {\n             TyInt(int_ty) => match int_ty {"}, {"sha": "3e76b60b84a13ad69b53a51d30a6e007c2fa6e08", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -65,11 +65,11 @@ pub trait Semantics: Sized {\n     /// Number of bits in the significand. This includes the integer bit.\n     const PRECISION: usize;\n \n-    /// The largest E such that 2^E is representable; this matches the\n+    /// The largest E such that 2<sup>E</sup> is representable; this matches the\n     /// definition of IEEE 754.\n     const MAX_EXP: ExpInt;\n \n-    /// The smallest E such that 2^E is a normalized number; this\n+    /// The smallest E such that 2<sup>E</sup> is a normalized number; this\n     /// matches the definition of IEEE 754.\n     const MIN_EXP: ExpInt = -Self::MAX_EXP + 1;\n \n@@ -2608,7 +2608,7 @@ mod sig {\n     ///\n     /// `(n - 1) * (n - 1) + 2 * (n - 1) == (n - 1) * (n + 1)`\n     ///\n-    /// which is less than n^2.\n+    /// which is less than n<sup>2</sup>.\n     pub(super) fn widening_mul(a: Limb, b: Limb) -> [Limb; 2] {\n         let mut wide = [0, 0];\n "}, {"sha": "3afc2f684009d41e8d23b113bd2d9a9a59fd2dd8", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -10,7 +10,8 @@\n \n //! Port of LLVM's APFloat software floating-point implementation from the\n //! following C++ sources (please update commit hash when backporting):\n-//! https://github.com/llvm-mirror/llvm/tree/23efab2bbd424ed13495a420ad8641cb2c6c28f9\n+//! <https://github.com/llvm-mirror/llvm/tree/23efab2bbd424ed13495a420ad8641cb2c6c28f9>\n+//!\n //! * `include/llvm/ADT/APFloat.h` -> `Float` and `FloatConvert` traits\n //! * `lib/Support/APFloat.cpp` -> `ieee` and `ppc` modules\n //! * `unittests/ADT/APFloatTest.cpp` -> `tests` directory\n@@ -221,8 +222,8 @@ pub struct ParseError(pub &'static str);\n ///\n /// `apfloat` does not provide any exception handling beyond default exception\n /// handling. We represent Signaling NaNs via IEEE-754R 2008 6.2.1 should clause\n-/// by encoding Signaling NaNs with the first bit of its trailing significand as\n-/// 0.\n+/// by encoding Signaling NaNs with the first bit of its trailing significand\n+/// as 0.\n ///\n /// Future work\n /// ===========\n@@ -259,11 +260,11 @@ pub trait Float\n     /// Number of bits in the significand. This includes the integer bit.\n     const PRECISION: usize;\n \n-    /// The largest E such that 2^E is representable; this matches the\n+    /// The largest E such that 2<sup>E</sup> is representable; this matches the\n     /// definition of IEEE 754.\n     const MAX_EXP: ExpInt;\n \n-    /// The smallest E such that 2^E is a normalized number; this\n+    /// The smallest E such that 2<sup>E</sup> is a normalized number; this\n     /// matches the definition of IEEE 754.\n     const MIN_EXP: ExpInt;\n \n@@ -571,7 +572,7 @@ pub trait Float\n     ///\n     fn ilogb(self) -> ExpInt;\n \n-    /// Returns: self * 2^exp for integral exponents.\n+    /// Returns: self * 2<sup>exp</sup> for integral exponents.\n     fn scalbn_r(self, exp: ExpInt, round: Round) -> Self;\n     fn scalbn(self, exp: ExpInt) -> Self {\n         self.scalbn_r(exp, Round::NearestTiesToEven)"}, {"sha": "6fcdedfb3404211de8df2d057cf83711826ec2bf", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -367,7 +367,7 @@ pub struct TargetOptions {\n     /// Whether the linker support GNU-like arguments such as -O. Defaults to false.\n     pub linker_is_gnu: bool,\n     /// The MinGW toolchain has a known issue that prevents it from correctly\n-    /// handling COFF object files with more than 2^15 sections. Since each weak\n+    /// handling COFF object files with more than 2<sup>15</sup> sections. Since each weak\n     /// symbol needs its own COMDAT section, weak linkage implies a large\n     /// number sections that easily exceeds the given limit for larger\n     /// codebases. Consequently we want a way to disallow weak linkage on some"}, {"sha": "dc487f1162ca9d074b8735937e069b846a7dbc60", "filename": "src/librustc_data_structures/control_flow_graph/dominators/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -12,7 +12,7 @@\n //! A Simple, Fast Dominance Algorithm.\n //! Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy\n //! Rice Computer Science TS-06-33870\n-//! https://www.cs.rice.edu/~keith/EMBED/dom.pdf\n+//! <https://www.cs.rice.edu/~keith/EMBED/dom.pdf>\n \n use super::ControlFlowGraph;\n use super::iterate::reverse_post_order;"}, {"sha": "45f5e9feaf8889f9a79e580a4c8d944593a7faea", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -9,7 +9,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-flate2 = \"0.2\"\n+flate2 = \"1.0\"\n log = \"0.3\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "e9a8c2427b3734ba5135ad7e28822bf4aa622998", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -149,7 +149,7 @@\n //! The binary of a crate will not only contain machine code for the items\n //! defined in the source code of that crate. It will also contain monomorphic\n //! instantiations of any extern generic functions and of functions marked with\n-//! #[inline].\n+//! `#[inline]`.\n //! The collection algorithm handles this more or less mono. If it is\n //! about to create a mono item for something with an external `DefId`,\n //! it will take a look if the MIR for that item is available, and if so just"}, {"sha": "996195800cef891664b3c6a4cc4104fefd808d98", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -94,7 +94,7 @@\n //!   inlined, so it can distribute function instantiations accordingly. Since\n //!   there is no way of knowing for sure which functions LLVM will decide to\n //!   inline in the end, we apply a heuristic here: Only functions marked with\n-//!   #[inline] are considered for inlining by the partitioner. The current\n+//!   `#[inline]` are considered for inlining by the partitioner. The current\n //!   implementation will not try to determine if a function is likely to be\n //!   inlined by looking at the functions definition.\n //!"}, {"sha": "c0f830f1fbe2ec2d846f95c2bd30f8e4554e42de", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -57,7 +57,7 @@\n //! #![plugin(myplugin)]\n //! ```\n //!\n-//! See the [`plugin` feature](../../unstable-book/language-features/plugin.html) of\n+//! See the [`plugin` feature](../unstable-book/language-features/plugin.html) of\n //! the Unstable Book for more examples.\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "7b242d2b867b60b66f6bdbdd7767dba0ed9ecd9e", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -11,7 +11,7 @@ test = false\n \n [dependencies]\n bitflags = \"1.0\"\n-flate2 = \"0.2\"\n+flate2 = \"1.0\"\n jobserver = \"0.1.5\"\n log = \"0.3\"\n num_cpus = \"1.0\""}, {"sha": "9e4630c08f9f8a07d8a90c3c7a6322492766a8c7", "filename": "src/librustc_trans/back/bytecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans%2Fback%2Fbytecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans%2Fback%2Fbytecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fbytecode.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -74,7 +74,7 @@ pub fn encode(identifier: &str, bytecode: &[u8]) -> Vec<u8> {\n     encoded.extend_from_slice(&[0, 0, 0, 0, 0, 0, 0, 0]);\n \n     let before = encoded.len();\n-    DeflateEncoder::new(&mut encoded, Compression::Fast)\n+    DeflateEncoder::new(&mut encoded, Compression::fast())\n         .write_all(bytecode)\n         .unwrap();\n     let after = encoded.len();"}, {"sha": "7c8479d1a0c3f911b5178c48af1578debc1f83ef", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -651,7 +651,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n \n     assert!(kind == MetadataKind::Compressed);\n     let mut compressed = tcx.metadata_encoding_version();\n-    DeflateEncoder::new(&mut compressed, Compression::Fast)\n+    DeflateEncoder::new(&mut compressed, Compression::fast())\n         .write_all(&metadata.raw_data).unwrap();\n \n     let llmeta = C_bytes_in_context(metadata_llcx, &compressed);"}, {"sha": "83f06bff33441199dcc7d65396438aecd2433d33", "filename": "src/librustc_trans_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2FCargo.toml?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -11,7 +11,7 @@ test = false\n \n [dependencies]\n ar = \"0.3.0\"\n-flate2 = \"0.2\"\n+flate2 = \"1.0\"\n log = \"0.3\"\n \n syntax = { path = \"../libsyntax\" }"}, {"sha": "47143893e59e23393da133feff95be4f6aa17100", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -225,7 +225,7 @@ impl TransCrate for MetadataOnlyTransCrate {\n                 out_filename(sess, crate_type, &outputs, &trans.0.crate_name.as_str());\n             let mut compressed = trans.0.metadata_version.clone();\n             let metadata = if crate_type == CrateType::CrateTypeDylib {\n-                DeflateEncoder::new(&mut compressed, Compression::Fast)\n+                DeflateEncoder::new(&mut compressed, Compression::fast())\n                     .write_all(&trans.0.metadata.raw_data)\n                     .unwrap();\n                 &compressed"}, {"sha": "15682b2d459fa30dde1f820a1ae04441985a2988", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -1543,7 +1543,7 @@ pub enum TraitObjectSyntax {\n \n /// Inline assembly dialect.\n ///\n-/// E.g. `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")``\n+/// E.g. `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum AsmDialect {\n     Att,\n@@ -1552,7 +1552,7 @@ pub enum AsmDialect {\n \n /// Inline assembly.\n ///\n-/// E.g. `\"={eax}\"(result)` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")``\n+/// E.g. `\"={eax}\"(result)` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct InlineAsmOutput {\n     pub constraint: Symbol,"}, {"sha": "129defd20932499e1773d6457f4f588a75b237c0", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -391,6 +391,7 @@ impl CodeMap {\n     /// Returns `Some(span)`, a union of the lhs and rhs span.  The lhs must precede the rhs. If\n     /// there are gaps between lhs and rhs, the resulting union will cross these gaps.\n     /// For this to work, the spans have to be:\n+    ///\n     ///    * the ctxt of both spans much match\n     ///    * the lhs span needs to end on the same line the rhs span begins\n     ///    * the lhs span must start at or before the rhs span"}, {"sha": "0d3be28ffefe56915d83dff535199bf30b65611e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -776,7 +776,8 @@ impl<'a> ExtCtxt<'a> {\n     /// Emit `msg` attached to `sp`, and stop compilation immediately.\n     ///\n     /// `span_err` should be strongly preferred where-ever possible:\n-    /// this should *only* be used when\n+    /// this should *only* be used when:\n+    ///\n     /// - continuing has a high risk of flow-on errors (e.g. errors in\n     ///   declaring a macro would cause all uses of that macro to\n     ///   complain about \"undefined macro\"), or"}, {"sha": "e5ef9393e7bf7067c5f27c48b47ee0104f854555", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -63,9 +63,9 @@ macro_rules! declare_features {\n \n         /// A set of features to be used by later passes.\n         pub struct Features {\n-            /// #![feature] attrs for stable language features, for error reporting\n+            /// `#![feature]` attrs for stable language features, for error reporting\n             pub declared_stable_lang_features: Vec<(Symbol, Span)>,\n-            /// #![feature] attrs for non-language (library) features\n+            /// `#![feature]` attrs for non-language (library) features\n             pub declared_lib_features: Vec<(Symbol, Span)>,\n             $(pub $feature: bool),+\n         }"}, {"sha": "06a9306501c04fa24e41d98647509d11c272ddda", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -10,10 +10,10 @@\n \n //! Machinery for hygienic macros, inspired by the MTWT[1] paper.\n //!\n-//! [1] Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler.\n-//! 2012. *Macros that work together: Compile-time bindings, partial expansion,\n+//! [1] Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler. 2012.\n+//! *Macros that work together: Compile-time bindings, partial expansion,\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n-//! DOI=10.1017/S0956796812000093 http://dx.doi.org/10.1017/S0956796812000093\n+//! DOI=10.1017/S0956796812000093 <http://dx.doi.org/10.1017/S0956796812000093>\n \n use Span;\n use symbol::{Ident, Symbol};\n@@ -224,6 +224,7 @@ impl SyntaxContext {\n \n     /// Adjust this context for resolution in a scope created by the given expansion.\n     /// For example, consider the following three resolutions of `f`:\n+    ///\n     /// ```rust\n     /// mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty.\n     /// m!(f);\n@@ -255,7 +256,8 @@ impl SyntaxContext {\n \n     /// Adjust this context for resolution in a scope created by the given expansion\n     /// via a glob import with the given `SyntaxContext`.\n-    /// For example,\n+    /// For example:\n+    ///\n     /// ```rust\n     /// m!(f);\n     /// macro m($i:ident) {\n@@ -293,6 +295,7 @@ impl SyntaxContext {\n     }\n \n     /// Undo `glob_adjust` if possible:\n+    ///\n     /// ```rust\n     /// if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) {\n     ///     assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope));"}, {"sha": "9f8b4a73d0cc0c6369a6cb7236d2e154d94cc270", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -53,13 +53,13 @@ pub trait Stats {\n \n     /// Arithmetic mean (average) of the samples: sum divided by sample-count.\n     ///\n-    /// See: https://en.wikipedia.org/wiki/Arithmetic_mean\n+    /// See: <https://en.wikipedia.org/wiki/Arithmetic_mean>\n     fn mean(&self) -> f64;\n \n     /// Median of the samples: value separating the lower half of the samples from the higher half.\n     /// Equal to `self.percentile(50.0)`.\n     ///\n-    /// See: https://en.wikipedia.org/wiki/Median\n+    /// See: <https://en.wikipedia.org/wiki/Median>\n     fn median(&self) -> f64;\n \n     /// Variance of the samples: bias-corrected mean of the squares of the differences of each\n@@ -68,15 +68,15 @@ pub trait Stats {\n     /// bias that would appear if we calculated a population variance, by dividing by `(n-1)` rather\n     /// than `n`.\n     ///\n-    /// See: https://en.wikipedia.org/wiki/Variance\n+    /// See: <https://en.wikipedia.org/wiki/Variance>\n     fn var(&self) -> f64;\n \n     /// Standard deviation: the square root of the sample variance.\n     ///\n     /// Note: this is not a robust statistic for non-normal distributions. Prefer the\n     /// `median_abs_dev` for unknown distributions.\n     ///\n-    /// See: https://en.wikipedia.org/wiki/Standard_deviation\n+    /// See: <https://en.wikipedia.org/wiki/Standard_deviation>\n     fn std_dev(&self) -> f64;\n \n     /// Standard deviation as a percent of the mean value. See `std_dev` and `mean`.\n@@ -91,7 +91,7 @@ pub trait Stats {\n     /// by the constant `1.4826` to allow its use as a consistent estimator for the standard\n     /// deviation.\n     ///\n-    /// See: http://en.wikipedia.org/wiki/Median_absolute_deviation\n+    /// See: <http://en.wikipedia.org/wiki/Median_absolute_deviation>\n     fn median_abs_dev(&self) -> f64;\n \n     /// Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.\n@@ -103,21 +103,21 @@ pub trait Stats {\n     ///\n     /// Calculated by linear interpolation between closest ranks.\n     ///\n-    /// See: http://en.wikipedia.org/wiki/Percentile\n+    /// See: <http://en.wikipedia.org/wiki/Percentile>\n     fn percentile(&self, pct: f64) -> f64;\n \n     /// Quartiles of the sample: three values that divide the sample into four equal groups, each\n     /// with 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\n     /// function may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\n     /// is otherwise equivalent.\n     ///\n-    /// See also: https://en.wikipedia.org/wiki/Quartile\n+    /// See also: <https://en.wikipedia.org/wiki/Quartile>\n     fn quartiles(&self) -> (f64, f64, f64);\n \n     /// Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\n     /// percentile (3rd quartile). See `quartiles`.\n     ///\n-    /// See also: https://en.wikipedia.org/wiki/Interquartile_range\n+    /// See also: <https://en.wikipedia.org/wiki/Interquartile_range>\n     fn iqr(&self) -> f64;\n }\n \n@@ -311,7 +311,7 @@ fn percentile_of_sorted(sorted_samples: &[f64], pct: f64) -> f64 {\n /// It differs from trimming in that it does not change the number of samples,\n /// just changes the values of those that are outliers.\n ///\n-/// See: http://en.wikipedia.org/wiki/Winsorising\n+/// See: <http://en.wikipedia.org/wiki/Winsorising>\n pub fn winsorize(samples: &mut [f64], pct: f64) {\n     let mut tmp = samples.to_vec();\n     local_sort(&mut tmp);"}, {"sha": "de798e2cf0baa9e81550019ac335b778cedd9a16", "filename": "src/test/ui-fulldeps/issue-44953/issue-44953.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5f2745e7ccd247da50f0cb18318ac477e5bccbf/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f2745e7ccd247da50f0cb18318ac477e5bccbf/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.rs?ref=d5f2745e7ccd247da50f0cb18318ac477e5bccbf", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-\n-\n-#![feature(proc_macro)]\n-#![allow(unused_macros)]\n-\n-#[macro_use] extern crate log; //~ ERROR use of unstable library feature\n-\n-pub fn main() {\n-    info!(\"This is a log message.\");\n-}"}, {"sha": "e0e96ec3f4fca44210ee0213afdea27e51a3ca6c", "filename": "src/test/ui-fulldeps/issue-44953/issue-44953.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5f2745e7ccd247da50f0cb18318ac477e5bccbf/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5f2745e7ccd247da50f0cb18318ac477e5bccbf/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-44953%2Fissue-44953.stderr?ref=d5f2745e7ccd247da50f0cb18318ac477e5bccbf", "patch": "@@ -1,19 +0,0 @@\n-error: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead? (see issue #27812)\n-  --> $DIR/issue-44953.rs:16:14\n-   |\n-16 | #[macro_use] extern crate log; //~ ERROR use of unstable library feature\n-   |              ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(rustc_private)] to the crate attributes to enable\n-\n-error: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead? (see issue #27812)\n-  --> $DIR/issue-44953.rs:19:5\n-   |\n-19 |     info!(\"This is a log message.\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(rustc_private)] to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "469525ae7386ff1200cea7841e745b2dd769894b", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5deba220d4c42b5313d7e71731ce5e8698866684/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -132,7 +132,16 @@ fn check(cache: &mut Cache,\n     // Unfortunately we're not 100% full of valid links today to we need a few\n     // whitelists to get this past `make check` today.\n     // FIXME(#32129)\n-    if file.ends_with(\"std/string/struct.String.html\") {\n+    if file.ends_with(\"std/string/struct.String.html\") ||\n+       file.ends_with(\"interpret/struct.ValTy.html\") ||\n+       file.ends_with(\"symbol/struct.InternedString.html\") ||\n+       file.ends_with(\"ast/struct.ThinVec.html\") ||\n+       file.ends_with(\"util/struct.ThinVec.html\") ||\n+       file.ends_with(\"util/struct.RcSlice.html\") ||\n+       file.ends_with(\"layout/struct.TyLayout.html\") ||\n+       file.ends_with(\"ty/struct.Slice.html\") ||\n+       file.ends_with(\"ty/enum.Attributes.html\") ||\n+       file.ends_with(\"ty/struct.SymbolName.html\") {\n         return None;\n     }\n     // FIXME(#32553)\n@@ -144,7 +153,16 @@ fn check(cache: &mut Cache,\n        file.ends_with(\"struct.BTreeSet.html\") ||\n        file.ends_with(\"btree_map/struct.BTreeMap.html\") ||\n        file.ends_with(\"hash_map/struct.HashMap.html\") ||\n-       file.ends_with(\"hash_set/struct.HashSet.html\") {\n+       file.ends_with(\"hash_set/struct.HashSet.html\") ||\n+       file.ends_with(\"sync/struct.Lrc.html\") ||\n+       file.ends_with(\"sync/struct.RwLock.html\") {\n+        return None;\n+    }\n+    // FIXME(#47038)\n+    if file.ends_with(\"deriving/generic/index.html\") ||\n+       file.ends_with(\"deriving/generic/macro.vec.html\") ||\n+       file.ends_with(\"deriving/custom/macro.panic.html\") ||\n+       file.ends_with(\"proc_macro_impl/macro.panic.html\") {\n         return None;\n     }\n "}, {"sha": "745a020e924c0532b01e8f017ed72820913642ee", "filename": "src/tools/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer?ref=5deba220d4c42b5313d7e71731ce5e8698866684", "patch": "@@ -1 +1 @@\n-Subproject commit 0ddd53c4bc2a76df565a1c1fc0cc6f19f254b51e\n+Subproject commit 745a020e924c0532b01e8f017ed72820913642ee"}]}