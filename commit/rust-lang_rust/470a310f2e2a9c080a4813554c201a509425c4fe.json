{"sha": "470a310f2e2a9c080a4813554c201a509425c4fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MGEzMTBmMmUyYTljMDgwYTQ4MTM1NTRjMjAxYTUwOTQyNWM0ZmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T13:28:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-16T13:28:27Z"}, "message": "Implement place_field for unsized places", "tree": {"sha": "319000b8aa51af581ec59d905057d43161a8b048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/319000b8aa51af581ec59d905057d43161a8b048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/470a310f2e2a9c080a4813554c201a509425c4fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/470a310f2e2a9c080a4813554c201a509425c4fe", "html_url": "https://github.com/rust-lang/rust/commit/470a310f2e2a9c080a4813554c201a509425c4fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/470a310f2e2a9c080a4813554c201a509425c4fe/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086ff67cff3c9c3d2315252d1b05c91ad87e0fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/086ff67cff3c9c3d2315252d1b05c91ad87e0fc0", "html_url": "https://github.com/rust-lang/rust/commit/086ff67cff3c9c3d2315252d1b05c91ad87e0fc0"}], "stats": {"total": 71, "additions": 22, "deletions": 49}, "files": [{"sha": "25bae13ff30b37f505d6872dc2a034c75362ac95", "filename": "0005-Disable-some-more-unsupported-stuff-in-libcore.patch", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/470a310f2e2a9c080a4813554c201a509425c4fe/0005-Disable-some-more-unsupported-stuff-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/470a310f2e2a9c080a4813554c201a509425c4fe/0005-Disable-some-more-unsupported-stuff-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0005-Disable-some-more-unsupported-stuff-in-libcore.patch?ref=470a310f2e2a9c080a4813554c201a509425c4fe", "patch": "@@ -4,35 +4,18 @@ Date: Thu, 23 Aug 2018 11:15:01 +0200\n Subject: [PATCH] Disable some more unsupported stuff in libcore\n \n ---\n- src/libcore/cell.rs    | 6 +++---\n  src/libcore/cmp.rs     | 5 ++++-\n  src/libcore/num/mod.rs | 8 ++++++--\n- src/libcore/str/mod.rs | 6 +++---\n- 4 files changed, 16 insertions(+), 9 deletions(-)\n+ 2 files changed, 9 insertions(+), 3 deletions(-)\n \n-diff --git a/src/libcore/cell.rs b/src/libcore/cell.rs\n-index 009aba5..2aa76e3 100644\n---- a/src/libcore/cell.rs\n-+++ b/src/libcore/cell.rs\n-@@ -1532,7 +1532,7 @@ impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n- \n- #[allow(unused)]\n- fn assert_coerce_unsized(a: UnsafeCell<&i32>, b: Cell<&i32>, c: RefCell<&i32>) {\n--    let _: UnsafeCell<&dyn Send> = a;\n--    let _: Cell<&dyn Send> = b;\n--    let _: RefCell<&dyn Send> = c;\n-+    //let _: UnsafeCell<&dyn Send> = a;\n-+    //let _: Cell<&dyn Send> = b;\n-+    //let _: RefCell<&dyn Send> = c;\n- }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n index a6e6496..f9374ea 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n @@ -496,6 +496,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  impl Eq for Ordering {}\n- \n+\n +/*\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  impl Ord for Ordering {\n@@ -42,7 +25,7 @@ index a6e6496..f9374ea 100644\n      }\n  }\n +*/\n- \n+\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  impl PartialOrd for Ordering {\n      #[inline]\n@@ -52,7 +35,7 @@ index a6e6496..f9374ea 100644\n +        None\n      }\n  }\n- \n+\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n index 5d00949..f077f1d 100644\n --- a/src/libcore/num/mod.rs\n@@ -67,7 +50,7 @@ index 5d00949..f077f1d 100644\n +                0\n              }\n          }\n- \n+\n @@ -2295,7 +2297,9 @@ assert_eq!(m, \", $reversed, \");\n              #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n              #[rustc_const_unstable(feature = \"const_int_conversion\")]\n@@ -80,24 +63,5 @@ index 5d00949..f077f1d 100644\n +                0\n              }\n          }\n- \n-diff --git a/src/libcore/str/mod.rs b/src/libcore/str/mod.rs\n-index 810d19d..4c68370 100644\n---- a/src/libcore/str/mod.rs\n-+++ b/src/libcore/str/mod.rs\n-@@ -26,9 +26,9 @@ use mem;\n- \n- pub mod pattern;\n- \n--#[unstable(feature = \"str_internals\", issue = \"0\")]\n--#[allow(missing_docs)]\n--pub mod lossy;\n-+//#[unstable(feature = \"str_internals\", issue = \"0\")]\n-+//#[allow(missing_docs)]\n-+//pub mod lossy;\n- \n- /// A trait to abstract the idea of creating a new instance of a type from a\n- /// string.\n--- \n+--\n 2.11.0\n-"}, {"sha": "67ebf94cf916dc5d2fd9bc3e9c68e623f4894271", "filename": "examples/example.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470a310f2e2a9c080a4813554c201a509425c4fe/examples%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470a310f2e2a9c080a4813554c201a509425c4fe/examples%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fexample.rs?ref=470a310f2e2a9c080a4813554c201a509425c4fe", "patch": "@@ -184,3 +184,11 @@ fn some_promoted_tuple() -> &'static (&'static str, &'static str) {\n fn index_slice(s: &[u8]) -> u8 {\n     s[2]\n }\n+\n+pub struct StrWrapper {\n+    s: str,\n+}\n+\n+fn str_wrapper_get(w: &StrWrapper) -> &str {\n+    &w.s\n+}"}, {"sha": "ad7269bccc4538fcabd90ee3b758518068b3971f", "filename": "src/common.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/470a310f2e2a9c080a4813554c201a509425c4fe/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470a310f2e2a9c080a4813554c201a509425c4fe/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=470a310f2e2a9c080a4813554c201a509425c4fe", "patch": "@@ -447,14 +447,15 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         field: mir::Field,\n     ) -> CPlace<'tcx> {\n-        let layout = self.layout();\n-        if layout.is_unsized() {\n-            unimpl!(\"unsized place_field\");\n+        match self {\n+            CPlace::Var(var, layout) => {\n+                bug!(\"Tried to project {:?}, which is put in SSA var {:?}\", layout.ty, var);\n+            }\n+            CPlace::Addr(base, extra, layout) => {\n+                let (field_ptr, field_layout) = codegen_field(fx, base, layout, field);\n+                CPlace::Addr(field_ptr, extra, field_layout)\n+            }\n         }\n-\n-        let base = self.expect_addr();\n-        let (field_ptr, field_layout) = codegen_field(fx, base, layout, field);\n-        CPlace::Addr(field_ptr, None, field_layout)\n     }\n \n     pub fn place_index("}]}