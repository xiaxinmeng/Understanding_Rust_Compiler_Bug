{"sha": "3ee9c2e1a07e78e1705b89616e14c0292ecde025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZTljMmUxYTA3ZTc4ZTE3MDViODk2MTZlMTRjMDI5MmVjZGUwMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T15:36:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T15:36:33Z"}, "message": "Auto merge of #6037 - matthiaskrgr:single_char_insert, r=flip1995\n\nsingle_char_insert_str: lint using insert_str() on single-char literals and suggest insert()\n\nFixes #6026\n\nchangelog: add single_char_insert_str lint which lints using string.insert_str() with single char literals and suggests string.insert() with a char", "tree": {"sha": "b66f8972eb3c9b95deba9b58e8749a42e7c34bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66f8972eb3c9b95deba9b58e8749a42e7c34bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ee9c2e1a07e78e1705b89616e14c0292ecde025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee9c2e1a07e78e1705b89616e14c0292ecde025", "html_url": "https://github.com/rust-lang/rust/commit/3ee9c2e1a07e78e1705b89616e14c0292ecde025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ee9c2e1a07e78e1705b89616e14c0292ecde025/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c45255b14573e9cf641a766d225bc73ae7f36fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c45255b14573e9cf641a766d225bc73ae7f36fc8", "html_url": "https://github.com/rust-lang/rust/commit/c45255b14573e9cf641a766d225bc73ae7f36fc8"}, {"sha": "f8ac1f99efd996bea2b05c83a915a830d69e1690", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ac1f99efd996bea2b05c83a915a830d69e1690", "html_url": "https://github.com/rust-lang/rust/commit/f8ac1f99efd996bea2b05c83a915a830d69e1690"}], "stats": {"total": 403, "additions": 278, "deletions": 125}, "files": [{"sha": "be47eeaa07379682155b1f1e08a2350e48392c5d", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -22,7 +22,7 @@ Current beta, release 2020-11-19\n * [`map_err_ignore`] [#5998](https://github.com/rust-lang/rust-clippy/pull/5998)\n * [`rc_buffer`] [#6044](https://github.com/rust-lang/rust-clippy/pull/6044)\n * [`to_string_in_display`] [#5831](https://github.com/rust-lang/rust-clippy/pull/5831)\n-* [`single_char_push_str`] [#5881](https://github.com/rust-lang/rust-clippy/pull/5881)\n+* `single_char_push_str` [#5881](https://github.com/rust-lang/rust-clippy/pull/5881)\n \n ### Moves and Deprecations\n \n@@ -1939,8 +1939,8 @@ Released 2018-09-13\n [`should_assert_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_assert_eq\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n+[`single_char_add_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\n [`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n-[`single_char_push_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_push_str\n [`single_component_path_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports\n [`single_element_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match"}, {"sha": "db31b213464a9941a59dd105b81b31d146306dde", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -714,8 +714,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::RESULT_MAP_OR_INTO_OPTION,\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n+        &methods::SINGLE_CHAR_ADD_STR,\n         &methods::SINGLE_CHAR_PATTERN,\n-        &methods::SINGLE_CHAR_PUSH_STR,\n         &methods::SKIP_WHILE_NEXT,\n         &methods::STRING_EXTEND_CHARS,\n         &methods::SUSPICIOUS_MAP,\n@@ -1439,8 +1439,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n+        LintId::of(&methods::SINGLE_CHAR_ADD_STR),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n-        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n@@ -1632,7 +1632,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n-        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n+        LintId::of(&methods::SINGLE_CHAR_ADD_STR),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n         LintId::of(&methods::UNNECESSARY_LAZY_EVALUATIONS),\n@@ -1959,6 +1959,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\");\n     ls.register_renamed(\"clippy::identity_conversion\", \"clippy::useless_conversion\");\n     ls.register_renamed(\"clippy::zero_width_space\", \"clippy::invisible_characters\");\n+    ls.register_renamed(\"clippy::single_char_push_str\", \"clippy::single_char_add_str\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "558c90249ccd305eeb727ba29a5f0fdb9bbd6984", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -1290,8 +1290,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns when using `push_str` with a single-character string literal,\n-    /// and `push` with a `char` would work fine.\n+    /// **What it does:** Warns when using `push_str`/`insert_str` with a single-character string literal\n+    /// where `push`/`insert` with a `char` would work fine.\n     ///\n     /// **Why is this bad?** It's less clear that we are pushing a single character.\n     ///\n@@ -1300,16 +1300,18 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let mut string = String::new();\n+    /// string.insert_str(0, \"R\");\n     /// string.push_str(\"R\");\n     /// ```\n     /// Could be written as\n     /// ```rust\n     /// let mut string = String::new();\n+    /// string.insert(0, 'R');\n     /// string.push('R');\n     /// ```\n-    pub SINGLE_CHAR_PUSH_STR,\n+    pub SINGLE_CHAR_ADD_STR,\n     style,\n-    \"`push_str()` used with a single-character string literal as parameter\"\n+    \"`push_str()` or `insert_str()` used with a single-character string literal as parameter\"\n }\n \n declare_clippy_lint! {\n@@ -1390,7 +1392,7 @@ declare_lint_pass!(Methods => [\n     INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n-    SINGLE_CHAR_PUSH_STR,\n+    SINGLE_CHAR_ADD_STR,\n     SEARCH_IS_SOME,\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n@@ -1521,6 +1523,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n                         lint_single_char_push_string(cx, expr, args);\n+                    } else if match_def_path(cx, fn_def_id, &paths::INSERT_STR) {\n+                        lint_single_char_insert_string(cx, expr, args);\n                     }\n                 }\n \n@@ -3202,7 +3206,7 @@ fn get_hint_if_single_char_arg(\n         if let hir::ExprKind::Lit(lit) = &arg.kind;\n         if let ast::LitKind::Str(r, style) = lit.node;\n         let string = r.as_str();\n-        if string.len() == 1;\n+        if string.chars().count() == 1;\n         then {\n             let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n             let ch = if let ast::StrStyle::Raw(nhash) = style {\n@@ -3241,11 +3245,12 @@ fn lint_single_char_pattern(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &h\n fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n-        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n+        let base_string_snippet =\n+            snippet_with_applicability(cx, args[0].span.source_callsite(), \"..\", &mut applicability);\n         let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n         span_lint_and_sugg(\n             cx,\n-            SINGLE_CHAR_PUSH_STR,\n+            SINGLE_CHAR_ADD_STR,\n             expr.span,\n             \"calling `push_str()` using a single-character string literal\",\n             \"consider using `push` with a character literal\",\n@@ -3255,6 +3260,26 @@ fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args\n     }\n }\n \n+/// lint for length-1 `str`s as argument for `insert_str`\n+fn lint_single_char_insert_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[2], &mut applicability) {\n+        let base_string_snippet =\n+            snippet_with_applicability(cx, args[0].span.source_callsite(), \"_\", &mut applicability);\n+        let pos_arg = snippet_with_applicability(cx, args[1].span, \"..\", &mut applicability);\n+        let sugg = format!(\"{}.insert({}, {})\", base_string_snippet, pos_arg, extension_string);\n+        span_lint_and_sugg(\n+            cx,\n+            SINGLE_CHAR_ADD_STR,\n+            expr.span,\n+            \"calling `insert_str()` using a single-character string literal\",\n+            \"consider using `insert` with a character literal\",\n+            sugg,\n+            applicability,\n+        );\n+    }\n+}\n+\n /// Checks for the `USELESS_ASREF` lint.\n fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_ref_args: &[hir::Expr<'_>]) {\n     // when we get here, we've already checked that the call name is \"as_ref\" or \"as_mut\""}, {"sha": "a6e9c2331896dfe950ffa3c2161669597a94090d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -52,6 +52,7 @@ pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entr\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n+pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];"}, {"sha": "b22bb07423874908279a3c72c9b016900ac37f64", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -2147,16 +2147,16 @@ vec![\n         module: \"non_expressive_names\",\n     },\n     Lint {\n-        name: \"single_char_pattern\",\n-        group: \"perf\",\n-        desc: \"using a single-character str where a char could be used, e.g., `_.split(\\\"x\\\")`\",\n+        name: \"single_char_add_str\",\n+        group: \"style\",\n+        desc: \"`push_str()` or `insert_str()` used with a single-character string literal as parameter\",\n         deprecation: None,\n         module: \"methods\",\n     },\n     Lint {\n-        name: \"single_char_push_str\",\n-        group: \"style\",\n-        desc: \"`push_str()` used with a single-character string literal as parameter\",\n+        name: \"single_char_pattern\",\n+        group: \"perf\",\n+        desc: \"using a single-character str where a char could be used, e.g., `_.split(\\\"x\\\")`\",\n         deprecation: None,\n         module: \"methods\",\n     },"}, {"sha": "63a6d37a9cce9ddbc5346920fa865405c6219be3", "filename": "tests/ui/single_char_add_str.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_add_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_add_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_add_str.fixed?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+#![warn(clippy::single_char_add_str)]\n+\n+macro_rules! get_string {\n+    () => {\n+        String::from(\"Hello world!\")\n+    };\n+}\n+\n+fn main() {\n+    // `push_str` tests\n+\n+    let mut string = String::new();\n+    string.push('R');\n+    string.push('\\'');\n+\n+    string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push('\\x52');\n+    string.push('\\u{0052}');\n+    string.push('a');\n+\n+    get_string!().push('\u00f6');\n+\n+    // `insert_str` tests\n+\n+    let mut string = String::new();\n+    string.insert(0, 'R');\n+    string.insert(1, '\\'');\n+\n+    string.insert(0, 'u');\n+    string.insert_str(2, \"st\");\n+    string.insert_str(0, \"\");\n+    string.insert(0, '\\x52');\n+    string.insert(0, '\\u{0052}');\n+    let x: usize = 2;\n+    string.insert(x, 'a');\n+    const Y: usize = 1;\n+    string.insert(Y, 'a');\n+    string.insert(Y, '\"');\n+    string.insert(Y, '\\'');\n+\n+    get_string!().insert(1, '?');\n+}"}, {"sha": "a799ea7d88564a188c3b4da1e2c14efeb8ff2fcf", "filename": "tests/ui/single_char_add_str.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_add_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_add_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_add_str.rs?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+#![warn(clippy::single_char_add_str)]\n+\n+macro_rules! get_string {\n+    () => {\n+        String::from(\"Hello world!\")\n+    };\n+}\n+\n+fn main() {\n+    // `push_str` tests\n+\n+    let mut string = String::new();\n+    string.push_str(\"R\");\n+    string.push_str(\"'\");\n+\n+    string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push_str(\"\\x52\");\n+    string.push_str(\"\\u{0052}\");\n+    string.push_str(r##\"a\"##);\n+\n+    get_string!().push_str(\"\u00f6\");\n+\n+    // `insert_str` tests\n+\n+    let mut string = String::new();\n+    string.insert_str(0, \"R\");\n+    string.insert_str(1, \"'\");\n+\n+    string.insert(0, 'u');\n+    string.insert_str(2, \"st\");\n+    string.insert_str(0, \"\");\n+    string.insert_str(0, \"\\x52\");\n+    string.insert_str(0, \"\\u{0052}\");\n+    let x: usize = 2;\n+    string.insert_str(x, r##\"a\"##);\n+    const Y: usize = 1;\n+    string.insert_str(Y, r##\"a\"##);\n+    string.insert_str(Y, r##\"\"\"##);\n+    string.insert_str(Y, r##\"'\"##);\n+\n+    get_string!().insert_str(1, \"?\");\n+}"}, {"sha": "55d91583ad04d30d6deb01c4d5baeafc1746e292", "filename": "tests/ui/single_char_add_str.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_add_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_add_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_add_str.stderr?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -0,0 +1,94 @@\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:14:5\n+   |\n+LL |     string.push_str(\"R\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('R')`\n+   |\n+   = note: `-D clippy::single-char-add-str` implied by `-D warnings`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:15:5\n+   |\n+LL |     string.push_str(\"'\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:20:5\n+   |\n+LL |     string.push_str(\"/x52\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/x52')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:21:5\n+   |\n+LL |     string.push_str(\"/u{0052}\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/u{0052}')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:22:5\n+   |\n+LL |     string.push_str(r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('a')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:24:5\n+   |\n+LL |     get_string!().push_str(\"\u00f6\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `get_string!().push('\u00f6')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:29:5\n+   |\n+LL |     string.insert_str(0, \"R\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, 'R')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:30:5\n+   |\n+LL |     string.insert_str(1, \"'\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(1, '/'')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:35:5\n+   |\n+LL |     string.insert_str(0, \"/x52\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/x52')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:36:5\n+   |\n+LL |     string.insert_str(0, \"/u{0052}\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/u{0052}')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:38:5\n+   |\n+LL |     string.insert_str(x, r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(x, 'a')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:40:5\n+   |\n+LL |     string.insert_str(Y, r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(Y, 'a')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:41:5\n+   |\n+LL |     string.insert_str(Y, r##\"\"\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(Y, '\"')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:42:5\n+   |\n+LL |     string.insert_str(Y, r##\"'\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(Y, '/'')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:44:5\n+   |\n+LL |     get_string!().insert_str(1, \"?\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `get_string!().insert(1, '?')`\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "d8b5f19e144dcfd0567610bc8ef6302109125eb3", "filename": "tests/ui/single_char_pattern.fixed", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.fixed?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -12,15 +12,9 @@ fn main() {\n \n     let y = \"x\";\n     x.split(y);\n-    // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_clippy::single_char_pattern`\n-    // should have done this but produced an ICE\n-    //\n-    // We may not want to suggest changing these anyway\n-    // See: https://github.com/rust-lang/rust-clippy/issues/650#issuecomment-184328984\n-    x.split(\"\u00df\");\n-    x.split(\"\u211d\");\n-    x.split(\"\ud83d\udca3\");\n+    x.split('\u00df');\n+    x.split('\u211d');\n+    x.split('\ud83d\udca3');\n     // Can't use this lint for unicode code points which don't fit in a char\n     x.split(\"\u2764\ufe0f\");\n     x.contains('x');"}, {"sha": "a7bc73e3756dfb13e30925159b237321d296a62c", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -12,12 +12,6 @@ fn main() {\n \n     let y = \"x\";\n     x.split(y);\n-    // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_clippy::single_char_pattern`\n-    // should have done this but produced an ICE\n-    //\n-    // We may not want to suggest changing these anyway\n-    // See: https://github.com/rust-lang/rust-clippy/issues/650#issuecomment-184328984\n     x.split(\"\u00df\");\n     x.split(\"\u211d\");\n     x.split(\"\ud83d\udca3\");"}, {"sha": "ee4e7e50efd17371a24a1eb904a8db47e4b12a27", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9c2e1a07e78e1705b89616e14c0292ecde025/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=3ee9c2e1a07e78e1705b89616e14c0292ecde025", "patch": "@@ -7,160 +7,178 @@ LL |     x.split(\"x\");\n    = note: `-D clippy::single-char-pattern` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:26:16\n+  --> $DIR/single_char_pattern.rs:15:13\n+   |\n+LL |     x.split(\"\u00df\");\n+   |             ^^^ help: try using a `char` instead: `'\u00df'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:16:13\n+   |\n+LL |     x.split(\"\u211d\");\n+   |             ^^^ help: try using a `char` instead: `'\u211d'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:17:13\n+   |\n+LL |     x.split(\"\ud83d\udca3\");\n+   |             ^^^^ help: try using a `char` instead: `'\ud83d\udca3'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:20:16\n    |\n LL |     x.contains(\"x\");\n    |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:27:19\n+  --> $DIR/single_char_pattern.rs:21:19\n    |\n LL |     x.starts_with(\"x\");\n    |                   ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:28:17\n+  --> $DIR/single_char_pattern.rs:22:17\n    |\n LL |     x.ends_with(\"x\");\n    |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:29:12\n+  --> $DIR/single_char_pattern.rs:23:12\n    |\n LL |     x.find(\"x\");\n    |            ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:30:13\n+  --> $DIR/single_char_pattern.rs:24:13\n    |\n LL |     x.rfind(\"x\");\n    |             ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:31:14\n+  --> $DIR/single_char_pattern.rs:25:14\n    |\n LL |     x.rsplit(\"x\");\n    |              ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:32:24\n+  --> $DIR/single_char_pattern.rs:26:24\n    |\n LL |     x.split_terminator(\"x\");\n    |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:33:25\n+  --> $DIR/single_char_pattern.rs:27:25\n    |\n LL |     x.rsplit_terminator(\"x\");\n    |                         ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:34:17\n+  --> $DIR/single_char_pattern.rs:28:17\n    |\n LL |     x.splitn(0, \"x\");\n    |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:35:18\n+  --> $DIR/single_char_pattern.rs:29:18\n    |\n LL |     x.rsplitn(0, \"x\");\n    |                  ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:36:15\n+  --> $DIR/single_char_pattern.rs:30:15\n    |\n LL |     x.matches(\"x\");\n    |               ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:37:16\n+  --> $DIR/single_char_pattern.rs:31:16\n    |\n LL |     x.rmatches(\"x\");\n    |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:38:21\n+  --> $DIR/single_char_pattern.rs:32:21\n    |\n LL |     x.match_indices(\"x\");\n    |                     ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:39:22\n+  --> $DIR/single_char_pattern.rs:33:22\n    |\n LL |     x.rmatch_indices(\"x\");\n    |                      ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:40:26\n+  --> $DIR/single_char_pattern.rs:34:26\n    |\n LL |     x.trim_start_matches(\"x\");\n    |                          ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:41:24\n+  --> $DIR/single_char_pattern.rs:35:24\n    |\n LL |     x.trim_end_matches(\"x\");\n    |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:43:13\n+  --> $DIR/single_char_pattern.rs:37:13\n    |\n LL |     x.split(\"/n\");\n    |             ^^^^ help: try using a `char` instead: `'/n'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:44:13\n+  --> $DIR/single_char_pattern.rs:38:13\n    |\n LL |     x.split(\"'\");\n    |             ^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:45:13\n+  --> $DIR/single_char_pattern.rs:39:13\n    |\n LL |     x.split(\"/'\");\n    |             ^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:50:31\n+  --> $DIR/single_char_pattern.rs:44:31\n    |\n LL |     x.replace(\";\", \",\").split(\",\"); // issue #2978\n    |                               ^^^ help: try using a `char` instead: `','`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:51:19\n+  --> $DIR/single_char_pattern.rs:45:19\n    |\n LL |     x.starts_with(\"/x03\"); // issue #2996\n    |                   ^^^^^^ help: try using a `char` instead: `'/x03'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:58:13\n+  --> $DIR/single_char_pattern.rs:52:13\n    |\n LL |     x.split(r\"a\");\n    |             ^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:59:13\n+  --> $DIR/single_char_pattern.rs:53:13\n    |\n LL |     x.split(r#\"a\"#);\n    |             ^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:60:13\n+  --> $DIR/single_char_pattern.rs:54:13\n    |\n LL |     x.split(r###\"a\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:61:13\n+  --> $DIR/single_char_pattern.rs:55:13\n    |\n LL |     x.split(r###\"'\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:62:13\n+  --> $DIR/single_char_pattern.rs:56:13\n    |\n LL |     x.split(r###\"#\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'#'`\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "0812c026a644fbdd84f05569edc5cf954a8a109f", "filename": "tests/ui/single_char_push_str.fixed", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c45255b14573e9cf641a766d225bc73ae7f36fc8/tests%2Fui%2Fsingle_char_push_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c45255b14573e9cf641a766d225bc73ae7f36fc8/tests%2Fui%2Fsingle_char_push_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.fixed?ref=c45255b14573e9cf641a766d225bc73ae7f36fc8", "patch": "@@ -1,15 +0,0 @@\n-// run-rustfix\n-#![warn(clippy::single_char_push_str)]\n-\n-fn main() {\n-    let mut string = String::new();\n-    string.push('R');\n-    string.push('\\'');\n-\n-    string.push('u');\n-    string.push_str(\"st\");\n-    string.push_str(\"\");\n-    string.push('\\x52');\n-    string.push('\\u{0052}');\n-    string.push('a');\n-}"}, {"sha": "ab293bbe4eeb5ce8171ec28f610410a45f2d5cb8", "filename": "tests/ui/single_char_push_str.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c45255b14573e9cf641a766d225bc73ae7f36fc8/tests%2Fui%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45255b14573e9cf641a766d225bc73ae7f36fc8/tests%2Fui%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.rs?ref=c45255b14573e9cf641a766d225bc73ae7f36fc8", "patch": "@@ -1,15 +0,0 @@\n-// run-rustfix\n-#![warn(clippy::single_char_push_str)]\n-\n-fn main() {\n-    let mut string = String::new();\n-    string.push_str(\"R\");\n-    string.push_str(\"'\");\n-\n-    string.push('u');\n-    string.push_str(\"st\");\n-    string.push_str(\"\");\n-    string.push_str(\"\\x52\");\n-    string.push_str(\"\\u{0052}\");\n-    string.push_str(r##\"a\"##);\n-}"}, {"sha": "0e9bdaa23e7e8474accd8321884cc0861db8405c", "filename": "tests/ui/single_char_push_str.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c45255b14573e9cf641a766d225bc73ae7f36fc8/tests%2Fui%2Fsingle_char_push_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c45255b14573e9cf641a766d225bc73ae7f36fc8/tests%2Fui%2Fsingle_char_push_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.stderr?ref=c45255b14573e9cf641a766d225bc73ae7f36fc8", "patch": "@@ -1,34 +0,0 @@\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:6:5\n-   |\n-LL |     string.push_str(\"R\");\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('R')`\n-   |\n-   = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:7:5\n-   |\n-LL |     string.push_str(\"'\");\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:12:5\n-   |\n-LL |     string.push_str(\"/x52\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/x52')`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:13:5\n-   |\n-LL |     string.push_str(\"/u{0052}\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/u{0052}')`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:14:5\n-   |\n-LL |     string.push_str(r##\"a\"##);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('a')`\n-\n-error: aborting due to 5 previous errors\n-"}]}