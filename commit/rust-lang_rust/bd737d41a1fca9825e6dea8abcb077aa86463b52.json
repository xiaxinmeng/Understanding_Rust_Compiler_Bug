{"sha": "bd737d41a1fca9825e6dea8abcb077aa86463b52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNzM3ZDQxYTFmY2E5ODI1ZTZkZWE4YWJjYjA3N2FhODY0NjNiNTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-10T04:39:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-10T04:39:37Z"}, "message": "libcore: Fix Windows resolve errors. rs=bustage", "tree": {"sha": "857df29c3208e45b4d46f95e7ebc6ede2fe22b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/857df29c3208e45b4d46f95e7ebc6ede2fe22b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd737d41a1fca9825e6dea8abcb077aa86463b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd737d41a1fca9825e6dea8abcb077aa86463b52", "html_url": "https://github.com/rust-lang/rust/commit/bd737d41a1fca9825e6dea8abcb077aa86463b52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd737d41a1fca9825e6dea8abcb077aa86463b52/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc22a35dfaab2df77584e332ee05d6592a28b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc22a35dfaab2df77584e332ee05d6592a28b76", "html_url": "https://github.com/rust-lang/rust/commit/1cc22a35dfaab2df77584e332ee05d6592a28b76"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "2c9a2c4fdadb5e513bfa054a4b5afb9a28538388", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd737d41a1fca9825e6dea8abcb077aa86463b52/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd737d41a1fca9825e6dea8abcb077aa86463b52/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=bd737d41a1fca9825e6dea8abcb077aa86463b52", "patch": "@@ -513,9 +513,10 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n-                pub use libc::types::os::arch::c95::{c_void, c_char, c_int,\n+                use libc::types::common::c95::c_void;\n+                use libc::types::os::arch::c95::{c_char, c_int,\n                                                      c_ulong, wchar_t};\n-                pub use libc::types::os::arch::c99::{c_ulonglong};\n+                use libc::types::os::arch::c99::{c_ulonglong};\n \n                 pub type BOOL = c_int;\n                 pub type BYTE = u8;\n@@ -1135,7 +1136,7 @@ pub mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod stat_ {\n-            use libc::funcs::posix88::stat_::stat;\n+            use libc::types::os::common::posix01::stat;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n             #[link_name = \"_chmod\"]\n@@ -1191,8 +1192,9 @@ pub mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod unistd {\n+            use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_int, c_uint, c_char,\n-                                             c_long, size_t, c_void};\n+                                             c_long, size_t};\n \n             #[link_name = \"_access\"]\n             fn access(path: *c_char, amode: c_int) -> c_int;"}, {"sha": "4f4571e32c142ccd6a6a591f6d1b9f798fa35dce", "filename": "src/libcore/os.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd737d41a1fca9825e6dea8abcb077aa86463b52/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd737d41a1fca9825e6dea8abcb077aa86463b52/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=bd737d41a1fca9825e6dea8abcb077aa86463b52", "patch": "@@ -254,7 +254,7 @@ mod global_env {\n \n         #[cfg(windows)]\n         pub fn getenv(n: &str) -> Option<~str> {\n-            use os::win32::*;\n+            use os::win32::{as_utf16_p, fill_utf16_buf_and_decode};\n             do as_utf16_p(n) |u| {\n                 do fill_utf16_buf_and_decode() |buf, sz| {\n                     libc::GetEnvironmentVariableW(u, buf, sz)\n@@ -275,7 +275,7 @@ mod global_env {\n \n         #[cfg(windows)]\n         pub fn setenv(n: &str, v: &str) {\n-            use os::win32::*;\n+            use os::win32::as_utf16_p;\n             do as_utf16_p(n) |nbuf| {\n                 do as_utf16_p(v) |vbuf| {\n                     libc::SetEnvironmentVariableW(nbuf, vbuf);\n@@ -428,7 +428,7 @@ pub fn self_exe_path() -> Option<Path> {\n \n     #[cfg(windows)]\n     fn load_self() -> Option<~str> {\n-        use os::win32::*;\n+        use os::win32::fill_utf16_buf_and_decode;\n         do fill_utf16_buf_and_decode() |buf, sz| {\n             libc::GetModuleFileNameW(0u as libc::DWORD, buf, sz)\n         }\n@@ -591,7 +591,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n \n     #[cfg(windows)]\n     fn mkdir(p: &Path, _mode: c_int) -> bool {\n-        use os::win32::*;\n+        use os::win32::as_utf16_p;\n         // FIXME: turn mode into something useful? #2623\n         do as_utf16_p(p.to_str()) |buf| {\n             libc::CreateDirectoryW(buf, unsafe {\n@@ -639,7 +639,7 @@ pub fn remove_dir(p: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn rmdir(p: &Path) -> bool {\n-        use os::win32::*;\n+        use os::win32::as_utf16_p;\n         return do as_utf16_p(p.to_str()) |buf| {\n             libc::RemoveDirectoryW(buf) != (0 as libc::BOOL)\n         };\n@@ -658,7 +658,7 @@ pub fn change_dir(p: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn chdir(p: &Path) -> bool {\n-        use os::win32::*;\n+        use os::win32::as_utf16_p;\n         return do as_utf16_p(p.to_str()) |buf| {\n             libc::SetCurrentDirectoryW(buf) != (0 as libc::BOOL)\n         };\n@@ -678,7 +678,7 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn do_copy_file(from: &Path, to: &Path) -> bool {\n-        use os::win32::*;\n+        use os::win32::as_utf16_p;\n         return do as_utf16_p(from.to_str()) |fromp| {\n             do as_utf16_p(to.to_str()) |top| {\n                 libc::CopyFileW(fromp, top, (0 as libc::BOOL)) !=\n@@ -738,7 +738,7 @@ pub fn remove_file(p: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn unlink(p: &Path) -> bool {\n-        use os::win32::*;\n+        use os::win32::as_utf16_p;\n         return do as_utf16_p(p.to_str()) |buf| {\n             libc::DeleteFileW(buf) != (0 as libc::BOOL)\n         };"}]}