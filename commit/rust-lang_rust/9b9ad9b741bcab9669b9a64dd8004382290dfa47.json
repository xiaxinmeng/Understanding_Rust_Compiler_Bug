{"sha": "9b9ad9b741bcab9669b9a64dd8004382290dfa47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOWFkOWI3NDFiY2FiOTY2OWI5YTY0ZGQ4MDA0MzgyMjkwZGZhNDc=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-04-08T02:13:23Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-04-11T19:31:46Z"}, "message": "Simplify GenericPath::set_extension.", "tree": {"sha": "070e2af7cb4dc6d98499f826ff5330eede5ee318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/070e2af7cb4dc6d98499f826ff5330eede5ee318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b9ad9b741bcab9669b9a64dd8004382290dfa47", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9ad9b741bcab9669b9a64dd8004382290dfa47", "html_url": "https://github.com/rust-lang/rust/commit/9b9ad9b741bcab9669b9a64dd8004382290dfa47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b9ad9b741bcab9669b9a64dd8004382290dfa47/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e20488a5d1258b1582caa2db77e5210b8bd28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e20488a5d1258b1582caa2db77e5210b8bd28f", "html_url": "https://github.com/rust-lang/rust/commit/d1e20488a5d1258b1582caa2db77e5210b8bd28f"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "660f92d8f7b929b406c88fae6e15380cb49e0b5d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9b9ad9b741bcab9669b9a64dd8004382290dfa47/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b9ad9b741bcab9669b9a64dd8004382290dfa47/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=9b9ad9b741bcab9669b9a64dd8004382290dfa47", "patch": "@@ -287,42 +287,29 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Fails the task if the extension contains a NUL.\n     fn set_extension<T: BytesContainer>(&mut self, extension: T) {\n         assert!(!contains_nul(&extension));\n-        // borrowck causes problems here too\n-        let val = {\n-            match self.filename() {\n-                None => None,\n-                Some(name) => {\n-                    let dot = '.' as u8;\n-                    match name.rposition_elem(&dot) {\n-                        None | Some(0) => {\n-                            if extension.container_as_bytes().is_empty() {\n-                                None\n-                            } else {\n-                                let mut v;\n-                                let extension = extension.container_as_bytes();\n-                                v = slice::with_capacity(name.len() + extension.len() + 1);\n-                                v.push_all(name);\n-                                v.push(dot);\n-                                v.push_all(extension);\n-                                Some(v)\n-                            }\n-                        }\n-                        Some(idx) => {\n-                            if extension.container_as_bytes().is_empty() {\n-                                Some(name.slice_to(idx).to_owned())\n-                            } else {\n-                                let mut v;\n-                                let extension = extension.container_as_bytes();\n-                                v = slice::with_capacity(idx + extension.len() + 1);\n-                                v.push_all(name.slice_to(idx+1));\n-                                v.push_all(extension);\n-                                Some(v)\n-                            }\n-                        }\n-                    }\n+\n+        let val = self.filename().and_then(|name| {\n+            let dot = '.' as u8;\n+            let extlen = extension.container_as_bytes().len();\n+            match (name.rposition_elem(&dot), extlen) {\n+                (None, 0) | (Some(0), 0) => None,\n+                (Some(idx), 0) => Some(name.slice_to(idx).to_owned()),\n+                (idx, extlen) => {\n+                    let idx = match idx {\n+                        None | Some(0) => name.len(),\n+                        Some(val) => val\n+                    };\n+\n+                    let mut v;\n+                    v = slice::with_capacity(idx + extlen + 1);\n+                    v.push_all(name.slice_to(idx));\n+                    v.push(dot);\n+                    v.push_all(extension.container_as_bytes());\n+                    Some(v)\n                 }\n             }\n-        };\n+        });\n+\n         match val {\n             None => (),\n             Some(v) => unsafe { self.set_filename_unchecked(v) }"}]}