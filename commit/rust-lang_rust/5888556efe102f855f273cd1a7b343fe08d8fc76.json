{"sha": "5888556efe102f855f273cd1a7b343fe08d8fc76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ODg1NTZlZmUxMDJmODU1ZjI3M2NkMWE3YjM0M2ZlMDhkOGZjNzY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-16T22:52:05Z"}, "message": "Pass ImmTy by reference not value", "tree": {"sha": "80d8693746702a208655723ec7bee31ba1700cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d8693746702a208655723ec7bee31ba1700cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5888556efe102f855f273cd1a7b343fe08d8fc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5888556efe102f855f273cd1a7b343fe08d8fc76", "html_url": "https://github.com/rust-lang/rust/commit/5888556efe102f855f273cd1a7b343fe08d8fc76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5888556efe102f855f273cd1a7b343fe08d8fc76/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0c46d07eba2fc385b6d31a883c177c91ac3e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0c46d07eba2fc385b6d31a883c177c91ac3e95", "html_url": "https://github.com/rust-lang/rust/commit/fe0c46d07eba2fc385b6d31a883c177c91ac3e95"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2d9e6df0ab86073729c3d9892369191761cc4cc9", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=5888556efe102f855f273cd1a7b343fe08d8fc76", "patch": "@@ -32,7 +32,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Misc => {\n                 let src = self.read_immediate(src)?;\n-                let res = self.misc_cast(src, cast_ty)?;\n+                let res = self.misc_cast(&src, cast_ty)?;\n                 self.write_immediate(res, dest)?;\n             }\n \n@@ -107,7 +107,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     fn misc_cast(\n         &self,\n-        src: ImmTy<'tcx, M::PointerTag>,\n+        src: &ImmTy<'tcx, M::PointerTag>,\n         cast_ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx, Immediate<M::PointerTag>> {\n         use rustc_middle::ty::TyKind::*;\n@@ -158,13 +158,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let dest_layout = self.layout_of(cast_ty)?;\n             if dest_layout.size == src.layout.size {\n                 // Thin or fat pointer that just hast the ptr kind of target type changed.\n-                return Ok(*src);\n+                return Ok(**src);\n             } else {\n                 // Casting the metadata away from a fat ptr.\n                 assert_eq!(src.layout.size, 2 * self.memory.pointer_size());\n                 assert_eq!(dest_layout.size, self.memory.pointer_size());\n                 assert!(src.layout.ty.is_unsafe_ptr());\n-                return match *src {\n+                return match **src {\n                     Immediate::ScalarPair(data, _) => Ok(data.into()),\n                     Immediate::Scalar(..) => span_bug!(\n                         self.cur_span(),"}, {"sha": "2eba2c4e5338ba1f490714f10e33f38120db90d7", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=5888556efe102f855f273cd1a7b343fe08d8fc76", "patch": "@@ -198,7 +198,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::Memory\n         let ty = mplace.layout.ty;\n         if let ty::Ref(_, referenced_ty, ref_mutability) = *ty.kind() {\n             let value = self.ecx.read_immediate(&(*mplace).into())?;\n-            let mplace = self.ecx.ref_to_mplace(value)?;\n+            let mplace = self.ecx.ref_to_mplace(&value)?;\n             assert_eq!(mplace.layout.ty, referenced_ty);\n             // Handle trait object vtables.\n             if let ty::Dynamic(..) ="}, {"sha": "ab1ab69c8d5131f752eb5564b7fb4a1dea62b0b1", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=5888556efe102f855f273cd1a7b343fe08d8fc76", "patch": "@@ -143,7 +143,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::min_align_of_val | sym::size_of_val => {\n                 // Avoid `deref_operand` -- this is not a deref, the ptr does not have to be\n                 // dereferencable!\n-                let place = self.ref_to_mplace(self.read_immediate(&args[0])?)?;\n+                let place = self.ref_to_mplace(&self.read_immediate(&args[0])?)?;\n                 let (size, align) = self\n                     .size_and_align_of_mplace(place)?\n                     .ok_or_else(|| err_unsup_format!(\"`extern type` does not have known layout\"))?;"}, {"sha": "f86a87c88f4d89fd29abfb1914e3a460f3223b5a", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=5888556efe102f855f273cd1a7b343fe08d8fc76", "patch": "@@ -303,12 +303,12 @@ where\n     /// Generally prefer `deref_operand`.\n     pub fn ref_to_mplace(\n         &self,\n-        val: ImmTy<'tcx, M::PointerTag>,\n+        val: &ImmTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let pointee_type =\n             val.layout.ty.builtin_deref(true).expect(\"`ref_to_mplace` called on non-ptr type\").ty;\n         let layout = self.layout_of(pointee_type)?;\n-        let (ptr, meta) = match *val {\n+        let (ptr, meta) = match **val {\n             Immediate::Scalar(ptr) => (ptr.check_init()?, MemPlaceMeta::None),\n             Immediate::ScalarPair(ptr, meta) => {\n                 (ptr.check_init()?, MemPlaceMeta::Meta(meta.check_init()?))\n@@ -335,7 +335,7 @@ where\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let val = self.read_immediate(src)?;\n         trace!(\"deref to {} on {:?}\", val.layout.ty, *val);\n-        let place = self.ref_to_mplace(val)?;\n+        let place = self.ref_to_mplace(&val)?;\n         self.mplace_access_checked(place, None)\n     }\n "}, {"sha": "766c7a299e8f44298b4b1d8528392b359e6fa848", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5888556efe102f855f273cd1a7b343fe08d8fc76/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=5888556efe102f855f273cd1a7b343fe08d8fc76", "patch": "@@ -386,7 +386,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         // Handle wide pointers.\n         // Check metadata early, for better diagnostics\n         let place = try_validation!(\n-            self.ecx.ref_to_mplace(value),\n+            self.ecx.ref_to_mplace(&value),\n             self.path,\n             err_ub!(InvalidUninitBytes(None)) => { \"uninitialized {}\", kind },\n         );"}]}