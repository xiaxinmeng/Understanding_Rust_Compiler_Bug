{"sha": "98fbccee0c7bd740ff5173d4e3ab7666433f470b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZmJjY2VlMGM3YmQ3NDBmZjUxNzNkNGUzYWI3NjY2NDMzZjQ3MGI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-01-13T21:41:11Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-01-13T21:41:11Z"}, "message": "fix comments", "tree": {"sha": "01e61c606c63658492ea8114d6e8126bc254522a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e61c606c63658492ea8114d6e8126bc254522a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98fbccee0c7bd740ff5173d4e3ab7666433f470b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98fbccee0c7bd740ff5173d4e3ab7666433f470b", "html_url": "https://github.com/rust-lang/rust/commit/98fbccee0c7bd740ff5173d4e3ab7666433f470b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98fbccee0c7bd740ff5173d4e3ab7666433f470b/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "html_url": "https://github.com/rust-lang/rust/commit/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "a7c382eba5091608fb375738858cab77b230a001", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/98fbccee0c7bd740ff5173d4e3ab7666433f470b/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fbccee0c7bd740ff5173d4e3ab7666433f470b/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=98fbccee0c7bd740ff5173d4e3ab7666433f470b", "patch": "@@ -562,8 +562,8 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n ///       possible. eg. it will only return Ok for Result<T, !>\n ///\n /// This finds whether a (row) vector `v` of patterns is 'useful' in relation\n-/// to a set of such vectors `m` is defined as there being a set of inputs\n-/// that will match `v` but not any of the sets in `m`.\n+/// to a set of such vectors `m` - this is defined as there being a set of\n+/// inputs that will match `v` but not any of the sets in `m`.\n ///\n /// All the patterns at each column of the `matrix ++ v` matrix must\n /// have the same type, except that wildcard (PatternKind::Wild) patterns\n@@ -602,9 +602,25 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n     let pcx = PatternContext {\n-        // () is used to represent an unknown type in this context. If\n-        // one of the fields has a known type, use it instead (other\n-        // than that, all types should be equal modulo normalization).\n+        // TyErr is used to represent the type of wildcard patterns matching\n+        // against inaccessible (private) fields of structs, so that we won't\n+        // be able to observe whether the types of the struct's fields are\n+        // inhabited.\n+        //\n+        // If the field is truely inaccessible, then all the patterns\n+        // matching against it must be wildcard patterns, so its type\n+        // does not matter.\n+        //\n+        // However, if we are matching against non-wildcard patterns, we\n+        // need to know the real type of the field so we can specialize\n+        // against it. This primarily occurs through constants - they\n+        // can include contents for fields that are inaccessible at the\n+        // location of the match. In that case, the field's type is\n+        // inhabited - by the constant - so we can just use it.\n+        //\n+        // FIXME: this might lead to \"unstable\" behavior with macro hygiene\n+        // introducing uninhabited patterns for inaccessible fields. We\n+        // need to figure out how to model that.\n         ty: rows.iter().map(|r| r[0].ty).find(|ty| !ty.references_error())\n             .unwrap_or(v[0].ty),\n         max_slice_length: max_slice_length(cx, rows.iter().map(|r| r[0]).chain(Some(v[0])))"}]}