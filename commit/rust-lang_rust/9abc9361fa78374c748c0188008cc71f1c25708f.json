{"sha": "9abc9361fa78374c748c0188008cc71f1c25708f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYmM5MzYxZmE3ODM3NGM3NDhjMDE4ODAwOGNjNzFmMWMyNTcwOGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-22T16:08:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-22T16:08:21Z"}, "message": "Rollup merge of #61029 - blkerby:minimum_spanning_tree, r=alexcrichton\n\nSimplify RefCell minimum_spanning_tree example\n\nThis simplifies the implementation of the `minimum_spanning_tree` example of `RefCell` in the `cell` module-level docs, avoiding an unnecessary recursive call. This also eliminates the need for a block to contain the scope of the borrow in this example. But since that use of a block served an important didactic purpose, we make up for this by instead introducing a block in the initial, simpler example of `RefCell`, where the point will hopefully be conveyed to the reader more easily.", "tree": {"sha": "8d55c264cc57f5cefaefdaa2c2ab6162dff297af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d55c264cc57f5cefaefdaa2c2ab6162dff297af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9abc9361fa78374c748c0188008cc71f1c25708f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5XP1CRBK7hj4Ov3rIwAAdHIIAFcIQMOoNUpCldfbeLdEbizZ\ngRW2Qtc+3Mo4okeoR6AyokJ4ZwUsTVCZq0Zy1wSsZ8WxzercZfV4W/mrW6Y6s4ig\nbm8C+F51OiYV4Ye91456Pc2t83B0OZpYFpwMXpq/1mPj5IdPOnImOXHoifrIQBw9\neZKMtnmoSWScrC8Fo6PjMWlcSRzEFMedGD9uf4ZhIhI1u6v8RYpB9naxgv/MuQrc\nVEnXgX0JP7DFIxx9PEPqo1heIAtcTORiJkuEUW8LqR//1twiIOszH1rqnN7AEO14\nnnidEELJgb0sNOoldJdjYU+4OI0CWBdCR1EnOtEC2jpvuPN1Db5L1MvKCh87Tig=\n=wpl7\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d55c264cc57f5cefaefdaa2c2ab6162dff297af\nparent fba5ed355a30ae7176309bbbe8ff403943fc72bc\nparent e641fb47c472e767074a773c6a88cbc9873e63e0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558541301 +0200\ncommitter GitHub <noreply@github.com> 1558541301 +0200\n\nRollup merge of #61029 - blkerby:minimum_spanning_tree, r=alexcrichton\n\nSimplify RefCell minimum_spanning_tree example\n\nThis simplifies the implementation of the `minimum_spanning_tree` example of `RefCell` in the `cell` module-level docs, avoiding an unnecessary recursive call. This also eliminates the need for a block to contain the scope of the borrow in this example. But since that use of a block served an important didactic purpose, we make up for this by instead introducing a block in the initial, simpler example of `RefCell`, where the point will hopefully be conveyed to the reader more easily.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9abc9361fa78374c748c0188008cc71f1c25708f", "html_url": "https://github.com/rust-lang/rust/commit/9abc9361fa78374c748c0188008cc71f1c25708f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9abc9361fa78374c748c0188008cc71f1c25708f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fba5ed355a30ae7176309bbbe8ff403943fc72bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba5ed355a30ae7176309bbbe8ff403943fc72bc", "html_url": "https://github.com/rust-lang/rust/commit/fba5ed355a30ae7176309bbbe8ff403943fc72bc"}, {"sha": "e641fb47c472e767074a773c6a88cbc9873e63e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e641fb47c472e767074a773c6a88cbc9873e63e0", "html_url": "https://github.com/rust-lang/rust/commit/e641fb47c472e767074a773c6a88cbc9873e63e0"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "9672cf4ffed36860db66de3fac8a5c2d5768ceeb", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9abc9361fa78374c748c0188008cc71f1c25708f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abc9361fa78374c748c0188008cc71f1c25708f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9abc9361fa78374c748c0188008cc71f1c25708f", "patch": "@@ -67,16 +67,26 @@\n //! mutability:\n //!\n //! ```\n+//! use std::cell::{RefCell, RefMut};\n //! use std::collections::HashMap;\n-//! use std::cell::RefCell;\n //! use std::rc::Rc;\n //!\n //! fn main() {\n //!     let shared_map: Rc<RefCell<_>> = Rc::new(RefCell::new(HashMap::new()));\n-//!     shared_map.borrow_mut().insert(\"africa\", 92388);\n-//!     shared_map.borrow_mut().insert(\"kyoto\", 11837);\n-//!     shared_map.borrow_mut().insert(\"piccadilly\", 11826);\n-//!     shared_map.borrow_mut().insert(\"marbles\", 38);\n+//!     // Create a new block to limit the scope of the dynamic borrow\n+//!     {\n+//!         let mut map: RefMut<_> = shared_map.borrow_mut();\n+//!         map.insert(\"africa\", 92388);\n+//!         map.insert(\"kyoto\", 11837);\n+//!         map.insert(\"piccadilly\", 11826);\n+//!         map.insert(\"marbles\", 38);\n+//!     }\n+//!\n+//!     // Note that if we had not let the previous borrow of the cache fall out\n+//!     // of scope then the subsequent borrow would cause a dynamic thread panic.\n+//!     // This is the major hazard of using `RefCell`.\n+//!     let total: i32 = shared_map.borrow().values().sum();\n+//!     println!(\"{}\", total);\n //! }\n //! ```\n //!\n@@ -102,27 +112,15 @@\n //!\n //! impl Graph {\n //!     fn minimum_spanning_tree(&self) -> Vec<(i32, i32)> {\n-//!         // Create a new scope to contain the lifetime of the\n-//!         // dynamic borrow\n-//!         {\n-//!             // Take a reference to the inside of cache cell\n-//!             let mut cache = self.span_tree_cache.borrow_mut();\n-//!             if cache.is_some() {\n-//!                 return cache.as_ref().unwrap().clone();\n-//!             }\n-//!\n-//!             let span_tree = self.calc_span_tree();\n-//!             *cache = Some(span_tree);\n-//!         }\n+//!         self.span_tree_cache.borrow_mut()\n+//!             .get_or_insert_with(|| self.calc_span_tree())\n+//!             .clone()\n+//!     }\n //!\n-//!         // Recursive call to return the just-cached value.\n-//!         // Note that if we had not let the previous borrow\n-//!         // of the cache fall out of scope then the subsequent\n-//!         // recursive borrow would cause a dynamic thread panic.\n-//!         // This is the major hazard of using `RefCell`.\n-//!         self.minimum_spanning_tree()\n+//!     fn calc_span_tree(&self) -> Vec<(i32, i32)> {\n+//!         // Expensive computation goes here\n+//!         vec![]\n //!     }\n-//! #   fn calc_span_tree(&self) -> Vec<(i32, i32)> { vec![] }\n //! }\n //! ```\n //!"}]}