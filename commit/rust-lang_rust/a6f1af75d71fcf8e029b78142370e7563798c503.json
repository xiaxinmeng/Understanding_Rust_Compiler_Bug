{"sha": "a6f1af75d71fcf8e029b78142370e7563798c503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZjFhZjc1ZDcxZmNmOGUwMjliNzgxNDIzNzBlNzU2Mzc5OGM1MDM=", "commit": {"author": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-04-03T16:58:52Z"}, "committer": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-07-06T16:23:17Z"}, "message": "Lint for x.powi(2) => x * x", "tree": {"sha": "ad70d3fadcc791efe3354af88a8d8b62470fa3da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad70d3fadcc791efe3354af88a8d8b62470fa3da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6f1af75d71fcf8e029b78142370e7563798c503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f1af75d71fcf8e029b78142370e7563798c503", "html_url": "https://github.com/rust-lang/rust/commit/a6f1af75d71fcf8e029b78142370e7563798c503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6f1af75d71fcf8e029b78142370e7563798c503/comments", "author": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57cdf2dc16e1833008ae5b120cb2c045d267dda8", "url": "https://api.github.com/repos/rust-lang/rust/commits/57cdf2dc16e1833008ae5b120cb2c045d267dda8", "html_url": "https://github.com/rust-lang/rust/commit/57cdf2dc16e1833008ae5b120cb2c045d267dda8"}], "stats": {"total": 123, "additions": 94, "deletions": 29}, "files": [{"sha": "e3ee4296119d23ef5d97cbe74648eaf39763961a", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -1,6 +1,6 @@\n use crate::consts::{\n     constant, constant_simple, Constant,\n-    Constant::{F32, F64},\n+    Constant::{Int, F32, F64},\n };\n use crate::utils::{higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n@@ -293,6 +293,30 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     }\n }\n \n+fn check_powi(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+    // Check argument\n+    if let Some((value, _)) = constant(cx, cx.tables, &args[1]) {\n+        let (lint, help, suggestion) = match value {\n+            Int(2) => (\n+                IMPRECISE_FLOPS,\n+                \"square can be computed more accurately\",\n+                format!(\"{} * {}\", Sugg::hir(cx, &args[0], \"..\"), Sugg::hir(cx, &args[0], \"..\")),\n+            ),\n+            _ => return,\n+        };\n+\n+        span_lint_and_sugg(\n+            cx,\n+            lint,\n+            expr.span,\n+            help,\n+            \"consider using\",\n+            suggestion,\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n // TODO: Lint expressions of the form `x.exp() - y` where y > 1\n // and suggest usage of `x.exp_m1() - (y - 1)` instead\n fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n@@ -489,6 +513,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n                     \"ln\" => check_ln1p(cx, expr, args),\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),\n+                    \"powi\" => check_powi(cx, expr, args),\n                     _ => {},\n                 }\n             }"}, {"sha": "7dc7ee94affc0d06c7ca21e0ad7df80a8d9903d9", "filename": "tests/ui/floating_point_log.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -25,11 +25,11 @@ fn check_ln1p() {\n     let _ = 2.0f32.ln_1p();\n     let _ = x.ln_1p();\n     let _ = (x / 2.0).ln_1p();\n-    let _ = x.powi(2).ln_1p();\n-    let _ = (x.powi(2) / 2.0).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n+    let _ = (x.powi(3) / 2.0).ln_1p();\n     let _ = ((std::f32::consts::E - 1.0)).ln_1p();\n     let _ = x.ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n     let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied\n@@ -43,9 +43,9 @@ fn check_ln1p() {\n     let _ = 2.0f64.ln_1p();\n     let _ = x.ln_1p();\n     let _ = (x / 2.0).ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = x.ln_1p();\n-    let _ = x.powi(2).ln_1p();\n+    let _ = x.powi(3).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n     let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied"}, {"sha": "01181484e7dee290c0973d60a38a93bd71062905", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -25,11 +25,11 @@ fn check_ln1p() {\n     let _ = (1f32 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x / 2.0).ln();\n-    let _ = (1.0 + x.powi(2)).ln();\n-    let _ = (1.0 + x.powi(2) / 2.0).ln();\n+    let _ = (1.0 + x.powi(3)).ln();\n+    let _ = (1.0 + x.powi(3) / 2.0).ln();\n     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n     let _ = (x + 1.0).ln();\n-    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x.powi(3) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n     let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied\n@@ -43,9 +43,9 @@ fn check_ln1p() {\n     let _ = (1f64 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x / 2.0).ln();\n-    let _ = (1.0 + x.powi(2)).ln();\n+    let _ = (1.0 + x.powi(3)).ln();\n     let _ = (x + 1.0).ln();\n-    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x.powi(3) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n     let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied"}, {"sha": "900dc2b79336a8bd1e67a642c54a6eb1c74966fa", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -77,14 +77,14 @@ LL |     let _ = (1.0 + x / 2.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:28:13\n    |\n-LL |     let _ = (1.0 + x.powi(2)).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3)).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:29:13\n    |\n-LL |     let _ = (1.0 + x.powi(2) / 2.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) / 2.0).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3) / 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(3) / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:30:13\n@@ -101,8 +101,8 @@ LL |     let _ = (x + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:32:13\n    |\n-LL |     let _ = (x.powi(2) + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (x.powi(3) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:33:13\n@@ -143,8 +143,8 @@ LL |     let _ = (1.0 + x / 2.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:46:13\n    |\n-LL |     let _ = (1.0 + x.powi(2)).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(3)).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:47:13\n@@ -155,8 +155,8 @@ LL |     let _ = (x + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:48:13\n    |\n-LL |     let _ = (x.powi(2) + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+LL |     let _ = (x.powi(3) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(3).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:49:13"}, {"sha": "b0641a100cdc810b4a3c7d3d045928970dfe1272", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let _ = (-3.1f32).exp();\n     let _ = x.sqrt();\n     let _ = x.cbrt();\n-    let _ = x.powi(2);\n+    let _ = x.powi(3);\n     let _ = x.powi(-2);\n     let _ = x.powi(16_777_215);\n     let _ = x.powi(-16_777_215);\n@@ -30,7 +30,7 @@ fn main() {\n     let _ = (-3.1f64).exp();\n     let _ = x.sqrt();\n     let _ = x.cbrt();\n-    let _ = x.powi(2);\n+    let _ = x.powi(3);\n     let _ = x.powi(-2);\n     let _ = x.powi(-2_147_483_648);\n     let _ = x.powi(2_147_483_647);"}, {"sha": "a0a2c973900f4b7ba943f29a7bb90dcecaf6a8ce", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let _ = std::f32::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n+    let _ = x.powf(3.0);\n     let _ = x.powf(-2.0);\n     let _ = x.powf(16_777_215.0);\n     let _ = x.powf(-16_777_215.0);\n@@ -30,7 +30,7 @@ fn main() {\n     let _ = std::f64::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n-    let _ = x.powf(2.0);\n+    let _ = x.powf(3.0);\n     let _ = x.powf(-2.0);\n     let _ = x.powf(-2_147_483_648.0);\n     let _ = x.powf(2_147_483_647.0);"}, {"sha": "2422eb911e90a7041dedbecccf2fa2677a12710d", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -53,8 +53,8 @@ LL |     let _ = x.powf(1.0 / 3.0);\n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:14:13\n    |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+LL |     let _ = x.powf(3.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:15:13\n@@ -125,8 +125,8 @@ LL |     let _ = x.powf(1.0 / 3.0);\n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:33:13\n    |\n-LL |     let _ = x.powf(2.0);\n-   |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n+LL |     let _ = x.powf(3.0);\n+   |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n   --> $DIR/floating_point_powf.rs:34:13"}, {"sha": "0ce6f72535d1fa38c8d77f4497817d2ada4da853", "filename": "tests/ui/floating_point_powi.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+\n+fn main() {\n+    let one = 1;\n+    let x = 3f32;\n+    let _ = x * x;\n+    let _ = x * x;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.powi(3);\n+    let _ = x.powi(one + 1);\n+}"}, {"sha": "c87e836bedd9ded841e7c81f12a39e911e59b6c6", "filename": "tests/ui/floating_point_powi.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+\n+fn main() {\n+    let one = 1;\n+    let x = 3f32;\n+    let _ = x.powi(2);\n+    let _ = x.powi(1 + 1);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.powi(3);\n+    let _ = x.powi(one + 1);\n+}"}, {"sha": "ae7bbaa4473865790e1859b8fe54ca52c742d1de", "filename": "tests/ui/floating_point_powi.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6f1af75d71fcf8e029b78142370e7563798c503/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=a6f1af75d71fcf8e029b78142370e7563798c503", "patch": "@@ -0,0 +1,16 @@\n+error: square can be computed more accurately\n+  --> $DIR/floating_point_powi.rs:7:13\n+   |\n+LL |     let _ = x.powi(2);\n+   |             ^^^^^^^^^ help: consider using: `x * x`\n+   |\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n+\n+error: square can be computed more accurately\n+  --> $DIR/floating_point_powi.rs:8:13\n+   |\n+LL |     let _ = x.powi(1 + 1);\n+   |             ^^^^^^^^^^^^^ help: consider using: `x * x`\n+\n+error: aborting due to 2 previous errors\n+"}]}