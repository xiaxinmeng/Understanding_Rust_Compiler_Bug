{"sha": "21396828e4743cd5ff50488b98ee3fbfa150dee4", "node_id": "C_kwDOAAsO6NoAKDIxMzk2ODI4ZTQ3NDNjZDVmZjUwNDg4Yjk4ZWUzZmJmYTE1MGRlZTQ", "commit": {"author": {"name": "Jane Losare-Lusby", "email": "jlusby42@gmail.com", "date": "2022-08-09T22:59:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T22:59:53Z"}, "message": "Apply suggestions from code review", "tree": {"sha": "9160dc4d5c9279b94a5a170765396f0be437cfdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9160dc4d5c9279b94a5a170765396f0be437cfdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21396828e4743cd5ff50488b98ee3fbfa150dee4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8ubpCRBK7hj4Ov3rIwAANf8IAAGKxOokuaGBEw7D66rYb8TW\n4MnCmGImOKCQBufOT+IBG9XR9f3V8zU0CHARraXWkFyBLHW9zrisVmf4Jg62Wzlo\nOMXxQImHWuq3KUe0PfxY+LyJY2IcadDIuHxzBz9irdOdM/yJBfFU4bR3TKoowDyX\naYnJz9q4VsNrofXFaGN97DdThlU2WrjK432dCLIRbzIhevn8oC7DOAIBAl2uvcEU\nHfLkxR+g0SuHFRaY46BytfSDotHVnff2qlrGgT5WKwSN0bTtaol/kaCO2ckgbD0Y\nzxpL17Kqf7EICR+7+fskgalwppnBlZq96gP+cNKg8ymdP43fUthFkKAOvfKlLpk=\n=KV+M\n-----END PGP SIGNATURE-----\n", "payload": "tree 9160dc4d5c9279b94a5a170765396f0be437cfdd\nparent 53a870c5064b2fc31ec56dcdb74a7ad4e6c1736a\nauthor Jane Losare-Lusby <jlusby42@gmail.com> 1660085993 -0700\ncommitter GitHub <noreply@github.com> 1660085993 -0700\n\nApply suggestions from code review"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21396828e4743cd5ff50488b98ee3fbfa150dee4", "html_url": "https://github.com/rust-lang/rust/commit/21396828e4743cd5ff50488b98ee3fbfa150dee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21396828e4743cd5ff50488b98ee3fbfa150dee4/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a870c5064b2fc31ec56dcdb74a7ad4e6c1736a", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a870c5064b2fc31ec56dcdb74a7ad4e6c1736a", "html_url": "https://github.com/rust-lang/rust/commit/53a870c5064b2fc31ec56dcdb74a7ad4e6c1736a"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b91db03a3d55355405bce81a06ad53a06f6c5751", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21396828e4743cd5ff50488b98ee3fbfa150dee4/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21396828e4743cd5ff50488b98ee3fbfa150dee4/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=21396828e4743cd5ff50488b98ee3fbfa150dee4", "patch": "@@ -58,7 +58,7 @@\n //! `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` at runtime might not actually change\n //! how backtraces are captured.\n \n-#![stable(feature = \"backtrace\", since = \"1.64.0\")]\n+#![stable(feature = \"backtrace\", since = \"1.65.0\")]\n \n #[cfg(test)]\n mod tests;\n@@ -104,15 +104,15 @@ use crate::vec::Vec;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n-#[stable(feature = \"backtrace\", since = \"1.64.0\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[must_use]\n pub struct Backtrace {\n     inner: Inner,\n }\n \n /// The current status of a backtrace, indicating whether it was captured or\n /// whether it is empty for some other reason.\n-#[stable(feature = \"backtrace\", since = \"1.64.0\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n #[non_exhaustive]\n #[derive(Debug, PartialEq, Eq)]\n pub enum BacktraceStatus {\n@@ -170,7 +170,7 @@ enum BytesOrWide {\n     Wide(Vec<u16>),\n }\n \n-#[stable(feature = \"backtrace\", since = \"1.64.0\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {\n@@ -286,7 +286,7 @@ impl Backtrace {\n     ///\n     /// To forcibly capture a backtrace regardless of environment variables, use\n     /// the `Backtrace::force_capture` function.\n-    #[stable(feature = \"backtrace\", since = \"1.64.0\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn capture() -> Backtrace {\n         if !Backtrace::enabled() {\n@@ -305,16 +305,16 @@ impl Backtrace {\n     /// Note that capturing a backtrace can be an expensive operation on some\n     /// platforms, so this should be used with caution in performance-sensitive\n     /// parts of code.\n-    #[stable(feature = \"backtrace\", since = \"1.64.0\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[inline(never)] // want to make sure there's a frame here to remove\n     pub fn force_capture() -> Backtrace {\n         Backtrace::create(Backtrace::force_capture as usize)\n     }\n \n     /// Forcibly captures a disabled backtrace, regardless of environment\n     /// variable configuration.\n-    #[stable(feature = \"backtrace\", since = \"1.64.0\")]\n-    #[rustc_const_stable(feature = \"backtrace\", since = \"1.64.0\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n+    #[rustc_const_stable(feature = \"backtrace\", since = \"1.65.0\")]\n     pub const fn disabled() -> Backtrace {\n         Backtrace { inner: Inner::Disabled }\n     }\n@@ -358,7 +358,7 @@ impl Backtrace {\n     /// Returns the status of this backtrace, indicating whether this backtrace\n     /// request was unsupported, disabled, or a stack trace was actually\n     /// captured.\n-    #[stable(feature = \"backtrace\", since = \"1.64.0\")]\n+    #[stable(feature = \"backtrace\", since = \"1.65.0\")]\n     #[must_use]\n     pub fn status(&self) -> BacktraceStatus {\n         match self.inner {\n@@ -378,7 +378,7 @@ impl<'a> Backtrace {\n     }\n }\n \n-#[stable(feature = \"backtrace\", since = \"1.64.0\")]\n+#[stable(feature = \"backtrace\", since = \"1.65.0\")]\n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {"}]}