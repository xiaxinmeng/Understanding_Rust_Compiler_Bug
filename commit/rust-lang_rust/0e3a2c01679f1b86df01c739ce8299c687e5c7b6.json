{"sha": "0e3a2c01679f1b86df01c739ce8299c687e5c7b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlM2EyYzAxNjc5ZjFiODZkZjAxYzczOWNlODI5OWM2ODdlNWM3YjY=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-24T23:10:15Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-26T23:21:00Z"}, "message": "Linkify associated types and constants", "tree": {"sha": "d7236a3cc1834d1afa68bd582104a5d77b3c0580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7236a3cc1834d1afa68bd582104a5d77b3c0580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3a2c01679f1b86df01c739ce8299c687e5c7b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3a2c01679f1b86df01c739ce8299c687e5c7b6", "html_url": "https://github.com/rust-lang/rust/commit/0e3a2c01679f1b86df01c739ce8299c687e5c7b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3a2c01679f1b86df01c739ce8299c687e5c7b6/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd8183c1581bffb688e07113bd2a7ee494bf2fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd8183c1581bffb688e07113bd2a7ee494bf2fb", "html_url": "https://github.com/rust-lang/rust/commit/1bd8183c1581bffb688e07113bd2a7ee494bf2fb"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "462cef2e0e3c617430f83f1bc58633b2a2eb4b49", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0e3a2c01679f1b86df01c739ce8299c687e5c7b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3a2c01679f1b86df01c739ce8299c687e5c7b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0e3a2c01679f1b86df01c739ce8299c687e5c7b6", "patch": "@@ -2021,10 +2021,33 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     Ok(())\n }\n \n-fn assoc_const(w: &mut fmt::Formatter, it: &clean::Item,\n-               ty: &clean::Type, default: Option<&String>)\n-               -> fmt::Result {\n-    write!(w, \"const {}\", it.name.as_ref().unwrap())?;\n+fn naive_assoc_href(it: &clean::Item, link: AssocItemLink) -> String {\n+    use html::item_type::ItemType::*;\n+\n+    let name = it.name.as_ref().unwrap();\n+    let ty = match shortty(it) {\n+        Typedef | AssociatedType => AssociatedType,\n+        s@_ => s,\n+    };\n+\n+    let anchor = format!(\"#{}.{}\", ty, name);\n+    match link {\n+        AssocItemLink::Anchor => anchor,\n+        AssocItemLink::GotoSource(did, _) => {\n+            href(did).map(|p| format!(\"{}{}\", p.0, anchor)).unwrap_or(anchor)\n+        }\n+    }\n+}\n+\n+fn assoc_const(w: &mut fmt::Formatter,\n+               it: &clean::Item,\n+               ty: &clean::Type,\n+               default: Option<&String>,\n+               link: AssocItemLink) -> fmt::Result {\n+    write!(w, \"const <a href='{}' class='constant'>{}</a>\",\n+           naive_assoc_href(it, link),\n+           it.name.as_ref().unwrap())?;\n+\n     write!(w, \": {}\", ty)?;\n     if let Some(default) = default {\n         write!(w, \" = {}\", default)?;\n@@ -2034,13 +2057,15 @@ fn assoc_const(w: &mut fmt::Formatter, it: &clean::Item,\n \n fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n               bounds: &Vec<clean::TyParamBound>,\n-              default: &Option<clean::Type>)\n-              -> fmt::Result {\n-    write!(w, \"type {}\", it.name.as_ref().unwrap())?;\n+              default: Option<&clean::Type>,\n+              link: AssocItemLink) -> fmt::Result {\n+    write!(w, \"type <a href='{}' class='type'>{}</a>\",\n+           naive_assoc_href(it, link),\n+           it.name.as_ref().unwrap())?;\n     if !bounds.is_empty() {\n         write!(w, \": {}\", TyParamBounds(bounds))?\n     }\n-    if let Some(ref default) = *default {\n+    if let Some(default) = default {\n         write!(w, \" = {}\", default)?;\n     }\n     Ok(())\n@@ -2095,6 +2120,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                 href(did).map(|p| format!(\"{}#{}.{}\", p.0, ty, name)).unwrap_or(anchor)\n             }\n         };\n+        // FIXME(#24111): remove when `const_fn` is stabilized\n         let vis_constness = match get_unstable_features_setting() {\n             UnstableFeatures::Allow => constness,\n             _ => hir::Constness::NotConst\n@@ -2124,10 +2150,10 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                    link)\n         }\n         clean::AssociatedConstItem(ref ty, ref default) => {\n-            assoc_const(w, item, ty, default.as_ref())\n+            assoc_const(w, item, ty, default.as_ref(), link)\n         }\n         clean::AssociatedTypeItem(ref bounds, ref default) => {\n-            assoc_type(w, item, bounds, default)\n+            assoc_type(w, item, bounds, default.as_ref(), link)\n         }\n         _ => panic!(\"render_assoc_item called on non-associated-item\")\n     }\n@@ -2487,25 +2513,25 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                write!(w, \"type {} = {}\", name, tydef.type_)?;\n+                assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link)?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let id = derive_id(format!(\"{}.{}\", shortty, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                assoc_const(w, item, ty, default.as_ref())?;\n+                assoc_const(w, item, ty, default.as_ref(), link)?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::ConstantItem(ref c) => {\n                 let id = derive_id(format!(\"{}.{}\", shortty, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                assoc_const(w, item, &c.type_, Some(&c.expr))?;\n+                assoc_const(w, item, &c.type_, Some(&c.expr), link)?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = derive_id(format!(\"{}.{}\", shortty, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                assoc_type(w, item, bounds, default)?;\n+                assoc_type(w, item, bounds, default.as_ref(), link)?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name)\n@@ -2545,9 +2571,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     }\n \n     // If we've implemented a trait, then also emit documentation for all\n-    // default methods which weren't overridden in the implementation block.\n-    // FIXME: this also needs to be done for associated types, whenever defaults\n-    // for them work.\n+    // default items which weren't overridden in the implementation block.\n     if let Some(did) = i.trait_did() {\n         if let Some(t) = cache().traits.get(&did) {\n             render_default_items(w, cx, t, &i.impl_, render_header, outer_version)?;"}, {"sha": "0db92a491ed180d18b654c76994ae97f0b309a8a", "filename": "src/test/rustdoc/issue-28478.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e3a2c01679f1b86df01c739ce8299c687e5c7b6/src%2Ftest%2Frustdoc%2Fissue-28478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3a2c01679f1b86df01c739ce8299c687e5c7b6/src%2Ftest%2Frustdoc%2Fissue-28478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-28478.rs?ref=0e3a2c01679f1b86df01c739ce8299c687e5c7b6", "patch": "@@ -14,9 +14,10 @@\n // @has issue_28478/trait.Bar.html\n pub trait Bar {\n     // @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar = ()'\n+    // @has - '//*[@href=\"#associatedtype.Bar\"]' 'Bar'\n     type Bar = ();\n-\n     // @has - '//*[@id=\"associatedconstant.Baz\"]' 'const Baz: usize = 7'\n+    // @has - '//*[@href=\"#associatedconstant.Baz\"]' 'Baz'\n     const Baz: usize = 7;\n     // @has - '//*[@id=\"tymethod.bar\"]' 'fn bar'\n     fn bar();\n@@ -33,6 +34,8 @@ impl Foo {\n }\n \n impl Bar for Foo {\n+    // @has - '//*[@href=\"../issue_28478/trait.Bar.html#associatedtype.Bar\"]' 'Bar'\n+    // @has - '//*[@href=\"../issue_28478/trait.Bar.html#associatedconstant.Baz\"]' 'Baz'\n     // @has - '//*[@href=\"../issue_28478/trait.Bar.html#tymethod.bar\"]' 'bar'\n     fn bar() {}\n     // @has - '//*[@href=\"../issue_28478/trait.Bar.html#method.baz\"]' 'baz'"}]}