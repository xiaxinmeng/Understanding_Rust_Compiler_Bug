{"sha": "0ecc128ccb43d0302288011a6919989e91da3bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlY2MxMjhjY2I0M2QwMzAyMjg4MDExYTY5MTk5ODllOTFkYTNiYjg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-29T18:54:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-29T18:54:32Z"}, "message": "Use `same_type` instead of duplicating logic", "tree": {"sha": "3ac30256df4861632ac486bd4e97dc70112f9b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac30256df4861632ac486bd4e97dc70112f9b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ecc128ccb43d0302288011a6919989e91da3bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ecc128ccb43d0302288011a6919989e91da3bb8", "html_url": "https://github.com/rust-lang/rust/commit/0ecc128ccb43d0302288011a6919989e91da3bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ecc128ccb43d0302288011a6919989e91da3bb8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da6727e961915c153a782cd06b56bfbd796d8fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da6727e961915c153a782cd06b56bfbd796d8fe", "html_url": "https://github.com/rust-lang/rust/commit/8da6727e961915c153a782cd06b56bfbd796d8fe"}], "stats": {"total": 59, "additions": 26, "deletions": 33}, "files": [{"sha": "e34bb9f4f7bd9d754cf9f80c6142828e9026b7d0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0ecc128ccb43d0302288011a6919989e91da3bb8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecc128ccb43d0302288011a6919989e91da3bb8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0ecc128ccb43d0302288011a6919989e91da3bb8", "patch": "@@ -1005,26 +1005,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         {\n                             let mut show_suggestion = true;\n                             for (exp_ty, found_ty) in exp_substs.types().zip(found_substs.types()) {\n-                                if let TyKind::Ref(_, exp_ty, _) = exp_ty.sty {\n-                                    match (&exp_ty.sty, &found_ty.sty) {\n-                                        (TyKind::Adt(exp_did, _), TyKind::Adt(found_did, _))\n-                                        if exp_did == found_did => {}\n-                                        (TyKind::Bool, TyKind::Bool) |\n-                                        (TyKind::Char, TyKind::Char) |\n-                                        (TyKind::Str, TyKind::Str) |\n-                                        (_, TyKind::Param(_)) |\n-                                        (_, TyKind::Infer(_)) |\n-                                        (TyKind::Param(_), _) |\n-                                        (TyKind::Infer(_), _) => {}\n-                                        (TyKind::Int(x), TyKind::Int(y)) if x == y => {}\n-                                        (TyKind::Uint(x), TyKind::Uint(y)) if x == y => {}\n-                                        (TyKind::Int(x), TyKind::Int(y)) if x == y => {}\n-                                        (TyKind::Uint(x), TyKind::Uint(y)) if x == y => {}\n-                                        (TyKind::Float(x), TyKind::Float(y)) if x == y => {}\n-                                        _ => show_suggestion = false,\n+                                match exp_ty.sty {\n+                                    TyKind::Ref(_, exp_ty, _) => {\n+                                        match (&exp_ty.sty, &found_ty.sty) {\n+                                            (_, TyKind::Param(_)) |\n+                                            (_, TyKind::Infer(_)) |\n+                                            (TyKind::Param(_), _) |\n+                                            (TyKind::Infer(_), _) => {}\n+                                            _ if ty::TyS::same_type(exp_ty, found_ty) => {}\n+                                            _ => show_suggestion = false,\n+                                        };\n                                     }\n-                                } else {\n-                                    show_suggestion = false;\n+                                    TyKind::Param(_) | TyKind::Infer(_) => {}\n+                                    _ => show_suggestion = false,\n                                 }\n                             }\n                             if let (Ok(snippet), true) = ("}, {"sha": "1d30ccb87b5d8a0cadea39579bf5281b222b76d0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0ecc128ccb43d0302288011a6919989e91da3bb8/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ecc128ccb43d0302288011a6919989e91da3bb8/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0ecc128ccb43d0302288011a6919989e91da3bb8", "patch": "@@ -658,6 +658,19 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         tcx.needs_drop_raw(param_env.and(self))\n     }\n \n+    pub fn same_type(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n+        match (&a.sty, &b.sty) {\n+            (&Adt(did_a, substs_a), &Adt(did_b, substs_b)) => {\n+                if did_a != did_b {\n+                    return false;\n+                }\n+\n+                substs_a.types().zip(substs_b.types()).all(|(a, b)| Self::same_type(a, b))\n+            }\n+            _ => a == b,\n+        }\n+    }\n+\n     /// Check whether a type is representable. This means it cannot contain unboxed\n     /// structural recursion. This check is needed for structs and enums.\n     pub fn is_representable(&'tcx self,\n@@ -730,19 +743,6 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             }\n         }\n \n-        fn same_type<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n-            match (&a.sty, &b.sty) {\n-                (&Adt(did_a, substs_a), &Adt(did_b, substs_b)) => {\n-                    if did_a != did_b {\n-                        return false;\n-                    }\n-\n-                    substs_a.types().zip(substs_b.types()).all(|(a, b)| same_type(a, b))\n-                }\n-                _ => a == b,\n-            }\n-        }\n-\n         // Does the type `ty` directly (without indirection through a pointer)\n         // contain any types on stack `seen`?\n         fn is_type_structurally_recursive<'a, 'tcx>(\n@@ -807,7 +807,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                         // struct Foo { Option<Option<Foo>> }\n \n                         for &seen_type in iter {\n-                            if same_type(ty, seen_type) {\n+                            if ty::TyS::same_type(ty, seen_type) {\n                                 debug!(\"ContainsRecursive: {:?} contains {:?}\",\n                                        seen_type,\n                                        ty);"}]}