{"sha": "bdbf9b297b2d3372dfe70763643942e008933207", "node_id": "C_kwDOAAsO6NoAKGJkYmY5YjI5N2IyZDMzNzJkZmU3MDc2MzY0Mzk0MmUwMDg5MzMyMDc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-09T00:23:39Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-16T01:25:34Z"}, "message": "compare_const_vals: add a special case for certain ranges.\n\nThis commit removes the `a == b` early return, which isn't useful in\npractice, and replaces it with one that helps matches with many ranges,\nincluding char ranges.", "tree": {"sha": "4ee4f3878d9b1eecaf6e41a2e370fbbb5033fb68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee4f3878d9b1eecaf6e41a2e370fbbb5033fb68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdbf9b297b2d3372dfe70763643942e008933207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbf9b297b2d3372dfe70763643942e008933207", "html_url": "https://github.com/rust-lang/rust/commit/bdbf9b297b2d3372dfe70763643942e008933207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdbf9b297b2d3372dfe70763643942e008933207/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73c52b724a07900808483a5f06b928d703097cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c52b724a07900808483a5f06b928d703097cf1", "html_url": "https://github.com/rust-lang/rust/commit/73c52b724a07900808483a5f06b928d703097cf1"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "a13748a2d474ad1b92e74f24de438222379b376b", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bdbf9b297b2d3372dfe70763643942e008933207/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbf9b297b2d3372dfe70763643942e008933207/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=bdbf9b297b2d3372dfe70763643942e008933207", "patch": "@@ -15,7 +15,9 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::RangeEnd;\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::interpret::{ErrorHandled, LitToConstError, LitToConstInput};\n+use rustc_middle::mir::interpret::{\n+    ConstValue, ErrorHandled, LitToConstError, LitToConstInput, Scalar,\n+};\n use rustc_middle::mir::{self, UserTypeProjection};\n use rustc_middle::mir::{BorrowKind, Field, Mutability};\n use rustc_middle::thir::{Ascription, BindingMode, FieldPat, LocalVarId, Pat, PatKind, PatRange};\n@@ -755,11 +757,24 @@ pub(crate) fn compare_const_vals<'tcx>(\n ) -> Option<Ordering> {\n     assert_eq!(a.ty(), b.ty());\n \n-    if a == b {\n-        return Some(Ordering::Equal);\n+    let ty = a.ty();\n+\n+    // This code is hot when compiling matches with many ranges. So we\n+    // special-case extraction of evaluated scalars for speed, for types where\n+    // raw data comparisons are appropriate. E.g. `unicode-normalization` has\n+    // many ranges such as '\\u{037A}'..='\\u{037F}', and chars can be compared\n+    // in this way.\n+    match ty.kind() {\n+        ty::Float(_) | ty::Int(_) => {} // require special handling, see below\n+        _ => match (a, b) {\n+            (\n+                mir::ConstantKind::Val(ConstValue::Scalar(Scalar::Int(a)), _a_ty),\n+                mir::ConstantKind::Val(ConstValue::Scalar(Scalar::Int(b)), _b_ty),\n+            ) => return Some(a.cmp(&b)),\n+            _ => {}\n+        },\n     }\n \n-    let ty = a.ty();\n     let a = a.eval_bits(tcx, param_env, ty);\n     let b = b.eval_bits(tcx, param_env, ty);\n "}]}