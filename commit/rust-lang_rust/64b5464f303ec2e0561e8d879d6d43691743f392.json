{"sha": "64b5464f303ec2e0561e8d879d6d43691743f392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YjU0NjRmMzAzZWMyZTA1NjFlOGQ4NzlkNmQ0MzY5MTc0M2YzOTI=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-12-17T10:39:10Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2014-12-24T17:18:27Z"}, "message": "rustdoc: Use Fn trait sugar for external paths\n\nFix #19909", "tree": {"sha": "c6e3ca32e56aa34a8b9c83a4b75848cc4d64a2e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e3ca32e56aa34a8b9c83a4b75848cc4d64a2e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64b5464f303ec2e0561e8d879d6d43691743f392", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64b5464f303ec2e0561e8d879d6d43691743f392", "html_url": "https://github.com/rust-lang/rust/commit/64b5464f303ec2e0561e8d879d6d43691743f392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64b5464f303ec2e0561e8d879d6d43691743f392/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c639cf6ee9ae78d01ca0a34c1a9c05d6c0406fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c639cf6ee9ae78d01ca0a34c1a9c05d6c0406fa7", "html_url": "https://github.com/rust-lang/rust/commit/c639cf6ee9ae78d01ca0a34c1a9c05d6c0406fa7"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "e28e125caa4d431ec9488cf026bc12e618c52a37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/64b5464f303ec2e0561e8d879d6d43691743f392/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64b5464f303ec2e0561e8d879d6d43691743f392/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=64b5464f303ec2e0561e8d879d6d43691743f392", "patch": "@@ -515,21 +515,55 @@ impl Clean<Vec<TyParamBound>> for ty::ExistentialBounds {\n     }\n }\n \n-fn external_path(cx: &DocContext, name: &str, substs: &subst::Substs) -> Path {\n+fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n+                        substs: &subst::Substs) -> PathParameters {\n+    use rustc::middle::ty::sty;\n     let lifetimes = substs.regions().get_slice(subst::TypeSpace)\n                     .iter()\n                     .filter_map(|v| v.clean(cx))\n                     .collect();\n     let types = substs.types.get_slice(subst::TypeSpace).to_vec();\n-    let types = types.clean(cx);\n+\n+    match (trait_did, cx.tcx_opt()) {\n+        // Attempt to sugar an external path like Fn<(A, B,), C> to Fn(A, B) -> C\n+        (Some(did), Some(ref tcx)) if tcx.lang_items.fn_trait_kind(did).is_some() => {\n+            assert_eq!(types.len(), 2);\n+            let inputs = match types[0].sty {\n+                sty::ty_tup(ref tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n+                _ => {\n+                    return PathParameters::AngleBracketed {\n+                        lifetimes: lifetimes,\n+                        types: types.clean(cx)\n+                    }\n+                }\n+            };\n+            let output = match types[1].sty {\n+                sty::ty_tup(ref v) if v.is_empty() => None, // -> ()\n+                _ => Some(types[1].clean(cx))\n+            };\n+            PathParameters::Parenthesized {\n+                inputs: inputs,\n+                output: output\n+            }\n+        },\n+        (_, _) => {\n+            PathParameters::AngleBracketed {\n+                lifetimes: lifetimes,\n+                types: types.clean(cx),\n+            }\n+        }\n+    }\n+}\n+\n+// trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n+// from Fn<(A, B,), C> to Fn(A, B) -> C\n+fn external_path(cx: &DocContext, name: &str, trait_did: Option<ast::DefId>,\n+                 substs: &subst::Substs) -> Path {\n     Path {\n         global: false,\n         segments: vec![PathSegment {\n             name: name.to_string(),\n-            params: PathParameters::AngleBracketed {\n-                lifetimes: lifetimes,\n-                types: types,\n-            }\n+            params: external_path_params(cx, trait_did, substs)\n         }],\n     }\n }\n@@ -544,16 +578,16 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n         let (did, path) = match *self {\n             ty::BoundSend =>\n                 (tcx.lang_items.send_trait().unwrap(),\n-                 external_path(cx, \"Send\", &empty)),\n+                 external_path(cx, \"Send\", None, &empty)),\n             ty::BoundSized =>\n                 (tcx.lang_items.sized_trait().unwrap(),\n-                 external_path(cx, \"Sized\", &empty)),\n+                 external_path(cx, \"Sized\", None, &empty)),\n             ty::BoundCopy =>\n                 (tcx.lang_items.copy_trait().unwrap(),\n-                 external_path(cx, \"Copy\", &empty)),\n+                 external_path(cx, \"Copy\", None, &empty)),\n             ty::BoundSync =>\n                 (tcx.lang_items.sync_trait().unwrap(),\n-                 external_path(cx, \"Sync\", &empty)),\n+                 external_path(cx, \"Sync\", None, &empty)),\n         };\n         let fqn = csearch::get_item_path(tcx, did);\n         let fqn = fqn.into_iter().map(|i| i.to_string()).collect();\n@@ -586,7 +620,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         let fqn = fqn.into_iter().map(|i| i.to_string())\n                      .collect::<Vec<String>>();\n         let path = external_path(cx, fqn.last().unwrap().as_slice(),\n-                                 &self.substs);\n+                                 Some(self.def_id), &self.substs);\n         cx.external_paths.borrow_mut().as_mut().unwrap().insert(self.def_id,\n                                                             (fqn, TypeTrait));\n \n@@ -1437,7 +1471,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     _ => TypeEnum,\n                 };\n                 let path = external_path(cx, fqn.last().unwrap().to_string().as_slice(),\n-                                         substs);\n+                                         None, substs);\n                 cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, kind));\n                 ResolvedPath {\n                     path: path,"}]}