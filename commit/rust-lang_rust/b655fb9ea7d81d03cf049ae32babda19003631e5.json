{"sha": "b655fb9ea7d81d03cf049ae32babda19003631e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTVmYjllYTdkODFkMDNjZjA0OWFlMzJiYWJkYTE5MDAzNjMxZTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-16T22:41:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-16T22:41:32Z"}, "message": "Replace 'mutable?' with 'const'", "tree": {"sha": "2bbf62e5072db9e28c10ca9d7efe668a2678cbdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bbf62e5072db9e28c10ca9d7efe668a2678cbdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b655fb9ea7d81d03cf049ae32babda19003631e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b655fb9ea7d81d03cf049ae32babda19003631e5", "html_url": "https://github.com/rust-lang/rust/commit/b655fb9ea7d81d03cf049ae32babda19003631e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b655fb9ea7d81d03cf049ae32babda19003631e5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d361f680610bb0f75f80b8fc8ca03d04b13577b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d361f680610bb0f75f80b8fc8ca03d04b13577b", "html_url": "https://github.com/rust-lang/rust/commit/1d361f680610bb0f75f80b8fc8ca03d04b13577b"}], "stats": {"total": 107, "additions": 53, "deletions": 54}, "files": [{"sha": "3b2ba62ca93b303a9a5faab88b823a2684c70c8e", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -746,8 +746,7 @@ fn parse_path_and_ty_param_substs(p: parser) -> ast::path {\n \n fn parse_mutability(p: parser) -> ast::mutability {\n     if eat_word(p, \"mutable\") {\n-        if p.peek() == token::QUES { p.bump(); ast::maybe_mut }\n-        else { ast::mut }\n+        ast::mut\n     } else if eat_word(p, \"const\") {\n         ast::maybe_mut\n     } else {"}, {"sha": "f65ca2fbd57409784b236f6f1fccbbcec46c4218", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -1307,7 +1307,7 @@ fn print_op_maybe_parens(s: ps, expr: @ast::expr, outer_prec: int) {\n fn print_mutability(s: ps, mut: ast::mutability) {\n     alt mut {\n       ast::mut. { word_nbsp(s, \"mutable\"); }\n-      ast::maybe_mut. { word_nbsp(s, \"mutable?\"); }\n+      ast::maybe_mut. { word_nbsp(s, \"const\"); }\n       ast::imm. {/* nothing */ }\n     }\n }"}, {"sha": "fe899b8c59a90e824c2a2305443ce1eb85030e77", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -84,7 +84,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         alt m.mut {\n           ast::mut. { mstr = \"mutable \"; }\n           ast::imm. { mstr = \"\"; }\n-          ast::maybe_mut. { mstr = \"mutable? \"; }\n+          ast::maybe_mut. { mstr = \"const \"; }\n         }\n         ret mstr + ty_to_str(cx, m.ty);\n     }"}, {"sha": "e3ff7ee099559c6b7f14765aa420d462f23c86ee", "filename": "src/lib/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -188,7 +188,7 @@ fn file_reader(path: str) -> result::t<reader, str> {\n \n // Byte buffer readers\n \n-// TODO: mutable? u8, but this fails with rustboot.\n+// TODO: const u8, but this fails with rustboot.\n type byte_buf = @{buf: [u8], mutable pos: uint};\n \n obj byte_buf_reader(bbuf: byte_buf) {"}, {"sha": "6f51ab8e96c9eeea7282bc4f29b583d900083198", "filename": "src/lib/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -25,7 +25,7 @@ Function: from_vec\n \n Create a list from a vector\n */\n-fn from_vec<T>(v: [mutable? T]) -> list<T> {\n+fn from_vec<T>(v: [const T]) -> list<T> {\n     *vec::foldr({ |h, t| @cons(h, t) }, @nil::<T>, v)\n }\n "}, {"sha": "29c478472bd27e8defda36f079c0ce210f84b8d7", "filename": "src/lib/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsort.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -20,7 +20,7 @@ Merge sort. Returns a new vector containing the sorted list.\n Has worst case O(n log n) performance, best case O(n), but\n is not space efficient. This is a stable sort.\n */\n-fn merge_sort<T>(le: lteq<T>, v: [mutable? T]) -> [T] {\n+fn merge_sort<T>(le: lteq<T>, v: [const T]) -> [T] {\n     fn merge<T>(le: lteq<T>, a: [T], b: [T]) -> [T] {\n         let rs: [T] = [];\n         let a_len: uint = len::<T>(a);"}, {"sha": "fb24c59f62f32cda6dede940f5fc900e21bc09a5", "filename": "src/lib/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -189,7 +189,7 @@ Function: unsafe_from_bytes\n Converts a vector of bytes to a string. Does not verify that the\n vector contains valid UTF-8.\n */\n-fn unsafe_from_bytes(v: [mutable? u8]) -> str unsafe {\n+fn unsafe_from_bytes(v: [const u8]) -> str unsafe {\n     let vcopy: [u8] = v + [0u8];\n     let scopy: str = unsafe::reinterpret_cast(vcopy);\n     unsafe::leak(vcopy);"}, {"sha": "7de70526a7f41806e64c0c2629737914f663d41f", "filename": "src/lib/ufind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fufind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fufind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fufind.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -44,7 +44,7 @@ fn set_count(ufnd: ufind) -> uint { ret vec::len::<node>(ufnd.nodes); }\n \n // Removes all sets with IDs greater than or equal to the given value.\n fn prune(ufnd: ufind, n: uint) {\n-    // TODO: Use \"slice\" once we get rid of \"mutable?\"\n+    // TODO: Use \"slice\" once we get rid of \"const\"\n \n     let len = vec::len::<node>(ufnd.nodes);\n     while len != n { vec::pop::<node>(ufnd.nodes); len -= 1u; }"}, {"sha": "cbe7f2cf8b321e9f1c1506600aa035023b58ce59", "filename": "src/lib/vec.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -8,13 +8,13 @@ import ptr::addr_of;\n \n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n-    fn vec_len<T>(&&v: [mutable? T]) -> uint;\n+    fn vec_len<T>(&&v: [const T]) -> uint;\n }\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n     fn vec_reserve_shared<T>(t: *sys::type_desc,\n-                             &v: [mutable? T],\n+                             &v: [const T],\n                              n: uint);\n     fn vec_from_buf_shared<T>(t: *sys::type_desc,\n                               ptr: *T,\n@@ -34,7 +34,7 @@ Predicate: is_empty\n \n Returns true if a vector contains no elements.\n */\n-pure fn is_empty<T>(v: [mutable? T]) -> bool {\n+pure fn is_empty<T>(v: [const T]) -> bool {\n     // FIXME: This would be easier if we could just call len\n     for t: T in v { ret false; }\n     ret true;\n@@ -45,7 +45,7 @@ Predicate: is_not_empty\n \n Returns true if a vector contains some elements.\n */\n-pure fn is_not_empty<T>(v: [mutable? T]) -> bool { ret !is_empty(v); }\n+pure fn is_not_empty<T>(v: [const T]) -> bool { ret !is_empty(v); }\n \n /*\n Predicate: same_length\n@@ -69,7 +69,7 @@ Parameters:\n v - A vector\n n - The number of elements to reserve space for\n */\n-fn reserve<T>(&v: [mutable? T], n: uint) {\n+fn reserve<T>(&v: [const T], n: uint) {\n     rustrt::vec_reserve_shared(sys::get_type_desc::<T>(), v, n);\n }\n \n@@ -78,7 +78,7 @@ Function: len\n \n Returns the length of a vector\n */\n-pure fn len<T>(v: [mutable? T]) -> uint { unchecked { rusti::vec_len(v) } }\n+pure fn len<T>(v: [const T]) -> uint { unchecked { rusti::vec_len(v) } }\n \n /*\n Function: init_fn\n@@ -181,7 +181,7 @@ Returns the first element of a vector\n Predicates:\n <is_not_empty> (v)\n */\n-fn head<T>(v: [mutable? T]) : is_not_empty(v) -> T { ret v[0]; }\n+fn head<T>(v: [const T]) : is_not_empty(v) -> T { ret v[0]; }\n \n /*\n Function: tail\n@@ -191,7 +191,7 @@ Returns all but the first element of a vector\n Predicates:\n <is_not_empty> (v)\n */\n-fn tail<T>(v: [mutable? T]) : is_not_empty(v) -> [T] {\n+fn tail<T>(v: [const T]) : is_not_empty(v) -> [T] {\n     ret slice(v, 1u, len(v));\n }\n \n@@ -206,7 +206,7 @@ Returns all but the last elemnt of a vector\n Preconditions:\n `v` is not empty\n */\n-fn init<T>(v: [mutable? T]) -> [T] {\n+fn init<T>(v: [const T]) -> [T] {\n     assert len(v) != 0u;\n     slice(v, 0u, len(v) - 1u)\n }\n@@ -221,7 +221,7 @@ Returns:\n An option containing the last element of `v` if `v` is not empty, or\n none if `v` is empty.\n */\n-fn last<T>(v: [mutable? T]) -> option::t<T> {\n+fn last<T>(v: [const T]) -> option::t<T> {\n     if len(v) == 0u { ret none; }\n     ret some(v[len(v) - 1u]);\n }\n@@ -234,7 +234,7 @@ Returns the last element of a non-empty vector `v`\n Predicates:\n <is_not_empty> (v)\n */\n-fn last_total<T>(v: [mutable? T]) : is_not_empty(v) -> T {\n+fn last_total<T>(v: [const T]) : is_not_empty(v) -> T {\n     ret v[len(v) - 1u];\n }\n \n@@ -243,7 +243,7 @@ Function: slice\n \n Returns a copy of the elements from [`start`..`end`) from `v`.\n */\n-fn slice<T>(v: [mutable? T], start: uint, end: uint) -> [T] {\n+fn slice<T>(v: [const T], start: uint, end: uint) -> [T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     let result = [];\n@@ -259,7 +259,7 @@ Function: slice_mut\n \n Returns a copy of the elements from [`start`..`end`) from `v`.\n */\n-fn slice_mut<T>(v: [mutable? T], start: uint, end: uint) -> [mutable T] {\n+fn slice_mut<T>(v: [const T], start: uint, end: uint) -> [mutable T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     let result = [mutable];\n@@ -277,7 +277,7 @@ Function: shift\n \n Removes the first element from a vector and return it\n */\n-fn shift<T>(&v: [mutable? T]) -> T {\n+fn shift<T>(&v: [const T]) -> T {\n     let ln = len::<T>(v);\n     assert (ln > 0u);\n     let e = v[0];\n@@ -291,7 +291,7 @@ Function: pop\n \n Remove the last element from a vector and return it\n */\n-fn pop<T>(&v: [mutable? T]) -> T {\n+fn pop<T>(&v: [const T]) -> T {\n     let ln = len(v);\n     assert (ln > 0u);\n     ln -= 1u;\n@@ -323,7 +323,7 @@ fn grow<T>(&v: [T], n: uint, initval: T) {\n }\n \n // TODO: Remove me once we have slots.\n-// FIXME: Can't grow take a [mutable? T]\n+// FIXME: Can't grow take a [const T]\n /*\n Function: grow_mut\n \n@@ -384,7 +384,7 @@ Function: map\n \n Apply a function to each element of a vector and return the results\n */\n-fn map<T, U>(f: block(T) -> U, v: [mutable? T]) -> [U] {\n+fn map<T, U>(f: block(T) -> U, v: [const T]) -> [U] {\n     let result = [];\n     reserve(result, len(v));\n     for elem: T in v {\n@@ -416,7 +416,7 @@ Apply a function to each element of a vector and return the results\n If function `f` returns `none` then that element is excluded from\n the resulting vector.\n */\n-fn filter_map<T, U>(f: block(T) -> option::t<U>, v: [mutable? T]) -> [U] {\n+fn filter_map<T, U>(f: block(T) -> option::t<U>, v: [const T]) -> [U] {\n     let result = [];\n     for elem: T in v {\n         let elem2 = elem; // satisfies alias checker\n@@ -437,7 +437,7 @@ holds.\n Apply function `f` to each element of `v` and return a vector containing\n only those elements for which `f` returned true.\n */\n-fn filter<T>(f: block(T) -> bool, v: [mutable? T]) -> [T] {\n+fn filter<T>(f: block(T) -> bool, v: [const T]) -> [T] {\n     let result = [];\n     for elem: T in v {\n         let elem2 = elem; // satisfies alias checker\n@@ -454,7 +454,7 @@ Function: concat\n Concatenate a vector of vectors. Flattens a vector of vectors of T into\n a single vector of T.\n */\n-fn concat<T>(v: [mutable? [mutable? T]]) -> [T] {\n+fn concat<T>(v: [const [const T]]) -> [T] {\n     // FIXME: So much copying\n     let new: [T] = [];\n     for inner: [T] in v { new += inner; }\n@@ -466,7 +466,7 @@ Function: foldl\n \n Reduce a vector from left to right\n */\n-fn foldl<T, U>(p: block(T, U) -> T, z: T, v: [mutable? U]) -> T {\n+fn foldl<T, U>(p: block(T, U) -> T, z: T, v: [const U]) -> T {\n     let accum = z;\n     iter(v) { |elt|\n         accum = p(accum, elt);\n@@ -479,7 +479,7 @@ Function: foldr\n \n Reduce a vector from right to left\n */\n-fn foldr<T, U>(p: block(T, U) -> U, z: U, v: [mutable? T]) -> U {\n+fn foldr<T, U>(p: block(T, U) -> U, z: U, v: [const T]) -> U {\n     let accum = z;\n     riter(v) { |elt|\n         accum = p(elt, accum);\n@@ -526,7 +526,7 @@ Function: count\n \n Returns the number of elements that are equal to a given value\n */\n-fn count<T>(x: T, v: [mutable? T]) -> uint {\n+fn count<T>(x: T, v: [const T]) -> uint {\n     let cnt = 0u;\n     for elt: T in v { if x == elt { cnt += 1u; } }\n     ret cnt;\n@@ -646,7 +646,7 @@ Function: reversed\n \n Returns a vector with the order of elements reversed\n */\n-fn reversed<T>(v: [mutable? T]) -> [T] {\n+fn reversed<T>(v: [const T]) -> [T] {\n     let rs: [T] = [];\n     let i = len::<T>(v);\n     if i == 0u { ret rs; } else { i -= 1u; }\n@@ -690,7 +690,7 @@ Iterates over vector `v` and, for each element, calls function `f` with the\n element's value.\n \n */\n-fn iter<T>(v: [mutable? T], f: block(T)) {\n+fn iter<T>(v: [const T], f: block(T)) {\n     iter2(v) { |_i, v| f(v) }\n }\n \n@@ -702,7 +702,7 @@ Iterates over a vector's elements and indexes\n Iterates over vector `v` and, for each element, calls function `f` with the\n element's value and index.\n */\n-fn iter2<T>(v: [mutable? T], f: block(uint, T)) {\n+fn iter2<T>(v: [const T], f: block(uint, T)) {\n     let i = 0u;\n     for x in v { f(i, x); i += 1u; }\n }\n@@ -716,7 +716,7 @@ Iterates over vector `v` and, for each element, calls function `f` with the\n element's value.\n \n */\n-fn riter<T>(v: [mutable? T], f: block(T)) {\n+fn riter<T>(v: [const T], f: block(T)) {\n     riter2(v) { |_i, v| f(v) }\n }\n \n@@ -728,7 +728,7 @@ Iterates over a vector's elements and indexes in reverse\n Iterates over vector `v` and, for each element, calls function `f` with the\n element's value and index.\n */\n-fn riter2<T>(v: [mutable? T], f: block(uint, T)) {\n+fn riter2<T>(v: [const T], f: block(uint, T)) {\n     let i = len(v);\n     while 0u < i {\n         i -= 1u;\n@@ -746,7 +746,7 @@ is sorted then the permutations are lexicographically sorted).\n The total number of permutations produced is `len(v)!`.  If `v` contains\n repeated elements, then some permutations are repeated.\n */\n-fn permute<T>(v: [mutable? T], put: block([T])) {\n+fn permute<T>(v: [const T], put: block([T])) {\n   let ln = len(v);\n   if ln == 0u {\n     put([]);\n@@ -798,7 +798,7 @@ mod unsafe {\n     modifing its buffers, so it is up to the caller to ensure that\n     the vector is actually the specified size.\n     */\n-    unsafe fn set_len<T>(&v: [mutable? T], new_len: uint) {\n+    unsafe fn set_len<T>(&v: [const T], new_len: uint) {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         (**repr).fill = new_len * sys::size_of::<T>();\n     }\n@@ -814,7 +814,7 @@ mod unsafe {\n     Modifying the vector may cause its buffer to be reallocated, which\n     would also make any pointers to it invalid.\n     */\n-    unsafe fn to_ptr<T>(v: [mutable? T]) -> *T {\n+    unsafe fn to_ptr<T>(v: [const T]) -> *T {\n         let repr: **vec_repr = ::unsafe::reinterpret_cast(addr_of(v));\n         ret ::unsafe::reinterpret_cast(addr_of((**repr).data));\n     }"}, {"sha": "1f06a82f9a608a3ab2ebb57d76ad673e56f98194", "filename": "src/test/compile-fail/mutable-huh-box-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: assigning to immutable box\n \n fn main() {\n-    fn f(&&v: @mutable? int) {\n+    fn f(&&v: @const int) {\n         // This shouldn't be possible\n         *v = 1\n     }"}, {"sha": "0aee89fb6307333a2e2caa891fa700f079462211", "filename": "src/test/compile-fail/mutable-huh-field-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-field-assign.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: assigning to immutable field\n \n fn main() {\n-    fn f(&&v: {mutable? field: int}) {\n+    fn f(&&v: {const field: int}) {\n         // This shouldn't be possible\n         v.field = 1\n     }"}, {"sha": "46f1ceee15d415bcf87dcc79baffa0754cd671bd", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n use std;\n \n fn main() {\n-    unsafe fn f(&&v: *mutable? int) {\n+    unsafe fn f(&&v: *const int) {\n         // This shouldn't be possible\n         *v = 1\n     }"}, {"sha": "6a0d81ca50b31a063fd2d3b4f030368fb4addbdf", "filename": "src/test/compile-fail/mutable-huh-unique-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: assigning to immutable box\n \n fn main() {\n-    fn f(&&v: ~mutable? int) {\n+    fn f(&&v: ~const int) {\n         // This shouldn't be possible\n         *v = 1\n     }"}, {"sha": "1715acc585949cbbff7d9b39fc6dbd68588c83e4", "filename": "src/test/compile-fail/mutable-huh-variance-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let v = @mutable [0];\n \n-    fn f(&&v: @mutable [mutable? int]) {\n+    fn f(&&v: @mutable [const int]) {\n         *v = [mutable 3]\n     }\n "}, {"sha": "072a1f04c8ba462a6de044c139500d2bc09d1d92", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let v = [mutable @mutable ~mutable [0]];\n \n-    fn f(&&v: [mutable @mutable ~mutable [mutable? int]]) {\n+    fn f(&&v: [mutable @mutable ~mutable [const int]]) {\n     }\n \n     f(v);"}, {"sha": "0cb05af444c91d6202b7f6bd972fefe34078674e", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let a = [0];\n     let v: *mutable [int] = std::ptr::mut_addr_of(a);\n \n-    fn f(&&v: *mutable [mutable? int]) {\n+    fn f(&&v: *mutable [const int]) {\n         unsafe {\n             *v = [mutable 3]\n         }"}, {"sha": "3bd079ba6ff03c28a4a6305d44f3902bf435738b", "filename": "src/test/compile-fail/mutable-huh-variance-rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let v = {mutable g: [0]};\n \n-    fn f(&&v: {mutable g: [mutable? int]}) {\n+    fn f(&&v: {mutable g: [const int]}) {\n         v.g = [mutable 3]\n     }\n "}, {"sha": "54ffccecaf06ce0ce841f1e6fd07bb909de73dbe", "filename": "src/test/compile-fail/mutable-huh-variance-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let v = ~mutable [0];\n \n-    fn f(&&v: ~mutable [mutable? int]) {\n+    fn f(&&v: ~mutable [const int]) {\n         *v = [mutable 3]\n     }\n "}, {"sha": "e688fe2c26ed8d749c8e1c2585a7345df829e072", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let v = [mutable [0]];\n \n-    fn f(&&v: [mutable [mutable? int]]) {\n+    fn f(&&v: [mutable [const int]]) {\n         v[0] = [mutable 3]\n     }\n "}, {"sha": "81422f047f4883262037acac781b1d03c71c2699", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let v = [mutable [mutable 0]];\n \n-    fn f(&&v: [mutable [mutable? int]]) {\n+    fn f(&&v: [mutable [const int]]) {\n         v[0] = [3]\n     }\n "}, {"sha": "ef5da13a3af8abe2ffc2f0777c364627e4819871", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -3,7 +3,7 @@\n fn main() {\n     let v = [mutable [mutable [0]]];\n \n-    fn f(&&v: [mutable [mutable [mutable? int]]]) {\n+    fn f(&&v: [mutable [mutable [const int]]]) {\n         v[0][1] = [mutable 3]\n     }\n "}, {"sha": "43738008ec637cb582819bad541103dacee9c25e", "filename": "src/test/compile-fail/mutable-huh-vec-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-vec-assign.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: assigning to immutable vec content\n \n fn main() {\n-    fn f(&&v: [mutable? int]) {\n+    fn f(&&v: [const int]) {\n         // This shouldn't be possible\n         v[0] = 1\n     }"}, {"sha": "8cdd5e82f182f46ea4f6a0c02f21af3b6637c0a8", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b655fb9ea7d81d03cf049ae32babda19003631e5/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=b655fb9ea7d81d03cf049ae32babda19003631e5", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn push<T>(&v: [mutable? T], t: T) { v += [t]; }\n+fn push<T>(&v: [const T], t: T) { v += [t]; }\n \n fn main() { let v = [1, 2, 3]; push(v, 1); }"}]}