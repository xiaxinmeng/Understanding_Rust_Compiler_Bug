{"sha": "baad993daead9ddc127dd897035f6616f4e367f6", "node_id": "C_kwDOAAsO6NoAKGJhYWQ5OTNkYWVhZDlkZGMxMjdkZDg5NzAzNWY2NjE2ZjRlMzY3ZjY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:19:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:19:11Z"}, "message": "Dedup codegen_operand calls in codegen_float_intrinsic_call\n\nThis reduces the amount of llvm ir lines for this function by a little\nover half from 1662 to 781.", "tree": {"sha": "ca8754f9e0c4d324dca7193a22375b36109fcf62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca8754f9e0c4d324dca7193a22375b36109fcf62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baad993daead9ddc127dd897035f6616f4e367f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baad993daead9ddc127dd897035f6616f4e367f6", "html_url": "https://github.com/rust-lang/rust/commit/baad993daead9ddc127dd897035f6616f4e367f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baad993daead9ddc127dd897035f6616f4e367f6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "300974714c96524806b44e36c5d6a7d0e854fc3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/300974714c96524806b44e36c5d6a7d0e854fc3e", "html_url": "https://github.com/rust-lang/rust/commit/300974714c96524806b44e36c5d6a7d0e854fc3e"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "8da6c7ae9eb8e100dcdb8ad1a73a7bd0af40fc70", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 58, "deletions": 47, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/baad993daead9ddc127dd897035f6616f4e367f6/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baad993daead9ddc127dd897035f6616f4e367f6/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=baad993daead9ddc127dd897035f6616f4e367f6", "patch": "@@ -414,73 +414,84 @@ fn codegen_float_intrinsic_call<'tcx>(\n ) -> bool {\n     macro call_intrinsic_match {\n         ($fx:expr, $intrinsic:expr, $ret:expr, $args:expr, $(\n-            $name:ident($($arg:ident),*) -> $ty:ident => $func:ident,\n+            $name:ident($arg_count:literal) -> $ty:ident => $func:ident,\n         )*) => {\n-            let res = match $intrinsic {\n+            let (name, arg_count, ty) = match $intrinsic {\n                 $(\n-                    sym::$name => {\n-                        if let [$(ref $arg),*] = *$args {\n-                            let args = [$(codegen_operand($fx, $arg),)*];\n-                            Some($fx.easy_call(stringify!($func), &args, $fx.tcx.types.$ty))\n-                        } else {\n-                            None\n-                        }\n-                    }\n+                    sym::$name => (stringify!($func), $arg_count, $fx.tcx.types.$ty),\n                 )*\n                 _ => return false,\n             };\n \n-            if let Some(res) = res {\n-                $ret.write_cvalue($fx, res);\n-            } else {\n+            if $args.len() != arg_count {\n                 bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n             }\n \n+            let (a, b, c);\n+            let args = match $args {\n+                [x] => {\n+                    a = [codegen_operand($fx, x)];\n+                    &a as &[_]\n+                }\n+                [x, y] => {\n+                    b = [codegen_operand($fx, x), codegen_operand($fx, y)];\n+                    &b\n+                }\n+                [x, y, z] => {\n+                    c = [codegen_operand($fx, x), codegen_operand($fx, y), codegen_operand($fx, z)];\n+                    &c\n+                }\n+                _ => unreachable!(),\n+            };\n+\n+            let res = $fx.easy_call(name, &args, ty);\n+            $ret.write_cvalue($fx, res);\n+\n             true\n         }\n     }\n \n     call_intrinsic_match! {\n         fx, intrinsic, ret, args,\n-        expf32(flt) -> f32 => expf,\n-        expf64(flt) -> f64 => exp,\n-        exp2f32(flt) -> f32 => exp2f,\n-        exp2f64(flt) -> f64 => exp2,\n-        sqrtf32(flt) -> f32 => sqrtf,\n-        sqrtf64(flt) -> f64 => sqrt,\n-        powif32(a, x) -> f32 => __powisf2, // compiler-builtins\n-        powif64(a, x) -> f64 => __powidf2, // compiler-builtins\n-        powf32(a, x) -> f32 => powf,\n-        powf64(a, x) -> f64 => pow,\n-        logf32(flt) -> f32 => logf,\n-        logf64(flt) -> f64 => log,\n-        log2f32(flt) -> f32 => log2f,\n-        log2f64(flt) -> f64 => log2,\n-        log10f32(flt) -> f32 => log10f,\n-        log10f64(flt) -> f64 => log10,\n-        fabsf32(flt) -> f32 => fabsf,\n-        fabsf64(flt) -> f64 => fabs,\n-        fmaf32(x, y, z) -> f32 => fmaf,\n-        fmaf64(x, y, z) -> f64 => fma,\n-        copysignf32(x, y) -> f32 => copysignf,\n-        copysignf64(x, y) -> f64 => copysign,\n+        expf32(1) -> f32 => expf,\n+        expf64(1) -> f64 => exp,\n+        exp2f32(1) -> f32 => exp2f,\n+        exp2f64(1) -> f64 => exp2,\n+        sqrtf32(1) -> f32 => sqrtf,\n+        sqrtf64(1) -> f64 => sqrt,\n+        powif32(2) -> f32 => __powisf2, // compiler-builtins\n+        powif64(2) -> f64 => __powidf2, // compiler-builtins\n+        powf32(2) -> f32 => powf,\n+        powf64(2) -> f64 => pow,\n+        logf32(1) -> f32 => logf,\n+        logf64(1) -> f64 => log,\n+        log2f32(1) -> f32 => log2f,\n+        log2f64(1) -> f64 => log2,\n+        log10f32(1) -> f32 => log10f,\n+        log10f64(1) -> f64 => log10,\n+        fabsf32(1) -> f32 => fabsf,\n+        fabsf64(1) -> f64 => fabs,\n+        fmaf32(3) -> f32 => fmaf,\n+        fmaf64(3) -> f64 => fma,\n+        copysignf32(2) -> f32 => copysignf,\n+        copysignf64(2) -> f64 => copysign,\n \n         // rounding variants\n         // FIXME use clif insts\n-        floorf32(flt) -> f32 => floorf,\n-        floorf64(flt) -> f64 => floor,\n-        ceilf32(flt) -> f32 => ceilf,\n-        ceilf64(flt) -> f64 => ceil,\n-        truncf32(flt) -> f32 => truncf,\n-        truncf64(flt) -> f64 => trunc,\n-        roundf32(flt) -> f32 => roundf,\n-        roundf64(flt) -> f64 => round,\n+        floorf32(1) -> f32 => floorf,\n+        floorf64(1) -> f64 => floor,\n+        ceilf32(1) -> f32 => ceilf,\n+        ceilf64(1) -> f64 => ceil,\n+        truncf32(1) -> f32 => truncf,\n+        truncf64(1) -> f64 => trunc,\n+        roundf32(1) -> f32 => roundf,\n+        roundf64(1) -> f64 => round,\n \n         // trigonometry\n-        sinf32(flt) -> f32 => sinf,\n-        sinf64(flt) -> f64 => sin,\n-        cosf32(flt) -> f32 => cosf,\n-        cosf64(flt) -> f64 => cos,\n+        sinf32(1) -> f32 => sinf,\n+        sinf64(1) -> f64 => sin,\n+        cosf32(1) -> f32 => cosf,\n+        cosf64(1) -> f64 => cos,\n     }\n }\n "}]}