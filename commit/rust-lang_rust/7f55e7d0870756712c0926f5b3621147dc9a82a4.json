{"sha": "7f55e7d0870756712c0926f5b3621147dc9a82a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTVlN2QwODcwNzU2NzEyYzA5MjZmNWIzNjIxMTQ3ZGM5YTgyYTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-10T00:19:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-03-10T00:38:23Z"}, "message": "Add a couple more missing pieces to libc and os.", "tree": {"sha": "ae1e397f8768ec34607c196245ed59b2bc07bc8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1e397f8768ec34607c196245ed59b2bc07bc8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f55e7d0870756712c0926f5b3621147dc9a82a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f55e7d0870756712c0926f5b3621147dc9a82a4", "html_url": "https://github.com/rust-lang/rust/commit/7f55e7d0870756712c0926f5b3621147dc9a82a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f55e7d0870756712c0926f5b3621147dc9a82a4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7d387434981921bdfb4632a3512e28277b83810", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d387434981921bdfb4632a3512e28277b83810", "html_url": "https://github.com/rust-lang/rust/commit/b7d387434981921bdfb4632a3512e28277b83810"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "d3fd0671b42f4735876226392ef842a66293903c", "filename": "src/etc/libc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f55e7d0870756712c0926f5b3621147dc9a82a4/src%2Fetc%2Flibc.c", "raw_url": "https://github.com/rust-lang/rust/raw/7f55e7d0870756712c0926f5b3621147dc9a82a4/src%2Fetc%2Flibc.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flibc.c?ref=7f55e7d0870756712c0926f5b3621147dc9a82a4", "patch": "@@ -26,6 +26,9 @@\n #define put_type(N,T) \\\n         printf(\"        type %s = %c%d;\\n\", N, S(T), B(T))\n \n+#define put_ftype(N,T) \\\n+        printf(\"        type %s = f%d;\\n\", N, B(T))\n+\n #define CT(T) ((((T)-1)<0) ? \"int\" : \"uint\")\n #define CS(T) ((((T)-1)<0) ? \"\" : \"_u\")\n #define put_const(N,T)                            \\\n@@ -48,6 +51,9 @@ void c95_types() {\n   put_type(\"c_long\", long);\n   put_type(\"c_ulong\", unsigned long);\n \n+  put_ftype(\"c_float\", float);\n+  put_ftype(\"c_double\", double);\n+\n   put_type(\"size_t\", size_t);\n   put_type(\"ptrdiff_t\", ptrdiff_t);\n "}, {"sha": "56774e3f7702a960dc9b11e3f9d95129c150aabd", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f55e7d0870756712c0926f5b3621147dc9a82a4/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f55e7d0870756712c0926f5b3621147dc9a82a4/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=7f55e7d0870756712c0926f5b3621147dc9a82a4", "patch": "@@ -86,7 +86,7 @@ export types, funcs, consts;\n // you can write more-platform-agnostic code if you stick to just these\n // symbols.\n \n-export c_double, c_void, FILE, fpos_t;\n+export c_float, c_double, c_void, FILE, fpos_t;\n export DIR, dirent;\n export c_char, c_schar, c_uchar;\n export c_short, c_ushort, c_int, c_uint, c_long, c_ulong;\n@@ -123,7 +123,6 @@ mod types {\n     // Standard types that are opaque or common, so are not per-target.\n     mod common {\n         mod c95 {\n-            type c_double = float;\n             enum c_void {}\n             enum FILE {}\n             enum fpos_t {}\n@@ -154,6 +153,8 @@ mod types {\n                 type c_uint = u32;\n                 type c_long = i32;\n                 type c_ulong = u32;\n+                type c_float = f32;\n+                type c_double = f64;\n                 type size_t = u32;\n                 type ptrdiff_t = i32;\n                 type clock_t = i32;\n@@ -196,6 +197,8 @@ mod types {\n                 type c_uint = u32;\n                 type c_long = i64;\n                 type c_ulong = u64;\n+                type c_float = f32;\n+                type c_double = f64;\n                 type size_t = u64;\n                 type ptrdiff_t = i64;\n                 type clock_t = i64;\n@@ -241,6 +244,8 @@ mod types {\n                 type c_uint = u32;\n                 type c_long = i64;\n                 type c_ulong = u64;\n+                type c_float = f32;\n+                type c_double = f64;\n                 type size_t = u64;\n                 type ptrdiff_t = i64;\n                 type clock_t = i32;\n@@ -286,6 +291,8 @@ mod types {\n                 type c_uint = u32;\n                 type c_long = i32;\n                 type c_ulong = u32;\n+                type c_float = f32;\n+                type c_double = f64;\n                 type size_t = u32;\n                 type ptrdiff_t = i32;\n                 type clock_t = i32;\n@@ -358,6 +365,8 @@ mod types {\n                 type c_uint = u32;\n                 type c_long = i32;\n                 type c_ulong = u32;\n+                type c_float = f32;\n+                type c_double = f64;\n                 type size_t = u32;\n                 type ptrdiff_t = i32;\n                 type clock_t = u32;\n@@ -400,6 +409,8 @@ mod types {\n                 type c_uint = u32;\n                 type c_long = i64;\n                 type c_ulong = u64;\n+                type c_float = f32;\n+                type c_double = f64;\n                 type size_t = u64;\n                 type ptrdiff_t = i64;\n                 type clock_t = u64;\n@@ -841,6 +852,9 @@ mod funcs {\n \n             #[link_name = \"_fdopen\"]\n             fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n+\n+            #[link_name = \"_fileno\"]\n+            fn fileno(stream: *FILE) -> c_int;\n         }\n \n         #[nolink]\n@@ -942,6 +956,7 @@ mod funcs {\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n             fn pclose(stream: *FILE) -> c_int;\n             fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n+            fn fileno(stream: *FILE) -> c_int;\n         }\n \n         #[nolink]"}, {"sha": "43192afca8e7b276e0f5489fe986fd93f9d1d41d", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f55e7d0870756712c0926f5b3621147dc9a82a4/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f55e7d0870756712c0926f5b3621147dc9a82a4/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=7f55e7d0870756712c0926f5b3621147dc9a82a4", "patch": "@@ -24,7 +24,7 @@ import option = option::t;\n import getcwd = rustrt::rust_getcwd;\n import consts::*;\n \n-export close, fclose;\n+export close, fclose, fsync_fd;\n export env, getenv, setenv, fdopen, pipe;\n export getcwd, dll_filename, self_exe_path;\n export exe_suffix, dll_suffix, sysname;"}]}