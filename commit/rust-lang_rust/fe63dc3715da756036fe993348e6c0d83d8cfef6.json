{"sha": "fe63dc3715da756036fe993348e6c0d83d8cfef6", "node_id": "C_kwDOAAsO6NoAKGZlNjNkYzM3MTVkYTc1NjAzNmZlOTkzMzQ4ZTZjMGQ4M2Q4Y2ZlZjY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-13T17:02:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-13T17:02:19Z"}, "message": "cargo-miri: fix forwarding arguments to cargo", "tree": {"sha": "6848030910b95217d66beb56fec32f9bf17e96f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6848030910b95217d66beb56fec32f9bf17e96f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe63dc3715da756036fe993348e6c0d83d8cfef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe63dc3715da756036fe993348e6c0d83d8cfef6", "html_url": "https://github.com/rust-lang/rust/commit/fe63dc3715da756036fe993348e6c0d83d8cfef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe63dc3715da756036fe993348e6c0d83d8cfef6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8815efdae5d9cf20c75f454f0b44673437ef695", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8815efdae5d9cf20c75f454f0b44673437ef695", "html_url": "https://github.com/rust-lang/rust/commit/d8815efdae5d9cf20c75f454f0b44673437ef695"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "d7216060358cb583a7ffe0a3bcd26ec7c8263ab0", "filename": "src/tools/miri/cargo-miri/src/arg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe63dc3715da756036fe993348e6c0d83d8cfef6/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Farg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe63dc3715da756036fe993348e6c0d83d8cfef6/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Farg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Farg.rs?ref=fe63dc3715da756036fe993348e6c0d83d8cfef6", "patch": "@@ -40,7 +40,8 @@ impl<'s, I: Iterator<Item = Cow<'s, str>>> Iterator for ArgSplitFlagValue<'_, I>\n         if arg == \"--\" {\n             // Stop searching at `--`.\n             self.args = None;\n-            return None;\n+            // But yield the `--` so that it does not get lost!\n+            return Some(Err(Cow::Borrowed(\"--\")));\n         }\n         // These branches cannot be merged if we want to avoid the allocation in the `Borrowed` branch.\n         match &arg {\n@@ -79,9 +80,8 @@ impl<'a, I: Iterator<Item = String> + 'a> ArgSplitFlagValue<'a, I> {\n     ) -> impl Iterator<Item = Result<String, String>> + 'a {\n         ArgSplitFlagValue::new(args.map(Cow::Owned), name).map(|x| {\n             match x {\n-                Ok(Cow::Owned(s)) => Ok(s),\n-                Err(Cow::Owned(s)) => Err(s),\n-                _ => panic!(\"iterator converted owned to borrowed\"),\n+                Ok(s) => Ok(s.into_owned()),\n+                Err(s) => Err(s.into_owned()),\n             }\n         })\n     }"}, {"sha": "465e4a1b2d2b20dce3afaaa443b5847e928c710a", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fe63dc3715da756036fe993348e6c0d83d8cfef6/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe63dc3715da756036fe993348e6c0d83d8cfef6/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=fe63dc3715da756036fe993348e6c0d83d8cfef6", "patch": "@@ -113,30 +113,17 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     };\n     let metadata = get_cargo_metadata();\n     let mut cmd = cargo();\n-    cmd.arg(cargo_cmd);\n-\n-    // Forward all arguments before `--` other than `--target-dir` and its value to Cargo.\n-    // (We want to *change* the target-dir value, so we must not forward it.)\n-    let mut target_dir = None;\n-    for arg in ArgSplitFlagValue::from_string_iter(&mut args, \"--target-dir\") {\n-        match arg {\n-            Ok(value) => {\n-                if target_dir.is_some() {\n-                    show_error!(\"`--target-dir` is provided more than once\");\n-                }\n-                target_dir = Some(value.into());\n-            }\n-            Err(arg) => {\n-                cmd.arg(arg);\n-            }\n-        }\n+    cmd.arg(&cargo_cmd);\n+    // In nextest we have to also forward the main `verb`.\n+    if cargo_cmd == \"nextest\" {\n+        cmd.arg(\n+            args.next()\n+                .unwrap_or_else(|| show_error!(\"`cargo miri nextest` expects a verb (e.g. `run`)\")),\n+        );\n     }\n-    // Detect the target directory if it's not specified via `--target-dir`.\n-    // (`cargo metadata` does not support `--target-dir`, that's why we have to handle this ourselves.)\n-    let target_dir = target_dir.get_or_insert_with(|| metadata.target_directory.clone());\n-    // Set `--target-dir` to `miri` inside the original target directory.\n-    target_dir.push(\"miri\");\n-    cmd.arg(\"--target-dir\").arg(target_dir);\n+    // We set the following flags *before* forwarding more arguments.\n+    // This is needed to fix <https://github.com/rust-lang/miri/issues/2829>: cargo will stop\n+    // interpreting things as flags when it sees the first positional argument.\n \n     // Make sure the build target is explicitly set.\n     // This is needed to make the `target.runner` settings do something,\n@@ -154,8 +141,23 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     cmd.arg(\"--config\")\n         .arg(format!(\"target.'cfg(all())'.runner=[{cargo_miri_path_for_toml}, 'runner']\"));\n \n-    // Forward all further arguments after `--` to cargo.\n-    cmd.arg(\"--\").args(args);\n+    // Set `--target-dir` to `miri` inside the original target directory.\n+    let mut target_dir = match get_arg_flag_value(\"--target-dir\") {\n+        Some(dir) => PathBuf::from(dir),\n+        None => metadata.target_directory.clone().into_std_path_buf(),\n+    };\n+    target_dir.push(\"miri\");\n+    cmd.arg(\"--target-dir\").arg(target_dir);\n+\n+    // *After* we set all the flags that need setting, forward everything else. Make sure to skip\n+    // `--target-dir` (which would otherwise be set twice).\n+    for arg in\n+        ArgSplitFlagValue::from_string_iter(&mut args, \"--target-dir\").filter_map(Result::err)\n+    {\n+        cmd.arg(arg);\n+    }\n+    // Forward all further arguments (not consumed by `ArgSplitFlagValue`) to cargo.\n+    cmd.args(args);\n \n     // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n     // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish"}, {"sha": "9df90c725e40f4bd90059a97c3b232542d405389", "filename": "src/tools/miri/test-cargo-miri/run-test.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe63dc3715da756036fe993348e6c0d83d8cfef6/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/fe63dc3715da756036fe993348e6c0d83d8cfef6/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py?ref=fe63dc3715da756036fe993348e6c0d83d8cfef6", "patch": "@@ -108,8 +108,9 @@ def test_cargo_miri_run():\n         env={'MIRITESTVAR': \"wrongval\"}, # changing the env var causes a rebuild (re-runs build.rs),\n                                          # so keep it set\n     )\n+    # This also covers passing arguments without `--`: Cargo will forward unused positional arguments to the program.\n     test(\"`cargo miri run` (with arguments and target)\",\n-        cargo_miri(\"run\") + [\"--bin\", \"cargo-miri-test\", \"--\", \"hello world\", '\"hello world\"', r'he\\\\llo\\\"world'],\n+        cargo_miri(\"run\") + [\"--bin\", \"cargo-miri-test\", \"hello world\", '\"hello world\"', r'he\\\\llo\\\"world'],\n         \"run.args.stdout.ref\", \"run.args.stderr.ref\",\n     )\n     test(\"`cargo miri r` (subcrate, no isolation)\","}]}