{"sha": "71637c293768052e73940a0eb1ddb71ce9d24c40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNjM3YzI5Mzc2ODA1MmU3Mzk0MGEwZWIxZGRiNzFjZTlkMjRjNDA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-22T20:13:18Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-26T21:06:12Z"}, "message": "Use better spans for dummy accesses used in matches", "tree": {"sha": "a5beb62d04f935e7e42cfc78da8cbfb9ec570444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5beb62d04f935e7e42cfc78da8cbfb9ec570444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71637c293768052e73940a0eb1ddb71ce9d24c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71637c293768052e73940a0eb1ddb71ce9d24c40", "html_url": "https://github.com/rust-lang/rust/commit/71637c293768052e73940a0eb1ddb71ce9d24c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71637c293768052e73940a0eb1ddb71ce9d24c40/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45b48b9b6d70065a16cc119fe934ed342c664c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b48b9b6d70065a16cc119fe934ed342c664c78", "html_url": "https://github.com/rust-lang/rust/commit/45b48b9b6d70065a16cc119fe934ed342c664c78"}], "stats": {"total": 219, "additions": 85, "deletions": 134}, "files": [{"sha": "df38de1ca2ad2d1b696ed8fe5ba65dfef257ccf9", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -63,13 +63,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // injects a borrow of the matched input, which should have the same effect\n         // as eddyb's hack. Once NLL is the default, we can remove the hack.\n \n-        let dummy_source_info = self.source_info(span);\n+        let dummy_source_info = self.source_info(discriminant_span);\n         let dummy_access = Rvalue::Discriminant(discriminant_place.clone());\n         let dummy_ty = dummy_access.ty(&self.local_decls, tcx);\n         let dummy_temp = self.temp(dummy_ty, dummy_source_info.span);\n         self.cfg.push_assign(block, dummy_source_info, &dummy_temp, dummy_access);\n \n-        let source_info = self.source_info(span);\n+        let source_info = self.source_info(discriminant_span);\n         let borrowed_input_temp = if tcx.generate_borrow_of_any_match_input() {\n             // The region is unknown at this point; we rely on NLL\n             // inference to find an appropriate one. Therefore you can\n@@ -134,9 +134,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         // This should ensure that you cannot change\n                         // the variant for an enum while you are in\n                         // the midst of matching on it.\n-\n+                        let pattern_source_info = self.source_info(pattern.span);\n                         self.cfg.push(*pre_binding_block, Statement {\n-                            source_info,\n+                            source_info: pattern_source_info,\n                             kind: StatementKind::ReadForMatch(borrow_temp.clone()),\n                         });\n                     }"}, {"sha": "4048243acfa2b12aa20b5757c75f411370c0b861", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -17,26 +17,22 @@ LL |         if let Some(thing) = maybe {\n    = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `maybe` (Mir)\n-  --> $DIR/issue-41962.rs:17:9\n+  --> $DIR/issue-41962.rs:17:30\n    |\n-LL |           if let Some(thing) = maybe {\n-   |           ^           ----- value moved here\n-   |  _________|\n-   | |\n-LL | |         }\n-   | |_________^ value used here after move\n+LL |         if let Some(thing) = maybe {\n+   |                     -----    ^^^^^ value used here after move\n+   |                     |\n+   |                     value moved here\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `maybe` (Mir)\n-  --> $DIR/issue-41962.rs:17:9\n+  --> $DIR/issue-41962.rs:17:30\n    |\n-LL |           if let Some(thing) = maybe {\n-   |           ^           ----- value moved here\n-   |  _________|\n-   | |\n-LL | |         }\n-   | |_________^ value borrowed here after move\n+LL |         if let Some(thing) = maybe {\n+   |                     -----    ^^^^^ value borrowed here after move\n+   |                     |\n+   |                     value moved here\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n "}, {"sha": "85924a75261685fecf5fdb72b129e693a39dffcb", "filename": "src/test/ui/issue-17385.nll.stderr", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-17385.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-17385.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17385.nll.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -1,26 +1,20 @@\n error[E0382]: use of moved value: `foo`\n-  --> $DIR/issue-17385.rs:28:5\n+  --> $DIR/issue-17385.rs:28:11\n    |\n-LL |       drop(foo);\n-   |            --- value moved here\n-LL | /     match foo { //~ ERROR use of moved value\n-LL | |         X(1) => (),\n-LL | |         _ => unreachable!()\n-LL | |     }\n-   | |_____^ value used here after move\n+LL |     drop(foo);\n+   |          --- value moved here\n+LL |     match foo { //~ ERROR use of moved value\n+   |           ^^^ value used here after move\n    |\n    = note: move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `foo`\n-  --> $DIR/issue-17385.rs:28:5\n+  --> $DIR/issue-17385.rs:28:11\n    |\n-LL |       drop(foo);\n-   |            --- value moved here\n-LL | /     match foo { //~ ERROR use of moved value\n-LL | |         X(1) => (),\n-LL | |         _ => unreachable!()\n-LL | |     }\n-   | |_____^ value borrowed here after move\n+LL |     drop(foo);\n+   |          --- value moved here\n+LL |     match foo { //~ ERROR use of moved value\n+   |           ^^^ value borrowed here after move\n    |\n    = note: move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n \n@@ -36,28 +30,22 @@ LL |         X(1) => (),\n    = note: move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `e`\n-  --> $DIR/issue-17385.rs:35:5\n+  --> $DIR/issue-17385.rs:35:11\n    |\n-LL |       drop(e);\n-   |            - value moved here\n-LL | /     match e { //~ ERROR use of moved value\n-LL | |         Enum::Variant1 => unreachable!(),\n-LL | |         Enum::Variant2 => ()\n-LL | |     }\n-   | |_____^ value used here after move\n+LL |     drop(e);\n+   |          - value moved here\n+LL |     match e { //~ ERROR use of moved value\n+   |           ^ value used here after move\n    |\n    = note: move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `e`\n-  --> $DIR/issue-17385.rs:35:5\n+  --> $DIR/issue-17385.rs:35:11\n    |\n-LL |       drop(e);\n-   |            - value moved here\n-LL | /     match e { //~ ERROR use of moved value\n-LL | |         Enum::Variant1 => unreachable!(),\n-LL | |         Enum::Variant2 => ()\n-LL | |     }\n-   | |_____^ value borrowed here after move\n+LL |     drop(e);\n+   |          - value moved here\n+LL |     match e { //~ ERROR use of moved value\n+   |           ^ value borrowed here after move\n    |\n    = note: move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n "}, {"sha": "d264bf8d2734df2146495a8e9120141e917f1603", "filename": "src/test/ui/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-move-match-input-into-guard.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -1,21 +1,14 @@\n error[E0505]: cannot move out of `b` because it is borrowed\n   --> $DIR/issue-27282-move-match-input-into-guard.rs:26:16\n    |\n-LL |        match b {\n-   |   _____-\n-   |  |_____|\n-   | ||\n-LL | ||         &mut false => {},\n-LL | ||         _ if { (|| { let bar = b; *bar = false; })();\n-   | ||                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ move out of `b` occurs here\n-LL | ||                      //~^ ERROR cannot move out of `b` because it is borrowed [E0505]\n-...  ||\n-LL | ||         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n-LL | ||     }\n-   | ||     -\n-   | ||_____|\n-   | |______borrow of `b` occurs here\n-   |        borrow later used here\n+LL |     match b {\n+   |           - borrow of `b` occurs here\n+LL |         &mut false => {},\n+LL |         _ if { (|| { let bar = b; *bar = false; })();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ move out of `b` occurs here\n+...\n+LL |         &mut true => { println!(\"You might think we should get here\"); },\n+   |         --------- borrow later used here\n \n error[E0382]: use of moved value: `*b`\n   --> $DIR/issue-27282-move-match-input-into-guard.rs:29:14"}, {"sha": "fb11090c222d073b570b60e1416726713a93e5b1", "filename": "src/test/ui/issue-27282-mutate-before-diverging-arm-1.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-1.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -1,24 +1,16 @@\n error[E0500]: closure requires unique access to `x` but it is already borrowed\n   --> $DIR/issue-27282-mutate-before-diverging-arm-1.rs:33:14\n    |\n-LL |        match x {\n-   |   _____-\n-   |  |_____|\n-   | ||\n-LL | ||         &mut None => panic!(\"unreachable\"),\n-LL | ||         &mut Some(&_) if {\n-LL | ||             // ForceFnOnce needed to exploit #27282\n-LL | ||             (|| { *x = None; drop(force_fn_once); })();\n-   | ||              ^^    - borrow occurs due to use of `x` in closure\n-   | ||              |\n-   | ||              closure construction occurs here\n-...  ||\n-LL | ||         _ => panic!(\"unreachable\"),\n-LL | ||     }\n-   | ||     -\n-   | ||_____|\n-   | |______borrow occurs here\n-   |        borrow later used here\n+LL |     match x {\n+   |           - borrow occurs here\n+...\n+LL |             (|| { *x = None; drop(force_fn_once); })();\n+   |              ^^    - borrow occurs due to use of `x` in closure\n+   |              |\n+   |              closure construction occurs here\n+...\n+LL |         &mut Some(&a) if { // this binds to garbage if we've corrupted discriminant\n+   |         ------------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "6e643d30185f9105ea9def4a08cc4645aec7f904", "filename": "src/test/ui/issue-27282-mutate-before-diverging-arm-2.stderr", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-mutate-before-diverging-arm-2.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -1,25 +1,16 @@\n error[E0500]: closure requires unique access to `x` but it is already borrowed\n   --> $DIR/issue-27282-mutate-before-diverging-arm-2.rs:38:18\n    |\n-LL |        match x {\n-   |   _____-\n-   |  |_____|\n-   | ||\n-LL | ||         &mut None => panic!(\"unreachable\"),\n-LL | ||         &mut Some(&_)\n-LL | ||             if {\n-LL | ||                 // ForceFnOnce needed to exploit #27282\n-LL | ||                 (|| { *x = None; drop(force_fn_once); })();\n-   | ||                  ^^    - borrow occurs due to use of `x` in closure\n-   | ||                  |\n-   | ||                  closure construction occurs here\n-...  ||\n-LL | ||         _ => panic!(\"unreachable\"),\n-LL | ||     }\n-   | ||     -\n-   | ||_____|\n-   | |______borrow occurs here\n-   |        borrow later used here\n+LL |     match x {\n+   |           - borrow occurs here\n+...\n+LL |                 (|| { *x = None; drop(force_fn_once); })();\n+   |                  ^^    - borrow occurs due to use of `x` in closure\n+   |                  |\n+   |                  closure construction occurs here\n+...\n+LL |         &mut Some(&2)\n+   |         ------------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "d8a47efc0aaa43b4980d8ac580468ac7781ee634", "filename": "src/test/ui/issue-47412.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-47412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fissue-47412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47412.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -1,16 +1,16 @@\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-47412.rs:21:5\n+  --> $DIR/issue-47412.rs:21:11\n    |\n LL |     match u.void {}\n-   |     ^^^^^^^^^^^^^^^ access to union field\n+   |           ^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-47412.rs:27:5\n+  --> $DIR/issue-47412.rs:27:11\n    |\n LL |     match *ptr {}\n-   |     ^^^^^^^^^^^^^ dereference of raw pointer\n+   |           ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n "}, {"sha": "e5b001def56f2cc5efa7ff0eac0faecbc94cf65a", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.nll.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -5,18 +5,12 @@ LL |                     other //~ ERROR explicit lifetime\n    |                     ^^^^^\n \n error[E0621]: explicit lifetime required in the type of `other`\n-  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:18:9\n+  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:18:15\n    |\n-LL |       fn bar(&self, other: Foo) -> Foo<'a> {\n-   |                     ----- consider changing the type of `other` to `Foo<'a>`\n-LL | /         match *self {\n-LL | |             Foo::Bar(s) => {\n-LL | |                 if s == \"test\" {\n-LL | |                     other //~ ERROR explicit lifetime\n-...  |\n-LL | |             }\n-LL | |         }\n-   | |_________^ lifetime `'a` required\n+LL |     fn bar(&self, other: Foo) -> Foo<'a> {\n+   |                   ----- consider changing the type of `other` to `Foo<'a>`\n+LL |         match *self {\n+   |               ^^^^^ lifetime `'a` required\n \n error: aborting due to previous error\n "}, {"sha": "acbba9ee18754d252f39ca3d91200e301dd68f0f", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -1,17 +1,14 @@\n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowed-match-issue-45045.rs:24:5\n+  --> $DIR/borrowed-match-issue-45045.rs:24:11\n    |\n-LL |       let f = &mut e;\n-   |               ------ borrow of `e` occurs here\n-LL |       let g = f;\n-LL | /     match e { //~ cannot use `e` because it was mutably borrowed [E0503]\n-LL | |         Xyz::A => println!(\"a\"),\n-LL | |         //~^ cannot use `e` because it was mutably borrowed [E0503]\n-LL | |         Xyz::B => println!(\"b\"),\n-LL | |     };\n-   | |_____^ use of borrowed `e`\n-LL |       *g = Xyz::B;\n-   |       ----------- borrow later used here\n+LL |     let f = &mut e;\n+   |             ------ borrow of `e` occurs here\n+LL |     let g = f;\n+LL |     match e { //~ cannot use `e` because it was mutably borrowed [E0503]\n+   |           ^ use of borrowed `e`\n+...\n+LL |     *g = Xyz::B;\n+   |     ----------- borrow later used here\n \n error[E0503]: cannot use `e` because it was mutably borrowed\n   --> $DIR/borrowed-match-issue-45045.rs:25:9"}, {"sha": "09e634ba725f40d806163b731262c2edc3aee69d", "filename": "src/test/ui/span/issue-40157.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71637c293768052e73940a0eb1ddb71ce9d24c40/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.nll.stderr?ref=71637c293768052e73940a0eb1ddb71ce9d24c40", "patch": "@@ -2,11 +2,11 @@ error[E0597]: `foo` does not live long enough\n   --> $DIR/issue-40157.rs:12:53\n    |\n LL |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n-   |                       ------------------------------^^^--------------------\n-   |                       |                             |          |\n-   |                       |                             |          `foo` dropped here while still borrowed\n-   |                       |                             borrowed value does not live long enough\n-   |                       borrow later used here\n+   |                             ------------------------^^^---------\n+   |                             |                       |          |\n+   |                             |                       |          `foo` dropped here while still borrowed\n+   |                             |                       borrowed value does not live long enough\n+   |                             borrow later used here\n \n error: aborting due to previous error\n "}]}