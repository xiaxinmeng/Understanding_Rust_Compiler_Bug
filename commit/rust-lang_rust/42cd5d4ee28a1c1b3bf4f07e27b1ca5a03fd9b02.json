{"sha": "42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyY2Q1ZDRlZTI4YTFjMWIzYmY0ZjA3ZTI3YjFjYTVhMDNmZDliMDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-28T19:39:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-28T19:39:34Z"}, "message": "make it possible to track where hash diverges", "tree": {"sha": "7f6d374b9a2e56b5a834abfdc0dee23ec8b01da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f6d374b9a2e56b5a834abfdc0dee23ec8b01da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02", "html_url": "https://github.com/rust-lang/rust/commit/42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e359147d1214c6fe8e010118c5df05ca10f0a2b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e359147d1214c6fe8e010118c5df05ca10f0a2b9", "html_url": "https://github.com/rust-lang/rust/commit/e359147d1214c6fe8e010118c5df05ca10f0a2b9"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "7b1e0d2d0c8b676fb9e84832b13cab9981fef2f5", "filename": "src/librustc_incremental/calculate_svh.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh.rs?ref=42cd5d4ee28a1c1b3bf4f07e27b1ca5a03fd9b02", "patch": "@@ -306,12 +306,14 @@ mod svh_visitor {\n \n         fn visit_variant_data(&mut self, s: &'a VariantData, name: Name,\n                               g: &'a Generics, _: NodeId, _: Span) {\n+            debug!(\"visit_variant_data: st={:?}\", self.st);\n             SawStructDef(name.as_str()).hash(self.st);\n             visit::walk_generics(self, g);\n             visit::walk_struct_def(self, s)\n         }\n \n         fn visit_variant(&mut self, v: &'a Variant, g: &'a Generics, item_id: NodeId) {\n+            debug!(\"visit_variant: st={:?}\", self.st);\n             SawVariant.hash(self.st);\n             // walk_variant does not call walk_generics, so do it here.\n             visit::walk_generics(self, g);\n@@ -333,14 +335,17 @@ mod svh_visitor {\n         // pattern, please move that method up above this comment.)\n \n         fn visit_name(&mut self, _: Span, name: Name) {\n+            debug!(\"visit_name: st={:?}\", self.st);\n             SawIdent(name.as_str()).hash(self.st);\n         }\n \n         fn visit_lifetime(&mut self, l: &'a Lifetime) {\n+            debug!(\"visit_lifetime: st={:?}\", self.st);\n             SawLifetime(l.name.as_str()).hash(self.st);\n         }\n \n         fn visit_lifetime_def(&mut self, l: &'a LifetimeDef) {\n+            debug!(\"visit_lifetime_def: st={:?}\", self.st);\n             SawLifetimeDef(l.lifetime.name.as_str()).hash(self.st);\n         }\n \n@@ -350,14 +355,18 @@ mod svh_visitor {\n         // that a change to a crate body will require downstream\n         // crates to be recompiled.\n         fn visit_expr(&mut self, ex: &'a Expr) {\n+            debug!(\"visit_expr: st={:?}\", self.st);\n             SawExpr(saw_expr(&ex.node)).hash(self.st); visit::walk_expr(self, ex)\n         }\n \n         fn visit_stmt(&mut self, s: &'a Stmt) {\n+            debug!(\"visit_stmt: st={:?}\", self.st);\n             SawStmt(saw_stmt(&s.node)).hash(self.st); visit::walk_stmt(self, s)\n         }\n \n         fn visit_foreign_item(&mut self, i: &'a ForeignItem) {\n+            debug!(\"visit_foreign_item: st={:?}\", self.st);\n+\n             // FIXME (#14132) ideally we would incorporate privacy (or\n             // perhaps reachability) somewhere here, so foreign items\n             // that do not leak into downstream crates would not be\n@@ -367,6 +376,7 @@ mod svh_visitor {\n \n         fn visit_item(&mut self, i: &'a Item) {\n             debug!(\"visit_item: {:?} st={:?}\", i, self.st);\n+\n             // FIXME (#14132) ideally would incorporate reachability\n             // analysis somewhere here, so items that never leak into\n             // downstream crates (e.g. via monomorphisation or\n@@ -375,55 +385,68 @@ mod svh_visitor {\n         }\n \n         fn visit_mod(&mut self, m: &'a Mod, _s: Span, _n: NodeId) {\n+            debug!(\"visit_mod: st={:?}\", self.st);\n             SawMod.hash(self.st); visit::walk_mod(self, m)\n         }\n \n         fn visit_decl(&mut self, d: &'a Decl) {\n+            debug!(\"visit_decl: st={:?}\", self.st);\n             SawDecl.hash(self.st); visit::walk_decl(self, d)\n         }\n \n         fn visit_ty(&mut self, t: &'a Ty) {\n+            debug!(\"visit_ty: st={:?}\", self.st);\n             SawTy.hash(self.st); visit::walk_ty(self, t)\n         }\n \n         fn visit_generics(&mut self, g: &'a Generics) {\n+            debug!(\"visit_generics: st={:?}\", self.st);\n             SawGenerics.hash(self.st); visit::walk_generics(self, g)\n         }\n \n         fn visit_fn(&mut self, fk: FnKind<'a>, fd: &'a FnDecl,\n                     b: &'a Block, s: Span, _: NodeId) {\n+            debug!(\"visit_fn: st={:?}\", self.st);\n             SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s)\n         }\n \n         fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n+            debug!(\"visit_trait_item: st={:?}\", self.st);\n             SawTraitItem.hash(self.st); visit::walk_trait_item(self, ti)\n         }\n \n         fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n+            debug!(\"visit_impl_item: st={:?}\", self.st);\n             SawImplItem.hash(self.st); visit::walk_impl_item(self, ii)\n         }\n \n         fn visit_struct_field(&mut self, s: &'a StructField) {\n+            debug!(\"visit_struct_field: st={:?}\", self.st);\n             SawStructField.hash(self.st); visit::walk_struct_field(self, s)\n         }\n \n         fn visit_path(&mut self, path: &'a Path, _: ast::NodeId) {\n+            debug!(\"visit_path: st={:?}\", self.st);\n             SawPath.hash(self.st); visit::walk_path(self, path)\n         }\n \n         fn visit_block(&mut self, b: &'a Block) {\n+            debug!(\"visit_block: st={:?}\", self.st);\n             SawBlock.hash(self.st); visit::walk_block(self, b)\n         }\n \n         fn visit_pat(&mut self, p: &'a Pat) {\n+            debug!(\"visit_pat: st={:?}\", self.st);\n             SawPat.hash(self.st); visit::walk_pat(self, p)\n         }\n \n         fn visit_local(&mut self, l: &'a Local) {\n+            debug!(\"visit_local: st={:?}\", self.st);\n             SawLocal.hash(self.st); visit::walk_local(self, l)\n         }\n \n         fn visit_arm(&mut self, a: &'a Arm) {\n+            debug!(\"visit_arm: st={:?}\", self.st);\n             SawArm.hash(self.st); visit::walk_arm(self, a)\n         }\n     }"}]}