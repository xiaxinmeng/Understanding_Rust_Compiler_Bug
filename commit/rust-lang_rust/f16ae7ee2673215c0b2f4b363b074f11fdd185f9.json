{"sha": "f16ae7ee2673215c0b2f4b363b074f11fdd185f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNmFlN2VlMjY3MzIxNWMwYjJmNGIzNjNiMDc0ZjExZmRkMTg1Zjk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-27T22:50:14Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-27T22:50:14Z"}, "message": "Remove min_tait and full_tait stderr dangling files", "tree": {"sha": "da87ac5dc02d4e53ba04987540c9d6eb4e08f041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da87ac5dc02d4e53ba04987540c9d6eb4e08f041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16ae7ee2673215c0b2f4b363b074f11fdd185f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmEAjaYACgkQgTGiTgx5\n76+SeQ/9GeYaFbUYbAPF5NQuRojDaMZxQcX08VGHG7Uu5dCl+ddtw49b0mAFLRDc\nq5BIOpK2IXRtOahETbajVyfXbP3jMcCTt+ffiEHo66gmHq+tFjZUK8bDzFRq9hKY\nRpu+VHIlROxCL9qPdldZB4yCNVjZ15zJ+AcfyWrjJjh12cL+vcoahn/1cmJcMtRy\nwqYYsw2IOGyc3kjEt+BrA43gwWnz6xDYuU7PIu9iBhoeAnJMOIuxh7KSfVsJDNmj\nmyuYoENzpowwOc0cfLLy1qZKvNdhdAfbHjhM32Crl1iC29Akdf351Lq13iZOPTaM\nkWrb1lAp6szkWWUjluXM/raPp1CvXCeu0Gfg94jnkJpHrq86CPk8+Z2fsTnhUM9d\ns2imlv5DbNG0DnzVCBxvG2nQYrmIM9c2E+zTugmtfSry+4vK9zFCFk40fzxz7BsV\nWOvcf+4ikjVofJKdufPdcr+AiifrcH2V9nYrGBZUum67vjWOUrLsPSBDAXsEqV6j\nCEHlTqhWwSrfReQxzpOvOSbaKZ+tGwiFs+CYb0s1vP/1V5HZ7BbXkA2YszCnZuxs\nVVU1AgTXaZS11GdAVUn1adKmX5IhhKypGfhlC+RJiLMLu4/BO2lxxsaEefQCHavV\n8+/QmKnqbDDFwD4vOOml6zzKyO1vvq6nCV2G790wXfVnIu4nAmw=\n=FvHz\n-----END PGP SIGNATURE-----", "payload": "tree da87ac5dc02d4e53ba04987540c9d6eb4e08f041\nparent d395fe8653b84f7981e7b4a281b6f58e2f57b711\nauthor Santiago Pastorino <spastorino@gmail.com> 1627426214 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1627426214 -0300\n\nRemove min_tait and full_tait stderr dangling files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16ae7ee2673215c0b2f4b363b074f11fdd185f9", "html_url": "https://github.com/rust-lang/rust/commit/f16ae7ee2673215c0b2f4b363b074f11fdd185f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16ae7ee2673215c0b2f4b363b074f11fdd185f9/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d395fe8653b84f7981e7b4a281b6f58e2f57b711", "url": "https://api.github.com/repos/rust-lang/rust/commits/d395fe8653b84f7981e7b4a281b6f58e2f57b711", "html_url": "https://github.com/rust-lang/rust/commit/d395fe8653b84f7981e7b4a281b6f58e2f57b711"}], "stats": {"total": 5211, "additions": 0, "deletions": 5211}, "files": [{"sha": "81cd882e5d802cb9d5a74ce0d52c367602efca43", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 483, "changes": 483, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,483 +0,0 @@\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:9:36\n-   |\n-LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n-   |\n-LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:39\n-   |\n-LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:34\n-   |\n-LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:34\n-   |\n-LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:37\n-   |\n-LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:64:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:71:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:35\n-   |\n-LL | union UI1<T: Iterator<Item: Copy, Item: Send>> {\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:35\n-   |\n-LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:38\n-   |\n-LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n-   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:111:32\n-   |\n-LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:113:32\n-   |\n-LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:115:35\n-   |\n-LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n-   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:40\n-   |\n-LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:40\n-   |\n-LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:149:43\n-   |\n-LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:35\n-   |\n-LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:35\n-   |\n-LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:156:38\n-   |\n-LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n-   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:160:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:165:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:170:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:174:36\n-   |\n-LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:176:36\n-   |\n-LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:178:39\n-   |\n-LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:180:40\n-   |\n-LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:182:40\n-   |\n-LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:184:43\n-   |\n-LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:187:36\n-   |\n-LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:189:36\n-   |\n-LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:191:39\n-   |\n-LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:193:34\n-   |\n-LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:195:34\n-   |\n-LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:197:37\n-   |\n-LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:201:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:207:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:213:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:219:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Send>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:219:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Send>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:226:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Copy>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:226:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Copy>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:233:35\n-   |\n-LL |     Self: Iterator<Item: 'static, Item: 'static>,\n-   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:233:35\n-   |\n-LL |     Self: Iterator<Item: 'static, Item: 'static>,\n-   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:251:40\n-   |\n-LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:253:44\n-   |\n-LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:255:43\n-   |\n-LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:239:34\n-   |\n-LL |     type A: Iterator<Item: Copy, Item: Send>;\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:243:34\n-   |\n-LL |     type A: Iterator<Item: Copy, Item: Copy>;\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:247:37\n-   |\n-LL |     type A: Iterator<Item: 'static, Item: 'static>;\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error: aborting due to 60 previous errors\n-\n-For more information about this error, try `rustc --explain E0719`."}, {"sha": "81cd882e5d802cb9d5a74ce0d52c367602efca43", "filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 483, "changes": 483, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,483 +0,0 @@\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:9:36\n-   |\n-LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n-   |\n-LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:39\n-   |\n-LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:34\n-   |\n-LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:34\n-   |\n-LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:37\n-   |\n-LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:64:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:71:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:35\n-   |\n-LL | union UI1<T: Iterator<Item: Copy, Item: Send>> {\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:35\n-   |\n-LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:38\n-   |\n-LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n-   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:111:32\n-   |\n-LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:113:32\n-   |\n-LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:115:35\n-   |\n-LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n-   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:40\n-   |\n-LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:40\n-   |\n-LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:149:43\n-   |\n-LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:152:35\n-   |\n-LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:35\n-   |\n-LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:156:38\n-   |\n-LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n-   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:160:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:165:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:170:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:174:36\n-   |\n-LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:176:36\n-   |\n-LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:178:39\n-   |\n-LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:180:40\n-   |\n-LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:182:40\n-   |\n-LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:184:43\n-   |\n-LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:187:36\n-   |\n-LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:189:36\n-   |\n-LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:191:39\n-   |\n-LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:193:34\n-   |\n-LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:195:34\n-   |\n-LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:197:37\n-   |\n-LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:201:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Send>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:207:29\n-   |\n-LL |     T: Iterator<Item: Copy, Item: Copy>,\n-   |                 ----------  ^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:213:32\n-   |\n-LL |     T: Iterator<Item: 'static, Item: 'static>,\n-   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                 |\n-   |                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:219:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Send>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:219:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Send>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:226:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Copy>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:226:32\n-   |\n-LL |     Self: Iterator<Item: Copy, Item: Copy>,\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:233:35\n-   |\n-LL |     Self: Iterator<Item: 'static, Item: 'static>,\n-   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:233:35\n-   |\n-LL |     Self: Iterator<Item: 'static, Item: 'static>,\n-   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:251:40\n-   |\n-LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:253:44\n-   |\n-LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:255:43\n-   |\n-LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:239:34\n-   |\n-LL |     type A: Iterator<Item: Copy, Item: Send>;\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:243:34\n-   |\n-LL |     type A: Iterator<Item: Copy, Item: Copy>;\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:247:37\n-   |\n-LL |     type A: Iterator<Item: 'static, Item: 'static>;\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error: aborting due to 60 previous errors\n-\n-For more information about this error, try `rustc --explain E0719`."}, {"sha": "76314611fa217431e15600fe09734804be9d0886", "filename": "src/test/ui/generator/layout-error.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:23:17\n-   |\n-LL |         let a = Foo;\n-   |                 ^^^ not found in this scope\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0425`."}, {"sha": "09ff1abb8325f09ecfdef572ba3f094ab05094c8", "filename": "src/test/ui/generator/layout-error.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,19 +0,0 @@\n-error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:23:17\n-   |\n-LL |         let a = Foo;\n-   |                 ^^^ not found in this scope\n-\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/layout-error.rs:29:27\n-   |\n-LL |     Task::spawn(&POOL, || cb());\n-   |                           ^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0425, E0658.\n-For more information about an error, try `rustc --explain E0425`."}, {"sha": "4c70dc5e9581676f82069d95ffed3ea1350db20a", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:27:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "4c70dc5e9581676f82069d95ffed3ea1350db20a", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:27:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3f25ca4b327f04dee887d4812fd3547e7a7dac3c", "filename": "src/test/ui/impl-trait/auto-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/auto-trait.rs:23:1\n-   |\n-LL | impl<T: Send> AnotherTrait for T {}\n-   | -------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "3f25ca4b327f04dee887d4812fd3547e7a7dac3c", "filename": "src/test/ui/impl-trait/auto-trait.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/auto-trait.rs:23:1\n-   |\n-LL | impl<T: Send> AnotherTrait for T {}\n-   | -------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "94d73be195cf8e9aca329ebbce576b514c2cc408", "filename": "src/test/ui/impl-trait/issue-55872-1.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,48 +0,0 @@\n-error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:16:5\n-   |\n-LL |     fn foo<T>() -> Self::E;\n-   |     ----------------------- definition of `foo` from trait\n-...\n-LL |     fn foo<T: Default>() -> Self::E {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n-\n-error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:14\n-   |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n-   |\n-   = note: required because it appears within the type `(S, T)`\n-help: consider further restricting this bound\n-   |\n-LL | impl<S: Default + std::marker::Copy> Bar for S {\n-   |                 ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:14\n-   |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n-   |\n-   = note: required because it appears within the type `(S, T)`\n-help: consider further restricting this bound\n-   |\n-LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n-   |                       ^^^^^^^^^^^^^^^^^^^\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:16:37\n-   |\n-LL |       fn foo<T: Default>() -> Self::E {\n-   |  _____________________________________^\n-LL | |\n-LL | |\n-LL | |         (S::default(), T::default())\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0276, E0277.\n-For more information about an error, try `rustc --explain E0276`."}, {"sha": "94d73be195cf8e9aca329ebbce576b514c2cc408", "filename": "src/test/ui/impl-trait/issue-55872-1.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,48 +0,0 @@\n-error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:16:5\n-   |\n-LL |     fn foo<T>() -> Self::E;\n-   |     ----------------------- definition of `foo` from trait\n-...\n-LL |     fn foo<T: Default>() -> Self::E {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n-\n-error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:14\n-   |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n-   |\n-   = note: required because it appears within the type `(S, T)`\n-help: consider further restricting this bound\n-   |\n-LL | impl<S: Default + std::marker::Copy> Bar for S {\n-   |                 ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:12:14\n-   |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n-   |\n-   = note: required because it appears within the type `(S, T)`\n-help: consider further restricting this bound\n-   |\n-LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n-   |                       ^^^^^^^^^^^^^^^^^^^\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:16:37\n-   |\n-LL |       fn foo<T: Default>() -> Self::E {\n-   |  _____________________________________^\n-LL | |\n-LL | |\n-LL | |         (S::default(), T::default())\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0276, E0277.\n-For more information about an error, try `rustc --explain E0276`."}, {"sha": "305e916c9a98bbc00b4e8cd4c0f6c3a82b803e36", "filename": "src/test/ui/impl-trait/issue-55872-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,19 +0,0 @@\n-error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:15:14\n-   |\n-LL |     type E = impl std::marker::Copy;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:17:28\n-   |\n-LL |       fn foo<T>() -> Self::E {\n-   |  ____________________________^\n-LL | |\n-LL | |         async {}\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "305e916c9a98bbc00b4e8cd4c0f6c3a82b803e36", "filename": "src/test/ui/impl-trait/issue-55872-2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,19 +0,0 @@\n-error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:15:14\n-   |\n-LL |     type E = impl std::marker::Copy;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:17:28\n-   |\n-LL |       fn foo<T>() -> Self::E {\n-   |  ____________________________^\n-LL | |\n-LL | |         async {}\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "3fffd09836b20e0b05e111d011c756fd42d72596", "filename": "src/test/ui/impl-trait/issue-55872.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:15:28\n-   |\n-LL |       fn foo<T>() -> Self::E {\n-   |  ____________________________^\n-LL | |\n-LL | |         || ()\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3fffd09836b20e0b05e111d011c756fd42d72596", "filename": "src/test/ui/impl-trait/issue-55872.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:15:28\n-   |\n-LL |       fn foo<T>() -> Self::E {\n-   |  ____________________________^\n-LL | |\n-LL | |         || ()\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "1f4e3f78afa45e23d368ccd218d967cb9aa86b71", "filename": "src/test/ui/impl-trait/issues/issue-70877.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:10:12\n-   |\n-LL | type FooRet = impl std::fmt::Debug;\n-   |               -------------------- the found opaque type\n-...\n-LL | type Foo = impl Iterator<Item = FooItem>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found opaque type\n-   |\n-   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "1f4e3f78afa45e23d368ccd218d967cb9aa86b71", "filename": "src/test/ui/impl-trait/issues/issue-70877.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:10:12\n-   |\n-LL | type FooRet = impl std::fmt::Debug;\n-   |               -------------------- the found opaque type\n-...\n-LL | type Foo = impl Iterator<Item = FooItem>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found opaque type\n-   |\n-   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "b446eae9c3f1e35f9684f1a379794c51ef70ab76", "filename": "src/test/ui/impl-trait/issues/issue-78722.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-78722.rs:14:20\n-   |\n-LL | type F = impl core::future::Future<Output = u8>;\n-   |          -------------------------------------- the expected opaque type\n-...\n-LL |         let f: F = async { 1 };\n-   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n-   |                |\n-   |                expected due to this\n-   | \n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:7:10>)\n-              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-   = note: distinct uses of `impl Trait` result in different opaque types\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "b446eae9c3f1e35f9684f1a379794c51ef70ab76", "filename": "src/test/ui/impl-trait/issues/issue-78722.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-78722.rs:14:20\n-   |\n-LL | type F = impl core::future::Future<Output = u8>;\n-   |          -------------------------------------- the expected opaque type\n-...\n-LL |         let f: F = async { 1 };\n-   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n-   |                |\n-   |                expected due to this\n-   | \n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:7:10>)\n-              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-   = note: distinct uses of `impl Trait` result in different opaque types\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "52ab9baff8b841f8811d7083ea11f11021e11b5a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:15:60\n-   |\n-LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |                                                            ^^^^^^^^^\n-   |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 15:8\n-  --> $DIR/error-handling-2.rs:15:8\n-   |\n-LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "52ab9baff8b841f8811d7083ea11f11021e11b5a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:15:60\n-   |\n-LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |                                                            ^^^^^^^^^\n-   |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 15:8\n-  --> $DIR/error-handling-2.rs:15:8\n-   |\n-LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "cdcb7d7c38eec46f72b5be2f4bf550a871081dbe", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:24:16\n-   |\n-LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |         let _: &'b i32 = *u.0;\n-   |                ^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "cdcb7d7c38eec46f72b5be2f4bf550a871081dbe", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:24:16\n-   |\n-LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |         let _: &'b i32 = *u.0;\n-   |                ^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "edecdd061e1a4915a4c09b5b4536074df28fd4be", "filename": "src/test/ui/impl-trait/negative-reasoning.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/negative-reasoning.rs:21:1\n-   |\n-LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n-   | ------------------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n-   |\n-   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "edecdd061e1a4915a4c09b5b4536074df28fd4be", "filename": "src/test/ui/impl-trait/negative-reasoning.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/negative-reasoning.rs:21:1\n-   |\n-LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n-   | ------------------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n-   |\n-   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "88bbbd143fb8ba9407f08355edee91ea638c99ee", "filename": "src/test/ui/issues/issue-60662.full_tait.stdout", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stdout?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,16 +0,0 @@\n-// check-pass\n-// compile-flags: -Z unpretty=hir\n-\n-// revisions: min_tait full_tait\n-#![feature(type_alias_impl_trait)]\n-#![feature(type_alias_impl_trait)]\n-#[prelude_import]\n-use ::std::prelude::rust_2015::*;\n-#[macro_use]\n-extern crate std;\n-\n-trait Animal { }\n-\n-fn main() {\n-              pub type ServeFut = /*impl Trait*/;\n-          }"}, {"sha": "c2495556f60292cca954e0c3a43797df4f80969c", "filename": "src/test/ui/issues/issue-60662.min_tait.stdout", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-// check-pass\n-// compile-flags: -Z unpretty=hir\n-\n-// revisions: min_tait full_tait\n-#![feature(type_alias_impl_trait)]\n-#[prelude_import]\n-use ::std::prelude::rust_2015::*;\n-#[macro_use]\n-extern crate std;\n-\n-trait Animal { }\n-\n-fn main() {\n-              pub type ServeFut = /*impl Trait*/;\n-          }"}, {"sha": "d17c05ef298377c5311abeede9a26efde873efbf", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,72 +0,0 @@\n-warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:9:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/inline-trait-and-foreign-items.rs:6:9\n-   |\n-LL | #![warn(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:13:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T;\n-   |     ------- not a function or closure\n-\n-warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:20:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:24:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T = Self;\n-   |     -------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:27:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type U = impl Trait;\n-   |     -------------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:32:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     static X: u32;\n-   |     -------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:35:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T;\n-   |     ------- not a function or closure\n-\n-error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:28:14\n-   |\n-LL |     type U = impl Trait;\n-   |              ^^^^^^^^^^\n-\n-error: aborting due to 6 previous errors; 2 warnings emitted\n-\n-For more information about this error, try `rustc --explain E0518`."}, {"sha": "d17c05ef298377c5311abeede9a26efde873efbf", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,72 +0,0 @@\n-warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:9:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/inline-trait-and-foreign-items.rs:6:9\n-   |\n-LL | #![warn(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:13:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T;\n-   |     ------- not a function or closure\n-\n-warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:20:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:24:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T = Self;\n-   |     -------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:27:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type U = impl Trait;\n-   |     -------------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:32:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     static X: u32;\n-   |     -------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:35:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T;\n-   |     ------- not a function or closure\n-\n-error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:28:14\n-   |\n-LL |     type U = impl Trait;\n-   |              ^^^^^^^^^^\n-\n-error: aborting due to 6 previous errors; 2 warnings emitted\n-\n-For more information about this error, try `rustc --explain E0518`."}, {"sha": "0e02b7bf4d9ae0e2318231f1644b4f411da94595", "filename": "src/test/ui/lint/lint-ctypes-73249-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:28:25\n-   |\n-LL |     pub fn lint_me() -> A<()>;\n-   |                         ^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-2.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "0e02b7bf4d9ae0e2318231f1644b4f411da94595", "filename": "src/test/ui/lint/lint-ctypes-73249-2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:28:25\n-   |\n-LL |     pub fn lint_me() -> A<()>;\n-   |                         ^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-2.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "60661e96ddf36206c11f9591f0837ec807fece53", "filename": "src/test/ui/lint/lint-ctypes-73249-3.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-3.rs:22:25\n-   |\n-LL |     pub fn lint_me() -> A;\n-   |                         ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-3.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "60661e96ddf36206c11f9591f0837ec807fece53", "filename": "src/test/ui/lint/lint-ctypes-73249-3.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-3.rs:22:25\n-   |\n-LL |     pub fn lint_me() -> A;\n-   |                         ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-3.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "aa1238a751212370ff679ab1a49bbb6a5690b68f", "filename": "src/test/ui/lint/lint-ctypes-73249-5.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-5.rs:22:25\n-   |\n-LL |     pub fn lint_me() -> A;\n-   |                         ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-5.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "aa1238a751212370ff679ab1a49bbb6a5690b68f", "filename": "src/test/ui/lint/lint-ctypes-73249-5.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-5.rs:22:25\n-   |\n-LL |     pub fn lint_me() -> A;\n-   |                         ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-5.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "33f2ee59577d37a70f586b98eb7d769350d70174", "filename": "src/test/ui/lint/lint-ctypes-73251-1.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:25:25\n-   |\n-LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-1.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "33f2ee59577d37a70f586b98eb7d769350d70174", "filename": "src/test/ui/lint/lint-ctypes-73251-1.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:25:25\n-   |\n-LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-1.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "152aaa183e35ae75362ee1808e393f4c850e3f19", "filename": "src/test/ui/lint/lint-ctypes-73251-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:38:25\n-   |\n-LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-2.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "152aaa183e35ae75362ee1808e393f4c850e3f19", "filename": "src/test/ui/lint/lint-ctypes-73251-2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:38:25\n-   |\n-LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-2.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "d7b916f8ad58a6bad3f07414f3914efd8831bba0", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:13:17\n-   |\n-LL |     pub fn a(_: A);\n-   |                 ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "d7b916f8ad58a6bad3f07414f3914efd8831bba0", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:13:17\n-   |\n-LL |     pub fn a(_: A);\n-   |                 ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:4:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error\n-"}, {"sha": "e2a5b8876e3ec5a8eae79e7adbd2c8bc1ec7c5af", "filename": "src/test/ui/mir/issue-75053.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:48:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "e2a5b8876e3ec5a8eae79e7adbd2c8bc1ec7c5af", "filename": "src/test/ui/mir/issue-75053.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:48:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "f1f95c72150f58af708708ca12ddf437ab9cfadb", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,68 +0,0 @@\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:19:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type A = Priv;\n-   |         ^^^^^^^^^^^^^^ can't leak private type\n-\n-warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:26:9\n-   |\n-LL |         type Alias1: PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(private_in_public)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:29:9\n-   |\n-LL |         type Alias2: PubTrAux1<Priv> = u8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:32:9\n-   |\n-LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:36:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type Alias4 = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:43:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type Alias1 = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:46:9\n-   |\n-LL |     trait PrivTr {}\n-   |     ------------ `PrivTr` declared as private\n-...\n-LL |         type Exist = impl PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n-\n-error: aborting due to 4 previous errors; 3 warnings emitted\n-\n-Some errors have detailed explanations: E0445, E0446.\n-For more information about an error, try `rustc --explain E0445`."}, {"sha": "f1f95c72150f58af708708ca12ddf437ab9cfadb", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,68 +0,0 @@\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:19:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type A = Priv;\n-   |         ^^^^^^^^^^^^^^ can't leak private type\n-\n-warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:26:9\n-   |\n-LL |         type Alias1: PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(private_in_public)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:29:9\n-   |\n-LL |         type Alias2: PubTrAux1<Priv> = u8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:32:9\n-   |\n-LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:36:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type Alias4 = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:43:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type Alias1 = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:46:9\n-   |\n-LL |     trait PrivTr {}\n-   |     ------------ `PrivTr` declared as private\n-...\n-LL |         type Exist = impl PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n-\n-error: aborting due to 4 previous errors; 3 warnings emitted\n-\n-Some errors have detailed explanations: E0445, E0446.\n-For more information about an error, try `rustc --explain E0445`."}, {"sha": "9206f68345017c79fbf26734528ae63147acff52", "filename": "src/test/ui/save-analysis/issue-68621.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/issue-68621.rs:16:19\n-   |\n-LL |     type Future = impl Trait;\n-   |                   ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9206f68345017c79fbf26734528ae63147acff52", "filename": "src/test/ui/save-analysis/issue-68621.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/issue-68621.rs:16:19\n-   |\n-LL |     type Future = impl Trait;\n-   |                   ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "ea214e70fc8b3756f645550d316bbc6a8696780f", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:8:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "ea214e70fc8b3756f645550d316bbc6a8696780f", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:8:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "aaaeb9bd695e8cf2622f135bbf72d793eb150dfb", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:19:6\n-   |\n-LL | impl<'a, I> UnwrapItemsExt for I {\n-   |      ^^ unconstrained lifetime parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "aaaeb9bd695e8cf2622f135bbf72d793eb150dfb", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:19:6\n-   |\n-LL | impl<'a, I> UnwrapItemsExt for I {\n-   |      ^^ unconstrained lifetime parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "b16d98ab72b77f429c2cf29fd4747740872985fe", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:17:46\n-   |\n-LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n-   |                                              ^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:11:10\n-   |\n-LL | type Foo<V> = impl Trait<V>;\n-   |          ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b16d98ab72b77f429c2cf29fd4747740872985fe", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:17:46\n-   |\n-LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n-   |                                              ^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:11:10\n-   |\n-LL | type Foo<V> = impl Trait<V>;\n-   |          ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a0099e343b8558867258e91cbbe7ba1193ee1b31", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:8:13\n-   |\n-LL | type X<T> = impl Clone;\n-   |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | type X<T: std::clone::Clone> = impl Clone;\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "a0099e343b8558867258e91cbbe7ba1193ee1b31", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:8:13\n-   |\n-LL | type X<T> = impl Clone;\n-   |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | type X<T: std::clone::Clone> = impl Clone;\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ec15474bf8498b2baf0a81476401594bc1053ec0", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,26 +0,0 @@\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:11:6\n-   |\n-LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n-   |      ^^^^^^^^^^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/bounds-are-checked.rs:8:14\n-   |\n-LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected trait `From<&'a str>`\n-              found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 8:8...\n-  --> $DIR/bounds-are-checked.rs:8:8\n-   |\n-LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n-   |        ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "ec15474bf8498b2baf0a81476401594bc1053ec0", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,26 +0,0 @@\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:11:6\n-   |\n-LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n-   |      ^^^^^^^^^^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/bounds-are-checked.rs:8:14\n-   |\n-LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected trait `From<&'a str>`\n-              found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 8:8...\n-  --> $DIR/bounds-are-checked.rs:8:8\n-   |\n-LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n-   |        ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "4d7335cd865248b8af56060fb5a3183ca541f8c7", "filename": "src/test/ui/type-alias-impl-trait/coherence.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/coherence.rs:16:6\n-   |\n-LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "4d7335cd865248b8af56060fb5a3183ca541f8c7", "filename": "src/test/ui/type-alias-impl-trait/coherence.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/coherence.rs:16:6\n-   |\n-LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "83019772afcb95dd8bbc5b5fc3c3d93c2081999d", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:8:12\n-   |\n-LL | type Bar = impl std::fmt::Debug;\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "83019772afcb95dd8bbc5b5fc3c3d93c2081999d", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:8:12\n-   |\n-LL | type Bar = impl std::fmt::Debug;\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b3301a0ee4c4bc81c5254b07139e51e81aa4a5e2", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:9:20\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/declared_but_not_defined_in_scope.rs:13:5\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ---------------------- the expected opaque type\n-...\n-LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `impl Debug` because of return type\n-LL |     \"\"\n-   |     ^^ expected opaque type, found `&str`\n-   |\n-   = note: expected opaque type `impl Debug`\n-                found reference `&'static str`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "b3301a0ee4c4bc81c5254b07139e51e81aa4a5e2", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:9:20\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/declared_but_not_defined_in_scope.rs:13:5\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ---------------------- the expected opaque type\n-...\n-LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `impl Debug` because of return type\n-LL |     \"\"\n-   |     ^^ expected opaque type, found `&str`\n-   |\n-   = note: expected opaque type `impl Debug`\n-                found reference `&'static str`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "23c5f9587cc0785a4ab7c40ba6a0564aa788202b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:14:1\n-   |\n-LL | fn bar() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses.rs:10:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "23c5f9587cc0785a4ab7c40ba6a0564aa788202b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:14:1\n-   |\n-LL | fn bar() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses.rs:10:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7b7906f58acaff83a35fbe2647f9bfd905c2ad1b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,26 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:14:1\n-   |\n-LL | fn bar() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:10:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:19:1\n-   |\n-LL | fn boo() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:10:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "7b7906f58acaff83a35fbe2647f9bfd905c2ad1b", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,26 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:14:1\n-   |\n-LL | fn bar() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:10:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:19:1\n-   |\n-LL | fn boo() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:10:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "749530d8f327dec123c9ae3ec6ad644d31533b2b", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:13:1\n-   |\n-LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n-   |\n-note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:9:1\n-   |\n-LL | fn my_iter<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "749530d8f327dec123c9ae3ec6ad644d31533b2b", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:13:1\n-   |\n-LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n-   |\n-note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:9:1\n-   |\n-LL | fn my_iter<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3dedb223309459319a8d09caa8331e4cb78346c2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:9:26\n-   |\n-LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n-   |                          ^^^^^^^^^^^\n-   |\n-note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:7:10\n-   |\n-LL | type Two<'a, 'b> = impl std::fmt::Debug;\n-   |          ^^  ^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3dedb223309459319a8d09caa8331e4cb78346c2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:9:26\n-   |\n-LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n-   |                          ^^^^^^^^^^^\n-   |\n-note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:7:10\n-   |\n-LL | type Two<'a, 'b> = impl std::fmt::Debug;\n-   |          ^^  ^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "805cea7127ddf9ff8f0a717794af1e8f5bd9d4b1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,38 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:16:30\n-   |\n-LL | fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n-   |                              ^^^^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:13\n-   |\n-LL | type TwoTys<T, U> = impl Debug;\n-   |             ^  ^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:21:36\n-   |\n-LL | fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:13:19\n-   |\n-LL | type TwoLifetimes<'a, 'b> = impl Debug;\n-   |                   ^^  ^^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:26:50\n-   |\n-LL | fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n-   |                                                  ^^^^^^^^^^^^^^^\n-   |\n-note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:14:22\n-   |\n-LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-   |                      ^               ^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "805cea7127ddf9ff8f0a717794af1e8f5bd9d4b1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,38 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:16:30\n-   |\n-LL | fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n-   |                              ^^^^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:13\n-   |\n-LL | type TwoTys<T, U> = impl Debug;\n-   |             ^  ^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:21:36\n-   |\n-LL | fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:13:19\n-   |\n-LL | type TwoLifetimes<'a, 'b> = impl Debug;\n-   |                   ^^  ^^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:26:50\n-   |\n-LL | fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n-   |                                                  ^^^^^^^^^^^^^^^\n-   |\n-note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:14:22\n-   |\n-LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-   |                      ^               ^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "44bcdb7bf830c8a9f237cd1dd00ba62063ec4daa", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:12:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:10:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "44bcdb7bf830c8a9f237cd1dd00ba62063ec4daa", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:12:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:10:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0185afc76bcc4c232821797559327627512b50ec", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:12:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:10:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0185afc76bcc4c232821797559327627512b50ec", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:12:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:10:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "504116e87d297d67412c3236c66ee78c9bdfbccc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:12:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:10:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "504116e87d297d67412c3236c66ee78c9bdfbccc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:12:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:10:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7417112ca8aab6725e5efdf67d38dda259896780", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,39 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:18:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:14:1\n-   |\n-LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:10:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:10:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n-help: consider restricting type parameter `U`\n-   |\n-LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "7417112ca8aab6725e5efdf67d38dda259896780", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,39 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:18:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:14:1\n-   |\n-LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:10:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:10:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n-help: consider restricting type parameter `U`\n-   |\n-LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "abadba0522c4cf79038463aa3eaa121ea218ef17", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,27 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:17:1\n-   |\n-LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:13:1\n-   |\n-LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:10:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "abadba0522c4cf79038463aa3eaa121ea218ef17", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,27 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:17:1\n-   |\n-LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:13:1\n-   |\n-LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:10:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "509ee95db30c684f2112abbda1c9bad7da447b4f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,27 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:16:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:12:1\n-   |\n-LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:9:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "509ee95db30c684f2112abbda1c9bad7da447b4f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,27 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:16:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:12:1\n-   |\n-LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:9:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "3454dc44e0184f6d49248dd336aac1ee9a4b7260", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,51 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:23:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:19:1\n-   |\n-LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:9:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n-   |\n-   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: Foo, B> = impl Debug;\n-   |           ^^^^^\n-\n-error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:9:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:9:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `B`\n-   |\n-LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "3454dc44e0184f6d49248dd336aac1ee9a4b7260", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,51 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:23:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:19:1\n-   |\n-LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:9:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n-   |\n-   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: Foo, B> = impl Debug;\n-   |           ^^^^^\n-\n-error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:9:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:9:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `B`\n-   |\n-LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "4d7eddfb2fb45ae2a9e93f5c94c414b29585c63f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,35 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:17:21\n-   |\n-LL | fn concrete_ty() -> OneTy<u32> {\n-   |                     ^^^^^^^^^^\n-   |\n-note: used non-generic type `u32` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:12\n-   |\n-LL | type OneTy<T> = impl Debug;\n-   |            ^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:22:27\n-   |\n-LL | type OneLifetime<'a> = impl Debug;\n-   |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n-...\n-LL | fn concrete_lifetime() -> OneLifetime<'static> {\n-   |                           ^^^^^^^^^^^^^^^^^^^^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:27:24\n-   |\n-LL | fn concrete_const() -> OneConst<{123}> {\n-   |                        ^^^^^^^^^^^^^^^\n-   |\n-note: used non-generic constant `{123}` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:13:21\n-   |\n-LL | type OneConst<const X: usize> = impl Debug;\n-   |                     ^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "4d7eddfb2fb45ae2a9e93f5c94c414b29585c63f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,35 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:17:21\n-   |\n-LL | fn concrete_ty() -> OneTy<u32> {\n-   |                     ^^^^^^^^^^\n-   |\n-note: used non-generic type `u32` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:12\n-   |\n-LL | type OneTy<T> = impl Debug;\n-   |            ^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:22:27\n-   |\n-LL | type OneLifetime<'a> = impl Debug;\n-   |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n-...\n-LL | fn concrete_lifetime() -> OneLifetime<'static> {\n-   |                           ^^^^^^^^^^^^^^^^^^^^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:27:24\n-   |\n-LL | fn concrete_const() -> OneConst<{123}> {\n-   |                        ^^^^^^^^^^^^^^^\n-   |\n-note: used non-generic constant `{123}` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:13:21\n-   |\n-LL | type OneConst<const X: usize> = impl Debug;\n-   |                     ^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "aa8457cf158e8c1f22c4aba4a02e0dcbbb636231", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,18 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:7:33\n-   |\n-LL | type WrongGeneric<T: 'static> = impl 'static;\n-   |                                 ^^^^^^^^^^^^\n-\n-error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/generic_not_used.rs:10:73\n-   |\n-LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n-   |  _________________________________________________________________________^\n-LL | |\n-LL | |     v\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "aa8457cf158e8c1f22c4aba4a02e0dcbbb636231", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,18 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:7:33\n-   |\n-LL | type WrongGeneric<T: 'static> = impl 'static;\n-   |                                 ^^^^^^^^^^^^\n-\n-error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/generic_not_used.rs:10:73\n-   |\n-LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n-   |  _________________________________________________________________________^\n-LL | |\n-LL | |     v\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "28ac61a6b984a6165c820bedb20085eeacd6c7a1", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.nll.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,50 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n-   |\n-LL |     let z: i32 = x;\n-   |            ---   ^ expected `i32`, found opaque type\n-   |            |\n-   |            expected due to this\n-...\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ------------ the found opaque type\n-   |\n-   = note:     expected type `i32`\n-           found opaque type `impl Sized`\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:30\n-   |\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                              ^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0308, E0310.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "f191797c09e1d121a91aa74e9b84f48573470825", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,33 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:8:18\n-   |\n-LL |     let z: i32 = x;\n-   |            ---   ^ expected `i32`, found opaque type\n-   |            |\n-   |            expected due to this\n-...\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ------------ the found opaque type\n-   |\n-   = note:     expected type `i32`\n-           found opaque type `impl Sized`\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-...\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0308, E0310.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "b8ca8e46079aad4c5db20b159b4fcd62da6f5be7", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.nll.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.nll.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,41 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n-   |\n-LL |     let z: i32 = x;\n-   |            ---   ^ expected `i32`, found opaque type\n-   |            |\n-   |            expected due to this\n-...\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ------------ the found opaque type\n-   |\n-   = note:     expected type `i32`\n-           found opaque type `impl Sized`\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:30\n-   |\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                              ^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0308, E0310.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "f191797c09e1d121a91aa74e9b84f48573470825", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,33 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:8:18\n-   |\n-LL |     let z: i32 = x;\n-   |            ---   ^ expected `i32`, found opaque type\n-   |            |\n-   |            expected due to this\n-...\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ------------ the found opaque type\n-   |\n-   = note:     expected type `i32`\n-           found opaque type `impl Sized`\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:11:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-...\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0308, E0310.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "be701b0ca908988b1e0db8b05efbf2eda9ce5cbf", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:8:35\n-   |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                                   ^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:12:31\n-   |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                          ----- required by this bound in `Underconstrained`\n-...\n-LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n-   |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n-   |                    ^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "be701b0ca908988b1e0db8b05efbf2eda9ce5cbf", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:8:35\n-   |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                                   ^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:12:31\n-   |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                          ----- required by this bound in `Underconstrained`\n-...\n-LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n-   |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n-   |                    ^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ab2d9482364dbb08641cc51d16250754ec5926c0", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,43 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:7:45\n-   |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                                             ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:16:46\n-   |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                                              ^^^^^^^^^^^^\n-\n-error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:11:33\n-   |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                          --------------- required by this bound in `Underconstrained`\n-...\n-LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n-   |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-help: consider restricting type parameter `U`\n-   |\n-LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n-   |                      ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:20:43\n-   |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                           --------------- required by this bound in `Underconstrained2`\n-...\n-LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n-   |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-help: consider restricting type parameter `V`\n-   |\n-LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n-   |                          ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ab2d9482364dbb08641cc51d16250754ec5926c0", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,43 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:7:45\n-   |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                                             ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:16:46\n-   |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                                              ^^^^^^^^^^^^\n-\n-error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:11:33\n-   |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                          --------------- required by this bound in `Underconstrained`\n-...\n-LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n-   |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-help: consider restricting type parameter `U`\n-   |\n-LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n-   |                      ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:20:43\n-   |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                           --------------- required by this bound in `Underconstrained2`\n-...\n-LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n-   |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-help: consider restricting type parameter `V`\n-   |\n-LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n-   |                          ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "679f2f73919cf6940ddd14e37f9d85d1a363b034", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/impl-with-unconstrained-param.rs:13:6\n-   |\n-LL | impl<T> X for () {\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "679f2f73919cf6940ddd14e37f9d85d1a363b034", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/impl-with-unconstrained-param.rs:13:6\n-   |\n-LL | impl<T> X for () {\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "9435eaace37174152843216f665032f098b8f11b", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n-  --> $DIR/incoherent-assoc-imp-trait.rs:12:1\n-   |\n-LL | impl<F> FnOnce<()> for &F {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<A, F> FnOnce<A> for &F\n-             where F: Fn<A>, F: ?Sized;\n-\n-error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n-  --> $DIR/incoherent-assoc-imp-trait.rs:12:6\n-   |\n-LL | impl<F> FnOnce<()> for &F {\n-   |      ^ type parameter `F` must be used as the type parameter for some local type\n-   |\n-   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0119, E0210.\n-For more information about an error, try `rustc --explain E0119`."}, {"sha": "9435eaace37174152843216f665032f098b8f11b", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,23 +0,0 @@\n-error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n-  --> $DIR/incoherent-assoc-imp-trait.rs:12:1\n-   |\n-LL | impl<F> FnOnce<()> for &F {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<A, F> FnOnce<A> for &F\n-             where F: Fn<A>, F: ?Sized;\n-\n-error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n-  --> $DIR/incoherent-assoc-imp-trait.rs:12:6\n-   |\n-LL | impl<F> FnOnce<()> for &F {\n-   |      ^ type parameter `F` must be used as the type parameter for some local type\n-   |\n-   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0119, E0210.\n-For more information about an error, try `rustc --explain E0119`."}, {"sha": "696f887a4d89ad403c69bdb514125c13f1bf06dc", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:12:16\n-   |\n-LL |     let null = || -> Opaque { 0 };\n-   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n-   |\n-note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:11:5\n-   |\n-LL |     fn _unused() -> Opaque { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "abd18392636ce28b680ce6b0796c715a585d37bd", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:5:15\n-   |\n-LL | type Foo<T> = impl Default;\n-   |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Foo<T: std::default::Default> = impl Default;\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "abd18392636ce28b680ce6b0796c715a585d37bd", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:5:15\n-   |\n-LL | type Foo<T> = impl Default;\n-   |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Foo<T: std::default::Default> = impl Default;\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "554215fe8945576bd6d0933dcb08c84b89476075", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0636]: the feature `type_alias_impl_trait` has already been declared\n-  --> $DIR/issue-53096.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0636`."}, {"sha": "fb70582c31a2d2187ebe0479ba3c9cf0c8cbbd37", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53096.rs:13:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7087aef67681d4e8917eefa556534a19178f3053", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:22:42\n-   |\n-LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n-   |  __________________________________________^\n-LL | |\n-LL | |         S::<T>(Default::default())\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7087aef67681d4e8917eefa556534a19178f3053", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:22:42\n-   |\n-LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n-   |  __________________________________________^\n-LL | |\n-LL | |         S::<T>(Default::default())\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "05b7173b80b5966e43def6a1d77aead9b9fa291a", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:21:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "05b7173b80b5966e43def6a1d77aead9b9fa291a", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:21:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "e2b8b19aeba1bb815d00c8be2e48a06d53cf09c6", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.nll.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,47 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57611-trait-alias.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'static X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "70b6f264860e7d8f49ded80eeada86b211a73cbd", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:19:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "3a4d1d90c039731d4a1396e44dd4402a7922400b", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.nll.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.nll.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,38 +0,0 @@\n-error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'static X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "70b6f264860e7d8f49ded80eeada86b211a73cbd", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:19:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "2d8586267193334ab1d8f79df3adddc34e516394", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:18:58\n-   |\n-LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n-   |  __________________________________________________________^\n-LL | |\n-LL | |         self\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2d8586267193334ab1d8f79df3adddc34e516394", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:18:58\n-   |\n-LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n-   |  __________________________________________________________^\n-LL | |\n-LL | |         self\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "9b2d21192cd89313eaf7409202e5849aefb7d7c2", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0636]: the feature `type_alias_impl_trait` has already been declared\n-  --> $DIR/issue-60407.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0636`."}, {"sha": "adb07f5227b40f159d823b9de53d7aeb93bdae5b", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:10:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "738718e770ac334385aaddf2ff9da2a7c6a78498", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:21:34\n-   |\n-LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n-   |                                  ^^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:10:25\n-   |\n-LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-   |                         ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "738718e770ac334385aaddf2ff9da2a7c6a78498", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:21:34\n-   |\n-LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n-   |                                  ^^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:10:25\n-   |\n-LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-   |                         ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "1c6759e3454b568bb7727faf430ec3d3df59baf6", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63263-closure-return.rs:9:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "409cca865d1e6e2dc4424caea96fa7717a9c5890", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,12 +0,0 @@\n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:10:5: 10:28] as FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:7:16\n-   |\n-LL | type Closure = impl FnOnce();\n-   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n-   |\n-   = note: expected unit type `()`\n-            found opaque type `impl FnOnce<()>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "98d20d6ca0d563588086a9846992cced0b67b1ef", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0636]: the feature `type_alias_impl_trait` has already been declared\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0636`."}, {"sha": "db3b89bc699c1ed0d709e418277446adc3aeeaa3", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-68368-non-defining-use.rs:10:15\n-   |\n-LL | fn f<'a>() -> Alias<'a, ()> {}\n-   |               ^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-68368-non-defining-use.rs:9:16\n-   |\n-LL | type Alias<'a, U> = impl Trait<U>;\n-   |                ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "db3b89bc699c1ed0d709e418277446adc3aeeaa3", "filename": "src/test/ui/type-alias-impl-trait/issue-68368-non-defining-use.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-68368-non-defining-use.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-68368-non-defining-use.rs:10:15\n-   |\n-LL | fn f<'a>() -> Alias<'a, ()> {}\n-   |               ^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `()` for generic parameter\n-  --> $DIR/issue-68368-non-defining-use.rs:9:16\n-   |\n-LL | type Alias<'a, U> = impl Trait<U>;\n-   |                ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "150bfbaef59105ca3b77c26fa373ace82557f0c4", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,11 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:19:65\n-   |\n-LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n-   |             -                                                   ^^ undeclared lifetime\n-   |             |\n-   |             help: consider introducing lifetime `'a` here: `'a,`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0261`."}, {"sha": "150bfbaef59105ca3b77c26fa373ace82557f0c4", "filename": "src/test/ui/type-alias-impl-trait/issue-69136-inner-lifetime-resolve-error.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69136-inner-lifetime-resolve-error.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,11 +0,0 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/issue-69136-inner-lifetime-resolve-error.rs:19:65\n-   |\n-LL | type Return<A> = impl WithAssoc<A, AssocType = impl SomeTrait + 'a>;\n-   |             -                                                   ^^ undeclared lifetime\n-   |             |\n-   |             help: consider introducing lifetime `'a` here: `'a,`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0261`."}, {"sha": "83c37001a45c9e2c3fefb7c37eeeb0d9e83c7e34", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74244.rs:11:6\n-   |\n-LL | impl<T> Allocator for DefaultAllocator {\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "83c37001a45c9e2c3fefb7c37eeeb0d9e83c7e34", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74244.rs:11:6\n-   |\n-LL | impl<T> Allocator for DefaultAllocator {\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "112fc2ec7196c8c35164fc943956e51808783d52", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:9:6\n-   |\n-LL | impl<'a, 'b> A for () {\n-   |      ^^ unconstrained lifetime parameter\n-\n-error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:9:10\n-   |\n-LL | impl<'a, 'b> A for () {\n-   |          ^^ unconstrained lifetime parameter\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "112fc2ec7196c8c35164fc943956e51808783d52", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,15 +0,0 @@\n-error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:9:6\n-   |\n-LL | impl<'a, 'b> A for () {\n-   |      ^^ unconstrained lifetime parameter\n-\n-error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:9:10\n-   |\n-LL | impl<'a, 'b> A for () {\n-   |          ^^ unconstrained lifetime parameter\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "fb063800bdbc6c375271410dab866049585b35c4", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:18:1\n-   |\n-LL | impl Test for F {\n-   | ^^^^^^^^^^^^^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:11:10\n-   |\n-LL | type F = impl Dummy;\n-   |          ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "fb063800bdbc6c375271410dab866049585b35c4", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:18:1\n-   |\n-LL | impl Test for F {\n-   | ^^^^^^^^^^^^^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:11:10\n-   |\n-LL | type F = impl Dummy;\n-   |          ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "725958358a11e9cd1c61eecd56279d646dfb38e7", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,24 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/never_reveal_concrete_type.rs:15:27\n-   |\n-LL | type NoReveal = impl std::fmt::Debug;\n-   |                 -------------------- the found opaque type\n-...\n-LL |     let _: &'static str = x;\n-   |            ------------   ^ expected `&str`, found opaque type\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected reference `&'static str`\n-            found opaque type `impl Debug`\n-\n-error[E0605]: non-primitive cast: `impl Debug` as `&'static str`\n-  --> $DIR/never_reveal_concrete_type.rs:16:13\n-   |\n-LL |     let _ = x as &'static str;\n-   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0308, E0605.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "725958358a11e9cd1c61eecd56279d646dfb38e7", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,24 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/never_reveal_concrete_type.rs:15:27\n-   |\n-LL | type NoReveal = impl std::fmt::Debug;\n-   |                 -------------------- the found opaque type\n-...\n-LL |     let _: &'static str = x;\n-   |            ------------   ^ expected `&str`, found opaque type\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected reference `&'static str`\n-            found opaque type `impl Debug`\n-\n-error[E0605]: non-primitive cast: `impl Debug` as `&'static str`\n-  --> $DIR/never_reveal_concrete_type.rs:16:13\n-   |\n-LL |     let _ = x as &'static str;\n-   |             ^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0308, E0605.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "917830c6a0984bb837febbebaf475b26464b06e5", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:8:12\n-   |\n-LL | type Foo = impl Copy;\n-   |            ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "917830c6a0984bb837febbebaf475b26464b06e5", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:8:12\n-   |\n-LL | type Foo = impl Copy;\n-   |            ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0f0141dcb99feefaf9e9d6ffc10b6f753cb7a15e", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,31 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:17:19\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ---------------------- the found opaque type\n-...\n-LL |     let _: &str = bomp();\n-   |            ----   ^^^^^^ expected `&str`, found opaque type\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected reference `&str`\n-            found opaque type `impl Debug`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:21:5\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ---------------------- the expected opaque type\n-...\n-LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `impl Debug` because of return type\n-LL |     \"\"\n-   |     ^^ expected opaque type, found `&str`\n-   |\n-   = note: expected opaque type `impl Debug`\n-                found reference `&'static str`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "0f0141dcb99feefaf9e9d6ffc10b6f753cb7a15e", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,31 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:17:19\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ---------------------- the found opaque type\n-...\n-LL |     let _: &str = bomp();\n-   |            ----   ^^^^^^ expected `&str`, found opaque type\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected reference `&str`\n-            found opaque type `impl Debug`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/no_revealing_outside_defining_module.rs:21:5\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ---------------------- the expected opaque type\n-...\n-LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `impl Debug` because of return type\n-LL |     \"\"\n-   |     ^^ expected opaque type, found `&str`\n-   |\n-   = note: expected opaque type `impl Debug`\n-                found reference `&'static str`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "d7f8d04ff808e7a763e49cbef9767938933f9ab3", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/not_a_defining_use.rs:11:27\n-   |\n-LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n-   |                           ^^^^^^^^^^^\n-   |\n-note: used non-generic type `u32` for generic parameter\n-  --> $DIR/not_a_defining_use.rs:9:13\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |             ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d7f8d04ff808e7a763e49cbef9767938933f9ab3", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/not_a_defining_use.rs:11:27\n-   |\n-LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n-   |                           ^^^^^^^^^^^\n-   |\n-note: used non-generic type `u32` for generic parameter\n-  --> $DIR/not_a_defining_use.rs:9:13\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |             ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "59f07482ddbc1a564a1e392ee0ed645c0d517617", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/not_well_formed.rs:11:29\n-   |\n-LL | type Foo<V> = impl Trait<V::Assoc>;\n-   |                             ^^^^^ associated type `Assoc` not found\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0220`."}, {"sha": "59f07482ddbc1a564a1e392ee0ed645c0d517617", "filename": "src/test/ui/type-alias-impl-trait/not_well_formed.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_well_formed.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/not_well_formed.rs:11:29\n-   |\n-LL | type Foo<V> = impl Trait<V::Assoc>;\n-   |                             ^^^^^ associated type `Assoc` not found\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0220`."}, {"sha": "ce0827d94f94f648a8d86d0891d31203770ceab4", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:17:9\n-   |\n-LL |         LEAK_FREE => (),\n-   |         ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "ce0827d94f94f648a8d86d0891d31203770ceab4", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:17:9\n-   |\n-LL |         LEAK_FREE => (),\n-   |         ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "cb2cf59774ba0c7b9491ccc6f641529d03ec118d", "filename": "src/test/ui/type-alias-impl-trait/structural-match.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:18:9\n-   |\n-LL |         VALUE => (),\n-   |         ^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "cb2cf59774ba0c7b9491ccc6f641529d03ec118d", "filename": "src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:18:9\n-   |\n-LL |         VALUE => (),\n-   |         ^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2a40ccc074b9314f51c87d00a0b2368591163339", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,21 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/type-alias-impl-trait-const.rs:12:19\n-   |\n-LL | pub type Foo = impl Debug;\n-   |                ---------- the expected opaque type\n-...\n-LL | const _FOO: Foo = 5;\n-   |                   ^ expected opaque type, found integer\n-   |\n-   = note: expected opaque type `impl Debug`\n-                     found type `{integer}`\n-\n-error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-const.rs:9:16\n-   |\n-LL | pub type Foo = impl Debug;\n-   |                ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "2a40ccc074b9314f51c87d00a0b2368591163339", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,21 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/type-alias-impl-trait-const.rs:12:19\n-   |\n-LL | pub type Foo = impl Debug;\n-   |                ---------- the expected opaque type\n-...\n-LL | const _FOO: Foo = 5;\n-   |                   ^ expected opaque type, found integer\n-   |\n-   = note: expected opaque type `impl Debug`\n-                     found type `{integer}`\n-\n-error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-const.rs:9:16\n-   |\n-LL | pub type Foo = impl Debug;\n-   |                ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "c4bd4deaa061763f5f8213cf657b5afb7fff98b3", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:12:6\n-   |\n-LL | impl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\n-   |      ^^ unconstrained lifetime parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "c4bd4deaa061763f5f8213cf657b5afb7fff98b3", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,9 +0,0 @@\n-error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/type-alias-impl-trait-unconstrained-lifetime.rs:12:6\n-   |\n-LL | impl<'a, I: Iterator<Item = i32>> Trait for (i32, I) {\n-   |      ^^ unconstrained lifetime parameter\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "f1b9f23f06640cda35030e53e77a11b5f8ff123a", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:5:12\n-   |\n-LL | type Foo = impl Fn() -> Foo;\n-   |            ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "f1b9f23f06640cda35030e53e77a11b5f8ff123a", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error.rs:5:12\n-   |\n-LL | type Foo = impl Fn() -> Foo;\n-   |            ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2df29d72c1e3bbfdc4f502364abcbe4775adb2f4", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:9:12\n-   |\n-LL | type Foo = impl Bar<Foo, Item = Foo>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2df29d72c1e3bbfdc4f502364abcbe4775adb2f4", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-cycle-error2.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-cycle-error2.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,8 +0,0 @@\n-error: could not find defining uses\n-  --> $DIR/type-alias-impl-trait-with-cycle-error2.rs:9:12\n-   |\n-LL | type Foo = impl Bar<Foo, Item = Foo>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "4c32549ce30b1b55b532781c5f120f8bdbb0dbef", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-no-traits.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/type-alias-impl-trait-with-no-traits.rs:5:12\n-   |\n-LL | type Foo = impl 'static;\n-   |            ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/type-alias-impl-trait-with-no-traits.rs:12:13\n-   |\n-LL | fn bar() -> impl 'static {\n-   |             ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "4c32549ce30b1b55b532781c5f120f8bdbb0dbef", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-with-no-traits.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-with-no-traits.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/type-alias-impl-trait-with-no-traits.rs:5:12\n-   |\n-LL | type Foo = impl 'static;\n-   |            ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/type-alias-impl-trait-with-no-traits.rs:12:13\n-   |\n-LL | fn bar() -> impl 'static {\n-   |             ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "995a6dfbf877c579bd5e5a49bc7662ee1e559b5c", "filename": "src/test/ui/type-alias-impl-trait/unused_generic_param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:7:28\n-   |\n-LL | type PartiallyDefined<T> = impl 'static;\n-   |                            ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:14:29\n-   |\n-LL | type PartiallyDefined2<T> = impl 'static;\n-   |                             ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "995a6dfbf877c579bd5e5a49bc7662ee1e559b5c", "filename": "src/test/ui/type-alias-impl-trait/unused_generic_param.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funused_generic_param.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,14 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:7:28\n-   |\n-LL | type PartiallyDefined<T> = impl 'static;\n-   |                            ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:14:29\n-   |\n-LL | type PartiallyDefined2<T> = impl 'static;\n-   |                             ^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "3427dc0e62214e1f4330bda9f78a8021e6b89ef8", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 638, "changes": 638, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,638 +0,0 @@\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:156:18\n-   |\n-LL | struct BadStruct<_>(_);\n-   |                  ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:159:16\n-   |\n-LL | trait BadTrait<_> {}\n-   |                ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:169:19\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                   ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:169:22\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                      ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:174:19\n-   |\n-LL | struct BadStruct2<_, T>(_, T);\n-   |                   ^ expected identifier, found reserved identifier\n-\n-error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:207:5\n-   |\n-LL |     const C: _;\n-   |     ^^^^^^^^^^-\n-   |               |\n-   |               help: provide a definition for the constant: `= <expr>;`\n-\n-error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:169:22\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                   -  ^ already used\n-   |                   |\n-   |                   first use of `_`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:9:14\n-   |\n-LL | fn test() -> _ { 5 }\n-   |              ^\n-   |              |\n-   |              not allowed in type signatures\n-   |              help: replace with the correct return type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:12:16\n-   |\n-LL | fn test2() -> (_, _) { (5, 5) }\n-   |               -^--^-\n-   |               ||  |\n-   |               ||  not allowed in type signatures\n-   |               |not allowed in type signatures\n-   |               help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:15:15\n-   |\n-LL | static TEST3: _ = \"test\";\n-   |               ^\n-   |               |\n-   |               not allowed in type signatures\n-   |               help: replace with the correct type: `&str`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:18:15\n-   |\n-LL | static TEST4: _ = 145;\n-   |               ^\n-   |               |\n-   |               not allowed in type signatures\n-   |               help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:21:15\n-   |\n-LL | static TEST5: (_, _) = (1, 2);\n-   |               ^^^^^^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:24:13\n-   |\n-LL | fn test6(_: _) { }\n-   |             ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test6<T>(_: T) { }\n-   |         ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:27:18\n-   |\n-LL | fn test6_b<T>(_: _, _: T) { }\n-   |                  ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test6_b<T, U>(_: U, _: T) { }\n-   |             ^^^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:30:30\n-   |\n-LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n-   |                              ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test6_c<T, K, L, A, B, U>(_: U, _: (T, K, L, A, B)) { }\n-   |                         ^^^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:33:13\n-   |\n-LL | fn test7(x: _) { let _x: usize = x; }\n-   |             ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test7<T>(x: T) { let _x: usize = x; }\n-   |         ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:36:22\n-   |\n-LL | fn test8(_f: fn() -> _) { }\n-   |                      ^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: use type parameters instead: `T`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:36:22\n-   |\n-LL | fn test8(_f: fn() -> _) { }\n-   |                      ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test8<T>(_f: fn() -> T) { }\n-   |         ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:50:26\n-   |\n-LL | fn test11(x: &usize) -> &_ {\n-   |                         -^\n-   |                         ||\n-   |                         |not allowed in type signatures\n-   |                         help: replace with the correct return type: `&'static &'static usize`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:55:52\n-   |\n-LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n-   |                                      --------------^\n-   |                                      |             |\n-   |                                      |             not allowed in type signatures\n-   |                                      help: replace with the correct return type: `*const *const usize`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:69:8\n-   |\n-LL |     a: _,\n-   |        ^ not allowed in type signatures\n-LL |\n-LL |     b: (_, _),\n-   |         ^  ^ not allowed in type signatures\n-   |         |\n-   |         not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct Test10<T> {\n-LL |     a: T,\n-LL |\n-LL |     b: (T, T),\n-   |\n-\n-error: missing type for `static` item\n-  --> $DIR/typeck_type_placeholder_item.rs:75:12\n-   |\n-LL |     static A = 42;\n-   |            ^ help: provide a type for the static variable: `A: i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:77:15\n-   |\n-LL |     static B: _ = 42;\n-   |               ^\n-   |               |\n-   |               not allowed in type signatures\n-   |               help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:79:15\n-   |\n-LL |     static C: Option<_> = Some(42);\n-   |               ^^^^^^^^^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:81:21\n-   |\n-LL |     fn fn_test() -> _ { 5 }\n-   |                     ^\n-   |                     |\n-   |                     not allowed in type signatures\n-   |                     help: replace with the correct return type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:84:23\n-   |\n-LL |     fn fn_test2() -> (_, _) { (5, 5) }\n-   |                      -^--^-\n-   |                      ||  |\n-   |                      ||  not allowed in type signatures\n-   |                      |not allowed in type signatures\n-   |                      help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:87:22\n-   |\n-LL |     static FN_TEST3: _ = \"test\";\n-   |                      ^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: replace with the correct type: `&str`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:90:22\n-   |\n-LL |     static FN_TEST4: _ = 145;\n-   |                      ^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:93:22\n-   |\n-LL |     static FN_TEST5: (_, _) = (1, 2);\n-   |                      ^^^^^^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:96:20\n-   |\n-LL |     fn fn_test6(_: _) { }\n-   |                    ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn fn_test6<T>(_: T) { }\n-   |                ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:99:20\n-   |\n-LL |     fn fn_test7(x: _) { let _x: usize = x; }\n-   |                    ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n-   |                ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:102:29\n-   |\n-LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^\n-   |                             |\n-   |                             not allowed in type signatures\n-   |                             help: use type parameters instead: `T`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:102:29\n-   |\n-LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn fn_test8<T>(_f: fn() -> T) { }\n-   |                ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:125:12\n-   |\n-LL |         a: _,\n-   |            ^ not allowed in type signatures\n-LL |\n-LL |         b: (_, _),\n-   |             ^  ^ not allowed in type signatures\n-   |             |\n-   |             not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     struct FnTest10<T> {\n-LL |         a: T,\n-LL |\n-LL |         b: (T, T),\n-   |\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:130:18\n-   |\n-LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n-   |                  ^ cannot infer type\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:130:28\n-   |\n-LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n-   |                            ^  ^ not allowed in type signatures\n-   |                            |\n-   |                            not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:134:30\n-   |\n-LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n-   |                             -^--^-\n-   |                             ||  |\n-   |                             ||  not allowed in type signatures\n-   |                             |not allowed in type signatures\n-   |                             help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:137:33\n-   |\n-LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n-   |                           ------^-\n-   |                           |     |\n-   |                           |     not allowed in type signatures\n-   |                           help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:156:21\n-   |\n-LL | struct BadStruct<_>(_);\n-   |                     ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct BadStruct<T>(T);\n-   |                  ^  ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for implementations\n-  --> $DIR/typeck_type_placeholder_item.rs:161:15\n-   |\n-LL | impl BadTrait<_> for BadStruct<_> {}\n-   |               ^                ^ not allowed in type signatures\n-   |               |\n-   |               not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | impl<T> BadTrait<T> for BadStruct<T> {}\n-   |     ^^^          ^                ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n-  --> $DIR/typeck_type_placeholder_item.rs:164:34\n-   |\n-LL | fn impl_trait() -> impl BadTrait<_> {\n-   |                                  ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:169:25\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct BadStruct1<T, _>(T);\n-   |                   ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:174:25\n-   |\n-LL | struct BadStruct2<_, T>(_, T);\n-   |                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct BadStruct2<U, T>(U, T);\n-   |                   ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n-  --> $DIR/typeck_type_placeholder_item.rs:178:14\n-   |\n-LL | type X = Box<_>;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n-  --> $DIR/typeck_type_placeholder_item.rs:184:21\n-   |\n-LL | type Y = impl Trait<_>;\n-   |                     ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:218:31\n-   |\n-LL | fn value() -> Option<&'static _> {\n-   |               ----------------^-\n-   |               |               |\n-   |               |               not allowed in type signatures\n-   |               help: replace with the correct return type: `Option<&'static u8>`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:223:10\n-   |\n-LL | const _: Option<_> = map(value);\n-   |          ^^^^^^^^^\n-   |          |\n-   |          not allowed in type signatures\n-   |          help: replace with the correct type: `Option<u8>`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:142:31\n-   |\n-LL |     fn method_test1(&self, x: _);\n-   |                               ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn method_test1<T>(&self, x: T);\n-   |                    ^^^           ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:144:31\n-   |\n-LL |     fn method_test2(&self, x: _) -> _;\n-   |                               ^     ^ not allowed in type signatures\n-   |                               |\n-   |                               not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn method_test2<T>(&self, x: T) -> T;\n-   |                    ^^^           ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:146:31\n-   |\n-LL |     fn method_test3(&self) -> _;\n-   |                               ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn method_test3<T>(&self) -> T;\n-   |                    ^^^           ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:148:26\n-   |\n-LL |     fn assoc_fn_test1(x: _);\n-   |                          ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn assoc_fn_test1<T>(x: T);\n-   |                      ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:150:26\n-   |\n-LL |     fn assoc_fn_test2(x: _) -> _;\n-   |                          ^     ^ not allowed in type signatures\n-   |                          |\n-   |                          not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn assoc_fn_test2<T>(x: T) -> T;\n-   |                      ^^^    ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:152:28\n-   |\n-LL |     fn assoc_fn_test3() -> _;\n-   |                            ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn assoc_fn_test3<T>() -> T;\n-   |                      ^^^      ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:192:14\n-   |\n-LL |     type B = _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:194:14\n-   |\n-LL |     const C: _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:196:14\n-   |\n-LL |     const D: _ = 42;\n-   |              ^\n-   |              |\n-   |              not allowed in type signatures\n-   |              help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:199:26\n-   |\n-LL |     type F: std::ops::Fn(_);\n-   |                          ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:43:24\n-   |\n-LL |     fn test9(&self) -> _ { () }\n-   |                        ^\n-   |                        |\n-   |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `()`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:46:27\n-   |\n-LL |     fn test10(&self, _x : _) { }\n-   |                           ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn test10<T>(&self, _x : T) { }\n-   |              ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:61:24\n-   |\n-LL |     fn clone(&self) -> _ { Test9 }\n-   |                        ^\n-   |                        |\n-   |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `Test9`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:64:37\n-   |\n-LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n-   |                                     ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n-   |                  ^^^                   ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:109:31\n-   |\n-LL |         fn fn_test9(&self) -> _ { () }\n-   |                               ^\n-   |                               |\n-   |                               not allowed in type signatures\n-   |                               help: replace with the correct return type: `()`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:112:34\n-   |\n-LL |         fn fn_test10(&self, _x : _) { }\n-   |                                  ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn fn_test10<T>(&self, _x : T) { }\n-   |                     ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:117:28\n-   |\n-LL |         fn clone(&self) -> _ { FnTest9 }\n-   |                            ^\n-   |                            |\n-   |                            not allowed in type signatures\n-   |                            help: replace with the correct return type: `FnTest9`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:120:41\n-   |\n-LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-   |                                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n-   |                      ^^^                   ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:203:14\n-   |\n-LL |     type A = _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:205:14\n-   |\n-LL |     type B = _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:207:14\n-   |\n-LL |     const C: _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:210:14\n-   |\n-LL |     const D: _ = 42;\n-   |              ^\n-   |              |\n-   |              not allowed in type signatures\n-   |              help: replace with the correct type: `i32`\n-\n-error: aborting due to 69 previous errors\n-\n-Some errors have detailed explanations: E0121, E0282, E0403.\n-For more information about an error, try `rustc --explain E0121`."}, {"sha": "3427dc0e62214e1f4330bda9f78a8021e6b89ef8", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 638, "changes": 638, "blob_url": "https://github.com/rust-lang/rust/blob/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d395fe8653b84f7981e7b4a281b6f58e2f57b711/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr?ref=d395fe8653b84f7981e7b4a281b6f58e2f57b711", "patch": "@@ -1,638 +0,0 @@\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:156:18\n-   |\n-LL | struct BadStruct<_>(_);\n-   |                  ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:159:16\n-   |\n-LL | trait BadTrait<_> {}\n-   |                ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:169:19\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                   ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:169:22\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                      ^ expected identifier, found reserved identifier\n-\n-error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:174:19\n-   |\n-LL | struct BadStruct2<_, T>(_, T);\n-   |                   ^ expected identifier, found reserved identifier\n-\n-error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:207:5\n-   |\n-LL |     const C: _;\n-   |     ^^^^^^^^^^-\n-   |               |\n-   |               help: provide a definition for the constant: `= <expr>;`\n-\n-error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:169:22\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                   -  ^ already used\n-   |                   |\n-   |                   first use of `_`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:9:14\n-   |\n-LL | fn test() -> _ { 5 }\n-   |              ^\n-   |              |\n-   |              not allowed in type signatures\n-   |              help: replace with the correct return type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:12:16\n-   |\n-LL | fn test2() -> (_, _) { (5, 5) }\n-   |               -^--^-\n-   |               ||  |\n-   |               ||  not allowed in type signatures\n-   |               |not allowed in type signatures\n-   |               help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:15:15\n-   |\n-LL | static TEST3: _ = \"test\";\n-   |               ^\n-   |               |\n-   |               not allowed in type signatures\n-   |               help: replace with the correct type: `&str`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:18:15\n-   |\n-LL | static TEST4: _ = 145;\n-   |               ^\n-   |               |\n-   |               not allowed in type signatures\n-   |               help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:21:15\n-   |\n-LL | static TEST5: (_, _) = (1, 2);\n-   |               ^^^^^^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:24:13\n-   |\n-LL | fn test6(_: _) { }\n-   |             ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test6<T>(_: T) { }\n-   |         ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:27:18\n-   |\n-LL | fn test6_b<T>(_: _, _: T) { }\n-   |                  ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test6_b<T, U>(_: U, _: T) { }\n-   |             ^^^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:30:30\n-   |\n-LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n-   |                              ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test6_c<T, K, L, A, B, U>(_: U, _: (T, K, L, A, B)) { }\n-   |                         ^^^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:33:13\n-   |\n-LL | fn test7(x: _) { let _x: usize = x; }\n-   |             ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test7<T>(x: T) { let _x: usize = x; }\n-   |         ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:36:22\n-   |\n-LL | fn test8(_f: fn() -> _) { }\n-   |                      ^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: use type parameters instead: `T`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:36:22\n-   |\n-LL | fn test8(_f: fn() -> _) { }\n-   |                      ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | fn test8<T>(_f: fn() -> T) { }\n-   |         ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:50:26\n-   |\n-LL | fn test11(x: &usize) -> &_ {\n-   |                         -^\n-   |                         ||\n-   |                         |not allowed in type signatures\n-   |                         help: replace with the correct return type: `&'static &'static usize`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:55:52\n-   |\n-LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n-   |                                      --------------^\n-   |                                      |             |\n-   |                                      |             not allowed in type signatures\n-   |                                      help: replace with the correct return type: `*const *const usize`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:69:8\n-   |\n-LL |     a: _,\n-   |        ^ not allowed in type signatures\n-LL |\n-LL |     b: (_, _),\n-   |         ^  ^ not allowed in type signatures\n-   |         |\n-   |         not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct Test10<T> {\n-LL |     a: T,\n-LL |\n-LL |     b: (T, T),\n-   |\n-\n-error: missing type for `static` item\n-  --> $DIR/typeck_type_placeholder_item.rs:75:12\n-   |\n-LL |     static A = 42;\n-   |            ^ help: provide a type for the static variable: `A: i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:77:15\n-   |\n-LL |     static B: _ = 42;\n-   |               ^\n-   |               |\n-   |               not allowed in type signatures\n-   |               help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:79:15\n-   |\n-LL |     static C: Option<_> = Some(42);\n-   |               ^^^^^^^^^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:81:21\n-   |\n-LL |     fn fn_test() -> _ { 5 }\n-   |                     ^\n-   |                     |\n-   |                     not allowed in type signatures\n-   |                     help: replace with the correct return type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:84:23\n-   |\n-LL |     fn fn_test2() -> (_, _) { (5, 5) }\n-   |                      -^--^-\n-   |                      ||  |\n-   |                      ||  not allowed in type signatures\n-   |                      |not allowed in type signatures\n-   |                      help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:87:22\n-   |\n-LL |     static FN_TEST3: _ = \"test\";\n-   |                      ^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: replace with the correct type: `&str`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:90:22\n-   |\n-LL |     static FN_TEST4: _ = 145;\n-   |                      ^\n-   |                      |\n-   |                      not allowed in type signatures\n-   |                      help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n-  --> $DIR/typeck_type_placeholder_item.rs:93:22\n-   |\n-LL |     static FN_TEST5: (_, _) = (1, 2);\n-   |                      ^^^^^^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:96:20\n-   |\n-LL |     fn fn_test6(_: _) { }\n-   |                    ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn fn_test6<T>(_: T) { }\n-   |                ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:99:20\n-   |\n-LL |     fn fn_test7(x: _) { let _x: usize = x; }\n-   |                    ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n-   |                ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:102:29\n-   |\n-LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^\n-   |                             |\n-   |                             not allowed in type signatures\n-   |                             help: use type parameters instead: `T`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:102:29\n-   |\n-LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn fn_test8<T>(_f: fn() -> T) { }\n-   |                ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:125:12\n-   |\n-LL |         a: _,\n-   |            ^ not allowed in type signatures\n-LL |\n-LL |         b: (_, _),\n-   |             ^  ^ not allowed in type signatures\n-   |             |\n-   |             not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     struct FnTest10<T> {\n-LL |         a: T,\n-LL |\n-LL |         b: (T, T),\n-   |\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:130:18\n-   |\n-LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n-   |                  ^ cannot infer type\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:130:28\n-   |\n-LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n-   |                            ^  ^ not allowed in type signatures\n-   |                            |\n-   |                            not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:134:30\n-   |\n-LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n-   |                             -^--^-\n-   |                             ||  |\n-   |                             ||  not allowed in type signatures\n-   |                             |not allowed in type signatures\n-   |                             help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:137:33\n-   |\n-LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n-   |                           ------^-\n-   |                           |     |\n-   |                           |     not allowed in type signatures\n-   |                           help: replace with the correct return type: `(i32, i32)`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:156:21\n-   |\n-LL | struct BadStruct<_>(_);\n-   |                     ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct BadStruct<T>(T);\n-   |                  ^  ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for implementations\n-  --> $DIR/typeck_type_placeholder_item.rs:161:15\n-   |\n-LL | impl BadTrait<_> for BadStruct<_> {}\n-   |               ^                ^ not allowed in type signatures\n-   |               |\n-   |               not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | impl<T> BadTrait<T> for BadStruct<T> {}\n-   |     ^^^          ^                ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n-  --> $DIR/typeck_type_placeholder_item.rs:164:34\n-   |\n-LL | fn impl_trait() -> impl BadTrait<_> {\n-   |                                  ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:169:25\n-   |\n-LL | struct BadStruct1<_, _>(_);\n-   |                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct BadStruct1<T, _>(T);\n-   |                   ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n-  --> $DIR/typeck_type_placeholder_item.rs:174:25\n-   |\n-LL | struct BadStruct2<_, T>(_, T);\n-   |                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL | struct BadStruct2<U, T>(U, T);\n-   |                   ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n-  --> $DIR/typeck_type_placeholder_item.rs:178:14\n-   |\n-LL | type X = Box<_>;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n-  --> $DIR/typeck_type_placeholder_item.rs:184:21\n-   |\n-LL | type Y = impl Trait<_>;\n-   |                     ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:218:31\n-   |\n-LL | fn value() -> Option<&'static _> {\n-   |               ----------------^-\n-   |               |               |\n-   |               |               not allowed in type signatures\n-   |               help: replace with the correct return type: `Option<&'static u8>`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:223:10\n-   |\n-LL | const _: Option<_> = map(value);\n-   |          ^^^^^^^^^\n-   |          |\n-   |          not allowed in type signatures\n-   |          help: replace with the correct type: `Option<u8>`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:142:31\n-   |\n-LL |     fn method_test1(&self, x: _);\n-   |                               ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn method_test1<T>(&self, x: T);\n-   |                    ^^^           ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:144:31\n-   |\n-LL |     fn method_test2(&self, x: _) -> _;\n-   |                               ^     ^ not allowed in type signatures\n-   |                               |\n-   |                               not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn method_test2<T>(&self, x: T) -> T;\n-   |                    ^^^           ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:146:31\n-   |\n-LL |     fn method_test3(&self) -> _;\n-   |                               ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn method_test3<T>(&self) -> T;\n-   |                    ^^^           ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:148:26\n-   |\n-LL |     fn assoc_fn_test1(x: _);\n-   |                          ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn assoc_fn_test1<T>(x: T);\n-   |                      ^^^    ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:150:26\n-   |\n-LL |     fn assoc_fn_test2(x: _) -> _;\n-   |                          ^     ^ not allowed in type signatures\n-   |                          |\n-   |                          not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn assoc_fn_test2<T>(x: T) -> T;\n-   |                      ^^^    ^     ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:152:28\n-   |\n-LL |     fn assoc_fn_test3() -> _;\n-   |                            ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn assoc_fn_test3<T>() -> T;\n-   |                      ^^^      ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:192:14\n-   |\n-LL |     type B = _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:194:14\n-   |\n-LL |     const C: _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:196:14\n-   |\n-LL |     const D: _ = 42;\n-   |              ^\n-   |              |\n-   |              not allowed in type signatures\n-   |              help: replace with the correct type: `i32`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:199:26\n-   |\n-LL |     type F: std::ops::Fn(_);\n-   |                          ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:43:24\n-   |\n-LL |     fn test9(&self) -> _ { () }\n-   |                        ^\n-   |                        |\n-   |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `()`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:46:27\n-   |\n-LL |     fn test10(&self, _x : _) { }\n-   |                           ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn test10<T>(&self, _x : T) { }\n-   |              ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:61:24\n-   |\n-LL |     fn clone(&self) -> _ { Test9 }\n-   |                        ^\n-   |                        |\n-   |                        not allowed in type signatures\n-   |                        help: replace with the correct return type: `Test9`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:64:37\n-   |\n-LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n-   |                                     ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n-   |                  ^^^                   ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:109:31\n-   |\n-LL |         fn fn_test9(&self) -> _ { () }\n-   |                               ^\n-   |                               |\n-   |                               not allowed in type signatures\n-   |                               help: replace with the correct return type: `()`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:112:34\n-   |\n-LL |         fn fn_test10(&self, _x : _) { }\n-   |                                  ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn fn_test10<T>(&self, _x : T) { }\n-   |                     ^^^             ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n-  --> $DIR/typeck_type_placeholder_item.rs:117:28\n-   |\n-LL |         fn clone(&self) -> _ { FnTest9 }\n-   |                            ^\n-   |                            |\n-   |                            not allowed in type signatures\n-   |                            help: replace with the correct return type: `FnTest9`\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n-  --> $DIR/typeck_type_placeholder_item.rs:120:41\n-   |\n-LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-   |                                         ^ not allowed in type signatures\n-   |\n-help: use type parameters instead\n-   |\n-LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n-   |                      ^^^                   ^\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:203:14\n-   |\n-LL |     type A = _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n-  --> $DIR/typeck_type_placeholder_item.rs:205:14\n-   |\n-LL |     type B = _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:207:14\n-   |\n-LL |     const C: _;\n-   |              ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:210:14\n-   |\n-LL |     const D: _ = 42;\n-   |              ^\n-   |              |\n-   |              not allowed in type signatures\n-   |              help: replace with the correct type: `i32`\n-\n-error: aborting due to 69 previous errors\n-\n-Some errors have detailed explanations: E0121, E0282, E0403.\n-For more information about an error, try `rustc --explain E0121`."}]}