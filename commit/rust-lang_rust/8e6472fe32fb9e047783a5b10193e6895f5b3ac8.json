{"sha": "8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNjQ3MmZlMzJmYjllMDQ3NzgzYTViMTAxOTNlNjg5NWY1YjNhYzg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-11T22:59:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-11T22:59:10Z"}, "message": "Rollup merge of #80324 - Aaron1011:loop-move-fn-self, r=oli-obk\n\nExplain method-call move errors in loops\n\nPR #73708 added a more detailed explanation of move errors that occur\ndue to a call to a method that takes `self`. This PR extends that logic\nto work when a move error occurs due to a method call in the previous\niteration of a loop.", "tree": {"sha": "ced8b93a7016d17de5e81afb2255a2bd132f3ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced8b93a7016d17de5e81afb2255a2bd132f3ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/Ng+CRBK7hj4Ov3rIwAAdHIIAD1M0SbJvi44ZCTlxYjtGIwy\nJP/gkHXzZD08pIo/p9ha+6QlxwgkJBpfGUmiwiSx4jpj/J4Q8DSz0i9qi9vkQUkZ\ndibq8OEa84i/N4Hv5Gm17+P7dPVCCO+T/EL50vesbSZCBwDFgDJ/Rvj8k9ZalYmp\nUIrA9+jH9JBzNkIjGqQhmoTtf42PKjUcmWz8YGiokQgNbOgj2nHCWrwl8ClU6WAN\nsbzU9yg2RAK2OI7jLQ2erBCWZOya0UzVTDxyCSetrgf+soOlZ/A1Z87fLQgP8Mhm\nEtUptdW2FfShJmrqcfHEsC3mx1wlJ9KaianZ6rlvINKdBDxtlPiHNzTJxiz2JPE=\n=XvsD\n-----END PGP SIGNATURE-----\n", "payload": "tree ced8b93a7016d17de5e81afb2255a2bd132f3ac9\nparent 56504a00f2ea183653beb0a06393343c99cdf6e2\nparent 20979aad7733d8ddc89a1922560c4770d3a6e814\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610405950 +0900\ncommitter GitHub <noreply@github.com> 1610405950 +0900\n\nRollup merge of #80324 - Aaron1011:loop-move-fn-self, r=oli-obk\n\nExplain method-call move errors in loops\n\nPR #73708 added a more detailed explanation of move errors that occur\ndue to a call to a method that takes `self`. This PR extends that logic\nto work when a move error occurs due to a method call in the previous\niteration of a loop.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "html_url": "https://github.com/rust-lang/rust/commit/8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56504a00f2ea183653beb0a06393343c99cdf6e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/56504a00f2ea183653beb0a06393343c99cdf6e2", "html_url": "https://github.com/rust-lang/rust/commit/56504a00f2ea183653beb0a06393343c99cdf6e2"}, {"sha": "20979aad7733d8ddc89a1922560c4770d3a6e814", "url": "https://api.github.com/repos/rust-lang/rust/commits/20979aad7733d8ddc89a1922560c4770d3a6e814", "html_url": "https://github.com/rust-lang/rust/commit/20979aad7733d8ddc89a1922560c4770d3a6e814"}], "stats": {"total": 202, "additions": 108, "deletions": 94}, "files": [{"sha": "db02ee67910b2ab59e940da0ed7cf120fcda4de9", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 68, "deletions": 74, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -151,95 +151,88 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 let move_msg = if move_spans.for_closure() { \" into closure\" } else { \"\" };\n \n+                let loop_message = if location == move_out.source || move_site.traversed_back_edge {\n+                    \", in previous iteration of loop\"\n+                } else {\n+                    \"\"\n+                };\n+\n                 if location == move_out.source {\n-                    err.span_label(\n-                        span,\n-                        format!(\n-                            \"value {}moved{} here, in previous iteration of loop\",\n-                            partially_str, move_msg\n-                        ),\n-                    );\n                     is_loop_move = true;\n-                } else if move_site.traversed_back_edge {\n-                    err.span_label(\n-                        move_span,\n-                        format!(\n-                            \"value {}moved{} here, in previous iteration of loop\",\n-                            partially_str, move_msg\n-                        ),\n-                    );\n-                } else {\n-                    if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } =\n-                        move_spans\n-                    {\n-                        let place_name = self\n-                            .describe_place(moved_place.as_ref())\n-                            .map(|n| format!(\"`{}`\", n))\n-                            .unwrap_or_else(|| \"value\".to_owned());\n-                        match kind {\n-                            FnSelfUseKind::FnOnceCall => {\n+                }\n+\n+                if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } = move_spans {\n+                    let place_name = self\n+                        .describe_place(moved_place.as_ref())\n+                        .map(|n| format!(\"`{}`\", n))\n+                        .unwrap_or_else(|| \"value\".to_owned());\n+                    match kind {\n+                        FnSelfUseKind::FnOnceCall => {\n+                            err.span_label(\n+                                fn_call_span,\n+                                &format!(\n+                                    \"{} {}moved due to this call{}\",\n+                                    place_name, partially_str, loop_message\n+                                ),\n+                            );\n+                            err.span_note(\n+                                var_span,\n+                                \"this value implements `FnOnce`, which causes it to be moved when called\",\n+                            );\n+                        }\n+                        FnSelfUseKind::Operator { self_arg } => {\n+                            err.span_label(\n+                                fn_call_span,\n+                                &format!(\n+                                    \"{} {}moved due to usage in operator{}\",\n+                                    place_name, partially_str, loop_message\n+                                ),\n+                            );\n+                            if self.fn_self_span_reported.insert(fn_span) {\n+                                err.span_note(\n+                                    self_arg.span,\n+                                    \"calling this operator moves the left-hand side\",\n+                                );\n+                            }\n+                        }\n+                        FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n+                            if implicit_into_iter {\n                                 err.span_label(\n                                     fn_call_span,\n                                     &format!(\n-                                        \"{} {}moved due to this call\",\n-                                        place_name, partially_str\n+                                        \"{} {}moved due to this implicit call to `.into_iter()`{}\",\n+                                        place_name, partially_str, loop_message\n                                     ),\n                                 );\n-                                err.span_note(\n-                                    var_span,\n-                                    \"this value implements `FnOnce`, which causes it to be moved when called\",\n-                                );\n-                            }\n-                            FnSelfUseKind::Operator { self_arg } => {\n+                            } else {\n                                 err.span_label(\n                                     fn_call_span,\n                                     &format!(\n-                                        \"{} {}moved due to usage in operator\",\n-                                        place_name, partially_str\n+                                        \"{} {}moved due to this method call{}\",\n+                                        place_name, partially_str, loop_message\n                                     ),\n                                 );\n-                                if self.fn_self_span_reported.insert(fn_span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        \"calling this operator moves the left-hand side\",\n-                                    );\n-                                }\n                             }\n-                            FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n-                                if implicit_into_iter {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\n-                                            \"{} {}moved due to this implicit call to `.into_iter()`\",\n-                                            place_name, partially_str\n-                                        ),\n-                                    );\n-                                } else {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\n-                                            \"{} {}moved due to this method call\",\n-                                            place_name, partially_str\n-                                        ),\n-                                    );\n-                                }\n-                                // Avoid pointing to the same function in multiple different\n-                                // error messages\n-                                if self.fn_self_span_reported.insert(self_arg.span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        &format!(\"this function consumes the receiver `self` by taking ownership of it, which moves {}\", place_name)\n-                                    );\n-                                }\n+                            // Avoid pointing to the same function in multiple different\n+                            // error messages\n+                            if self.fn_self_span_reported.insert(self_arg.span) {\n+                                err.span_note(\n+                                    self_arg.span,\n+                                    &format!(\"this function takes ownership of the receiver `self`, which moves {}\", place_name)\n+                                );\n                             }\n-                            // Deref::deref takes &self, which cannot cause a move\n-                            FnSelfUseKind::DerefCoercion { .. } => unreachable!(),\n                         }\n-                    } else {\n-                        err.span_label(\n-                            move_span,\n-                            format!(\"value {}moved{} here\", partially_str, move_msg),\n-                        );\n+                        // Deref::deref takes &self, which cannot cause a move\n+                        FnSelfUseKind::DerefCoercion { .. } => unreachable!(),\n+                    }\n+                } else {\n+                    err.span_label(\n+                        move_span,\n+                        format!(\"value {}moved{} here{}\", partially_str, move_msg, loop_message),\n+                    );\n+                    // If the move error occurs due to a loop, don't show\n+                    // another message for the same span\n+                    if loop_message.is_empty() {\n                         move_spans.var_span_label(\n                             &mut err,\n                             format!(\n@@ -250,6 +243,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         );\n                     }\n                 }\n+\n                 if let UseSpans::PatUse(span) = move_spans {\n                     err.span_suggestion_verbose(\n                         span.shrink_to_lo(),"}, {"sha": "e067dbbf85bddbfcb03004c38991f4f29f202f5b", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -9,7 +9,7 @@ LL |     {\n LL |         println!(\"{:?}\", some_vec);\n    |                          ^^^^^^^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `some_vec`\n+note: this function takes ownership of the receiver `self`, which moves `some_vec`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "b14faff8f7b8d52cb07535df2a36698e4194d47c", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -13,7 +13,7 @@ LL |         };\n LL |         x.zero()\n    |         ^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $DIR/issue-34721.rs:4:13\n    |\n LL |     fn zero(self) -> Self;"}, {"sha": "fb242f738c87e4877b356a9419af9dd367423633", "filename": "src/test/ui/issues/issue-61108.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -12,7 +12,7 @@ LL |     for l in bad_letters {\n LL |     bad_letters.push('s');\n    |     ^^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `bad_letters`\n+note: this function takes ownership of the receiver `self`, which moves `bad_letters`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "e0da3fd5195cb26df853777f30ee45abfcc9dd61", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -13,7 +13,7 @@ LL |     let _closure = || orig;\n    |                    |\n    |                    value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `orig`\n+note: this function takes ownership of the receiver `self`, which moves `orig`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "946642ef6f3ad30a4ce1afb1ec289e533dcbfdff", "filename": "src/test/ui/moves/move-fn-self-receiver.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -69,6 +69,11 @@ fn move_out(val: Container) {\n     let container = Container(vec![]);\n     for _val in container.custom_into_iter() {}\n     container; //~ ERROR use of moved\n+\n+    let foo2 = Foo;\n+    loop {\n+        foo2.use_self(); //~ ERROR use of moved\n+    }\n }\n \n fn main() {}"}, {"sha": "eca6bb9296ddc91e989b16aa26ef65b732d38b28", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -6,7 +6,7 @@ LL |     val.0.into_iter().next();\n LL |     val.0;\n    |     ^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `val.0`\n+note: this function takes ownership of the receiver `self`, which moves `val.0`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n@@ -23,7 +23,7 @@ LL |     foo.use_self();\n LL |     foo;\n    |     ^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `foo`\n+note: this function takes ownership of the receiver `self`, which moves `foo`\n   --> $DIR/move-fn-self-receiver.rs:13:17\n    |\n LL |     fn use_self(self) {}\n@@ -49,7 +49,7 @@ LL |     boxed_foo.use_box_self();\n LL |     boxed_foo;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `boxed_foo`\n+note: this function takes ownership of the receiver `self`, which moves `boxed_foo`\n   --> $DIR/move-fn-self-receiver.rs:14:21\n    |\n LL |     fn use_box_self(self: Box<Self>) {}\n@@ -65,7 +65,7 @@ LL |     pin_box_foo.use_pin_box_self();\n LL |     pin_box_foo;\n    |     ^^^^^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `pin_box_foo`\n+note: this function takes ownership of the receiver `self`, which moves `pin_box_foo`\n   --> $DIR/move-fn-self-receiver.rs:15:25\n    |\n LL |     fn use_pin_box_self(self: Pin<Box<Self>>) {}\n@@ -91,7 +91,7 @@ LL |     rc_foo.use_rc_self();\n LL |     rc_foo;\n    |     ^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `rc_foo`\n+note: this function takes ownership of the receiver `self`, which moves `rc_foo`\n   --> $DIR/move-fn-self-receiver.rs:16:20\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n@@ -146,13 +146,22 @@ LL |     for _val in container.custom_into_iter() {}\n LL |     container;\n    |     ^^^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `container`\n+note: this function takes ownership of the receiver `self`, which moves `container`\n   --> $DIR/move-fn-self-receiver.rs:23:25\n    |\n LL |     fn custom_into_iter(self) -> impl Iterator<Item = bool> {\n    |                         ^^^^\n \n-error: aborting due to 11 previous errors\n+error[E0382]: use of moved value: `foo2`\n+  --> $DIR/move-fn-self-receiver.rs:75:9\n+   |\n+LL |     let foo2 = Foo;\n+   |         ---- move occurs because `foo2` has type `Foo`, which does not implement the `Copy` trait\n+LL |     loop {\n+LL |         foo2.use_self();\n+   |         ^^^^ ---------- `foo2` moved due to this method call, in previous iteration of loop\n+\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0382, E0505.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "3cc8ca29144ca6a49dc8bede2fdf0d4f26b4374f", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -8,7 +8,7 @@ LL |     consume(x.into_iter().next().unwrap());\n LL |     touch(&x[0]);\n    |            ^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "9bcec36740d6245ba901feb26a5ea7b4647a896f", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -108,7 +108,7 @@ LL |     let _y = x.into_iter().next().unwrap();\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n@@ -124,7 +124,7 @@ LL |     let _y = [x.into_iter().next().unwrap(); 1];\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n+note: this function takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "28c319b659765ccbf1bef51cde2b85e12017a248", "filename": "src/test/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -15,8 +15,14 @@ LL |     for i in &a {\n LL |         for j in a {\n    |                  ^\n    |                  |\n-   |                  value moved here, in previous iteration of loop\n+   |                  `a` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |                  help: consider borrowing to avoid moving into the for loop: `&a`\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `a`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4f2bc06d4ab8e5177bf5cf821136fe1eb2e51c09", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -51,7 +51,7 @@ LL |         y.foo();\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n+note: this function takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/borrow-after-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "4bb2ad88faf3b7c7916c9a5267f8b0347bfee961", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -47,7 +47,7 @@ LL |         y.foo();\n LL |         y.foo();\n    |         ^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n+note: this function takes ownership of the receiver `self`, which moves `y`\n   --> $DIR/double-move.rs:5:12\n    |\n LL |     fn foo(self) -> String;"}, {"sha": "7fdc4ab251fe8ad5b2f93102c959ecb7c1f5346a", "filename": "src/test/ui/use/use-after-move-self-based-on-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return self.x;\n    |                ^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `self`\n+note: this function takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self-based-on-type.rs:15:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "073deee63b98c763a35049c2a377af3925f3a5eb", "filename": "src/test/ui/use/use-after-move-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -8,7 +8,7 @@ LL |         self.bar();\n LL |         return *self.x;\n    |                ^^^^^^^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `self`\n+note: this function takes ownership of the receiver `self`, which moves `self`\n   --> $DIR/use-after-move-self.rs:13:16\n    |\n LL |     pub fn bar(self) {}"}, {"sha": "cda08b0f4e09cc6c1404a2389535e1b39f83c42e", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e6472fe32fb9e047783a5b10193e6895f5b3ac8/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=8e6472fe32fb9e047783a5b10193e6895f5b3ac8", "patch": "@@ -8,7 +8,7 @@ LL |     let end = Mine{other_val:1, ..start.make_string_bar()};\n LL |     println!(\"{}\", start.test);\n    |                    ^^^^^^^^^^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `start`\n+note: this function takes ownership of the receiver `self`, which moves `start`\n   --> $DIR/walk-struct-literal-with.rs:7:28\n    |\n LL |     fn make_string_bar(mut self) -> Mine{"}]}