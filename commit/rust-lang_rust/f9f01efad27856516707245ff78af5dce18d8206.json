{"sha": "f9f01efad27856516707245ff78af5dce18d8206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZjAxZWZhZDI3ODU2NTE2NzA3MjQ1ZmY3OGFmNWRjZTE4ZDgyMDY=", "commit": {"author": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-05-06T00:25:14Z"}, "committer": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-05-06T16:29:08Z"}, "message": "Stabilize from_raw_os", "tree": {"sha": "7b3de1850186706212984354a15b21571f1bb5bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b3de1850186706212984354a15b21571f1bb5bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9f01efad27856516707245ff78af5dce18d8206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f01efad27856516707245ff78af5dce18d8206", "html_url": "https://github.com/rust-lang/rust/commit/f9f01efad27856516707245ff78af5dce18d8206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9f01efad27856516707245ff78af5dce18d8206/comments", "author": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd748611346dec3181f81ca3aa551cce0529343", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd748611346dec3181f81ca3aa551cce0529343", "html_url": "https://github.com/rust-lang/rust/commit/6cd748611346dec3181f81ca3aa551cce0529343"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "c4a37241f64972fb84383cb25c0938cc42ba27e9", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9f01efad27856516707245ff78af5dce18d8206/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f01efad27856516707245ff78af5dce18d8206/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=f9f01efad27856516707245ff78af5dce18d8206", "patch": "@@ -41,8 +41,7 @@ pub trait AsRawFd {\n \n /// A trait to express the ability to construct an object from a raw file\n /// descriptor.\n-#[unstable(feature = \"from_raw_os\",\n-           reason = \"recent addition to std::os::unix::io\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawFd {\n     /// Constructs a new instances of `Self` from the given raw file\n     /// descriptor.\n@@ -56,6 +55,7 @@ pub trait FromRawFd {\n     /// descriptor they are wrapping. Usage of this function could\n     /// accidentally allow violating this contract which can cause memory\n     /// unsafety in code that relies on it being true.\n+    #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n     unsafe fn from_raw_fd(fd: RawFd) -> Self;\n }\n \n@@ -65,7 +65,7 @@ impl AsRawFd for fs::File {\n         self.as_inner().fd().raw()\n     }\n }\n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for fs::File {\n     unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n         fs::File::from_inner(sys::fs2::File::from_inner(fd))\n@@ -85,21 +85,21 @@ impl AsRawFd for net::UdpSocket {\n     fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n }\n \n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n         let socket = sys::net::Socket::from_inner(fd);\n         net::TcpStream::from_inner(net2::TcpStream::from_inner(socket))\n     }\n }\n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpListener {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n         let socket = sys::net::Socket::from_inner(fd);\n         net::TcpListener::from_inner(net2::TcpListener::from_inner(socket))\n     }\n }\n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::UdpSocket {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n         let socket = sys::net::Socket::from_inner(fd);"}, {"sha": "eb48022f05503930036da13344fd2ccc71751edc", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9f01efad27856516707245ff78af5dce18d8206/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f01efad27856516707245ff78af5dce18d8206/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=f9f01efad27856516707245ff78af5dce18d8206", "patch": "@@ -33,8 +33,7 @@ pub trait AsRawHandle {\n }\n \n /// Construct I/O objects from raw handles.\n-#[unstable(feature = \"from_raw_os\",\n-           reason = \"recent addition to the std::os::windows::io module\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawHandle {\n     /// Constructs a new I/O object from the specified raw handle.\n     ///\n@@ -47,6 +46,7 @@ pub trait FromRawHandle {\n     /// descriptor they are wrapping. Usage of this function could\n     /// accidentally allow violating this contract which can cause memory\n     /// unsafety in code that relies on it being true.\n+    #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self;\n }\n \n@@ -57,7 +57,7 @@ impl AsRawHandle for fs::File {\n     }\n }\n \n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawHandle for fs::File {\n     unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {\n         let handle = handle as ::libc::HANDLE;\n@@ -74,7 +74,7 @@ pub trait AsRawSocket {\n }\n \n /// Create I/O objects from raw sockets.\n-#[unstable(feature = \"from_raw_os\", reason = \"recent addition to module\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawSocket {\n     /// Creates a new I/O object from the given raw socket.\n     ///\n@@ -86,6 +86,7 @@ pub trait FromRawSocket {\n     /// descriptor they are wrapping. Usage of this function could\n     /// accidentally allow violating this contract which can cause memory\n     /// unsafety in code that relies on it being true.\n+    #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n     unsafe fn from_raw_socket(sock: RawSocket) -> Self;\n }\n \n@@ -108,21 +109,21 @@ impl AsRawSocket for net::UdpSocket {\n     }\n }\n \n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::TcpStream {\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpStream {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::TcpStream::from_inner(net2::TcpStream::from_inner(sock))\n     }\n }\n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::TcpListener {\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpListener {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::TcpListener::from_inner(net2::TcpListener::from_inner(sock))\n     }\n }\n-#[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::UdpSocket {\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {\n         let sock = sys::net::Socket::from_inner(sock);"}]}