{"sha": "9badc33cda41acadc395f1597947b185f5a9b2a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYWRjMzNjZGE0MWFjYWRjMzk1ZjE1OTc5NDdiMTg1ZjVhOWIyYTM=", "commit": {"author": {"name": "SOFe", "email": "sofe2038@gmail.com", "date": "2019-11-25T11:36:47Z"}, "committer": {"name": "SOFe", "email": "sofe2038@gmail.com", "date": "2019-11-25T11:36:47Z"}, "message": "Add str::strip_prefix and str::strip_suffix", "tree": {"sha": "ac19330c789fa8faca2d5e511157436d6eab29b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac19330c789fa8faca2d5e511157436d6eab29b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9badc33cda41acadc395f1597947b185f5a9b2a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEPWQCt3/kGPInJTpuDCqIFGN9y94FAl3bvM8ACgkQDCqIFGN9\ny97PpQ/8DgxC4bOjZvz9B4Nw4hl+VimKvg6JRxEHNandSGqZ0yCyb3SexfXP2DZl\nYTVCE4JamAyWee1iWS6u/VVzSF2Bmadisln8NrDu+rFe8LrtZa0JZsHz89Pf3m9U\nxOHGEd32611NHvk1YBzVCuyVzHtD8rpxQ6hpxCku6glGt0lJVWKvS+i1jKeFJm3R\nazTrD/DMxCx2t/sq4h4xrjxuE1ofjLI6rD2Ogbk7CPawUsD7+wNt6+FIxASbgbCc\n/NeoOoykbIJfSq3L6zC3CjeR8GNEstgcWJCCHyeKPpSvMnZBcz4mowplp+z8CZjO\nZOjFPTmrNUwk1rU7Da3bddJ2QSiwquB9MQeLi+6pq6HhVOWhXb7rQ9KykUZxrrSW\nbo1KZc3HCW/6s3Su7ZYfBQVC093SxwKS7YAQpY5qEmtOe+kxblivzeacfOfhtCJF\ntzDTSIRpe2OIgy0UhumC2gAfL6zbdIgZaCq6AjhADHe1hpXWMYZLcR1g3Kvi94Ef\nuTNXtujjBhUmW3QcYXC4DH5e34qq9VxWsda+F51QO5oAEVxLFqCNc2rjBXQm+TKy\nYM/o0PkMLe2/8NtgSAfU6kzapuPWeqvi94FT6XvUi9x1lsDUFnr6UuoWaRUNcwLJ\nnoPbJaeKstadSK45lHNBdn6e3PwyXNSuPTw6z2DtjRCfdiEJRG8=\n=d90W\n-----END PGP SIGNATURE-----", "payload": "tree ac19330c789fa8faca2d5e511157436d6eab29b8\nparent e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f\nauthor SOFe <sofe2038@gmail.com> 1574681807 +0800\ncommitter SOFe <sofe2038@gmail.com> 1574681807 +0800\n\nAdd str::strip_prefix and str::strip_suffix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9badc33cda41acadc395f1597947b185f5a9b2a3", "html_url": "https://github.com/rust-lang/rust/commit/9badc33cda41acadc395f1597947b185f5a9b2a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9badc33cda41acadc395f1597947b185f5a9b2a3/comments", "author": {"login": "SOF3", "id": 19623715, "node_id": "MDQ6VXNlcjE5NjIzNzE1", "avatar_url": "https://avatars.githubusercontent.com/u/19623715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SOF3", "html_url": "https://github.com/SOF3", "followers_url": "https://api.github.com/users/SOF3/followers", "following_url": "https://api.github.com/users/SOF3/following{/other_user}", "gists_url": "https://api.github.com/users/SOF3/gists{/gist_id}", "starred_url": "https://api.github.com/users/SOF3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SOF3/subscriptions", "organizations_url": "https://api.github.com/users/SOF3/orgs", "repos_url": "https://api.github.com/users/SOF3/repos", "events_url": "https://api.github.com/users/SOF3/events{/privacy}", "received_events_url": "https://api.github.com/users/SOF3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SOF3", "id": 19623715, "node_id": "MDQ6VXNlcjE5NjIzNzE1", "avatar_url": "https://avatars.githubusercontent.com/u/19623715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SOF3", "html_url": "https://github.com/SOF3", "followers_url": "https://api.github.com/users/SOF3/followers", "following_url": "https://api.github.com/users/SOF3/following{/other_user}", "gists_url": "https://api.github.com/users/SOF3/gists{/gist_id}", "starred_url": "https://api.github.com/users/SOF3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SOF3/subscriptions", "organizations_url": "https://api.github.com/users/SOF3/orgs", "repos_url": "https://api.github.com/users/SOF3/repos", "events_url": "https://api.github.com/users/SOF3/events{/privacy}", "received_events_url": "https://api.github.com/users/SOF3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f", "html_url": "https://github.com/rust-lang/rust/commit/e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "2527aee58cd4da6bac41608b4eb33575d52d0e94", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9badc33cda41acadc395f1597947b185f5a9b2a3/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9badc33cda41acadc395f1597947b185f5a9b2a3/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=9badc33cda41acadc395f1597947b185f5a9b2a3", "patch": "@@ -8,7 +8,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use self::pattern::Pattern;\n-use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n+use self::pattern::{Searcher, SearchStep, ReverseSearcher, DoubleEndedSearcher};\n \n use crate::char;\n use crate::fmt::{self, Write};\n@@ -3791,6 +3791,73 @@ impl str {\n         }\n     }\n \n+    /// Returns a string slice with the prefix removed.\n+    ///\n+    /// If the string starts with the pattern `prefix`, `Some` is returned with the substring where\n+    /// the prefix is removed. Unlike `trim_start_matches`, this method removes the prefix exactly\n+    /// once.\n+    ///\n+    /// If the string does not start with `prefix`, it is removed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_strip)]\n+    ///\n+    /// assert_eq!(\"foobar\".strip_prefix(\"foo\"), Some(\"bar\"));\n+    /// assert_eq!(\"foobar\".strip_prefix(\"bar\"), None);\n+    /// assert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n+    /// ```\n+    #[must_use = \"this returns the remaining substring as a new slice, \\\n+                  without modifying the original\"]\n+    #[unstable(feature = \"str_strip\", reason = \"newly added\", issue = \"0\")]\n+    pub fn strip_prefix<'a, P: Pattern<'a>>(&'a self, prefix: P) -> Option<&'a str> {\n+        let mut matcher = prefix.into_searcher(self);\n+        if let SearchStep::Match(start, len) = matcher.next() {\n+            debug_assert_eq!(start, 0);\n+            unsafe {\n+                Some(self.get_unchecked(len..))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns a string slice with the suffix removed.\n+    ///\n+    /// If the string starts with the pattern `suffix`, `Some` is returned with the substring where\n+    /// the suffix is removed. Unlike `trim_end_matches`, this method removes the suffix exactly\n+    /// once.\n+    ///\n+    /// If the string does not start with `suffix`, it is removed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_strip)]\n+    /// assert_eq!(\"barfoo\".strip_suffix(\"foo\"), Some(\"bar\"));\n+    /// assert_eq!(\"barfoo\".strip_suffix(\"bar\"), None);\n+    /// assert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n+    /// ```\n+    #[must_use = \"this returns the remaining substring as a new slice, \\\n+                  without modifying the original\"]\n+    #[unstable(feature = \"str_strip\", reason = \"newly added\", issue = \"0\")]\n+    pub fn strip_suffix<'a, P>(&'a self, suffix: P) -> Option<&'a str>\n+    where\n+        P: Pattern<'a>,\n+        <P as Pattern<'a>>::Searcher: ReverseSearcher<'a>,\n+    {\n+        let mut matcher = suffix.into_searcher(self);\n+        if let SearchStep::Match(start, end) = matcher.next_back() {\n+            debug_assert_eq!(end, self.len());\n+            unsafe {\n+                Some(self.get_unchecked(..start))\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Returns a string slice with all suffixes that match a pattern\n     /// repeatedly removed.\n     ///"}]}