{"sha": "32bf8c767f080459c3dd443ca6f478175b647754", "node_id": "C_kwDOAAsO6NoAKDMyYmY4Yzc2N2YwODA0NTljM2RkNDQzY2E2ZjQ3ODE3NWI2NDc3NTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-21T05:43:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-28T20:10:59Z"}, "message": "Make unsizing_params_for_adt into a query", "tree": {"sha": "f97110807e34fd32d647f8e317c214b49008e0ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f97110807e34fd32d647f8e317c214b49008e0ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32bf8c767f080459c3dd443ca6f478175b647754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32bf8c767f080459c3dd443ca6f478175b647754", "html_url": "https://github.com/rust-lang/rust/commit/32bf8c767f080459c3dd443ca6f478175b647754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32bf8c767f080459c3dd443ca6f478175b647754/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f0642827e21a088b0130c84857d84f5433301d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f0642827e21a088b0130c84857d84f5433301d", "html_url": "https://github.com/rust-lang/rust/commit/d6f0642827e21a088b0130c84857d84f5433301d"}], "stats": {"total": 115, "additions": 71, "deletions": 44}, "files": [{"sha": "a8c562940e0ed990c12f8ad7409906f0f73293dd", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32bf8c767f080459c3dd443ca6f478175b647754/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32bf8c767f080459c3dd443ca6f478175b647754/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=32bf8c767f080459c3dd443ca6f478175b647754", "patch": "@@ -183,6 +183,15 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query unsizing_params_for_adt(key: DefId) -> rustc_index::bit_set::BitSet<u32>\n+    {\n+        arena_cache\n+        desc { |tcx|\n+            \"determining what parameters of `{}` can participate in unsizing\",\n+            tcx.def_path_str(key),\n+        }\n+    }\n+\n     query analysis(key: ()) -> Result<(), ErrorGuaranteed> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }"}, {"sha": "2c41d28400c8258e1d643fc4bc730b9cbbd89ea0", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 10, "deletions": 44, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/32bf8c767f080459c3dd443ca6f478175b647754/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32bf8c767f080459c3dd443ca6f478175b647754/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=32bf8c767f080459c3dd443ca6f478175b647754", "patch": "@@ -8,12 +8,11 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::{\n-    self, Binder, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n-    ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeVisitable,\n+    self, Binder, GenericParamDefKind, InternalSubsts, SubstsRef, ToPolyTraitRef, ToPredicate,\n+    TraitRef, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::DefId;\n@@ -1064,51 +1063,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             // `Struct<T>` -> `Struct<U>`\n             (&ty::Adt(def, substs_a), &ty::Adt(_, substs_b)) => {\n-                let maybe_unsizing_param_idx = |arg: GenericArg<'tcx>| match arg.unpack() {\n-                    GenericArgKind::Type(ty) => match ty.kind() {\n-                        ty::Param(p) => Some(p.index),\n-                        _ => None,\n-                    },\n-\n-                    // Lifetimes aren't allowed to change during unsizing.\n-                    GenericArgKind::Lifetime(_) => None,\n-\n-                    GenericArgKind::Const(ct) => match ct.kind() {\n-                        ty::ConstKind::Param(p) => Some(p.index),\n-                        _ => None,\n-                    },\n-                };\n-\n-                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-                // by putting it in a query; it would only need the `DefId` as it\n-                // looks at declared field types, not anything substituted.\n-\n-                // The last field of the structure has to exist and contain type/const parameters.\n-                let (tail_field, prefix_fields) =\n-                    def.non_enum_variant().fields.split_last().ok_or(Unimplemented)?;\n-                let tail_field_ty = tcx.bound_type_of(tail_field.did);\n-\n-                let mut unsizing_params = GrowableBitSet::new_empty();\n-                for arg in tail_field_ty.0.walk() {\n-                    if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                        unsizing_params.insert(i);\n-                    }\n-                }\n-\n-                // Ensure none of the other fields mention the parameters used\n-                // in unsizing.\n-                for field in prefix_fields {\n-                    for arg in tcx.type_of(field.did).walk() {\n-                        if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            unsizing_params.remove(i);\n-                        }\n-                    }\n-                }\n-\n+                let unsizing_params = tcx.unsizing_params_for_adt(def.did());\n                 if unsizing_params.is_empty() {\n                     return Err(Unimplemented);\n                 }\n \n+                let tail_field = def\n+                    .non_enum_variant()\n+                    .fields\n+                    .last()\n+                    .expect(\"expected unsized ADT to have a tail field\");\n+                let tail_field_ty = tcx.bound_type_of(tail_field.did);\n+\n                 // Extract `TailField<T>` and `TailField<U>` from `Struct<T>` and `Struct<U>`,\n                 // normalizing in the process, since `type_of` returns something directly from\n                 // astconv (which means it's un-normalized)."}, {"sha": "b5005c1d8d804920e78efa6a9027fa8c704709ec", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/32bf8c767f080459c3dd443ca6f478175b647754/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32bf8c767f080459c3dd443ca6f478175b647754/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=32bf8c767f080459c3dd443ca6f478175b647754", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n+use rustc_index::bit_set::BitSet;\n use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -406,6 +407,56 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     node.fn_sig().map_or(hir::IsAsync::NotAsync, |sig| sig.header.asyncness)\n }\n \n+fn unsizing_params_for_adt<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BitSet<u32> {\n+    let def = tcx.adt_def(def_id);\n+    let num_params = tcx.generics_of(def_id).count();\n+\n+    let maybe_unsizing_param_idx = |arg: ty::GenericArg<'tcx>| match arg.unpack() {\n+        ty::GenericArgKind::Type(ty) => match ty.kind() {\n+            ty::Param(p) => Some(p.index),\n+            _ => None,\n+        },\n+\n+        // We can't unsize a lifetime\n+        ty::GenericArgKind::Lifetime(_) => None,\n+\n+        ty::GenericArgKind::Const(ct) => match ct.kind() {\n+            ty::ConstKind::Param(p) => Some(p.index),\n+            _ => None,\n+        },\n+    };\n+\n+    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+    // by putting it in a query; it would only need the `DefId` as it\n+    // looks at declared field types, not anything substituted.\n+\n+    // The last field of the structure has to exist and contain type/const parameters.\n+    let Some((tail_field, prefix_fields)) =\n+        def.non_enum_variant().fields.split_last() else\n+    {\n+        return BitSet::new_empty(num_params);\n+    };\n+\n+    let mut unsizing_params = BitSet::new_empty(num_params);\n+    for arg in tcx.bound_type_of(tail_field.did).subst_identity().walk() {\n+        if let Some(i) = maybe_unsizing_param_idx(arg) {\n+            unsizing_params.insert(i);\n+        }\n+    }\n+\n+    // Ensure none of the other fields mention the parameters used\n+    // in unsizing.\n+    for field in prefix_fields {\n+        for arg in tcx.bound_type_of(field.did).subst_identity().walk() {\n+            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                unsizing_params.remove(i);\n+            }\n+        }\n+    }\n+\n+    unsizing_params\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         asyncness,\n@@ -415,6 +466,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,\n+        unsizing_params_for_adt,\n         ..*providers\n     };\n }"}]}