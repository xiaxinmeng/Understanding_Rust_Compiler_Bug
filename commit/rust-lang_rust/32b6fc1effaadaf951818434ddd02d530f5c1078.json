{"sha": "32b6fc1effaadaf951818434ddd02d530f5c1078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYjZmYzFlZmZhYWRhZjk1MTgxODQzNGRkZDAyZDUzMGY1YzEwNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-30T11:21:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-30T11:21:41Z"}, "message": "auto merge of #14522 : aturon/rust/make_unique, r=alexcrichton,alexcrichton,me\n\nThis patch makes `Arc::make_unique` examine the number of weak\r\nreferences as well as strong references, which is required for safety.\r\n\r\nIt also adds a `make_unique` method to the `Rc` type for consistency.\r\n\r\nCloses #14521.", "tree": {"sha": "273175e6a42e801b4e7d9afe6063518324b07007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273175e6a42e801b4e7d9afe6063518324b07007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32b6fc1effaadaf951818434ddd02d530f5c1078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32b6fc1effaadaf951818434ddd02d530f5c1078", "html_url": "https://github.com/rust-lang/rust/commit/32b6fc1effaadaf951818434ddd02d530f5c1078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32b6fc1effaadaf951818434ddd02d530f5c1078/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a105464fbdf5ba9df7c97eaecffe9f8479f91b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a105464fbdf5ba9df7c97eaecffe9f8479f91b0", "html_url": "https://github.com/rust-lang/rust/commit/3a105464fbdf5ba9df7c97eaecffe9f8479f91b0"}, {"sha": "7889c951240624b22cc4c9b87f2852322b0b716c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7889c951240624b22cc4c9b87f2852322b0b716c", "html_url": "https://github.com/rust-lang/rust/commit/7889c951240624b22cc4c9b87f2852322b0b716c"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "a8eb4b3407eb73fb55baf72a421d72ac9fc87076", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32b6fc1effaadaf951818434ddd02d530f5c1078/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b6fc1effaadaf951818434ddd02d530f5c1078/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=32b6fc1effaadaf951818434ddd02d530f5c1078", "patch": "@@ -152,7 +152,11 @@ impl<T: Send + Share + Clone> Arc<T> {\n     #[inline]\n     #[experimental]\n     pub fn make_unique<'a>(&'a mut self) -> &'a mut T {\n-        if self.inner().strong.load(atomics::SeqCst) != 1 {\n+        // Note that we hold a strong reference, which also counts as\n+        // a weak reference, so we only clone if there is an\n+        // additional reference of either kind.\n+        if self.inner().strong.load(atomics::SeqCst) != 1 ||\n+           self.inner().weak.load(atomics::SeqCst) != 1 {\n             *self = Arc::new(self.deref().clone())\n         }\n         // This unsafety is ok because we're guaranteed that the pointer\n@@ -356,6 +360,20 @@ mod tests {\n         assert!(*cow1 == *cow2);\n     }\n \n+    #[test]\n+    fn test_cowarc_clone_weak() {\n+        let mut cow0 = Arc::new(75u);\n+        let cow1_weak = cow0.downgrade();\n+\n+        assert!(75 == *cow0);\n+        assert!(75 == *cow1_weak.upgrade().unwrap());\n+\n+        *cow0.make_unique() += 1;\n+\n+        assert!(76 == *cow0);\n+        assert!(cow1_weak.upgrade().is_none());\n+    }\n+\n     #[test]\n     fn test_live() {\n         let x = Arc::new(5);"}, {"sha": "96d90e6ed6395e44a9b6032a01d8b32f6ad606a8", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/32b6fc1effaadaf951818434ddd02d530f5c1078/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b6fc1effaadaf951818434ddd02d530f5c1078/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=32b6fc1effaadaf951818434ddd02d530f5c1078", "patch": "@@ -86,6 +86,31 @@ impl<T> Rc<T> {\n     }\n }\n \n+impl<T: Clone> Rc<T> {\n+    /// Acquires a mutable pointer to the inner contents by guaranteeing that\n+    /// the reference count is one (no sharing is possible).\n+    ///\n+    /// This is also referred to as a copy-on-write operation because the inner\n+    /// data is cloned if the reference count is greater than one.\n+    #[inline]\n+    #[experimental]\n+    pub fn make_unique<'a>(&'a mut self) -> &'a mut T {\n+        // Note that we hold a strong reference, which also counts as\n+        // a weak reference, so we only clone if there is an\n+        // additional reference of either kind.\n+        if self.strong() != 1 || self.weak() != 1 {\n+            *self = Rc::new(self.deref().clone())\n+        }\n+        // This unsafety is ok because we're guaranteed that the pointer\n+        // returned is the *only* pointer that will ever be returned to T. Our\n+        // reference count is guaranteed to be 1 at this point, and we required\n+        // the Rc itself to be `mut`, so we're returning the only possible\n+        // reference to the inner data.\n+        let inner = unsafe { &mut *self._ptr };\n+        &mut inner.value\n+    }\n+}\n+\n impl<T> Deref<T> for Rc<T> {\n     /// Borrow the value contained in the reference-counted box\n     #[inline(always)]\n@@ -234,6 +259,7 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n }\n \n #[cfg(test)]\n+#[allow(experimental)]\n mod tests {\n     use super::{Rc, Weak};\n     use std::cell::RefCell;\n@@ -304,4 +330,66 @@ mod tests {\n \n         // hopefully we don't double-free (or leak)...\n     }\n+\n+    #[test]\n+    fn test_cowrc_clone_make_unique() {\n+        let mut cow0 = Rc::new(75u);\n+        let mut cow1 = cow0.clone();\n+        let mut cow2 = cow1.clone();\n+\n+        assert!(75 == *cow0.make_unique());\n+        assert!(75 == *cow1.make_unique());\n+        assert!(75 == *cow2.make_unique());\n+\n+        *cow0.make_unique() += 1;\n+        *cow1.make_unique() += 2;\n+        *cow2.make_unique() += 3;\n+\n+        assert!(76 == *cow0);\n+        assert!(77 == *cow1);\n+        assert!(78 == *cow2);\n+\n+        // none should point to the same backing memory\n+        assert!(*cow0 != *cow1);\n+        assert!(*cow0 != *cow2);\n+        assert!(*cow1 != *cow2);\n+    }\n+\n+    #[test]\n+    fn test_cowrc_clone_unique2() {\n+        let mut cow0 = Rc::new(75u);\n+        let cow1 = cow0.clone();\n+        let cow2 = cow1.clone();\n+\n+        assert!(75 == *cow0);\n+        assert!(75 == *cow1);\n+        assert!(75 == *cow2);\n+\n+        *cow0.make_unique() += 1;\n+\n+        assert!(76 == *cow0);\n+        assert!(75 == *cow1);\n+        assert!(75 == *cow2);\n+\n+        // cow1 and cow2 should share the same contents\n+        // cow0 should have a unique reference\n+        assert!(*cow0 != *cow1);\n+        assert!(*cow0 != *cow2);\n+        assert!(*cow1 == *cow2);\n+    }\n+\n+    #[test]\n+    fn test_cowrc_clone_weak() {\n+        let mut cow0 = Rc::new(75u);\n+        let cow1_weak = cow0.downgrade();\n+\n+        assert!(75 == *cow0);\n+        assert!(75 == *cow1_weak.upgrade().unwrap());\n+\n+        *cow0.make_unique() += 1;\n+\n+        assert!(76 == *cow0);\n+        assert!(cow1_weak.upgrade().is_none());\n+    }\n+\n }"}]}