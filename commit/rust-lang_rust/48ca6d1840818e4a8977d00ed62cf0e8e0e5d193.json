{"sha": "48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Y2E2ZDE4NDA4MThlNGE4OTc3ZDAwZWQ2MmNmMGU4ZTBlNWQxOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T13:46:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T13:46:45Z"}, "message": "auto merge of #19174 : tomjakubowski/rust/rustdoc-assoc-types, r=alexcrichton\n\nRender associated types on traits and impls, and qualified paths in types.\r\n\r\nr? @alexcrichton", "tree": {"sha": "8a8c8e7f36d920d7d3b4dd9c769a5a1125eb0a33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a8c8e7f36d920d7d3b4dd9c769a5a1125eb0a33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "html_url": "https://github.com/rust-lang/rust/commit/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2264049577e1d64a2a863a9b9f2b7d94f6b90e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2264049577e1d64a2a863a9b9f2b7d94f6b90e15", "html_url": "https://github.com/rust-lang/rust/commit/2264049577e1d64a2a863a9b9f2b7d94f6b90e15"}, {"sha": "de94f0affb6e8f700ce1e9c67a9572c9f262a5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/de94f0affb6e8f700ce1e9c67a9572c9f262a5fa", "html_url": "https://github.com/rust-lang/rust/commit/de94f0affb6e8f700ce1e9c67a9572c9f262a5fa"}], "stats": {"total": 155, "additions": 115, "deletions": 40}, "files": [{"sha": "5985516a559f37a9c3e32660553555e89868fa78", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "patch": "@@ -336,7 +336,7 @@ pub enum ItemEnum {\n     ForeignStaticItem(Static),\n     MacroItem(Macro),\n     PrimitiveItem(PrimitiveType),\n-    AssociatedTypeItem,\n+    AssociatedTypeItem(TyParam),\n }\n \n #[deriving(Clone, Encodable, Decodable)]\n@@ -982,6 +982,8 @@ impl Clean<Type> for ast::PolyTraitRef {\n     }\n }\n \n+/// An item belonging to a trait, whether a method or associated. Could be named\n+/// TraitItem except that's already taken by an exported enum variant.\n #[deriving(Clone, Encodable, Decodable)]\n pub enum TraitMethod {\n     RequiredMethod(Item),\n@@ -1002,6 +1004,12 @@ impl TraitMethod {\n             _ => false,\n         }\n     }\n+    pub fn is_type(&self) -> bool {\n+        match self {\n+            &TypeTraitItem(..) => true,\n+            _ => false,\n+        }\n+    }\n     pub fn item<'a>(&'a self) -> &'a Item {\n         match *self {\n             RequiredMethod(ref item) => item,\n@@ -1127,6 +1135,11 @@ pub enum Type {\n         mutability: Mutability,\n         type_: Box<Type>,\n     },\n+    QPath {\n+        name: String,\n+        self_type: Box<Type>,\n+        trait_: Box<Type>\n+    },\n     // region, raw, other boxes, mutable\n }\n \n@@ -1252,6 +1265,7 @@ impl Clean<Type> for ast::Ty {\n             TyProc(ref c) => Proc(box c.clean(cx)),\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyParen(ref ty) => ty.clean(cx),\n+            TyQPath(ref qp) => qp.clean(cx),\n             ref x => panic!(\"Unimplemented type {}\", x),\n         }\n     }\n@@ -1354,6 +1368,16 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n     }\n }\n \n+impl Clean<Type> for ast::QPath {\n+    fn clean(&self, cx: &DocContext) -> Type {\n+        Type::QPath {\n+            name: self.item_name.clean(cx),\n+            self_type: box self.self_type.clean(cx),\n+            trait_: box self.trait_ref.clean(cx)\n+        }\n+    }\n+}\n+\n #[deriving(Clone, Encodable, Decodable)]\n pub enum StructField {\n     HiddenStructField, // inserted later by strip passes\n@@ -2211,7 +2235,7 @@ impl Clean<Item> for ast::AssociatedType {\n             source: self.ty_param.span.clean(cx),\n             name: Some(self.ty_param.ident.clean(cx)),\n             attrs: self.attrs.clean(cx),\n-            inner: AssociatedTypeItem,\n+            inner: AssociatedTypeItem(self.ty_param.clean(cx)),\n             visibility: None,\n             def_id: ast_util::local_def(self.ty_param.id),\n             stability: None,\n@@ -2225,7 +2249,17 @@ impl Clean<Item> for ty::AssociatedType {\n             source: DUMMY_SP.clean(cx),\n             name: Some(self.name.clean(cx)),\n             attrs: Vec::new(),\n-            inner: AssociatedTypeItem,\n+            // FIXME(#18048): this is wrong, but cross-crate associated types are broken\n+            // anyway, for the time being.\n+            inner: AssociatedTypeItem(TyParam {\n+                name: self.name.clean(cx),\n+                did: ast::DefId {\n+                    krate: 0,\n+                    node: ast::DUMMY_NODE_ID\n+                },\n+                bounds: vec![],\n+                default: None\n+            }),\n             visibility: None,\n             def_id: self.def_id,\n             stability: None,"}, {"sha": "43aef11ce5c2f3ddd211d4e5238c09f679166422", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "patch": "@@ -46,9 +46,8 @@ pub struct Stability<'a>(pub &'a Option<clean::Stability>);\n pub struct ConciseStability<'a>(pub &'a Option<clean::Stability>);\n /// Wrapper struct for emitting a where clause from Generics.\n pub struct WhereClause<'a>(pub &'a clean::Generics);\n-\n /// Wrapper struct for emitting type parameter bounds.\n-struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n+pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n \n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {\n@@ -486,6 +485,9 @@ impl fmt::Show for clean::Type {\n                     }\n                 }\n             }\n+            clean::QPath { ref name, ref self_type, ref trait_ } => {\n+                write!(f, \"&lt;{} as {}&gt;::{}\", self_type, trait_, name)\n+            }\n             clean::Unique(..) => {\n                 panic!(\"should have been cleaned\")\n             }"}, {"sha": "cb3ad9d063f3af352e15cf35cdb6af401ecd8132", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "patch": "@@ -95,7 +95,7 @@ pub fn shortty(item: &clean::Item) -> ItemType {\n         clean::ForeignStaticItem(..)   => ForeignStatic,\n         clean::MacroItem(..)           => Macro,\n         clean::PrimitiveItem(..)       => Primitive,\n-        clean::AssociatedTypeItem      => AssociatedType,\n+        clean::AssociatedTypeItem(..)  => AssociatedType,\n     }\n }\n "}, {"sha": "24b5904b6d3b0f9c99d1c1b57df6436259cfaa14", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 65, "deletions": 27, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "patch": "@@ -59,7 +59,7 @@ use clean;\n use doctree;\n use fold::DocFolder;\n use html::format::{VisSpace, Method, FnStyleSpace, MutableSpace, Stability};\n-use html::format::{ConciseStability, WhereClause};\n+use html::format::{ConciseStability, TyParamBounds, WhereClause};\n use html::highlight;\n use html::item_type::{ItemType, shortty};\n use html::item_type;\n@@ -1685,27 +1685,23 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                   t.generics,\n                   bounds,\n                   WhereClause(&t.generics)));\n-    let required = t.items.iter()\n-                          .filter(|m| {\n-                              match **m {\n-                                  clean::RequiredMethod(_) => true,\n-                                  _ => false,\n-                              }\n-                          })\n-                          .collect::<Vec<&clean::TraitMethod>>();\n-    let provided = t.items.iter()\n-                          .filter(|m| {\n-                              match **m {\n-                                  clean::ProvidedMethod(_) => true,\n-                                  _ => false,\n-                              }\n-                          })\n-                          .collect::<Vec<&clean::TraitMethod>>();\n+\n+    let types = t.items.iter().filter(|m| m.is_type()).collect::<Vec<_>>();\n+    let required = t.items.iter().filter(|m| m.is_req()).collect::<Vec<_>>();\n+    let provided = t.items.iter().filter(|m| m.is_def()).collect::<Vec<_>>();\n \n     if t.items.len() == 0 {\n         try!(write!(w, \"{{ }}\"));\n     } else {\n         try!(write!(w, \"{{\\n\"));\n+        for t in types.iter() {\n+            try!(write!(w, \"    \"));\n+            try!(render_method(w, t.item()));\n+            try!(write!(w, \";\\n\"));\n+        }\n+        if types.len() > 0 && required.len() > 0 {\n+            try!(w.write(\"\\n\".as_bytes()));\n+        }\n         for m in required.iter() {\n             try!(write!(w, \"    \"));\n             try!(render_method(w, m.item()));\n@@ -1738,6 +1734,17 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         Ok(())\n     }\n \n+    if types.len() > 0 {\n+        try!(write!(w, \"\n+            <h2 id='associated-types'>Associated Types</h2>\n+            <div class='methods'>\n+        \"));\n+        for t in types.iter() {\n+            try!(trait_item(w, *t));\n+        }\n+        try!(write!(w, \"</div>\"));\n+    }\n+\n     // Output the documentation for each function individually\n     if required.len() > 0 {\n         try!(write!(w, \"\n@@ -1792,7 +1799,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n }\n \n fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n-    fn fun(w: &mut fmt::Formatter, it: &clean::Item, fn_style: ast::FnStyle,\n+    fn method(w: &mut fmt::Formatter, it: &clean::Item, fn_style: ast::FnStyle,\n            g: &clean::Generics, selfty: &clean::SelfTy,\n            d: &clean::FnDecl) -> fmt::Result {\n         write!(w, \"{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n@@ -1807,14 +1814,28 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n                decl = Method(selfty, d),\n                where_clause = WhereClause(g))\n     }\n+    fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n+                  typ: &clean::TyParam) -> fmt::Result {\n+        try!(write!(w, \"type {}\", it.name.as_ref().unwrap()));\n+        if typ.bounds.len() > 0 {\n+            try!(write!(w, \": {}\", TyParamBounds(&*typ.bounds)))\n+        }\n+        if let Some(ref default) = typ.default {\n+            try!(write!(w, \" = {}\", default));\n+        }\n+        Ok(())\n+    }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            fun(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n         }\n         clean::MethodItem(ref m) => {\n-            fun(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n         }\n-        _ => unreachable!()\n+        clean::AssociatedTypeItem(ref typ) => {\n+            assoc_type(w, meth, typ)\n+        }\n+        _ => panic!(\"render_method called on non-method\")\n     }\n }\n \n@@ -2071,11 +2092,26 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n \n     fn doctraititem(w: &mut fmt::Formatter, item: &clean::Item, dox: bool)\n                     -> fmt::Result {\n-        try!(write!(w, \"<h4 id='method.{}' class='method'>{}<code>\",\n-                    *item.name.as_ref().unwrap(),\n-                    ConciseStability(&item.stability)));\n-        try!(render_method(w, item));\n-        try!(write!(w, \"</code></h4>\\n\"));\n+        match item.inner {\n+            clean::MethodItem(..) | clean::TyMethodItem(..) => {\n+                try!(write!(w, \"<h4 id='method.{}' class='{}'>{}<code>\",\n+                            *item.name.as_ref().unwrap(),\n+                            shortty(item),\n+                            ConciseStability(&item.stability)));\n+                try!(render_method(w, item));\n+                try!(write!(w, \"</code></h4>\\n\"));\n+            }\n+            clean::TypedefItem(ref tydef) => {\n+                let name = item.name.as_ref().unwrap();\n+                try!(write!(w, \"<h4 id='assoc_type.{}' class='{}'>{}<code>\",\n+                            *name,\n+                            shortty(item),\n+                            ConciseStability(&item.stability)));\n+                try!(write!(w, \"type {} = {}\", name, tydef.type_));\n+                try!(write!(w, \"</code></h4>\\n\"));\n+            }\n+            _ => panic!(\"can't make docs for trait item with name {}\", item.name)\n+        }\n         match item.doc_value() {\n             Some(s) if dox => {\n                 try!(write!(w, \"<div class='docblock'>{}</div>\", Markdown(s)));\n@@ -2085,7 +2121,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n         }\n     }\n \n-    try!(write!(w, \"<div class='impl-methods'>\"));\n+    try!(write!(w, \"<div class='impl-items'>\"));\n     for trait_item in i.impl_.items.iter() {\n         try!(doctraititem(w, trait_item, true));\n     }\n@@ -2107,6 +2143,8 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl) -> fmt::Result {\n \n     // If we've implemented a trait, then also emit documentation for all\n     // default methods which weren't overridden in the implementation block.\n+    // FIXME: this also needs to be done for associated types, whenever defaults\n+    // for them work.\n     match i.impl_.trait_ {\n         Some(clean::ResolvedPath { did, .. }) => {\n             try!({"}, {"sha": "dc62273364c20ebbc1507e7419eb60900a2b5abf", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "patch": "@@ -84,7 +84,7 @@ h2 {\n h3 {\n     font-size: 1.3em;\n }\n-h1, h2, h3:not(.impl):not(.method), h4:not(.method) {\n+h1, h2, h3:not(.impl):not(.method):not(.type), h4:not(.method):not(.type) {\n     color: black;\n     font-weight: 500;\n     margin: 20px 0 15px 0;\n@@ -94,15 +94,15 @@ h1.fqn {\n     border-bottom: 1px dashed #D5D5D5;\n     margin-top: 0;\n }\n-h2, h3:not(.impl):not(.method), h4:not(.method) {\n+h2, h3:not(.impl):not(.method):not(.type), h4:not(.method):not(.type) {\n     border-bottom: 1px solid #DDDDDD;\n }\n-h3.impl, h3.method, h4.method {\n+h3.impl, h3.method, h4.method, h3.type, h4.type {\n     font-weight: 600;\n     margin-top: 10px;\n     margin-bottom: 10px;\n }\n-h3.impl, h3.method {\n+h3.impl, h3.method, h3.type {\n     margin-top: 15px;\n }\n h1, h2, h3, h4, section.sidebar, a.source, .search-input, .content table :not(code)>a, .collapse-toggle {\n@@ -235,6 +235,7 @@ nav.sub {\n .content .highlighted.fn { background-color: #c6afb3; }\n .content .highlighted.method { background-color: #c6afb3; }\n .content .highlighted.tymethod { background-color: #c6afb3; }\n+.content .highlighted.type { background-color: #c6afb3; }\n .content .highlighted.ffi { background-color: #c6afb3; }\n \n .docblock.short.nowrap {\n@@ -307,7 +308,7 @@ nav.sub {\n }\n .content .methods .docblock { margin-left: 40px; }\n \n-.content .impl-methods .docblock { margin-left: 40px; }\n+.content .impl-items .docblock { margin-left: 40px; }\n \n nav {\n     border-bottom: 1px solid #e0e0e0;\n@@ -442,7 +443,7 @@ h1 .stability {\n     padding: 4px 10px;\n }\n \n-.impl-methods .stability, .methods .stability {\n+.impl-items .stability, .methods .stability {\n     margin-right: 20px;\n }\n "}, {"sha": "36e74d43e64176eefea200d1d6757421c5b4fa7e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ca6d1840818e4a8977d00ed62cf0e8e0e5d193/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=48ca6d1840818e4a8977d00ed62cf0e8e0e5d193", "patch": "@@ -16,7 +16,7 @@\n #![crate_type = \"rlib\"]\n \n #![allow(unknown_features)]\n-#![feature(globs, macro_rules, phase, slicing_syntax, tuple_indexing)]\n+#![feature(globs, if_let, macro_rules, phase, slicing_syntax, tuple_indexing)]\n \n extern crate arena;\n extern crate getopts;"}]}