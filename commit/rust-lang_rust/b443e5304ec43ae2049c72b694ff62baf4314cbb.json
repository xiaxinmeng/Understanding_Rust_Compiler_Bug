{"sha": "b443e5304ec43ae2049c72b694ff62baf4314cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDNlNTMwNGVjNDNhZTIwNDljNzJiNjk0ZmY2MmJhZjQzMTRjYmI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:29:20Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:58:03Z"}, "message": "Remove some unused methods, move some to types.rs", "tree": {"sha": "30a4648745c87468d435c30edf9dbe851a7830ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a4648745c87468d435c30edf9dbe851a7830ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b443e5304ec43ae2049c72b694ff62baf4314cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b443e5304ec43ae2049c72b694ff62baf4314cbb", "html_url": "https://github.com/rust-lang/rust/commit/b443e5304ec43ae2049c72b694ff62baf4314cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b443e5304ec43ae2049c72b694ff62baf4314cbb/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "738174671ae40092684d7a9a543f939e318051e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/738174671ae40092684d7a9a543f939e318051e5", "html_url": "https://github.com/rust-lang/rust/commit/738174671ae40092684d7a9a543f939e318051e5"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "2c70c4277bfc4ed82c84aedf0198843559945b9c", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b443e5304ec43ae2049c72b694ff62baf4314cbb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b443e5304ec43ae2049c72b694ff62baf4314cbb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b443e5304ec43ae2049c72b694ff62baf4314cbb", "patch": "@@ -99,15 +99,6 @@ where\n     Binders::empty(&Interner, value.shifted_in_from(DebruijnIndex::ONE))\n }\n \n-impl<T: TypeWalk> Binders<T> {\n-    /// Substitutes all variables.\n-    pub fn substitute(self, interner: &Interner, subst: &Substitution) -> T {\n-        let (value, binders) = self.into_value_and_skipped_binders();\n-        assert_eq!(subst.len(interner), binders.len(interner));\n-        value.subst_bound_vars(subst)\n-    }\n-}\n-\n pub fn make_only_type_binders<T>(num_vars: usize, value: T) -> Binders<T> {\n     Binders::new(\n         VariableKinds::from_iter(\n@@ -120,31 +111,11 @@ pub fn make_only_type_binders<T>(num_vars: usize, value: T) -> Binders<T> {\n }\n \n impl TraitRef {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n-        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n-    }\n-\n     pub fn hir_trait_id(&self) -> TraitId {\n         from_chalk_trait_id(self.trait_id)\n     }\n }\n \n-impl WhereClause {\n-    pub fn is_implemented(&self) -> bool {\n-        matches!(self, WhereClause::Implemented(_))\n-    }\n-\n-    pub fn trait_ref(&self, db: &dyn HirDatabase) -> Option<TraitRef> {\n-        match self {\n-            WhereClause::Implemented(tr) => Some(tr.clone()),\n-            WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(proj), .. }) => {\n-                Some(proj.trait_ref(db))\n-            }\n-            WhereClause::AliasEq(_) => None,\n-        }\n-    }\n-}\n-\n impl<T> Canonical<T> {\n     pub fn new(value: T, kinds: impl IntoIterator<Item = TyVariableKind>) -> Self {\n         let kinds = kinds.into_iter().map(|tk| {"}, {"sha": "4a626d5e719d4c85e90043dd02da69c59ddb3673", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b443e5304ec43ae2049c72b694ff62baf4314cbb/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b443e5304ec43ae2049c72b694ff62baf4314cbb/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=b443e5304ec43ae2049c72b694ff62baf4314cbb", "patch": "@@ -360,6 +360,15 @@ impl<T: Clone> Binders<&T> {\n     }\n }\n \n+impl<T: TypeWalk> Binders<T> {\n+    /// Substitutes all variables.\n+    pub fn substitute(self, interner: &Interner, subst: &Substitution) -> T {\n+        let (value, binders) = self.into_value_and_skipped_binders();\n+        assert_eq!(subst.len(interner), binders.len(interner));\n+        value.subst_bound_vars(subst)\n+    }\n+}\n+\n impl<T: std::fmt::Debug> std::fmt::Debug for Binders<T> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n         let Binders { ref binders, ref value } = *self;\n@@ -375,6 +384,12 @@ pub struct TraitRef {\n     pub substitution: Substitution,\n }\n \n+impl TraitRef {\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.at(interner, 0).assert_ty_ref(interner)\n+    }\n+}\n+\n /// Like `generics::WherePredicate`, but with resolved types: A condition on the\n /// parameters of a generic item.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}]}