{"sha": "1e34202e7432ca546bce3e591df2baf105267bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMzQyMDJlNzQzMmNhNTQ2YmNlM2U1OTFkZjJiYWYxMDUyNjdiY2U=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-05T18:32:49Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-05T18:32:49Z"}, "message": "Minor tutorial tweaks", "tree": {"sha": "5df8a7803e642297f891420783d052cc3fd8022c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df8a7803e642297f891420783d052cc3fd8022c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e34202e7432ca546bce3e591df2baf105267bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e34202e7432ca546bce3e591df2baf105267bce", "html_url": "https://github.com/rust-lang/rust/commit/1e34202e7432ca546bce3e591df2baf105267bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e34202e7432ca546bce3e591df2baf105267bce/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33334f3c435926422d88dcd5bfafd5e32b141111", "url": "https://api.github.com/repos/rust-lang/rust/commits/33334f3c435926422d88dcd5bfafd5e32b141111", "html_url": "https://github.com/rust-lang/rust/commit/33334f3c435926422d88dcd5bfafd5e32b141111"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "a6d2f153f0c40b8c76dc1fdc914147dc8d7384d5", "filename": "doc/tutorial.md", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1e34202e7432ca546bce3e591df2baf105267bce/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e34202e7432ca546bce3e591df2baf105267bce/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=1e34202e7432ca546bce3e591df2baf105267bce", "patch": "@@ -28,8 +28,8 @@ fn boring_old_factorial(n: int) -> int {\n ~~~~\n \n Several differences from C stand out. Types do not come before, but\n-after variable names (preceded by a colon). In local variables\n-(introduced with `let`), they are optional, and will be inferred when\n+after variable names (preceded by a colon). For local variables\n+(introduced with `let`), types are optional, and will be inferred when\n left off. Constructs like `while` and `if` do not require parentheses\n around the condition (though they allow them). Also, there's a\n tendency towards aggressive abbreviation in the keywords\u2014`fn` for\n@@ -123,17 +123,17 @@ The Rust compiler currently must be built from a [tarball][]. We hope\n to be distributing binary packages for various operating systems in\n the future.\n \n-***Note:*** The Rust compiler is slightly unusual in that it is written\n-in Rust and therefore must be built by a precompiled \"snapshot\" version\n-of itself (made in an earlier state of development). As such, source\n+The Rust compiler is slightly unusual in that it is written in Rust\n+and therefore must be built by a precompiled \"snapshot\" version of\n+itself (made in an earlier state of development). As such, source\n builds require that:\n \n   * You are connected to the internet, to fetch snapshots.\n   * You can at least execute snapshot binaries of one of the forms we\n     offer them in. Currently we build and test snapshots on:\n     * Windows (7, server 2008 r2) x86 only\n     * Linux (various distributions) x86 and x86-64\n-    * OSX 10.6 (\"Snow leopard\") or 10.7 (\"Lion\") x86 and x86-64\n+    * OSX 10.6 (\"Snow Leopard\") or 10.7 (\"Lion\") x86 and x86-64\n \n You may find other platforms work, but these are our \"tier 1\" supported\n build environments that are most likely to work. Further platforms will\n@@ -148,15 +148,15 @@ packages:\n   * gnu make 3.81 or later\n   * curl\n \n-Assuming you're on a relatively modern Linux system and have met the\n-prerequisites, something along these lines should work. Building from source on\n-Windows requires some extra steps: please see the\n-[getting started][wiki-get-started] page on the Rust wiki.\n+Assuming you're on a relatively modern *nix system and have met the\n+prerequisites, something along these lines should work. Building from\n+source on Windows requires some extra steps: please see the [getting\n+started][wiki-get-started] page on the Rust wiki.\n \n ~~~~ {.notrust}\n-$ wget http://dl.rust-lang.org/dist/rust-0.3.tar.gz\n-$ tar -xzf rust-0.3.tar.gz\n-$ cd rust-0.3\n+$ wget http://dl.rust-lang.org/dist/rust-0.2.tar.gz\n+$ tar -xzf rust-0.2.tar.gz\n+$ cd rust-0.2\n $ ./configure\n $ make && make install\n ~~~~\n@@ -174,8 +174,8 @@ When complete, `make install` will place the following programs into\n   * `rustdoc`, the API-documentation tool \n   * `cargo`, the Rust package manager\n \n-[wiki-get-started]: https://github.com/mozilla/rust/wiki/Doc-getting-started\n-[tarball]: http://dl.rust-lang.org/dist/rust-0.1.tar.gz\n+[wiki-get-started]: https://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust\n+[tarball]: http://dl.rust-lang.org/dist/rust-0.2.tar.gz\n \n ## Compiling your first program\n \n@@ -191,9 +191,9 @@ fn main(args: ~[str]) {\n If the Rust compiler was installed successfully, running `rustc\n hello.rs` will produce a binary called `hello` (or `hello.exe`).\n \n-If you modify the program to make it invalid (for example, change the\n-function to an unknown name), and then compile it, you'll see an error\n-message like this:\n+If you modify the program to make it invalid (for example, by changing\n+ `io::println` to some nonexistent function), and then compile it,\n+ you'll see an error message like this:\n \n ~~~~ {.notrust}\n hello.rs:2:4: 2:16 error: unresolved name: io::print_it\n@@ -321,7 +321,7 @@ Rust identifiers must start with an alphabetic character or an\n underscore, and after that may contain any alphanumeric character, and\n more underscores.\n \n-NOTE: The parser doesn't currently recognize non-ascii alphabetic\n+***Note:*** The parser doesn't currently recognize non-ascii alphabetic\n characters. This is a bug that will eventually be fixed.\n \n The double-colon (`::`) is used as a module separator, so\n@@ -1397,8 +1397,8 @@ let y = x; // Copy the pointer, increase refcount\n // When x and y go out of scope, refcount goes to 0, box is freed\n ~~~~\n \n-NOTE: We may in the future switch to garbage collection, rather than\n-reference counting, for shared boxes.\n+***Note:*** We may in the future switch to garbage collection, rather\n+than reference counting, for shared boxes.\n \n Shared boxes never cross task boundaries.\n \n@@ -1442,8 +1442,8 @@ Rust vectors are always heap-allocated and unique. A value of type\n `~[T]` is represented by a pointer to a section of heap memory\n containing any number of values of type `T`.\n \n-NOTE: This uniqueness is turning out to be quite awkward in practice,\n-and might change in the future.\n+***Note:*** This uniqueness is turning out to be quite awkward in\n+practice, and might change in the future.\n \n Vector literals are enclosed in square brackets. Dereferencing is done\n with square brackets (zero-based):\n@@ -1476,10 +1476,10 @@ logarithmically, so the above code generates about the same amount of\n copying and reallocation as `push` implementations in most other\n languages.\n \n-NOTE: Actually, current, growing a vector is *exactly* as inefficient\n-as it looks, since vector + has been moved to the libraries and rust's\n-operator overloading support is insufficient to allow this\n-optimization. Try using `vec::push`.\n+***Note:*** Actually, currently, growing a vector is *exactly* as\n+inefficient as it looks, since vector `+` has been moved to the\n+libraries and Rust's operator overloading support is insufficient to\n+allow this optimization. Try using `vec::push`.\n \n ## Strings\n \n@@ -1746,7 +1746,7 @@ fn plus1(&&x: int) -> int { x + 1 }\n vec::map(~[1, 2, 3], plus1);\n ~~~~\n \n-NOTE: This is inconvenient, and we are hoping to get rid of this\n+***Note:***: This is inconvenient, and we are hoping to get rid of this\n restriction in the future.\n \n # Modules and crates\n@@ -2022,7 +2022,7 @@ object-oriented languages tend to solve with methods and inheritance.\n For example, writing a function that can operate on multiple types of\n collections.\n \n-NOTE: This feature is very new, and will need a few extensions to be\n+***Note:***: This feature is very new, and will need a few extensions to be\n applicable to more advanced use cases.\n \n ## Declaration\n@@ -2463,7 +2463,7 @@ copying it by making use of [unique boxes](#unique-boxes), which allow\n the sending task to release ownership of a value, so that the\n receiving task can keep on using it.\n \n-NOTE: As Rust evolves, we expect the Task API to grow and change\n+***Note:***: As Rust evolves, we expect the task API to grow and change\n somewhat.  The tutorial documents the API as it exists today.\n \n ## Spawning a task"}]}