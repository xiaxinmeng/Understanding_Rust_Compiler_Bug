{"sha": "9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZDE3YjljYTdhMGZjZTMyYWJmNGM4NWVlMzhlZDE0YWVmZTM5Y2Y=", "commit": {"author": {"name": "DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-15T01:16:20Z"}, "committer": {"name": "DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-15T01:16:20Z"}, "message": "tidy up", "tree": {"sha": "df719216c2b0814ffe0ae124094a3a567e1cc887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df719216c2b0814ffe0ae124094a3a567e1cc887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf", "html_url": "https://github.com/rust-lang/rust/commit/9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc2d1f49906752585177e99b8bc285d796e4b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc2d1f49906752585177e99b8bc285d796e4b3e", "html_url": "https://github.com/rust-lang/rust/commit/fdc2d1f49906752585177e99b8bc285d796e4b3e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "4ac7dc4d89077ce20186d69f94b717493419db51", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=9ad17b9ca7a0fce32abf4c85ee38ed14aefe39cf", "patch": "@@ -329,25 +329,25 @@ impl<T> Arc<T> {\n     }\n \n     /// Constructs a new `Arc<T>` using a weak reference to itself. Attempting\n-  /// to upgrade the weak reference before this function returns will result\n-  /// in a `None` value. However, the weak reference may be cloned freely and\n-  /// stored for use at a later time.\n-  ///\n-  /// # Examples\n-  /// ```\n-  /// #![feature(arc_new_cyclic)]\n-  /// #![allow(dead_code)]\n-  ///\n-  /// use std::sync::{Arc, Weak};\n-  ///\n-  /// struct Foo {\n-  ///     me: Weak<Foo>,\n-  /// }\n-  ///\n-  /// let foo = Arc::new_cyclic(|me| Foo {\n-  ///     me: me.clone(),\n-  /// });\n-  /// ```\n+    /// to upgrade the weak reference before this function returns will result\n+    /// in a `None` value. However, the weak reference may be cloned freely and\n+    /// stored for use at a later time.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(arc_new_cyclic)]\n+    /// #![allow(dead_code)]\n+    ///\n+    /// use std::sync::{Arc, Weak};\n+    ///\n+    /// struct Foo {\n+    ///     me: Weak<Foo>,\n+    /// }\n+    ///\n+    /// let foo = Arc::new_cyclic(|me| Foo {\n+    ///     me: me.clone(),\n+    /// });\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"arc_new_cyclic\", issue = \"none\")]\n     pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Arc<T> {\n@@ -358,7 +358,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data: mem::MaybeUninit::<T>::uninit(),\n         })\n-            .into();\n+        .into();\n         let init_ptr: NonNull<ArcInner<T>> = uninit_ptr.cast();\n \n         let weak = Weak { ptr: init_ptr };\n@@ -1683,9 +1683,9 @@ impl<T: ?Sized> Weak<T> {\n             }\n \n             // Relaxed is fine for the failure case because we don't have any expectations about the new state.\n-                // Acquire is necessary for the success case to synchronise with `Arc::new_cyclic`, when the inner\n-                // value can be initialized after `Weak` references have already been created. In that case, we\n-                // expect to observe the fully initialized value.\n+            // Acquire is necessary for the success case to synchronise with `Arc::new_cyclic`, when the inner\n+            // value can be initialized after `Weak` references have already been created. In that case, we\n+            // expect to observe the fully initialized value.\n             match inner.strong.compare_exchange_weak(n, n + 1, Acquire, Relaxed) {\n                 Ok(_) => return Some(Arc::from_inner(self.ptr)), // null checked above\n                 Err(old) => n = old,"}]}