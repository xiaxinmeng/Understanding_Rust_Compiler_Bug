{"sha": "0df70d37fc60195a85eab7f650f221fe74d64a33", "node_id": "C_kwDOAAsO6NoAKDBkZjcwZDM3ZmM2MDE5NWE4NWVhYjdmNjUwZjIyMWZlNzRkNjRhMzM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-30T10:44:51Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-31T12:05:04Z"}, "message": "Minor refactoring", "tree": {"sha": "85964b5167f37d1101d6de28eaabd818a7438b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85964b5167f37d1101d6de28eaabd818a7438b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df70d37fc60195a85eab7f650f221fe74d64a33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPZA/YACgkQ4laYqTBY\nYXFQlg//cSW7Cg1QJiW+OJOqSqXEfZ4HI/TrU5DbpXSlVRd6JBS0guBr1HR40y1A\ngBJ6VpZ1zo/bkLJSlUMP9KFyOICRhKyisf4sxY8SsoZN+384s9xMqnxWnjtXHhjZ\noUxNRkDvXyfyglcbveKAeR+Lpm3wjcDh88SA4G4bg0VNutMDpOFIR1M6x2l4hWz3\nH1yoQpJM9Eiy7Gc8O30BXoVcdGGvAyUALoP23aIhcGunKAe+hY8BIhu7LqYiXPFU\nBiXWzGIfjscKqUcM8dp7M6UJnGKVcEbHGbhqDs7nPygOah9zztf7mJPKrFUdUxzu\nGnHdCwkAxSiHS4NY3+/ayqTaRZNrOAgUmrMB9p1fXfoaUjfPp8kYlDxUsXL2q/50\nbyDDnEozIQuHhc3l8/Rv8OzG/HfPmQbVZl9T85Ggw/cxIVrr6CyaS9V/A4P7auD/\nU1sefcteVPw38+XXOKgFjijpRc9yfHBHsxqAnIjTjD3VSXd2OE2+S68ioiE0NT80\nbD+ikGPMQ6TDz+rhEXKJpJDWQiREsbmOjW6RPtg+otj/dpT4tDy+K/gKZxcg8fCz\nBPCtbLTjN1pClBbdyrALmJqoUG8YNyldvt3zLsE8LTT4widxlIev2adOePCN5V9d\n1dHa1yKNcGhaVKqsLPPLvI4A5HnEkPAZ/gVUISgF7a7MAGOjzhw=\n=m6nd\n-----END PGP SIGNATURE-----", "payload": "tree 85964b5167f37d1101d6de28eaabd818a7438b4a\nparent b75803ad31772d105d86f8ebee0cbc8844a4fa29\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1675075491 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1675166704 +0900\n\nMinor refactoring\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df70d37fc60195a85eab7f650f221fe74d64a33", "html_url": "https://github.com/rust-lang/rust/commit/0df70d37fc60195a85eab7f650f221fe74d64a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df70d37fc60195a85eab7f650f221fe74d64a33/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75803ad31772d105d86f8ebee0cbc8844a4fa29", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75803ad31772d105d86f8ebee0cbc8844a4fa29", "html_url": "https://github.com/rust-lang/rust/commit/b75803ad31772d105d86f8ebee0cbc8844a4fa29"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "fc6a398ed3277799807a92a97324c8ef7d7477fa", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0df70d37fc60195a85eab7f650f221fe74d64a33/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df70d37fc60195a85eab7f650f221fe74d64a33/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0df70d37fc60195a85eab7f650f221fe74d64a33", "patch": "@@ -3139,15 +3139,15 @@ impl Type {\n     }\n \n     pub fn is_closure(&self) -> bool {\n-        matches!(&self.ty.kind(Interner), TyKind::Closure { .. })\n+        matches!(self.ty.kind(Interner), TyKind::Closure { .. })\n     }\n \n     pub fn is_fn(&self) -> bool {\n-        matches!(&self.ty.kind(Interner), TyKind::FnDef(..) | TyKind::Function { .. })\n+        matches!(self.ty.kind(Interner), TyKind::FnDef(..) | TyKind::Function { .. })\n     }\n \n     pub fn is_array(&self) -> bool {\n-        matches!(&self.ty.kind(Interner), TyKind::Array(..))\n+        matches!(self.ty.kind(Interner), TyKind::Array(..))\n     }\n \n     pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n@@ -3164,7 +3164,7 @@ impl Type {\n     }\n \n     pub fn is_raw_ptr(&self) -> bool {\n-        matches!(&self.ty.kind(Interner), TyKind::Raw(..))\n+        matches!(self.ty.kind(Interner), TyKind::Raw(..))\n     }\n \n     pub fn contains_unknown(&self) -> bool {"}, {"sha": "486b7ee62ed3ad0383872e7da8184ecb141f5235", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0df70d37fc60195a85eab7f650f221fe74d64a33/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df70d37fc60195a85eab7f650f221fe74d64a33/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=0df70d37fc60195a85eab7f650f221fe74d64a33", "patch": "@@ -1319,10 +1319,7 @@ impl<'db> SemanticsImpl<'db> {\n         let _p = profile::span(\"Semantics::analyze_impl\");\n         let node = self.find_file(node);\n \n-        let container = match self.with_ctx(|ctx| ctx.find_container(node)) {\n-            Some(it) => it,\n-            None => return None,\n-        };\n+        let container = self.with_ctx(|ctx| ctx.find_container(node))?;\n \n         let resolver = match container {\n             ChildContainer::DefWithBodyId(def) => {\n@@ -1582,7 +1579,7 @@ fn find_root(node: &SyntaxNode) -> SyntaxNode {\n     node.ancestors().last().unwrap()\n }\n \n-/// `SemanticScope` encapsulates the notion of a scope (the set of visible\n+/// `SemanticsScope` encapsulates the notion of a scope (the set of visible\n /// names) at a particular program point.\n ///\n /// It is a bit tricky, as scopes do not really exist inside the compiler."}, {"sha": "b7c8df5867fc006e909ee4ff1e0afeb919035717", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0df70d37fc60195a85eab7f650f221fe74d64a33/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df70d37fc60195a85eab7f650f221fe74d64a33/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=0df70d37fc60195a85eab7f650f221fe74d64a33", "patch": "@@ -16,8 +16,7 @@ use syntax::{\n };\n \n use crate::{\n-    utils::convert_reference_type,\n-    utils::{find_struct_impl, render_snippet, Cursor},\n+    utils::{convert_reference_type, find_struct_impl, render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -107,7 +106,7 @@ fn fn_target_info(\n     match path.qualifier() {\n         Some(qualifier) => match ctx.sema.resolve_path(&qualifier) {\n             Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) => {\n-                get_fn_target_info(ctx, &Some(module), call.clone())\n+                get_fn_target_info(ctx, Some(module), call.clone())\n             }\n             Some(hir::PathResolution::Def(hir::ModuleDef::Adt(adt))) => {\n                 if let hir::Adt::Enum(_) = adt {\n@@ -125,7 +124,7 @@ fn fn_target_info(\n             }\n             _ => None,\n         },\n-        _ => get_fn_target_info(ctx, &None, call.clone()),\n+        _ => get_fn_target_info(ctx, None, call.clone()),\n     }\n }\n \n@@ -396,16 +395,16 @@ fn make_return_type(\n \n fn get_fn_target_info(\n     ctx: &AssistContext<'_>,\n-    target_module: &Option<Module>,\n+    target_module: Option<Module>,\n     call: CallExpr,\n ) -> Option<TargetInfo> {\n     let (target, file, insert_offset) = get_fn_target(ctx, target_module, call)?;\n-    Some(TargetInfo::new(*target_module, None, target, file, insert_offset))\n+    Some(TargetInfo::new(target_module, None, target, file, insert_offset))\n }\n \n fn get_fn_target(\n     ctx: &AssistContext<'_>,\n-    target_module: &Option<Module>,\n+    target_module: Option<Module>,\n     call: CallExpr,\n ) -> Option<(GeneratedFunctionTarget, FileId, TextSize)> {\n     let mut file = ctx.file_id();\n@@ -640,10 +639,11 @@ fn next_space_for_fn_in_module(\n }\n \n fn next_space_for_fn_in_impl(impl_: &ast::Impl) -> Option<GeneratedFunctionTarget> {\n-    if let Some(last_item) = impl_.assoc_item_list().and_then(|it| it.assoc_items().last()) {\n+    let assoc_item_list = impl_.assoc_item_list()?;\n+    if let Some(last_item) = assoc_item_list.assoc_items().last() {\n         Some(GeneratedFunctionTarget::BehindItem(last_item.syntax().clone()))\n     } else {\n-        Some(GeneratedFunctionTarget::InEmptyItemList(impl_.assoc_item_list()?.syntax().clone()))\n+        Some(GeneratedFunctionTarget::InEmptyItemList(assoc_item_list.syntax().clone()))\n     }\n }\n "}]}