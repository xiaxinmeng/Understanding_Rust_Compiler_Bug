{"sha": "9c34481c495df19d10a91e7991c254c7b4d1cae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzQ0ODFjNDk1ZGYxOWQxMGE5MWU3OTkxYzI1NGM3YjRkMWNhZTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-22T14:58:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T14:58:19Z"}, "message": "Rollup merge of #71829 - kper:issue71136, r=matthewjasper\n\nFix suggestion to borrow in struct\n\nThe corresponding issue is #71136.\nThe compiler suggests that borrowing `the_foos` might solve the problem. This is obviously incorrect.\n```\nstruct Foo(u8);\n\n#[derive(Clone)]\nstruct FooHolster {\n    the_foos: Vec<Foo>,\n}\n```\n\nI propose as fix to check if there is any colon in the span. However, there might a case where `my_method(B { a: 1, b : foo })` would be appropriate to show a suggestion for `&B ...`.  To fix that too, we can simply check if there is a bracket in the span. This is only possible because both spans are different.\nIssue's span: `the_foos: Vec<Foo>`\nother's span: `B { a : 1, b : foo }`", "tree": {"sha": "cd23970e94da59bcaac0e63da404cd9816d01450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd23970e94da59bcaac0e63da404cd9816d01450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c34481c495df19d10a91e7991c254c7b4d1cae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex+iNCRBK7hj4Ov3rIwAAdHIIAFdClNf7tEJCTHiqbfjiSVoq\n/SO8Oag2ABJbv9jRB7zKBy5hLXo9UX/d9q8yWuPDro2zVfSbiYYj0/PFGRdB3Qdu\no9b8CSRW8ZyT3imgpjvWVpz4PLWHXQewP+dEzoCc1EeiVQLLGozS8YjeOH3vldhU\nYKhTw612+ns8PY+yzzkzP8xLZKtEUPul5CNBpWEECTHgD1Bz93XfT7pEiiIzewNE\n0jRFsUKxj6dPjzbgjpCJ2IP60t42PNEe8Qc34WIb+3IFiUgZmABkpCq8nJSM8+fT\n6insXzFilsD1xZnhbBcUKQMuuC1uHuifZN+KNe+JRzkxgxWdQQk11TMgJZNvMVM=\n=5cai\n-----END PGP SIGNATURE-----\n", "payload": "tree cd23970e94da59bcaac0e63da404cd9816d01450\nparent a9ca1ec9280ca1e5020edd699917c3367a30a798\nparent e776121431dc73b6e1782d5ddcc4e8d6d714f8e4\nauthor Ralf Jung <post@ralfj.de> 1590159499 +0200\ncommitter GitHub <noreply@github.com> 1590159499 +0200\n\nRollup merge of #71829 - kper:issue71136, r=matthewjasper\n\nFix suggestion to borrow in struct\n\nThe corresponding issue is #71136.\nThe compiler suggests that borrowing `the_foos` might solve the problem. This is obviously incorrect.\n```\nstruct Foo(u8);\n\n#[derive(Clone)]\nstruct FooHolster {\n    the_foos: Vec<Foo>,\n}\n```\n\nI propose as fix to check if there is any colon in the span. However, there might a case where `my_method(B { a: 1, b : foo })` would be appropriate to show a suggestion for `&B ...`.  To fix that too, we can simply check if there is a bracket in the span. This is only possible because both spans are different.\nIssue's span: `the_foos: Vec<Foo>`\nother's span: `B { a : 1, b : foo }`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c34481c495df19d10a91e7991c254c7b4d1cae3", "html_url": "https://github.com/rust-lang/rust/commit/9c34481c495df19d10a91e7991c254c7b4d1cae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c34481c495df19d10a91e7991c254c7b4d1cae3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ca1ec9280ca1e5020edd699917c3367a30a798", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ca1ec9280ca1e5020edd699917c3367a30a798", "html_url": "https://github.com/rust-lang/rust/commit/a9ca1ec9280ca1e5020edd699917c3367a30a798"}, {"sha": "e776121431dc73b6e1782d5ddcc4e8d6d714f8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e776121431dc73b6e1782d5ddcc4e8d6d714f8e4", "html_url": "https://github.com/rust-lang/rust/commit/e776121431dc73b6e1782d5ddcc4e8d6d714f8e4"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "0760bd523b7c33134b91a114b8d2e9cae0dcc271", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9c34481c495df19d10a91e7991c254c7b4d1cae3/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c34481c495df19d10a91e7991c254c7b4d1cae3/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9c34481c495df19d10a91e7991c254c7b4d1cae3", "patch": "@@ -631,13 +631,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 param_env,\n                 new_trait_ref.without_const().to_predicate(self.tcx),\n             );\n+\n             if self.predicate_must_hold_modulo_regions(&new_obligation) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     // We have a very specific type of error, where just borrowing this argument\n                     // might solve the problem. In cases like this, the important part is the\n                     // original type obligation, not the last one that failed, which is arbitrary.\n                     // Because of this, we modify the error to refer to the original obligation and\n                     // return early in the caller.\n+\n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n                         found,\n@@ -660,12 +662,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n                         ),\n                     );\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider borrowing here\",\n-                        format!(\"&{}\", snippet),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+\n+                    // This if is to prevent a special edge-case\n+                    if !span.from_expansion() {\n+                        // We don't want a borrowing suggestion on the fields in structs,\n+                        // ```\n+                        // struct Foo {\n+                        //  the_foos: Vec<Foo>\n+                        // }\n+                        // ```\n+\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider borrowing here\",\n+                            format!(\"&{}\", snippet),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                     return true;\n                 }\n             }"}, {"sha": "b21756e2b637fa2a6e279a131d4b989b6ed3cceb", "filename": "src/test/ui/traits/traits-issue-71136.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c34481c495df19d10a91e7991c254c7b4d1cae3/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c34481c495df19d10a91e7991c254c7b4d1cae3/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.rs?ref=9c34481c495df19d10a91e7991c254c7b4d1cae3", "patch": "@@ -0,0 +1,8 @@\n+struct Foo(u8);\n+\n+#[derive(Clone)]\n+struct FooHolster {\n+    the_foos: Vec<Foo>, //~ERROR Clone\n+}\n+\n+fn main() {}"}, {"sha": "4c0a43062f60d0f9c42b5c758706619f6f4375af", "filename": "src/test/ui/traits/traits-issue-71136.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c34481c495df19d10a91e7991c254c7b4d1cae3/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c34481c495df19d10a91e7991c254c7b4d1cae3/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-issue-71136.stderr?ref=9c34481c495df19d10a91e7991c254c7b4d1cae3", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `Foo: std::clone::Clone` is not satisfied\n+  --> $DIR/traits-issue-71136.rs:5:5\n+   |\n+LL |     the_foos: Vec<Foo>,\n+   |     ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `std::clone::Clone`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<Foo>`\n+   = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}