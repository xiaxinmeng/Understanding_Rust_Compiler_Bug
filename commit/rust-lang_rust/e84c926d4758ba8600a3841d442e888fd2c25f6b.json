{"sha": "e84c926d4758ba8600a3841d442e888fd2c25f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NGM5MjZkNDc1OGJhODYwMGEzODQxZDQ0MmU4ODhmZDJjMjVmNmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-24T15:12:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:59:57Z"}, "message": "rustc: Move some queries to `rustc_metadata`", "tree": {"sha": "7ba1df421f5a22eb6c378ffb9bb603b8b00e42a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ba1df421f5a22eb6c378ffb9bb603b8b00e42a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e84c926d4758ba8600a3841d442e888fd2c25f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e84c926d4758ba8600a3841d442e888fd2c25f6b", "html_url": "https://github.com/rust-lang/rust/commit/e84c926d4758ba8600a3841d442e888fd2c25f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e84c926d4758ba8600a3841d442e888fd2c25f6b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0b329a1868e634109562df97377ca064bbda5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b329a1868e634109562df97377ca064bbda5f1", "html_url": "https://github.com/rust-lang/rust/commit/e0b329a1868e634109562df97377ca064bbda5f1"}], "stats": {"total": 70, "additions": 24, "deletions": 46}, "files": [{"sha": "44c6f6b07f56cc7eecd54c273767ca3dab0a900e", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e84c926d4758ba8600a3841d442e888fd2c25f6b", "patch": "@@ -211,7 +211,7 @@ pub type MetadataLoaderDyn = dyn MetadataLoader + Sync;\n /// (it'd break incremental compilation) and should only be called pre-HIR (e.g.\n /// during resolve)\n pub trait CrateStore {\n-    fn crate_data_as_any(&self, cnum: CrateNum) -> &dyn Any;\n+    fn as_any(&self) -> &dyn Any;\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n@@ -224,9 +224,7 @@ pub trait CrateStore {\n     fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n-    fn crate_host_hash_untracked(&self, cnum: CrateNum) -> Option<Svh>;\n     fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics;\n-    fn postorder_cnums_untracked(&self) -> Vec<CrateNum>;\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n@@ -235,9 +233,7 @@ pub trait CrateStore {\n     // utility functions\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n-    fn injected_panic_runtime(&self) -> Option<CrateNum>;\n     fn allocator_kind(&self) -> Option<AllocatorKind>;\n-    fn has_global_allocator(&self) -> bool;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "5a7078cdb261239b0c05129a8ba0645cc4d115de", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e84c926d4758ba8600a3841d442e888fd2c25f6b", "patch": "@@ -1307,10 +1307,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.all_crate_nums(LOCAL_CRATE)\n     }\n \n-    pub fn injected_panic_runtime(self) -> Option<CrateNum> {\n-        self.cstore.injected_panic_runtime()\n-    }\n-\n     pub fn allocator_kind(self) -> Option<AllocatorKind> {\n         self.cstore.allocator_kind()\n     }\n@@ -1391,8 +1387,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     // Note that this is *untracked* and should only be used within the query\n     // system if the result is otherwise tracked through queries\n-    pub fn crate_data_as_any(self, cnum: CrateNum) -> &'tcx dyn Any {\n-        self.cstore.crate_data_as_any(cnum)\n+    pub fn cstore_as_any(self) -> &'tcx dyn Any {\n+        self.cstore.as_any()\n     }\n \n     #[inline(always)]\n@@ -2999,14 +2995,6 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.arena.alloc_slice(&tcx.cstore.crates_untracked())\n     };\n-    providers.crate_host_hash = |tcx, cnum| {\n-        assert_ne!(cnum, LOCAL_CRATE);\n-        tcx.cstore.crate_host_hash_untracked(cnum)\n-    };\n-    providers.postorder_cnums = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.arena.alloc_slice(&tcx.cstore.postorder_cnums_untracked())\n-    };\n     providers.output_filenames = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.output_filenames.clone()\n@@ -3028,8 +3016,4 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n-    providers.has_global_allocator = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.cstore.has_global_allocator()\n-    };\n }"}, {"sha": "dbf2dcf1c0aea461d6be050c33deaf806f453dc5", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e84c926d4758ba8600a3841d442e888fd2c25f6b", "patch": "@@ -15,6 +15,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n use rustc::hir::map::Definitions;\n use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::ty::TyCtxt;\n \n use std::path::Path;\n use std::{cmp, fs};\n@@ -94,6 +95,10 @@ fn dump_crates(cstore: &CStore) {\n }\n \n impl CStore {\n+    crate fn from_tcx(tcx: TyCtxt<'_>) -> &CStore {\n+        tcx.cstore_as_any().downcast_ref::<CStore>().expect(\"`tcx.cstore` is not a `CStore`\")\n+    }\n+\n     fn alloc_new_crate_num(&mut self) -> CrateNum {\n         self.metas.push(None);\n         CrateNum::new(self.metas.len() - 1)"}, {"sha": "d6d722c47b3a7e39f56b9eb87765c7fefd64c769", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=e84c926d4758ba8600a3841d442e888fd2c25f6b", "patch": "@@ -51,6 +51,8 @@\n //! Additionally, the algorithm is geared towards finding *any* solution rather\n //! than finding a number of solutions (there are normally quite a few).\n \n+use crate::creader::CStore;\n+\n use rustc::hir::def_id::CrateNum;\n use rustc::middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n use rustc::middle::cstore::{self, DepKind};\n@@ -184,7 +186,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n     //\n     // Things like allocators and panic runtimes may not have been activated\n     // quite yet, so do so here.\n-    activate_injected_dep(tcx.injected_panic_runtime(), &mut ret,\n+    activate_injected_dep(CStore::from_tcx(tcx).injected_panic_runtime(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n \n     // When dylib B links to dylib A, then when using B we must also link to A.\n@@ -263,7 +265,7 @@ fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     // Our allocator/panic runtime may not have been linked above if it wasn't\n     // explicitly linked, which is the case for any injected dependency. Handle\n     // that here and activate them.\n-    activate_injected_dep(tcx.injected_panic_runtime(), &mut ret,\n+    activate_injected_dep(CStore::from_tcx(tcx).injected_panic_runtime(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n \n     Some(ret)"}, {"sha": "8214153f153f1ac27378b29461ce0281e00ad9d5", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84c926d4758ba8600a3841d442e888fd2c25f6b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e84c926d4758ba8600a3841d442e888fd2c25f6b", "patch": "@@ -51,9 +51,7 @@ macro_rules! provide {\n                 let ($def_id, $other) = def_id_arg.into_args();\n                 assert!(!$def_id.is_local());\n \n-                let $cdata = $tcx.crate_data_as_any($def_id.krate);\n-                let $cdata = $cdata.downcast_ref::<rmeta::CrateMetadata>()\n-                    .expect(\"CrateStore created data is not a CrateMetadata\");\n+                let $cdata = CStore::from_tcx($tcx).get_crate_data($def_id.krate);\n \n                 if $tcx.dep_graph.is_fully_enabled() {\n                     let crate_dep_node_index = $cdata.get_crate_dep_node_index($tcx);\n@@ -192,6 +190,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     crate_disambiguator => { cdata.root.disambiguator }\n     crate_hash => { cdata.root.hash }\n+    crate_host_hash => { cdata.host_hash }\n     original_crate_name => { cdata.root.name }\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n@@ -377,6 +376,14 @@ pub fn provide(providers: &mut Providers<'_>) {\n             assert_eq!(cnum, LOCAL_CRATE);\n             Lrc::new(crate::dependency_format::calculate(tcx))\n         },\n+        has_global_allocator: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+            CStore::from_tcx(tcx).has_global_allocator()\n+        },\n+        postorder_cnums: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+            tcx.arena.alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(cnum))\n+        },\n \n         ..*providers\n     };\n@@ -459,8 +466,8 @@ impl CStore {\n }\n \n impl CrateStore for CStore {\n-    fn crate_data_as_any(&self, cnum: CrateNum) -> &dyn Any {\n-        self.get_crate_data(cnum)\n+    fn as_any(&self) -> &dyn Any {\n+        self\n     }\n \n     fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics {\n@@ -486,10 +493,6 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).root.hash\n     }\n \n-    fn crate_host_hash_untracked(&self, cnum: CrateNum) -> Option<Svh> {\n-        self.get_crate_data(cnum).host_hash\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to.\n@@ -516,10 +519,6 @@ impl CrateStore for CStore {\n         result\n     }\n \n-    fn postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n-        self.crate_dependencies_in_postorder(LOCAL_CRATE)\n-    }\n-\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n         encoder::encode_metadata(tcx)\n     }\n@@ -529,15 +528,7 @@ impl CrateStore for CStore {\n         rmeta::METADATA_HEADER\n     }\n \n-    fn injected_panic_runtime(&self) -> Option<CrateNum> {\n-        self.injected_panic_runtime()\n-    }\n-\n     fn allocator_kind(&self) -> Option<AllocatorKind> {\n         self.allocator_kind()\n     }\n-\n-    fn has_global_allocator(&self) -> bool {\n-        self.has_global_allocator()\n-    }\n }"}]}