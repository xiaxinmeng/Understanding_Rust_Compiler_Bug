{"sha": "cc4fabcb4361d0daada096f5e6ac19eb6ed21d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGZhYmNiNDM2MWQwZGFhZGEwOTZmNWU2YWMxOWViNmVkMjFkMzM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-24T00:58:30Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-24T00:58:30Z"}, "message": "Fix some std/extra language in the tutorial", "tree": {"sha": "aba02724b023cd26fb2ce61348cef9910ae8b8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba02724b023cd26fb2ce61348cef9910ae8b8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4fabcb4361d0daada096f5e6ac19eb6ed21d33", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4fabcb4361d0daada096f5e6ac19eb6ed21d33", "html_url": "https://github.com/rust-lang/rust/commit/cc4fabcb4361d0daada096f5e6ac19eb6ed21d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4fabcb4361d0daada096f5e6ac19eb6ed21d33/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c3cf02f056e66d492a5a324e047ae1fec0c7d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c3cf02f056e66d492a5a324e047ae1fec0c7d8", "html_url": "https://github.com/rust-lang/rust/commit/21c3cf02f056e66d492a5a324e047ae1fec0c7d8"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "91a41cb9b85aefc5bb2532408766c51d29568d4b", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc4fabcb4361d0daada096f5e6ac19eb6ed21d33/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc4fabcb4361d0daada096f5e6ac19eb6ed21d33/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=cc4fabcb4361d0daada096f5e6ac19eb6ed21d33", "patch": "@@ -1480,7 +1480,6 @@ This code creates a closure that adds a given string to its argument,\n returns it from a function, and then calls it:\n \n ~~~~\n-# extern mod std;\n fn mk_appender(suffix: ~str) -> @fn(~str) -> ~str {\n     // The compiler knows that we intend this closure to be of type @fn\n     return |s| s + suffix;\n@@ -2292,7 +2291,7 @@ let nonsense = mycircle.radius() * mycircle.area();\n \n ## Deriving implementations for traits\n \n-A small number of traits in `std` and `std` can have implementations\n+A small number of traits in `std` and `extra` can have implementations\n that can be automatically derived. These instances are specified by\n placing the `deriving` attribute on a data type declaration. For\n example, the following will mean that `Circle` has an implementation\n@@ -2541,9 +2540,9 @@ as well as an inscrutable string of alphanumerics. These are both\n part of Rust's library versioning scheme. The alphanumerics are\n a hash representing the crate metadata.\n \n-## The std library\n+## The standard library\n \n-The Rust std library provides runtime features required by the language,\n+The Rust standard library provides runtime features required by the language,\n including the task scheduler and memory allocators, as well as library\n support for Rust built-in types, platform abstractions, and other commonly\n used features.\n@@ -2559,7 +2558,7 @@ I/O abstractions ([`io`]), [containers] like [`hashmap`],\n common traits ([`kinds`], [`ops`], [`cmp`], [`num`],\n [`to_str`], [`clone`]), and complete bindings to the C standard library ([`libc`]).\n \n-### Core injection and the Rust prelude\n+### Standard Library injection and the Rust prelude\n \n `std` is imported at the topmost level of every crate by default, as\n if the first line of each crate was\n@@ -2571,7 +2570,7 @@ with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n etc.\n \n Additionally, `std` contains a `prelude` module that reexports many of the\n-most common std modules, types and traits. The contents of the prelude are\n+most common standard modules, types and traits. The contents of the prelude are\n imported into every *module* by default.  Implicitly, all modules behave as if\n they contained the following prologue:\n "}]}