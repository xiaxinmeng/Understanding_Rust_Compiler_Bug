{"sha": "ef70076f1da391be8697aaf3c534e4e770561429", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzAwNzZmMWRhMzkxYmU4Njk3YWFmM2M1MzRlNGU3NzA1NjE0Mjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-13T11:47:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-13T11:47:30Z"}, "message": "Cleanup", "tree": {"sha": "4e849f1476f944daf91a9b86b2c09e0204c06e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e849f1476f944daf91a9b86b2c09e0204c06e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef70076f1da391be8697aaf3c534e4e770561429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef70076f1da391be8697aaf3c534e4e770561429", "html_url": "https://github.com/rust-lang/rust/commit/ef70076f1da391be8697aaf3c534e4e770561429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef70076f1da391be8697aaf3c534e4e770561429/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d583e3495461d70250dbe48727a707e1f5f9ec2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d583e3495461d70250dbe48727a707e1f5f9ec2d", "html_url": "https://github.com/rust-lang/rust/commit/d583e3495461d70250dbe48727a707e1f5f9ec2d"}], "stats": {"total": 409, "additions": 154, "deletions": 255}, "files": [{"sha": "0ab330b73a7a225806a0d201a5475f94949223c2", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 99, "deletions": 170, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=ef70076f1da391be8697aaf3c534e4e770561429", "patch": "@@ -36,184 +36,98 @@ pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n     }\n }\n \n-fn keyword(ctx: &CompletionContext, kw: &str, snippet: &str) -> CompletionItem {\n-    let res = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n-        .kind(CompletionItemKind::Keyword);\n-\n-    match ctx.config.snippet_cap {\n-        Some(cap) => res.insert_snippet(cap, snippet),\n-        _ => res.insert_text(if snippet.contains('$') { kw } else { snippet }),\n-    }\n-    .build()\n-}\n-\n-fn add_keyword(\n-    ctx: &CompletionContext,\n-    acc: &mut Completions,\n-    kw: &str,\n-    snippet: &str,\n-    should_add: bool,\n-) {\n-    if should_add {\n-        acc.add(keyword(ctx, kw, snippet));\n-    }\n-}\n-\n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     let has_trait_or_impl_parent = ctx.has_impl_parent || ctx.has_trait_parent;\n     if ctx.trait_as_prev_sibling || ctx.impl_as_prev_sibling {\n-        add_keyword(ctx, acc, \"where\", \"where \", true);\n+        add_keyword(ctx, acc, \"where\", \"where \");\n         return;\n     }\n     if ctx.unsafe_is_prev {\n-        add_keyword(\n-            ctx,\n-            acc,\n-            \"fn\",\n-            \"fn $0() {}\",\n-            ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n-        );\n-        add_keyword(\n-            ctx,\n-            acc,\n-            \"trait\",\n-            \"trait $0 {}\",\n-            (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-                || ctx.block_expr_parent,\n-        );\n-        add_keyword(\n-            ctx,\n-            acc,\n-            \"impl\",\n-            \"impl $0 {}\",\n-            (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-                || ctx.block_expr_parent,\n-        );\n+        if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n+            add_keyword(ctx, acc, \"fn\", \"fn $0() {}\")\n+        }\n+\n+        if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+            || ctx.block_expr_parent\n+        {\n+            add_keyword(ctx, acc, \"trait\", \"trait $0 {}\");\n+            add_keyword(ctx, acc, \"impl\", \"impl $0 {}\");\n+        }\n+\n         return;\n     }\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"fn\",\n-        \"fn $0() {}\",\n-        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"use\",\n-        \"use \",\n-        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"impl\",\n-        \"impl $0 {}\",\n-        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"trait\",\n-        \"trait $0 {}\",\n-        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"enum\",\n-        \"enum $0 {}\",\n-        ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"struct\",\n-        \"struct $0 {}\",\n-        ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"union\",\n-        \"union $0 {}\",\n-        ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent,\n-    );\n-    add_keyword(ctx, acc, \"match\", \"match $0 {}\", ctx.block_expr_parent || ctx.is_match_arm);\n-    add_keyword(ctx, acc, \"loop\", \"loop {$0}\", ctx.block_expr_parent || ctx.is_match_arm);\n-    add_keyword(ctx, acc, \"while\", \"while $0 {}\", ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"let\", \"let \", ctx.if_is_prev || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"if\", \"if \", ctx.if_is_prev || ctx.block_expr_parent || ctx.is_match_arm);\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"if let\",\n-        \"if let \",\n-        ctx.if_is_prev || ctx.block_expr_parent || ctx.is_match_arm,\n-    );\n-    add_keyword(ctx, acc, \"else\", \"else {$0}\", ctx.after_if);\n-    add_keyword(ctx, acc, \"else if\", \"else if $0 {}\", ctx.after_if);\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"mod\",\n-        \"mod $0 {}\",\n-        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent,\n-    );\n-    add_keyword(ctx, acc, \"mut\", \"mut \", ctx.bind_pat_parent || ctx.ref_pat_parent);\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"const\",\n-        \"const \",\n-        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"type\",\n-        \"type \",\n-        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"static\",\n-        \"static \",\n-        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"extern\",\n-        \"extern \",\n-        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent,\n-    );\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"unsafe\",\n-        \"unsafe \",\n-        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent || ctx.is_match_arm,\n-    );\n-    add_keyword(ctx, acc, \"continue\", \"continue;\", ctx.in_loop_body && ctx.can_be_stmt);\n-    add_keyword(ctx, acc, \"break\", \"break;\", ctx.in_loop_body && ctx.can_be_stmt);\n-    add_keyword(ctx, acc, \"continue\", \"continue\", ctx.in_loop_body && !ctx.can_be_stmt);\n-    add_keyword(ctx, acc, \"break\", \"break\", ctx.in_loop_body && !ctx.can_be_stmt);\n-    add_keyword(\n-        ctx,\n-        acc,\n-        \"pub\",\n-        \"pub \",\n-        ctx.has_item_list_or_source_file_parent && !ctx.has_trait_parent,\n-    );\n+    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n+        add_keyword(ctx, acc, \"fn\", \"fn $0() {}\");\n+    }\n+    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+        || ctx.block_expr_parent\n+    {\n+        add_keyword(ctx, acc, \"use\", \"use \");\n+        add_keyword(ctx, acc, \"impl\", \"impl $0 {}\");\n+        add_keyword(ctx, acc, \"trait\", \"trait $0 {}\");\n+    }\n+\n+    if ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent {\n+        add_keyword(ctx, acc, \"enum\", \"enum $0 {}\");\n+        add_keyword(ctx, acc, \"struct\", \"struct $0 {}\");\n+        add_keyword(ctx, acc, \"union\", \"union $0 {}\");\n+    }\n+\n+    if ctx.block_expr_parent || ctx.is_match_arm {\n+        add_keyword(ctx, acc, \"match\", \"match $0 {}\");\n+        add_keyword(ctx, acc, \"loop\", \"loop {$0}\");\n+    }\n+    if ctx.block_expr_parent {\n+        add_keyword(ctx, acc, \"while\", \"while $0 {}\");\n+    }\n+    if ctx.if_is_prev || ctx.block_expr_parent {\n+        add_keyword(ctx, acc, \"let\", \"let \");\n+    }\n+    if ctx.if_is_prev || ctx.block_expr_parent || ctx.is_match_arm {\n+        add_keyword(ctx, acc, \"if\", \"if \");\n+        add_keyword(ctx, acc, \"if let\", \"if let \");\n+    }\n+    if ctx.after_if {\n+        add_keyword(ctx, acc, \"else\", \"else {$0}\");\n+        add_keyword(ctx, acc, \"else if\", \"else if $0 {}\");\n+    }\n+    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+        || ctx.block_expr_parent\n+    {\n+        add_keyword(ctx, acc, \"mod\", \"mod $0 {}\");\n+    }\n+    if ctx.bind_pat_parent || ctx.ref_pat_parent {\n+        add_keyword(ctx, acc, \"mut\", \"mut \");\n+    }\n+    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n+        add_keyword(ctx, acc, \"const\", \"const \");\n+        add_keyword(ctx, acc, \"type\", \"type \");\n+    }\n+    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+        || ctx.block_expr_parent\n+    {\n+        add_keyword(ctx, acc, \"static\", \"static \");\n+    };\n+    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+        || ctx.block_expr_parent\n+    {\n+        add_keyword(ctx, acc, \"extern\", \"extern \");\n+    }\n+    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent || ctx.is_match_arm {\n+        add_keyword(ctx, acc, \"unsafe\", \"unsafe \");\n+    }\n+    if ctx.in_loop_body {\n+        if ctx.can_be_stmt {\n+            add_keyword(ctx, acc, \"continue\", \"continue;\");\n+            add_keyword(ctx, acc, \"break\", \"break;\");\n+        } else {\n+            add_keyword(ctx, acc, \"continue\", \"continue\");\n+            add_keyword(ctx, acc, \"break\", \"break\");\n+        }\n+    }\n+    if ctx.has_item_list_or_source_file_parent && !ctx.has_trait_parent {\n+        add_keyword(ctx, acc, \"pub\", \"pub \")\n+    }\n \n     if !ctx.is_trivial_path {\n         return;\n@@ -225,6 +139,21 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     acc.add_all(complete_return(ctx, &fn_def, ctx.can_be_stmt));\n }\n \n+fn keyword(ctx: &CompletionContext, kw: &str, snippet: &str) -> CompletionItem {\n+    let res = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n+        .kind(CompletionItemKind::Keyword);\n+\n+    match ctx.config.snippet_cap {\n+        Some(cap) => res.insert_snippet(cap, snippet),\n+        _ => res.insert_text(if snippet.contains('$') { kw } else { snippet }),\n+    }\n+    .build()\n+}\n+\n+fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet: &str) {\n+    acc.add(keyword(ctx, kw, snippet));\n+}\n+\n fn complete_return(\n     ctx: &CompletionContext,\n     fn_def: &ast::FnDef,"}, {"sha": "98348b34924d593d94669ff1ccdd222f7fe6d111", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=ef70076f1da391be8697aaf3c534e4e770561429", "patch": "@@ -126,8 +126,9 @@ pub enum CompletionItemKind {\n }\n \n impl CompletionItemKind {\n-    pub fn tag(&self) -> String {\n-        let tag = match self {\n+    #[cfg(test)]\n+    pub(crate) fn tag(&self) -> &'static str {\n+        match self {\n             CompletionItemKind::Snippet => \"sn\",\n             CompletionItemKind::Keyword => \"kw\",\n             CompletionItemKind::Module => \"md\",\n@@ -146,8 +147,7 @@ impl CompletionItemKind {\n             CompletionItemKind::TypeParam => \"tp\",\n             CompletionItemKind::Macro => \"ma\",\n             CompletionItemKind::Attribute => \"at\",\n-        };\n-        tag.to_owned()\n+        }\n     }\n }\n "}, {"sha": "b2fe13280a88d9b403fd7ae6aacee06e2b84a72c", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 50, "deletions": 80, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=ef70076f1da391be8697aaf3c534e4e770561429", "patch": "@@ -8,13 +8,20 @@ use ra_syntax::{\n     SyntaxNode, SyntaxToken,\n };\n \n+#[cfg(test)]\n+use crate::completion::test_utils::check_pattern_is_applicable;\n+\n pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n         .filter(|it| it.kind() == ITEM_LIST)\n         .and_then(|it| it.parent())\n         .filter(|it| it.kind() == TRAIT_DEF)\n         .is_some()\n }\n+#[test]\n+fn test_has_trait_parent() {\n+    check_pattern_is_applicable(r\"trait A { f<|> }\", has_trait_parent);\n+}\n \n pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n@@ -23,20 +30,38 @@ pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n         .filter(|it| it.kind() == IMPL_DEF)\n         .is_some()\n }\n+#[test]\n+fn test_has_impl_parent() {\n+    check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n+}\n \n pub(crate) fn has_block_expr_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == BLOCK_EXPR).is_some()\n }\n+#[test]\n+fn test_has_block_expr_parent() {\n+    check_pattern_is_applicable(r\"fn my_fn() { let a = 2; f<|> }\", has_block_expr_parent);\n+}\n \n pub(crate) fn has_bind_pat_parent(element: SyntaxElement) -> bool {\n     element.ancestors().find(|it| it.kind() == BIND_PAT).is_some()\n }\n+#[test]\n+fn test_has_bind_pat_parent() {\n+    check_pattern_is_applicable(r\"fn my_fn(m<|>) {}\", has_bind_pat_parent);\n+    check_pattern_is_applicable(r\"fn my_fn() { let m<|> }\", has_bind_pat_parent);\n+}\n \n pub(crate) fn has_ref_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n         .filter(|it| it.kind() == REF_PAT || it.kind() == REF_EXPR)\n         .is_some()\n }\n+#[test]\n+fn test_has_ref_parent() {\n+    check_pattern_is_applicable(r\"fn my_fn(&m<|>) {}\", has_ref_parent);\n+    check_pattern_is_applicable(r\"fn my() { let &m<|> }\", has_ref_parent);\n+}\n \n pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> bool {\n     let ancestor = not_same_range_ancestor(element);\n@@ -45,6 +70,11 @@ pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> boo\n     }\n     ancestor.filter(|it| it.kind() == SOURCE_FILE || it.kind() == ITEM_LIST).is_some()\n }\n+#[test]\n+fn test_has_item_list_or_source_file_parent() {\n+    check_pattern_is_applicable(r\"i<|>\", has_item_list_or_source_file_parent);\n+    check_pattern_is_applicable(r\"impl { f<|> }\", has_item_list_or_source_file_parent);\n+}\n \n pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element.clone()).filter(|it| it.kind() == MATCH_ARM).is_some()\n@@ -53,6 +83,10 @@ pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n             .filter(|it| it.kind() == FAT_ARROW)\n             .is_some()\n }\n+#[test]\n+fn test_is_match_arm() {\n+    check_pattern_is_applicable(r\"fn my_fn() { match () { () => m<|> } }\", is_match_arm);\n+}\n \n pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n     element\n@@ -61,6 +95,10 @@ pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n         .filter(|it| it.kind() == UNSAFE_KW)\n         .is_some()\n }\n+#[test]\n+fn test_unsafe_is_prev() {\n+    check_pattern_is_applicable(r\"unsafe i<|>\", unsafe_is_prev);\n+}\n \n pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n     element\n@@ -69,14 +107,26 @@ pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n         .filter(|it| it.kind() == IF_KW)\n         .is_some()\n }\n+#[test]\n+fn test_if_is_prev() {\n+    check_pattern_is_applicable(r\"if l<|>\", if_is_prev);\n+}\n \n pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n     previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT_DEF).is_some()\n }\n+#[test]\n+fn test_has_trait_as_prev_sibling() {\n+    check_pattern_is_applicable(r\"trait A w<|> {}\", has_trait_as_prev_sibling);\n+}\n \n pub(crate) fn has_impl_as_prev_sibling(element: SyntaxElement) -> bool {\n     previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == IMPL_DEF).is_some()\n }\n+#[test]\n+fn test_has_impl_as_prev_sibling() {\n+    check_pattern_is_applicable(r\"impl A w<|> {}\", has_impl_as_prev_sibling);\n+}\n \n pub(crate) fn is_in_loop_body(element: SyntaxElement) -> bool {\n     let leaf = match element {\n@@ -142,83 +192,3 @@ fn previous_sibling_or_ancestor_sibling(element: SyntaxElement) -> Option<Syntax\n         non_trivia_sibling(NodeOrToken::Node(prev_sibling_node), Direction::Prev)\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::{\n-        has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_impl_parent,\n-        has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n-        has_trait_parent, if_is_prev, is_match_arm, unsafe_is_prev,\n-    };\n-    use crate::completion::test_utils::check_pattern_is_applicable;\n-\n-    #[test]\n-    fn test_unsafe_is_prev() {\n-        check_pattern_is_applicable(r\"unsafe i<|>\", unsafe_is_prev);\n-    }\n-\n-    #[test]\n-    fn test_if_is_prev() {\n-        check_pattern_is_applicable(r\"if l<|>\", if_is_prev);\n-    }\n-\n-    #[test]\n-    fn test_has_trait_parent() {\n-        check_pattern_is_applicable(r\"trait A { f<|> }\", has_trait_parent);\n-    }\n-\n-    #[test]\n-    fn test_has_impl_parent() {\n-        check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n-    }\n-\n-    #[test]\n-    fn test_has_trait_as_prev_sibling() {\n-        check_pattern_is_applicable(r\"trait A w<|> {}\", has_trait_as_prev_sibling);\n-    }\n-\n-    #[test]\n-    fn test_has_impl_as_prev_sibling() {\n-        check_pattern_is_applicable(r\"impl A w<|> {}\", has_impl_as_prev_sibling);\n-    }\n-\n-    #[test]\n-    fn test_parent_block_expr() {\n-        check_pattern_is_applicable(r\"fn my_fn() { let a = 2; f<|> }\", has_block_expr_parent);\n-    }\n-\n-    #[test]\n-    fn test_has_ref_pat_parent_in_func_parameters() {\n-        check_pattern_is_applicable(r\"fn my_fn(&m<|>) {}\", has_ref_parent);\n-    }\n-\n-    #[test]\n-    fn test_has_ref_pat_parent_in_let_statement() {\n-        check_pattern_is_applicable(r\"fn my() { let &m<|> }\", has_ref_parent);\n-    }\n-\n-    #[test]\n-    fn test_has_bind_pat_parent_in_func_parameters() {\n-        check_pattern_is_applicable(r\"fn my_fn(m<|>) {}\", has_bind_pat_parent);\n-    }\n-\n-    #[test]\n-    fn test_has_bind_pat_parent_in_let_statement() {\n-        check_pattern_is_applicable(r\"fn my_fn() { let m<|> }\", has_bind_pat_parent);\n-    }\n-\n-    #[test]\n-    fn test_is_match_arm() {\n-        check_pattern_is_applicable(r\"fn my_fn() { match () { () => m<|> } }\", is_match_arm);\n-    }\n-\n-    #[test]\n-    fn test_has_source_file_parent() {\n-        check_pattern_is_applicable(r\"i<|>\", has_item_list_or_source_file_parent);\n-    }\n-\n-    #[test]\n-    fn test_has_item_list_parent() {\n-        check_pattern_is_applicable(r\"impl { f<|> }\", has_item_list_or_source_file_parent);\n-    }\n-}"}, {"sha": "ba724116d7281b37a1180244ae4c2c69ae508c7d", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef70076f1da391be8697aaf3c534e4e770561429/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=ef70076f1da391be8697aaf3c534e4e770561429", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn do_completion_with_options(\n         .into_iter()\n         .filter(|c| c.completion_kind == kind)\n         .collect();\n-    kind_completions.sort_by_key(|c| c.label().to_owned());\n+    kind_completions.sort_by(|l, r| l.label().cmp(r.label()));\n     kind_completions\n }\n "}]}