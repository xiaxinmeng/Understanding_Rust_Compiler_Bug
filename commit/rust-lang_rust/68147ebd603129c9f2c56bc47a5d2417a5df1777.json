{"sha": "68147ebd603129c9f2c56bc47a5d2417a5df1777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTQ3ZWJkNjAzMTI5YzlmMmM1NmJjNDdhNWQyNDE3YTVkZjE3Nzc=", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-09-17T20:18:05Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-09-18T11:55:40Z"}, "message": "Suggest better place to add call parentheses for method expressions wrapped in parentheses", "tree": {"sha": "581155c1cd928746c63385dcad4883cf26d1727d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/581155c1cd928746c63385dcad4883cf26d1727d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68147ebd603129c9f2c56bc47a5d2417a5df1777", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmFF07wACgkQ28VT5UDC\n9hkwgQwAvkANS8GNCmZg3FLO+0w+5xq4ig/S2NmlD01e4WjOSoasHSnT83s0iPWV\nyguPgAFUebB86upQaHoIJhZWaRBGyLoXZPndcij29kTHpK9qI5KdeW64vjqyq/cw\nc1a+o58j7FQCKmo5CivatBJC8LdxovW4GVr2aBvd4CJ2tGyXnu4lUr3tIEDUJ1pN\nW9Xwg0HcsoDD1coYdiphIvGm2sUSO5E8fg8me2/+8XPcoo6IAMK3n9fh2PWMMY+c\n2hRlDXBtstmaP1m/MmXP52ZdY27G+JMOSui5YztUhvSIv+y8ZAkelKdnOiNWL/nd\np8FLs/buht0LXIDqsZuZSi4+FxLfXDbRxPxuJmC3JooQBGvwmnLO4prjmFKJdmsL\nPcDc/rr+KFrVHqQleFWq/FqkfU+WZ9CXaUbLAtD20s/Il8k0oz6jUsgikSHliiU8\nlLArYL1kUMN6GnngfLjJ46F+Ya3xdCYpRjOAIAg4NcobV/MBlhtlc2WXihoSYS6q\ndJ9iSk4Y\n=7EP4\n-----END PGP SIGNATURE-----", "payload": "tree 581155c1cd928746c63385dcad4883cf26d1727d\nparent 207d9558d00dd5cc438a6418ba96912d396e2155\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1631909885 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1631966140 +0200\n\nSuggest better place to add call parentheses for method expressions wrapped in parentheses\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68147ebd603129c9f2c56bc47a5d2417a5df1777", "html_url": "https://github.com/rust-lang/rust/commit/68147ebd603129c9f2c56bc47a5d2417a5df1777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68147ebd603129c9f2c56bc47a5d2417a5df1777/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207d9558d00dd5cc438a6418ba96912d396e2155", "url": "https://api.github.com/repos/rust-lang/rust/commits/207d9558d00dd5cc438a6418ba96912d396e2155", "html_url": "https://github.com/rust-lang/rust/commit/207d9558d00dd5cc438a6418ba96912d396e2155"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "1d08ecee558cb5785c830f72ae2c076d9ec0c8ab", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68147ebd603129c9f2c56bc47a5d2417a5df1777/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68147ebd603129c9f2c56bc47a5d2417a5df1777/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=68147ebd603129c9f2c56bc47a5d2417a5df1777", "patch": "@@ -1844,6 +1844,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 field,\n                 expr_t,\n                 expr,\n+                None,\n             );\n         }\n         err.emit();\n@@ -1870,9 +1871,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n         let expr_snippet =\n             self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap_or(String::new());\n-        if expr_is_call && expr_snippet.starts_with(\"(\") && expr_snippet.ends_with(\")\") {\n-            let after_open = expr.span.lo() + rustc_span::BytePos(1);\n-            let before_close = expr.span.hi() - rustc_span::BytePos(1);\n+        let is_wrapped = expr_snippet.starts_with(\"(\") && expr_snippet.ends_with(\")\");\n+        let after_open = expr.span.lo() + rustc_span::BytePos(1);\n+        let before_close = expr.span.hi() - rustc_span::BytePos(1);\n+\n+        if expr_is_call && is_wrapped {\n             err.multipart_suggestion(\n                 \"remove wrapping parentheses to call the method\",\n                 vec![\n@@ -1882,12 +1885,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n         } else if !self.expr_in_place(expr.hir_id) {\n+            // Suggest call parentheses inside the wrapping parentheses\n+            let span = if is_wrapped {\n+                expr.span.with_lo(after_open).with_hi(before_close)\n+            } else {\n+                expr.span\n+            };\n             self.suggest_method_call(\n                 &mut err,\n                 \"use parentheses to call the method\",\n                 field,\n                 expr_t,\n                 expr,\n+                Some(span),\n             );\n         } else {\n             err.help(\"methods are immutable and cannot be assigned to\");"}, {"sha": "8e09aa97dcf345ea396f06fbbd7002576455d9a8", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68147ebd603129c9f2c56bc47a5d2417a5df1777/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68147ebd603129c9f2c56bc47a5d2417a5df1777/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=68147ebd603129c9f2c56bc47a5d2417a5df1777", "patch": "@@ -141,6 +141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'_>,\n+        span: Option<Span>,\n     ) {\n         let params = self\n             .probe_for_name(\n@@ -159,7 +160,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .unwrap_or(0);\n \n         // Account for `foo.bar<T>`;\n-        let sugg_span = call_expr.span.shrink_to_hi();\n+        let sugg_span = span.unwrap_or_else(|| call_expr.span).shrink_to_hi();\n         let (suggestion, applicability) = (\n             format!(\"({})\", (0..params).map(|_| \"_\").collect::<Vec<_>>().join(\", \")),\n             if params > 0 { Applicability::HasPlaceholders } else { Applicability::MaybeIncorrect },"}, {"sha": "0a3086a345dda10f263f8071485174c34dd780e7", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68147ebd603129c9f2c56bc47a5d2417a5df1777/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68147ebd603129c9f2c56bc47a5d2417a5df1777/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed?ref=68147ebd603129c9f2c56bc47a5d2417a5df1777", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a = Some(42);\n+    println!(\n+        \"The value is {}.\",\n+        (a.unwrap()) //~ERROR [E0615]\n+    );\n+}"}, {"sha": "83617e035e9ef418559a4ee9742892624cd90187", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68147ebd603129c9f2c56bc47a5d2417a5df1777/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68147ebd603129c9f2c56bc47a5d2417a5df1777/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs?ref=68147ebd603129c9f2c56bc47a5d2417a5df1777", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a = Some(42);\n+    println!(\n+        \"The value is {}.\",\n+        (a.unwrap) //~ERROR [E0615]\n+    );\n+}"}, {"sha": "6fa0915dcaf9ae42f0009d8650e43f1ca47bdc93", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68147ebd603129c9f2c56bc47a5d2417a5df1777/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68147ebd603129c9f2c56bc47a5d2417a5df1777/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr?ref=68147ebd603129c9f2c56bc47a5d2417a5df1777", "patch": "@@ -0,0 +1,14 @@\n+error[E0615]: attempted to take value of method `unwrap` on type `Option<{integer}>`\n+  --> $DIR/issue-89044-wrapped-expr-method.rs:7:12\n+   |\n+LL |         (a.unwrap)\n+   |            ^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |         (a.unwrap())\n+   |                  ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0615`."}]}