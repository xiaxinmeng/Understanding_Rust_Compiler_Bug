{"sha": "a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5M2JjYzlhN2I4ZTQ4ODY1ZDNkZjU5ZmM5MzZhMDU1M2U0ZDFlMzc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-09T13:13:59Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:05Z"}, "message": "Recurse into function bodies, but don't typeck closures\n\nPreviously, rustdoc would issue a delay_span_bug ICE on the following code:\n\n```rust\npub fn a() -> impl Fn() -> u32 {\n    || content::doesnt::matter()\n}\n```\n\nThis wasn't picked up earlier because having `type Alias = impl Trait;`\nin the same module caused _all closures_ to be typechecked, even if they\nwouldn't normally. Additionally, if _any_ error was emitted, no\ndelay_span_bug would be emitted. So as part of this commit all of the\ntests were separated out into different files.", "tree": {"sha": "4cfa88cff7c79c7bcbc74dbe4b89908d84468a07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cfa88cff7c79c7bcbc74dbe4b89908d84468a07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "html_url": "https://github.com/rust-lang/rust/commit/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "768d6a4950d66f1a0e1e7793a984fb638494d1c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/768d6a4950d66f1a0e1e7793a984fb638494d1c5", "html_url": "https://github.com/rust-lang/rust/commit/768d6a4950d66f1a0e1e7793a984fb638494d1c5"}], "stats": {"total": 221, "additions": 145, "deletions": 76}, "files": [{"sha": "413faff283e19ee296031c7f1030a66b2863e4ad", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -377,10 +377,18 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             external_providers.lint_mod = |_, _| {};\n             //let old_typeck = local_providers.typeck_tables_of;\n             local_providers.typeck_tables_of = move |tcx, def_id| {\n+                // Closures' tables come from their outermost function,\n+                // as they are part of the same \"inference environment\".\n+                // This avoids emitting errors for the parent twice (see similar code in `typeck_tables_of_with_fallback`)\n+                let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id()).expect_local();\n+                if outer_def_id != def_id {\n+                    return tcx.typeck_tables_of(outer_def_id);\n+                }\n+\n                 let hir = tcx.hir();\n                 let body = hir.body(hir.body_owned_by(hir.as_local_hir_id(def_id)));\n                 debug!(\"visiting body for {:?}\", def_id);\n-                EmitIgnoredResolutionErrors::new(&tcx.sess).visit_body(body);\n+                EmitIgnoredResolutionErrors::new(&tcx.sess, hir).visit_body(body);\n                 rustc_typeck::check::typeck_tables_of(tcx, def_id)\n                 //DEFAULT_TYPECK.with(|typeck| typeck(tcx, def_id))\n             };\n@@ -600,22 +608,24 @@ thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(rustc_middle::ty::TyCtxt<'tcx>\n /// the name resolution pass may find errors that are never emitted.\n /// If typeck is called after this happens, then we'll get an ICE:\n /// 'Res::Error found but not reported'. To avoid this, emit the errors now.\n-struct EmitIgnoredResolutionErrors<'a> {\n+struct EmitIgnoredResolutionErrors<'a, 'hir> {\n     session: &'a Session,\n+    hir_map: Map<'hir>,\n }\n \n-impl<'a> EmitIgnoredResolutionErrors<'a> {\n-    fn new(session: &'a Session) -> Self {\n-        Self { session }\n+impl<'a, 'hir> EmitIgnoredResolutionErrors<'a, 'hir> {\n+    fn new(session: &'a Session, hir_map: Map<'hir>) -> Self {\n+        Self { session, hir_map }\n     }\n }\n \n-impl<'a> Visitor<'a> for EmitIgnoredResolutionErrors<'_> {\n-    type Map = Map<'a>;\n+impl<'hir> Visitor<'hir> for EmitIgnoredResolutionErrors<'_, 'hir> {\n+    type Map = Map<'hir>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        // If we visit nested bodies, then we will report errors twice for e.g. nested closures\n-        NestedVisitorMap::None\n+        // We need to recurse into nested closures,\n+        // since those will fallback to the parent for type checking.\n+        NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n \n     fn visit_path(&mut self, path: &'v Path<'v>, _id: HirId) {"}, {"sha": "fbe663a61890fc976b5f5acd8f77dba137c59606", "filename": "src/test/rustdoc-ui/error-in-impl-trait.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.rs?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -1,28 +0,0 @@\n-// edition:2018\n-#![feature(type_alias_impl_trait)]\n-\n-pub trait ValidTrait {}\n-type ImplTrait = impl ValidTrait;\n-\n-/// This returns impl trait\n-pub fn g() -> impl ValidTrait {\n-    error::_in::impl_trait()\n-    //~^ ERROR failed to resolve\n-}\n-\n-/// This returns impl trait, but using a type alias\n-pub fn h() -> ImplTrait {\n-    error::_in::impl_trait::alias();\n-    //~^ ERROR failed to resolve\n-    (|| error::_in::impl_trait::alias::nested::closure())()\n-    //~^ ERROR failed to resolve\n-}\n-\n-/// This used to work with ResolveBodyWithLoop.\n-/// However now that we ignore type checking instead of modifying the function body,\n-/// the return type is seen as `impl Future<Output = u32>`, not a `u32`.\n-/// So it no longer allows errors in the function body.\n-pub async fn a() -> u32 {\n-    error::_in::async_fn()\n-    //~^ ERROR failed to resolve\n-}"}, {"sha": "4df40da9b7ceaa11c27441162ade1ab122bf9355", "filename": "src/test/rustdoc-ui/error-in-impl-trait.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.stderr?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -1,39 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait`\n-  --> $DIR/error-in-impl-trait.rs:9:5\n-   |\n-LL |     error::_in::impl_trait()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` and you may get a more detailed error\n-\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias`\n-  --> $DIR/error-in-impl-trait.rs:15:5\n-   |\n-LL |     error::_in::impl_trait::alias();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` and you may get a more detailed error\n-\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-  --> $DIR/error-in-impl-trait.rs:17:9\n-   |\n-LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` and you may get a more detailed error\n-\n-error[E0433]: failed to resolve: could not resolve path `error::_in::async_fn`\n-  --> $DIR/error-in-impl-trait.rs:26:5\n-   |\n-LL |     error::_in::async_fn()\n-   |     ^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::async_fn`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` and you may get a more detailed error\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "1176a4a8c4cf830fd7672535e55fc4f1d1d4bf13", "filename": "src/test/rustdoc-ui/error-in-impl-trait/README.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2FREADME.md?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,7 @@\n+Each of these needs to be in a separate file,\n+because the `delay_span_bug` ICE in rustdoc won't be triggerred\n+if even a single other error was emitted.\n+\n+However, conceptually they are all testing basically the same thing.\n+See https://github.com/rust-lang/rust/pull/73566#issuecomment-653689128\n+for more details."}, {"sha": "112a2c494a5c2a090a7b7b8660509ccdbf15de55", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+\n+/// This used to work with ResolveBodyWithLoop.\n+/// However now that we ignore type checking instead of modifying the function body,\n+/// the return type is seen as `impl Future<Output = u32>`, not a `u32`.\n+/// So it no longer allows errors in the function body.\n+pub async fn a() -> u32 {\n+    error::_in::async_fn()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "eae3cadf653e1461806459c005313c3ce0ce3df5", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::async_fn`\n+  --> $DIR/async.rs:8:5\n+   |\n+LL |     error::_in::async_fn()\n+   |     ^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::async_fn`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "df40c121d579efeb0a8a591f2620845ea6f351d6", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,5 @@\n+// manually desugared version of an `async fn` (but with a closure instead of a generator)\n+pub fn a() -> impl Fn() -> u32 {\n+    || content::doesnt::matter()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "9355165997ac97c224113719a3f9a773b4a976dc", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `content::doesnt::matter`\n+  --> $DIR/closure.rs:3:8\n+   |\n+LL |     || content::doesnt::matter()\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `content::doesnt::matter`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "399fb827517fac2354525ac41fb4c8b60f03cb89", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,6 @@\n+pub trait ValidTrait {}\n+/// This returns impl trait\n+pub fn g() -> impl ValidTrait {\n+    (|| error::_in::impl_trait::alias::nested::closure())()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "569f2ab8ff8ea3331df97e3efc257c9aae5d0960", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+  --> $DIR/impl-keyword-closure.rs:4:9\n+   |\n+LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "24b5734dbd0bf5eca19ef6f8375a238c9a70501f", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,6 @@\n+pub trait ValidTrait {}\n+/// This returns impl trait\n+pub fn g() -> impl ValidTrait {\n+    error::_in::impl_trait()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "68bc71f90b2887af2310d582ce2cb978ed50c8c0", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait`\n+  --> $DIR/impl-keyword.rs:4:5\n+   |\n+LL |     error::_in::impl_trait()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "1498fa4f890d0d8b8e4ce9393bee74dccc7baed0", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait ValidTrait {}\n+type ImplTrait = impl ValidTrait;\n+\n+/// This returns impl trait, but using a type alias\n+pub fn h() -> ImplTrait {\n+    (|| error::_in::impl_trait::alias::nested::closure())()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "f3edb0385c82160ed795717761c5a30f0b40bf52", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+  --> $DIR/trait-alias-closure.rs:8:9\n+   |\n+LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "cf9bc48c7f8727cde28cc6c4fa82a19353300130", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait ValidTrait {}\n+type ImplTrait = impl ValidTrait;\n+\n+/// This returns impl trait, but using a type alias\n+pub fn h() -> ImplTrait {\n+    error::_in::impl_trait::alias()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "ddb0fb88cc7faba7cebd26eda3f6cf39dc76ce18", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcc9a7b8e48865d3df59fc936a0553e4d1e37/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr?ref=a93bcc9a7b8e48865d3df59fc936a0553e4d1e37", "patch": "@@ -0,0 +1,12 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias`\n+  --> $DIR/trait-alias.rs:8:5\n+   |\n+LL |     error::_in::impl_trait::alias()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}]}