{"sha": "997492538b5db29ca3e350f18ab1ca1fab0dadff", "node_id": "C_kwDOAAsO6NoAKDk5NzQ5MjUzOGI1ZGIyOWNhM2UzNTBmMThhYjFjYTFmYWIwZGFkZmY", "commit": {"author": {"name": "mqy", "email": "meng.qingyou@gmail.com", "date": "2022-02-18T19:47:41Z"}, "committer": {"name": "mqy", "email": "meng.qingyou@gmail.com", "date": "2022-02-18T19:47:41Z"}, "message": "rustdoc: several minor fixes", "tree": {"sha": "2d97a6c4675d18c0114ded1da81f027e1ab6a1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d97a6c4675d18c0114ded1da81f027e1ab6a1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/997492538b5db29ca3e350f18ab1ca1fab0dadff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/997492538b5db29ca3e350f18ab1ca1fab0dadff", "html_url": "https://github.com/rust-lang/rust/commit/997492538b5db29ca3e350f18ab1ca1fab0dadff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/997492538b5db29ca3e350f18ab1ca1fab0dadff/comments", "author": {"login": "mqy", "id": 106292, "node_id": "MDQ6VXNlcjEwNjI5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/106292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqy", "html_url": "https://github.com/mqy", "followers_url": "https://api.github.com/users/mqy/followers", "following_url": "https://api.github.com/users/mqy/following{/other_user}", "gists_url": "https://api.github.com/users/mqy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqy/subscriptions", "organizations_url": "https://api.github.com/users/mqy/orgs", "repos_url": "https://api.github.com/users/mqy/repos", "events_url": "https://api.github.com/users/mqy/events{/privacy}", "received_events_url": "https://api.github.com/users/mqy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mqy", "id": 106292, "node_id": "MDQ6VXNlcjEwNjI5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/106292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mqy", "html_url": "https://github.com/mqy", "followers_url": "https://api.github.com/users/mqy/followers", "following_url": "https://api.github.com/users/mqy/following{/other_user}", "gists_url": "https://api.github.com/users/mqy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mqy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mqy/subscriptions", "organizations_url": "https://api.github.com/users/mqy/orgs", "repos_url": "https://api.github.com/users/mqy/repos", "events_url": "https://api.github.com/users/mqy/events{/privacy}", "received_events_url": "https://api.github.com/users/mqy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c56fa8c30821129b0960180f528d4a1a4f9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c56fa8c30821129b0960180f528d4a1a4f9316", "html_url": "https://github.com/rust-lang/rust/commit/b8c56fa8c30821129b0960180f528d4a1a4f9316"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e616a09024cec11994be5b77f43e0ea17c9bef55", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997492538b5db29ca3e350f18ab1ca1fab0dadff/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997492538b5db29ca3e350f18ab1ca1fab0dadff/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=997492538b5db29ca3e350f18ab1ca1fab0dadff", "patch": "@@ -285,7 +285,7 @@ impl ParenthesizedArgs {\n \n pub use crate::node_id::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n \n-/// A modifier on a bound, e.g., `?Sized` or `~const Trait`.\n+/// A modifier on a bound, e.g., `?Trait` or `~const Trait`.\n ///\n /// Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug)]"}, {"sha": "7c3b2a644e8db87a16dfe7094e8ce6dd3f32880c", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997492538b5db29ca3e350f18ab1ca1fab0dadff/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997492538b5db29ca3e350f18ab1ca1fab0dadff/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=997492538b5db29ca3e350f18ab1ca1fab0dadff", "patch": "@@ -47,7 +47,7 @@ pub enum GeneratorState<Y, R> {\n /// fn main() {\n ///     let mut generator = || {\n ///         yield 1;\n-///         return \"foo\"\n+///         \"foo\"\n ///     };\n ///\n ///     match Pin::new(&mut generator).resume(()) {"}, {"sha": "d642df4f6a0212e533540ca8135c9e4502b5f021", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/997492538b5db29ca3e350f18ab1ca1fab0dadff/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997492538b5db29ca3e350f18ab1ca1fab0dadff/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=997492538b5db29ca3e350f18ab1ca1fab0dadff", "patch": "@@ -1100,8 +1100,8 @@ pub macro pin($value:expr $(,)?) {\n     //     that would break `Pin`'s invariants.\n     //   - `{ $value }` is braced, making it a _block expression_, thus **moving**\n     //     the given `$value`, and making it _become an **anonymous** temporary_.\n-    //     By virtue of being anonynomous, it can no longer be accessed, thus\n-    //     preventing any attemps to `mem::replace` it or `mem::forget` it, _etc._\n+    //     By virtue of being anonymous, it can no longer be accessed, thus\n+    //     preventing any attempts to `mem::replace` it or `mem::forget` it, _etc._\n     //\n     // This gives us a `pin!` definition that is sound, and which works, but only\n     // in certain scenarios:"}, {"sha": "8d19a054a1d2504bc2c06cdd03be49341dbdcb35", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997492538b5db29ca3e350f18ab1ca1fab0dadff/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997492538b5db29ca3e350f18ab1ca1fab0dadff/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=997492538b5db29ca3e350f18ab1ca1fab0dadff", "patch": "@@ -8,7 +8,7 @@\n //! In Rust with `-Z gcc-ld=lld` we have gcc or clang invoke rust-lld. Since there is no way to\n //! make gcc/clang pass `-flavor <flavor>` as the first two arguments in the linker invocation\n //! and since Windows does not support symbolic links for files this wrapper is used in place of a\n-//! symblic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n+//! symbolic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n //! `../rust-lld -flavor ld64` if `ld64` is enabled. On Windows it spawns a `..\\rust-lld.exe`\n //! child process.\n "}]}