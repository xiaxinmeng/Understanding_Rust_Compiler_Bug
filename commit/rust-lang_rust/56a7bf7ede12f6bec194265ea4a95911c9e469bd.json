{"sha": "56a7bf7ede12f6bec194265ea4a95911c9e469bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTdiZjdlZGUxMmY2YmVjMTk0MjY1ZWE0YTk1OTExYzllNDY5YmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-01T14:20:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-01T14:20:51Z"}, "message": "Merge #7121\n\n7121: Show lifetimes and labels on hover r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "2842e25f9f68d0bfa487a8d90f4163fac0dd5961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2842e25f9f68d0bfa487a8d90f4163fac0dd5961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a7bf7ede12f6bec194265ea4a95911c9e469bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7y/DCRBK7hj4Ov3rIwAAdHIIABDVnI5y+avITWLblENlH0WJ\n+9JBKMgBRaWUysTVQEENWER92xRQaYDf+6UApn27K3bRnia+15YbMLkyT1OHwkpq\nZDhNsUwgMR99XNUFnwNFhzLmG793Q2DXgYq5u5SK/vs+tfBWUmKEfImiatSP20fs\nKA5ggvP0WlqgCpPb/M5wnJUHR9Upn+L9mWdL+MobNwP0MLD0BR6aXhaDCf/IOL84\nED5GMfWVvdlQPHpdkgNL+2l/HkdoO/yWg0XJjGLdNMWTKG8Gi+rE+ZHwKq7Y9n+Y\nd7ByEgRb9qTg7+1Q4hccoD3JyFMRRsAxfHu4xpjsh6bS5bWkGZjZJqVpqkDgNfE=\n=MAIo\n-----END PGP SIGNATURE-----\n", "payload": "tree 2842e25f9f68d0bfa487a8d90f4163fac0dd5961\nparent 0e5fe4715360ab2f0d2954c9a8b37b247335bbcc\nparent bbc0b41c3753dd1aee3f41075f0d242efcc5a827\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609510851 +0000\ncommitter GitHub <noreply@github.com> 1609510851 +0000\n\nMerge #7121\n\n7121: Show lifetimes and labels on hover r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a7bf7ede12f6bec194265ea4a95911c9e469bd", "html_url": "https://github.com/rust-lang/rust/commit/56a7bf7ede12f6bec194265ea4a95911c9e469bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a7bf7ede12f6bec194265ea4a95911c9e469bd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "html_url": "https://github.com/rust-lang/rust/commit/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc"}, {"sha": "bbc0b41c3753dd1aee3f41075f0d242efcc5a827", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc0b41c3753dd1aee3f41075f0d242efcc5a827", "html_url": "https://github.com/rust-lang/rust/commit/bbc0b41c3753dd1aee3f41075f0d242efcc5a827"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "98c7bfbe51bc50c863767796b8feb837926b8e04", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/56a7bf7ede12f6bec194265ea4a95911c9e469bd/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a7bf7ede12f6bec194265ea4a95911c9e469bd/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=56a7bf7ede12f6bec194265ea4a95911c9e469bd", "patch": "@@ -109,6 +109,8 @@ pub(crate) fn hover(\n         match node {\n             ast::Name(name) => NameClass::classify(&sema, &name).and_then(|d| d.defined(sema.db)),\n             ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n+            ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime)\n+                .map_or_else(|| NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced(sema.db)), |d| d.defined(sema.db)),\n             _ => None,\n         }\n     };\n@@ -360,20 +362,19 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             ModuleDef::Static(it) => from_def_source(db, it, mod_path),\n             ModuleDef::Trait(it) => from_def_source(db, it, mod_path),\n             ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n-            ModuleDef::BuiltinType(it) => return Some(it.to_string().into()),\n+            ModuleDef::BuiltinType(it) => Some(Markup::fenced_block(&it)),\n         },\n-        Definition::Local(it) => return Some(Markup::fenced_block(&it.ty(db).display(db))),\n+        Definition::Local(it) => Some(Markup::fenced_block(&it.ty(db).display(db))),\n         Definition::SelfType(impl_def) => {\n             impl_def.target_ty(db).as_adt().and_then(|adt| match adt {\n                 Adt::Struct(it) => from_def_source(db, it, mod_path),\n                 Adt::Union(it) => from_def_source(db, it, mod_path),\n                 Adt::Enum(it) => from_def_source(db, it, mod_path),\n             })\n         }\n-        Definition::TypeParam(_)\n-        | Definition::LifetimeParam(_)\n-        | Definition::ConstParam(_)\n-        | Definition::Label(_) => {\n+        Definition::Label(it) => Some(Markup::fenced_block(&it.name(db))),\n+        Definition::LifetimeParam(it) => Some(Markup::fenced_block(&it.name(db))),\n+        Definition::TypeParam(_) | Definition::ConstParam(_) => {\n             // FIXME: Hover for generic param\n             None\n         }\n@@ -406,7 +407,7 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n-            IDENT | INT_NUMBER => 3,\n+            IDENT | INT_NUMBER | LIFETIME_IDENT => 3,\n             T!['('] | T![')'] => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n@@ -1172,7 +1173,10 @@ fn f() { fo<|>o!(); }\n             r#\"struct TS(String, i32<|>);\"#,\n             expect![[r#\"\n                 *i32*\n+\n+                ```rust\n                 i32\n+                ```\n             \"#]],\n         )\n     }\n@@ -3224,4 +3228,36 @@ fn no_hover() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn hover_label() {\n+        check(\n+            r#\"\n+fn foo() {\n+    'label<|>: loop {}\n+}\n+\"#,\n+            expect![[r#\"\n+            *'label*\n+\n+            ```rust\n+            'label\n+            ```\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_lifetime() {\n+        check(\n+            r#\"fn foo<'lifetime>(_: &'lifetime<|> ()) {}\"#,\n+            expect![[r#\"\n+            *'lifetime*\n+\n+            ```rust\n+            'lifetime\n+            ```\n+            \"#]],\n+        );\n+    }\n }"}]}