{"sha": "b5fd02d93cdfafeba23f50ca9c414053aaa548ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZmQwMmQ5M2NkZmFmZWJhMjNmNTBjYTljNDE0MDUzYWFhNTQ4YWU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-23T16:41:32Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:56Z"}, "message": "Generate ModItem via macro", "tree": {"sha": "651805b64f792322be1daafa84cf25f471683135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/651805b64f792322be1daafa84cf25f471683135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fd02d93cdfafeba23f50ca9c414053aaa548ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fd02d93cdfafeba23f50ca9c414053aaa548ae", "html_url": "https://github.com/rust-lang/rust/commit/b5fd02d93cdfafeba23f50ca9c414053aaa548ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fd02d93cdfafeba23f50ca9c414053aaa548ae/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ff1cdcfbef92429962569f7e98a169c6a10e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ff1cdcfbef92429962569f7e98a169c6a10e50", "html_url": "https://github.com/rust-lang/rust/commit/20ff1cdcfbef92429962569f7e98a169c6a10e50"}], "stats": {"total": 165, "additions": 60, "deletions": 105}, "files": [{"sha": "5beb11df7b23e246210961bccf2b585aeb3a6b21", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 60, "deletions": 105, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/b5fd02d93cdfafeba23f50ca9c414053aaa548ae/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fd02d93cdfafeba23f50ca9c414053aaa548ae/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=b5fd02d93cdfafeba23f50ca9c414053aaa548ae", "patch": "@@ -223,71 +223,75 @@ impl<N: ItemTreeNode> fmt::Debug for FileItemTreeId<N> {\n \n pub type ItemTreeId<N> = InFile<FileItemTreeId<N>>;\n \n-macro_rules! nodes {\n-    ( $($node:ident in $fld:ident),+ $(,)? ) => { $(\n-        impl ItemTreeNode for $node {\n-            fn lookup(tree: &ItemTree, index: Idx<Self>) -> &Self {\n-                &tree.$fld[index]\n+macro_rules! mod_items {\n+    ( $( $typ:ident in $fld:ident -> $ast:ty ),+ $(,)? ) => {\n+        #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n+        pub enum ModItem {\n+            $(\n+                $typ(FileItemTreeId<$typ>),\n+            )+\n+        }\n+\n+        $(\n+            impl From<FileItemTreeId<$typ>> for ModItem {\n+                fn from(id: FileItemTreeId<$typ>) -> ModItem {\n+                    ModItem::$typ(id)\n+                }\n             }\n+        )+\n+\n+        $(\n+            impl ItemTreeNode for $typ {\n+                fn lookup(tree: &ItemTree, index: Idx<Self>) -> &Self {\n+                    &tree.$fld[index]\n+                }\n \n+                fn id_from_mod_item(mod_item: ModItem) -> Option<FileItemTreeId<Self>> {\n+                    if let ModItem::$typ(id) = mod_item {\n+                        Some(id)\n+                    } else {\n+                        None\n+                    }\n+                }\n \n-            fn id_from_mod_item(mod_item: ModItem) -> Option<FileItemTreeId<Self>> {\n-                if let ModItem::$node(id) = mod_item {\n-                    Some(id)\n-                } else {\n-                    None\n+                fn id_to_mod_item(id: FileItemTreeId<Self>) -> ModItem {\n+                    ModItem::$typ(id)\n                 }\n             }\n \n-            fn id_to_mod_item(id: FileItemTreeId<Self>) -> ModItem {\n-                ModItem::$node(id)\n+            impl ItemTreeSource for $typ {\n+                type Source = $ast;\n+\n+                fn ast_id(&self) -> FileAstId<Self::Source> {\n+                    self.ast_id\n+                }\n             }\n-        }\n-    )+ };\n-}\n-\n-nodes!(\n-    Import in imports,\n-    ExternCrate in extern_crates,\n-    Function in functions,\n-    Struct in structs,\n-    Union in unions,\n-    Enum in enums,\n-    Const in consts,\n-    Static in statics,\n-    Trait in traits,\n-    Impl in impls,\n-    TypeAlias in type_aliases,\n-    Mod in mods,\n-    MacroCall in macro_calls,\n-);\n-\n-macro_rules! source {\n-    ( $($node:ident -> $ast:path),+ $(,)? ) => { $(\n-        impl ItemTreeSource for $node {\n-            type Source = $ast;\n-\n-            fn ast_id(&self) -> FileAstId<Self::Source> {\n-                self.ast_id\n+\n+            impl Index<Idx<$typ>> for ItemTree {\n+                type Output = $typ;\n+\n+                fn index(&self, index: Idx<$typ>) -> &Self::Output {\n+                    &self.$fld[index]\n+                }\n             }\n-        }\n-    )+ };\n+        )+\n+    };\n }\n \n-source! {\n-    Import -> ast::UseItem,\n-    ExternCrate -> ast::ExternCrateItem,\n-    Function -> ast::FnDef,\n-    Struct -> ast::StructDef,\n-    Union -> ast::UnionDef,\n-    Enum -> ast::EnumDef,\n-    Const -> ast::ConstDef,\n-    Static -> ast::StaticDef,\n-    Trait -> ast::TraitDef,\n-    Impl -> ast::ImplDef,\n-    TypeAlias -> ast::TypeAliasDef,\n-    Mod -> ast::Module,\n-    MacroCall -> ast::MacroCall,\n+mod_items! {\n+    Import in imports -> ast::UseItem,\n+    ExternCrate in extern_crates -> ast::ExternCrateItem,\n+    Function in functions -> ast::FnDef,\n+    Struct in structs -> ast::StructDef,\n+    Union in unions -> ast::UnionDef,\n+    Enum in enums -> ast::EnumDef,\n+    Const in consts -> ast::ConstDef,\n+    Static in statics -> ast::StaticDef,\n+    Trait in traits -> ast::TraitDef,\n+    Impl in impls -> ast::ImplDef,\n+    TypeAlias in type_aliases -> ast::TypeAliasDef,\n+    Mod in mods -> ast::Module,\n+    MacroCall in macro_calls -> ast::MacroCall,\n }\n \n macro_rules! impl_index {\n@@ -304,23 +308,7 @@ macro_rules! impl_index {\n     };\n }\n \n-impl_index!(\n-    imports: Import,\n-    functions: Function,\n-    structs: Struct,\n-    fields: Field,\n-    unions: Union,\n-    enums: Enum,\n-    variants: Variant,\n-    consts: Const,\n-    statics: Static,\n-    traits: Trait,\n-    impls: Impl,\n-    type_aliases: TypeAlias,\n-    mods: Mod,\n-    macro_calls: MacroCall,\n-    exprs: Expr,\n-);\n+impl_index!(fields: Field, variants: Variant, exprs: Expr);\n \n impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n     type Output = N;\n@@ -500,23 +488,6 @@ macro_rules! impl_froms {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n-pub enum ModItem {\n-    Import(FileItemTreeId<Import>),\n-    ExternCrate(FileItemTreeId<ExternCrate>),\n-    Function(FileItemTreeId<Function>),\n-    Struct(FileItemTreeId<Struct>),\n-    Union(FileItemTreeId<Union>),\n-    Enum(FileItemTreeId<Enum>),\n-    Const(FileItemTreeId<Const>),\n-    Static(FileItemTreeId<Static>),\n-    Trait(FileItemTreeId<Trait>),\n-    Impl(FileItemTreeId<Impl>),\n-    TypeAlias(FileItemTreeId<TypeAlias>),\n-    Mod(FileItemTreeId<Mod>),\n-    MacroCall(FileItemTreeId<MacroCall>),\n-}\n-\n impl ModItem {\n     pub fn as_assoc_item(&self) -> Option<AssocItem> {\n         match self {\n@@ -541,22 +512,6 @@ impl ModItem {\n     }\n }\n \n-impl_froms!(ModItem {\n-    Import(FileItemTreeId<Import>),\n-    ExternCrate(FileItemTreeId<ExternCrate>),\n-    Function(FileItemTreeId<Function>),\n-    Struct(FileItemTreeId<Struct>),\n-    Union(FileItemTreeId<Union>),\n-    Enum(FileItemTreeId<Enum>),\n-    Const(FileItemTreeId<Const>),\n-    Static(FileItemTreeId<Static>),\n-    Trait(FileItemTreeId<Trait>),\n-    Impl(FileItemTreeId<Impl>),\n-    TypeAlias(FileItemTreeId<TypeAlias>),\n-    Mod(FileItemTreeId<Mod>),\n-    MacroCall(FileItemTreeId<MacroCall>),\n-});\n-\n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n pub enum AssocItem {\n     Function(FileItemTreeId<Function>),"}]}