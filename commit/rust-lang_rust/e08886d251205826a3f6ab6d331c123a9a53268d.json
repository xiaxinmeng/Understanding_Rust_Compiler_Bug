{"sha": "e08886d251205826a3f6ab6d331c123a9a53268d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwODg4NmQyNTEyMDU4MjZhM2Y2YWI2ZDMzMWMxMjNhOWE1MzI2OGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T07:23:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract parse_typeof_ty", "tree": {"sha": "a3617fd5fa935df1a6a289f08c10be53278da054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3617fd5fa935df1a6a289f08c10be53278da054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e08886d251205826a3f6ab6d331c123a9a53268d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e08886d251205826a3f6ab6d331c123a9a53268d", "html_url": "https://github.com/rust-lang/rust/commit/e08886d251205826a3f6ab6d331c123a9a53268d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e08886d251205826a3f6ab6d331c123a9a53268d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211560d05c3be81b82d029d49cd23d0f6fef859e", "url": "https://api.github.com/repos/rust-lang/rust/commits/211560d05c3be81b82d029d49cd23d0f6fef859e", "html_url": "https://github.com/rust-lang/rust/commit/211560d05c3be81b82d029d49cd23d0f6fef859e"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "624719d6ca53b0f4ad603273b53f596e77a604ec", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e08886d251205826a3f6ab6d331c123a9a53268d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08886d251205826a3f6ab6d331c123a9a53268d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=e08886d251205826a3f6ab6d331c123a9a53268d", "patch": "@@ -87,12 +87,7 @@ impl<'a> Parser<'a> {\n             self.expect_and()?;\n             self.parse_borrowed_pointee()?\n         } else if self.eat_keyword_noexpect(kw::Typeof) {\n-            // `typeof(EXPR)`\n-            // In order to not be ambiguous, the type must be surrounded by parens.\n-            self.expect(&token::OpenDelim(token::Paren))?;\n-            let expr = self.parse_anon_const_expr()?;\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-            TyKind::Typeof(expr)\n+            self.parse_typeof_ty()?\n         } else if self.eat_keyword(kw::Underscore) {\n             // A type to be inferred `_`\n             TyKind::Infer\n@@ -268,7 +263,16 @@ impl<'a> Parser<'a> {\n         let opt_lifetime = if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n         let mutbl = self.parse_mutability();\n         let ty = self.parse_ty_no_plus()?;\n-        return Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }));\n+        Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }))\n+    }\n+\n+    // Parses the `typeof(EXPR)`.\n+    // To avoid ambiguity, the type is surrounded by parenthesis.\n+    fn parse_typeof_ty(&mut self) -> PResult<'a, TyKind> {\n+        self.expect(&token::OpenDelim(token::Paren))?;\n+        let expr = self.parse_anon_const_expr()?;\n+        self.expect(&token::CloseDelim(token::Paren))?;\n+        Ok(TyKind::Typeof(expr))\n     }\n \n     /// Is the current token one of the keywords that signals a bare function type?"}]}