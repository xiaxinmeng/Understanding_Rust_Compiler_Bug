{"sha": "c5128293633d98a2d3f325c6be6b90b1731e833b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MTI4MjkzNjMzZDk4YTJkM2YzMjVjNmJlNmI5MGIxNzMxZTgzM2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-07T03:11:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-07T03:11:53Z"}, "message": "Rollup merge of #62379 - GuillaumeGomez:option-doc-links, r=QuietMisdreavus\n\nAdd missing links in Option documentation\n\nr? @rust-lang/docs", "tree": {"sha": "0005ba05b69e69a1a7c49d1b491a7d3af772347a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0005ba05b69e69a1a7c49d1b491a7d3af772347a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5128293633d98a2d3f325c6be6b90b1731e833b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdIWL5CRBK7hj4Ov3rIwAAdHIIAKbfBvH21wBlraZjogHUbquT\nS8nV/Q6y0rxqwY8ZyhLgWe8D2FymQKPgn1WLGjMN1EjnJZBlPEn7BxdvQo2l7Z4p\ntJIaANqy5oAVQYq6NLNZwzPBhWSF94w1p9on39U0HCwgE0uXYvXoRjEjjDz75qfh\nEOpadwgOpGJ3gJcXQbkinXioqx5EVdjymRf1DxvDOPfsYJJf5Mmjw4k7k0t+8lDr\nP4AmsnvdAlJc+OA9EDXFzxWaBA3PIrIqY5VHQRvjQpAZkwB/Jip2C2ZphkYS28nE\n1AcnLGq6hs0Af9xN7fC+Wwo/gMSqLXj8ayre7RjtW+OpKGiLo6hEnW3RnWIx4p8=\n=SM1C\n-----END PGP SIGNATURE-----\n", "payload": "tree 0005ba05b69e69a1a7c49d1b491a7d3af772347a\nparent 719eeb260b5c870fd6bee24e5e04fcf2203e8a0e\nparent 02886e2c51ba0fe244bf4526de2559a7e192cab6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562469113 +0200\ncommitter GitHub <noreply@github.com> 1562469113 +0200\n\nRollup merge of #62379 - GuillaumeGomez:option-doc-links, r=QuietMisdreavus\n\nAdd missing links in Option documentation\n\nr? @rust-lang/docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5128293633d98a2d3f325c6be6b90b1731e833b", "html_url": "https://github.com/rust-lang/rust/commit/c5128293633d98a2d3f325c6be6b90b1731e833b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5128293633d98a2d3f325c6be6b90b1731e833b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "719eeb260b5c870fd6bee24e5e04fcf2203e8a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e", "html_url": "https://github.com/rust-lang/rust/commit/719eeb260b5c870fd6bee24e5e04fcf2203e8a0e"}, {"sha": "02886e2c51ba0fe244bf4526de2559a7e192cab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/02886e2c51ba0fe244bf4526de2559a7e192cab6", "html_url": "https://github.com/rust-lang/rust/commit/02886e2c51ba0fe244bf4526de2559a7e192cab6"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "a6bdd5a9063061d4c5281534d8fd74b9d47003c3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c5128293633d98a2d3f325c6be6b90b1731e833b/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5128293633d98a2d3f325c6be6b90b1731e833b/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c5128293633d98a2d3f325c6be6b90b1731e833b", "patch": "@@ -263,7 +263,7 @@ impl<T> Option<T> {\n     }\n \n \n-    /// Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`\n+    /// Converts from [`Pin`]`<&Option<T>>` to `Option<`[`Pin`]`<&T>>`.\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref<'a>(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>> {\n@@ -272,7 +272,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`\n+    /// Converts from [`Pin`]`<&mut Option<T>>` to `Option<`[`Pin`]`<&mut T>>`.\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut<'a>(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>> {\n@@ -626,14 +626,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `None` if the option is `None`, otherwise calls `predicate`\n+    /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`\n     /// with the wrapped value and returns:\n     ///\n-    /// - `Some(t)` if `predicate` returns `true` (where `t` is the wrapped\n+    /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped\n     ///   value), and\n-    /// - `None` if `predicate` returns `false`.\n+    /// - [`None`] if `predicate` returns `false`.\n     ///\n-    /// This function works similar to `Iterator::filter()`. You can imagine\n+    /// This function works similar to [`Iterator::filter()`]. You can imagine\n     /// the `Option<T>` being an iterator over one or zero elements. `filter()`\n     /// lets you decide which elements to keep.\n     ///\n@@ -648,6 +648,10 @@ impl<T> Option<T> {\n     /// assert_eq!(Some(3).filter(is_even), None);\n     /// assert_eq!(Some(4).filter(is_even), Some(4));\n     /// ```\n+    ///\n+    /// [`None`]: #variant.None\n+    /// [`Some(t)`]: #variant.Some\n+    /// [`Iterator::filter()`]: ../../std/iter/trait.Iterator.html#method.filter\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {\n@@ -986,17 +990,25 @@ impl<T: Deref> Option<T> {\n     /// Converts from `&Option<T>` to `Option<&T::Target>`.\n     ///\n     /// Leaves the original Option in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the contents via `Deref`.\n+    /// to the original one, additionally coercing the contents via [`Deref`].\n+    ///\n+    /// [`Deref`]: ../../std/ops/trait.Deref.html\n     pub fn deref(&self) -> Option<&T::Target> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n impl<T, E> Option<Result<T, E>> {\n-    /// Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n+    /// Transposes an `Option` of a [`Result`] into a [`Result`] of an `Option`.\n     ///\n-    /// `None` will be mapped to `Ok(None)`.\n-    /// `Some(Ok(_))` and `Some(Err(_))` will be mapped to `Ok(Some(_))` and `Err(_)`.\n+    /// [`None`] will be mapped to [`Ok`]`(`[`None`]`)`.\n+    /// [`Some`]`(`[`Ok`]`(_))` and [`Some`]`(`[`Err`]`(_))` will be mapped to\n+    /// [`Ok`]`(`[`Some`]`(_))` and [`Err`]`(_)`.\n+    ///\n+    /// [`None`]: #variant.None\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`Some`]: #variant.Some\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///"}]}