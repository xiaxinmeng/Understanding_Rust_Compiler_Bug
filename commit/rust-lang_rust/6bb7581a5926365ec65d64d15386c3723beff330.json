{"sha": "6bb7581a5926365ec65d64d15386c3723beff330", "node_id": "C_kwDOAAsO6NoAKDZiYjc1ODFhNTkyNjM2NWVjNjVkNjRkMTUzODZjMzcyM2JlZmYzMzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-16T23:41:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-24T18:39:59Z"}, "message": "Slightly improve mismatched GAT where clause error", "tree": {"sha": "0431f9bbc6b088496fd84ae4de27f9d3ad1ee8dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0431f9bbc6b088496fd84ae4de27f9d3ad1ee8dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb7581a5926365ec65d64d15386c3723beff330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb7581a5926365ec65d64d15386c3723beff330", "html_url": "https://github.com/rust-lang/rust/commit/6bb7581a5926365ec65d64d15386c3723beff330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb7581a5926365ec65d64d15386c3723beff330/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c32dcbba187d1ee0dbe92dc152cb9c2f3f42900c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c32dcbba187d1ee0dbe92dc152cb9c2f3f42900c", "html_url": "https://github.com/rust-lang/rust/commit/c32dcbba187d1ee0dbe92dc152cb9c2f3f42900c"}], "stats": {"total": 152, "additions": 62, "deletions": 90}, "files": [{"sha": "6123e6cc66e7d27ea4d672e811be2da6cc610d05", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -2,17 +2,17 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{SubregionOrigin, Subtype};\n-use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n+use crate::infer::Subtype;\n+use crate::traits::ObligationCauseCode::{CompareImplMethodObligation, CompareImplTypeObligation};\n use rustc_errors::{ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n \n use std::ops::ControlFlow;\n \n@@ -22,38 +22,23 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let error = self.error.as_ref()?;\n         debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n         if let RegionResolutionError::SubSupConflict(\n-                _, var_origin, sub_origin, _sub, sup_origin, _sup, _,\n+                _,\n+                var_origin,\n+                sub_origin,\n+                _sub,\n+                sup_origin,\n+                _sup,\n+                _,\n             ) = error.clone()\n-            && let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin)\n-            && let (\n-                sub_expected_found @ Some((sub_expected, sub_found)),\n-                sup_expected_found @ Some(_),\n-                CompareImplMethodObligation { trait_item_def_id, .. },\n-            ) = (sub_trace.values.ty(), sup_trace.values.ty(), sub_trace.cause.code())\n+            && let (Subtype(sup_trace), Subtype(sub_trace)) = (&sup_origin, &sub_origin)\n+            && let sub_expected_found @ Some((sub_expected, sub_found)) = sub_trace.values.ty()\n+            && let sup_expected_found @ Some(_) = sup_trace.values.ty()\n+            && let CompareImplMethodObligation { trait_item_def_id, .. }\n+                 | CompareImplTypeObligation { trait_item_def_id, .. } = sub_trace.cause.code()\n             && sup_expected_found == sub_expected_found\n         {\n-            let guar = self.emit_err(\n-                var_origin.span(),\n-                sub_expected,\n-                sub_found,\n-                *trait_item_def_id,\n-            );\n-            return Some(guar);\n-        }\n-        if let RegionResolutionError::ConcreteFailure(origin, _, _)\n-            | RegionResolutionError::GenericBoundFailure(origin, _, _) = error.clone()\n-            && let SubregionOrigin::CompareImplTypeObligation {\n-                span,\n-                impl_item_def_id,\n-                trait_item_def_id,\n-            } = origin\n-        {\n-            let guar = self.emit_associated_type_err(\n-                span,\n-                self.infcx.tcx.item_name(impl_item_def_id.to_def_id()),\n-                impl_item_def_id,\n-                trait_item_def_id,\n-            );\n+            let guar =\n+                self.emit_err(var_origin.span(), sub_expected, sub_found, *trait_item_def_id);\n             return Some(guar);\n         }\n         None\n@@ -147,25 +132,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         err.emit()\n     }\n-\n-    fn emit_associated_type_err(\n-        &self,\n-        span: Span,\n-        item_name: Symbol,\n-        impl_item_def_id: LocalDefId,\n-        trait_item_def_id: DefId,\n-    ) -> ErrorGuaranteed {\n-        let impl_sp = self.tcx().def_span(impl_item_def_id);\n-        let trait_sp = self.tcx().def_span(trait_item_def_id);\n-        let mut err = self\n-            .tcx()\n-            .sess\n-            .struct_span_err(span, &format!(\"`impl` associated type signature for `{}` doesn't match `trait` associated type signature\", item_name));\n-        err.span_label(impl_sp, \"found\");\n-        err.span_label(trait_sp, \"expected\");\n-\n-        err.emit()\n-    }\n }\n \n struct TypeParamSpanVisitor<'tcx> {"}, {"sha": "91364ac35cb111163259da382eccde2392a8ee2b", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -1212,15 +1212,6 @@ fn compare_type_predicate_entailment<'tcx>(\n     // `ObligationCause` (and the `FnCtxt`). This is what\n     // `regionck_item` expects.\n     let impl_ty_hir_id = tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local());\n-    let cause = ObligationCause::new(\n-        impl_ty_span,\n-        impl_ty_hir_id,\n-        ObligationCauseCode::CompareImplTypeObligation {\n-            impl_item_def_id: impl_ty.def_id.expect_local(),\n-            trait_item_def_id: trait_ty.def_id,\n-        },\n-    );\n-\n     debug!(\"compare_type_predicate_entailment: trait_to_impl_substs={:?}\", trait_to_impl_substs);\n \n     // The predicates declared by the impl definition, the trait and the\n@@ -1239,20 +1230,32 @@ fn compare_type_predicate_entailment<'tcx>(\n         Reveal::UserFacing,\n         hir::Constness::NotConst,\n     );\n-    let param_env = traits::normalize_param_env_or_error(tcx, param_env, normalize_cause.clone());\n+    let param_env = traits::normalize_param_env_or_error(tcx, param_env, normalize_cause);\n     tcx.infer_ctxt().enter(|infcx| {\n         let ocx = ObligationCtxt::new(&infcx);\n \n         debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds());\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n-        for predicate in impl_ty_own_bounds.predicates {\n+        assert_eq!(impl_ty_own_bounds.predicates.len(), impl_ty_own_bounds.spans.len());\n+        for (span, predicate) in\n+            std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n+        {\n+            let cause = ObligationCause::misc(span, impl_ty_hir_id);\n             let traits::Normalized { value: predicate, obligations } =\n-                traits::normalize(&mut selcx, param_env, normalize_cause.clone(), predicate);\n+                traits::normalize(&mut selcx, param_env, cause, predicate);\n \n+            let cause = ObligationCause::new(\n+                span,\n+                impl_ty_hir_id,\n+                ObligationCauseCode::CompareImplTypeObligation {\n+                    impl_item_def_id: impl_ty.def_id.expect_local(),\n+                    trait_item_def_id: trait_ty.def_id,\n+                },\n+            );\n             ocx.register_obligations(obligations);\n-            ocx.register_obligation(traits::Obligation::new(cause.clone(), param_env, predicate));\n+            ocx.register_obligation(traits::Obligation::new(cause, param_env, predicate));\n         }\n \n         // Check that all obligations are satisfied by the implementation's"}, {"sha": "e866b3bab7972b6efbda369e1f17cf5194f30316", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -11,13 +11,13 @@ LL |     type Assoc2<T: std::fmt::Display> = Vec<T>;\n    |                  +++++++++++++++++++\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/generic-associated-types-where.rs:22:5\n+  --> $DIR/generic-associated-types-where.rs:22:38\n    |\n LL |     type Assoc3<T>;\n    |     -------------- definition of `Assoc3` from trait\n ...\n LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n-   |     ^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n+   |                                      ^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "01403a352d4b7840424ba1dda5da60b11b89f3d7", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -13,9 +13,9 @@ struct Fooy<T>(T);\n \n impl<T> Foo for Fooy<T> {\n     type A<'a> = (&'a ()) where Self: 'static;\n-    //~^ ERROR `impl` associated type\n+    //~^ ERROR the parameter type `T` may not live long enoug\n     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-    //~^ ERROR `impl` associated type\n+    //~^ ERROR impl has stricter requirements than trait\n     //~| ERROR lifetime bound not satisfied\n     type C = String where Self: Copy;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied"}, {"sha": "6d63f187d8691cfb91fb02a741414315ab07aa1c", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -1,20 +1,22 @@\n-error: `impl` associated type signature for `A` doesn't match `trait` associated type signature\n-  --> $DIR/impl_bounds.rs:15:5\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/impl_bounds.rs:15:39\n    |\n-LL |     type A<'a> where Self: 'a;\n-   |     ---------- expected\n-...\n LL |     type A<'a> = (&'a ()) where Self: 'static;\n-   |     ^^^^^^^^^^ found\n+   |                                       ^^^^^^^ ...so that the definition in impl matches the definition from the trait\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<T: 'static> Foo for Fooy<T> {\n+   |       +++++++++\n \n-error: `impl` associated type signature for `B` doesn't match `trait` associated type signature\n-  --> $DIR/impl_bounds.rs:17:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/impl_bounds.rs:17:48\n    |\n LL |     type B<'a, 'b> where 'a: 'b;\n-   |     -------------- expected\n+   |     -------------- definition of `B` from trait\n ...\n LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n-   |     ^^^^^^^^^^^^^^ found\n+   |                                                ^^ impl has extra requirement `'b: 'a`\n \n error[E0478]: lifetime bound not satisfied\n   --> $DIR/impl_bounds.rs:17:22\n@@ -37,10 +39,10 @@ LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                ^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:20:5\n+  --> $DIR/impl_bounds.rs:20:33\n    |\n LL |     type C = String where Self: Copy;\n-   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |                                 ^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n   --> $DIR/impl_bounds.rs:11:10\n@@ -88,5 +90,5 @@ LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0277, E0478.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0276, E0277, E0310, E0478.\n+For more information about an error, try `rustc --explain E0276`."}, {"sha": "31948a878edfaa812e4ea90f2101678c8e713261", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -1,11 +1,11 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-47206-where-clause.rs:12:5\n+  --> $DIR/issue-47206-where-clause.rs:12:38\n    |\n LL |     type Assoc3<T>;\n    |     -------------- definition of `Assoc3` from trait\n ...\n LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n-   |     ^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n+   |                                      ^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to previous error\n "}, {"sha": "8171dc0ae28d62d81feab67ed6e4881d074bd92a", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n }\n impl Foo for () {\n     type Assoc<'a, 'b> = () where 'a: 'b;\n-    //~^ `impl` associated type\n+    //~^ impl has stricter requirements than trait\n }\n \n fn main() {}"}, {"sha": "edd1f9367d129f7971de9b3481415e1cc4d4c249", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb7581a5926365ec65d64d15386c3723beff330/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=6bb7581a5926365ec65d64d15386c3723beff330", "patch": "@@ -1,11 +1,12 @@\n-error: `impl` associated type signature for `Assoc` doesn't match `trait` associated type signature\n-  --> $DIR/missing-where-clause-on-trait.rs:9:5\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/missing-where-clause-on-trait.rs:9:39\n    |\n LL |     type Assoc<'a, 'b>;\n-   |     ------------------ expected\n+   |     ------------------ definition of `Assoc` from trait\n ...\n LL |     type Assoc<'a, 'b> = () where 'a: 'b;\n-   |     ^^^^^^^^^^^^^^^^^^ found\n+   |                                       ^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0276`."}]}