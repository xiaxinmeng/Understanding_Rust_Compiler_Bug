{"sha": "337a73da6e819a9c6374e9c4ce07565cde8f91e2", "node_id": "C_kwDOAAsO6NoAKDMzN2E3M2RhNmU4MTlhOWM2Mzc0ZTljNGNlMDc1NjVjZGU4ZjkxZTI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-05T15:21:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-27T16:58:37Z"}, "message": "Do not overwrite binders for another HirId.", "tree": {"sha": "711d6e3c9e132881189f6c6933db7235aae3af93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/711d6e3c9e132881189f6c6933db7235aae3af93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/337a73da6e819a9c6374e9c4ce07565cde8f91e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/337a73da6e819a9c6374e9c4ce07565cde8f91e2", "html_url": "https://github.com/rust-lang/rust/commit/337a73da6e819a9c6374e9c4ce07565cde8f91e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/337a73da6e819a9c6374e9c4ce07565cde8f91e2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ee5cf5a93923dae9c98bffb11545fc3a31368d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ee5cf5a93923dae9c98bffb11545fc3a31368d", "html_url": "https://github.com/rust-lang/rust/commit/57ee5cf5a93923dae9c98bffb11545fc3a31368d"}], "stats": {"total": 137, "additions": 112, "deletions": 25}, "files": [{"sha": "9a46444d82398f6541e89ebd7bc51d8430e78aac", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -1478,6 +1478,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let bounded_ty =\n                     self.ty_path(ty_id, param_span, hir::QPath::Resolved(None, ty_path));\n                 Some(hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n+                    hir_id: self.next_id(),\n                     bounded_ty: self.arena.alloc(bounded_ty),\n                     bounds,\n                     span,\n@@ -1508,6 +1509,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref bounds,\n                 span,\n             }) => hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n+                hir_id: self.next_id(),\n                 bound_generic_params: self.lower_generic_params(bound_generic_params),\n                 bounded_ty: self\n                     .lower_ty(bounded_ty, &ImplTraitContext::Disallowed(ImplTraitPosition::Type)),"}, {"sha": "cde8ec73701249a007463aa1b8ad4a954bea486f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -731,6 +731,7 @@ pub enum PredicateOrigin {\n /// A type bound (e.g., `for<'c> Foo: Send + Clone + 'c`).\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereBoundPredicate<'hir> {\n+    pub hir_id: HirId,\n     pub span: Span,\n     /// Origin of the predicate.\n     pub origin: PredicateOrigin,"}, {"sha": "8777a54ba09b44275240ed5b2b7b373fb560126b", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -847,20 +847,28 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n ) {\n     match *predicate {\n         WherePredicate::BoundPredicate(WhereBoundPredicate {\n+            hir_id,\n             ref bounded_ty,\n             bounds,\n             bound_generic_params,\n-            ..\n+            origin: _,\n+            span: _,\n         }) => {\n+            visitor.visit_id(hir_id);\n             visitor.visit_ty(bounded_ty);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n         }\n-        WherePredicate::RegionPredicate(WhereRegionPredicate { ref lifetime, bounds, .. }) => {\n+        WherePredicate::RegionPredicate(WhereRegionPredicate {\n+            ref lifetime,\n+            bounds,\n+            span: _,\n+            in_where_clause: _,\n+        }) => {\n             visitor.visit_lifetime(lifetime);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, .. }) => {\n+        WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, span: _ }) => {\n             visitor.visit_ty(lhs_ty);\n             visitor.visit_ty(rhs_ty);\n         }"}, {"sha": "97cdfff74d7eb56fee551119ab6665b8064afd00", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -697,7 +697,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n                 } else {\n                     None\n                 };\n-                let bvars = self.tcx.late_bound_vars(bp.bounded_ty.hir_id);\n+                let bvars = self.tcx.late_bound_vars(bp.hir_id);\n \n                 bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b, bvars))).filter(\n                     |(_, b, _)| match assoc_name {\n@@ -2295,7 +2295,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         match predicate {\n             hir::WherePredicate::BoundPredicate(bound_pred) => {\n                 let ty = icx.to_ty(bound_pred.bounded_ty);\n-                let bound_vars = icx.tcx.late_bound_vars(bound_pred.bounded_ty.hir_id);\n+                let bound_vars = icx.tcx.late_bound_vars(bound_pred.hir_id);\n \n                 // Keep the type around in a dummy predicate, in case of no bounds.\n                 // That way, `where Ty:` is not a complete noop (see #53696) and `Ty`"}, {"sha": "0c29ff364dcdf77f51febea7b6bb426e286182d2", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -326,6 +326,7 @@ fn convert_named_region_map(named_region_map: NamedRegionMap) -> ResolveLifetime\n     }\n \n     debug!(?rl.defs);\n+    debug!(?rl.late_bound_vars);\n     rl\n }\n \n@@ -507,7 +508,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     })\n                     .unzip();\n \n-            self.map.late_bound_vars.insert(e.hir_id, binders);\n+            self.record_late_bound_vars(e.hir_id, binders);\n             let scope = Scope::Binder {\n                 hir_id: e.hir_id,\n                 lifetimes,\n@@ -531,7 +532,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         match &item.kind {\n             hir::ItemKind::Impl(hir::Impl { of_trait, .. }) => {\n                 if let Some(of_trait) = of_trait {\n-                    self.map.late_bound_vars.insert(of_trait.hir_ref_id, Vec::default());\n+                    self.record_late_bound_vars(of_trait.hir_ref_id, Vec::default());\n                 }\n             }\n             _ => {}\n@@ -583,7 +584,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 resolved_lifetimes.late_bound_vars.iter()\n                             {\n                                 late_bound_vars.iter().for_each(|(&local_id, late_bound_vars)| {\n-                                    self.map.late_bound_vars.insert(\n+                                    self.record_late_bound_vars(\n                                         hir::HirId { owner, local_id },\n                                         late_bound_vars.clone(),\n                                     );\n@@ -614,7 +615,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n                     })\n                     .collect();\n-                self.map.late_bound_vars.insert(item.hir_id(), vec![]);\n+                self.record_late_bound_vars(item.hir_id(), vec![]);\n                 let scope = Scope::Binder {\n                     hir_id: item.hir_id(),\n                     lifetimes,\n@@ -663,7 +664,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         (pair, r)\n                     })\n                     .unzip();\n-                self.map.late_bound_vars.insert(ty.hir_id, binders);\n+                self.record_late_bound_vars(ty.hir_id, binders);\n                 let scope = Scope::Binder {\n                     hir_id: ty.hir_id,\n                     lifetimes,\n@@ -817,7 +818,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {}\n                     }\n                 }\n-                self.map.late_bound_vars.insert(ty.hir_id, vec![]);\n+                self.record_late_bound_vars(ty.hir_id, vec![]);\n \n                 let scope = Scope::Binder {\n                     hir_id: ty.hir_id,\n@@ -861,7 +862,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n                     })\n                     .collect();\n-                self.map.late_bound_vars.insert(trait_item.hir_id(), vec![]);\n+                self.record_late_bound_vars(trait_item.hir_id(), vec![]);\n                 let scope = Scope::Binder {\n                     hir_id: trait_item.hir_id(),\n                     lifetimes,\n@@ -909,9 +910,9 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         GenericParamKind::Const { .. } | GenericParamKind::Type { .. } => None,\n                     })\n                     .collect();\n-                self.map.late_bound_vars.insert(ty.hir_id, vec![]);\n+                self.record_late_bound_vars(impl_item.hir_id(), vec![]);\n                 let scope = Scope::Binder {\n-                    hir_id: ty.hir_id,\n+                    hir_id: impl_item.hir_id(),\n                     lifetimes,\n                     s: self.scope,\n                     scope_type: BinderScopeType::Normal,\n@@ -995,33 +996,38 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             for predicate in generics.predicates {\n                 match predicate {\n                     &hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n+                        hir_id,\n                         ref bounded_ty,\n                         bounds,\n                         ref bound_generic_params,\n                         origin,\n                         ..\n                     }) => {\n-                        let (lifetimes, binders): (FxIndexMap<LocalDefId, Region>, Vec<_>) =\n+                        let lifetimes: FxIndexMap<LocalDefId, Region> =\n                             bound_generic_params\n                                 .iter()\n                                 .filter(|param| {\n                                     matches!(param.kind, GenericParamKind::Lifetime { .. })\n                                 })\n                                 .enumerate()\n                                 .map(|(late_bound_idx, param)| {\n-                                    let pair =\n-                                        Region::late(late_bound_idx as u32, this.tcx.hir(), param);\n-                                    let r = late_region_as_bound_region(this.tcx, &pair.1);\n-                                    (pair, r)\n+                                        Region::late(late_bound_idx as u32, this.tcx.hir(), param)\n+                                })\n+                                .collect();\n+                        let binders: Vec<_> =\n+                            lifetimes\n+                                .iter()\n+                                .map(|(_, region)| {\n+                                     late_region_as_bound_region(this.tcx, region)\n                                 })\n-                                .unzip();\n-                        this.map.late_bound_vars.insert(bounded_ty.hir_id, binders.clone());\n+                                .collect();\n+                        this.record_late_bound_vars(hir_id, binders.clone());\n                         // Even if there are no lifetimes defined here, we still wrap it in a binder\n                         // scope. If there happens to be a nested poly trait ref (an error), that\n                         // will be `Concatenating` anyways, so we don't have to worry about the depth\n                         // being wrong.\n                         let scope = Scope::Binder {\n-                            hir_id: bounded_ty.hir_id,\n+                            hir_id,\n                             lifetimes,\n                             s: this.scope,\n                             scope_type: BinderScopeType::Normal,\n@@ -1089,7 +1095,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 // imagine there's a better way to go about this.\n                 let (binders, scope_type) = self.poly_trait_ref_binder_info();\n \n-                self.map.late_bound_vars.insert(*hir_id, binders);\n+                self.record_late_bound_vars(*hir_id, binders);\n                 let scope = Scope::Binder {\n                     hir_id: *hir_id,\n                     lifetimes: FxIndexMap::default(),\n@@ -1127,7 +1133,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         binders.extend(binders_iter);\n \n         debug!(?binders);\n-        self.map.late_bound_vars.insert(trait_ref.trait_ref.hir_ref_id, binders);\n+        self.record_late_bound_vars(trait_ref.trait_ref.hir_ref_id, binders);\n \n         // Always introduce a scope here, even if this is in a where clause and\n         // we introduced the binders around the bounded Ty. In that case, we\n@@ -1211,6 +1217,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n+    fn record_late_bound_vars(&mut self, hir_id: hir::HirId, binder: Vec<ty::BoundVariableKind>) {\n+        if let Some(old) = self.map.late_bound_vars.insert(hir_id, binder) {\n+            bug!(\n+                \"overwrote bound vars for {hir_id:?}:\\nold={old:?}\\nnew={:?}\",\n+                self.map.late_bound_vars[&hir_id]\n+            )\n+        }\n+    }\n+\n     /// Visits self by adding a scope and handling recursive walk over the contents with `walk`.\n     ///\n     /// Handles visiting fns and methods. These are a bit complicated because we must distinguish\n@@ -1268,7 +1283,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 late_region_as_bound_region(self.tcx, &pair.1)\n             })\n             .collect();\n-        self.map.late_bound_vars.insert(hir_id, binders);\n+        self.record_late_bound_vars(hir_id, binders);\n         let scope = Scope::Binder {\n             hir_id,\n             lifetimes,"}, {"sha": "d9950a3d9b7cdae6a9505dd82dd6740322b33b49", "filename": "src/test/ui/where-clauses/higher-ranked-fn-type.quiet.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `for<'b> for<'b> fn(&'b ()): Foo` is not satisfied\n+  --> $DIR/higher-ranked-fn-type.rs:20:5\n+   |\n+LL |     called()\n+   |     ^^^^^^ the trait `for<'b> Foo` is not implemented for `for<'b> fn(&'b ())`\n+   |\n+note: required by a bound in `called`\n+  --> $DIR/higher-ranked-fn-type.rs:12:25\n+   |\n+LL | fn called()\n+   |    ------ required by a bound in this\n+LL | where\n+LL |     for<'b> fn(&'b ()): Foo,\n+   |                         ^^^ required by this bound in `called`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0d8893e08d319a8a22c43f5ae70cedc8f3a5abb2", "filename": "src/test/ui/where-clauses/higher-ranked-fn-type.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -0,0 +1,25 @@\n+// revisions: quiet verbose\n+// [verbose]compile-flags: -Zverbose\n+\n+#![allow(unused_parens)]\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+fn called()\n+where\n+    for<'b> fn(&'b ()): Foo,\n+{\n+}\n+\n+fn caller()\n+where\n+    (for<'a> fn(&'a ())): Foo,\n+{\n+    called()\n+    //[quiet]~^ ERROR the trait bound `for<'b> for<'b> fn(&'b ()): Foo` is not satisfied\n+    //[verbose]~^^ ERROR the trait bound `for<'b> fn(&ReLateBound(\n+}\n+\n+fn main() {}"}, {"sha": "24660ec3539e6ab73eb875a6ebba10e4d9cc64a2", "filename": "src/test/ui/where-clauses/higher-ranked-fn-type.verbose.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/337a73da6e819a9c6374e9c4ce07565cde8f91e2/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/337a73da6e819a9c6374e9c4ce07565cde8f91e2/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr?ref=337a73da6e819a9c6374e9c4ce07565cde8f91e2", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `for<'b> fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b) }) ()): Foo` is not satisfied\n+  --> $DIR/higher-ranked-fn-type.rs:20:5\n+   |\n+LL |     called()\n+   |     ^^^^^^ the trait `for<'b> Foo` is not implemented for `fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b) }) ())`\n+   |\n+note: required by a bound in `called`\n+  --> $DIR/higher-ranked-fn-type.rs:12:25\n+   |\n+LL | fn called()\n+   |    ------ required by a bound in this\n+LL | where\n+LL |     for<'b> fn(&'b ()): Foo,\n+   |                         ^^^ required by this bound in `called`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}