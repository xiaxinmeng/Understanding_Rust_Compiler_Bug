{"sha": "c03bf54dd106cf6afc07c426cbb3522e6839c31b", "node_id": "C_kwDOAAsO6NoAKGMwM2JmNTRkZDEwNmNmNmFmYzA3YzQyNmNiYjM1MjJlNjgzOWMzMWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-31T05:58:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T05:58:32Z"}, "message": "Rollup merge of #93392 - GKFX:char-docs, r=scottmcm\n\nClarify documentation on char::MAX\n\nAs mentioned in https://github.com/rust-lang/rust/issues/91836#issuecomment-994106874, the documentation on `char::MAX` is not quite correct \u2013 USVs are not \"only ones within a certain range\", they are code points _outside_ a certain range. I have corrected this and given the actual numbers as there is no reason to hide them.", "tree": {"sha": "2b54505aff71f440290697ffb0e985c2b85cf536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b54505aff71f440290697ffb0e985c2b85cf536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c03bf54dd106cf6afc07c426cbb3522e6839c31b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh93qICRBK7hj4Ov3rIwAAwCgIAD0IzUOrCaKKH6ex1TAChZeL\nnLz48UIOfCc7g1+NXwRiHYvesvAHf/sZmzMXNpv99UOn23QRrpa8heabhaMHqM9j\nMw11tNZuX2Rdao8PIdUF3t5vrAn8vxzHpfwT8ZGau1ydWkjSoUwBRrI6DO9TGcY7\nQoEyY9H8Rg1dcUvDRj5LAPTKeve3MltWnP6VrOQO7mw55NQJcxanxxsnIq4O6NjE\n98f1bLKkLCOQA+5MVE0WY+N/6MEdzmuGjxGEGfFTEuhdcjXw46432pEPTZokG18k\nCSiACceKnkiIFzjiKDn2DmA5qC6hfjehYDBAWSdb4Svos+UmHX2JVCyJ0VWVWqg=\n=4bXP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b54505aff71f440290697ffb0e985c2b85cf536\nparent 76857fb3fb1bffb2a9b43735ad70620f0f4f7253\nparent 9aaf52b66a920f286bf235e6d5ba8c72099b1273\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643608712 +0100\ncommitter GitHub <noreply@github.com> 1643608712 +0100\n\nRollup merge of #93392 - GKFX:char-docs, r=scottmcm\n\nClarify documentation on char::MAX\n\nAs mentioned in https://github.com/rust-lang/rust/issues/91836#issuecomment-994106874, the documentation on `char::MAX` is not quite correct \u2013 USVs are not \"only ones within a certain range\", they are code points _outside_ a certain range. I have corrected this and given the actual numbers as there is no reason to hide them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c03bf54dd106cf6afc07c426cbb3522e6839c31b", "html_url": "https://github.com/rust-lang/rust/commit/c03bf54dd106cf6afc07c426cbb3522e6839c31b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c03bf54dd106cf6afc07c426cbb3522e6839c31b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "url": "https://api.github.com/repos/rust-lang/rust/commits/76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "html_url": "https://github.com/rust-lang/rust/commit/76857fb3fb1bffb2a9b43735ad70620f0f4f7253"}, {"sha": "9aaf52b66a920f286bf235e6d5ba8c72099b1273", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aaf52b66a920f286bf235e6d5ba8c72099b1273", "html_url": "https://github.com/rust-lang/rust/commit/9aaf52b66a920f286bf235e6d5ba8c72099b1273"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "c4c0a5a6c78ad5059a882f1198aafa38da8cd7fd", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf54dd106cf6afc07c426cbb3522e6839c31b/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf54dd106cf6afc07c426cbb3522e6839c31b/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=c03bf54dd106cf6afc07c426cbb3522e6839c31b", "patch": "@@ -9,14 +9,19 @@ use super::*;\n \n #[lang = \"char\"]\n impl char {\n-    /// The highest valid code point a `char` can have.\n+    /// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n     ///\n-    /// A `char` is a [Unicode Scalar Value], which means that it is a [Code\n-    /// Point], but only ones within a certain range. `MAX` is the highest valid\n-    /// code point that's a valid [Unicode Scalar Value].\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn something_which_returns_char() -> char { 'a' }\n+    /// let c: char = something_which_returns_char();\n+    /// assert!(c <= char::MAX);\n     ///\n-    /// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-    /// [Code Point]: https://www.unicode.org/glossary/#code_point\n+    /// let value_at_max = char::MAX as u32;\n+    /// assert_eq!(char::from_u32(value_at_max), Some('\\u{10FFFF}'));\n+    /// assert_eq!(char::from_u32(value_at_max + 1), None);\n+    /// ```\n     #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const MAX: char = '\\u{10ffff}';\n "}, {"sha": "9364ac4f3ec1fa6c014f29e12d9b2bc68be27347", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c03bf54dd106cf6afc07c426cbb3522e6839c31b/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03bf54dd106cf6afc07c426cbb3522e6839c31b/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=c03bf54dd106cf6afc07c426cbb3522e6839c31b", "patch": "@@ -89,14 +89,19 @@ const MAX_THREE_B: u32 = 0x10000;\n     Cn  Unassigned              a reserved unassigned code point or a noncharacter\n */\n \n-/// The highest valid code point a `char` can have.\n+/// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n ///\n-/// A [`char`] is a [Unicode Scalar Value], which means that it is a [Code\n-/// Point], but only ones within a certain range. `MAX` is the highest valid\n-/// code point that's a valid [Unicode Scalar Value].\n+/// # Examples\n ///\n-/// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Code Point]: https://www.unicode.org/glossary/#code_point\n+/// ```\n+/// # fn something_which_returns_char() -> char { 'a' }\n+/// let c: char = something_which_returns_char();\n+/// assert!(c <= char::MAX);\n+///\n+/// let value_at_max = char::MAX as u32;\n+/// assert_eq!(char::from_u32(value_at_max), Some('\\u{10FFFF}'));\n+/// assert_eq!(char::from_u32(value_at_max + 1), None);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: char = char::MAX;\n "}]}