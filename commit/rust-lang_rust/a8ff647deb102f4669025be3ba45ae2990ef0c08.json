{"sha": "a8ff647deb102f4669025be3ba45ae2990ef0c08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZmY2NDdkZWIxMDJmNDY2OTAyNWJlM2JhNDVhZTI5OTBlZjBjMDg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-22T22:46:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-13T01:32:33Z"}, "message": "Separate out a `hir::Impl` struct\n\nThis makes it possible to pass the `Impl` directly to functions, instead\nof having to pass each of the many fields one at a time. It also\nsimplifies matches in many cases.", "tree": {"sha": "91147a67f3b36d95f6eb04df11326e641706e9f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91147a67f3b36d95f6eb04df11326e641706e9f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ff647deb102f4669025be3ba45ae2990ef0c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ff647deb102f4669025be3ba45ae2990ef0c08", "html_url": "https://github.com/rust-lang/rust/commit/a8ff647deb102f4669025be3ba45ae2990ef0c08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ff647deb102f4669025be3ba45ae2990ef0c08/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd34606ddf02d1e9364e459b373a6ad665c3d8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd34606ddf02d1e9364e459b373a6ad665c3d8a4", "html_url": "https://github.com/rust-lang/rust/commit/fd34606ddf02d1e9364e459b373a6ad665c3d8a4"}], "stats": {"total": 508, "additions": 260, "deletions": 248}, "files": [{"sha": "4e9f9d66c5b654cd5435dfb7a78679ae838fc20d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -134,7 +134,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let old_len = self.in_scope_lifetimes.len();\n \n         let parent_generics = match self.items.get(&parent_hir_id).unwrap().kind {\n-            hir::ItemKind::Impl { ref generics, .. }\n+            hir::ItemKind::Impl(hir::Impl { ref generics, .. })\n             | hir::ItemKind::Trait(_, _, ref generics, ..) => &generics.params[..],\n             _ => &[],\n         };\n@@ -431,7 +431,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // to not cause an assertion failure inside the `lower_defaultness` function.\n                 let has_val = true;\n                 let (defaultness, defaultness_span) = self.lower_defaultness(defaultness, has_val);\n-                hir::ItemKind::Impl {\n+                hir::ItemKind::Impl(hir::Impl {\n                     unsafety: self.lower_unsafety(unsafety),\n                     polarity,\n                     defaultness,\n@@ -441,7 +441,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     of_trait: trait_ref,\n                     self_ty: lowered_ty,\n                     items: new_impl_items,\n-                }\n+                })\n             }\n             ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref items) => {\n                 let bounds = self.lower_param_bounds(bounds, ImplTraitContext::disallowed());"}, {"sha": "98c02d5741078ba6bc9bea16ab17ddb5a8800637", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -2562,22 +2562,25 @@ pub enum ItemKind<'hir> {\n     TraitAlias(Generics<'hir>, GenericBounds<'hir>),\n \n     /// An implementation, e.g., `impl<A> Trait for Foo { .. }`.\n-    Impl {\n-        unsafety: Unsafety,\n-        polarity: ImplPolarity,\n-        defaultness: Defaultness,\n-        // We do not put a `Span` in `Defaultness` because it breaks foreign crate metadata\n-        // decoding as `Span`s cannot be decoded when a `Session` is not available.\n-        defaultness_span: Option<Span>,\n-        constness: Constness,\n-        generics: Generics<'hir>,\n-\n-        /// The trait being implemented, if any.\n-        of_trait: Option<TraitRef<'hir>>,\n-\n-        self_ty: &'hir Ty<'hir>,\n-        items: &'hir [ImplItemRef<'hir>],\n-    },\n+    Impl(Impl<'hir>),\n+}\n+\n+#[derive(Debug, HashStable_Generic)]\n+pub struct Impl<'hir> {\n+    pub unsafety: Unsafety,\n+    pub polarity: ImplPolarity,\n+    pub defaultness: Defaultness,\n+    // We do not put a `Span` in `Defaultness` because it breaks foreign crate metadata\n+    // decoding as `Span`s cannot be decoded when a `Session` is not available.\n+    pub defaultness_span: Option<Span>,\n+    pub constness: Constness,\n+    pub generics: Generics<'hir>,\n+\n+    /// The trait being implemented, if any.\n+    pub of_trait: Option<TraitRef<'hir>>,\n+\n+    pub self_ty: &'hir Ty<'hir>,\n+    pub items: &'hir [ImplItemRef<'hir>],\n }\n \n impl ItemKind<'_> {\n@@ -2590,7 +2593,7 @@ impl ItemKind<'_> {\n             | ItemKind::Struct(_, ref generics)\n             | ItemKind::Union(_, ref generics)\n             | ItemKind::Trait(_, _, ref generics, _, _)\n-            | ItemKind::Impl { ref generics, .. } => generics,\n+            | ItemKind::Impl(Impl { ref generics, .. }) => generics,\n             _ => return None,\n         })\n     }"}, {"sha": "d01906bc17eb2b65ea2fd22d62eb86231d5146fa", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -611,7 +611,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n             visitor.visit_enum_def(enum_definition, generics, item.hir_id, item.span)\n         }\n-        ItemKind::Impl {\n+        ItemKind::Impl(Impl {\n             unsafety: _,\n             defaultness: _,\n             polarity: _,\n@@ -621,7 +621,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             ref of_trait,\n             ref self_ty,\n             items,\n-        } => {\n+        }) => {\n             visitor.visit_id(item.hir_id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_trait_ref, of_trait);"}, {"sha": "ad4bb78419e63583890504ed43c1eb3051a93e30", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -684,7 +684,7 @@ impl<'a> State<'a> {\n                 self.head(visibility_qualified(&item.vis, \"union\"));\n                 self.print_struct(struct_def, generics, item.ident.name, item.span, true);\n             }\n-            hir::ItemKind::Impl {\n+            hir::ItemKind::Impl(hir::Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -694,7 +694,7 @@ impl<'a> State<'a> {\n                 ref of_trait,\n                 ref self_ty,\n                 items,\n-            } => {\n+            }) => {\n                 self.head(\"\");\n                 self.print_visibility(&item.vis);\n                 self.print_defaultness(defaultness);"}, {"sha": "c6ae71ba33019a4db4f0c6cec4daf74eb916680f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -345,9 +345,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         match tcx.hir().get_if_local(def_id) {\n             Some(Node::ImplItem(ImplItem { ident, hir_id, .. })) => {\n                 match tcx.hir().find(tcx.hir().get_parent_item(*hir_id)) {\n-                    Some(Node::Item(Item { kind: ItemKind::Impl { self_ty, .. }, .. })) => {\n-                        Some((*ident, self_ty))\n-                    }\n+                    Some(Node::Item(Item {\n+                        kind: ItemKind::Impl(hir::Impl { self_ty, .. }),\n+                        ..\n+                    })) => Some((*ident, self_ty)),\n                     _ => None,\n                 }\n             }\n@@ -367,7 +368,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                 let impl_did = tcx.hir().local_def_id(*impl_node);\n                                 match tcx.hir().get_if_local(impl_did.to_def_id()) {\n                                     Some(Node::Item(Item {\n-                                        kind: ItemKind::Impl { self_ty, .. },\n+                                        kind: ItemKind::Impl(hir::Impl { self_ty, .. }),\n                                         ..\n                                     })) if trait_objects.iter().all(|did| {\n                                         // FIXME: we should check `self_ty` against the receiver"}, {"sha": "8fa30f0ef9de7048d21af7431d872c6ba0af8ee2", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -541,7 +541,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n                     return;\n                 }\n             }\n-            hir::ItemKind::Impl { of_trait: Some(ref trait_ref), items, .. } => {\n+            hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), items, .. }) => {\n                 // If the trait is private, add the impl items to `private_traits` so they don't get\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();"}, {"sha": "28f9044afb0f9b879c751763d5c6d967a65b5175", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1259,7 +1259,7 @@ impl EncodeContext<'a, 'tcx> {\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 }), adt_def.repr)\n             }\n-            hir::ItemKind::Impl { defaultness, .. } => {\n+            hir::ItemKind::Impl(hir::Impl { defaultness, .. }) => {\n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 let polarity = self.tcx.impl_polarity(def_id);\n                 let parent = if let Some(trait_ref) = trait_ref {"}, {"sha": "6860acf1502bfa77c015253befd5cca33817f5a5", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -505,7 +505,7 @@ impl<'hir> Map<'hir> {\n                     | ItemKind::Union(_, generics)\n                     | ItemKind::Trait(_, _, generics, ..)\n                     | ItemKind::TraitAlias(generics, _)\n-                    | ItemKind::Impl { generics, .. },\n+                    | ItemKind::Impl(Impl { generics, .. }),\n                 ..\n             }) => Some(generics),\n             _ => None,"}, {"sha": "4a74b6a3c4d03846c3ee216009d398d8bffce991", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -829,7 +829,8 @@ fn foo(&self) -> Self::T { String::new() }\n                 }\n             }\n             Some(hir::Node::Item(hir::Item {\n-                kind: hir::ItemKind::Impl { items, .. }, ..\n+                kind: hir::ItemKind::Impl(hir::Impl { items, .. }),\n+                ..\n             })) => {\n                 for item in &items[..] {\n                     if let hir::AssocItemKind::Type = item.kind {"}, {"sha": "8c18dfcb8d0cc72495b6c7a72992609b024c2b21", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -126,7 +126,7 @@ fn is_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     matches!(\n         node,\n         hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Impl { constness: hir::Constness::Const, .. },\n+            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n             ..\n         })\n     )"}, {"sha": "a8f2b4d60e140c61d46fcb69e330e8bdfc443f5e", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1146,8 +1146,8 @@ fn create_mono_items_for_default_impls<'tcx>(\n     output: &mut Vec<Spanned<MonoItem<'tcx>>>,\n ) {\n     match item.kind {\n-        hir::ItemKind::Impl { ref generics, ref items, .. } => {\n-            for param in generics.params {\n+        hir::ItemKind::Impl(ref impl_) => {\n+            for param in impl_.generics.params {\n                 match param.kind {\n                     hir::GenericParamKind::Lifetime { .. } => {}\n                     hir::GenericParamKind::Type { .. } | hir::GenericParamKind::Const { .. } => {\n@@ -1167,7 +1167,7 @@ fn create_mono_items_for_default_impls<'tcx>(\n                 let param_env = ty::ParamEnv::reveal_all();\n                 let trait_ref = tcx.normalize_erasing_regions(param_env, trait_ref);\n                 let overridden_methods: FxHashSet<_> =\n-                    items.iter().map(|iiref| iiref.ident.normalize_to_macros_2_0()).collect();\n+                    impl_.items.iter().map(|iiref| iiref.ident.normalize_to_macros_2_0()).collect();\n                 for method in tcx.provided_trait_methods(trait_ref.def_id) {\n                     if overridden_methods.contains(&method.ident.normalize_to_macros_2_0()) {\n                         continue;"}, {"sha": "ac73ba7062e76df061d9c9bbf9695ab116038428", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn target_from_impl_item<'tcx>(\n             let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n             let containing_item = tcx.hir().expect_item(parent_hir_id);\n             let containing_impl_is_for_trait = match &containing_item.kind {\n-                hir::ItemKind::Impl { ref of_trait, .. } => of_trait.is_some(),\n+                hir::ItemKind::Impl(impl_) => impl_.of_trait.is_some(),\n                 _ => bug!(\"parent of an ImplItem must be an Impl\"),\n             };\n             if containing_impl_is_for_trait {\n@@ -343,7 +343,7 @@ impl CheckAttrVisitor<'tcx> {\n                 // We can't link to trait impl's consts.\n                 let err = \"associated constant in trait implementation block\";\n                 match containing_item.kind {\n-                    ItemKind::Impl { of_trait: Some(_), .. } => Some(err),\n+                    ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) => Some(err),\n                     _ => None,\n                 }\n             }"}, {"sha": "80a24c90421e7a5e3ac9918c2972bf35a2a31c12", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -396,7 +396,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Impl { ref of_trait, items, .. } => {\n+            hir::ItemKind::Impl(hir::Impl { ref of_trait, items, .. }) => {\n                 if of_trait.is_some() {\n                     self.worklist.push(item.hir_id);\n                 }"}, {"sha": "b237671f8e2083aab6e18abfc1be96d73f61e1c6", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -349,7 +349,9 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n         }\n \n         // We need only trait impls here, not inherent impls, and only non-exported ones\n-        if let hir::ItemKind::Impl { of_trait: Some(ref trait_ref), ref items, .. } = item.kind {\n+        if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), ref items, .. }) =\n+            item.kind\n+        {\n             if !self.access_levels.is_reachable(item.hir_id) {\n                 // FIXME(#53488) remove `let`\n                 let tcx = self.tcx;"}, {"sha": "4a3d6ecf8cc61c3e9a4fd4af3c10a911abfbdca5", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -330,11 +330,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             // they don't have their own stability. They still can be annotated as unstable\n             // and propagate this unstability to children, but this annotation is completely\n             // optional. They inherit stability from their parents when unannotated.\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod { .. } => {\n+            hir::ItemKind::Impl(hir::Impl { of_trait: None, .. })\n+            | hir::ItemKind::ForeignMod { .. } => {\n                 self.in_trait_impl = false;\n                 kind = AnnotationKind::Container;\n             }\n-            hir::ItemKind::Impl { of_trait: Some(_), .. } => {\n+            hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) => {\n                 self.in_trait_impl = true;\n                 kind = AnnotationKind::DeprecationProhibited;\n             }\n@@ -503,7 +504,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         // optional. They inherit stability from their parents when unannotated.\n         if !matches!(\n             i.kind,\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod { .. }\n+            hir::ItemKind::Impl(hir::Impl { of_trait: None, .. }) | hir::ItemKind::ForeignMod { .. }\n         ) {\n             self.check_missing_stability(i.hir_id, i.span);\n         }\n@@ -672,7 +673,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // For implementations of traits, check the stability of each item\n             // individually as it's possible to have a stable trait with unstable\n             // items.\n-            hir::ItemKind::Impl { of_trait: Some(ref t), self_ty, items, .. } => {\n+            hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref t), self_ty, items, .. }) => {\n                 if self.tcx.features().staged_api {\n                     // If this impl block has an #[unstable] attribute, give an\n                     // error if all involved types and traits are stable, because"}, {"sha": "fb007c406bcfa5142013605aa9aed1eb75c232a9", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -632,9 +632,9 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Impl { ref of_trait, items, .. } => {\n-                for impl_item_ref in items {\n-                    if of_trait.is_some() || impl_item_ref.vis.node.is_pub() {\n+            hir::ItemKind::Impl(ref impl_) => {\n+                for impl_item_ref in impl_.items {\n+                    if impl_.of_trait.is_some() || impl_item_ref.vis.node.is_pub() {\n                         self.update(impl_item_ref.id.hir_id, item_level);\n                     }\n                 }\n@@ -736,11 +736,11 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             // Visit everything except for private impl items.\n-            hir::ItemKind::Impl { items, .. } => {\n+            hir::ItemKind::Impl(ref impl_) => {\n                 if item_level.is_some() {\n                     self.reach(item.hir_id, item_level).generics().predicates().ty().trait_ref();\n \n-                    for impl_item_ref in items {\n+                    for impl_item_ref in impl_.items {\n                         let impl_item_level = self.get(impl_item_ref.id.hir_id);\n                         if impl_item_level.is_some() {\n                             self.reach(impl_item_ref.id.hir_id, impl_item_level)\n@@ -1450,7 +1450,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n             // (i.e., we could just return here to not check them at\n             // all, or some worse estimation of whether an impl is\n             // publicly visible).\n-            hir::ItemKind::Impl { generics: ref g, ref of_trait, ref self_ty, items, .. } => {\n+            hir::ItemKind::Impl(ref impl_) => {\n                 // `impl [... for] Private` is never visible.\n                 let self_contains_private;\n                 // `impl [... for] Public<...>`, but not `impl [... for]\n@@ -1465,15 +1465,15 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                         at_outer_type: true,\n                         outer_type_is_public_path: false,\n                     };\n-                    visitor.visit_ty(&self_ty);\n+                    visitor.visit_ty(&impl_.self_ty);\n                     self_contains_private = visitor.contains_private;\n                     self_is_public_path = visitor.outer_type_is_public_path;\n                 }\n \n                 // Miscellaneous info about the impl:\n \n                 // `true` iff this is `impl Private for ...`.\n-                let not_private_trait = of_trait.as_ref().map_or(\n+                let not_private_trait = impl_.of_trait.as_ref().map_or(\n                     true, // no trait counts as public trait\n                     |tr| {\n                         let did = tr.path.res.def_id();\n@@ -1494,8 +1494,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                 // directly because we might have `impl<T: Foo<Private>> ...`,\n                 // and we shouldn't warn about the generics if all the methods\n                 // are private (because `T` won't be visible externally).\n-                let trait_or_some_public_method = of_trait.is_some()\n-                    || items.iter().any(|impl_item_ref| {\n+                let trait_or_some_public_method = impl_.of_trait.is_some()\n+                    || impl_.items.iter().any(|impl_item_ref| {\n                         let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                         match impl_item.kind {\n                             hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {\n@@ -1506,11 +1506,11 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     });\n \n                 if !self_contains_private && not_private_trait && trait_or_some_public_method {\n-                    intravisit::walk_generics(self, g);\n+                    intravisit::walk_generics(self, &impl_.generics);\n \n-                    match of_trait {\n+                    match impl_.of_trait {\n                         None => {\n-                            for impl_item_ref in items {\n+                            for impl_item_ref in impl_.items {\n                                 // This is where we choose whether to walk down\n                                 // further into the impl to check its items. We\n                                 // should only walk into public items so that we\n@@ -1531,7 +1531,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 }\n                             }\n                         }\n-                        Some(tr) => {\n+                        Some(ref tr) => {\n                             // Any private types in a trait impl fall into three\n                             // categories.\n                             // 1. mentioned in the trait definition\n@@ -1548,19 +1548,19 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             intravisit::walk_path(self, &tr.path);\n \n                             // Those in 3. are warned with this call.\n-                            for impl_item_ref in items {\n+                            for impl_item_ref in impl_.items {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                                 if let hir::ImplItemKind::TyAlias(ref ty) = impl_item.kind {\n                                     self.visit_ty(ty);\n                                 }\n                             }\n                         }\n                     }\n-                } else if of_trait.is_none() && self_is_public_path {\n+                } else if impl_.of_trait.is_none() && self_is_public_path {\n                     // `impl Public<Private> { ... }`. Any public static\n                     // methods will be visible as `Public::foo`.\n                     let mut found_pub_static = false;\n-                    for impl_item_ref in items {\n+                    for impl_item_ref in impl_.items {\n                         if self.item_is_public(&impl_item_ref.id.hir_id, &impl_item_ref.vis) {\n                             let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                             match impl_item_ref.kind {\n@@ -1577,7 +1577,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                         }\n                     }\n                     if found_pub_static {\n-                        intravisit::walk_generics(self, g)\n+                        intravisit::walk_generics(self, &impl_.generics)\n                     }\n                 }\n                 return;\n@@ -1970,11 +1970,11 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             // Subitems of inherent impls have their own publicity.\n             // A trait impl is public when both its type and its trait are public\n             // Subitems of trait impls have inherited publicity.\n-            hir::ItemKind::Impl { ref of_trait, items, .. } => {\n+            hir::ItemKind::Impl(ref impl_) => {\n                 let impl_vis = ty::Visibility::of_impl(item.hir_id, tcx, &Default::default());\n                 self.check(item.hir_id, impl_vis).generics().predicates();\n-                for impl_item_ref in items {\n-                    let impl_item_vis = if of_trait.is_none() {\n+                for impl_item_ref in impl_.items {\n+                    let impl_item_vis = if impl_.of_trait.is_none() {\n                         min(\n                             tcx.visibility(tcx.hir().local_def_id(impl_item_ref.id.hir_id)),\n                             impl_vis,\n@@ -2032,7 +2032,7 @@ fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n                 Node::ImplItem(impl_item) => {\n                     match tcx.hir().get(tcx.hir().get_parent_item(hir_id)) {\n                         Node::Item(hir::Item {\n-                            kind: hir::ItemKind::Impl { of_trait: Some(tr), .. },\n+                            kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),\n                             ..\n                         }) => tr.path.res.opt_def_id().map_or_else(\n                             || {"}, {"sha": "2634abc704c800ed74f0d06008bda8bad50ee1ee", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -409,11 +409,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             | hir::ItemKind::Union(_, ref generics)\n             | hir::ItemKind::Trait(_, _, ref generics, ..)\n             | hir::ItemKind::TraitAlias(ref generics, ..)\n-            | hir::ItemKind::Impl { ref generics, .. } => {\n+            | hir::ItemKind::Impl(hir::Impl { ref generics, .. }) => {\n                 self.missing_named_lifetime_spots.push(generics.into());\n \n                 // Impls permit `'_` to be used and it is equivalent to \"some fresh lifetime name\".\n-                // This is not true for other kinds of items.x\n+                // This is not true for other kinds of items.\n                 let track_lifetime_uses = matches!(item.kind, hir::ItemKind::Impl { .. });\n                 // These kinds of items have only early-bound lifetime parameters.\n                 let mut index = if sub_items_have_self_param(&item.kind) {\n@@ -1677,7 +1677,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n             match parent.kind {\n                 hir::ItemKind::Trait(_, _, ref generics, ..)\n-                | hir::ItemKind::Impl { ref generics, .. } => {\n+                | hir::ItemKind::Impl(hir::Impl { ref generics, .. }) => {\n                     index += generics.params.len() as u32;\n                 }\n                 _ => {}\n@@ -2102,7 +2102,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(_, body), .. }) => {\n-                if let hir::ItemKind::Impl { ref self_ty, ref items, .. } =\n+                if let hir::ItemKind::Impl(hir::Impl { ref self_ty, ref items, .. }) =\n                     self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {\n                     impl_self = Some(self_ty);"}, {"sha": "2834e7b6322ed0f219c300d64e2fd95c1d2ac1a9", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -631,14 +631,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         self.dumper.dump_def(&access, enum_data);\n     }\n \n-    fn process_impl(\n-        &mut self,\n-        item: &'tcx hir::Item<'tcx>,\n-        generics: &'tcx hir::Generics<'tcx>,\n-        trait_ref: &'tcx Option<hir::TraitRef<'tcx>>,\n-        typ: &'tcx hir::Ty<'tcx>,\n-        impl_items: &'tcx [hir::ImplItemRef<'tcx>],\n-    ) {\n+    fn process_impl(&mut self, item: &'tcx hir::Item<'tcx>, impl_: &'tcx hir::Impl<'tcx>) {\n         if let Some(impl_data) = self.save_ctxt.get_item_data(item) {\n             if !self.span.filter_generated(item.span) {\n                 if let super::Data::RelationData(rel, imp) = impl_data {\n@@ -652,12 +645,12 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n         let map = &self.tcx.hir();\n         self.nest_typeck_results(map.local_def_id(item.hir_id), |v| {\n-            v.visit_ty(&typ);\n-            if let Some(trait_ref) = trait_ref {\n+            v.visit_ty(&impl_.self_ty);\n+            if let Some(trait_ref) = &impl_.of_trait {\n                 v.process_path(trait_ref.hir_ref_id, &hir::QPath::Resolved(None, &trait_ref.path));\n             }\n-            v.process_generic_params(generics, \"\", item.hir_id);\n-            for impl_item in impl_items {\n+            v.process_generic_params(&impl_.generics, \"\", item.hir_id);\n+            for impl_item in impl_.items {\n                 v.process_impl_item(\n                     map.impl_item(impl_item.id),\n                     map.local_def_id(item.hir_id).to_def_id(),\n@@ -1287,9 +1280,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 self.process_struct(item, def, ty_params)\n             }\n             hir::ItemKind::Enum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n-            hir::ItemKind::Impl { ref generics, ref of_trait, ref self_ty, ref items, .. } => {\n-                self.process_impl(item, generics, of_trait, &self_ty, items)\n-            }\n+            hir::ItemKind::Impl(ref impl_) => self.process_impl(item, impl_),\n             hir::ItemKind::Trait(_, _, ref generics, ref trait_refs, methods) => {\n                 self.process_trait(item, generics, trait_refs, methods)\n             }"}, {"sha": "c8cdff4f7e5d35ef9cdc9979d26d0a89de240824", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -318,7 +318,7 @@ impl<'tcx> SaveContext<'tcx> {\n                     attributes: lower_attributes(item.attrs.to_vec(), self),\n                 }))\n             }\n-            hir::ItemKind::Impl { ref of_trait, ref self_ty, ref items, .. } => {\n+            hir::ItemKind::Impl(hir::Impl { ref of_trait, ref self_ty, ref items, .. }) => {\n                 if let hir::TyKind::Path(hir::QPath::Resolved(_, ref path)) = self_ty.kind {\n                     // Common case impl for a struct or something basic.\n                     if generated_code(path.span) {\n@@ -410,7 +410,7 @@ impl<'tcx> SaveContext<'tcx> {\n             match self.tcx.impl_of_method(def_id) {\n                 Some(impl_id) => match self.tcx.hir().get_if_local(impl_id) {\n                     Some(Node::Item(item)) => match item.kind {\n-                        hir::ItemKind::Impl { ref self_ty, .. } => {\n+                        hir::ItemKind::Impl(hir::Impl { ref self_ty, .. }) => {\n                             let hir = self.tcx.hir();\n \n                             let mut qualname = String::from(\"<\");"}, {"sha": "8ada7e34fe844831f72e5be71f836bec094a18cc", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -501,7 +501,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n \n                 Ok(sig)\n             }\n-            hir::ItemKind::Impl {\n+            hir::ItemKind::Impl(hir::Impl {\n                 unsafety,\n                 polarity,\n                 defaultness,\n@@ -511,7 +511,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n                 ref of_trait,\n                 ref self_ty,\n                 items: _,\n-            } => {\n+            }) => {\n                 let mut text = String::new();\n                 if let hir::Defaultness::Default { .. } = defaultness {\n                     text.push_str(\"default \");"}, {"sha": "de94c411c81e4778be988b701521b5104b68df12", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -393,7 +393,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 hir::Node::Item(hir::Item {\n                     kind:\n                         hir::ItemKind::Trait(_, _, generics, _, _)\n-                        | hir::ItemKind::Impl { generics, .. },\n+                        | hir::ItemKind::Impl(hir::Impl { generics, .. }),\n                     ..\n                 }) if projection.is_some() => {\n                     // Missing restriction on associated type of type parameter (unmet projection).\n@@ -416,7 +416,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         | hir::ItemKind::Enum(_, generics)\n                         | hir::ItemKind::Union(_, generics)\n                         | hir::ItemKind::Trait(_, _, generics, ..)\n-                        | hir::ItemKind::Impl { generics, .. }\n+                        | hir::ItemKind::Impl(hir::Impl { generics, .. })\n                         | hir::ItemKind::Fn(_, generics, _)\n                         | hir::ItemKind::TyAlias(_, generics)\n                         | hir::ItemKind::TraitAlias(generics, _)"}, {"sha": "ef87071576da81757b862696aea67528ba222b3f", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -199,7 +199,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n         trait_ref, item, cause, pred\n     );\n     let items = match item {\n-        Some(hir::Item { kind: hir::ItemKind::Impl { items, .. }, .. }) => items,\n+        Some(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.items,\n         _ => return,\n     };\n     let fix_span =\n@@ -333,7 +333,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     let mut new_cause = cause.clone();\n                     // The first subst is the self ty - use the correct span for it.\n                     if i == 0 {\n-                        if let Some(hir::ItemKind::Impl { self_ty, .. }) = item.map(|i| &i.kind) {\n+                        if let Some(hir::ItemKind::Impl(hir::Impl { self_ty, .. })) =\n+                            item.map(|i| &i.kind)\n+                        {\n                             new_cause.make_mut().span = self_ty.span;\n                         }\n                     }"}, {"sha": "1e152d337dbfc469d3559de57d8542ec97460fdb", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -129,8 +129,8 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n     let parent_def_id = tcx.hir().local_def_id(parent_id);\n     let parent_item = tcx.hir().expect_item(parent_id);\n     match parent_item.kind {\n-        hir::ItemKind::Impl { ref items, .. } => {\n-            if let Some(impl_item_ref) = items.iter().find(|i| i.id.hir_id == id) {\n+        hir::ItemKind::Impl(ref impl_) => {\n+            if let Some(impl_item_ref) = impl_.items.iter().find(|i| i.id.hir_id == id) {\n                 let assoc_item =\n                     associated_item_from_impl_item_ref(tcx, parent_def_id, impl_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n@@ -160,8 +160,8 @@ fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n fn impl_defaultness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Defaultness {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let item = tcx.hir().expect_item(hir_id);\n-    if let hir::ItemKind::Impl { defaultness, .. } = item.kind {\n-        defaultness\n+    if let hir::ItemKind::Impl(impl_) = &item.kind {\n+        impl_.defaultness\n     } else {\n         bug!(\"`impl_defaultness` called on {:?}\", item);\n     }\n@@ -201,8 +201,9 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n                 .map(|trait_item_ref| trait_item_ref.id)\n                 .map(|id| tcx.hir().local_def_id(id.hir_id).to_def_id()),\n         ),\n-        hir::ItemKind::Impl { ref items, .. } => tcx.arena.alloc_from_iter(\n-            items\n+        hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n+            impl_\n+                .items\n                 .iter()\n                 .map(|impl_item_ref| impl_item_ref.id)\n                 .map(|id| tcx.hir().local_def_id(id.hir_id).to_def_id()),\n@@ -323,8 +324,8 @@ fn well_formed_types_in_env<'tcx>(\n         },\n \n         Node::Item(item) => match item.kind {\n-            ItemKind::Impl { of_trait: Some(_), .. } => NodeKind::TraitImpl,\n-            ItemKind::Impl { of_trait: None, .. } => NodeKind::InherentImpl,\n+            ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) => NodeKind::TraitImpl,\n+            ItemKind::Impl(hir::Impl { of_trait: None, .. }) => NodeKind::InherentImpl,\n             ItemKind::Fn(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         },"}, {"sha": "4245b0ee52682476a126dc569e0a2f9b4ccaaacf", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -2013,11 +2013,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         \"generic `Self` types are currently not permitted in anonymous constants\",\n                     );\n                     if let Some(hir::Node::Item(&hir::Item {\n-                        kind: hir::ItemKind::Impl { self_ty, .. },\n+                        kind: hir::ItemKind::Impl(ref impl_),\n                         ..\n                     })) = tcx.hir().get_if_local(def_id)\n                     {\n-                        err.span_note(self_ty.span, \"not a concrete type\");\n+                        err.span_note(impl_.self_ty.span, \"not a concrete type\");\n                     }\n                     err.emit();\n                     tcx.ty_error()"}, {"sha": "8e44f5b4a2886ae612221888f14f4114b901e85d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -692,11 +692,17 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n             check_enum(tcx, it.span, &enum_definition.variants, it.hir_id);\n         }\n         hir::ItemKind::Fn(..) => {} // entirely within check_item_body\n-        hir::ItemKind::Impl { ref items, .. } => {\n+        hir::ItemKind::Impl(ref impl_) => {\n             debug!(\"ItemKind::Impl {} with id {}\", it.ident, it.hir_id);\n             let impl_def_id = tcx.hir().local_def_id(it.hir_id);\n             if let Some(impl_trait_ref) = tcx.impl_trait_ref(impl_def_id) {\n-                check_impl_items_against_trait(tcx, it.span, impl_def_id, impl_trait_ref, items);\n+                check_impl_items_against_trait(\n+                    tcx,\n+                    it.span,\n+                    impl_def_id,\n+                    impl_trait_ref,\n+                    &impl_.items,\n+                );\n                 let trait_def_id = impl_trait_ref.def_id;\n                 check_on_unimplemented(tcx, trait_def_id, it);\n             }"}, {"sha": "fc3dff265425707bb9f5841c90073a7e2adfedf2", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -103,35 +103,28 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         //\n         // won't be allowed unless there's an *explicit* implementation of `Send`\n         // for `T`\n-        hir::ItemKind::Impl {\n-            defaultness,\n-            defaultness_span,\n-            polarity,\n-            ref of_trait,\n-            ref self_ty,\n-            ..\n-        } => {\n+        hir::ItemKind::Impl(ref impl_) => {\n             let is_auto = tcx\n                 .impl_trait_ref(tcx.hir().local_def_id(item.hir_id))\n                 .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n-            if let (hir::Defaultness::Default { .. }, true) = (defaultness, is_auto) {\n-                let sp = of_trait.as_ref().map(|t| t.path.span).unwrap_or(item.span);\n+            if let (hir::Defaultness::Default { .. }, true) = (impl_.defaultness, is_auto) {\n+                let sp = impl_.of_trait.as_ref().map(|t| t.path.span).unwrap_or(item.span);\n                 let mut err =\n                     tcx.sess.struct_span_err(sp, \"impls of auto traits cannot be default\");\n-                err.span_labels(defaultness_span, \"default because of this\");\n+                err.span_labels(impl_.defaultness_span, \"default because of this\");\n                 err.span_label(sp, \"auto trait\");\n                 err.emit();\n             }\n             // We match on both `ty::ImplPolarity` and `ast::ImplPolarity` just to get the `!` span.\n-            match (tcx.impl_polarity(def_id), polarity) {\n+            match (tcx.impl_polarity(def_id), impl_.polarity) {\n                 (ty::ImplPolarity::Positive, _) => {\n-                    check_impl(tcx, item, self_ty, of_trait);\n+                    check_impl(tcx, item, impl_.self_ty, &impl_.of_trait);\n                 }\n                 (ty::ImplPolarity::Negative, ast::ImplPolarity::Negative(span)) => {\n                     // FIXME(#27579): what amount of WF checking do we need for neg impls?\n-                    if let hir::Defaultness::Default { .. } = defaultness {\n+                    if let hir::Defaultness::Default { .. } = impl_.defaultness {\n                         let mut spans = vec![span];\n-                        spans.extend(defaultness_span);\n+                        spans.extend(impl_.defaultness_span);\n                         struct_span_err!(\n                             tcx.sess,\n                             spans,"}, {"sha": "6726b9b4a4b657c2055efa7431e417d655889dd2", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -55,7 +55,7 @@ fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n     let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did);\n     let sp = match tcx.hir().expect_item(impl_hir_id).kind {\n-        ItemKind::Impl { self_ty, .. } => self_ty.span,\n+        ItemKind::Impl(ref impl_) => impl_.self_ty.span,\n         _ => bug!(\"expected Drop impl item\"),\n     };\n \n@@ -80,7 +80,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n             let item = tcx.hir().expect_item(impl_hir_id);\n-            let span = if let ItemKind::Impl { of_trait: Some(ref tr), .. } = item.kind {\n+            let span = if let ItemKind::Impl(hir::Impl { of_trait: Some(ref tr), .. }) = item.kind {\n                 tr.path.span\n             } else {\n                 span\n@@ -100,7 +100,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n         Err(CopyImplementationError::NotAnAdt) => {\n             let item = tcx.hir().expect_item(impl_hir_id);\n             let span =\n-                if let ItemKind::Impl { self_ty, .. } = item.kind { self_ty.span } else { span };\n+                if let ItemKind::Impl(ref impl_) = item.kind { impl_.self_ty.span } else { span };\n \n             tcx.sess.emit_err(CopyImplOnNonAdt { span });\n         }\n@@ -453,7 +453,9 @@ pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedI\n                     return err_info;\n                 } else if diff_fields.len() > 1 {\n                     let item = tcx.hir().expect_item(impl_hir_id);\n-                    let span = if let ItemKind::Impl { of_trait: Some(ref t), .. } = item.kind {\n+                    let span = if let ItemKind::Impl(hir::Impl { of_trait: Some(ref t), .. }) =\n+                        item.kind\n+                    {\n                         t.path.span\n                     } else {\n                         tcx.hir().span(impl_hir_id)"}, {"sha": "6b6c66932c8680b1043d122dfd2d5b424bd467e4", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -45,7 +45,9 @@ struct InherentCollect<'tcx> {\n impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let (ty, assoc_items) = match item.kind {\n-            hir::ItemKind::Impl { of_trait: None, ref self_ty, items, .. } => (self_ty, items),\n+            hir::ItemKind::Impl(hir::Impl { of_trait: None, ref self_ty, items, .. }) => {\n+                (self_ty, items)\n+            }\n             _ => return,\n         };\n "}, {"sha": "9333aac6018fe8b2afea270ff3cc160a0cc11686", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -26,7 +26,10 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         // \"Trait\" impl\n-        if let hir::ItemKind::Impl { generics, of_trait: Some(ref tr), self_ty, .. } = &item.kind {\n+        if let hir::ItemKind::Impl(hir::Impl {\n+            generics, of_trait: Some(ref tr), self_ty, ..\n+        }) = &item.kind\n+        {\n             debug!(\n                 \"coherence2::orphan check: trait impl {}\",\n                 self.tcx.hir().node_to_string(item.hir_id)"}, {"sha": "3a290b7756e130c8fe10e9861a86ef5dca0614d9", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -86,8 +86,13 @@ impl UnsafetyChecker<'tcx> {\n \n impl ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n-        if let hir::ItemKind::Impl { unsafety, polarity, ref generics, .. } = item.kind {\n-            self.check_unsafety_coherence(item, Some(generics), unsafety, polarity);\n+        if let hir::ItemKind::Impl(ref impl_) = item.kind {\n+            self.check_unsafety_coherence(\n+                item,\n+                Some(&impl_.generics),\n+                impl_.unsafety,\n+                impl_.polarity,\n+            );\n         }\n     }\n "}, {"sha": "20804d55eeb668a05377c4a9332c1d223e213a02", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -189,7 +189,7 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n         | hir::ItemKind::Enum(_, generics)\n         | hir::ItemKind::TraitAlias(generics, _)\n         | hir::ItemKind::Trait(_, _, generics, ..)\n-        | hir::ItemKind::Impl { generics, .. }\n+        | hir::ItemKind::Impl(hir::Impl { generics, .. })\n         | hir::ItemKind::Struct(_, generics) => (generics, true),\n         hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. })\n         | hir::ItemKind::TyAlias(_, generics) => (generics, false),\n@@ -531,7 +531,7 @@ fn type_param_predicates(\n         Node::Item(item) => {\n             match item.kind {\n                 ItemKind::Fn(.., ref generics, _)\n-                | ItemKind::Impl { ref generics, .. }\n+                | ItemKind::Impl(hir::Impl { ref generics, .. })\n                 | ItemKind::TyAlias(_, ref generics)\n                 | ItemKind::OpaqueTy(OpaqueTy { ref generics, impl_trait_fn: None, .. })\n                 | ItemKind::Enum(_, ref generics)\n@@ -1310,7 +1310,8 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n         Node::Item(item) => {\n             match item.kind {\n-                ItemKind::Fn(.., ref generics, _) | ItemKind::Impl { ref generics, .. } => generics,\n+                ItemKind::Fn(.., ref generics, _)\n+                | ItemKind::Impl(hir::Impl { ref generics, .. }) => generics,\n \n                 ItemKind::TyAlias(_, ref generics)\n                 | ItemKind::Enum(_, ref generics)\n@@ -1638,7 +1639,7 @@ fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     match tcx.hir().expect_item(hir_id).kind {\n-        hir::ItemKind::Impl { ref of_trait, .. } => of_trait.as_ref().map(|ast_trait_ref| {\n+        hir::ItemKind::Impl(ref impl_) => impl_.of_trait.as_ref().map(|ast_trait_ref| {\n             let selfty = tcx.type_of(def_id);\n             AstConv::instantiate_mono_trait_ref(&icx, ast_trait_ref, selfty)\n         }),\n@@ -1651,29 +1652,39 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n     let item = tcx.hir().expect_item(hir_id);\n     match &item.kind {\n-        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative(span), of_trait, .. } => {\n+        hir::ItemKind::Impl(hir::Impl {\n+            polarity: hir::ImplPolarity::Negative(span),\n+            of_trait,\n+            ..\n+        }) => {\n             if is_rustc_reservation {\n                 let span = span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(*span));\n                 tcx.sess.span_err(span, \"reservation impls can't be negative\");\n             }\n             ty::ImplPolarity::Negative\n         }\n-        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Positive, of_trait: None, .. } => {\n+        hir::ItemKind::Impl(hir::Impl {\n+            polarity: hir::ImplPolarity::Positive,\n+            of_trait: None,\n+            ..\n+        }) => {\n             if is_rustc_reservation {\n                 tcx.sess.span_err(item.span, \"reservation impls can't be inherent\");\n             }\n             ty::ImplPolarity::Positive\n         }\n-        hir::ItemKind::Impl {\n-            polarity: hir::ImplPolarity::Positive, of_trait: Some(_), ..\n-        } => {\n+        hir::ItemKind::Impl(hir::Impl {\n+            polarity: hir::ImplPolarity::Positive,\n+            of_trait: Some(_),\n+            ..\n+        }) => {\n             if is_rustc_reservation {\n                 ty::ImplPolarity::Reservation\n             } else {\n                 ty::ImplPolarity::Positive\n             }\n         }\n-        ref item => bug!(\"impl_polarity: {:?} not an impl\", item),\n+        item => bug!(\"impl_polarity: {:?} not an impl\", item),\n     }\n }\n \n@@ -1777,11 +1788,11 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n         Node::Item(item) => {\n             match item.kind {\n-                ItemKind::Impl { defaultness, ref generics, .. } => {\n-                    if defaultness.is_default() {\n+                ItemKind::Impl(ref impl_) => {\n+                    if impl_.defaultness.is_default() {\n                         is_default_impl_trait = tcx.impl_trait_ref(def_id);\n                     }\n-                    generics\n+                    &impl_.generics\n                 }\n                 ItemKind::Fn(.., ref generics, _)\n                 | ItemKind::TyAlias(_, ref generics)\n@@ -2113,14 +2124,14 @@ fn const_evaluatable_predicates_of<'tcx>(\n \n     let mut collector = ConstCollector { tcx, preds: FxIndexSet::default() };\n     if let hir::Node::Item(item) = node {\n-        if let hir::ItemKind::Impl { ref of_trait, ref self_ty, .. } = item.kind {\n-            if let Some(of_trait) = of_trait {\n+        if let hir::ItemKind::Impl(ref impl_) = item.kind {\n+            if let Some(of_trait) = &impl_.of_trait {\n                 debug!(\"const_evaluatable_predicates_of({:?}): visit impl trait_ref\", def_id);\n                 collector.visit_trait_ref(of_trait);\n             }\n \n             debug!(\"const_evaluatable_predicates_of({:?}): visit_self_ty\", def_id);\n-            collector.visit_ty(self_ty);\n+            collector.visit_ty(impl_.self_ty);\n         }\n     }\n \n@@ -2952,7 +2963,7 @@ fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span:\n     if let Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) = node {\n         let parent_id = tcx.hir().get_parent_item(hir_id);\n         let parent_item = tcx.hir().expect_item(parent_id);\n-        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = parent_item.kind {\n+        if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = parent_item.kind {\n             tcx.sess\n                 .struct_span_err(\n                     attr_span,"}, {"sha": "e4eabca9c3b76f27bacf89d8e1ab046e9f6cfb4b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -243,9 +243,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         icx.to_ty(ty)\n                     }\n                 }\n-                ItemKind::TyAlias(ref self_ty, _) | ItemKind::Impl { ref self_ty, .. } => {\n-                    icx.to_ty(self_ty)\n-                }\n+                ItemKind::TyAlias(ref self_ty, _)\n+                | ItemKind::Impl(hir::Impl { ref self_ty, .. }) => icx.to_ty(self_ty),\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_fn_def(def_id.to_def_id(), substs)"}, {"sha": "0bdcbaac0e9845e813a340d06426cbe461faf936", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -80,10 +80,10 @@ struct ImplWfCheck<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        if let hir::ItemKind::Impl { ref items, .. } = item.kind {\n+        if let hir::ItemKind::Impl(ref impl_) = item.kind {\n             let impl_def_id = self.tcx.hir().local_def_id(item.hir_id);\n-            enforce_impl_params_are_constrained(self.tcx, impl_def_id, items);\n-            enforce_impl_items_are_distinct(self.tcx, items);\n+            enforce_impl_params_are_constrained(self.tcx, impl_def_id, impl_.items);\n+            enforce_impl_items_are_distinct(self.tcx, impl_.items);\n             if self.min_specialization {\n                 check_min_specialization(self.tcx, impl_def_id.to_def_id(), item.span);\n             }"}, {"sha": "0e61a5a611853900fbe6efeec2f375db244050df", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -358,18 +358,16 @@ crate fn build_impl(\n     let impl_item = match did.as_local() {\n         Some(did) => {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n-            match tcx.hir().expect_item(hir_id).kind {\n-                hir::ItemKind::Impl { self_ty, ref generics, ref items, .. } => {\n-                    Some((self_ty, generics, items))\n-                }\n+            match &tcx.hir().expect_item(hir_id).kind {\n+                hir::ItemKind::Impl(impl_) => Some(impl_),\n                 _ => panic!(\"`DefID` passed to `build_impl` is not an `impl\"),\n             }\n         }\n         None => None,\n     };\n \n-    let for_ = match impl_item {\n-        Some((self_ty, _, _)) => self_ty.clean(cx),\n+    let for_ = match &impl_item {\n+        Some(impl_) => impl_.self_ty.clean(cx),\n         None => tcx.type_of(did).clean(cx),\n     };\n \n@@ -391,9 +389,13 @@ crate fn build_impl(\n \n     let predicates = tcx.explicit_predicates_of(did);\n     let (trait_items, generics) = match impl_item {\n-        Some((_, generics, items)) => (\n-            items.iter().map(|item| tcx.hir().impl_item(item.id).clean(cx)).collect::<Vec<_>>(),\n-            generics.clean(cx),\n+        Some(impl_) => (\n+            impl_\n+                .items\n+                .iter()\n+                .map(|item| tcx.hir().impl_item(item.id).clean(cx))\n+                .collect::<Vec<_>>(),\n+            impl_.generics.clean(cx),\n         ),\n         None => (\n             tcx.associated_items(did)"}, {"sha": "39c29d0fc7fc53cf760f1318dafefe02001156f2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -2027,7 +2027,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                     fields: variant_data.fields().clean(cx),\n                     fields_stripped: false,\n                 }),\n-                ItemKind::Impl { .. } => return clean_impl(item, cx),\n+                ItemKind::Impl(ref impl_) => return clean_impl(impl_, item.hir_id, cx),\n                 // proc macros can have a name set by attributes\n                 ItemKind::Fn(ref sig, ref generics, body_id) => {\n                     clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n@@ -2081,17 +2081,12 @@ impl Clean<bool> for ty::ImplPolarity {\n     }\n }\n \n-fn clean_impl(impl_: &hir::Item<'_>, cx: &DocContext<'_>) -> Vec<Item> {\n+fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &DocContext<'_>) -> Vec<Item> {\n     let mut ret = Vec::new();\n-    let (trait_, items, for_, unsafety, generics) = match &impl_.kind {\n-        hir::ItemKind::Impl { of_trait, items, self_ty, unsafety, generics, .. } => {\n-            (of_trait, items, self_ty, *unsafety, generics)\n-        }\n-        _ => unreachable!(),\n-    };\n-    let trait_ = trait_.clean(cx);\n-    let items = items.iter().map(|ii| cx.tcx.hir().impl_item(ii.id).clean(cx)).collect::<Vec<_>>();\n-    let def_id = cx.tcx.hir().local_def_id(impl_.hir_id);\n+    let trait_ = impl_.of_trait.clean(cx);\n+    let items =\n+        impl_.items.iter().map(|ii| cx.tcx.hir().impl_item(ii.id).clean(cx)).collect::<Vec<_>>();\n+    let def_id = cx.tcx.hir().local_def_id(hir_id);\n \n     // If this impl block is an implementation of the Deref trait, then we\n     // need to try inlining the target's inherent impl blocks as well.\n@@ -2104,15 +2099,15 @@ fn clean_impl(impl_: &hir::Item<'_>, cx: &DocContext<'_>) -> Vec<Item> {\n         .map(|did| cx.tcx.provided_trait_methods(did).map(|meth| meth.ident.name).collect())\n         .unwrap_or_default();\n \n-    let for_ = for_.clean(cx);\n+    let for_ = impl_.self_ty.clean(cx);\n     let type_alias = for_.def_id().and_then(|did| match cx.tcx.def_kind(did) {\n         DefKind::TyAlias => Some(cx.tcx.type_of(did).clean(cx)),\n         _ => None,\n     });\n     let make_item = |trait_: Option<Type>, for_: Type, items: Vec<Item>| {\n         let kind = ImplItem(Impl {\n-            unsafety,\n-            generics: generics.clean(cx),\n+            unsafety: impl_.unsafety,\n+            generics: impl_.generics.clean(cx),\n             provided_trait_methods: provided.clone(),\n             trait_,\n             for_,\n@@ -2121,7 +2116,7 @@ fn clean_impl(impl_: &hir::Item<'_>, cx: &DocContext<'_>) -> Vec<Item> {\n             synthetic: false,\n             blanket_impl: None,\n         });\n-        Item::from_hir_id_and_parts(impl_.hir_id, None, kind, cx)\n+        Item::from_hir_id_and_parts(hir_id, None, kind, cx)\n     };\n     if let Some(type_alias) = type_alias {\n         ret.push(make_item(trait_.clone(), type_alias, items.clone()));"}, {"sha": "cf51162cfb52f9817e85a4128c0ef27e58f36c49", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1026,8 +1026,8 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n     }\n \n     fn visit_item(&mut self, item: &'hir hir::Item<'_>) {\n-        let name = if let hir::ItemKind::Impl { ref self_ty, .. } = item.kind {\n-            rustc_hir_pretty::id_to_string(&self.map, self_ty.hir_id)\n+        let name = if let hir::ItemKind::Impl(impl_) = &item.kind {\n+            rustc_hir_pretty::id_to_string(&self.map, impl_.self_ty.hir_id)\n         } else {\n             item.ident.to_string()\n         };"}, {"sha": "f701352c486ba661cb7a11959c041444a10735a3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -352,10 +352,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     om.items.push((item, renamed));\n                 }\n             }\n-            hir::ItemKind::Impl { ref of_trait, .. } => {\n+            hir::ItemKind::Impl(ref impl_) => {\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located.\n-                if !self.inlining && of_trait.is_none() {\n+                if !self.inlining && impl_.of_trait.is_none() {\n                     om.items.push((item, None));\n                 }\n             }"}, {"sha": "a7aa2cb35c1c141efe9bb1657d2e997f6c7cb5f2", "filename": "src/tools/clippy/clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{is_copy, match_path, paths, span_lint_and_note};\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -33,10 +33,10 @@ declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n "}, {"sha": "b55f59f021dffffadbb2f29fb84b57466dfb36f6", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n+    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Item, ItemKind, Impl, TraitRef, UnsafeSource, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n@@ -164,10 +164,10 @@ declare_lint_pass!(Derive => [\n \n impl<'tcx> LateLintPass<'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);"}, {"sha": "f518da55cd76fcb014202e5c4f5ca2f65ad22759", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -182,11 +182,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                     lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n                 }\n             },\n-            hir::ItemKind::Impl {\n-                of_trait: ref trait_ref,\n-                ..\n-            } => {\n-                self.in_trait_impl = trait_ref.is_some();\n+            hir::ItemKind::Impl(ref impl_) => {\n+                self.in_trait_impl = impl_.of_trait.is_some();\n             },\n             _ => {},\n         }"}, {"sha": "550876978129ec262b6a98785e0749457f221d01", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::intravisit;\n-use rustc_hir::{self, Body, FnDecl, HirId, HirIdSet, ItemKind, Node};\n+use rustc_hir::{self, Body, FnDecl, HirId, HirIdSet, ItemKind, Impl, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         let parent_node = cx.tcx.hir().find(parent_id);\n \n         if let Some(Node::Item(item)) = parent_node {\n-            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = item.kind {\n                 return;\n             }\n         }"}, {"sha": "9f389c8d2f9e71fc472c74258dd8f0351164a90f", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -57,11 +57,11 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n-            if let hir::ItemKind::Impl{ items: impl_items, .. } = item.kind;\n+            if let hir::ItemKind::Impl(impl_) = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &FROM_TRAIT);\n             then {\n-                lint_impl_body(cx, item.span, impl_items);\n+                lint_impl_body(cx, item.span, impl_.items);\n             }\n         }\n     }"}, {"sha": "e287aecb044f570bbcb654db6c88838f93c89984", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -2,7 +2,7 @@\n \n use crate::utils::{in_macro, span_lint_and_then};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{def_id, Crate, Item, ItemKind};\n+use rustc_hir::{def_id, Crate, Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -49,11 +49,11 @@ impl_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             ref generics,\n             of_trait: None,\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             // Remember for each inherent implementation encountered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)"}, {"sha": "5474b30bdec80474b959681160b42985e63febb1", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, TraitItemRef};\n+use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, Impl, TraitItemRef};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -115,11 +115,11 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n \n         match item.kind {\n             ItemKind::Trait(_, _, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n-            ItemKind::Impl {\n+            ItemKind::Impl(Impl {\n                 of_trait: None,\n                 items: ref impl_items,\n                 ..\n-            } => check_impl_items(cx, item, impl_items),\n+            }) => check_impl_items(cx, item, impl_items),\n             _ => (),\n         }\n     }"}, {"sha": "2658c365e1357bc7f9cd2b5c3bc1304e768cebce", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1626,7 +1626,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let self_ty = cx.tcx.type_of(def_id);\n \n         // if this impl block implements a trait, lint in trait definition instead\n-        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+        if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return;\n         }\n "}, {"sha": "a435f86bfd8d56af2f8892b53517127bbd622c7a", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, ItemKind, Node, PatKind, QPath, TyKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, ItemKind, Impl, Node, PatKind, QPath, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, TypeFoldable};\n@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "bd3dac663fe273514bfc7c7c8fe75ef5ffa9f56a", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -60,9 +60,9 @@ impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if let hir::ItemKind::Impl {\n+        if let hir::ItemKind::Impl(hir::Impl {\n             of_trait: None, items, ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             for assoc_item in items {\n                 if let hir::AssocItemKind::Fn { has_self: false } = assoc_item.kind {"}, {"sha": "3a9aa6ced03ba7558d89d7c3ee82af6ce46dca6d", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -7,7 +7,7 @@ use std::ptr;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{\n-    BodyId, Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n+    BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n use rustc_infer::traits::specialization_graph;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n@@ -275,10 +275,10 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n \n             match &item.kind {\n-                ItemKind::Impl {\n+                ItemKind::Impl(Impl {\n                     of_trait: Some(of_trait_ref),\n                     ..\n-                } => {\n+                }) => {\n                     if_chain! {\n                         // Lint a trait impl item only when the definition is a generic type,\n                         // assuming a assoc const is not meant to be a interior mutable type.\n@@ -317,7 +317,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                         }\n                     }\n                 },\n-                ItemKind::Impl { of_trait: None, .. } => {\n+                ItemKind::Impl(Impl { of_trait: None, .. }) => {\n                     let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                     // Normalize assoc types originated from generic params.\n                     let normalized = cx.tcx.normalize_erasing_regions(cx.param_env, ty);"}, {"sha": "04b6e5d58478b32b0a5c013badce3c4c9440af04", "filename": "src/tools/clippy/clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{is_automatically_derived, span_lint_hir};\n use if_chain::if_chain;\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -34,7 +34,7 @@ declare_lint_pass!(PartialEqNeImpl => [PARTIALEQ_NE_IMPL]);\n impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n-            if let ItemKind::Impl{ of_trait: Some(ref trait_ref), items: impl_items, .. } = item.kind;\n+            if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;"}, {"sha": "7814065e31a1a33e1810383adbb322de15ad0d0c", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::attr;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node, PatKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node, PatKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -246,7 +246,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "b832add009f86501b440e26c522756c8f1baebcb", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -8,7 +8,7 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n+    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Impl,\n     Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -132,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n-                if let ItemKind::Impl { of_trait: Some(_), .. } = it.kind {\n+                if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }\n             }"}, {"sha": "ca4fd9f35597f10af4fff1b0ae32be3ff441776d", "filename": "src/tools/clippy/clippy_lints/src/serde_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{get_trait_def_id, paths, span_lint};\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -22,11 +22,11 @@ declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n \n impl<'tcx> LateLintPass<'tcx> for SerdeAPI {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             items,\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let did = trait_ref.path.res.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {"}, {"sha": "675eaf4277a4392b04cd2c90c62e593ff0f4b545", "filename": "src/tools/clippy/clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_def_path, match_trait_method, paths, qpath_res, span_lint};\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind};\n+use rustc_hir::{Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind, Impl};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -111,7 +111,7 @@ impl LateLintPass<'_> for ToStringInDisplay {\n \n fn is_display_impl(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n     if_chain! {\n-        if let ItemKind::Impl { of_trait: Some(trait_ref), .. } = &item.kind;\n+        if let ItemKind::Impl(Impl { of_trait: Some(trait_ref), .. }) = &item.kind;\n         if let Some(did) = trait_ref.trait_def_id();\n         then {\n             match_def_path(cx, did, &paths::DISPLAY_TRAIT)"}, {"sha": "2696c5e781abcaa01c67ac3bddac7cd1753530fc", "filename": "src/tools/clippy/clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -258,7 +258,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n         // Skip trait implementations; see issue #605.\n         if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id)) {\n-            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n                 return;\n             }\n         }\n@@ -2558,21 +2558,16 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n         }\n \n         match item.kind {\n-            ItemKind::Impl {\n-                ref generics,\n-                self_ty: ref ty,\n-                ref items,\n-                ..\n-            } => {\n+            ItemKind::Impl(ref impl_) => {\n                 let mut vis = ImplicitHasherTypeVisitor::new(cx);\n-                vis.visit_ty(ty);\n+                vis.visit_ty(impl_.self_ty);\n \n                 for target in &vis.found {\n                     if differing_macro_contexts(item.span, target.span()) {\n                         return;\n                     }\n \n-                    let generics_suggestion_span = generics.span.substitute_dummy({\n+                    let generics_suggestion_span = impl_.generics.span.substitute_dummy({\n                         let pos = snippet_opt(cx, item.span.until(target.span()))\n                             .and_then(|snip| Some(item.span.lo() + BytePos(snip.find(\"impl\")? as u32 + 4)));\n                         if let Some(pos) = pos {\n@@ -2583,7 +2578,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                     });\n \n                     let mut ctr_vis = ImplicitHasherConstructorVisitor::new(cx, target);\n-                    for item in items.iter().map(|item| cx.tcx.hir().impl_item(item.id)) {\n+                    for item in impl_.items.iter().map(|item| cx.tcx.hir().impl_item(item.id)) {\n                         ctr_vis.visit_impl_item(item);\n                     }\n \n@@ -2596,7 +2591,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                             target.type_name()\n                         ),\n                         move |diag| {\n-                            suggestion(cx, diag, generics.span, generics_suggestion_span, target, ctr_vis);\n+                            suggestion(cx, diag, impl_.generics.span, generics_suggestion_span, target, ctr_vis);\n                         },\n                     );\n                 }"}, {"sha": "07cd752184bbcbc93dc8051b5ac178788e38c922", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -5,7 +5,7 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n+use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Impl, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "a61717943110745db3a85ca9377c7df9674f9c4f", "filename": "src/tools/clippy/clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use rustc_hir::{HirId, ImplItem, ImplItemKind, ItemKind, Path};\n+use rustc_hir::{HirId, ImplItem, ImplItemKind, ItemKind, Impl, Path};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n         let assoc_item = cx.tcx.associated_item(def_id);\n         if_chain! {\n-            if let ItemKind::Impl { of_trait: None, .. } = parent_item.kind;\n+            if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n             let body = cx.tcx.hir().body(*body_id);"}, {"sha": "b82ea66190fcfde3f9656d5ad78bdb82dfb98d99", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -181,8 +181,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             return;\n         }\n         if_chain! {\n-            if let ItemKind::Impl{ self_ty: ref item_type, items: refs, .. } = item.kind;\n-            if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n+            if let ItemKind::Impl(impl_) = &item.kind;\n+            if let TyKind::Path(QPath::Resolved(_, ref item_path)) = impl_.self_ty.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n                 let should_check = parameters.as_ref().map_or(\n@@ -200,7 +200,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     let impl_trait_ref = cx.tcx.impl_trait_ref(impl_def_id);\n \n                     if let Some(impl_trait_ref) = impl_trait_ref {\n-                        for impl_item_ref in refs {\n+                        for impl_item_ref in impl_.items {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             if let ImplItemKind::Fn(FnSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.kind {\n@@ -213,7 +213,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                             }\n                         }\n                     } else {\n-                        for impl_item_ref in refs {\n+                        for impl_item_ref in impl_.items {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             visitor.visit_impl_item(impl_item);\n                         }"}, {"sha": "a02c0a3f44d717d473991d18835ed8d0b7fe7737", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -423,13 +423,13 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n         hir::ItemKind::TraitAlias(..) => {\n             println!(\"trait alias\");\n         },\n-        hir::ItemKind::Impl {\n+        hir::ItemKind::Impl(hir::Impl {\n             of_trait: Some(ref _trait_ref),\n             ..\n-        } => {\n+        }) => {\n             println!(\"trait impl\");\n         },\n-        hir::ItemKind::Impl { of_trait: None, .. } => {\n+        hir::ItemKind::Impl(hir::Impl { of_trait: None, .. }) => {\n             println!(\"impl\");\n         },\n     }"}, {"sha": "407f06f4894206d3abf51ed7c4d7b72e96acd4ad", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -352,11 +352,11 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n         } else if is_expn_of(item.span, \"impl_lint_pass\").is_some()\n             || is_expn_of(item.span, \"declare_lint_pass\").is_some()\n         {\n-            if let hir::ItemKind::Impl {\n+            if let hir::ItemKind::Impl(hir::Impl {\n                 of_trait: None,\n                 items: ref impl_item_refs,\n                 ..\n-            } = item.kind\n+            }) = item.kind\n             {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,"}, {"sha": "87f99019d72da213afe659c856a4083f3cd05a2b", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -439,8 +439,8 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n     if_chain! {\n         if parent_impl != hir::CRATE_HIR_ID;\n         if let hir::Node::Item(item) = cx.tcx.hir().get(parent_impl);\n-        if let hir::ItemKind::Impl{ of_trait: trait_ref, .. } = &item.kind;\n-        then { return trait_ref.as_ref(); }\n+        if let hir::ItemKind::Impl(impl_) = &item.kind;\n+        then { return impl_.of_trait.as_ref(); }\n     }\n     None\n }\n@@ -1530,7 +1530,7 @@ pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-        matches!(item.kind, ItemKind::Impl { of_trait: Some(_), .. })\n+        matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n     } else {\n         false\n     }"}, {"sha": "9761e822a7a007ab55d9601b084e1b7aab8dca99", "filename": "src/tools/clippy/clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff647deb102f4669025be3ba45ae2990ef0c08/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=a8ff647deb102f4669025be3ba45ae2990ef0c08", "patch": "@@ -62,7 +62,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(parent_id)) {\n-        if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+        if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;\n         }\n     }"}]}