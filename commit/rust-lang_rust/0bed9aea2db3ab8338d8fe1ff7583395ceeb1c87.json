{"sha": "0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZWQ5YWVhMmRiM2FiODMzOGQ4ZmUxZmY3NTgzMzk1Y2VlYjFjODc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-02T09:18:47Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-26T18:22:37Z"}, "message": "Make populate_module_if_necessary a method of resolver", "tree": {"sha": "33587dcfba422f6acaa5c1bcc6c8121dd997ec63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33587dcfba422f6acaa5c1bcc6c8121dd997ec63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87", "html_url": "https://github.com/rust-lang/rust/commit/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f0f4a624fbff057514d6ee1bc20cf49145aa50", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f0f4a624fbff057514d6ee1bc20cf49145aa50", "html_url": "https://github.com/rust-lang/rust/commit/77f0f4a624fbff057514d6ee1bc20cf49145aa50"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "8d9ce36a14842dbcebf25e317731cd8e34792673", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87", "patch": "@@ -532,16 +532,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    /// Ensures that the reduced graph rooted at the given external module\n-    /// is built, building it if it is not.\n-    fn populate_module_if_necessary(&mut self, module: Module<'b>) {\n-        if module.populated.get() { return }\n-        for child in self.session.cstore.item_children(module.def_id().unwrap()) {\n-            self.build_reduced_graph_for_external_crate_def(module, child);\n-        }\n-        module.populated.set(true)\n-    }\n-\n     /// Builds the reduced graph rooted at the 'use' directive for an external\n     /// crate.\n     fn build_reduced_graph_for_external_crate(&mut self, root: Module<'b>) {\n@@ -585,6 +575,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n+    /// Ensures that the reduced graph rooted at the given external module\n+    /// is built, building it if it is not.\n+    pub fn populate_module_if_necessary(&mut self, module: Module<'a>) {\n+        if module.populated.get() { return }\n+        let mut builder = GraphBuilder { resolver: self };\n+        for child in self.session.cstore.item_children(module.def_id().unwrap()) {\n+            builder.build_reduced_graph_for_external_crate_def(module, child);\n+        }\n+        module.populated.set(true)\n+    }\n+}\n+\n struct BuildReducedGraphVisitor<'a, 'b: 'a, 'tcx: 'b> {\n     builder: GraphBuilder<'a, 'b, 'tcx>,\n     parent: Module<'b>,\n@@ -617,8 +620,3 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n pub fn build_reduced_graph(resolver: &mut Resolver, krate: &hir::Crate) {\n     GraphBuilder { resolver: resolver }.build_reduced_graph(krate);\n }\n-\n-pub fn populate_module_if_necessary<'a, 'tcx>(resolver: &mut Resolver<'a, 'tcx>,\n-                                              module: Module<'a>) {\n-    GraphBuilder { resolver: resolver }.populate_module_if_necessary(module);\n-}"}, {"sha": "dcb60addc755c5e0e182b6a23189e50cebc36a8f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87", "patch": "@@ -1542,7 +1542,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                               -> ResolveResult<&'a NameBinding<'a>> {\n         debug!(\"(resolving name in module) resolving `{}` in `{}`\", name, module_to_string(module));\n \n-        build_reduced_graph::populate_module_if_necessary(self, module);\n+        self.populate_module_if_necessary(module);\n         match use_lexical_scope {\n             true => module.resolve_name_in_lexical_scope(name, namespace)\n                           .map(Success).unwrap_or(Failed(None)),\n@@ -3363,7 +3363,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         while let Some((in_module,\n                         path_segments,\n                         in_module_is_extern)) = worklist.pop() {\n-            build_reduced_graph::populate_module_if_necessary(self, &in_module);\n+            self.populate_module_if_necessary(in_module);\n \n             in_module.for_each_child(|name, ns, name_binding| {\n "}, {"sha": "351dc8e319253756c2838a913fa71b41246a4235", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0bed9aea2db3ab8338d8fe1ff7583395ceeb1c87", "patch": "@@ -21,8 +21,6 @@ use UseLexicalScopeFlag;\n use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n-use build_reduced_graph;\n-\n use rustc::lint;\n use rustc::middle::def::*;\n \n@@ -610,7 +608,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             let msg = \"Cannot glob-import a module into itself.\".into();\n             return Failed(Some((directive.span, msg)));\n         }\n-        build_reduced_graph::populate_module_if_necessary(self.resolver, target_module);\n+        self.resolver.populate_module_if_necessary(target_module);\n \n         if directive.is_prelude {\n             *module_.prelude.borrow_mut() = Some(target_module);"}]}