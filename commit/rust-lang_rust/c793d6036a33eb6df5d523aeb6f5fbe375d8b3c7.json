{"sha": "c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTNkNjAzNmEzM2ViNmRmNWQ1MjNhZWI2ZjVmYmUzNzVkOGIzYzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-08T23:00:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:29:19Z"}, "message": "handle binary suffices (for Windows); stop deleting fake binary", "tree": {"sha": "2ce878435db90bf13e869571b0c0b0564dde7041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce878435db90bf13e869571b0c0b0564dde7041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7", "html_url": "https://github.com/rust-lang/rust/commit/c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53eab7195a8b4c68e3b51e928ffed4b4580c9cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2", "html_url": "https://github.com/rust-lang/rust/commit/53eab7195a8b4c68e3b51e928ffed4b4580c9cf2"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "537f071c9d463804819861de013dbf9447f45b13", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=c793d6036a33eb6df5d523aeb6f5fbe375d8b3c7", "patch": "@@ -59,6 +59,14 @@ impl CrateRunInfo {\n         let env = env::vars_os().collect();\n         CrateRunInfo { args, env }\n     }\n+\n+    fn store(&self, filename: &Path) {\n+        let file = File::create(filename)\n+            .unwrap_or_else(|_| show_error(format!(\"Cannot create `{}`\", filename.display())));\n+        let file = BufWriter::new(file);\n+        serde_json::ser::to_writer(file, self)\n+            .unwrap_or_else(|_| show_error(format!(\"Cannot write to `{}`\", filename.display())));\n+    }\n }\n \n fn show_help() {\n@@ -482,18 +490,16 @@ fn phase_cargo_rustc(args: env::Args) {\n         // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n         // and environment variables; this is used when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n         let info = CrateRunInfo::collect(args);\n-        // FIXME: Windows might need a \".exe\" suffix.\n         let filename = out_filename(\"\", \"\");\n-\n         if verbose {\n             eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n         }\n \n-        let file = File::create(&filename)\n-            .unwrap_or_else(|_| show_error(format!(\"Cannot create `{}`\", filename.display())));\n-        let file = BufWriter::new(file);\n-        serde_json::ser::to_writer(file, &info)\n-            .unwrap_or_else(|_| show_error(format!(\"Cannot write to `{}`\", filename.display())));\n+        info.store(&filename);\n+        // For Windows, do the same thing again with `.exe` appended to the filename.\n+        // (Need to do this here as cargo moves that \"binary\" to a different place before running it.)\n+        info.store(&out_filename(\"\", \".exe\"));\n+\n         return;\n     }\n \n@@ -558,16 +564,11 @@ fn phase_cargo_rustc(args: env::Args) {\n fn phase_cargo_runner(binary: &str, binary_args: env::Args) {\n     let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n \n-    // Strip extension from binary name (Windows adds \".exe\").\n-    let mut filename = PathBuf::from(binary);\n-    filename.set_extension(\"\");\n-    let file = File::open(&filename)\n+    let file = File::open(&binary)\n         .unwrap_or_else(|_| show_error(format!(\"File {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n     let file = BufReader::new(file);\n     let info: CrateRunInfo = serde_json::from_reader(file)\n         .unwrap_or_else(|_| show_error(format!(\"File {:?} does not contain valid JSON\", binary)));\n-    fs::remove_file(&filename)\n-        .unwrap_or_else(|_| show_error(format!(\"Unable to remove file {:?}\", binary)));\n \n     let mut cmd = miri();\n     // Forward rustc arguments. We need to patch \"--extern\" filenames because\n@@ -593,10 +594,10 @@ fn phase_cargo_runner(binary: &str, binary_args: env::Args) {\n     if let Ok(a) = env::var(\"MIRIFLAGS\") {\n         // This code is taken from `RUSTFLAGS` handling in cargo.\n         let args = a\n-                .split(' ')\n-                .map(str::trim)\n-                .filter(|s| !s.is_empty())\n-                .map(str::to_string);\n+            .split(' ')\n+            .map(str::trim)\n+            .filter(|s| !s.is_empty())\n+            .map(str::to_string);\n         cmd.args(args);\n     }\n "}]}