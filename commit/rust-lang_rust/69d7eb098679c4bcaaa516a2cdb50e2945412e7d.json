{"sha": "69d7eb098679c4bcaaa516a2cdb50e2945412e7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZDdlYjA5ODY3OWM0YmNhYWE1MTZhMmNkYjUwZTI5NDU0MTJlN2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-15T01:18:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-15T01:18:21Z"}, "message": "Merge pull request #2441 from topecongiro/issue-2438\n\nReturn `None` when format_code_block may have failed", "tree": {"sha": "532d99edd49dbb5d065f1407f4fcccea1c195c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/532d99edd49dbb5d065f1407f4fcccea1c195c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d7eb098679c4bcaaa516a2cdb50e2945412e7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJahN/dCRBK7hj4Ov3rIwAAdHIIAKRcHPNDTm+S07ZTssQ4hbIB\nmK62HBTEbemA8i+szdtPnLWlXmEuePe9ei7ttEtd1JVuKa9lajZqPbrwubfQ2P9f\nns5ePqImkD7gMRxk8Be9DpXOtXvE7CncISR+T3YKuIY3GxWgOX2hY+Wlv8IuMInH\njxg0Fdla3gjMg57SlcGJhoL39e9TZO8Aybvkrz53pXsSUT4v3lGc79fsVK45dPXO\n+I3cQfK58ARCQuVTy+GqyQmb4DZ0UTKINU2KNUu0vy9OTB84Db6Ei2Kl3HzW2m8t\nrYVtefZapvp+Htnr8cu8qoQeeDqhk2h46GfLAOjgS3ECBKvuScXx+RPGI2dFkN8=\n=701X\n-----END PGP SIGNATURE-----\n", "payload": "tree 532d99edd49dbb5d065f1407f4fcccea1c195c7e\nparent c5347fc91e5e5e498676541b36888e50425b0cc8\nparent 785da7439f89d55fbac38e4247c938315fa4449c\nauthor Nick Cameron <nrc@ncameron.org> 1518657501 +1300\ncommitter GitHub <noreply@github.com> 1518657501 +1300\n\nMerge pull request #2441 from topecongiro/issue-2438\n\nReturn `None` when format_code_block may have failed"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d7eb098679c4bcaaa516a2cdb50e2945412e7d", "html_url": "https://github.com/rust-lang/rust/commit/69d7eb098679c4bcaaa516a2cdb50e2945412e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d7eb098679c4bcaaa516a2cdb50e2945412e7d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5347fc91e5e5e498676541b36888e50425b0cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5347fc91e5e5e498676541b36888e50425b0cc8", "html_url": "https://github.com/rust-lang/rust/commit/c5347fc91e5e5e498676541b36888e50425b0cc8"}, {"sha": "785da7439f89d55fbac38e4247c938315fa4449c", "url": "https://api.github.com/repos/rust-lang/rust/commits/785da7439f89d55fbac38e4247c938315fa4449c", "html_url": "https://github.com/rust-lang/rust/commit/785da7439f89d55fbac38e4247c938315fa4449c"}], "stats": {"total": 83, "additions": 58, "deletions": 25}, "files": [{"sha": "f0703e11e32ae14f2e2029689c1b30caf9d48edf", "filename": "rustfmt-core/src/lib.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/69d7eb098679c4bcaaa516a2cdb50e2945412e7d/rustfmt-core%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d7eb098679c4bcaaa516a2cdb50e2945412e7d/rustfmt-core%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Flib.rs?ref=69d7eb098679c4bcaaa516a2cdb50e2945412e7d", "patch": "@@ -564,35 +564,45 @@ pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String>\n     // Wrap the given code block with `fn main()` if it does not have one.\n     let fn_main_prefix = \"fn main() {\\n\";\n     let snippet = fn_main_prefix.to_owned() + code_snippet + \"\\n}\";\n+    let mut result = String::with_capacity(snippet.len());\n+    let mut is_first = true;\n \n     // Trim \"fn main() {\" on the first line and \"}\" on the last line,\n     // then unindent the whole code block.\n-    format_snippet(&snippet, config).map(|s| {\n-        // 2 = \"}\\n\"\n-        s[fn_main_prefix.len()..s.len().checked_sub(2).unwrap_or(0)]\n-            .lines()\n-            .map(|line| {\n-                if line.len() > config.tab_spaces() {\n-                    // Make sure that the line has leading whitespaces.\n-                    let indent_str =\n-                        Indent::from_width(config, config.tab_spaces()).to_string(config);\n-                    if line.starts_with(indent_str.as_ref()) {\n-                        let offset = if config.hard_tabs() {\n-                            1\n-                        } else {\n-                            config.tab_spaces()\n-                        };\n-                        &line[offset..]\n-                    } else {\n-                        line\n-                    }\n+    let formatted = format_snippet(&snippet, config)?;\n+    // 2 = \"}\\n\"\n+    let block_len = formatted.len().checked_sub(2).unwrap_or(0);\n+    for line in formatted[fn_main_prefix.len()..block_len].lines() {\n+        if !is_first {\n+            result.push('\\n');\n+        } else {\n+            is_first = false;\n+        }\n+        let trimmed_line = if line.len() > config.max_width() {\n+            // If there are lines that are larger than max width, we cannot tell\n+            // whether we have succeeded but have some comments or strings that\n+            // are too long, or we have failed to format code block. We will be\n+            // conservative and just return `None` in this case.\n+            return None;\n+        } else if line.len() > config.tab_spaces() {\n+            // Make sure that the line has leading whitespaces.\n+            let indent_str = Indent::from_width(config, config.tab_spaces()).to_string(config);\n+            if line.starts_with(indent_str.as_ref()) {\n+                let offset = if config.hard_tabs() {\n+                    1\n                 } else {\n-                    line\n-                }\n-            })\n-            .collect::<Vec<_>>()\n-            .join(\"\\n\")\n-    })\n+                    config.tab_spaces()\n+                };\n+                &line[offset..]\n+            } else {\n+                line\n+            }\n+        } else {\n+            line\n+        };\n+        result.push_str(trimmed_line);\n+    }\n+    Some(result)\n }\n \n pub fn format_input<T: Write>(\n@@ -781,6 +791,12 @@ mod test {\n         assert!(test_format_inner(format_snippet, snippet, expected));\n     }\n \n+    #[test]\n+    fn test_format_code_block_fail() {\n+        let code_block = \"this_line_is_100_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(x, y, z);\";\n+        assert!(format_code_block(code_block, &Config::default()).is_none());\n+    }\n+\n     #[test]\n     fn test_format_code_block() {\n         // simple code block"}, {"sha": "02c9717e11e047ce8c638c0456d076866911a4fd", "filename": "rustfmt-core/tests/source/macro_rules.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69d7eb098679c4bcaaa516a2cdb50e2945412e7d/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d7eb098679c4bcaaa516a2cdb50e2945412e7d/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs?ref=69d7eb098679c4bcaaa516a2cdb50e2945412e7d", "patch": "@@ -50,6 +50,15 @@ macro m2 {\n }\n }\n \n+\n+// #2438\n+macro_rules! m {\n+    () => {\n+        this_line_is_99_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+        ); // this line is drifting\n+    };\n+}\n+\n // #2439\n macro_rules! m {\n     ("}, {"sha": "b2f4fc067ac7e17be1617806d37fe7753a2e7821", "filename": "rustfmt-core/tests/target/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d7eb098679c4bcaaa516a2cdb50e2945412e7d/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d7eb098679c4bcaaa516a2cdb50e2945412e7d/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs?ref=69d7eb098679c4bcaaa516a2cdb50e2945412e7d", "patch": "@@ -42,6 +42,14 @@ macro m2 {\n     }\n }\n \n+// #2438\n+macro_rules! m {\n+    () => {\n+        this_line_is_99_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+        ); // this line is drifting\n+    };\n+}\n+\n // #2439\n macro_rules! m {\n     ("}]}