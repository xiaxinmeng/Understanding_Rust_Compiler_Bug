{"sha": "136151515abffabdedbe0087f8fc21a67c071dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNjE1MTUxNWFiZmZhYmRlZGJlMDA4N2Y4ZmMyMWE2N2MwNzFkYzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-25T11:42:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-25T11:43:08Z"}, "message": "Replace generic with a concrete type", "tree": {"sha": "e5a076f307ea6653d6168a1102de352a3c544532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5a076f307ea6653d6168a1102de352a3c544532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/136151515abffabdedbe0087f8fc21a67c071dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/136151515abffabdedbe0087f8fc21a67c071dc6", "html_url": "https://github.com/rust-lang/rust/commit/136151515abffabdedbe0087f8fc21a67c071dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/136151515abffabdedbe0087f8fc21a67c071dc6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe48a0115c24240f5a3e1b329e642f18e2715d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe48a0115c24240f5a3e1b329e642f18e2715d6", "html_url": "https://github.com/rust-lang/rust/commit/1fe48a0115c24240f5a3e1b329e642f18e2715d6"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "c6d15af5fc6aa34a3de9911f8899e8e7d797f1a3", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/136151515abffabdedbe0087f8fc21a67c071dc6/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136151515abffabdedbe0087f8fc21a67c071dc6/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=136151515abffabdedbe0087f8fc21a67c071dc6", "patch": "@@ -1,7 +1,8 @@\n //! `AstTransformer`s are functions that replace nodes in an AST and can be easily combined.\n use rustc_hash::FxHashMap;\n \n-use hir::{db::HirDatabase, InFile, PathResolution};\n+use hir::{InFile, PathResolution};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode};\n \n pub trait AstTransform<'a> {\n@@ -33,18 +34,18 @@ impl<'a> AstTransform<'a> for NullTransformer {\n     }\n }\n \n-pub struct SubstituteTypeParams<'a, DB: HirDatabase> {\n-    db: &'a DB,\n+pub struct SubstituteTypeParams<'a> {\n+    db: &'a RootDatabase,\n     substs: FxHashMap<hir::TypeParam, ast::TypeRef>,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n-impl<'a, DB: HirDatabase> SubstituteTypeParams<'a, DB> {\n+impl<'a> SubstituteTypeParams<'a> {\n     pub fn for_trait_impl(\n-        db: &'a DB,\n+        db: &'a RootDatabase,\n         trait_: hir::Trait,\n         impl_block: ast::ImplBlock,\n-    ) -> SubstituteTypeParams<'a, DB> {\n+    ) -> SubstituteTypeParams<'a> {\n         let substs = get_syntactic_substs(impl_block).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n         let substs_by_param: FxHashMap<_, _> = generic_def\n@@ -95,7 +96,7 @@ impl<'a, DB: HirDatabase> SubstituteTypeParams<'a, DB> {\n     }\n }\n \n-impl<'a, DB: HirDatabase> AstTransform<'a> for SubstituteTypeParams<'a, DB> {\n+impl<'a> AstTransform<'a> for SubstituteTypeParams<'a> {\n     fn get_substitution(\n         &self,\n         node: InFile<&ra_syntax::SyntaxNode>,\n@@ -107,14 +108,14 @@ impl<'a, DB: HirDatabase> AstTransform<'a> for SubstituteTypeParams<'a, DB> {\n     }\n }\n \n-pub struct QualifyPaths<'a, DB: HirDatabase> {\n-    db: &'a DB,\n+pub struct QualifyPaths<'a> {\n+    db: &'a RootDatabase,\n     from: Option<hir::Module>,\n     previous: Box<dyn AstTransform<'a> + 'a>,\n }\n \n-impl<'a, DB: HirDatabase> QualifyPaths<'a, DB> {\n-    pub fn new(db: &'a DB, from: Option<hir::Module>) -> Self {\n+impl<'a> QualifyPaths<'a> {\n+    pub fn new(db: &'a RootDatabase, from: Option<hir::Module>) -> Self {\n         Self { db, from, previous: Box::new(NullTransformer) }\n     }\n \n@@ -168,7 +169,7 @@ pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: InFile<N>\n     N::cast(result).unwrap()\n }\n \n-impl<'a, DB: HirDatabase> AstTransform<'a> for QualifyPaths<'a, DB> {\n+impl<'a> AstTransform<'a> for QualifyPaths<'a> {\n     fn get_substitution(\n         &self,\n         node: InFile<&ra_syntax::SyntaxNode>,"}, {"sha": "e6a8eb146f410ef5d6256b6cd4dca390d091abce", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/136151515abffabdedbe0087f8fc21a67c071dc6/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136151515abffabdedbe0087f8fc21a67c071dc6/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=136151515abffabdedbe0087f8fc21a67c071dc6", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn supported_token_modifiers() -> &'static [SemanticTokenModifier] {\n }\n \n /// Tokens are encoded relative to each other.\n-/// \n+///\n /// This is a direct port of https://github.com/microsoft/vscode-languageserver-node/blob/f425af9de46a0187adb78ec8a46b9b2ce80c5412/server/src/sematicTokens.proposed.ts#L45\n #[derive(Default)]\n pub(crate) struct SemanticTokensBuilder {"}]}