{"sha": "486c7175fe784194e4523c53ca12d5528f6f9134", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NmM3MTc1ZmU3ODQxOTRlNDUyM2M1M2NhMTJkNTUyOGY2ZjkxMzQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-05T14:02:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-05T14:02:39Z"}, "message": "Remove unnecessary allocs in case_conv", "tree": {"sha": "a91911ae9662ed705d98af5d45cbf12e1ff76863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91911ae9662ed705d98af5d45cbf12e1ff76863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/486c7175fe784194e4523c53ca12d5528f6f9134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/486c7175fe784194e4523c53ca12d5528f6f9134", "html_url": "https://github.com/rust-lang/rust/commit/486c7175fe784194e4523c53ca12d5528f6f9134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/486c7175fe784194e4523c53ca12d5528f6f9134/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac5958485e5e77b020b3ebe0c100df5a5fe6ca08", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5958485e5e77b020b3ebe0c100df5a5fe6ca08", "html_url": "https://github.com/rust-lang/rust/commit/ac5958485e5e77b020b3ebe0c100df5a5fe6ca08"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "3ab36caf2bbf8f59176755339a595108921cdcfa", "filename": "crates/hir_ty/src/diagnostics/decl_check/case_conv.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/486c7175fe784194e4523c53ca12d5528f6f9134/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fcase_conv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486c7175fe784194e4523c53ca12d5528f6f9134/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fcase_conv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fcase_conv.rs?ref=486c7175fe784194e4523c53ca12d5528f6f9134", "patch": "@@ -5,7 +5,7 @@\n // from file /compiler/rustc_lint/src/nonstandard_style.rs\n \n /// Converts an identifier to an UpperCamelCase form.\n-/// Returns `None` if the string is already is UpperCamelCase.\n+/// Returns `None` if the string is already in UpperCamelCase.\n pub(crate) fn to_camel_case(ident: &str) -> Option<String> {\n     if is_camel_case(ident) {\n         return None;\n@@ -17,7 +17,7 @@ pub(crate) fn to_camel_case(ident: &str) -> Option<String> {\n         .split('_')\n         .filter(|component| !component.is_empty())\n         .map(|component| {\n-            let mut camel_cased_component = String::new();\n+            let mut camel_cased_component = String::with_capacity(component.len());\n \n             let mut new_word = true;\n             let mut prev_is_lower_case = true;\n@@ -30,9 +30,9 @@ pub(crate) fn to_camel_case(ident: &str) -> Option<String> {\n                 }\n \n                 if new_word {\n-                    camel_cased_component.push_str(&c.to_uppercase().to_string());\n+                    camel_cased_component.extend(c.to_uppercase());\n                 } else {\n-                    camel_cased_component.push_str(&c.to_lowercase().to_string());\n+                    camel_cased_component.extend(c.to_lowercase());\n                 }\n \n                 prev_is_lower_case = c.is_lowercase();\n@@ -41,16 +41,16 @@ pub(crate) fn to_camel_case(ident: &str) -> Option<String> {\n \n             camel_cased_component\n         })\n-        .fold((String::new(), None), |(acc, prev): (String, Option<String>), next| {\n+        .fold((String::new(), None), |(acc, prev): (_, Option<String>), next| {\n             // separate two components with an underscore if their boundary cannot\n             // be distinguished using a uppercase/lowercase case distinction\n-            let join = if let Some(prev) = prev {\n-                let l = prev.chars().last().unwrap();\n-                let f = next.chars().next().unwrap();\n-                !char_has_case(l) && !char_has_case(f)\n-            } else {\n-                false\n-            };\n+            let join = prev\n+                .and_then(|prev| {\n+                    let f = next.chars().next()?;\n+                    let l = prev.chars().last()?;\n+                    Some(!char_has_case(l) && !char_has_case(f))\n+                })\n+                .unwrap_or(false);\n             (acc + if join { \"_\" } else { \"\" } + &next, Some(next))\n         })\n         .0;\n@@ -92,14 +92,12 @@ fn is_camel_case(name: &str) -> bool {\n     let mut fst = None;\n     // start with a non-lowercase letter rather than non-uppercase\n     // ones (some scripts don't have a concept of upper/lowercase)\n-    !name.chars().next().unwrap().is_lowercase()\n+    name.chars().next().map_or(true, |c| !c.is_lowercase())\n         && !name.contains(\"__\")\n         && !name.chars().any(|snd| {\n-            let ret = match (fst, snd) {\n-                (None, _) => false,\n-                (Some(fst), snd) => {\n-                    char_has_case(fst) && snd == '_' || char_has_case(snd) && fst == '_'\n-                }\n+            let ret = match fst {\n+                None => false,\n+                Some(fst) => char_has_case(fst) && snd == '_' || char_has_case(snd) && fst == '_',\n             };\n             fst = Some(snd);\n "}]}