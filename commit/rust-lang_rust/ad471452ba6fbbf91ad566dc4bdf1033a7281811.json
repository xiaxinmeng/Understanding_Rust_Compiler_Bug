{"sha": "ad471452ba6fbbf91ad566dc4bdf1033a7281811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDcxNDUyYmE2ZmJiZjkxYWQ1NjZkYzRiZGYxMDMzYTcyODE4MTE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-18T06:19:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-18T12:20:33Z"}, "message": "Make `Directory::path` a `Cow`.\n\nBecause we create a lot of these in the macro parser, but only very\nrarely modify them.\n\nThis speeds up some html5ever runs by 2--3%.", "tree": {"sha": "4283b14578ef76334ee4dfc9eaf6bd71ed8ffa98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4283b14578ef76334ee4dfc9eaf6bd71ed8ffa98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad471452ba6fbbf91ad566dc4bdf1033a7281811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad471452ba6fbbf91ad566dc4bdf1033a7281811", "html_url": "https://github.com/rust-lang/rust/commit/ad471452ba6fbbf91ad566dc4bdf1033a7281811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad471452ba6fbbf91ad566dc4bdf1033a7281811/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf2b24e1bafb66f87c4aa03cabac839032d9ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf2b24e1bafb66f87c4aa03cabac839032d9ad1", "html_url": "https://github.com/rust-lang/rust/commit/fcf2b24e1bafb66f87c4aa03cabac839032d9ad1"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "416634c2960ae21341671b73d5a3449daa7b810e", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=ad471452ba6fbbf91ad566dc4bdf1033a7281811", "patch": "@@ -26,6 +26,7 @@ use parse::token::Token::*;\n use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n \n+use std::borrow::Cow;\n use std::collections::HashMap;\n use std::collections::hash_map::Entry;\n \n@@ -141,7 +142,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                 }\n \n                 let directory = Directory {\n-                    path: cx.current_expansion.module.directory.clone(),\n+                    path: Cow::from(cx.current_expansion.module.directory.as_path()),\n                     ownership: cx.current_expansion.directory_ownership,\n                 };\n                 let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false);"}, {"sha": "0abedb99bd0376564ac2daac7f27c2253616167e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ad471452ba6fbbf91ad566dc4bdf1033a7281811", "patch": "@@ -23,6 +23,7 @@ use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n use diagnostics::plugin::ErrorMap;\n \n+use std::borrow::Cow;\n use std::collections::HashSet;\n use std::iter;\n use std::path::{Path, PathBuf};\n@@ -89,8 +90,8 @@ impl ParseSess {\n }\n \n #[derive(Clone)]\n-pub struct Directory {\n-    pub path: PathBuf,\n+pub struct Directory<'a> {\n+    pub path: Cow<'a, Path>,\n     pub ownership: DirectoryOwnership,\n }\n "}, {"sha": "3a53665a032832375007b1a5f7c9e6430c745806", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ad471452ba6fbbf91ad566dc4bdf1033a7281811", "patch": "@@ -57,6 +57,7 @@ use tokenstream::{self, Delimited, ThinTokenStream, TokenTree, TokenStream};\n use symbol::{Symbol, keywords};\n use util::ThinVec;\n \n+use std::borrow::Cow;\n use std::cmp;\n use std::mem;\n use std::path::{self, Path, PathBuf};\n@@ -228,7 +229,7 @@ pub struct Parser<'a> {\n     prev_token_kind: PrevTokenKind,\n     pub restrictions: Restrictions,\n     /// Used to determine the path to externally loaded source files\n-    pub directory: Directory,\n+    pub directory: Directory<'a>,\n     /// Whether to parse sub-modules in other files.\n     pub recurse_into_file_modules: bool,\n     /// Name of the root module this parser originated from. If `None`, then the\n@@ -535,7 +536,7 @@ enum TokenExpectType {\n impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess,\n                tokens: TokenStream,\n-               directory: Option<Directory>,\n+               directory: Option<Directory<'a>>,\n                recurse_into_file_modules: bool,\n                desugar_doc_comments: bool)\n                -> Self {\n@@ -549,7 +550,7 @@ impl<'a> Parser<'a> {\n             restrictions: Restrictions::empty(),\n             recurse_into_file_modules,\n             directory: Directory {\n-                path: PathBuf::new(),\n+                path: Cow::from(PathBuf::new()),\n                 ownership: DirectoryOwnership::Owned { relative: None }\n             },\n             root_module_name: None,\n@@ -572,9 +573,9 @@ impl<'a> Parser<'a> {\n         if let Some(directory) = directory {\n             parser.directory = directory;\n         } else if !parser.span.source_equal(&DUMMY_SP) {\n-            if let FileName::Real(path) = sess.codemap().span_to_unmapped_path(parser.span) {\n-                parser.directory.path = path;\n-                parser.directory.path.pop();\n+            if let FileName::Real(mut path) = sess.codemap().span_to_unmapped_path(parser.span) {\n+                path.pop();\n+                parser.directory.path = Cow::from(path);\n             }\n         }\n \n@@ -6000,10 +6001,10 @@ impl<'a> Parser<'a> {\n \n     fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {\n         if let Some(path) = attr::first_attr_value_str_by_name(attrs, \"path\") {\n-            self.directory.path.push(&path.as_str());\n+            self.directory.path.to_mut().push(&path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n-            self.directory.path.push(&id.name.as_str());\n+            self.directory.path.to_mut().push(&id.name.as_str());\n         }\n     }\n "}, {"sha": "455cc4391dd3b535877d8b79d03a926859833a95", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad471452ba6fbbf91ad566dc4bdf1033a7281811/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=ad471452ba6fbbf91ad566dc4bdf1033a7281811", "patch": "@@ -31,6 +31,7 @@ use print::pprust;\n use serialize::{Decoder, Decodable, Encoder, Encodable};\n use util::RcSlice;\n \n+use std::borrow::Cow;\n use std::{fmt, iter, mem};\n use std::hash::{self, Hash};\n \n@@ -106,7 +107,7 @@ impl TokenTree {\n                  -> macro_parser::NamedParseResult {\n         // `None` is because we're not interpolating\n         let directory = Directory {\n-            path: cx.current_expansion.module.directory.clone(),\n+            path: Cow::from(cx.current_expansion.module.directory.as_path()),\n             ownership: cx.current_expansion.directory_ownership,\n         };\n         macro_parser::parse(cx.parse_sess(), tts, mtch, Some(directory), true)"}]}