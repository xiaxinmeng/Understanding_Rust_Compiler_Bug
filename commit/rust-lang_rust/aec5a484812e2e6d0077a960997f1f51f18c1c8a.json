{"sha": "aec5a484812e2e6d0077a960997f1f51f18c1c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYzVhNDg0ODEyZTJlNmQwMDc3YTk2MDk5N2YxZjUxZjE4YzFjOGE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-21T15:31:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: move <...>-less impl path special-case to pretty_path_qualified.", "tree": {"sha": "0cb68f70bb7d1b6d2ce8fd418679af95070d1eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cb68f70bb7d1b6d2ce8fd418679af95070d1eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aec5a484812e2e6d0077a960997f1f51f18c1c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aec5a484812e2e6d0077a960997f1f51f18c1c8a", "html_url": "https://github.com/rust-lang/rust/commit/aec5a484812e2e6d0077a960997f1f51f18c1c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aec5a484812e2e6d0077a960997f1f51f18c1c8a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15bfc6f483c552f793932f7ac7fcbb69d187681", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15bfc6f483c552f793932f7ac7fcbb69d187681", "html_url": "https://github.com/rust-lang/rust/commit/a15bfc6f483c552f793932f7ac7fcbb69d187681"}], "stats": {"total": 89, "additions": 43, "deletions": 46}, "files": [{"sha": "77fed9cf1d15c536cc44e1d5ee761cefcc184630", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=aec5a484812e2e6d0077a960997f1f51f18c1c8a", "patch": "@@ -173,10 +173,9 @@ pub trait Printer: Sized {\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n+        ns: Namespace,\n     ) -> Self::Path;\n     #[must_use]\n-    fn path_impl(self: &mut PrintCx<'_, '_, '_, Self>, text: &str) -> Self::Path;\n-    #[must_use]\n     fn path_append(\n         self: &mut PrintCx<'_, '_, '_, Self>,\n         path: Self::Path,\n@@ -291,7 +290,7 @@ impl<P: Printer> PrintCx<'a, 'gcx, 'tcx, P> {\n                         parent_generics.has_self && parent_generics.parent_count == 0;\n                     if let (Some(substs), true) = (substs, parent_has_own_self) {\n                         let trait_ref = ty::TraitRef::new(parent_def_id, substs);\n-                        self.path_qualified(trait_ref.self_ty(), Some(trait_ref))\n+                        self.path_qualified(trait_ref.self_ty(), Some(trait_ref), ns)\n                     } else {\n                         self.print_def_path(parent_def_id, substs, ns, iter::empty())\n                     }\n@@ -367,35 +366,7 @@ impl<P: Printer> PrintCx<'a, 'gcx, 'tcx, P> {\n \n         // Otherwise, try to give a good form that would be valid language\n         // syntax. Preferably using associated item notation.\n-\n-        if let Some(trait_ref) = impl_trait_ref {\n-            // Trait impls.\n-            return self.path_qualified(self_ty, Some(trait_ref));\n-        }\n-\n-        // Inherent impls. Try to print `Foo::bar` for an inherent\n-        // impl on `Foo`, but fallback to `<Foo>::bar` if self-type is\n-        // anything other than a simple path.\n-        match self_ty.sty {\n-            ty::Adt(adt_def, substs) => {\n-                self.print_def_path(adt_def.did, Some(substs), ns, iter::empty())\n-            }\n-\n-            ty::Foreign(did) => self.print_def_path(did, None, ns, iter::empty()),\n-\n-            ty::Bool |\n-            ty::Char |\n-            ty::Int(_) |\n-            ty::Uint(_) |\n-            ty::Float(_) |\n-            ty::Str => {\n-                self.path_impl(&self_ty.to_string())\n-            }\n-\n-            _ => {\n-                self.path_qualified(self_ty, None)\n-            }\n-        }\n+        self.path_qualified(self_ty, impl_trait_ref, ns)\n     }\n }\n \n@@ -587,7 +558,30 @@ impl<P: PrettyPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         &mut self,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n+        ns: Namespace,\n     ) -> P::Path {\n+        if trait_ref.is_none() {\n+            // Inherent impls. Try to print `Foo::bar` for an inherent\n+            // impl on `Foo`, but fallback to `<Foo>::bar` if self-type is\n+            // anything other than a simple path.\n+            match self_ty.sty {\n+                ty::Adt(adt_def, substs) => {\n+                    return self.print_def_path(adt_def.did, Some(substs), ns, iter::empty());\n+                }\n+                ty::Foreign(did) => {\n+                    return self.print_def_path(did, None, ns, iter::empty());\n+                }\n+\n+                ty::Bool | ty::Char | ty::Str |\n+                ty::Int(_) | ty::Uint(_) | ty::Float(_) => {\n+                    self_ty.print_display(self)?;\n+                    return Ok(PrettyPath { empty: false });\n+                }\n+\n+                _ => {}\n+            }\n+        }\n+\n         write!(self.printer, \"<\")?;\n         self_ty.print_display(self)?;\n         if let Some(trait_ref) = trait_ref {\n@@ -781,12 +775,9 @@ impl<F: fmt::Write> Printer for FmtPrinter<F> {\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n+        ns: Namespace,\n     ) -> Self::Path {\n-        self.pretty_path_qualified(self_ty, trait_ref)\n-    }\n-    fn path_impl(self: &mut PrintCx<'_, '_, '_, Self>, text: &str) -> Self::Path {\n-        write!(self.printer, \"{}\", text)?;\n-        Ok(PrettyPath { empty: false })\n+        self.pretty_path_qualified(self_ty, trait_ref, ns)\n     }\n     fn path_append(\n         self: &mut PrintCx<'_, '_, '_, Self>,"}, {"sha": "3c34d2540990a7a5ea8d0efdc3b49146021822fc", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=aec5a484812e2e6d0077a960997f1f51f18c1c8a", "patch": "@@ -1007,7 +1007,7 @@ define_print! {\n             Ok(())\n         }\n         debug {\n-            let _ = cx.path_qualified(self.self_ty(), Some(*self))?;\n+            let _ = cx.path_qualified(self.self_ty(), Some(*self), Namespace::TypeNS)?;\n             Ok(())\n         }\n     }"}, {"sha": "0ea141b6574b9b53cfb5fdd09eb55017528f3b52", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=aec5a484812e2e6d0077a960997f1f51f18c1c8a", "patch": "@@ -416,16 +416,24 @@ impl Printer for SymbolPath {\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n+        ns: Namespace,\n     ) -> Self::Path {\n+        // HACK(eddyb) avoid `keep_within_component` for the cases\n+        // that print without `<...>` around `self_ty`.\n+        match self_ty.sty {\n+            ty::Adt(..) | ty::Foreign(_) |\n+            ty::Bool | ty::Char | ty::Str |\n+            ty::Int(_) | ty::Uint(_) | ty::Float(_) if trait_ref.is_none() => {\n+                return self.pretty_path_qualified(self_ty, trait_ref, ns);\n+            }\n+            _ => {}\n+        }\n+\n         let kept_within_component = mem::replace(&mut self.printer.keep_within_component, true);\n-        let r = self.pretty_path_qualified(self_ty, trait_ref);\n+        let r = self.pretty_path_qualified(self_ty, trait_ref, ns);\n         self.printer.keep_within_component = kept_within_component;\n         r\n     }\n-    fn path_impl(self: &mut PrintCx<'_, '_, '_, Self>, text: &str) -> Self::Path {\n-        self.printer.write_str(text)?;\n-        Ok(PrettyPath { empty: false })\n-    }\n     fn path_append(\n         self: &mut PrintCx<'_, '_, '_, Self>,\n         _: Self::Path,"}, {"sha": "4cc18125e049959dc2cbfece1d83f013cd513bd1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec5a484812e2e6d0077a960997f1f51f18c1c8a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=aec5a484812e2e6d0077a960997f1f51f18c1c8a", "patch": "@@ -4239,6 +4239,7 @@ where F: Fn(DefId) -> Def {\n             self: &mut PrintCx<'_, '_, 'tcx, Self>,\n             self_ty: Ty<'tcx>,\n             trait_ref: Option<ty::TraitRef<'tcx>>,\n+            _ns: Namespace,\n         ) -> Self::Path {\n             // This shouldn't ever be needed, but just in case:\n             if let Some(trait_ref) = trait_ref {\n@@ -4247,9 +4248,6 @@ where F: Fn(DefId) -> Def {\n                 vec![format!(\"<{}>\", self_ty)]\n             }\n         }\n-        fn path_impl(self: &mut PrintCx<'_, '_, '_, Self>, text: &str) -> Self::Path {\n-            vec![text.to_string()]\n-        }\n         fn path_append(\n             self: &mut PrintCx<'_, '_, '_, Self>,\n             mut path: Self::Path,"}]}