{"sha": "8b186dfdb70ebfe722975970458c6230841e6911", "node_id": "C_kwDOAAsO6NoAKDhiMTg2ZGZkYjcwZWJmZTcyMjk3NTk3MDQ1OGM2MjMwODQxZTY5MTE", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-27T13:22:43Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-12T13:26:37Z"}, "message": "Add recovery for use of removed `box` syntax", "tree": {"sha": "ff456dece9e8fb66885138e7405725f6950b75e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff456dece9e8fb66885138e7405725f6950b75e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b186dfdb70ebfe722975970458c6230841e6911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b186dfdb70ebfe722975970458c6230841e6911", "html_url": "https://github.com/rust-lang/rust/commit/8b186dfdb70ebfe722975970458c6230841e6911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b186dfdb70ebfe722975970458c6230841e6911/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d5950b4db8feddff469d6c35a8f29f485ce951", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d5950b4db8feddff469d6c35a8f29f485ce951", "html_url": "https://github.com/rust-lang/rust/commit/a8d5950b4db8feddff469d6c35a8f29f485ce951"}], "stats": {"total": 115, "additions": 105, "deletions": 10}, "files": [{"sha": "31a91e1ab6abceabb1832c4b33968c3470dafbc5", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8b186dfdb70ebfe722975970458c6230841e6911/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b186dfdb70ebfe722975970458c6230841e6911/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=8b186dfdb70ebfe722975970458c6230841e6911", "patch": "@@ -8,6 +8,7 @@ use super::{\n \n use crate::errors;\n use crate::maybe_recover_from_interpolated_ty_qpath;\n+use ast::{Path, PathSegment};\n use core::mem;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n@@ -29,6 +30,7 @@ use rustc_session::errors::{report_lit_error, ExprParenthesesNeeded};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::source_map::{self, Span, Spanned};\n+use rustc_span::symbol::kw::PathRoot;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n use thin_vec::{thin_vec, ThinVec};\n@@ -607,6 +609,9 @@ impl<'a> Parser<'a> {\n                 let operand_expr = this.parse_expr_dot_or_call(Default::default())?;\n                 this.recover_from_prefix_increment(operand_expr, pre_span, starts_stmt)\n             }\n+            token::Ident(..) if this.token.is_keyword(kw::Box) => {\n+                make_it!(this, attrs, |this, _| this.parse_expr_box(lo))\n+            }\n             token::Ident(..) if this.may_recover() && this.is_mistaken_not_ident_negation() => {\n                 make_it!(this, attrs, |this, _| this.recover_not_expr(lo))\n             }\n@@ -633,6 +638,29 @@ impl<'a> Parser<'a> {\n         self.parse_expr_unary(lo, UnOp::Not)\n     }\n \n+    /// Parse `box expr` - this syntax has been removed, but we still parse this\n+    /// for now to provide an automated way to fix usages of it\n+    fn parse_expr_box(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n+        let (span, expr) = self.parse_expr_prefix_common(lo)?;\n+        let code = self.sess.source_map().span_to_snippet(span.with_lo(lo.hi())).unwrap();\n+        self.sess.emit_err(errors::BoxSyntaxRemoved { span, code: code.trim() });\n+        // So typechecking works, parse `box <expr>` as `::std::boxed::Box::new(expr)`\n+        let path = Path {\n+            span,\n+            segments: [\n+                PathSegment::from_ident(Ident::with_dummy_span(PathRoot)),\n+                PathSegment::from_ident(Ident::with_dummy_span(sym::std)),\n+                PathSegment::from_ident(Ident::from_str(\"boxed\")),\n+                PathSegment::from_ident(Ident::from_str(\"Box\")),\n+                PathSegment::from_ident(Ident::with_dummy_span(sym::new)),\n+            ]\n+            .into(),\n+            tokens: None,\n+        };\n+        let path = self.mk_expr(span, ExprKind::Path(None, path));\n+        Ok((span, self.mk_call(path, ThinVec::from([expr]))))\n+    }\n+\n     fn is_mistaken_not_ident_negation(&self) -> bool {\n         let token_cannot_continue_expr = |t: &Token| match t.uninterpolate().kind {\n             // These tokens can start an expression after `!`, but"}, {"sha": "09d1304b7754646d0aa28d4d57f237bfda673f29", "filename": "tests/ui/parser/removed-syntax-box.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Fparser%2Fremoved-syntax-box.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Fparser%2Fremoved-syntax-box.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.fixed?ref=8b186dfdb70ebfe722975970458c6230841e6911", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+fn main() {\n+    #[allow(dead_code)]\n+    struct T {\n+        a: u8,\n+        b: u8,\n+    }\n+    let _ = Box::new(()); //~ ERROR `box_syntax` has been removed\n+    let _ = Box::new(1); //~ ERROR `box_syntax` has been removed\n+    let _ = Box::new(T { a: 12, b: 18 }); //~ ERROR `box_syntax` has been removed\n+    let _ = Box::new([5; 30]); //~ ERROR `box_syntax` has been removed\n+    let _: Box<()> = Box::new(()); //~ ERROR `box_syntax` has been removed\n+}"}, {"sha": "1f5061b02c7050f303b1e4fe2c12763c1fd755a7", "filename": "tests/ui/parser/removed-syntax-box.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs?ref=8b186dfdb70ebfe722975970458c6230841e6911", "patch": "@@ -1,10 +1,14 @@\n+// run-rustfix\n+\n fn main() {\n+    #[allow(dead_code)]\n     struct T {\n         a: u8,\n         b: u8,\n     }\n-    let _ = box () //~ ERROR expected expression, found reserved keyword `box`\n-    let _ = box 1;\n-    let _ = box T { a: 12, b: 18 };\n-    let _ = box [5; 30];\n+    let _ = box (); //~ ERROR `box_syntax` has been removed\n+    let _ = box 1; //~ ERROR `box_syntax` has been removed\n+    let _ = box T { a: 12, b: 18 }; //~ ERROR `box_syntax` has been removed\n+    let _ = box [5; 30]; //~ ERROR `box_syntax` has been removed\n+    let _: Box<()> = box (); //~ ERROR `box_syntax` has been removed\n }"}, {"sha": "46b891587d5a626e0f2d2e2f76b801054a7e08ae", "filename": "tests/ui/parser/removed-syntax-box.stderr", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr?ref=8b186dfdb70ebfe722975970458c6230841e6911", "patch": "@@ -1,8 +1,57 @@\n-error: expected expression, found reserved keyword `box`\n-  --> $DIR/removed-syntax-box.rs:6:13\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:9:13\n    |\n-LL |     let _ = box ()\n-   |             ^^^ expected expression\n+LL |     let _ = box ();\n+   |             ^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new(());\n+   |             ~~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:10:13\n+   |\n+LL |     let _ = box 1;\n+   |             ^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new(1);\n+   |             ~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:11:13\n+   |\n+LL |     let _ = box T { a: 12, b: 18 };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new(T { a: 12, b: 18 });\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:12:13\n+   |\n+LL |     let _ = box [5; 30];\n+   |             ^^^^^^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _ = Box::new([5; 30]);\n+   |             ~~~~~~~~~~~~~~~~~\n+\n+error: `box_syntax` has been removed\n+  --> $DIR/removed-syntax-box.rs:13:22\n+   |\n+LL |     let _: Box<()> = box ();\n+   |                      ^^^^^^\n+   |\n+help: use `Box::new()` instead\n+   |\n+LL |     let _: Box<()> = Box::new(());\n+   |                      ~~~~~~~~~~~~\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n "}, {"sha": "0c6e012e698f9f59ac89943d9f70ef1ec8d39ec9", "filename": "tests/ui/unpretty/box.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Funpretty%2Fbox.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8b186dfdb70ebfe722975970458c6230841e6911/tests%2Fui%2Funpretty%2Fbox.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funpretty%2Fbox.stdout?ref=8b186dfdb70ebfe722975970458c6230841e6911", "patch": "@@ -10,5 +10,5 @@ extern crate std;\n fn main() {\n         let _ =\n             #[rustc_box]\n-            Box::new (1);\n+            Box::new(1);\n     }"}]}