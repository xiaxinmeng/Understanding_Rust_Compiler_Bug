{"sha": "43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDQwYTRhNmUzZjJiZjM4Mjg4ZWQ3Y2IwMzk2MmVhOWU1YzhhMTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-04T02:22:36Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-04T13:00:59Z"}, "message": "Rollup merge of #36212 - razielgn:updated-e0493-to-new-format, r=jonathandturner\n\nUpdated e0493 to new format (+ bonus).\n\nPart of #35233.\nFixes #35999.\n\nr? @jonathandturner\n\nI'm not satisfied with the bonus part, there has to be an easier way to reach into the `Drop`'s span implementation. I'm all ears. :)", "tree": {"sha": "28e3b7610c44bfb3aa4e1a072793b26d8bd4d835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e3b7610c44bfb3aa4e1a072793b26d8bd4d835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11", "html_url": "https://github.com/rust-lang/rust/commit/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d6464998220dd69a0f61c6e41e5aeb6e35328a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6464998220dd69a0f61c6e41e5aeb6e35328a0", "html_url": "https://github.com/rust-lang/rust/commit/8d6464998220dd69a0f61c6e41e5aeb6e35328a0"}, {"sha": "059094f3f264a683e624ae57b475264b5ce8511c", "url": "https://api.github.com/repos/rust-lang/rust/commits/059094f3f264a683e624ae57b475264b5ce8511c", "html_url": "https://github.com/rust-lang/rust/commit/059094f3f264a683e624ae57b475264b5ce8511c"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "02a643b76d548ed5d3cbe38ac42ce93f8eda7029", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11", "patch": "@@ -18,6 +18,7 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::dep_graph::DepNode;\n use rustc::hir;\n+use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n@@ -252,14 +253,46 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n         let mut err =\n             struct_span_err!(self.tcx.sess, self.span, E0493, \"{}\", msg);\n+\n         if self.mode != Mode::Const {\n             help!(&mut err,\n                   \"in Nightly builds, add `#![feature(drop_types_in_const)]` \\\n                    to the crate attributes to enable\");\n+        } else {\n+            self.find_drop_implementation_method_span()\n+                .map(|span| err.span_label(span, &format!(\"destructor defined here\")));\n+\n+            err.span_label(self.span, &format!(\"constants cannot have destructors\"));\n         }\n+\n         err.emit();\n     }\n \n+    fn find_drop_implementation_method_span(&self) -> Option<Span> {\n+        self.tcx.lang_items\n+            .drop_trait()\n+            .and_then(|drop_trait_id| {\n+                let mut span = None;\n+\n+                self.tcx\n+                    .lookup_trait_def(drop_trait_id)\n+                    .for_each_relevant_impl(self.tcx, self.mir.return_ty, |impl_did| {\n+                        self.tcx.map\n+                            .as_local_node_id(impl_did)\n+                            .and_then(|impl_node_id| self.tcx.map.find(impl_node_id))\n+                            .map(|node| {\n+                                if let hir_map::NodeItem(item) = node {\n+                                    if let hir::ItemImpl(_, _, _, _, _, ref methods) = item.node {\n+                                        span = methods.first().map(|method| method.span);\n+                                    }\n+                                }\n+                            });\n+                    });\n+\n+                span\n+            })\n+    }\n+\n     /// Check if an Lvalue with the current qualifications could\n     /// be consumed, by either an operand or a Deref projection.\n     fn try_consume(&mut self) -> bool {"}, {"sha": "ea4526b70f6a8ec6933fed23f0ee24cf92e14b2d", "filename": "src/test/ui/span/E0493.rs", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.rs?ref=43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11", "patch": "@@ -16,7 +16,15 @@ impl Drop for Foo {\n     fn drop(&mut self) {}\n }\n \n-const F : Foo = Foo { a : 0 }; //~ ERROR E0493\n+struct Bar {\n+    a: u32\n+}\n+\n+impl Drop for Bar {\n+    fn drop(&mut self) {}\n+}\n+\n+const F : Foo = Foo { a : 0 };\n \n fn main() {\n }", "previous_filename": "src/test/compile-fail/E0493.rs"}, {"sha": "afcc9a240eb4e6c266a4decb0e110c8e2b80ad99", "filename": "src/test/ui/span/E0493.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.stderr?ref=43440a4a6e3f2bf38288ed7cb03962ea9e5c8a11", "patch": "@@ -0,0 +1,11 @@\n+error[E0493]: constants are not allowed to have destructors\n+  --> $DIR/E0493.rs:27:17\n+   |\n+16 |     fn drop(&mut self) {}\n+   |     --------------------- destructor defined here\n+...\n+27 | const F : Foo = Foo { a : 0 };\n+   |                 ^^^^^^^^^^^^^ constants cannot have destructors\n+\n+error: aborting due to previous error\n+"}]}