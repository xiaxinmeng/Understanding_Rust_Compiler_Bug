{"sha": "04b2c26f39782ba30ad8868f971d5d8a606fcf88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjJjMjZmMzk3ODJiYTMwYWQ4ODY4Zjk3MWQ1ZDhhNjA2ZmNmODg=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-08T03:47:44Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-08T08:03:42Z"}, "message": "Make the enum visit callback generator more readable", "tree": {"sha": "26897e8e58035846b9d5d0e540ba8da4db6319a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26897e8e58035846b9d5d0e540ba8da4db6319a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b2c26f39782ba30ad8868f971d5d8a606fcf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b2c26f39782ba30ad8868f971d5d8a606fcf88", "html_url": "https://github.com/rust-lang/rust/commit/04b2c26f39782ba30ad8868f971d5d8a606fcf88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b2c26f39782ba30ad8868f971d5d8a606fcf88/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2589eba957ee5632dc9060022b5ca09cbfb782f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2589eba957ee5632dc9060022b5ca09cbfb782f9", "html_url": "https://github.com/rust-lang/rust/commit/2589eba957ee5632dc9060022b5ca09cbfb782f9"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "e64914afd88ccf9ae202141c998464fb12646029", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/04b2c26f39782ba30ad8868f971d5d8a606fcf88/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b2c26f39782ba30ad8868f971d5d8a606fcf88/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=04b2c26f39782ba30ad8868f971d5d8a606fcf88", "patch": "@@ -275,26 +275,27 @@ pub impl Reflector {\n             let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n             let llptrty = T_ptr(type_of(ccx, t));\n \n-            // Build the get_disr function.  (XXX: break this out into a function)\n-            let sub_path = bcx.fcx.path + ~[path_name(special_idents::anon)];\n-            let get_disr_sym = mangle_internal_name_by_path_and_seq(ccx, sub_path, ~\"get_disr\");\n-            let get_disr_args = [ty::arg { mode: ast::expl(ast::by_copy),\n-                                           ty: ty::mk_nil_ptr(ccx.tcx) }];\n-            let get_disr_llfty = type_of_fn(ccx, get_disr_args, ty::mk_int(ccx.tcx));\n-            let get_disr_llfdecl = decl_internal_cdecl_fn(ccx.llmod, get_disr_sym, get_disr_llfty);\n-            let get_disr_arg = unsafe {\n-                llvm::LLVMGetParam(get_disr_llfdecl, first_real_arg as c_uint)\n+            let make_get_disr = || {\n+                let sub_path = bcx.fcx.path + ~[path_name(special_idents::anon)];\n+                let sym = mangle_internal_name_by_path_and_seq(ccx, sub_path, ~\"get_disr\");\n+                let args = [ty::arg { mode: ast::expl(ast::by_copy),\n+                                      ty: ty::mk_nil_ptr(ccx.tcx) }];\n+                let llfty = type_of_fn(ccx, args, ty::mk_int(ccx.tcx));\n+                let llfdecl = decl_internal_cdecl_fn(ccx.llmod, sym, llfty);\n+                let arg = unsafe {\n+                    llvm::LLVMGetParam(llfdecl, first_real_arg as c_uint)\n+                };\n+                let fcx = new_fn_ctxt(ccx, ~[], llfdecl, None);\n+                let bcx = top_scope_block(fcx, None);\n+                let arg = BitCast(bcx, arg, llptrty);\n+                let ret = adt::trans_get_discr(bcx, repr, arg);\n+                Store(bcx, ret, fcx.llretptr);\n+                cleanup_and_Br(bcx, bcx, fcx.llreturn);\n+                finish_fn(fcx, bcx.llbb);\n+                llfdecl\n             };\n-            let get_disr_fcx = new_fn_ctxt(ccx, ~[], get_disr_llfdecl, None);\n-            let get_disr_bcx = top_scope_block(get_disr_fcx, None);\n-            let get_disr_arg = BitCast(get_disr_bcx, get_disr_arg, llptrty);\n-            let get_disr_ret = adt::trans_get_discr(get_disr_bcx, repr, get_disr_arg);\n-            Store(get_disr_bcx, get_disr_ret, get_disr_fcx.llretptr);\n-            cleanup_and_Br(get_disr_bcx, get_disr_bcx, get_disr_fcx.llreturn);\n-            finish_fn(get_disr_fcx, get_disr_bcx.llbb);\n \n-            let enum_args = ~[self.c_uint(vec::len(variants)),\n-                              get_disr_llfdecl]\n+            let enum_args = ~[self.c_uint(vec::len(variants)), make_get_disr()]\n                 + self.c_size_and_align(t);\n             do self.bracketed(~\"enum\", enum_args) |this| {\n                 for variants.eachi |i, v| {"}]}