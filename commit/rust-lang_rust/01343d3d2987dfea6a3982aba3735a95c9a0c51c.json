{"sha": "01343d3d2987dfea6a3982aba3735a95c9a0c51c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMzQzZDNkMjk4N2RmZWE2YTM5ODJhYmEzNzM1YTk1YzlhMGM1MWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-13T19:36:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-16T10:11:47Z"}, "message": "Implement read_char on the Buffer trait", "tree": {"sha": "f178b7261ab93af8612dd9258267c7f094e24bee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f178b7261ab93af8612dd9258267c7f094e24bee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01343d3d2987dfea6a3982aba3735a95c9a0c51c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01343d3d2987dfea6a3982aba3735a95c9a0c51c", "html_url": "https://github.com/rust-lang/rust/commit/01343d3d2987dfea6a3982aba3735a95c9a0c51c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01343d3d2987dfea6a3982aba3735a95c9a0c51c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc092f109d79b7214fb11108bbe38ac322c775c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc092f109d79b7214fb11108bbe38ac322c775c", "html_url": "https://github.com/rust-lang/rust/commit/7bc092f109d79b7214fb11108bbe38ac322c775c"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "2f4324f9db612ddf1d75edff492aad432262f63c", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01343d3d2987dfea6a3982aba3735a95c9a0c51c/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01343d3d2987dfea6a3982aba3735a95c9a0c51c/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=01343d3d2987dfea6a3982aba3735a95c9a0c51c", "patch": "@@ -299,4 +299,20 @@ mod test {\n         let buf = with_mem_writer(|wr| wr.write([1,2,3,4,5,6,7]));\n         assert_eq!(buf, ~[1,2,3,4,5,6,7]);\n     }\n+\n+    #[test]\n+    fn test_read_char() {\n+        let mut r = BufReader::new(bytes!(\"Vi\u1ec7t\"));\n+        assert_eq!(r.read_char(), Some('V'));\n+        assert_eq!(r.read_char(), Some('i'));\n+        assert_eq!(r.read_char(), Some('\u1ec7'));\n+        assert_eq!(r.read_char(), Some('t'));\n+        assert_eq!(r.read_char(), None);\n+    }\n+\n+    #[test]\n+    fn test_read_bad_char() {\n+        let mut r = BufReader::new(bytes!(0x80));\n+        assert_eq!(r.read_char(), None);\n+    }\n }"}, {"sha": "6924b33aecd26f53d1cc07990a87770ef1f7443b", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01343d3d2987dfea6a3982aba3735a95c9a0c51c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01343d3d2987dfea6a3982aba3735a95c9a0c51c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=01343d3d2987dfea6a3982aba3735a95c9a0c51c", "patch": "@@ -1048,6 +1048,33 @@ pub trait Buffer: Reader {\n         self.consume(used);\n         return if res.len() == 0 {None} else {Some(res)};\n     }\n+\n+    /// Reads the next utf8-encoded character from the underlying stream.\n+    ///\n+    /// This will return `None` if the following sequence of bytes in the\n+    /// stream are not a valid utf8-sequence, or if an I/O error is encountered.\n+    ///\n+    /// # Failure\n+    ///\n+    /// This function will raise on the `io_error` condition if a read error is\n+    /// encountered.\n+    fn read_char(&mut self) -> Option<char> {\n+        let width = {\n+            let available = self.fill();\n+            if available.len() == 0 { return None } // read error\n+            str::utf8_char_width(available[0])\n+        };\n+        if width == 0 { return None } // not uf8\n+        let mut buf = [0, ..4];\n+        match self.read(buf.mut_slice_to(width)) {\n+            Some(n) if n == width => {}\n+            Some(*) | None => return None // read error\n+        }\n+        match str::from_utf8_slice_opt(buf.slice_to(width)) {\n+            Some(s) => Some(s.char_at(0)),\n+            None => None\n+        }\n+    }\n }\n \n pub enum SeekStyle {"}]}