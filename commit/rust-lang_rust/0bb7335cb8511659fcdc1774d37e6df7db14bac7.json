{"sha": "0bb7335cb8511659fcdc1774d37e6df7db14bac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjczMzVjYjg1MTE2NTlmY2RjMTc3NGQzN2U2ZGY3ZGIxNGJhYzc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-24T08:02:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-24T08:02:37Z"}, "message": "Rollup merge of #50864 - jakllsch:add-netbsd-arm-target-specs, r=alexcrichton\n\nAdd NetBSD/arm target specs", "tree": {"sha": "7044961630df5043991b8e053dfe033c0903f37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7044961630df5043991b8e053dfe033c0903f37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb7335cb8511659fcdc1774d37e6df7db14bac7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbBnGdCRBK7hj4Ov3rIwAAdHIIAFq0YeNNXKiubZigfDOQSjjJ\nqUqnu8b+s+hG2yaDP3n6YjfCl7nfJAUD1hPQpedfBEsJAnEk54aIU/UrokLjEQm+\nRVFODHlZ96+5+W+U7W45fQD2XgJmq1DtiqlvImhcMD+l8n8rYbUBToEvS7Y2aeTY\nV/U1oDUrbOkPqVqwjPiBXKM7DjM1QIUjbGL3JjqDH3ATsQRqqxQ5jk9yU1CLpe9q\naptstyMiZvVSCcntAkbGy0Rb4EY2FeUTasO2yZ8aa3vqfk5zvh0j9s5hD0ULb5sm\nN7HMU0WkZwPdWER+l77Tt4fvbKguzTBgR4F7rrOhqzOzkExhOBDS9jOXUcw6z/w=\n=OwjX\n-----END PGP SIGNATURE-----\n", "payload": "tree 7044961630df5043991b8e053dfe033c0903f37f\nparent b4463d788bfd30b622a87a0e6f8e9271b9102e50\nparent ec779b9f08a55a88b866d2c9d514cb104af5c052\nauthor kennytm <kennytm@gmail.com> 1527148957 +0800\ncommitter GitHub <noreply@github.com> 1527148957 +0800\n\nRollup merge of #50864 - jakllsch:add-netbsd-arm-target-specs, r=alexcrichton\n\nAdd NetBSD/arm target specs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb7335cb8511659fcdc1774d37e6df7db14bac7", "html_url": "https://github.com/rust-lang/rust/commit/0bb7335cb8511659fcdc1774d37e6df7db14bac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb7335cb8511659fcdc1774d37e6df7db14bac7/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4463d788bfd30b622a87a0e6f8e9271b9102e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4463d788bfd30b622a87a0e6f8e9271b9102e50", "html_url": "https://github.com/rust-lang/rust/commit/b4463d788bfd30b622a87a0e6f8e9271b9102e50"}, {"sha": "ec779b9f08a55a88b866d2c9d514cb104af5c052", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec779b9f08a55a88b866d2c9d514cb104af5c052", "html_url": "https://github.com/rust-lang/rust/commit/ec779b9f08a55a88b866d2c9d514cb104af5c052"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "93292c658bad251f2d2874ef8bd60e4b5183863e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0bb7335cb8511659fcdc1774d37e6df7db14bac7", "patch": "@@ -596,8 +596,10 @@ impl Step for Openssl {\n             \"arm-linux-androideabi\" => \"android\",\n             \"arm-unknown-linux-gnueabi\" => \"linux-armv4\",\n             \"arm-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+            \"armv6-unknown-netbsd-eabihf\" => \"BSD-generic32\",\n             \"armv7-linux-androideabi\" => \"android-armv7\",\n             \"armv7-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+            \"armv7-unknown-netbsd-eabihf\" => \"BSD-generic32\",\n             \"i586-unknown-linux-gnu\" => \"linux-elf\",\n             \"i586-unknown-linux-musl\" => \"linux-elf\",\n             \"i686-apple-darwin\" => \"darwin-i386-cc\","}, {"sha": "06c264725a9bb3e178fc4d53a497726bfa0be914", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=0bb7335cb8511659fcdc1774d37e6df7db14bac7", "patch": "@@ -143,7 +143,7 @@ const UNWIND_DATA_REG: (i32, i32) = (24, 25); // I0, I1\n // The personality routine for most of our targets, except ARM, which has a slightly different ABI\n // (however, iOS goes here as it uses SjLj unwinding).  Also, the 64-bit Windows implementation\n // lives in seh64_gnu.rs\n-#[cfg(all(any(target_os = \"ios\", not(target_arch = \"arm\"))))]\n+#[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\"))))]\n #[lang = \"eh_personality\"]\n #[no_mangle]\n #[allow(unused)]\n@@ -184,7 +184,7 @@ unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n \n // ARM EHABI personality routine.\n // http://infocenter.arm.com/help/topic/com.arm.doc.ihi0038b/IHI0038B_ehabi.pdf\n-#[cfg(all(target_arch = \"arm\", not(target_os = \"ios\")))]\n+#[cfg(all(target_arch = \"arm\", not(target_os = \"ios\"), not(target_os = \"netbsd\")))]\n #[lang = \"eh_personality\"]\n #[no_mangle]\n unsafe extern \"C\" fn rust_eh_personality(state: uw::_Unwind_State,"}, {"sha": "38f0f34211daf33bef336bbf378e47eaf9ff801b", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=0bb7335cb8511659fcdc1774d37e6df7db14bac7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::netbsd_base::opts();\n+    base.max_atomic_width = Some(64);\n+    Ok(Target {\n+        llvm_target: \"armv6-unknown-netbsdelf-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"eabihf\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            features: \"+v6,+vfp2\".to_string(),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "412c3546115199009bd99129a0ae54bc1d8d3b7e", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=0bb7335cb8511659fcdc1774d37e6df7db14bac7", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = super::netbsd_base::opts();\n+    Ok(Target {\n+        llvm_target: \"armv7-unknown-netbsdelf-eabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"eabihf\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "a0cbfe2fefae07a5c9bb587caace281cb46ee521", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=0bb7335cb8511659fcdc1774d37e6df7db14bac7", "patch": "@@ -317,6 +317,8 @@ supported_targets! {\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n \n+    (\"armv6-unknown-netbsd-eabihf\", armv6_unknown_netbsd_eabihf),\n+    (\"armv7-unknown-netbsd-eabihf\", armv7_unknown_netbsd_eabihf),\n     (\"i686-unknown-netbsd\", i686_unknown_netbsd),\n     (\"powerpc-unknown-netbsd\", powerpc_unknown_netbsd),\n     (\"sparc64-unknown-netbsd\", sparc64_unknown_netbsd),"}, {"sha": "73a259bd4438e90edf46788f7be470412d4e0ec8", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb7335cb8511659fcdc1774d37e6df7db14bac7/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=0bb7335cb8511659fcdc1774d37e6df7db14bac7", "patch": "@@ -93,7 +93,7 @@ extern \"C\" {\n }\n \n cfg_if! {\n-if #[cfg(all(any(target_os = \"ios\", not(target_arch = \"arm\"))))] {\n+if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\"))))] {\n     // Not ARM EHABI\n     #[repr(C)]\n     #[derive(Copy, Clone, PartialEq)]"}]}