{"sha": "a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGQwMmM5ZWIxYzcyMjZiYzdkYjg3YjAxNGRjODI3ZTc3ZjJhMDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T16:29:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T16:29:38Z"}, "message": "refactor comment extraction from tasks", "tree": {"sha": "40108b506592ca6ae0fd4597f8b2cb7bdf414bfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40108b506592ca6ae0fd4597f8b2cb7bdf414bfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "html_url": "https://github.com/rust-lang/rust/commit/a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40d02c9eb1c7226bc7db87b014dc827e77f2a08/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a409a12f1b3c7aa6c09405bf8e28f73b9761fd18", "url": "https://api.github.com/repos/rust-lang/rust/commits/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18", "html_url": "https://github.com/rust-lang/rust/commit/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "bf3a9011950d737b4e5627edf2f506980baf10ea", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a40d02c9eb1c7226bc7db87b014dc827e77f2a08/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40d02c9eb1c7226bc7db87b014dc827e77f2a08/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "patch": "@@ -8,7 +8,7 @@\n mod gen_syntax;\n mod gen_parser_tests;\n \n-use std::{fs, path::Path};\n+use std::{fs, mem, path::Path};\n \n use crate::Result;\n \n@@ -44,3 +44,26 @@ pub fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n     fs::write(path, contents)?;\n     Ok(())\n }\n+\n+fn extract_comment_blocks(text: &str) -> Vec<Vec<String>> {\n+    let mut res = Vec::new();\n+\n+    let prefix = \"// \";\n+    let lines = text.lines().map(str::trim_start);\n+\n+    let mut block = vec![];\n+    for line in lines {\n+        let is_comment = line.starts_with(prefix);\n+        if is_comment {\n+            block.push(line[prefix.len()..].to_string());\n+        } else {\n+            if !block.is_empty() {\n+                res.push(mem::replace(&mut block, Vec::new()))\n+            }\n+        }\n+    }\n+    if !block.is_empty() {\n+        res.push(mem::replace(&mut block, Vec::new()))\n+    }\n+    res\n+}"}, {"sha": "db1e59daccc1d18b9bdadc7147ecd3b35b73a2bf", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a40d02c9eb1c7226bc7db87b014dc827e77f2a08/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40d02c9eb1c7226bc7db87b014dc827e77f2a08/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=a40d02c9eb1c7226bc7db87b014dc827e77f2a08", "patch": "@@ -3,12 +3,12 @@\n \n use std::{\n     collections::HashMap,\n-    fs,\n+    fs, iter,\n     path::{Path, PathBuf},\n };\n \n use crate::{\n-    codegen::{self, update, Mode},\n+    codegen::{self, extract_comment_blocks, update, Mode},\n     project_root, Result,\n };\n \n@@ -57,46 +57,28 @@ struct Tests {\n }\n \n fn collect_tests(s: &str) -> Vec<Test> {\n-    let mut res = vec![];\n-    let prefix = \"// \";\n-    let lines = s.lines().map(str::trim_start);\n-\n-    let mut block = vec![];\n-    for line in lines {\n-        let is_comment = line.starts_with(prefix);\n-        if is_comment {\n-            block.push(&line[prefix.len()..]);\n+    let mut res = Vec::new();\n+    for comment_block in extract_comment_blocks(s) {\n+        let first_line = &comment_block[0];\n+        let (name, ok) = if first_line.starts_with(\"test \") {\n+            let name = first_line[\"test \".len()..].to_string();\n+            (name, true)\n+        } else if first_line.starts_with(\"test_err \") {\n+            let name = first_line[\"test_err \".len()..].to_string();\n+            (name, false)\n         } else {\n-            process_block(&mut res, &block);\n-            block.clear();\n-        }\n-    }\n-    process_block(&mut res, &block);\n-    return res;\n-\n-    fn process_block(acc: &mut Vec<Test>, block: &[&str]) {\n-        if block.is_empty() {\n-            return;\n-        }\n-        let mut ok = true;\n-        let mut block = block.iter();\n-        let name = loop {\n-            match block.next() {\n-                Some(line) if line.starts_with(\"test \") => {\n-                    break line[\"test \".len()..].to_string();\n-                }\n-                Some(line) if line.starts_with(\"test_err \") => {\n-                    ok = false;\n-                    break line[\"test_err \".len()..].to_string();\n-                }\n-                Some(_) => (),\n-                None => return,\n-            }\n+            continue;\n         };\n-        let text: String = block.copied().chain(std::iter::once(\"\")).collect::<Vec<_>>().join(\"\\n\");\n+        let text: String = comment_block[1..]\n+            .iter()\n+            .cloned()\n+            .chain(iter::once(String::new()))\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\");\n         assert!(!text.trim().is_empty() && text.ends_with('\\n'));\n-        acc.push(Test { name, text, ok })\n+        res.push(Test { name, text, ok })\n     }\n+    res\n }\n \n fn tests_from_dir(dir: &Path) -> Result<Tests> {"}]}