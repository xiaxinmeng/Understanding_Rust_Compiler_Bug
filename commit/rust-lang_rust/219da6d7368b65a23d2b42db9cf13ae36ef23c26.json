{"sha": "219da6d7368b65a23d2b42db9cf13ae36ef23c26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOWRhNmQ3MzY4YjY1YTIzZDJiNDJkYjljZjEzYWUzNmVmMjNjMjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-01-15T13:38:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-15T13:38:51Z"}, "message": "Merge pull request #1444 from Manishearth/or_else_method\n\nExtend or_fun_call to also cover methods", "tree": {"sha": "2124f9448d63ecc903d69a69766619a35f06dcb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2124f9448d63ecc903d69a69766619a35f06dcb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/219da6d7368b65a23d2b42db9cf13ae36ef23c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/219da6d7368b65a23d2b42db9cf13ae36ef23c26", "html_url": "https://github.com/rust-lang/rust/commit/219da6d7368b65a23d2b42db9cf13ae36ef23c26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/219da6d7368b65a23d2b42db9cf13ae36ef23c26/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d22aa42e0ee1c77f140c9b07c764ad06ccc6a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d22aa42e0ee1c77f140c9b07c764ad06ccc6a2f", "html_url": "https://github.com/rust-lang/rust/commit/6d22aa42e0ee1c77f140c9b07c764ad06ccc6a2f"}, {"sha": "94c97d2ec9c2d6a88d3e9fabf3d9a9d640f8bd47", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c97d2ec9c2d6a88d3e9fabf3d9a9d640f8bd47", "html_url": "https://github.com/rust-lang/rust/commit/94c97d2ec9c2d6a88d3e9fabf3d9a9d640f8bd47"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "578fda8e791ff8ee08275df22a79b90123c7c5c6", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/219da6d7368b65a23d2b42db9cf13ae36ef23c26/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219da6d7368b65a23d2b42db9cf13ae36ef23c26/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=219da6d7368b65a23d2b42db9cf13ae36ef23c26", "patch": "@@ -724,7 +724,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     fn check_general_case(\n         cx: &LateContext,\n         name: &str,\n-        fun: &hir::Expr,\n+        fun_span: Span,\n         self_expr: &hir::Expr,\n         arg: &hir::Expr,\n         or_has_args: bool,\n@@ -765,7 +765,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n         let sugg: Cow<_> = match (fn_has_arguments, !or_has_args) {\n             (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")).into(),\n             (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")).into(),\n-            (false, true) => snippet(cx, fun.span, \"..\"),\n+            (false, true) => snippet(cx, fun_span, \"..\"),\n         };\n \n         span_lint_and_then(cx,\n@@ -780,11 +780,17 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     }\n \n     if args.len() == 2 {\n-        if let hir::ExprCall(ref fun, ref or_args) = args[1].node {\n-            let or_has_args = !or_args.is_empty();\n-            if !check_unwrap_or_default(cx, name, fun, &args[0], &args[1], or_has_args, expr.span) {\n-                check_general_case(cx, name, fun, &args[0], &args[1], or_has_args, expr.span);\n-            }\n+        match args[1].node {\n+            hir::ExprCall(ref fun, ref or_args) => {\n+                let or_has_args = !or_args.is_empty();\n+                if !check_unwrap_or_default(cx, name, fun, &args[0], &args[1], or_has_args, expr.span) {\n+                    check_general_case(cx, name, fun.span, &args[0], &args[1], or_has_args, expr.span);\n+                }\n+            },\n+            hir::ExprMethodCall(fun, _, ref or_args) => {\n+                check_general_case(cx, name, fun.span, &args[0], &args[1], !or_args.is_empty(), expr.span)\n+            },\n+            _ => {},\n         }\n     }\n }"}, {"sha": "036adae836609ff412e76fcd10b257e83b0a13f7", "filename": "src/main.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/219da6d7368b65a23d2b42db9cf13ae36ef23c26/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219da6d7368b65a23d2b42db9cf13ae36ef23c26/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=219da6d7368b65a23d2b42db9cf13ae36ef23c26", "patch": "@@ -234,13 +234,15 @@ pub fn main() {\n         } else {\n             option_env!(\"SYSROOT\")\n                 .map(|s| s.to_owned())\n-                .or(Command::new(\"rustc\")\n-                    .arg(\"--print\")\n-                    .arg(\"sysroot\")\n-                    .output()\n-                    .ok()\n-                    .and_then(|out| String::from_utf8(out.stdout).ok())\n-                    .map(|s| s.trim().to_owned()))\n+                .or_else(|| {\n+                    Command::new(\"rustc\")\n+                        .arg(\"--print\")\n+                        .arg(\"sysroot\")\n+                        .output()\n+                        .ok()\n+                        .and_then(|out| String::from_utf8(out.stdout).ok())\n+                        .map(|s| s.trim().to_owned())\n+                })\n                 .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n         };\n "}, {"sha": "cd04a3b6b973dff2b23ba044317da38d632f79e3", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/219da6d7368b65a23d2b42db9cf13ae36ef23c26/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219da6d7368b65a23d2b42db9cf13ae36ef23c26/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=219da6d7368b65a23d2b42db9cf13ae36ef23c26", "patch": "@@ -127,7 +127,6 @@ fn option_methods() {\n                 );\n     // macro case\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0); // should not lint\n-\n }\n \n /// Struct to generate false positives for things with .iter()\n@@ -340,6 +339,12 @@ fn or_fun_call() {\n     //~^ERROR use of `or_insert` followed by a function call\n     //~|HELP try this\n     //~|SUGGESTION btree.entry(42).or_insert_with(String::new);\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or(\"\".to_owned());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION stringy.unwrap_or_else(|| \"\".to_owned());\n }\n \n /// Checks implementation of `ITER_NTH` lint"}]}