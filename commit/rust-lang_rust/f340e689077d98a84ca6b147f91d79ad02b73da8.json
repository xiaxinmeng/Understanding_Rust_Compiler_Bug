{"sha": "f340e689077d98a84ca6b147f91d79ad02b73da8", "node_id": "C_kwDOAAsO6NoAKGYzNDBlNjg5MDc3ZDk4YTg0Y2E2YjE0N2Y5MWQ3OWFkMDJiNzNkYTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-22T00:01:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-22T00:01:14Z"}, "message": "Rollup merge of #105996 - Swatinem:async-is-unwindsafe, r=petrochenkov\n\nTest that async blocks are `UnwindSafe`\n\nThis was a regression from the reverted #105250 which is now covered by a test.", "tree": {"sha": "a33a75577b1f27e7eaec32a0b3431030d1c2b1ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a33a75577b1f27e7eaec32a0b3431030d1c2b1ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f340e689077d98a84ca6b147f91d79ad02b73da8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjo55KCRBK7hj4Ov3rIwAALUkIALKN3KaQtp7AefIa+8JngKYQ\nhStk7Xtt9OIvuIORZ+FZ0/lwjlgHByrPfp94WB+xi01EmYgpXKIw+l7Kj2KOc6sa\n0wJF9H1a2iP7FesF5MSngv8kxOYIuPT5RmbMO75AMf3uy99pYr1gAoE0DLgNjVp+\n5HYj6kNsguzpvU3PCGsk8ynrpQ+TpMrJQ06kUDpEsR0Q+96JAlcdub8hMf5pbSiE\nneghLNB0R0fkvtB3+42wI2wkLbYSHZEG+V0mf3bHwrGDJaO+JLvJGXfbt0FiV8+s\nIjXKyWF58R/IQA4NOFo/aT8sed+WDls7sZlqcrmmLhZWRYK2b9aKkPZ7JjFy59A=\n=V+OY\n-----END PGP SIGNATURE-----\n", "payload": "tree a33a75577b1f27e7eaec32a0b3431030d1c2b1ba\nparent 66544b57f4d4392e893b8f54dd478d611f1dcc86\nparent b60281f472b22d1787d5e8fcea1a7fb4a061b956\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671667274 +0100\ncommitter GitHub <noreply@github.com> 1671667274 +0100\n\nRollup merge of #105996 - Swatinem:async-is-unwindsafe, r=petrochenkov\n\nTest that async blocks are `UnwindSafe`\n\nThis was a regression from the reverted #105250 which is now covered by a test.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f340e689077d98a84ca6b147f91d79ad02b73da8", "html_url": "https://github.com/rust-lang/rust/commit/f340e689077d98a84ca6b147f91d79ad02b73da8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f340e689077d98a84ca6b147f91d79ad02b73da8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66544b57f4d4392e893b8f54dd478d611f1dcc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/66544b57f4d4392e893b8f54dd478d611f1dcc86", "html_url": "https://github.com/rust-lang/rust/commit/66544b57f4d4392e893b8f54dd478d611f1dcc86"}, {"sha": "b60281f472b22d1787d5e8fcea1a7fb4a061b956", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60281f472b22d1787d5e8fcea1a7fb4a061b956", "html_url": "https://github.com/rust-lang/rust/commit/b60281f472b22d1787d5e8fcea1a7fb4a061b956"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "56ed2847292d186fecd5d20487b076ae23be7e87", "filename": "src/test/ui/async-await/async-is-unwindsafe.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f340e689077d98a84ca6b147f91d79ad02b73da8/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f340e689077d98a84ca6b147f91d79ad02b73da8/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.rs?ref=f340e689077d98a84ca6b147f91d79ad02b73da8", "patch": "@@ -0,0 +1,30 @@\n+// edition:2018\n+\n+fn is_unwindsafe(_: impl std::panic::UnwindSafe) {}\n+\n+fn main() {\n+    // A normal future created by an async block takes a `&mut Context<'_>` argument.\n+    // That should not leak through to the whole async block.\n+    is_unwindsafe(async {\n+        async {}.await; // this needs an inner await point\n+    });\n+\n+    is_unwindsafe(async {\n+        //~^ ERROR the type `&mut Context<'_>` may not be safely transferred across an unwind boundary\n+        use std::ptr::null;\n+        use std::task::{Context, RawWaker, RawWakerVTable, Waker};\n+        let waker = unsafe {\n+            Waker::from_raw(RawWaker::new(\n+                null(),\n+                &RawWakerVTable::new(|_| todo!(), |_| todo!(), |_| todo!(), |_| todo!()),\n+            ))\n+        };\n+        let mut cx = Context::from_waker(&waker);\n+        let cx_ref = &mut cx;\n+\n+        async {}.await; // this needs an inner await point\n+\n+        // in this case, `&mut Context<'_>` is *truly* alive across an await point\n+        drop(cx_ref);\n+    });\n+}"}, {"sha": "d6404b30e74f1bffc4b0ec450ee3271ee2f978e6", "filename": "src/test/ui/async-await/async-is-unwindsafe.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f340e689077d98a84ca6b147f91d79ad02b73da8/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f340e689077d98a84ca6b147f91d79ad02b73da8/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr?ref=f340e689077d98a84ca6b147f91d79ad02b73da8", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: the type `&mut Context<'_>` may not be safely transferred across an unwind boundary\n+  --> $DIR/async-is-unwindsafe.rs:12:19\n+   |\n+LL |       is_unwindsafe(async {\n+   |  ___________________^\n+LL | |\n+LL | |         use std::ptr::null;\n+LL | |         use std::task::{Context, RawWaker, RawWakerVTable, Waker};\n+...  |\n+LL | |         drop(cx_ref);\n+LL | |     });\n+   | |     ^\n+   | |     |\n+   | |_____`&mut Context<'_>` may not be safely transferred across an unwind boundary\n+   |       within this `[async block@$DIR/async-is-unwindsafe.rs:12:19: 29:6]`\n+   |\n+   = help: within `[async block@$DIR/async-is-unwindsafe.rs:12:19: 29:6]`, the trait `UnwindSafe` is not implemented for `&mut Context<'_>`\n+   = note: `UnwindSafe` is implemented for `&std::task::Context<'_>`, but not for `&mut std::task::Context<'_>`\n+note: future does not implement `UnwindSafe` as this value is used across an await\n+  --> $DIR/async-is-unwindsafe.rs:25:17\n+   |\n+LL |         let cx_ref = &mut cx;\n+   |             ------ has type `&mut Context<'_>` which does not implement `UnwindSafe`\n+LL |\n+LL |         async {}.await; // this needs an inner await point\n+   |                 ^^^^^^ await occurs here, with `cx_ref` maybe used later\n+...\n+LL |     });\n+   |     - `cx_ref` is later dropped here\n+note: required by a bound in `is_unwindsafe`\n+  --> $DIR/async-is-unwindsafe.rs:3:26\n+   |\n+LL | fn is_unwindsafe(_: impl std::panic::UnwindSafe) {}\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_unwindsafe`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}