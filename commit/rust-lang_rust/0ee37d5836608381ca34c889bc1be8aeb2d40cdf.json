{"sha": "0ee37d5836608381ca34c889bc1be8aeb2d40cdf", "node_id": "C_kwDOAAsO6NoAKDBlZTM3ZDU4MzY2MDgzODFjYTM0Yzg4OWJjMWJlOGFlYjJkNDBjZGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-19T15:22:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-19T15:22:47Z"}, "message": "Rollup merge of #96539 - tmandry:relnotes-1.61, r=Mark-Simulacrum\n\nAdd release notes for 1.61.0\n\ncc `@rust-lang/release`", "tree": {"sha": "c2d022289367ef1304719b211caff713b529fb3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d022289367ef1304719b211caff713b529fb3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee37d5836608381ca34c889bc1be8aeb2d40cdf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihmDHCRBK7hj4Ov3rIwAAF0sIAFAhY5RfAOmh/uXvOjEMEwY0\ndrHH76CpjLByLMqf0oRTS6GnOUzauEJde8bT/qsplmzfv9Q6yFrhcBzjNazrLaU5\nU5mwnp0FBaVtyqGTbPkZIMyiMxblvU0Y2vcyaBXwPBk6FrK4T1HhwiZl1pVtT4Sq\n0muuxHlflTzNHDdn3JKpnFmM/KP8EuIU+ZYuAzjMOXdsCm6kyA8ZtjpdAIa+hW1W\nwn/naqZn3z4y8oK41yio7MwJEVSonhsDV+sfA24GNG2T8K+rm0U3QvM61E5xm1PD\njj2PaEC+oi5ulThAtodLMnl6rL90/J9x3J1Qx/0RieT2FoHQAamWQGWd1dlJ6wA=\n=ns4h\n-----END PGP SIGNATURE-----\n", "payload": "tree c2d022289367ef1304719b211caff713b529fb3f\nparent c0672870491e84362f76ddecd50fa229f9b06dff\nparent 23a4614238b48984dbc8fbcdbb9062b11f24eedb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1652973767 +0200\ncommitter GitHub <noreply@github.com> 1652973767 +0200\n\nRollup merge of #96539 - tmandry:relnotes-1.61, r=Mark-Simulacrum\n\nAdd release notes for 1.61.0\n\ncc `@rust-lang/release`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee37d5836608381ca34c889bc1be8aeb2d40cdf", "html_url": "https://github.com/rust-lang/rust/commit/0ee37d5836608381ca34c889bc1be8aeb2d40cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee37d5836608381ca34c889bc1be8aeb2d40cdf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0672870491e84362f76ddecd50fa229f9b06dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0672870491e84362f76ddecd50fa229f9b06dff", "html_url": "https://github.com/rust-lang/rust/commit/c0672870491e84362f76ddecd50fa229f9b06dff"}, {"sha": "23a4614238b48984dbc8fbcdbb9062b11f24eedb", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a4614238b48984dbc8fbcdbb9062b11f24eedb", "html_url": "https://github.com/rust-lang/rust/commit/23a4614238b48984dbc8fbcdbb9062b11f24eedb"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "0e118fb939ff00f1927ff3c79f60eda944c0ef64", "filename": "RELEASES.md", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/0ee37d5836608381ca34c889bc1be8aeb2d40cdf/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/0ee37d5836608381ca34c889bc1be8aeb2d40cdf/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=0ee37d5836608381ca34c889bc1be8aeb2d40cdf", "patch": "@@ -1,3 +1,129 @@\n+Version 1.61.0 (2022-05-19)\n+==========================\n+\n+Language\n+--------\n+\n+- [`const fn` signatures can now include generic trait bounds][93827]\n+- [`const fn` signatures can now use `impl Trait` in argument and return position][93827]\n+- [Function pointers can now be created, cast, and passed around in a `const fn`][93827]\n+- [Recursive calls can now set the value of a function's opaque `impl Trait` return type][94081]\n+\n+Compiler\n+--------\n+\n+- [Linking modifier syntax in `#[link]` attributes and on the command line, as well as the `whole-archive` modifier specifically, are now supported][93901]\n+- [The `char` type is now described as UTF-32 in debuginfo][89887]\n+- The [`#[target_feature]`][target_feature] attribute [can now be used with aarch64 features][90621]\n+- X86 [`#[target_feature = \"adx\"]` is now stable][93745]\n+\n+Libraries\n+---------\n+\n+- [`ManuallyDrop<T>` is now documented to have the same layout as `T`][88375]\n+- [`#[ignore = \"\u2026\"]` messages are printed when running tests][92714]\n+- [Consistently show absent stdio handles on Windows as NULL handles][93263]\n+- [Make `std::io::stdio::lock()` return `'static` handles.][93965] Previously, the creation of locked handles to stdin/stdout/stderr would borrow the handles being locked, which prevented writing `let out = std::io::stdout().lock();` because `out` would outlive the return value of `stdout()`. Such code now works, eliminating a common pitfall that affected many Rust users.\n+- [`Vec::from_raw_parts` is now less restrictive about its inputs][95016]\n+- [`std::thread::available_parallelism` now takes cgroup quotas into account.][92697] Since `available_parallelism` is often used to create a thread pool for parallel computation, which may be CPU-bound for performance, `available_parallelism` will return a value consistent with the ability to use that many threads continuously, if possible. For instance, in a container with 8 virtual CPUs but quotas only allowing for 50% usage, `available_parallelism` will return 4.\n+\n+Stabilized APIs\n+---------------\n+\n+- [`Pin::static_mut`]\n+- [`Pin::static_ref`]\n+- [`Vec::retain_mut`]\n+- [`VecDeque::retain_mut`]\n+- [`Write` for `Cursor<[u8; N]>`][cursor-write-array]\n+- [`std::os::unix::net::SocketAddr::from_pathname`]\n+- [`std::process::ExitCode`] and [`std::process::Termination`]. The stabilization of these two APIs now makes it possible for programs to return errors from `main` with custom exit codes.\n+- [`std::thread::JoinHandle::is_finished`]\n+\n+These APIs are now usable in const contexts:\n+\n+- [`<*const T>::offset` and `<*mut T>::offset`][ptr-offset]\n+- [`<*const T>::wrapping_offset` and `<*mut T>::wrapping_offset`][ptr-wrapping_offset]\n+- [`<*const T>::add` and `<*mut T>::add`][ptr-add]\n+- [`<*const T>::sub` and `<*mut T>::sub`][ptr-sub]\n+- [`<*const T>::wrapping_add` and `<*mut T>::wrapping_add`][ptr-wrapping_add]\n+- [`<*const T>::wrapping_sub` and `<*mut T>::wrapping_sub`][ptr-wrapping_sub]\n+- [`<[T]>::as_mut_ptr`][slice-as_mut_ptr]\n+- [`<[T]>::as_ptr_range`][slice-as_ptr_range]\n+- [`<[T]>::as_mut_ptr_range`][slice-as_mut_ptr_range]\n+\n+Cargo\n+-----\n+\n+No feature changes, but see compatibility notes.\n+\n+Compatibility Notes\n+-------------------\n+\n+- Previously native static libraries were linked as `whole-archive` in some cases, but now rustc tries not to use `whole-archive` unless explicitly requested. This [change][93901] may result in linking errors in some cases. To fix such errors, native libraries linked from the command line, build scripts, or [`#[link]` attributes][link-attr] need to\n+  - (more common) either be reordered to respect dependencies between them (if `a` depends on `b` then `a` should go first and `b` second)\n+  - (less common) or be updated to use the [`+whole-archive`] modifier.\n+- [Catching a second unwind from FFI code while cleaning up from a Rust panic now causes the process to abort][92911]\n+- [Proc macros no longer see `ident` matchers wrapped in groups][92472]\n+- [The number of `#` in `r#` raw string literals is now required to be less than 256][95251]\n+- [When checking that a dyn type satisfies a trait bound, supertrait bounds are now enforced][92285]\n+- [`cargo vendor` now only accepts one value for each `--sync` flag][cargo/10448]\n+- [`cfg` predicates in `all()` and `any()` are always evaluated to detect errors, instead of short-circuiting.][94295] The compatibility considerations here arise in nightly-only code that used the short-circuiting behavior of `all` to write something like `cfg(all(feature = \"nightly\", syntax-requiring-nightly))`, which will now fail to compile. Instead, use either `cfg_attr(feature = \"nightly\", ...)` or nested uses of `cfg`.\n+- [bootstrap: static-libstdcpp is now enabled by default, and can now be disabled when llvm-tools is enabled][94832]\n+\n+Internal Changes\n+----------------\n+\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [debuginfo: Refactor debuginfo generation for types][94261]\n+- [Remove the everybody loops pass][93913]\n+\n+[88375]: https://github.com/rust-lang/rust/pull/88375/\n+[89887]: https://github.com/rust-lang/rust/pull/89887/\n+[90621]: https://github.com/rust-lang/rust/pull/90621/\n+[92285]: https://github.com/rust-lang/rust/pull/92285/\n+[92472]: https://github.com/rust-lang/rust/pull/92472/\n+[92697]: https://github.com/rust-lang/rust/pull/92697/\n+[92714]: https://github.com/rust-lang/rust/pull/92714/\n+[92911]: https://github.com/rust-lang/rust/pull/92911/\n+[93263]: https://github.com/rust-lang/rust/pull/93263/\n+[93745]: https://github.com/rust-lang/rust/pull/93745/\n+[93827]: https://github.com/rust-lang/rust/pull/93827/\n+[93901]: https://github.com/rust-lang/rust/pull/93901/\n+[93913]: https://github.com/rust-lang/rust/pull/93913/\n+[93965]: https://github.com/rust-lang/rust/pull/93965/\n+[94081]: https://github.com/rust-lang/rust/pull/94081/\n+[94261]: https://github.com/rust-lang/rust/pull/94261/\n+[94295]: https://github.com/rust-lang/rust/pull/94295/\n+[94832]: https://github.com/rust-lang/rust/pull/94832/\n+[95016]: https://github.com/rust-lang/rust/pull/95016/\n+[95251]: https://github.com/rust-lang/rust/pull/95251/\n+[`+whole-archive`]: https://doc.rust-lang.org/stable/rustc/command-line-arguments.html#linking-modifiers-whole-archive\n+[`Pin::static_mut`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_mut\n+[`Pin::static_ref`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_ref\n+[`Vec::retain_mut`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.retain_mut\n+[`VecDeque::retain_mut`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.retain_mut\n+[`std::os::unix::net::SocketAddr::from_pathname`]: https://doc.rust-lang.org/stable/std/os/unix/net/struct.SocketAddr.html#method.from_pathname\n+[`std::process::ExitCode`]: https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html\n+[`std::process::Termination`]: https://doc.rust-lang.org/stable/std/process/trait.Termination.html\n+[`std::thread::JoinHandle::is_finished`]: https://doc.rust-lang.org/stable/std/thread/struct.JoinHandle.html#method.is_finished\n+[cargo/10448]: https://github.com/rust-lang/cargo/pull/10448/\n+[cursor-write-array]: https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#impl-Write-4\n+[link-attr]: https://doc.rust-lang.org/stable/reference/items/external-blocks.html#the-link-attribute\n+[ptr-add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.add\n+[ptr-offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\n+[ptr-sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.sub\n+[ptr-wrapping_add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_add\n+[ptr-wrapping_offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_offset\n+[ptr-wrapping_sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_sub\n+[slice-as_mut_ptr]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr\n+[slice-as_mut_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range\n+[slice-as_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range\n+[target_feature]: https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute\n+\n+\n Version 1.60.0 (2022-04-07)\n ==========================\n "}]}