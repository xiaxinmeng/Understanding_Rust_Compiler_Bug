{"sha": "31fcda170a0671195b7a1506b09c5f655fc4d7e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZmNkYTE3MGEwNjcxMTk1YjdhMTUwNmIwOWM1ZjY1NWZjNGQ3ZTk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-04T01:13:13Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-04T01:26:54Z"}, "message": "Fix async-std at the price of breaking half the test suite\n\n- Don't mark impl trait as an error", "tree": {"sha": "5483a71987fdb538dd066370d110fb944aaab6f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5483a71987fdb538dd066370d110fb944aaab6f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31fcda170a0671195b7a1506b09c5f655fc4d7e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31fcda170a0671195b7a1506b09c5f655fc4d7e9", "html_url": "https://github.com/rust-lang/rust/commit/31fcda170a0671195b7a1506b09c5f655fc4d7e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31fcda170a0671195b7a1506b09c5f655fc4d7e9/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f042d749b0fc212bff6bdc44b84e134b878bff64", "url": "https://api.github.com/repos/rust-lang/rust/commits/f042d749b0fc212bff6bdc44b84e134b878bff64", "html_url": "https://github.com/rust-lang/rust/commit/f042d749b0fc212bff6bdc44b84e134b878bff64"}], "stats": {"total": 148, "additions": 29, "deletions": 119}, "files": [{"sha": "797b2d35e9d5400537fd9fb009b9b7b7b5460642", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -778,13 +778,8 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             }\n             // The interface is empty.\n             hir::ItemKind::GlobalAsm(..) => {}\n-            hir::ItemKind::OpaqueTy(..) => {\n-                // FIXME: This is some serious pessimization intended to workaround deficiencies\n-                // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n-                // reachable if they are returned via `impl Trait`, even from private functions.\n-                let exist_level = cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));\n-                self.reach(item.hir_id, exist_level).generics().predicates().ty();\n-            }\n+            // assume the type is never reachable - since it's opaque, no one can use it from this interface\n+            hir::ItemKind::OpaqueTy(..) => {}\n             // Visit everything.\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Static(..)"}, {"sha": "eab310ddf892cb376e2217b5eebae8e242ecf3db", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -449,13 +449,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).take();\n \n             global_ctxt.enter(|tcx| {\n-                // Certain queries assume that some checks were run elsewhere\n-                // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n-                // so type-check everything other than function bodies in this crate before running lints.\n-                // NOTE: this does not call `tcx.analysis()` so that we won't\n-                // typeck function bodies or run the default rustc lints.\n-                // (see `override_queries` in the `config`)\n-                let _ = rustc_typeck::check_crate(tcx);\n                 tcx.sess.abort_if_errors();\n                 sess.time(\"missing_docs\", || {\n                     rustc_lint::check_crate(tcx, rustc_lint::builtin::MissingDoc::new);"}, {"sha": "cda53bff07a1b0fc8e5d226c989659283d4e6bf7", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,10 +1,7 @@\n // edition:2018\n+// check-pass\n \n-/// This used to work with ResolveBodyWithLoop.\n-/// However now that we ignore type checking instead of modifying the function body,\n-/// the return type is seen as `impl Future<Output = u32>`, not a `u32`.\n-/// So it no longer allows errors in the function body.\n+/// Should compile fine\n pub async fn a() -> u32 {\n     error::_in::async_fn()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "086db1be722742a717b076c2a2f957f0460e4942", "filename": "src/test/rustdoc-ui/error-in-impl-trait/async.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fasync.stderr?ref=f042d749b0fc212bff6bdc44b84e134b878bff64", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::async_fn`\n-  --> $DIR/async.rs:8:5\n-   |\n-LL |     error::_in::async_fn()\n-   |     ^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::async_fn`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "f1fd85bb23cb6cd8da4d9ca229ee6af5304122ba", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,5 +1,5 @@\n+// check-pass\n // manually desugared version of an `async fn` (but with a closure instead of a generator)\n pub fn a() -> impl Fn() -> u32 {\n     || content::doesnt::matter()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "4ee9c4d1f438dd2f931ca0691249567d5af19f87", "filename": "src/test/rustdoc-ui/error-in-impl-trait/closure.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fclosure.stderr?ref=f042d749b0fc212bff6bdc44b84e134b878bff64", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `content::doesnt::matter`\n-  --> $DIR/closure.rs:3:8\n-   |\n-LL |     || content::doesnt::matter()\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `content::doesnt::matter`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "dcec379d47e946c0b91fc2fae68a3d50b806a94f", "filename": "src/test/rustdoc-ui/error-in-impl-trait/generic-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,7 +1,7 @@\n+// check-pass\n trait ValidTrait {}\n \n /// This has docs\n pub fn f() -> impl ValidTrait {\n     Vec::<DoesNotExist>::new()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "72716c258dc1ee42d0ba715688d689b94651a9a7", "filename": "src/test/rustdoc-ui/error-in-impl-trait/generic-argument.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fgeneric-argument.stderr?ref=f042d749b0fc212bff6bdc44b84e134b878bff64", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `DoesNotExist`\n-  --> $DIR/generic-argument.rs:5:11\n-   |\n-LL |     Vec::<DoesNotExist>::new()\n-   |           ^^^^^^^^^^^^ could not resolve path `DoesNotExist`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "b935b0832f065ac9a06fc3677f7d2453772bab8f", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,6 +1,6 @@\n+// check-pass\n pub trait ValidTrait {}\n /// This returns impl trait\n pub fn g() -> impl ValidTrait {\n     (|| error::_in::impl_trait::alias::nested::closure())()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "55f9b609a1105183d015e75c9481305703b7fd6c", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword-closure.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword-closure.stderr?ref=f042d749b0fc212bff6bdc44b84e134b878bff64", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-  --> $DIR/impl-keyword-closure.rs:4:9\n-   |\n-LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "701126f87a1f0fc091845f623bcd66248354a1d1", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,6 +1,6 @@\n+// check-pass\n pub trait ValidTrait {}\n /// This returns impl trait\n pub fn g() -> impl ValidTrait {\n     error::_in::impl_trait()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "3257079f94219f2c602bdc09f3559cc90f54cdf0", "filename": "src/test/rustdoc-ui/error-in-impl-trait/impl-keyword.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fimpl-keyword.stderr?ref=f042d749b0fc212bff6bdc44b84e134b878bff64", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait`\n-  --> $DIR/impl-keyword.rs:4:5\n-   |\n-LL |     error::_in::impl_trait()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "31dd786cbbf8974bdea235940088b5a8ede648ad", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n@@ -6,5 +7,4 @@ type ImplTrait = impl ValidTrait;\n /// This returns impl trait, but using a type alias\n pub fn h() -> ImplTrait {\n     (|| error::_in::impl_trait::alias::nested::closure())()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "84b28139dbcd53cb69c7dbae7d8b48ccd6a9a2b6", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.stderr?ref=f042d749b0fc212bff6bdc44b84e134b878bff64", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-  --> $DIR/trait-alias-closure.rs:8:9\n-   |\n-LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "c18a024af4bbc88eca84a20d221af858989b75a5", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n@@ -6,5 +7,4 @@ type ImplTrait = impl ValidTrait;\n /// This returns impl trait, but using a type alias\n pub fn h() -> ImplTrait {\n     error::_in::impl_trait::alias()\n-    //~^ ERROR failed to resolve\n }"}, {"sha": "9be6a3d8d6bba7c69cbe6565ca1aa4c2f344d648", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f042d749b0fc212bff6bdc44b84e134b878bff64/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.stderr?ref=f042d749b0fc212bff6bdc44b84e134b878bff64", "patch": "@@ -1,12 +0,0 @@\n-error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias`\n-  --> $DIR/trait-alias.rs:8:5\n-   |\n-LL |     error::_in::impl_trait::alias()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias`\n-   |\n-   = note: this error was originally ignored because you are running `rustdoc`\n-   = note: try running again with `rustc` or `cargo check` and you may get a more detailed error\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "8d12392c5674ea0de8bc6903b416e36e09612c3d", "filename": "src/test/rustdoc-ui/infinite-recursive-type.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31fcda170a0671195b7a1506b09c5f655fc4d7e9/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type.stderr?ref=31fcda170a0671195b7a1506b09c5f655fc4d7e9", "patch": "@@ -1,17 +1,26 @@\n-error[E0072]: recursive type `E` has infinite size\n+error: internal compiler error[E0391]: cycle detected when computing `Sized` constraints for `E`\n   --> $DIR/infinite-recursive-type.rs:1:1\n    |\n LL | enum E {\n-   | ^^^^^^ recursive type has infinite size\n-LL |\n-LL |     V(E),\n-   |       - recursive without indirection\n+   | ^^^^^^\n    |\n-help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `E` representable\n+   = note: ...which again requires computing `Sized` constraints for `E`, completing the cycle\n+   = note: cycle used when evaluating trait selection obligation `E: std::convert::From<E>`\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n    |\n-LL |     V(Box<E>),\n-   |       ^^^^ ^\n+   = note: delayed at /home/joshua/rustc/src/librustc_session/session.rs:436:27\n+\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:366:17\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n+\n+note: rustc 1.47.0-dev running on x86_64-unknown-linux-gnu\n \n-error: aborting due to previous error\n+note: compiler flags: -Z threads=1 -Z ui-testing -Z deduplicate-diagnostics=no -Z unstable-options -C debuginfo=0\n \n-For more information about this error, try `rustc --explain E0072`."}]}