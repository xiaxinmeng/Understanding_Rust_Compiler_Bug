{"sha": "0362891073f442a151b1255c57549b46beaa1fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjI4OTEwNzNmNDQyYTE1MWIxMjU1YzU3NTQ5YjQ2YmVhYTFmYjM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-08T01:58:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-08T01:58:43Z"}, "message": "Rollup merge of #42470 - frewsxcv:frewsxcv/ffi-cstr-doc-examples, r=QuietMisdreavus\n\nAdd doc examples for `CString` methods.\n\nNone", "tree": {"sha": "e55545cd2fa207af2dacbb59cd5f2833357e193c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e55545cd2fa207af2dacbb59cd5f2833357e193c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0362891073f442a151b1255c57549b46beaa1fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0362891073f442a151b1255c57549b46beaa1fb3", "html_url": "https://github.com/rust-lang/rust/commit/0362891073f442a151b1255c57549b46beaa1fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0362891073f442a151b1255c57549b46beaa1fb3/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03eb7109c722117322064390bc66578cde3f7b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03eb7109c722117322064390bc66578cde3f7b8e", "html_url": "https://github.com/rust-lang/rust/commit/03eb7109c722117322064390bc66578cde3f7b8e"}, {"sha": "06f63f5edb887aaff70a475de904103119d022e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f63f5edb887aaff70a475de904103119d022e3", "html_url": "https://github.com/rust-lang/rust/commit/06f63f5edb887aaff70a475de904103119d022e3"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "2d78f0511d6d763b2ccc953159e1e6b8745f3e09", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0362891073f442a151b1255c57549b46beaa1fb3/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0362891073f442a151b1255c57549b46beaa1fb3/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=0362891073f442a151b1255c57549b46beaa1fb3", "patch": "@@ -288,6 +288,26 @@ impl CString {\n     /// Failure to call [`from_raw`] will lead to a memory leak.\n     ///\n     /// [`from_raw`]: #method.from_raw\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    ///\n+    /// let ptr = c_string.into_raw();\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(b'f', *ptr as u8);\n+    ///     assert_eq!(b'o', *ptr.offset(1) as u8);\n+    ///     assert_eq!(b'o', *ptr.offset(2) as u8);\n+    ///     assert_eq!(b'\\0', *ptr.offset(3) as u8);\n+    ///\n+    ///     // retake pointer to free memory\n+    ///     let _ = CString::from_raw(ptr);\n+    /// }\n+    /// ```\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut c_char {\n         Box::into_raw(self.into_inner()) as *mut c_char\n@@ -311,6 +331,16 @@ impl CString {\n     ///\n     /// The returned buffer does **not** contain the trailing nul separator and\n     /// it is guaranteed to not have any interior nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.into_bytes();\n+    /// assert_eq!(bytes, vec![b'f', b'o', b'o']);\n+    /// ```\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         let mut vec = self.into_inner().into_vec();\n@@ -323,6 +353,16 @@ impl CString {\n     /// includes the trailing nul byte.\n     ///\n     /// [`into_bytes`]: #method.into_bytes\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.into_bytes_with_nul();\n+    /// assert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n+    /// ```\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes_with_nul(self) -> Vec<u8> {\n         self.into_inner().into_vec()\n@@ -332,6 +372,16 @@ impl CString {\n     ///\n     /// The returned slice does **not** contain the trailing nul separator and\n     /// it is guaranteed to not have any interior nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.as_bytes();\n+    /// assert_eq!(bytes, &[b'f', b'o', b'o']);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes(&self) -> &[u8] {\n         &self.inner[..self.inner.len() - 1]\n@@ -341,6 +391,16 @@ impl CString {\n     /// includes the trailing nul byte.\n     ///\n     /// [`as_bytes`]: #method.as_bytes\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    ///\n+    /// let c_string = CString::new(\"foo\").unwrap();\n+    /// let bytes = c_string.as_bytes_with_nul();\n+    /// assert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner"}]}