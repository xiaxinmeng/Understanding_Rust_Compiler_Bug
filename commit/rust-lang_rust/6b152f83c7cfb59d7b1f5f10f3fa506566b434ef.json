{"sha": "6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTUyZjgzYzdjZmI1OWQ3YjFmNWYxMGYzZmE1MDY1NjZiNDM0ZWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-07T15:38:49Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-11T14:00:42Z"}, "message": "Don't gensym `Self` parameters", "tree": {"sha": "36836f2e9167fbaeacbfd519851791fdb6a56d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36836f2e9167fbaeacbfd519851791fdb6a56d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "html_url": "https://github.com/rust-lang/rust/commit/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6babbc6d6052e182613b2e96f361fad78177c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6babbc6d6052e182613b2e96f361fad78177c5", "html_url": "https://github.com/rust-lang/rust/commit/2f6babbc6d6052e182613b2e96f361fad78177c5"}], "stats": {"total": 27, "additions": 2, "deletions": 25}, "files": [{"sha": "cc213cfccd40a717353ce41b0cf87ca5893dd946", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "patch": "@@ -2886,15 +2886,6 @@ impl<'a> LoweringContext<'a> {\n                 (param_name, kind)\n             }\n             GenericParamKind::Type { ref default, .. } => {\n-                // Don't expose `Self` (recovered \"keyword used as ident\" parse error).\n-                // `rustc::ty` expects `Self` to be only used for a trait's `Self`.\n-                // Instead, use `gensym(\"Self\")` to create a distinct name that looks the same.\n-                let ident = if param.ident.name == kw::SelfUpper {\n-                    param.ident.gensym()\n-                } else {\n-                    param.ident\n-                };\n-\n                 let add_bounds = add_bounds.get(&param.id).map_or(&[][..], |x| &x);\n                 if !add_bounds.is_empty() {\n                     let params = self.lower_param_bounds(add_bounds, itctx.reborrow()).into_iter();\n@@ -2913,7 +2904,7 @@ impl<'a> LoweringContext<'a> {\n                                           .next(),\n                 };\n \n-                (hir::ParamName::Plain(ident), kind)\n+                (hir::ParamName::Plain(param.ident), kind)\n             }\n             GenericParamKind::Const { ref ty } => {\n                 (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const {"}, {"sha": "7010664722d510967969e5ddadf4b7e4d0f371cb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b152f83c7cfb59d7b1f5f10f3fa506566b434ef/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6b152f83c7cfb59d7b1f5f10f3fa506566b434ef", "patch": "@@ -1011,13 +1011,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                         synthetic,\n                         ..\n                     } => {\n-                        if param.name.ident().name == kw::SelfUpper {\n-                            span_bug!(\n-                                param.span,\n-                                \"`Self` should not be the name of a regular parameter\"\n-                            );\n-                        }\n-\n                         if !allow_defaults && default.is_some() {\n                             if !tcx.features().default_type_parameter_fallback {\n                                 tcx.lint_hir(\n@@ -1041,13 +1034,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                         }\n                     }\n                     GenericParamKind::Const { .. } => {\n-                        if param.name.ident().name == kw::SelfUpper {\n-                            span_bug!(\n-                                param.span,\n-                                \"`Self` should not be the name of a regular parameter\",\n-                            );\n-                        }\n-\n                         ty::GenericParamDefKind::Const\n                     }\n                     _ => return None,\n@@ -1569,7 +1555,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     &format!(\n                                         \"defining opaque type use restricts opaque \\\n                                          type by using the generic parameter `{}` twice\",\n-                                        p.name\n+                                        p,\n                                     ),\n                                 );\n                                 return;"}]}