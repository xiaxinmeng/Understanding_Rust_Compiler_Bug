{"sha": "ce5ad1da12da71712750a984dbdb1a1645745e6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNWFkMWRhMTJkYTcxNzEyNzUwYTk4NGRiZGIxYTE2NDU3NDVlNmI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-27T21:14:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-28T22:16:20Z"}, "message": "Allow non-inline modules in more places.", "tree": {"sha": "1d591d58f217d4ef55dbbabbfb91f1ef8762036a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d591d58f217d4ef55dbbabbfb91f1ef8762036a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce5ad1da12da71712750a984dbdb1a1645745e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5ad1da12da71712750a984dbdb1a1645745e6b", "html_url": "https://github.com/rust-lang/rust/commit/ce5ad1da12da71712750a984dbdb1a1645745e6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce5ad1da12da71712750a984dbdb1a1645745e6b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0623cf7bda44849ab5df78a06b22f9108cf821a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0623cf7bda44849ab5df78a06b22f9108cf821a", "html_url": "https://github.com/rust-lang/rust/commit/d0623cf7bda44849ab5df78a06b22f9108cf821a"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "2d8fbdf3721c8fbe57b80e8bf50e2a87a9cfb87d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ce5ad1da12da71712750a984dbdb1a1645745e6b", "patch": "@@ -696,7 +696,9 @@ pub struct ExpansionData {\n     pub depth: usize,\n     pub backtrace: ExpnId,\n     pub module: Rc<ModuleData>,\n-    pub in_block: bool,\n+\n+    // True if non-inline modules without a `#[path]` are forbidden at the root of this expansion.\n+    pub no_noninline_mod: bool,\n }\n \n /// One of these is made during expansion and incrementally updated as we go;\n@@ -727,7 +729,7 @@ impl<'a> ExtCtxt<'a> {\n                 depth: 0,\n                 backtrace: NO_EXPANSION,\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n-                in_block: false,\n+                no_noninline_mod: false,\n             },\n         }\n     }"}, {"sha": "bc56c54ea5241fcb90b5aa5e0190c20c638ecdfa", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ce5ad1da12da71712750a984dbdb1a1645745e6b", "patch": "@@ -601,9 +601,9 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {\n-        let orig_in_block = mem::replace(&mut self.cx.current_expansion.in_block, true);\n+        let no_noninline_mod = mem::replace(&mut self.cx.current_expansion.no_noninline_mod, true);\n         let result = noop_fold_block(block, self);\n-        self.cx.current_expansion.in_block = orig_in_block;\n+        self.cx.current_expansion.no_noninline_mod = no_noninline_mod;\n         result\n     }\n \n@@ -642,6 +642,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                     return noop_fold_item(item, self);\n                 }\n \n+                let orig_no_noninline_mod = self.cx.current_expansion.no_noninline_mod;\n                 let mut module = (*self.cx.current_expansion.module).clone();\n                 module.mod_path.push(item.ident);\n \n@@ -651,11 +652,14 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                 let inline_module = item.span.contains(inner) || inner == syntax_pos::DUMMY_SP;\n \n                 if inline_module {\n-                    module.directory.push(&*{\n-                        ::attr::first_attr_value_str_by_name(&item.attrs, \"path\")\n-                            .unwrap_or(item.ident.name.as_str())\n-                    });\n+                    if let Some(path) = attr::first_attr_value_str_by_name(&item.attrs, \"path\") {\n+                        self.cx.current_expansion.no_noninline_mod = false;\n+                        module.directory.push(&*path);\n+                    } else {\n+                        module.directory.push(&*item.ident.name.as_str());\n+                    }\n                 } else {\n+                    self.cx.current_expansion.no_noninline_mod = false;\n                     module.directory =\n                         PathBuf::from(self.cx.parse_sess.codemap().span_to_filename(inner));\n                     module.directory.pop();\n@@ -665,6 +669,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                     mem::replace(&mut self.cx.current_expansion.module, Rc::new(module));\n                 let result = noop_fold_item(item, self);\n                 self.cx.current_expansion.module = orig_module;\n+                self.cx.current_expansion.no_noninline_mod = orig_no_noninline_mod;\n                 return result;\n             }\n             _ => noop_fold_item(item, self),"}, {"sha": "4619caf26c718f18f8843cf28526383edddcdfeb", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=ce5ad1da12da71712750a984dbdb1a1645745e6b", "patch": "@@ -211,7 +211,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                            rhs);\n                 let mut p = Parser::new(cx.parse_sess(), cx.cfg(), Box::new(trncbr));\n                 p.directory = cx.current_expansion.module.directory.clone();\n-                p.restrictions = match cx.current_expansion.in_block {\n+                p.restrictions = match cx.current_expansion.no_noninline_mod {\n                     true => Restrictions::NO_NONINLINE_MOD,\n                     false => Restrictions::empty(),\n                 };"}, {"sha": "72d89510e79099d066ef51b8d8d98a067b6084c2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5ad1da12da71712750a984dbdb1a1645745e6b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ce5ad1da12da71712750a984dbdb1a1645745e6b", "patch": "@@ -5289,23 +5289,27 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             let directory = self.directory.clone();\n-            self.push_directory(id, &outer_attrs);\n+            let restrictions = self.push_directory(id, &outer_attrs);\n             self.expect(&token::OpenDelim(token::Brace))?;\n             let mod_inner_lo = self.span.lo;\n             let attrs = self.parse_inner_attributes()?;\n-            let m = self.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)?;\n+            let m = self.with_res(restrictions, |this| {\n+                this.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)\n+            })?;\n             self.directory = directory;\n             Ok((id, ItemKind::Mod(m), Some(attrs)))\n         }\n     }\n \n-    fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {\n-        let default_path = self.id_to_interned_str(id);\n-        let file_path = match ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n-            Some(d) => d,\n-            None => default_path,\n-        };\n-        self.directory.push(&*file_path)\n+    fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) -> Restrictions {\n+        if let Some(path) = ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n+            self.directory.push(&*path);\n+            self.restrictions - Restrictions::NO_NONINLINE_MOD\n+        } else {\n+            let default_path = self.id_to_interned_str(id);\n+            self.directory.push(&*default_path);\n+            self.restrictions\n+        }\n     }\n \n     pub fn submod_path_from_attr(attrs: &[ast::Attribute], dir_path: &Path) -> Option<PathBuf> {"}]}