{"sha": "ab64580977ca6dabc07f5944898435708bfbb0c8", "node_id": "C_kwDOAAsO6NoAKGFiNjQ1ODA5NzdjYTZkYWJjMDdmNTk0NDg5ODQzNTcwOGJmYmIwYzg", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-16T22:04:02Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-25T00:08:41Z"}, "message": "Bless tests", "tree": {"sha": "071e9753e4782780d69af35964be81616f51c652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071e9753e4782780d69af35964be81616f51c652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab64580977ca6dabc07f5944898435708bfbb0c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab64580977ca6dabc07f5944898435708bfbb0c8", "html_url": "https://github.com/rust-lang/rust/commit/ab64580977ca6dabc07f5944898435708bfbb0c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab64580977ca6dabc07f5944898435708bfbb0c8/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19eaee2c329a428ba052ef30a5d51464b098e591", "url": "https://api.github.com/repos/rust-lang/rust/commits/19eaee2c329a428ba052ef30a5d51464b098e591", "html_url": "https://github.com/rust-lang/rust/commit/19eaee2c329a428ba052ef30a5d51464b098e591"}], "stats": {"total": 555, "additions": 342, "deletions": 213}, "files": [{"sha": "c6187879ab0a9cca0438a29de9cc8da6e9152ab9", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -3,64 +3,78 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:6:11: 6:11\n     let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:7:9: 7:10\n-    let mut _2: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-    let _3: ();                          // in scope 0 at $DIR/box_expr.rs:8:5: 8:12\n-    let mut _4: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:8:10: 8:11\n+    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:8:5: 8:12\n+    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:8:10: 8:11\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:7:9: 7:10\n     }\n+    scope 2 {\n+    }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n-        StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = S::new() -> [return: bb1, unwind: bb7]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n+        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n                                          // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:7:17: 7:23\n-                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n+                                         // + span: $DIR/box_expr.rs:7:13: 7:25\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:7:17: 7:23\n+                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n-        StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n-        StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        drop(_5) -> bb3;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n-        StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n-        StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n+    bb4: {\n+        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb5;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n-    bb4: {\n+    bb5: {\n         StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n     }\n \n-    bb5 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n-    }\n-\n     bb6 (cleanup): {\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb8 (cleanup): {\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb9 (cleanup): {\n         resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n }"}, {"sha": "342c987343eac911b82231fad01546734c2c1a35", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -6,34 +6,51 @@\n       let _1: i32;                         // in scope 0 at $DIR/boxes.rs:12:9: 12:10\n       let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:12:13: 12:22\n       let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/boxes.rs:12:9: 12:10\n       }\n+      scope 2 {\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:12:9: 12:10\n           StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:12:13: 12:22\n           StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageLive(_4);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          _4 = Box(i32);                   // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          (*_4) = const 42_i32;            // scope 0 at $DIR/boxes.rs:12:19: 12:21\n-          _3 = move _4;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageDead(_4);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n+-         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+-         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+-         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n++         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n++         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n++         _6 = alloc::alloc::exchange_malloc(const 4_usize, const 4_usize) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/boxes.rs:12:14: 12:22\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          (*_7) = const 42_i32;            // scope 0 at $DIR/boxes.rs:12:19: 12:21\n+          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n           _2 = (*_3);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:12:13: 12:26\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }\n   \n-      bb1: {\n+      bb2: {\n           StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n           nop;                             // scope 0 at $DIR/boxes.rs:11:11: 13:2\n           StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }\n   \n-      bb2 (cleanup): {\n+      bb3 (cleanup): {\n           resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n       }\n   }"}, {"sha": "137a1de522b83d3723677aedfec2027f8dc3596d", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -4,23 +4,37 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n       let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-      let mut _2: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _3: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+     let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++     let mut _7: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n       }\n-+     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      scope 2 {\n+      }\n++     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageLive(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -30,32 +44,32 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb2: {\n +                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageDead(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n+-     bb3: {\n++     bb2: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n+-     bb4 (cleanup): {\n++     bb3 (cleanup): {\n           resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n--     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_2.1: std::alloc::Global)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-     bb5 (cleanup): {\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<std::vec::Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "26327d055746180cda3506513c1435fa719b1661", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -4,23 +4,37 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n       let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-      let mut _2: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _3: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+     let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++     let mut _7: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n       }\n-+     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      scope 2 {\n+      }\n++     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageLive(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -30,32 +44,32 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb2: {\n +                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageDead(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n+-     bb3: {\n++     bb2: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n+-     bb4 (cleanup): {\n++     bb3 (cleanup): {\n           resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n--     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_2.1: std::alloc::Global)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-     bb5 (cleanup): {\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<std::vec::Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "dde49c77ae7f5fbdf3cc62fe427eb4ff97c77f62", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 69, "deletions": 55, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -3,106 +3,120 @@\n fn test() -> Option<Box<u32>> {\n     let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue-62289.rs:8:14: 8:30\n     let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-    let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-    let mut _3: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-    let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-    let mut _5: isize;                   // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _6: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _7: !;                       // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _8: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _9: u32;                         // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _2: usize;                   // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _5: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _6: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+    let mut _8: isize;                   // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _9: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let mut _10: !;                      // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let mut _11: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _12: u32;                        // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     scope 1 {\n-        debug residual => _6;            // in scope 1 at $DIR/issue-62289.rs:9:19: 9:20\n-        scope 2 {\n+    }\n+    scope 2 {\n+        debug residual => _9;            // in scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        scope 3 {\n         }\n     }\n-    scope 3 {\n-        debug val => _9;                 // in scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n-        scope 4 {\n+    scope 4 {\n+        debug val => _12;                // in scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n+        scope 5 {\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        _2 = Box(u32);                   // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::branch(move _4) -> [return: bb1, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _2 = SizeOf(u32);                // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n+        _3 = AlignOf(u32);               // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::ops::ControlFlow<<std::option::Option<u32> as std::ops::Try>::Residual, <std::option::Option<u32> as std::ops::Try>::Output> {<std::option::Option<u32> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }\n+                                         // + span: $DIR/issue-62289.rs:9:10: 9:21\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_5);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        _5 = ShallowInitBox(move _4, u32); // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_7);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _7 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n+                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::ops::ControlFlow<<std::option::Option<u32> as std::ops::Try>::Residual, <std::option::Option<u32> as std::ops::Try>::Output> {<std::option::Option<u32> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageLive(_9);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        _9 = ((_3 as Continue).0: u32);  // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        (*_2) = _9;                      // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageDead(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_7);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = discriminant(_6);           // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n     bb3: {\n-        unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_12);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _12 = ((_6 as Continue).0: u32); // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        (*_5) = _12;                     // scope 5 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageDead(_12);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _1 = move _5;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        drop(_5) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb4: {\n-        StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _6 = ((_3 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _8) -> [return: bb5, unwind: bb11]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:19: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<std::convert::Infallible>) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n+        unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n     bb5: {\n-        StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageLive(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _9 = ((_6 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_11);                // scope 3 at $DIR/issue-62289.rs:9:19: 9:20\n+        _11 = _9;                        // scope 3 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-62289.rs:9:19: 9:20\n+                                         // + literal: Const { ty: fn(std::option::Option<std::convert::Infallible>) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb7;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_11);                // scope 3 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageDead(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb7: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        StorageDead(_5);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n     bb8: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n     bb9: {\n-        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        StorageDead(_5);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb10 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    bb10: {\n+        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n     bb12 (cleanup): {\n+        drop(_5) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb13 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "d7d2cdf9b0c7577c76c0f828b9af23e2b7db1695", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -4,80 +4,108 @@ fn move_out_by_subslice() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:10:27: 10:27\n     let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n     let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-    let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-    let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-    let mut _5: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n     scope 1 {\n         debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n-        let _6: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n-        scope 2 {\n-            debug _y => _6;              // in scope 2 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        let _12: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        scope 4 {\n+            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         }\n     }\n+    scope 2 {\n+    }\n+    scope 3 {\n+    }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-        _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:11:14: 11:19\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-        StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-        _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n     bb2: {\n-        StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-        _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:11:21: 11:26\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n     bb4: {\n+        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n+        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb5: {\n+        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n-        StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n-        _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb7: {\n+        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb6: {\n+    bb8: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb9 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb10 (cleanup): {\n+        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb11 (cleanup): {\n+        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb10 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n     }\n }"}, {"sha": "18bc1a17c1b50abe24a283d5b59c88e73a2b3c8e", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -4,80 +4,108 @@ fn move_out_from_end() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:4:24: 4:24\n     let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n     let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-    let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-    let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-    let mut _5: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n     scope 1 {\n         debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n-        let _6: std::boxed::Box<i32>;    // in scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n-        scope 2 {\n-            debug _y => _6;              // in scope 2 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        let _12: std::boxed::Box<i32>;   // in scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        scope 4 {\n+            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         }\n     }\n+    scope 2 {\n+    }\n+    scope 3 {\n+    }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-        _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:5:14: 5:19\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-        StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-        _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n     bb2: {\n-        StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-        _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:5:21: 5:26\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n     bb4: {\n+        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n+        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb5: {\n+        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n-        StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n-        _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        _12 = move _1[1 of 2];           // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb7: {\n+        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb6: {\n+    bb8: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb9 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb10 (cleanup): {\n+        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb11 (cleanup): {\n+        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb10 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n     }\n }"}, {"sha": "32796c67229a7eb0892163503d37679d889e9002", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -9,5 +9,5 @@ fn main() {}\n static TEST_BAD: &mut i32 = {\n     &mut *(box 0)\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE heap allocations\n+    //~| NOTE calling non-const function `alloc::alloc::exchange_malloc`\n };"}, {"sha": "05d9858dc09f0a938351136a19bb1cab9d5fde8e", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/box.rs:10:11\n    |\n LL |     &mut *(box 0)\n-   |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n+   |           ^^^^^^^ calling non-const function `alloc::alloc::exchange_malloc`\n \n warning: skipping const checks\n    |"}, {"sha": "9e09251901583a1c09d8572a84c99b8fe1485c03", "filename": "src/test/ui/nll/issue-52663-trait-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab64580977ca6dabc07f5944898435708bfbb0c8/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr?ref=ab64580977ca6dabc07f5944898435708bfbb0c8", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `tmp0` does not live long enough\n LL |         let tmp1 = &tmp0;\n    |                    ^^^^^ borrowed value does not live long enough\n LL |         box tmp1 as Box<dyn Foo + '_>\n-   |         ----------------------------- borrow later captured here by trait object\n+   |         ----------------------------- borrow later used here\n LL |     };\n    |     - `tmp0` dropped here while still borrowed\n "}]}