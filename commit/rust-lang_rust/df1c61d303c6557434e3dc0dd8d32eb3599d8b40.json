{"sha": "df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMWM2MWQzMDNjNjU1NzQzNGUzZGMwZGQ4ZDMyZWIzNTk5ZDhiNDA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-05T00:31:40Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-29T11:05:15Z"}, "message": "Warn when rustc output conflicts with existing directories\n\nWhen the compiled executable would conflict with a directory, display a\nrustc error instead of a verbose and potentially-confusing linker\nerror. This is a usability improvement, and doesn\u2019t actually change\nbehaviour with regards to compilation success. This addresses the\nconcern in #35887.", "tree": {"sha": "0b50f5c2e191c42ff81da1177ce8560e5bf57797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b50f5c2e191c42ff81da1177ce8560e5bf57797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "html_url": "https://github.com/rust-lang/rust/commit/df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b99adeb11313197f409b4f7c4083c2ceca8a4fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b99adeb11313197f409b4f7c4083c2ceca8a4fe", "html_url": "https://github.com/rust-lang/rust/commit/6b99adeb11313197f409b4f7c4083c2ceca8a4fe"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "b04376000c0e2bd6b5f64f902340d30d9bb3f174", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "patch": "@@ -549,24 +549,44 @@ impl OutputFilenames {\n         format!(\"{}{}\", self.out_filestem, self.extra)\n     }\n \n-    pub fn contains_path(&self, input_path: &PathBuf) -> bool {\n-        let input_path = input_path.canonicalize().ok();\n-        if input_path.is_none() {\n-            return false\n-        }\n+    fn check_output<F, T>(&self, f: F) -> Option<T> where F: Fn(PathBuf) -> Option<T> {\n         match self.single_output_file {\n-            Some(ref output_path) => output_path.canonicalize().ok() == input_path,\n+            Some(ref output_path) => {\n+                f(output_path.clone())\n+            },\n             None => {\n                 for k in self.outputs.keys() {\n                     let output_path = self.path(k.to_owned());\n-                    if output_path.canonicalize().ok() == input_path {\n-                        return true;\n+                    if let Some(result) = f(output_path) {\n+                        return Some(result);\n                     }\n                 }\n-                false\n+                None\n             }\n         }\n     }\n+\n+    pub fn contains_path(&self, input_path: &PathBuf) -> bool {\n+        let input_path = input_path.canonicalize().ok();\n+        if input_path.is_none() {\n+            return false\n+        }\n+        let check = |output_path: PathBuf| {\n+            if output_path.canonicalize().ok() == input_path {\n+                Some(())\n+            } else { None }\n+        };\n+        self.check_output(check).is_some()\n+    }\n+\n+    pub fn conflicts_with_dir(&self) -> Option<PathBuf> {\n+        let check = |output_path: PathBuf| {\n+            if output_path.is_dir() {\n+                Some(output_path)\n+            } else { None }\n+        };\n+        self.check_output(check)\n+    }\n }\n \n pub fn host_triple() -> &'static str {"}, {"sha": "5875ccbfd585dd84a85fefbc91c1ab1dc6d733ba", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "patch": "@@ -125,11 +125,20 @@ pub fn compile_input(trans: Box<TransCrate>,\n         // Ensure the source file isn't accidentally overwritten during compilation.\n         match *input_path {\n             Some(ref input_path) => {\n-                if outputs.contains_path(input_path) && sess.opts.will_create_output_file() {\n-                    sess.err(&format!(\n-                        \"the input file \\\"{}\\\" would be overwritten by the generated executable\",\n-                        input_path.display()));\n-                    return Err(CompileIncomplete::Stopped);\n+                if sess.opts.will_create_output_file() {\n+                    if outputs.contains_path(input_path) {\n+                        sess.err(&format!(\n+                            \"the input file \\\"{}\\\" would be overwritten by the generated executable\",\n+                            input_path.display()));\n+                        return Err(CompileIncomplete::Stopped);\n+                    }\n+                    if let Some(dir_path) = outputs.conflicts_with_dir() {\n+                        sess.err(&format!(\n+                            \"the generated executable for the input file \\\"{}\\\" conflicts with the \\\n+                            existing directory \\\"{}\\'\",\n+                            input_path.display(), dir_path.display()));\n+                        return Err(CompileIncomplete::Stopped);\n+                    }\n                 }\n             },\n             None => {}"}, {"sha": "68f72094ce65c65245341fd1ab79ca16be841123", "filename": "src/test/run-make/output-filename-conflicts-with-directory/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2FMakefile?ref=df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\tcp foo.rs $(TMPDIR)/foo.rs\n+\tmkdir $(TMPDIR)/foo\n+\t$(RUSTC) $(TMPDIR)/foo.rs 2>&1 \\\n+\t\t| $(CGREP) -e \"the generated executable for the input file \\\".*foo\\.rs\\\" conflicts with the existing directory \\\".*foo\\'\""}, {"sha": "046d27a9f0fe55586ed5f82a1533900e04e6b1ec", "filename": "src/test/run-make/output-filename-conflicts-with-directory/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1c61d303c6557434e3dc0dd8d32eb3599d8b40/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2Ffoo.rs?ref=df1c61d303c6557434e3dc0dd8d32eb3599d8b40", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}]}