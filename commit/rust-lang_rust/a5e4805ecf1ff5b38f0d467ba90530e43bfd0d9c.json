{"sha": "a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTQ4MDVlY2YxZmY1YjM4ZjBkNDY3YmE5MDUzMGU0M2JmZDBkOWM=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-05T02:01:04Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-13T13:20:39Z"}, "message": "new_ret_no_self correctly lint impl return", "tree": {"sha": "e390259f343d600ea2d837d37fa51d3079336c50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e390259f343d600ea2d837d37fa51d3079336c50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c", "html_url": "https://github.com/rust-lang/rust/commit/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ef4af7db23c5522db2d71b60908b93127df5036", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef4af7db23c5522db2d71b60908b93127df5036", "html_url": "https://github.com/rust-lang/rust/commit/2ef4af7db23c5522db2d71b60908b93127df5036"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "f9c010beea7e32da8a5699db85dbb0cf1a17774f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c", "patch": "@@ -11,7 +11,7 @@\n use crate::rustc::hir;\n use crate::rustc::hir::def::Def;\n use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n-use crate::rustc::ty::{self, Ty};\n+use crate::rustc::ty::{self, Ty, TyKind, Predicate};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_errors::Applicability;\n use crate::syntax::ast;\n@@ -933,9 +933,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n         if let hir::ImplItemKind::Method(_, _) = implitem.node {\n             let ret_ty = return_ty(cx, implitem.id);\n-            if name == \"new\" &&\n-                !same_tys(cx, ret_ty, ty) &&\n-                !ret_ty.is_impl_trait() {\n+\n+            // if return type is impl trait\n+            if let TyKind::Opaque(def_id, _) = ret_ty.sty {\n+\n+                // then one of the associated types must be Self\n+                for predicate in cx.tcx.predicates_of(def_id).predicates.iter() {\n+                    match predicate {\n+                        (Predicate::Projection(poly_projection_predicate), _) => {\n+                            let binder = poly_projection_predicate.ty();\n+                            let associated_type = binder.skip_binder();\n+                            let associated_type_is_self_type = same_tys(cx, ty, associated_type);\n+\n+                            // if the associated type is self, early return and do not trigger lint\n+                            if associated_type_is_self_type { return; }\n+                        },\n+                        (_, _) => {},\n+                    }\n+                }\n+            }\n+\n+            if name == \"new\" && !same_tys(cx, ret_ty, ty) {\n                 span_lint(cx,\n                           NEW_RET_NO_SELF,\n                           implitem.span,"}, {"sha": "e9f41d3413360063c8a971309a9ac04dacf6460d", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c", "patch": "@@ -9,6 +9,11 @@ trait R {\n     type Item;\n }\n \n+trait Q {\n+    type Item;\n+    type Item2;\n+}\n+\n struct S;\n \n impl R for S {\n@@ -42,12 +47,26 @@ impl R for S3 {\n }\n \n impl S3 {\n-    // should trigger the lint, but currently does not\n+    // should trigger the lint\n     pub fn new(_: String) -> impl R<Item = u32> {\n         S3\n     }\n }\n \n+struct S4;\n+\n+impl Q for S4 {\n+    type Item = u32;\n+    type Item2 = Self;\n+}\n+\n+impl S4 {\n+    // should not trigger the lint\n+    pub fn new(_: String) -> impl Q<Item = u32, Item2 = Self> {\n+        S4\n+    }\n+}\n+\n struct T;\n \n impl T {"}, {"sha": "aa3a633c41807109716bee3e4b51e2f134528c2d", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=a5e4805ecf1ff5b38f0d467ba90530e43bfd0d9c", "patch": "@@ -1,20 +1,28 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:64:5\n+  --> $DIR/new_ret_no_self.rs:51:5\n    |\n-64 | /     pub fn new() -> u32 {\n-65 | |         unimplemented!();\n-66 | |     }\n+51 | /     pub fn new(_: String) -> impl R<Item = u32> {\n+52 | |         S3\n+53 | |     }\n    | |_____^\n    |\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/new_ret_no_self.rs:73:5\n+  --> $DIR/new_ret_no_self.rs:83:5\n    |\n-73 | /     pub fn new(_: String) -> u32 {\n-74 | |         unimplemented!();\n-75 | |     }\n+83 | /     pub fn new() -> u32 {\n+84 | |         unimplemented!();\n+85 | |     }\n    | |_____^\n \n-error: aborting due to 2 previous errors\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:92:5\n+   |\n+92 | /     pub fn new(_: String) -> u32 {\n+93 | |         unimplemented!();\n+94 | |     }\n+   | |_____^\n+\n+error: aborting due to 3 previous errors\n "}]}