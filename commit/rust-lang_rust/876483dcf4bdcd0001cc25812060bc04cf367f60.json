{"sha": "876483dcf4bdcd0001cc25812060bc04cf367f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjQ4M2RjZjRiZGNkMDAwMWNjMjU4MTIwNjBiYzA0Y2YzNjdmNjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-26T21:04:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-29T21:30:56Z"}, "message": "test: Fix tests.", "tree": {"sha": "a1e5c6db1359979b0eb3b595740f541f55b8c104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e5c6db1359979b0eb3b595740f541f55b8c104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876483dcf4bdcd0001cc25812060bc04cf367f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876483dcf4bdcd0001cc25812060bc04cf367f60", "html_url": "https://github.com/rust-lang/rust/commit/876483dcf4bdcd0001cc25812060bc04cf367f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876483dcf4bdcd0001cc25812060bc04cf367f60/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30f54e9d062bdb5b3cb10dd7185470280c1c278", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30f54e9d062bdb5b3cb10dd7185470280c1c278", "html_url": "https://github.com/rust-lang/rust/commit/f30f54e9d062bdb5b3cb10dd7185470280c1c278"}], "stats": {"total": 304, "additions": 114, "deletions": 190}, "files": [{"sha": "6fb737d37709f302a5f39936a86812d71b1b1f6b", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -178,8 +178,8 @@ mod tests {\n             let box = @~\"box box box\";       // refcount 1\n             bump_box_refcount(box);         // refcount 2\n             let ptr: *int = transmute(box); // refcount 2\n-            let _box1: @~str = reinterpret_cast(&ptr);\n-            let _box2: @~str = reinterpret_cast(&ptr);\n+            let _box1: @~str = ::cast::transmute_copy(&ptr);\n+            let _box2: @~str = ::cast::transmute_copy(&ptr);\n             assert!(*_box1 == ~\"box box box\");\n             assert!(*_box2 == ~\"box box box\");\n             // Will destroy _box1 and _box2. Without the bump, this would"}, {"sha": "17192b4257b16a6b9b5a0dc11c65a7c38a375ec9", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -482,10 +482,10 @@ pub impl<T:Copy + Zero> Option<T> {\n fn test_unwrap_ptr() {\n     unsafe {\n         let x = ~0;\n-        let addr_x: *int = transmute(&*x);\n+        let addr_x: *int = ::cast::transmute(&*x);\n         let opt = Some(x);\n         let y = opt.unwrap();\n-        let addr_y: *int = transmute(&*y);\n+        let addr_y: *int = ::cast::transmute(&*y);\n         assert!(addr_x == addr_y);\n     }\n }"}, {"sha": "0f1ae09bd944ba104e7e17dcae2c0a957202bcee", "filename": "src/libcore/rt/thread.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fthread.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -21,10 +21,10 @@ pub struct Thread {\n \n pub impl Thread {\n     fn start(main: ~fn()) -> Thread {\n-        fn substart(main: &fn()) -> *raw_thread {\n-            unsafe { rust_raw_thread_start(&main) }\n+        fn substart(main: &~fn()) -> *raw_thread {\n+            unsafe { rust_raw_thread_start(main) }\n         }\n-        let raw = substart(main);\n+        let raw = substart(&main);\n         Thread {\n             main: main,\n             raw_thread: raw\n@@ -39,6 +39,6 @@ impl Drop for Thread {\n }\n \n extern {\n-    pub unsafe fn rust_raw_thread_start(f: &(&fn())) -> *raw_thread;\n+    pub unsafe fn rust_raw_thread_start(f: &(~fn())) -> *raw_thread;\n     pub unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n }"}, {"sha": "cb7925abdcdf78530fc642555ed7a41349001986", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -366,14 +366,15 @@ pub fn slice_to_uv_buf(v: &[u8]) -> Buf {\n \n /// Transmute an owned vector to a Buf\n pub fn vec_to_uv_buf(v: ~[u8]) -> Buf {\n-    let data = unsafe { malloc(v.len() as size_t) } as *u8;\n-    assert!(data.is_not_null());\n-    do vec::as_imm_buf(v) |b, l| {\n-        let data = data as *mut u8;\n-        unsafe { ptr::copy_memory(data, b, l) }\n+    unsafe {\n+        let data = malloc(v.len() as size_t) as *u8;\n+        assert!(data.is_not_null());\n+        do vec::as_imm_buf(v) |b, l| {\n+            let data = data as *mut u8;\n+            ptr::copy_memory(data, b, l)\n+        }\n+        uvll::buf_init(data, v.len())\n     }\n-    let buf = unsafe { uvll::buf_init(data, v.len()) };\n-    return buf;\n }\n \n /// Transmute a Buf that was once a ~[u8] back to ~[u8]\n@@ -384,6 +385,7 @@ pub fn vec_from_uv_buf(buf: Buf) -> Option<~[u8]> {\n         return Some(v);\n     } else {\n         // No buffer\n+        rtdebug!(\"No buffer!\");\n         return None;\n     }\n }"}, {"sha": "8cad0a22886424be926e7f213d0474e12e691b41", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -154,7 +154,7 @@ pub fn pref_align_of_val<T>(_val: &T) -> uint {\n #[inline(always)]\n pub fn refcount<T>(t: @T) -> uint {\n     unsafe {\n-        let ref_ptr: *uint = cast::transmute(t);\n+        let ref_ptr: *uint = cast::transmute_copy(&t);\n         *ref_ptr - 1\n     }\n }"}, {"sha": "c45ba64c5847043b175b738f51634d54d46a7054", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -729,16 +729,16 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                     _ => fail!(~\"transmute has non-expr arg\"),\n                 };\n                 let pluralize = |n| if 1u == n { \"\" } else { \"s\" };\n-                ccx.sess.span_err(sp,\n-                                  fmt!(\"transmute called on types with \\\n-                                        different sizes: %s (%u bit%s) to \\\n-                                        %s (%u bit%s)\",\n-                                       ty_to_str(ccx.tcx, in_type),\n-                                       in_type_size,\n-                                       pluralize(in_type_size),\n-                                       ty_to_str(ccx.tcx, out_type),\n-                                       out_type_size,\n-                                       pluralize(out_type_size)));\n+                ccx.sess.span_fatal(sp,\n+                                    fmt!(\"transmute called on types with \\\n+                                          different sizes: %s (%u bit%s) to \\\n+                                          %s (%u bit%s)\",\n+                                         ty_to_str(ccx.tcx, in_type),\n+                                         in_type_size,\n+                                         pluralize(in_type_size),\n+                                         ty_to_str(ccx.tcx, out_type),\n+                                         out_type_size,\n+                                         pluralize(out_type_size)));\n             }\n \n             if !ty::type_is_nil(out_type) {"}, {"sha": "b9f3de873cf070dc5ab3de8bbc5057c2275e3940", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -3467,11 +3467,11 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n          ~[\n             arg(ty::mk_mut_rptr(tcx,\n                                 ty::re_bound(ty::br_anon(0)),\n-                                ty::mk_int(tcx))),\n+                                ty::mk_int())),\n                arg(ty::mk_int()),\n                arg(ty::mk_int())\n          ],\n-         ty::mk_int(tcx))\n+         ty::mk_int())\n       }\n       ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\"     |\n       ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n@@ -3480,7 +3480,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n          ~[\n             arg(ty::mk_mut_rptr(tcx,\n                                 ty::re_bound(ty::br_anon(0)),\n-                                ty::mk_int(tcx))),\n+                                ty::mk_int())),\n             arg(ty::mk_int())\n          ],\n          ty::mk_int())\n@@ -3550,7 +3550,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n            })),\n            arg(ty::mk_u64())\n          ],\n-         ty::mk_nil(tcx))\n+         ty::mk_nil())\n       }\n         ~\"sqrtf32\" => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n         ~\"sqrtf64\" => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),"}, {"sha": "e86ec79318880e6841abbf4b7ba9f7ac03e2ef9f", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -828,18 +828,22 @@ mod tests {\n         let m = ~Mutex();\n         let m2 = m.clone();\n         let mut sharedstate = ~0;\n-        let ptr: *int = &*sharedstate;\n-        do task::spawn || {\n-            let sharedstate: &mut int =\n-                unsafe { cast::transmute(ptr) };\n-            access_shared(sharedstate, m2, 10);\n-            c.send(());\n+        {\n+            let ptr: *int = &*sharedstate;\n+            do task::spawn || {\n+                let sharedstate: &mut int =\n+                    unsafe { cast::transmute(ptr) };\n+                access_shared(sharedstate, m2, 10);\n+                c.send(());\n \n+            }\n         }\n-        access_shared(sharedstate, m, 10);\n-        let _ = p.recv();\n+        {\n+            access_shared(sharedstate, m, 10);\n+            let _ = p.recv();\n \n-        assert!(*sharedstate == 20);\n+            assert!(*sharedstate == 20);\n+        }\n \n         fn access_shared(sharedstate: &mut int, m: &Mutex, n: uint) {\n             for n.times {\n@@ -1106,17 +1110,21 @@ mod tests {\n         let (p,c) = comm::stream();\n         let x2 = (*x).clone();\n         let mut sharedstate = ~0;\n-        let ptr: *int = &*sharedstate;\n-        do task::spawn || {\n-            let sharedstate: &mut int =\n-                unsafe { cast::transmute(ptr) };\n-            access_shared(sharedstate, &x2, mode1, 10);\n-            c.send(());\n+        {\n+            let ptr: *int = &*sharedstate;\n+            do task::spawn || {\n+                let sharedstate: &mut int =\n+                    unsafe { cast::transmute(ptr) };\n+                access_shared(sharedstate, &x2, mode1, 10);\n+                c.send(());\n+            }\n         }\n-        access_shared(sharedstate, x, mode2, 10);\n-        let _ = p.recv();\n+        {\n+            access_shared(sharedstate, x, mode2, 10);\n+            let _ = p.recv();\n \n-        assert!(*sharedstate == 20);\n+            assert!(*sharedstate == 20);\n+        }\n \n         fn access_shared(sharedstate: &mut int, x: &RWlock, mode: RWlockMode,\n                          n: uint) {"}, {"sha": "8d7a97e2e483ca47d06b9d07faf46b29be0bf0c0", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -1396,9 +1396,9 @@ mod test {\n                     // not set the data on the connect_req\n                     // until its initialized\n                     set_data_for_req(connect_req_ptr as *libc::c_void,\n-                                     transmute(&client_data));\n+                                     &client_data);\n                     set_data_for_uv_handle(tcp_handle_ptr as *libc::c_void,\n-                                           transmute(&client_data));\n+                                           &client_data);\n                     debug!(~\"before run tcp req loop\");\n                     run(test_loop);\n                     debug!(~\"after run tcp req loop\");"}, {"sha": "3311c61de8b64fbc630769f96f322eb2c3aec526", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -365,7 +365,9 @@ impl gen_init for protocol {\n                     |s| ext_cx.parse_stmt(\n                         fmt!(\"data.%s.set_buffer(buffer)\",\n                              s.name))),\n-                ext_cx.parse_expr(fmt!(\"&(data.%s)\", self.states[0].name))));\n+                ext_cx.parse_expr(fmt!(\n+                    \"::core::ptr::to_unsafe_ptr(&(data.%s))\",\n+                    self.states[0].name))));\n \n         quote_expr!({\n             let buffer = $buffer;"}, {"sha": "56dd407f4f97a01b8df6554c569170d2fc276fcb", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -1 +1 @@\n-Subproject commit 2e9f0d21fe321849a4759a01fc28eae82ef196d6\n+Subproject commit 56dd407f4f97a01b8df6554c569170d2fc276fcb"}, {"sha": "c8555ab1286b1f819389f6d9a9aadcbc976182a4", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -225,7 +225,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n }\n \n /// A parallel version of the bfs function.\n-fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n+fn pbfs(graph: &arc::ARC<graph>, key: node_id) -> bfs_result {\n     // This works by doing functional updates of a color vector.\n \n     enum color {\n@@ -236,7 +236,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         black(node_id)\n     };\n \n-    let graph_vec = arc::get(&graph); // FIXME #3387 requires this temp\n+    let graph_vec = arc::get(graph); // FIXME #3387 requires this temp\n     let mut colors = do vec::from_fn(graph_vec.len()) |i| {\n         if i as node_id == key {\n             gray(key)\n@@ -271,7 +271,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         let color_vec = arc::get(&color); // FIXME #3387 requires this temp\n         colors = do par::mapi(*color_vec) {\n             let colors = arc::clone(&color);\n-            let graph = arc::clone(&graph);\n+            let graph = arc::clone(graph);\n             let result: ~fn(+x: uint, +y: &color) -> color = |i, c| {\n                 let colors = arc::get(&colors);\n                 let graph = arc::get(&graph);\n@@ -496,7 +496,7 @@ fn main() {\n         }\n \n         let start = time::precise_time_s();\n-        let bfs_tree = pbfs(graph_arc, *root);\n+        let bfs_tree = pbfs(&graph_arc, *root);\n         let stop = time::precise_time_s();\n \n         total_par += stop - start;"}, {"sha": "3833c884652540ace6c6a1827af05b791b6232f7", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -34,7 +34,7 @@ enum request {\n     stop\n }\n \n-fn server(requests: Port<request>, responses: comm::Chan<uint>) {\n+fn server(requests: &Port<request>, responses: &comm::Chan<uint>) {\n     let mut count = 0u;\n     let mut done = false;\n     while !done {\n@@ -76,7 +76,7 @@ fn run(args: &[~str]) {\n         };\n     }\n     do task::spawn || {\n-        server(from_parent, to_parent);\n+        server(&from_parent, &to_parent);\n     }\n \n     for vec::each(worker_results) |r| {"}, {"sha": "c4044d45f36c8e4f76455fb543672c1fd538a3e5", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -30,7 +30,7 @@ enum request {\n     stop\n }\n \n-fn server(requests: PortSet<request>, responses: Chan<uint>) {\n+fn server(requests: &PortSet<request>, responses: &Chan<uint>) {\n     let mut count = 0;\n     let mut done = false;\n     while !done {\n@@ -73,7 +73,7 @@ fn run(args: &[~str]) {\n         };\n     }\n     do task::spawn || {\n-        server(from_parent, to_parent);\n+        server(&from_parent, &to_parent);\n     }\n \n     for vec::each(worker_results) |r| {"}, {"sha": "4cd7b58ce12a0009200a7d4c6b47a4dd19a9a8e5", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -104,8 +104,8 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n }\n \n fn make_sequence_processor(sz: uint,\n-                           from_parent: comm::Port<~[u8]>,\n-                           to_parent: comm::Chan<~str>) {\n+                           from_parent: &comm::Port<~[u8]>,\n+                           to_parent: &comm::Chan<~str>) {\n    let mut freqs: HashMap<~[u8], uint> = HashMap::new();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n@@ -140,7 +140,7 @@ fn make_sequence_processor(sz: uint,\n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n     let args = os::args();\n-   let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n        // get to this massive data set, but include_bin! chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n@@ -168,7 +168,7 @@ fn main() {\n         let (from_parent, to_child) = comm::stream();\n \n         do task::spawn_with(from_parent) |from_parent| {\n-            make_sequence_processor(sz, from_parent, to_parent_);\n+            make_sequence_processor(sz, &from_parent, &to_parent_);\n         };\n \n         to_child"}, {"sha": "acb8a6bcbeed644b6c0b13ee8d5089c21f6eb25a", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -30,23 +30,23 @@ use core::result;\n use core::result::{Ok, Err};\n \n fn fib(n: int) -> int {\n-    fn pfib(c: Chan<int>, n: int) {\n+    fn pfib(c: &Chan<int>, n: int) {\n         if n == 0 {\n             c.send(0);\n         } else if n <= 2 {\n             c.send(1);\n         } else {\n             let p = PortSet::new();\n             let ch = p.chan();\n-            task::spawn(|| pfib(ch, n - 1) );\n+            task::spawn(|| pfib(&ch, n - 1) );\n             let ch = p.chan();\n-            task::spawn(|| pfib(ch, n - 2) );\n+            task::spawn(|| pfib(&ch, n - 2) );\n             c.send(p.recv() + p.recv());\n         }\n     }\n \n     let (p, ch) = stream();\n-    let _t = task::spawn(|| pfib(ch, n) );\n+    let _t = task::spawn(|| pfib(&ch, n) );\n     p.recv()\n }\n "}, {"sha": "2efc16de8307fbcd5819e3d8421878f14f014e3b", "filename": "src/test/compile-fail/arg-style-mismatch.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Farg-style-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Farg-style-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farg-style-mismatch.rs?ref=f30f54e9d062bdb5b3cb10dd7185470280c1c278", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: mismatched types\n-\n-fn f(&&_x: int) {}\n-fn g(_a: &fn(+v: int)) {}\n-fn main() { g(f); }"}, {"sha": "c60848e5cc6c5ab443cacac7c067e420bd1d8e88", "filename": "src/test/compile-fail/liveness-move-from-args.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-from-args.rs?ref=f30f54e9d062bdb5b3cb10dd7185470280c1c278", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn take(_x: ~int) { }\n-\n-fn from_by_ref_arg(&&x: ~int) {\n-    take(x);  //~ ERROR illegal move from argument `x`, which is not copy or move mode\n-}\n-\n-fn from_copy_arg(+x: ~int) {\n-    take(x);\n-}\n-\n-fn main() {\n-}"}, {"sha": "9fe464131cc68cd5ce934d47cb1fa7f3e1873beb", "filename": "src/test/compile-fail/mode-inference-fail.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmode-inference-fail.rs?ref=f30f54e9d062bdb5b3cb10dd7185470280c1c278", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// In this test, the mode gets inferred to ++ due to the apply_int(),\n-// but then we get a failure in the generic apply().\n-\n-fn apply<A>(f: &fn(A) -> A, a: A) -> A { f(a) }\n-fn apply_int(f: &fn(int) -> int, a: int) -> int { f(a) }\n-\n-fn main() {\n-    let f = {|i| i};\n-    assert!(apply_int(f, 2) == 2);\n-    assert!(apply(f, 2) == 2); //~ ERROR expected argument mode &&\n-}"}, {"sha": "39e47fb1aabdbff59193d2fe17cce0705035a3d5", "filename": "src/test/compile-fail/mutable-arguments.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f54e9d062bdb5b3cb10dd7185470280c1c278/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-arguments.rs?ref=f30f54e9d062bdb5b3cb10dd7185470280c1c278", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Note: it would be nice to give fewer warnings in these cases.\n-\n-fn mutate_by_mut_ref(x: &mut uint) {\n-    *x = 0;\n-}\n-\n-fn mutate_by_ref(&&x: uint) {\n-    //~^ WARNING unused variable: `x`\n-    x = 0; //~ ERROR assigning to argument\n-}\n-\n-fn mutate_by_copy(+x: uint) {\n-    //~^ WARNING unused variable: `x`\n-    x = 0; //~ ERROR assigning to argument\n-    //~^ WARNING value assigned to `x` is never read\n-}\n-\n-fn mutate_by_move(+x: uint) {\n-    //~^ WARNING unused variable: `x`\n-    x = 0; //~ ERROR assigning to argument\n-    //~^ WARNING value assigned to `x` is never read\n-}\n-\n-fn main() {\n-}"}, {"sha": "d9f3f10a11b035febad203c943bb9afbb1758083", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -25,7 +25,7 @@ fn foo(s: @int) {\n       _ => { debug!(\"?\"); fail!(); }\n     }\n     debug!(::core::sys::refcount(s));\n-    assert!((::core::sys::refcount(s) == count + 1u));\n+    assert_eq!(::core::sys::refcount(s), count + 1u);\n     let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n }\n \n@@ -39,5 +39,5 @@ pub fn main() {\n     debug!(\"%u\", ::core::sys::refcount(s));\n     let count2 = ::core::sys::refcount(s);\n     let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n-    assert!(count == count2);\n+    assert_eq!(count, count2);\n }"}, {"sha": "cb713adcb28fccd6bdb180bc6db12895a2bb35a2", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //debug!(\"%?\", bt0);\n     do cci_iter_lib::iter(~[1, 2, 3]) |i| {\n-        io::print(fmt!(\"%d\", i));\n+        io::print(fmt!(\"%d\", *i));\n         //assert!(bt0 == sys::rusti::frame_address(2u32));\n     }\n }"}, {"sha": "847d8a4d1f90e40c5cbd0d902b6db4534991f8bf", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -16,14 +16,14 @@ use cci_nested_lib::*;\n \n pub fn main() {\n     let lst = new_int_alist();\n-    alist_add(lst, 22, ~\"hi\");\n-    alist_add(lst, 44, ~\"ho\");\n-    assert!(alist_get(lst, 22) == ~\"hi\");\n-    assert!(alist_get(lst, 44) == ~\"ho\");\n+    alist_add(&lst, 22, ~\"hi\");\n+    alist_add(&lst, 44, ~\"ho\");\n+    assert!(alist_get(&lst, 22) == ~\"hi\");\n+    assert!(alist_get(&lst, 44) == ~\"ho\");\n \n     let lst = new_int_alist_2();\n-    alist_add(lst, 22, ~\"hi\");\n-    alist_add(lst, 44, ~\"ho\");\n-    assert!(alist_get(lst, 22) == ~\"hi\");\n-    assert!(alist_get(lst, 44) == ~\"ho\");\n+    alist_add(&lst, 22, ~\"hi\");\n+    alist_add(&lst, 44, ~\"ho\");\n+    assert!(alist_get(&lst, 22) == ~\"hi\");\n+    assert!(alist_get(&lst, 44) == ~\"ho\");\n }"}, {"sha": "1c0a09d52cfc81c75d74c524c92b9116ad554b1e", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -68,5 +68,4 @@ pub fn main() {\n   for uint::range(1u, 10u) |_i| {\n     make_speak(copy nyan);\n   }\n-  assert!((nyan.eat()));\n }"}, {"sha": "cf92515e01028f455fa1bdf9f3062eaac976ce2a", "filename": "src/test/run-pass/enum-alignment.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-alignment.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -14,7 +14,10 @@ fn addr_of<T>(ptr: &T) -> uint {\n }\n \n fn is_aligned<T>(ptr: &T) -> bool {\n-    (ptr::to_unsafe_ptr(ptr) % sys::min_align_of::<T>()) == 0\n+    unsafe {\n+        let addr: uint = ::cast::transmute(ptr);\n+        (addr % sys::min_align_of::<T>()) == 0\n+    }\n }\n \n pub fn main() {"}, {"sha": "c46e41ab0eb1c9e96747550252217daecf716cee", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -26,7 +26,7 @@ struct Ccx {\n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n         cast::transmute(libc::malloc(sys::size_of::<Bcx<'blk>>()\n-            as libc::size_t));\n+            as libc::size_t))\n     }\n }\n "}, {"sha": "afed0bd9ac3f809f50ce72130722d78ae1dec31d", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::cell::Cell;\n+\n pub fn main() { test05(); }\n \n fn test05_start(&&f: ~fn(int)) {\n@@ -20,7 +22,8 @@ fn test05() {\n         error!(*three + n); // will copy x into the closure\n         assert!((*three == 3));\n     };\n+    let fn_to_send = Cell(fn_to_send);\n     task::spawn(|| {\n-        test05_start(fn_to_send);\n+        test05_start(fn_to_send.take());\n     });\n }"}, {"sha": "973897cd1452126aad3e613cb31c94f659301923", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -58,10 +58,10 @@ fn build<A, B: buildable<A>>(builder: &fn(push: &fn(+v: A))) -> B {\n \n /// Apply a function to each element of an iterable and return the results\n fn map<T, IT: BaseIter<T>, U, BU: buildable<U>>\n-    (v: IT, f: &fn(T) -> U) -> BU {\n+    (v: IT, f: &fn(&T) -> U) -> BU {\n     do build |push| {\n         for v.each() |elem| {\n-            push(f(*elem));\n+            push(f(elem));\n         }\n     }\n }\n@@ -78,9 +78,9 @@ pub fn main() {\n     let v: @[int] = seq_range(0, 10);\n     assert!(v == @[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n \n-    let v: @[int] = map(&[1,2,3], |x| 1+x);\n+    let v: @[int] = map(&[1,2,3], |&x| 1+x);\n     assert!(v == @[2, 3, 4]);\n-    let v: ~[int] = map(&[1,2,3], |x| 1+x);\n+    let v: ~[int] = map(&[1,2,3], |&x| 1+x);\n     assert!(v == ~[2, 3, 4]);\n \n     assert!(bool_like::select(true, 9, 14) == 9);"}, {"sha": "6fc29fa32db32a333250079e4d686cc76fabf6a4", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -17,7 +17,7 @@ use core::comm::Port;\n \n pub fn main() { test05(); }\n \n-fn test05_start(ch : Chan<int>) {\n+fn test05_start(ch : &Chan<int>) {\n     ch.send(10);\n     error!(\"sent 10\");\n     ch.send(20);\n@@ -28,8 +28,8 @@ fn test05_start(ch : Chan<int>) {\n \n fn test05() {\n     let (po, ch) = comm::stream();\n-    task::spawn(|| test05_start(ch) );\n-    let mut value = po.recv();\n+    task::spawn(|| test05_start(&ch) );\n+    let mut value: int = po.recv();\n     error!(value);\n     value = po.recv();\n     error!(value);"}, {"sha": "f22328a3e1b32fb469d78ecab7ead9c84ca4ac7d", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -12,14 +12,14 @@\n \n extern mod std;\n \n-fn start(c: comm::Chan<int>, start: int, number_of_messages: int) {\n+fn start(c: &comm::Chan<int>, start: int, number_of_messages: int) {\n     let mut i: int = 0;\n     while i < number_of_messages { c.send(start + i); i += 1; }\n }\n \n pub fn main() {\n     debug!(\"Check that we don't deadlock.\");\n     let (p, ch) = comm::stream();\n-    task::try(|| start(ch, 0, 10) );\n+    task::try(|| start(&ch, 0, 10) );\n     debug!(\"Joined task\");\n }"}, {"sha": "12f9a113dfc3ec0832cd9c1e58ea53543d60961e", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876483dcf4bdcd0001cc25812060bc04cf367f60/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=876483dcf4bdcd0001cc25812060bc04cf367f60", "patch": "@@ -14,7 +14,7 @@ extern mod std;\n \n pub fn main() { test00(); }\n \n-fn test00_start(c: comm::Chan<int>, start: int, number_of_messages: int) {\n+fn test00_start(c: &comm::Chan<int>, start: int, number_of_messages: int) {\n     let mut i: int = 0;\n     while i < number_of_messages { c.send(start + i); i += 1; }\n }\n@@ -27,19 +27,19 @@ fn test00() {\n \n     let c = p.chan();\n     do task::spawn || {\n-        test00_start(c, number_of_messages * 0, number_of_messages);\n+        test00_start(&c, number_of_messages * 0, number_of_messages);\n     }\n     let c = p.chan();\n     do task::spawn || {\n-        test00_start(c, number_of_messages * 1, number_of_messages);\n+        test00_start(&c, number_of_messages * 1, number_of_messages);\n     }\n     let c = p.chan();\n     do task::spawn || {\n-        test00_start(c, number_of_messages * 2, number_of_messages);\n+        test00_start(&c, number_of_messages * 2, number_of_messages);\n     }\n     let c = p.chan();\n     do task::spawn || {\n-        test00_start(c, number_of_messages * 3, number_of_messages);\n+        test00_start(&c, number_of_messages * 3, number_of_messages);\n     }\n \n     let mut i: int = 0;"}]}