{"sha": "9dca26cf92b26ea878b142430d2309919a85aee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkY2EyNmNmOTJiMjZlYTg3OGIxNDI0MzBkMjMwOTkxOWE4NWFlZTY=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-06-01T12:40:55Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-06-20T15:08:57Z"}, "message": "Add unreachability detection for missized patterns of fixed size vectors\n\nFixed #13482", "tree": {"sha": "d1d39b0f9f3a18c4d467e7685f6a8191fe1349f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d39b0f9f3a18c4d467e7685f6a8191fe1349f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dca26cf92b26ea878b142430d2309919a85aee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dca26cf92b26ea878b142430d2309919a85aee6", "html_url": "https://github.com/rust-lang/rust/commit/9dca26cf92b26ea878b142430d2309919a85aee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dca26cf92b26ea878b142430d2309919a85aee6/comments", "author": null, "committer": null, "parents": [{"sha": "1e68d576829c09a64dd2f0ac802165a8e3376ac2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e68d576829c09a64dd2f0ac802165a8e3376ac2", "html_url": "https://github.com/rust-lang/rust/commit/1e68d576829c09a64dd2f0ac802165a8e3376ac2"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "9fa8d916e2ae19a0bd96a705b7b34d04c8626f67", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9dca26cf92b26ea878b142430d2309919a85aee6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dca26cf92b26ea878b142430d2309919a85aee6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=9dca26cf92b26ea878b142430d2309919a85aee6", "patch": "@@ -632,9 +632,9 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n             fcx.infcx().next_region_var(\n                 infer::PatternRegion(pat.span));\n \n-        let check_err = || {\n-            for elt in before.iter() {\n-                check_pat(pcx, &**elt, ty::mk_err());\n+        let check_err = |found: String| {\n+            for &elt in before.iter() {\n+                check_pat(pcx, &*elt, ty::mk_err());\n             }\n             for elt in slice.iter() {\n                 check_pat(pcx, &**elt, ty::mk_err());\n@@ -653,15 +653,16 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                     })\n                 },\n                 Some(expected),\n-                \"a vector pattern\".to_string(),\n+                found,\n                 None);\n             fcx.write_error(pat.id);\n         };\n \n-        let (elt_type, region_var, mutbl) = match *structure_of(fcx,\n+        let (elt_type, region_var, mutbl, fixed) = match *structure_of(fcx,\n                                                                 pat.span,\n                                                                 expected) {\n-          ty::ty_vec(mt, Some(_)) => (mt.ty, default_region_var, ast::MutImmutable),\n+          ty::ty_vec(mt, Some(fixed)) =>\n+            (mt.ty, default_region_var, ast::MutImmutable, Some(fixed)),\n           ty::ty_uniq(t) => match ty::get(t).sty {\n               ty::ty_vec(mt, None) => {\n                   fcx.type_error_message(pat.span,\n@@ -671,25 +672,40 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                                          },\n                                          expected,\n                                          None);\n-                  (mt.ty, default_region_var, ast::MutImmutable)\n+                  (mt.ty, default_region_var, ast::MutImmutable, None)\n               }\n               _ => {\n-                  check_err();\n+                  check_err(\"a vector pattern\".to_string());\n                   return;\n               }\n           },\n           ty::ty_rptr(r, mt) => match ty::get(mt.ty).sty {\n-              ty::ty_vec(mt, None) => (mt.ty, r, mt.mutbl),\n+              ty::ty_vec(mt, None) => (mt.ty, r, mt.mutbl, None),\n               _ => {\n-                  check_err();\n+                  check_err(\"a vector pattern\".to_string());\n                   return;\n               }\n           },\n           _ => {\n-              check_err();\n+              check_err(\"a vector pattern\".to_string());\n               return;\n           }\n         };\n+\n+        let min_len = before.len() + after.len();\n+        fixed.and_then(|count| match slice {\n+            Some(_) if count < min_len =>\n+                Some(format!(\"a fixed vector pattern of size at least {}\", min_len)),\n+\n+            None if count != min_len =>\n+                Some(format!(\"a fixed vector pattern of size {}\", min_len)),\n+\n+            _ => None\n+        }).and_then(|message| {\n+            check_err(message);\n+            Some(())\n+        });\n+\n         for elt in before.iter() {\n             check_pat(pcx, &**elt, elt_type);\n         }"}, {"sha": "2b769b9e499ea2cf11123736483987a5881c9bd1", "filename": "src/test/compile-fail/issue-13482.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9dca26cf92b26ea878b142430d2309919a85aee6/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dca26cf92b26ea878b142430d2309919a85aee6/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=9dca26cf92b26ea878b142430d2309919a85aee6", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+  let x = [1,2];\n+  let y = match x {\n+    [] => None,\n+//~^ ERROR expected `[<generic integer #1>, .. 2]` but found a fixed vector pattern of size 0\n+    [a,_] => Some(a)\n+  };\n+}"}]}