{"sha": "f7c963c0f238a6ebb07bbb290d31f772b448c7aa", "node_id": "C_kwDOAAsO6NoAKGY3Yzk2M2MwZjIzOGE2ZWJiMDdiYmIyOTBkMzFmNzcyYjQ0OGM3YWE", "commit": {"author": {"name": "Felici\u00e1n N\u00e9meth", "email": "felician.nemeth@gmail.com", "date": "2022-04-05T16:35:03Z"}, "committer": {"name": "Felici\u00e1n N\u00e9meth", "email": "felician.nemeth@gmail.com", "date": "2022-05-22T08:40:53Z"}, "message": "onTypeFormatting: don't insert > if another > is there", "tree": {"sha": "3f416c863307a1a13f719b0ba9760e4e4cc2ccdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f416c863307a1a13f719b0ba9760e4e4cc2ccdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7c963c0f238a6ebb07bbb290d31f772b448c7aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c963c0f238a6ebb07bbb290d31f772b448c7aa", "html_url": "https://github.com/rust-lang/rust/commit/f7c963c0f238a6ebb07bbb290d31f772b448c7aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7c963c0f238a6ebb07bbb290d31f772b448c7aa/comments", "author": {"login": "nemethf", "id": 1453824, "node_id": "MDQ6VXNlcjE0NTM4MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1453824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemethf", "html_url": "https://github.com/nemethf", "followers_url": "https://api.github.com/users/nemethf/followers", "following_url": "https://api.github.com/users/nemethf/following{/other_user}", "gists_url": "https://api.github.com/users/nemethf/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemethf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemethf/subscriptions", "organizations_url": "https://api.github.com/users/nemethf/orgs", "repos_url": "https://api.github.com/users/nemethf/repos", "events_url": "https://api.github.com/users/nemethf/events{/privacy}", "received_events_url": "https://api.github.com/users/nemethf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nemethf", "id": 1453824, "node_id": "MDQ6VXNlcjE0NTM4MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1453824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemethf", "html_url": "https://github.com/nemethf", "followers_url": "https://api.github.com/users/nemethf/followers", "following_url": "https://api.github.com/users/nemethf/following{/other_user}", "gists_url": "https://api.github.com/users/nemethf/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemethf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemethf/subscriptions", "organizations_url": "https://api.github.com/users/nemethf/orgs", "repos_url": "https://api.github.com/users/nemethf/repos", "events_url": "https://api.github.com/users/nemethf/events{/privacy}", "received_events_url": "https://api.github.com/users/nemethf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bb02f2329623f1bb83512135746ce77ecb72b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb02f2329623f1bb83512135746ce77ecb72b0b", "html_url": "https://github.com/rust-lang/rust/commit/3bb02f2329623f1bb83512135746ce77ecb72b0b"}], "stats": {"total": 106, "additions": 101, "deletions": 5}, "files": [{"sha": "6af62d0ab23339b9d77f7c7d653e7249da92c8f9", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 101, "deletions": 5, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f7c963c0f238a6ebb07bbb290d31f772b448c7aa/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7c963c0f238a6ebb07bbb290d31f772b448c7aa/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=f7c963c0f238a6ebb07bbb290d31f772b448c7aa", "patch": "@@ -83,19 +83,20 @@ fn on_char_typed_inner(\n     offset: TextSize,\n     char_typed: char,\n ) -> Option<ExtendedTextEdit> {\n-    fn conv(text_edit: Option<TextEdit>) -> Option<ExtendedTextEdit> {\n-        Some(ExtendedTextEdit { edit: text_edit?, is_snippet: false })\n-    }\n     if !stdx::always!(TRIGGER_CHARS.contains(char_typed)) {\n         return None;\n     }\n-    match char_typed {\n+    return match char_typed {\n         '.' => conv(on_dot_typed(&file.tree(), offset)),\n         '=' => conv(on_eq_typed(&file.tree(), offset)),\n         '<' => on_left_angle_typed(&file.tree(), offset),\n         '>' => conv(on_right_angle_typed(&file.tree(), offset)),\n         '{' => conv(on_opening_brace_typed(file, offset)),\n         _ => unreachable!(),\n+    };\n+\n+    fn conv(text_edit: Option<TextEdit>) -> Option<ExtendedTextEdit> {\n+        Some(ExtendedTextEdit { edit: text_edit?, is_snippet: false })\n     }\n }\n \n@@ -319,8 +320,17 @@ fn on_left_angle_typed(file: &SourceFile, offset: TextSize) -> Option<ExtendedTe\n     if !stdx::always!(file_text.char_at(offset) == Some('<')) {\n         return None;\n     }\n-    let range = TextRange::at(offset, TextSize::of('<'));\n \n+    // Find the next non-whitespace char in the line.\n+    let mut next_offset = offset + TextSize::of('<');\n+    while file_text.char_at(next_offset) == Some(' ') {\n+        next_offset += TextSize::of(' ')\n+    }\n+    if file_text.char_at(next_offset) == Some('>') {\n+        return None;\n+    }\n+\n+    let range = TextRange::at(offset, TextSize::of('<'));\n     if let Some(t) = file.syntax().token_at_offset(offset).left_biased() {\n         if T![impl] == t.kind() {\n             return Some(ExtendedTextEdit {\n@@ -1081,6 +1091,92 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn dont_add_closing_angle_bracket_if_it_is_already_there() {\n+        type_char_noop(\n+            '<',\n+            r#\"\n+fn foo() {\n+    bar::$0>\n+}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+fn foo(bar: &[u64]) {\n+    bar.iter().collect::$0   >();\n+}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+fn foo$0>() {}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+fn foo$0>\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+struct Foo$0> {}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+struct Foo$0>();\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+struct Foo$0>\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+enum Foo$0>\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+trait Foo$0>\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+type Foo$0> = Bar;\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+impl$0> Foo {}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+impl<T> Foo$0> {}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+impl Foo$0> {}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn regression_629() {\n         type_char_noop("}]}