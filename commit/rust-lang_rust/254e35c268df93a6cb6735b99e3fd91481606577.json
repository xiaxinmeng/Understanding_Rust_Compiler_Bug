{"sha": "254e35c268df93a6cb6735b99e3fd91481606577", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NGUzNWMyNjhkZjkzYTZjYjY3MzViOTllM2ZkOTE0ODE2MDY1Nzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-20T21:55:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-21T17:23:56Z"}, "message": "Capitalize debugging opts and make them u64", "tree": {"sha": "5857cd7dec58d3bc3d8c8ec2c7577f9c75002b0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5857cd7dec58d3bc3d8c8ec2c7577f9c75002b0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/254e35c268df93a6cb6735b99e3fd91481606577", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/254e35c268df93a6cb6735b99e3fd91481606577", "html_url": "https://github.com/rust-lang/rust/commit/254e35c268df93a6cb6735b99e3fd91481606577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/254e35c268df93a6cb6735b99e3fd91481606577/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8807771b257cfc9437ed1c837c10480f2a39ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8807771b257cfc9437ed1c837c10480f2a39ac3", "html_url": "https://github.com/rust-lang/rust/commit/a8807771b257cfc9437ed1c837c10480f2a39ac3"}], "stats": {"total": 181, "additions": 91, "deletions": 90}, "files": [{"sha": "06c13c7de15ac5b037f4c9b911e73039149a4189", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/254e35c268df93a6cb6735b99e3fd91481606577/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254e35c268df93a6cb6735b99e3fd91481606577/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=254e35c268df93a6cb6735b99e3fd91481606577", "patch": "@@ -126,7 +126,7 @@ pub mod write {\n               session::Default => lib::llvm::CodeGenLevelDefault,\n               session::Aggressive => lib::llvm::CodeGenLevelAggressive,\n             };\n-            let use_softfp = sess.opts.debugging_opts & session::use_softfp != 0;\n+            let use_softfp = sess.opts.debugging_opts & session::USE_SOFTFP != 0;\n \n             let tm = sess.targ_cfg.target_strs.target_triple.with_c_str(|T| {\n                 sess.opts.target_cpu.with_c_str(|CPU| {\n@@ -987,7 +987,7 @@ fn link_natively(sess: Session, dylib: bool, obj_filename: &Path,\n     let mut cc_args = sess.targ_cfg.target_strs.cc_args.clone();\n     cc_args.push_all_move(link_args(sess, dylib, tmpdir.path(),\n                                     obj_filename, out_filename));\n-    if (sess.opts.debugging_opts & session::print_link_args) != 0 {\n+    if (sess.opts.debugging_opts & session::PRINT_LINK_ARGS) != 0 {\n         println!(\"{} link args: '{}'\", cc_prog, cc_args.connect(\"' '\"));\n     }\n "}, {"sha": "dcab4376cd1d738b396f82a17f18ea45c2262e26", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/254e35c268df93a6cb6735b99e3fd91481606577/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254e35c268df93a6cb6735b99e3fd91481606577/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=254e35c268df93a6cb6735b99e3fd91481606577", "patch": "@@ -759,22 +759,22 @@ pub fn build_session_options(binary: ~str,\n         }\n     }\n \n-    let mut debugging_opts = 0u;\n+    let mut debugging_opts = 0;\n     let debug_flags = matches.opt_strs(\"Z\");\n     let debug_map = session::debugging_opts_map();\n     for debug_flag in debug_flags.iter() {\n-        let mut this_bit = 0u;\n+        let mut this_bit = 0;\n         for tuple in debug_map.iter() {\n             let (name, bit) = match *tuple { (ref a, _, b) => (a, b) };\n             if *name == *debug_flag { this_bit = bit; break; }\n         }\n-        if this_bit == 0u {\n+        if this_bit == 0 {\n             early_error(demitter, format!(\"unknown debug flag: {}\", *debug_flag))\n         }\n         debugging_opts |= this_bit;\n     }\n \n-    if debugging_opts & session::debug_llvm != 0 {\n+    if debugging_opts & session::DEBUG_LLVM != 0 {\n         unsafe { llvm::LLVMSetDebug(1); }\n     }\n \n@@ -797,7 +797,7 @@ pub fn build_session_options(binary: ~str,\n     let target_feature = matches.opt_str(\"target-feature\").unwrap_or(~\"\");\n     let save_temps = matches.opt_present(\"save-temps\");\n     let opt_level = {\n-        if (debugging_opts & session::no_opt) != 0 {\n+        if (debugging_opts & session::NO_OPT) != 0 {\n             No\n         } else if matches.opt_present(\"O\") {\n             if matches.opt_present(\"opt-level\") {\n@@ -816,9 +816,9 @@ pub fn build_session_options(binary: ~str,\n             }\n         } else { No }\n     };\n-    let gc = debugging_opts & session::gc != 0;\n-    let extra_debuginfo = debugging_opts & session::extra_debug_info != 0;\n-    let debuginfo = debugging_opts & session::debug_info != 0 ||\n+    let gc = debugging_opts & session::GC != 0;\n+    let extra_debuginfo = debugging_opts & session::EXTRA_DEBUG_INFO != 0;\n+    let debuginfo = debugging_opts & session::DEBUG_INFO != 0 ||\n         extra_debuginfo;\n \n     let addl_lib_search_paths = matches.opt_strs(\"L\").map(|s| {"}, {"sha": "75094bc808432c86b9708ba4ab4e93e8a6944345", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 81, "deletions": 80, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/254e35c268df93a6cb6735b99e3fd91481606577/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/254e35c268df93a6cb6735b99e3fd91481606577/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=254e35c268df93a6cb6735b99e3fd91481606577", "patch": "@@ -41,88 +41,89 @@ pub struct Config {\n \n macro_rules! debugging_opts(\n     ([ $opt:ident ] $cnt:expr ) => (\n-        pub static $opt: uint = 1 << $cnt;\n+        pub static $opt: u64 = 1 << $cnt;\n     );\n     ([ $opt:ident, $($rest:ident),* ] $cnt:expr ) => (\n-        pub static $opt: uint = 1 << $cnt;\n+        pub static $opt: u64 = 1 << $cnt;\n         debugging_opts!([ $($rest),* ] $cnt + 1)\n     )\n )\n \n debugging_opts!(\n     [\n-        verbose,\n-        time_passes,\n-        count_llvm_insns,\n-        time_llvm_passes,\n-        trans_stats,\n-        asm_comments,\n-        no_verify,\n-        borrowck_stats,\n-        no_landing_pads,\n-        debug_llvm,\n-        count_type_sizes,\n-        meta_stats,\n-        no_opt,\n-        gc,\n-        debug_info,\n-        extra_debug_info,\n-        print_link_args,\n-        print_llvm_passes,\n-        no_vectorize_loops,\n-        no_vectorize_slp,\n-        no_prepopulate_passes,\n-        use_softfp,\n-        gen_crate_map,\n-        prefer_dynamic,\n-        no_integrated_as,\n-        lto\n+        VERBOSE,\n+        TIME_PASSES,\n+        COUNT_LLVM_INSNS,\n+        TIME_LLVM_PASSES,\n+        TRANS_STATS,\n+        ASM_COMMENTS,\n+        NO_VERIFY,\n+        BORROWCK_STATS,\n+        NO_LANDING_PADS,\n+        DEBUG_LLVM,\n+        COUNT_TYPE_SIZES,\n+        META_STATS,\n+        NO_OPT,\n+        GC,\n+        DEBUG_INFO,\n+        EXTRA_DEBUG_INFO,\n+        PRINT_LINK_ARGS,\n+        PRINT_LLVM_PASSES,\n+        NO_VECTORIZE_LOOPS,\n+        NO_VECTORIZE_SLP,\n+        NO_PREPOPULATE_PASSES,\n+        USE_SOFTFP,\n+        GEN_CRATE_MAP,\n+        PREFER_DYNAMIC,\n+        NO_INTEGRATED_AS,\n+        LTO\n     ]\n     0\n )\n \n-pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n-    ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n-     (\"time-passes\", \"measure time of each rustc pass\", time_passes),\n+pub fn debugging_opts_map() -> ~[(&'static str, &'static str, u64)] {\n+    ~[(\"verbose\", \"in general, enable more debug printouts\", VERBOSE),\n+     (\"time-passes\", \"measure time of each rustc pass\", TIME_PASSES),\n      (\"count-llvm-insns\", \"count where LLVM \\\n-                           instrs originate\", count_llvm_insns),\n+                           instrs originate\", COUNT_LLVM_INSNS),\n      (\"time-llvm-passes\", \"measure time of each LLVM pass\",\n-      time_llvm_passes),\n-     (\"trans-stats\", \"gather trans statistics\", trans_stats),\n-     (\"asm-comments\", \"generate comments into the assembly (may change behavior)\", asm_comments),\n-     (\"no-verify\", \"skip LLVM verification\", no_verify),\n-     (\"borrowck-stats\", \"gather borrowck statistics\",  borrowck_stats),\n+      TIME_LLVM_PASSES),\n+     (\"trans-stats\", \"gather trans statistics\", TRANS_STATS),\n+     (\"asm-comments\", \"generate comments into the assembly (may change behavior)\",\n+      ASM_COMMENTS),\n+     (\"no-verify\", \"skip LLVM verification\", NO_VERIFY),\n+     (\"borrowck-stats\", \"gather borrowck statistics\",  BORROWCK_STATS),\n      (\"no-landing-pads\", \"omit landing pads for unwinding\",\n-      no_landing_pads),\n-     (\"debug-llvm\", \"enable debug output from LLVM\", debug_llvm),\n+      NO_LANDING_PADS),\n+     (\"debug-llvm\", \"enable debug output from LLVM\", DEBUG_LLVM),\n      (\"count-type-sizes\", \"count the sizes of aggregate types\",\n-      count_type_sizes),\n-     (\"meta-stats\", \"gather metadata statistics\", meta_stats),\n-     (\"no-opt\", \"do not optimize, even if -O is passed\", no_opt),\n-     (\"print-link-args\", \"Print the arguments passed to the linker\", print_link_args),\n-     (\"gc\", \"Garbage collect shared data (experimental)\", gc),\n+      COUNT_TYPE_SIZES),\n+     (\"meta-stats\", \"gather metadata statistics\", META_STATS),\n+     (\"no-opt\", \"do not optimize, even if -O is passed\", NO_OPT),\n+     (\"print-link-args\", \"Print the arguments passed to the linker\",\n+      PRINT_LINK_ARGS),\n+     (\"gc\", \"Garbage collect shared data (experimental)\", GC),\n      (\"extra-debug-info\", \"Extra debugging info (experimental)\",\n-      extra_debug_info),\n-     (\"debug-info\", \"Produce debug info (experimental)\", debug_info),\n+      EXTRA_DEBUG_INFO),\n+     (\"debug-info\", \"Produce debug info (experimental)\", DEBUG_INFO),\n      (\"print-llvm-passes\",\n       \"Prints the llvm optimization passes being run\",\n-      print_llvm_passes),\n+      PRINT_LLVM_PASSES),\n      (\"no-prepopulate-passes\",\n       \"Don't pre-populate the pass managers with a list of passes, only use \\\n         the passes from --passes\",\n-      no_prepopulate_passes),\n+      NO_PREPOPULATE_PASSES),\n      (\"no-vectorize-loops\",\n       \"Don't run the loop vectorization optimization passes\",\n-      no_vectorize_loops),\n-     (\"no-vectorize-slp\",\n-      \"Don't run LLVM's SLP vectorization passes\",\n-      no_vectorize_slp),\n-     (\"soft-float\", \"Generate software floating point library calls\", use_softfp),\n-     (\"gen-crate-map\", \"Force generation of a toplevel crate map\", gen_crate_map),\n-     (\"prefer-dynamic\", \"Prefer dynamic linking to static linking\", prefer_dynamic),\n+      NO_VECTORIZE_LOOPS),\n+     (\"no-vectorize-slp\", \"Don't run LLVM's SLP vectorization passes\",\n+      NO_VECTORIZE_SLP),\n+     (\"soft-float\", \"Generate software floating point library calls\", USE_SOFTFP),\n+     (\"gen-crate-map\", \"Force generation of a toplevel crate map\", GEN_CRATE_MAP),\n+     (\"prefer-dynamic\", \"Prefer dynamic linking to static linking\", PREFER_DYNAMIC),\n      (\"no-integrated-as\",\n-      \"Use external assembler rather than LLVM's integrated one\", no_integrated_as),\n-     (\"lto\", \"Perform LLVM link-time optimizations\", lto),\n+      \"Use external assembler rather than LLVM's integrated one\", NO_INTEGRATED_AS),\n+     (\"lto\", \"Perform LLVM link-time optimizations\", LTO),\n     ]\n }\n \n@@ -169,7 +170,7 @@ pub struct Options {\n     parse_only: bool,\n     no_trans: bool,\n     no_analysis: bool,\n-    debugging_opts: uint,\n+    debugging_opts: u64,\n     android_cross_path: Option<~str>,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n     write_dependency_info: (bool, Option<Path>),\n@@ -292,56 +293,56 @@ impl Session_ {\n     pub fn diagnostic(&self) -> @diagnostic::SpanHandler {\n         self.span_diagnostic\n     }\n-    pub fn debugging_opt(&self, opt: uint) -> bool {\n-        (self.opts.debugging_opts & opt) != 0u\n+    pub fn debugging_opt(&self, opt: u64) -> bool {\n+        (self.opts.debugging_opts & opt) != 0\n     }\n     // This exists to help with refactoring to eliminate impossible\n     // cases later on\n     pub fn impossible_case(&self, sp: Span, msg: &str) -> ! {\n         self.span_bug(sp, format!(\"Impossible case reached: {}\", msg));\n     }\n-    pub fn verbose(&self) -> bool { self.debugging_opt(verbose) }\n-    pub fn time_passes(&self) -> bool { self.debugging_opt(time_passes) }\n+    pub fn verbose(&self) -> bool { self.debugging_opt(VERBOSE) }\n+    pub fn time_passes(&self) -> bool { self.debugging_opt(TIME_PASSES) }\n     pub fn count_llvm_insns(&self) -> bool {\n-        self.debugging_opt(count_llvm_insns)\n+        self.debugging_opt(COUNT_LLVM_INSNS)\n     }\n     pub fn count_type_sizes(&self) -> bool {\n-        self.debugging_opt(count_type_sizes)\n+        self.debugging_opt(COUNT_TYPE_SIZES)\n     }\n     pub fn time_llvm_passes(&self) -> bool {\n-        self.debugging_opt(time_llvm_passes)\n+        self.debugging_opt(TIME_LLVM_PASSES)\n     }\n-    pub fn trans_stats(&self) -> bool { self.debugging_opt(trans_stats) }\n-    pub fn meta_stats(&self) -> bool { self.debugging_opt(meta_stats) }\n-    pub fn asm_comments(&self) -> bool { self.debugging_opt(asm_comments) }\n-    pub fn no_verify(&self) -> bool { self.debugging_opt(no_verify) }\n-    pub fn borrowck_stats(&self) -> bool { self.debugging_opt(borrowck_stats) }\n+    pub fn trans_stats(&self) -> bool { self.debugging_opt(TRANS_STATS) }\n+    pub fn meta_stats(&self) -> bool { self.debugging_opt(META_STATS) }\n+    pub fn asm_comments(&self) -> bool { self.debugging_opt(ASM_COMMENTS) }\n+    pub fn no_verify(&self) -> bool { self.debugging_opt(NO_VERIFY) }\n+    pub fn borrowck_stats(&self) -> bool { self.debugging_opt(BORROWCK_STATS) }\n     pub fn print_llvm_passes(&self) -> bool {\n-        self.debugging_opt(print_llvm_passes)\n+        self.debugging_opt(PRINT_LLVM_PASSES)\n     }\n     pub fn no_prepopulate_passes(&self) -> bool {\n-        self.debugging_opt(no_prepopulate_passes)\n+        self.debugging_opt(NO_PREPOPULATE_PASSES)\n     }\n     pub fn no_vectorize_loops(&self) -> bool {\n-        self.debugging_opt(no_vectorize_loops)\n+        self.debugging_opt(NO_VECTORIZE_LOOPS)\n     }\n     pub fn no_vectorize_slp(&self) -> bool {\n-        self.debugging_opt(no_vectorize_slp)\n+        self.debugging_opt(NO_VECTORIZE_SLP)\n     }\n     pub fn gen_crate_map(&self) -> bool {\n-        self.debugging_opt(gen_crate_map)\n+        self.debugging_opt(GEN_CRATE_MAP)\n     }\n     pub fn prefer_dynamic(&self) -> bool {\n-        self.debugging_opt(prefer_dynamic)\n+        self.debugging_opt(PREFER_DYNAMIC)\n     }\n     pub fn no_integrated_as(&self) -> bool {\n-        self.debugging_opt(no_integrated_as)\n+        self.debugging_opt(NO_INTEGRATED_AS)\n     }\n     pub fn lto(&self) -> bool {\n-        self.debugging_opt(lto)\n+        self.debugging_opt(LTO)\n     }\n     pub fn no_landing_pads(&self) -> bool {\n-        self.debugging_opt(no_landing_pads)\n+        self.debugging_opt(NO_LANDING_PADS)\n     }\n \n     // pointless function, now...\n@@ -387,7 +388,7 @@ pub fn basic_options() -> @Options {\n         parse_only: false,\n         no_trans: false,\n         no_analysis: false,\n-        debugging_opts: 0u,\n+        debugging_opts: 0,\n         android_cross_path: None,\n         write_dependency_info: (false, None),\n         print_metas: (false, false, false),"}]}