{"sha": "646ec7d9a9df7c5cd00e781e89144fa2c20b2557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NmVjN2Q5YTlkZjdjNWNkMDBlNzgxZTg5MTQ0ZmEyYzIwYjI1NTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-21T15:49:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-21T16:32:37Z"}, "message": "Address nits by @pcwalton", "tree": {"sha": "821bde41518dc98b95e56c20219a9ae815138031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821bde41518dc98b95e56c20219a9ae815138031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/646ec7d9a9df7c5cd00e781e89144fa2c20b2557", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/646ec7d9a9df7c5cd00e781e89144fa2c20b2557", "html_url": "https://github.com/rust-lang/rust/commit/646ec7d9a9df7c5cd00e781e89144fa2c20b2557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/646ec7d9a9df7c5cd00e781e89144fa2c20b2557/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ede4403bb79604eb378ba01f664a548a744044", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ede4403bb79604eb378ba01f664a548a744044", "html_url": "https://github.com/rust-lang/rust/commit/53ede4403bb79604eb378ba01f664a548a744044"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "f923cf1e5903b68b2a81a36fbf26bf00c4662d25", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/646ec7d9a9df7c5cd00e781e89144fa2c20b2557/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646ec7d9a9df7c5cd00e781e89144fa2c20b2557/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=646ec7d9a9df7c5cd00e781e89144fa2c20b2557", "patch": "@@ -314,7 +314,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // an impl.  Even if there are no impls in this crate, perhaps\n         // the type would be unified with something from another crate\n         // that does provide an impl.\n-        let input_types = self.input_types(&*stack.skol_trait_ref);\n+        let input_types = stack.skol_trait_ref.input_types();\n         if input_types.iter().any(|&t| ty::type_is_skolemized(t)) {\n             debug!(\"evaluate_stack_intercrate({}) --> unbound argument, must be ambiguous\",\n                    stack.skol_trait_ref.repr(self.tcx()));\n@@ -521,7 +521,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // found in the source. This is because all the\n         // compiler-provided impls (such as those for unboxed\n         // closures) do not have relevant coercions. This simplifies\n-        // life immensly.\n+        // life immensely.\n \n         let mut impls =\n             self.assemble_method_candidates_from_impls(rcvr_ty, xform_self_ty, obligation);\n@@ -586,7 +586,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n          */\n \n         self.infcx.commit_if_ok(|| {\n-            match self.infcx.sub_types(false, infer::Misc(obligation.cause.span),\n+            match self.infcx.sub_types(false, infer::RelateSelfType(obligation.cause.span),\n                                        rcvr_ty, xform_self_ty) {\n                 Ok(()) => { }\n                 Err(_) => { return Err(()); }\n@@ -850,7 +850,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // scope. Otherwise, use the generic tcx cache, since the\n         // result holds across all environments.\n         if\n-            self.input_types(&**cache_skol_trait_ref).iter().any(\n+            cache_skol_trait_ref.input_types().iter().any(\n                 |&t| ty::type_has_self(t) || ty::type_has_params(t))\n         {\n             &self.param_env.selection_cache\n@@ -1955,11 +1955,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         found_skol\n     }\n-\n-    fn input_types<'a>(&self, trait_ref: &'a ty::TraitRef) -> &'a [ty::t] {\n-        // Select only the \"input types\" from a trait-reference.\n-        trait_ref.substs.types.as_slice()\n-    }\n }\n \n impl Repr for Candidate {"}, {"sha": "a7ce93279bd8348b15ce67ec1c6d91673d3d2cbf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/646ec7d9a9df7c5cd00e781e89144fa2c20b2557/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646ec7d9a9df7c5cd00e781e89144fa2c20b2557/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=646ec7d9a9df7c5cd00e781e89144fa2c20b2557", "patch": "@@ -1254,6 +1254,14 @@ impl TraitRef {\n     pub fn self_ty(&self) -> ty::t {\n         self.substs.self_ty().unwrap()\n     }\n+\n+    pub fn input_types(&self) -> &[ty::t] {\n+        // Select only the \"input types\" from a trait-reference. For\n+        // now this is all the types that appear in the\n+        // trait-reference, but it should eventually exclude\n+        // associated types.\n+        self.substs.types.as_slice()\n+    }\n }\n \n /// When type checking, we use the `ParameterEnvironment` to track"}]}