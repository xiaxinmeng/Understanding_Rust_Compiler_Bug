{"sha": "579dfa42be707acd0e2fa378b505ed18ad7b5c75", "node_id": "C_kwDOAAsO6NoAKDU3OWRmYTQyYmU3MDdhY2QwZTJmYTM3OGI1MDVlZDE4YWQ3YjVjNzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-23T04:55:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T04:55:26Z"}, "message": "Rollup merge of #100789 - compiler-errors:issue-99662, r=spastorino\n\nUse separate infcx to solve obligations during negative coherence\n\nI feel like I fixed this already but I may have fixed it then forgot to push the branch...\n\nAlso fixes up some redundant param-envs being passed around (since they're already passed around in the `Obligation`)\n\nFixes #99662\n\nr? ``@spastorino``", "tree": {"sha": "3f02274667716f1e0e51f6cc8d8a998f34a9603e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f02274667716f1e0e51f6cc8d8a998f34a9603e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579dfa42be707acd0e2fa378b505ed18ad7b5c75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBF2+CRBK7hj4Ov3rIwAAoTUIACgMEhtmws44G9KO0f8+jkCQ\n429PG2BzTKeVcEV9KIy60U5HSfZxCFct0lrFk9VqQ693I+j5jUc8irCr0ee5DfSh\nFIBWQRdUcq4lMjZPzJd5xZ8gFG7EH6OuIKn9oSE9x6dZnA8o8dhuuECLZBDCra+c\nSZQvHrfmTu6hXn3PCzCeFShzr4vCTsiA6d0VlpSmPkTxVwjEzT36Rntv8CZm0yWC\nFENxROjv/Smjv9nAZ6+itHoxOzHj48+IRJpZCz7CvEQvZQkxSTgTfAeB3wqoeB5L\nXzchqs4E8t7Zy13ABYuBAWF9ybLr2yMWvNzpe/+XuWQgVOrihPDc6eHctprFbEU=\n=bejt\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f02274667716f1e0e51f6cc8d8a998f34a9603e\nparent 44aa866488fd3524be7aafd1db0269ad4d59c2af\nparent ba7272959df7447c7393a14f475663de1f250f8f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661230526 +0200\ncommitter GitHub <noreply@github.com> 1661230526 +0200\n\nRollup merge of #100789 - compiler-errors:issue-99662, r=spastorino\n\nUse separate infcx to solve obligations during negative coherence\n\nI feel like I fixed this already but I may have fixed it then forgot to push the branch...\n\nAlso fixes up some redundant param-envs being passed around (since they're already passed around in the `Obligation`)\n\nFixes #99662\n\nr? ``@spastorino``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579dfa42be707acd0e2fa378b505ed18ad7b5c75", "html_url": "https://github.com/rust-lang/rust/commit/579dfa42be707acd0e2fa378b505ed18ad7b5c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579dfa42be707acd0e2fa378b505ed18ad7b5c75/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44aa866488fd3524be7aafd1db0269ad4d59c2af", "url": "https://api.github.com/repos/rust-lang/rust/commits/44aa866488fd3524be7aafd1db0269ad4d59c2af", "html_url": "https://github.com/rust-lang/rust/commit/44aa866488fd3524be7aafd1db0269ad4d59c2af"}, {"sha": "ba7272959df7447c7393a14f475663de1f250f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7272959df7447c7393a14f475663de1f250f8f", "html_url": "https://github.com/rust-lang/rust/commit/ba7272959df7447c7393a14f475663de1f250f8f"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "3bc08fba91a10bd8a94a5d61f49946714add6067", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/579dfa42be707acd0e2fa378b505ed18ad7b5c75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579dfa42be707acd0e2fa378b505ed18ad7b5c75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=579dfa42be707acd0e2fa378b505ed18ad7b5c75", "patch": "@@ -342,10 +342,8 @@ fn equate<'cx, 'tcx>(\n     };\n \n     let selcx = &mut SelectionContext::new(&infcx);\n-    let opt_failing_obligation = obligations\n-        .into_iter()\n-        .chain(more_obligations)\n-        .find(|o| negative_impl_exists(selcx, impl_env, o));\n+    let opt_failing_obligation =\n+        obligations.into_iter().chain(more_obligations).find(|o| negative_impl_exists(selcx, o));\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -359,18 +357,15 @@ fn equate<'cx, 'tcx>(\n #[instrument(level = \"debug\", skip(selcx))]\n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n-    let infcx = &selcx.infcx().fork();\n-\n-    if resolve_negative_obligation(infcx, param_env, o) {\n+    if resolve_negative_obligation(selcx.infcx().fork(), o) {\n         return true;\n     }\n \n     // Try to prove a negative obligation exists for super predicates\n-    for o in util::elaborate_predicates(infcx.tcx, iter::once(o.predicate)) {\n-        if resolve_negative_obligation(infcx, param_env, &o) {\n+    for o in util::elaborate_predicates(selcx.tcx(), iter::once(o.predicate)) {\n+        if resolve_negative_obligation(selcx.infcx().fork(), &o) {\n             return true;\n         }\n     }\n@@ -380,8 +375,7 @@ fn negative_impl_exists<'cx, 'tcx>(\n \n #[instrument(level = \"debug\", skip(infcx))]\n fn resolve_negative_obligation<'cx, 'tcx>(\n-    infcx: &InferCtxt<'cx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n+    infcx: InferCtxt<'cx, 'tcx>,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n     let tcx = infcx.tcx;\n@@ -390,7 +384,8 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n         return false;\n     };\n \n-    let errors = super::fully_solve_obligation(infcx, o);\n+    let param_env = o.param_env;\n+    let errors = super::fully_solve_obligation(&infcx, o);\n     if !errors.is_empty() {\n         return false;\n     }"}, {"sha": "221c1bc23b3f4578347d66125e1b65f5b3d76ebc", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/579dfa42be707acd0e2fa378b505ed18ad7b5c75/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579dfa42be707acd0e2fa378b505ed18ad7b5c75/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs?ref=579dfa42be707acd0e2fa378b505ed18ad7b5c75", "patch": "@@ -1,10 +1,15 @@\n+// revisions: stock with_negative_coherence\n #![feature(negative_impls)]\n+#![cfg_attr(with_negative_coherence, feature(with_negative_coherence))]\n \n // FIXME: this should compile\n \n trait MyPredicate<'a> {}\n-impl<'a, T> !MyPredicate<'a> for &T where T: 'a {}\n+\n+impl<'a, T> !MyPredicate<'a> for &'a T where T: 'a {}\n+\n trait MyTrait<'a> {}\n+\n impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n impl<'a, T> MyTrait<'a> for &'a T {}\n //~^ ERROR: conflicting implementations of trait `MyTrait<'_>` for type `&_`"}, {"sha": "097cc4e0fe3e67ef63d66d392917c57087fbb2c1", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.stock.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579dfa42be707acd0e2fa378b505ed18ad7b5c75/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/579dfa42be707acd0e2fa378b505ed18ad7b5c75/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.stock.stderr?ref=579dfa42be707acd0e2fa378b505ed18ad7b5c75", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n-  --> $DIR/coherence-negative-outlives-lifetimes.rs:9:1\n+  --> $DIR/coherence-negative-outlives-lifetimes.rs:14:1\n    |\n LL | impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n    | ---------------------------------------------- first implementation here", "previous_filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.stderr"}, {"sha": "097cc4e0fe3e67ef63d66d392917c57087fbb2c1", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/579dfa42be707acd0e2fa378b505ed18ad7b5c75/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/579dfa42be707acd0e2fa378b505ed18ad7b5c75/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr?ref=579dfa42be707acd0e2fa378b505ed18ad7b5c75", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n+  --> $DIR/coherence-negative-outlives-lifetimes.rs:14:1\n+   |\n+LL | impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n+   | ---------------------------------------------- first implementation here\n+LL | impl<'a, T> MyTrait<'a> for &'a T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}