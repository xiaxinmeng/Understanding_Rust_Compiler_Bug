{"sha": "c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTE0N2Y0OGViZjRjNTNjZmM0NmZjOTY3NGQwMWU2MTgyNGI0YWQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T03:45:03Z"}, "committer": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:36:29Z"}, "message": "move starts_ends_with tests", "tree": {"sha": "138b4a34c2a3572792509ecbec197dc14d9c15a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/138b4a34c2a3572792509ecbec197dc14d9c15a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "html_url": "https://github.com/rust-lang/rust/commit/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/comments", "author": null, "committer": null, "parents": [{"sha": "73a1dd8e7f10f1c6cba618b60e3fed690a72a8d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a1dd8e7f10f1c6cba618b60e3fed690a72a8d7", "html_url": "https://github.com/rust-lang/rust/commit/73a1dd8e7f10f1c6cba618b60e3fed690a72a8d7"}], "stats": {"total": 391, "additions": 179, "deletions": 212}, "files": [{"sha": "54296a7475926c057d75a899709b77f01f4eab03", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "patch": "@@ -432,12 +432,6 @@ struct MyErrorWithParam<T> {\n     x: T\n }\n \n-#[allow(unnecessary_operation)]\n-fn starts_with() {\n-    \"\".chars().next() == Some(' ');\n-    Some(' ') != \"\".chars().next();\n-}\n-\n fn str_extend_chars() {\n     let abc = \"abc\";\n     let def = String::from(\"def\");\n@@ -557,33 +551,3 @@ fn iter_clone_collect() {\n     let v3 : HashSet<isize> = v.iter().cloned().collect();\n     let v4 : VecDeque<isize> = v.iter().cloned().collect();\n }\n-\n-fn chars_cmp_with_unwrap() {\n-    let s = String::from(\"foo\");\n-    if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n-        // Nothing here\n-    }\n-    if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n-        // Nothing here\n-    }\n-    if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n-        // Nothing here\n-    }\n-    if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n-        // Nothing here\n-    }\n-    if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n-        // Nothing here\n-    }\n-    if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n-        // Nothing here\n-    }\n-}\n-\n-#[allow(unnecessary_operation)]\n-fn ends_with() {\n-    \"\".chars().last() == Some(' ');\n-    Some(' ') != \"\".chars().last();\n-    \"\".chars().next_back() == Some(' ');\n-    Some(' ') != \"\".chars().next_back();\n-}"}, {"sha": "d50ef4e5284c84a595754e2295f4c90de21498da", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 64, "deletions": 176, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "patch": "@@ -547,321 +547,209 @@ error: called `ok().expect()` on a Result value. You can call `expect` directly\n 425 |     res6.ok().expect(\"meh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:437:5\n-    |\n-437 |     \"\".chars().next() == Some(' ');\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".starts_with(' ')`\n-    |\n-    = note: `-D chars-next-cmp` implied by `-D warnings`\n-\n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:438:5\n-    |\n-438 |     Some(' ') != \"\".chars().next();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".starts_with(' ')`\n-\n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:447:5\n+   --> $DIR/methods.rs:441:5\n     |\n-447 |     s.extend(abc.chars());\n+441 |     s.extend(abc.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n     |\n     = note: `-D string-extend-chars` implied by `-D warnings`\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:450:5\n+   --> $DIR/methods.rs:444:5\n     |\n-450 |     s.extend(\"abc\".chars());\n+444 |     s.extend(\"abc\".chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n \n error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:453:5\n+   --> $DIR/methods.rs:447:5\n     |\n-453 |     s.extend(def.chars());\n+447 |     s.extend(def.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:464:5\n+   --> $DIR/methods.rs:458:5\n     |\n-464 |     42.clone();\n+458 |     42.clone();\n     |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n     |\n     = note: `-D clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:468:5\n+   --> $DIR/methods.rs:462:5\n     |\n-468 |     (&42).clone();\n+462 |     (&42).clone();\n     |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:478:5\n+   --> $DIR/methods.rs:472:5\n     |\n-478 |     rc.clone();\n+472 |     rc.clone();\n     |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n     |\n     = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n \n error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:481:5\n+   --> $DIR/methods.rs:475:5\n     |\n-481 |     arc.clone();\n+475 |     arc.clone();\n     |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n \n error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:484:5\n+   --> $DIR/methods.rs:478:5\n     |\n-484 |     rcweak.clone();\n+478 |     rcweak.clone();\n     |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n \n error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:487:5\n+   --> $DIR/methods.rs:481:5\n     |\n-487 |     arc_weak.clone();\n+481 |     arc_weak.clone();\n     |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:494:5\n+   --> $DIR/methods.rs:488:5\n     |\n-494 |     t.clone();\n+488 |     t.clone();\n     |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:496:5\n+   --> $DIR/methods.rs:490:5\n     |\n-496 |     Some(t).clone();\n+490 |     Some(t).clone();\n     |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-   --> $DIR/methods.rs:502:22\n+   --> $DIR/methods.rs:496:22\n     |\n-502 |     let z: &Vec<_> = y.clone();\n+496 |     let z: &Vec<_> = y.clone();\n     |                      ^^^^^^^^^ help: try dereferencing it: `(*y).clone()`\n     |\n     = note: `-D clone-double-ref` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:509:13\n+   --> $DIR/methods.rs:503:13\n     |\n-509 |     x.split(\"x\");\n+503 |     x.split(\"x\");\n     |     --------^^^- help: try using a char instead: `x.split('x')`\n     |\n     = note: `-D single-char-pattern` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:526:16\n+   --> $DIR/methods.rs:520:16\n     |\n-526 |     x.contains(\"x\");\n+520 |     x.contains(\"x\");\n     |     -----------^^^- help: try using a char instead: `x.contains('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:527:19\n+   --> $DIR/methods.rs:521:19\n     |\n-527 |     x.starts_with(\"x\");\n+521 |     x.starts_with(\"x\");\n     |     --------------^^^- help: try using a char instead: `x.starts_with('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:528:17\n+   --> $DIR/methods.rs:522:17\n     |\n-528 |     x.ends_with(\"x\");\n+522 |     x.ends_with(\"x\");\n     |     ------------^^^- help: try using a char instead: `x.ends_with('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:529:12\n+   --> $DIR/methods.rs:523:12\n     |\n-529 |     x.find(\"x\");\n+523 |     x.find(\"x\");\n     |     -------^^^- help: try using a char instead: `x.find('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:530:13\n+   --> $DIR/methods.rs:524:13\n     |\n-530 |     x.rfind(\"x\");\n+524 |     x.rfind(\"x\");\n     |     --------^^^- help: try using a char instead: `x.rfind('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:531:14\n+   --> $DIR/methods.rs:525:14\n     |\n-531 |     x.rsplit(\"x\");\n+525 |     x.rsplit(\"x\");\n     |     ---------^^^- help: try using a char instead: `x.rsplit('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:532:24\n+   --> $DIR/methods.rs:526:24\n     |\n-532 |     x.split_terminator(\"x\");\n+526 |     x.split_terminator(\"x\");\n     |     -------------------^^^- help: try using a char instead: `x.split_terminator('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:533:25\n+   --> $DIR/methods.rs:527:25\n     |\n-533 |     x.rsplit_terminator(\"x\");\n+527 |     x.rsplit_terminator(\"x\");\n     |     --------------------^^^- help: try using a char instead: `x.rsplit_terminator('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:534:17\n+   --> $DIR/methods.rs:528:17\n     |\n-534 |     x.splitn(0, \"x\");\n+528 |     x.splitn(0, \"x\");\n     |     ------------^^^- help: try using a char instead: `x.splitn(0, 'x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:535:18\n+   --> $DIR/methods.rs:529:18\n     |\n-535 |     x.rsplitn(0, \"x\");\n+529 |     x.rsplitn(0, \"x\");\n     |     -------------^^^- help: try using a char instead: `x.rsplitn(0, 'x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:536:15\n+   --> $DIR/methods.rs:530:15\n     |\n-536 |     x.matches(\"x\");\n+530 |     x.matches(\"x\");\n     |     ----------^^^- help: try using a char instead: `x.matches('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:537:16\n+   --> $DIR/methods.rs:531:16\n     |\n-537 |     x.rmatches(\"x\");\n+531 |     x.rmatches(\"x\");\n     |     -----------^^^- help: try using a char instead: `x.rmatches('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:538:21\n+   --> $DIR/methods.rs:532:21\n     |\n-538 |     x.match_indices(\"x\");\n+532 |     x.match_indices(\"x\");\n     |     ----------------^^^- help: try using a char instead: `x.match_indices('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:539:22\n+   --> $DIR/methods.rs:533:22\n     |\n-539 |     x.rmatch_indices(\"x\");\n+533 |     x.rmatch_indices(\"x\");\n     |     -----------------^^^- help: try using a char instead: `x.rmatch_indices('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:540:25\n+   --> $DIR/methods.rs:534:25\n     |\n-540 |     x.trim_left_matches(\"x\");\n+534 |     x.trim_left_matches(\"x\");\n     |     --------------------^^^- help: try using a char instead: `x.trim_left_matches('x')`\n \n error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:541:26\n+   --> $DIR/methods.rs:535:26\n     |\n-541 |     x.trim_right_matches(\"x\");\n+535 |     x.trim_right_matches(\"x\");\n     |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n \n error: you are getting the inner pointer of a temporary `CString`\n-   --> $DIR/methods.rs:551:5\n+   --> $DIR/methods.rs:545:5\n     |\n-551 |     CString::new(\"foo\").unwrap().as_ptr();\n+545 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n     = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n-   --> $DIR/methods.rs:551:5\n+   --> $DIR/methods.rs:545:5\n     |\n-551 |     CString::new(\"foo\").unwrap().as_ptr();\n+545 |     CString::new(\"foo\").unwrap().as_ptr();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-   --> $DIR/methods.rs:556:27\n+   --> $DIR/methods.rs:550:27\n     |\n-556 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+550 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:563:8\n-    |\n-563 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.starts_with('f')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:563:8\n-    |\n-563 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:566:8\n-    |\n-566 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n-    |\n-    = note: `-D chars-last-cmp` implied by `-D warnings`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:566:8\n-    |\n-566 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:569:8\n-    |\n-569 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:569:8\n-    |\n-569 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:572:8\n-    |\n-572 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.starts_with('f')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:572:8\n-    |\n-572 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:575:8\n-    |\n-575 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:575:8\n-    |\n-575 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:578:8\n-    |\n-578 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:578:8\n-    |\n-578 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:585:5\n-    |\n-585 |     \"\".chars().last() == Some(' ');\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:586:5\n-    |\n-586 |     Some(' ') != \"\".chars().last();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:587:5\n-    |\n-587 |     \"\".chars().next_back() == Some(' ');\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:588:5\n-    |\n-588 |     Some(' ') != \"\".chars().next_back();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n-"}, {"sha": "d47c8a5b076833fa16606f1f3226b834d4dee325", "filename": "tests/ui/starts_ends_with.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fstarts_ends_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fstarts_ends_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.rs?ref=c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "patch": "@@ -0,0 +1,39 @@\n+#![allow(dead_code)]\n+\n+fn main() {}\n+\n+#[allow(unnecessary_operation)]\n+fn starts_with() {\n+    \"\".chars().next() == Some(' ');\n+    Some(' ') != \"\".chars().next();\n+}\n+\n+fn chars_cmp_with_unwrap() {\n+    let s = String::from(\"foo\");\n+    if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+        // Nothing here\n+    }\n+    if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+        // Nothing here\n+    }\n+    if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+        // Nothing here\n+    }\n+}\n+\n+#[allow(unnecessary_operation)]\n+fn ends_with() {\n+    \"\".chars().last() == Some(' ');\n+    Some(' ') != \"\".chars().last();\n+    \"\".chars().next_back() == Some(' ');\n+    Some(' ') != \"\".chars().next_back();\n+}"}, {"sha": "c67cc8a86ea5b7f555edf0f3116648c415342a69", "filename": "tests/ui/starts_ends_with.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fstarts_ends_with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1a147f48ebf4c53cfc46fc9674d01e61824b4ad/tests%2Fui%2Fstarts_ends_with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.stderr?ref=c1a147f48ebf4c53cfc46fc9674d01e61824b4ad", "patch": "@@ -0,0 +1,76 @@\n+error: you should use the `starts_with` method\n+ --> $DIR/starts_ends_with.rs:7:5\n+  |\n+7 |     \"\".chars().next() == Some(' ');\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".starts_with(' ')`\n+  |\n+  = note: `-D chars-next-cmp` implied by `-D warnings`\n+\n+error: you should use the `starts_with` method\n+ --> $DIR/starts_ends_with.rs:8:5\n+  |\n+8 |     Some(' ') != \"\".chars().next();\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".starts_with(' ')`\n+\n+error: you should use the `starts_with` method\n+  --> $DIR/starts_ends_with.rs:13:8\n+   |\n+13 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.starts_with('f')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:16:8\n+   |\n+16 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n+   |\n+   = note: `-D chars-last-cmp` implied by `-D warnings`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:19:8\n+   |\n+19 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n+\n+error: you should use the `starts_with` method\n+  --> $DIR/starts_ends_with.rs:22:8\n+   |\n+22 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.starts_with('f')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:25:8\n+   |\n+25 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:28:8\n+   |\n+28 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:35:5\n+   |\n+35 |     \"\".chars().last() == Some(' ');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:36:5\n+   |\n+36 |     Some(' ') != \"\".chars().last();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:37:5\n+   |\n+37 |     \"\".chars().next_back() == Some(' ');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:38:5\n+   |\n+38 |     Some(' ') != \"\".chars().next_back();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n+"}]}