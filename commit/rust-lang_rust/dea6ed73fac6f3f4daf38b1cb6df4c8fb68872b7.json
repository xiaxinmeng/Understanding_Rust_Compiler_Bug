{"sha": "dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYTZlZDczZmFjNmYzZjRkYWYzOGIxY2I2ZGY0YzhmYjY4ODcyYjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T16:35:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T16:35:09Z"}, "message": "better pattern recovery", "tree": {"sha": "7aff1c3b0fbb32f142fce778c7ac6b16fab65756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aff1c3b0fbb32f142fce778c7ac6b16fab65756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "html_url": "https://github.com/rust-lang/rust/commit/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "537ea620bb2a73a5e79872f414af23cf4bf03179", "url": "https://api.github.com/repos/rust-lang/rust/commits/537ea620bb2a73a5e79872f414af23cf4bf03179", "html_url": "https://github.com/rust-lang/rust/commit/537ea620bb2a73a5e79872f414af23cf4bf03179"}], "stats": {"total": 100, "additions": 92, "deletions": 8}, "files": [{"sha": "aa8dd93a7f1fe85b30cb995ddbbca154832a477c", "filename": "crates/libeditor/src/scope/mod_scope.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope%2Fmod_scope.rs?ref=dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "patch": "@@ -13,6 +13,8 @@ impl ModuleScope {\n                 ast::ModuleItem::StructDef(item) => Entry::new(item),\n                 ast::ModuleItem::EnumDef(item) => Entry::new(item),\n                 ast::ModuleItem::FnDef(item) => Entry::new(item),\n+                ast::ModuleItem::ConstDef(item) => Entry::new(item),\n+                ast::ModuleItem::StaticDef(item) => Entry::new(item),\n                 ast::ModuleItem::TraitDef(item) => Entry::new(item),\n                 ast::ModuleItem::ExternCrateItem(_) |\n                 ast::ModuleItem::ImplItem(_) |"}, {"sha": "999023e3d498b2a00ab6a1685c426161e5be3304", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "patch": "@@ -893,6 +893,8 @@ pub enum ModuleItem<'a> {\n     ImplItem(ImplItem<'a>),\n     UseItem(UseItem<'a>),\n     ExternCrateItem(ExternCrateItem<'a>),\n+    ConstDef(ConstDef<'a>),\n+    StaticDef(StaticDef<'a>),\n }\n \n impl<'a> AstNode<'a> for ModuleItem<'a> {\n@@ -905,6 +907,8 @@ impl<'a> AstNode<'a> for ModuleItem<'a> {\n             IMPL_ITEM => Some(ModuleItem::ImplItem(ImplItem { syntax })),\n             USE_ITEM => Some(ModuleItem::UseItem(UseItem { syntax })),\n             EXTERN_CRATE_ITEM => Some(ModuleItem::ExternCrateItem(ExternCrateItem { syntax })),\n+            CONST_DEF => Some(ModuleItem::ConstDef(ConstDef { syntax })),\n+            STATIC_DEF => Some(ModuleItem::StaticDef(StaticDef { syntax })),\n             _ => None,\n         }\n     }\n@@ -917,6 +921,8 @@ impl<'a> AstNode<'a> for ModuleItem<'a> {\n             ModuleItem::ImplItem(inner) => inner.syntax(),\n             ModuleItem::UseItem(inner) => inner.syntax(),\n             ModuleItem::ExternCrateItem(inner) => inner.syntax(),\n+            ModuleItem::ConstDef(inner) => inner.syntax(),\n+            ModuleItem::StaticDef(inner) => inner.syntax(),\n         }\n     }\n }"}, {"sha": "f8fa7b6941b9fae4dadc98755fede846390b031d", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "patch": "@@ -334,7 +334,7 @@ Grammar(\n         ),\n         \"ModuleItem\": (\n             enum: [\"StructDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"ImplItem\",\n-                   \"UseItem\", \"ExternCrateItem\" ]\n+                   \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\" ]\n         ),\n \n         \"TupleExpr\": (),"}, {"sha": "065570b99cbe55d5566c140987d62a8f24c26291", "filename": "crates/libsyntax2/src/grammar/patterns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "patch": "@@ -22,6 +22,10 @@ pub(super) fn pattern(p: &mut Parser) {\n     }\n }\n \n+const PAT_RECOVERY_SET: TokenSet =\n+    token_set![LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW];\n+\n+\n fn atom_pat(p: &mut Parser) -> Option<CompletedMarker> {\n     let la0 = p.nth(0);\n     let la1 = p.nth(1);\n@@ -52,7 +56,7 @@ fn atom_pat(p: &mut Parser) -> Option<CompletedMarker> {\n         L_PAREN => tuple_pat(p),\n         L_BRACK => slice_pat(p),\n         _ => {\n-            p.err_and_bump(\"expected pattern\");\n+            p.err_recover(\"expected pattern\", PAT_RECOVERY_SET);\n             return None;\n         }\n     };"}, {"sha": "48bf3d68bd38f37929dc011274792a94483202d0", "filename": "crates/libsyntax2/tests/data/parser/err/0019_let_recover.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.rs?ref=dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "patch": "@@ -1,4 +1,12 @@\n fn foo() {\n     let foo =\n     let bar = 1;\n+    let\n+    let baz = 92;\n+    let\n+    if true {}\n+    let\n+    while true {}\n+    let\n+    loop {}\n }"}, {"sha": "6e74771f166123e2f0f6301ac1aef9e0afa0613a", "filename": "crates/libsyntax2/tests/data/parser/err/0019_let_recover.txt", "status": "modified", "additions": 70, "deletions": 6, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt?ref=dea6ed73fac6f3f4daf38b1cb6df4c8fb68872b7", "patch": "@@ -1,5 +1,5 @@\n-ROOT@[0; 44)\n-  FN_DEF@[0; 43)\n+ROOT@[0; 139)\n+  FN_DEF@[0; 138)\n     FN_KW@[0; 2)\n     WHITESPACE@[2; 3)\n     NAME@[3; 6)\n@@ -8,7 +8,7 @@ ROOT@[0; 44)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n     WHITESPACE@[8; 9)\n-    BLOCK@[9; 43)\n+    BLOCK@[9; 138)\n       L_CURLY@[9; 10)\n       WHITESPACE@[10; 15)\n       LET_STMT@[15; 24)\n@@ -34,6 +34,70 @@ ROOT@[0; 44)\n         LITERAL@[39; 40)\n           INT_NUMBER@[39; 40) \"1\"\n         SEMI@[40; 41)\n-      WHITESPACE@[41; 42)\n-      R_CURLY@[42; 43)\n-  WHITESPACE@[43; 44)\n+      WHITESPACE@[41; 46)\n+      LET_STMT@[46; 49)\n+        LET_KW@[46; 49)\n+        err: `expected pattern`\n+        err: `expected SEMI`\n+      WHITESPACE@[49; 54)\n+      LET_STMT@[54; 67)\n+        LET_KW@[54; 57)\n+        WHITESPACE@[57; 58)\n+        BIND_PAT@[58; 61)\n+          NAME@[58; 61)\n+            IDENT@[58; 61) \"baz\"\n+        WHITESPACE@[61; 62)\n+        EQ@[62; 63)\n+        WHITESPACE@[63; 64)\n+        LITERAL@[64; 66)\n+          INT_NUMBER@[64; 66) \"92\"\n+        SEMI@[66; 67)\n+      WHITESPACE@[67; 72)\n+      LET_STMT@[72; 75)\n+        LET_KW@[72; 75)\n+        err: `expected pattern`\n+        err: `expected SEMI`\n+      WHITESPACE@[75; 80)\n+      EXPR_STMT@[80; 90)\n+        IF_EXPR@[80; 90)\n+          IF_KW@[80; 82)\n+          WHITESPACE@[82; 83)\n+          CONDITION@[83; 87)\n+            LITERAL@[83; 87)\n+              TRUE_KW@[83; 87)\n+          WHITESPACE@[87; 88)\n+          BLOCK@[88; 90)\n+            L_CURLY@[88; 89)\n+            R_CURLY@[89; 90)\n+      WHITESPACE@[90; 95)\n+      LET_STMT@[95; 98)\n+        LET_KW@[95; 98)\n+        err: `expected pattern`\n+        err: `expected SEMI`\n+      WHITESPACE@[98; 103)\n+      EXPR_STMT@[103; 116)\n+        WHILE_EXPR@[103; 116)\n+          WHILE_KW@[103; 108)\n+          WHITESPACE@[108; 109)\n+          CONDITION@[109; 113)\n+            LITERAL@[109; 113)\n+              TRUE_KW@[109; 113)\n+          WHITESPACE@[113; 114)\n+          BLOCK@[114; 116)\n+            L_CURLY@[114; 115)\n+            R_CURLY@[115; 116)\n+      WHITESPACE@[116; 121)\n+      LET_STMT@[121; 124)\n+        LET_KW@[121; 124)\n+        err: `expected pattern`\n+        err: `expected SEMI`\n+      WHITESPACE@[124; 129)\n+      LOOP_EXPR@[129; 136)\n+        LOOP_KW@[129; 133)\n+        WHITESPACE@[133; 134)\n+        BLOCK@[134; 136)\n+          L_CURLY@[134; 135)\n+          R_CURLY@[135; 136)\n+      WHITESPACE@[136; 137)\n+      R_CURLY@[137; 138)\n+  WHITESPACE@[138; 139)"}]}