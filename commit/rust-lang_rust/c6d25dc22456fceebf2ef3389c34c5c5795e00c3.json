{"sha": "c6d25dc22456fceebf2ef3389c34c5c5795e00c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZDI1ZGMyMjQ1NmZjZWViZjJlZjMzODljMzRjNWM1Nzk1ZTAwYzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T09:03:33Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:38Z"}, "message": "Don't ICE on horrible transmutes in pattern constants", "tree": {"sha": "4ab241850460f1958ef6d055303be56ef5592ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab241850460f1958ef6d055303be56ef5592ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6d25dc22456fceebf2ef3389c34c5c5795e00c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d25dc22456fceebf2ef3389c34c5c5795e00c3", "html_url": "https://github.com/rust-lang/rust/commit/c6d25dc22456fceebf2ef3389c34c5c5795e00c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6d25dc22456fceebf2ef3389c34c5c5795e00c3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a2964a541ddd38ac358635fa2a8adeb5926d474", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2964a541ddd38ac358635fa2a8adeb5926d474", "html_url": "https://github.com/rust-lang/rust/commit/1a2964a541ddd38ac358635fa2a8adeb5926d474"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "afd61fe12bf5dbb135963cc42a0be19f0dac972a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6d25dc22456fceebf2ef3389c34c5c5795e00c3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d25dc22456fceebf2ef3389c34c5c5795e00c3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=c6d25dc22456fceebf2ef3389c34c5c5795e00c3", "patch": "@@ -364,9 +364,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             lo,\n                             hi,\n                             self.param_env.and(ty),\n-                        ).unwrap();\n+                        );\n                         match (end, cmp) {\n-                            (RangeEnd::Excluded, Ordering::Less) =>\n+                            (RangeEnd::Excluded, Some(Ordering::Less)) =>\n                                 PatternKind::Range { lo, hi, end },\n                             (RangeEnd::Excluded, _) => {\n                                 span_err!(\n@@ -377,7 +377,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 );\n                                 PatternKind::Wild\n                             },\n-                            (RangeEnd::Included, Ordering::Greater) => {\n+                            (RangeEnd::Included, None) |\n+                            (RangeEnd::Included, Some(Ordering::Greater)) => {\n                                 let mut err = struct_span_err!(\n                                     self.tcx.sess,\n                                     lo_expr.span,\n@@ -398,7 +399,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                 err.emit();\n                                 PatternKind::Wild\n                             },\n-                            (RangeEnd::Included, _) => PatternKind::Range { lo, hi, end },\n+                            (RangeEnd::Included, Some(_)) => PatternKind::Range { lo, hi, end },\n                         }\n                     }\n                     _ => PatternKind::Wild"}, {"sha": "e56505a7c7153be48192025988b33d7c35454b05", "filename": "src/test/ui/const-eval/ref_to_int_match.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6d25dc22456fceebf2ef3389c34c5c5795e00c3/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d25dc22456fceebf2ef3389c34c5c5795e00c3/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs?ref=c6d25dc22456fceebf2ef3389c34c5c5795e00c3", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match 40u64 {\n+        0...10 => {},\n+        10...BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n+        _ => {},\n+    }\n+}\n+\n+union Foo {\n+    f: Int,\n+    r: &'static u32,\n+}\n+\n+#[cfg(target_pointer_width=\"64\")]\n+type Int = u64;\n+\n+#[cfg(target_pointer_width=\"32\")]\n+type Int = u32;\n+\n+const BAR: Int = unsafe { Foo { r: &42 }.f }; \n\\ No newline at end of file"}, {"sha": "80053c5c9a21ad55271d2183bafd60a00ae80be3", "filename": "src/test/ui/const-eval/ref_to_int_match.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6d25dc22456fceebf2ef3389c34c5c5795e00c3/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6d25dc22456fceebf2ef3389c34c5c5795e00c3/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr?ref=c6d25dc22456fceebf2ef3389c34c5c5795e00c3", "patch": "@@ -0,0 +1,9 @@\n+error[E0030]: lower range bound must be less than or equal to upper\n+  --> $DIR/ref_to_int_match.rs:14:9\n+   |\n+LL |         10...BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n+   |         ^^ lower bound larger than upper bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0030`."}]}