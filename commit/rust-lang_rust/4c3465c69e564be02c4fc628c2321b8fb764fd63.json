{"sha": "4c3465c69e564be02c4fc628c2321b8fb764fd63", "node_id": "C_kwDOAAsO6NoAKDRjMzQ2NWM2OWU1NjRiZTAyYzRmYzYyOGMyMzIxYjhmYjc2NGZkNjM", "commit": {"author": {"name": "Alexander", "email": "alex.m.vlasov@gmail.com", "date": "2021-10-06T17:08:21Z"}, "committer": {"name": "Alexander", "email": "alex.m.vlasov@gmail.com", "date": "2021-10-06T17:08:21Z"}, "message": "run remaining tests", "tree": {"sha": "732b19f4f1bb6128d36227375bf0a3719ff27074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/732b19f4f1bb6128d36227375bf0a3719ff27074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c3465c69e564be02c4fc628c2321b8fb764fd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3465c69e564be02c4fc628c2321b8fb764fd63", "html_url": "https://github.com/rust-lang/rust/commit/4c3465c69e564be02c4fc628c2321b8fb764fd63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c3465c69e564be02c4fc628c2321b8fb764fd63/comments", "author": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shamatar", "id": 6467575, "node_id": "MDQ6VXNlcjY0Njc1NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6467575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamatar", "html_url": "https://github.com/shamatar", "followers_url": "https://api.github.com/users/shamatar/followers", "following_url": "https://api.github.com/users/shamatar/following{/other_user}", "gists_url": "https://api.github.com/users/shamatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamatar/subscriptions", "organizations_url": "https://api.github.com/users/shamatar/orgs", "repos_url": "https://api.github.com/users/shamatar/repos", "events_url": "https://api.github.com/users/shamatar/events{/privacy}", "received_events_url": "https://api.github.com/users/shamatar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8562d94ba706ae20bdb1d6bdeb9a09eaba56e0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8562d94ba706ae20bdb1d6bdeb9a09eaba56e0c7", "html_url": "https://github.com/rust-lang/rust/commit/8562d94ba706ae20bdb1d6bdeb9a09eaba56e0c7"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "dfb5b98d5c97cbab0cd1d0406fc32348c282d7ca", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c3465c69e564be02c4fc628c2321b8fb764fd63/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4c3465c69e564be02c4fc628c2321b8fb764fd63/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=4c3465c69e564be02c4fc628c2321b8fb764fd63", "patch": "@@ -12,6 +12,7 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n@@ -27,14 +28,16 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       }"}, {"sha": "dfb5b98d5c97cbab0cd1d0406fc32348c282d7ca", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c3465c69e564be02c4fc628c2321b8fb764fd63/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4c3465c69e564be02c4fc628c2321b8fb764fd63/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=4c3465c69e564be02c4fc628c2321b8fb764fd63", "patch": "@@ -12,6 +12,7 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n@@ -27,14 +28,16 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:5:18: 5:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n--         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       }"}, {"sha": "97c549dc9c8aec8babfc5c418e96438fe9ab99c5", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c3465c69e564be02c4fc628c2321b8fb764fd63/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4c3465c69e564be02c4fc628c2321b8fb764fd63/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=4c3465c69e564be02c4fc628c2321b8fb764fd63", "patch": "@@ -22,6 +22,7 @@\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _23: &[T; 3];                // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n@@ -51,16 +52,17 @@\n           StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n           _3 = _4;                         // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          StorageLive(_23);                // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n+          _23 = _3;                        // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n           _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:7:19: 7:29\n           StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29\n           StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:7:29: 7:30\n           StorageLive(_9);                 // scope 1 at $DIR/issue_76432.rs:8:5: 11:6\n-          _10 = Len((*_2));                // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          _10 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          StorageDead(_23);                // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n           _11 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n--         _12 = Eq(move _10, const 3_usize); // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n--         switchInt(move _12) -> [false: bb1, otherwise: bb2]; // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n-+         nop;                             // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n-+         switchInt(move _10) -> [3_usize: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          _12 = const true;                // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n+          goto -> bb2;                     // scope 1 at $DIR/issue_76432.rs:9:9: 9:33\n       }\n   \n       bb1: {"}]}