{"sha": "5f47c0613ed4eb46fca3633c1297364c09e5e451", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDdjMDYxM2VkNGViNDZmY2EzNjMzYzEyOTczNjRjMDllNWU0NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-10T11:53:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-10T11:53:54Z"}, "message": "Auto merge of #23248 - Manishearth:rollup, r=Manishearth", "tree": {"sha": "3463ff4b45d857c056bb02a820dd2b7f841c5e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3463ff4b45d857c056bb02a820dd2b7f841c5e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f47c0613ed4eb46fca3633c1297364c09e5e451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f47c0613ed4eb46fca3633c1297364c09e5e451", "html_url": "https://github.com/rust-lang/rust/commit/5f47c0613ed4eb46fca3633c1297364c09e5e451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f47c0613ed4eb46fca3633c1297364c09e5e451/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c49d2140fc65e8bb7d7cf25bfe74dda6ce5ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c49d2140fc65e8bb7d7cf25bfe74dda6ce5ecf", "html_url": "https://github.com/rust-lang/rust/commit/d3c49d2140fc65e8bb7d7cf25bfe74dda6ce5ecf"}, {"sha": "b0357ac2c2c25404c9e91abebc2510fdac022665", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0357ac2c2c25404c9e91abebc2510fdac022665", "html_url": "https://github.com/rust-lang/rust/commit/b0357ac2c2c25404c9e91abebc2510fdac022665"}], "stats": {"total": 768, "additions": 570, "deletions": 198}, "files": [{"sha": "b0d0c3f29b84a3e6f1f623c54a983b231accd662", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/configure", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -701,8 +701,8 @@ probe CFG_ADB        adb\n \n if [ ! -z \"$CFG_PANDOC\" ]\n then\n+    # Extract \"MAJOR MINOR\" from Pandoc's version number\n     PV_MAJOR_MINOR=$(pandoc --version | grep '^pandoc' |\n-        # Extract \"MAJOR MINOR\" from Pandoc's version number\n         sed -E 's/pandoc(.exe)? ([0-9]+)\\.([0-9]+).*/\\2 \\3/')\n \n     MIN_PV_MAJOR=\"1\""}, {"sha": "f37e66001909305143f627359a9f392adbbfeb6d", "filename": "man/rustc.1", "status": "modified", "additions": 155, "deletions": 112, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -7,224 +7,267 @@ rustc \\- The Rust compiler\n \n .SH DESCRIPTION\n This program is a compiler for the Rust language, available at\n-<\\fBhttps://www.rust-lang.org\\fR>.\n+.UR https://www.rust\\-lang.org\n+.UE .\n \n .SH OPTIONS\n \n .TP\n \\fB\\-h\\fR, \\fB\\-\\-help\\fR\n-Display the help message\n+Display the help message.\n .TP\n-\\fB\\-\\-cfg\\fR SPEC\n-Configure the compilation environment\n+\\fB\\-\\-cfg\\fR \\fISPEC\\fR\n+Configure the compilation environment.\n .TP\n-\\fB\\-L\\fR [KIND=]PATH\n-Add a directory to the library search path. The optional KIND can be one of:\n-    dependency = only lookup transitive dependencies here\n-    crate = only lookup local `extern crate` directives here\n-    native = only lookup native libraries here\n-    framework = only look for OSX frameworks here\n-    all = look for anything here (the default)\n+\\fB\\-L\\fR [\\fIKIND\\fR=]\\fIPATH\\fR\n+Add a directory to the library search path.\n+The optional \\fIKIND\\fR can be one of:\n+.RS\n .TP\n-\\fB\\-l\\fR [KIND=]NAME\n-Link the generated crate(s) to the specified native library NAME. The optional\n-KIND can be one of, static, dylib, or framework. If omitted, dylib is assumed.\n+\\fBdependency\\fR\n+only lookup transitive dependencies here\n .TP\n-\\fB\\-\\-crate-type\\fR [bin|lib|rlib|dylib|staticlib]\n-Comma separated list of types of crates for the compiler to emit\n+.B crate\n+only lookup local `extern crate` directives here\n .TP\n-\\fB\\-\\-crate-name NAME\\fR\n-Specify the name of the crate being built\n+.B native\n+only lookup native libraries here\n .TP\n-\\fB\\-\\-emit\\fR [asm|llvm-bc|llvm-ir|obj|link|dep-info]\n-Configure the output that rustc will produce\n+.B framework\n+only look for OSX frameworks here\n .TP\n-\\fB\\-\\-print\\fR [crate-name|file-names|sysroot]\n-Comma separated list of compiler information to print on stdout\n+.B all\n+look for anything here (the default)\n+.RE\n+.TP\n+\\fB\\-l\\fR [\\fIKIND\\fR=]\\fINAME\\fR\n+Link the generated crate(s) to the specified native library \\fINAME\\fR.\n+The optional \\fIKIND\\fR can be one of \\fIstatic\\fR, \\fIdylib\\fR, or\n+\\fIframework\\fR.\n+If omitted, \\fIdylib\\fR is assumed.\n+.TP\n+\\fB\\-\\-crate\\-type\\fR [bin|lib|rlib|dylib|staticlib]\n+Comma separated list of types of crates for the compiler to emit.\n+.TP\n+\\fB\\-\\-crate\\-name\\fR \\fINAME\\fR\n+Specify the name of the crate being built.\n+.TP\n+\\fB\\-\\-emit\\fR [asm|llvm\\-bc|llvm\\-ir|obj|link|dep\\-info]\n+Configure the output that \\fBrustc\\fR will produce.\n+.TP\n+\\fB\\-\\-print\\fR [crate\\-name|file\\-names|sysroot]\n+Comma separated list of compiler information to print on stdout.\n .TP\n \\fB\\-g\\fR\n-Equivalent to \\fI\\-C\\fR debuginfo=2\n+Equivalent to \\fI\\-C\\ debuginfo=2\\fR.\n .TP\n \\fB\\-O\\fR\n-Equivalent to \\fI\\-C\\fR opt-level=2\n+Equivalent to \\fI\\-C\\ opt\\-level=2\\fR.\n .TP\n-\\fB\\-o\\fR FILENAME\n-Write output to <filename>. Ignored if multiple \\fI\\-\\-emit\\fR outputs are\n-specified.\n+\\fB\\-o\\fR \\fIFILENAME\\fR\n+Write output to \\fIFILENAME\\fR.\n+Ignored if multiple \\fI\\-\\-emit\\fR outputs are specified.\n .TP\n-\\fB\\-\\-out\\-dir\\fR DIR\n-Write output to compiler-chosen filename in <dir>. Ignored if \\fI\\-o\\fR is\n-specified. Defaults to the current directory.\n+\\fB\\-\\-out\\-dir\\fR \\fIDIR\\fR\n+Write output to compiler\\[hy]chosen filename in \\fIDIR\\fR.\n+Ignored if \\fI\\-o\\fR is specified.\n+Defaults to the current directory.\n .TP\n-\\fB\\-\\-explain\\fR OPT\n-Provide a detailed explanation of an error message\n+\\fB\\-\\-explain\\fR \\fIOPT\\fR\n+Provide a detailed explanation of an error message.\n .TP\n \\fB\\-\\-test\\fR\n-Build a test harness\n+Build a test harness.\n .TP\n-\\fB\\-\\-target\\fR TRIPLE\n-Target triple cpu-manufacturer-kernel[-os] to compile for (see chapter 3.4 of\n-http://www.sourceware.org/autobook/ for details)\n+\\fB\\-\\-target\\fR \\fITRIPLE\\fR\n+Target triple \\fIcpu\\fR\\-\\fImanufacturer\\fR\\-\\fIkernel\\fR[\\-\\fIos\\fR]\n+to compile for (see chapter 3.4 of\n+.UR http://www.sourceware.org/autobook/\n+.UE\n+for details).\n .TP\n-\\fB\\-W\\fR help\n-Print 'lint' options and default settings\n+\\fB\\-W help\\fR\n+Print 'lint' options and default settings.\n .TP\n-\\fB\\-W\\fR OPT, \\fB\\-\\-warn\\fR OPT\n-Set lint warnings\n+\\fB\\-W\\fR \\fIOPT\\fR, \\fB\\-\\-warn\\fR \\fIOPT\\fR\n+Set lint warnings.\n .TP\n-\\fB\\-A\\fR OPT, \\fB\\-\\-allow\\fR OPT\n-Set lint allowed\n+\\fB\\-A\\fR \\fIOPT\\fR, \\fB\\-\\-allow\\fR \\fIOPT\\fR\n+Set lint allowed.\n .TP\n-\\fB\\-D\\fR OPT, \\fB\\-\\-deny\\fR OPT\n-Set lint denied\n+\\fB\\-D\\fR \\fIOPT\\fR, \\fB\\-\\-deny\\fR \\fIOPT\\fR\n+Set lint denied.\n .TP\n-\\fB\\-F\\fR OPT, \\fB\\-\\-forbid\\fR OPT\n-Set lint forbidden\n+\\fB\\-F\\fR \\fIOPT\\fR, \\fB\\-\\-forbid\\fR \\fIOPT\\fR\n+Set lint forbidden.\n .TP\n-\\fB\\-C\\fR FLAG[=VAL], \\fB\\-\\-codegen\\fR FLAG[=VAL]\n-Set a codegen-related flag to the value specified. Use \"-C help\" to print\n-available flags. See CODEGEN OPTIONS below\n+\\fB\\-C\\fR \\fIFLAG\\fR[=\\fIVAL\\fR], \\fB\\-\\-codegen\\fR \\fIFLAG\\fR[=\\fIVAL\\fR]\n+Set a codegen\\[hy]related flag to the value specified.\n+Use \\fI\\-C help\\fR to print available flags.\n+See CODEGEN OPTIONS below.\n .TP\n \\fB\\-V\\fR, \\fB\\-\\-version\\fR\n-Print version info and exit\n+Print version info and exit.\n .TP\n \\fB\\-v\\fR, \\fB\\-\\-verbose\\fR\n-Use verbose output\n+Use verbose output.\n .TP\n-\\fB\\-\\-extern\\fR NAME=PATH\n-Specify where an external rust library is located\n+\\fB\\-\\-extern\\fR \\fINAME\\fR=\\fIPATH\\fR\n+Specify where an external rust library is located.\n .TP\n-\\fB\\-\\-sysroot\\fR PATH\n-Override the system root\n+\\fB\\-\\-sysroot\\fR \\fIPATH\\fR\n+Override the system root.\n .TP\n-\\fB\\-Z\\fR FLAG\n-Set internal debugging options. Use \"-Z help\" to print available options.\n+\\fB\\-Z\\fR \\fIFLAG\\fR\n+Set internal debugging options.\n+Use \\fI\\-Z help\\fR to print available options.\n .TP\n \\fB\\-\\-color\\fR auto|always|never\n Configure coloring of output:\n-    auto = colorize, if output goes to a tty (default);\n-    always = always colorize output;\n-    never = never colorize output\n+.RS\n+.TP\n+.B auto\n+colorize, if output goes to a tty (default);\n+.TP\n+.B always\n+always colorize output;\n+.TP\n+.B never\n+never colorize output.\n+.RE\n \n .SH CODEGEN OPTIONS\n \n .TP\n-\\fBar\\fR=/path/to/ar\n+\\fBar\\fR=\\fI/path/to/ar\\fR\n Path to the archive utility to use when assembling archives.\n .TP\n-\\fBlinker\\fR=/path/to/cc\n+\\fBlinker\\fR=\\fI/path/to/cc\\fR\n Path to the linker utility to use when linking libraries, executables, and\n objects.\n .TP\n-\\fBlink-args\\fR='-flag1 -flag2'\n-A space-separated list of extra arguments to pass to the linker when the linker\n+\\fBlink\\-args\\fR='\\fI\\-flag1 \\-flag2\\fR'\n+A space\\[hy]separated list of extra arguments to pass to the linker when the linker\n is invoked.\n .TP\n \\fBlto\\fR\n-Perform LLVM link-time optimizations.\n+Perform LLVM link\\[hy]time optimizations.\n .TP\n-\\fBtarget-cpu\\fR=help\n-Selects a target processor. If the value is 'help', then a list of available\n-CPUs is printed.\n+\\fBtarget\\-cpu\\fR=\\fIhelp\\fR\n+Selects a target processor.\n+If the value is 'help', then a list of available CPUs is printed.\n .TP\n-\\fBtarget-feature\\fR='+feature1,-feature2'\n-A comma-separated list of features to enable or disable for the target. A\n-preceding '+' enables a feature while a preceding '-' disables it. Available\n-features can be discovered through target-cpu=help.\n+\\fBtarget\\-feature\\fR='\\fI+feature1\\fR,\\fI\\-feature2\\fR'\n+A comma\\[hy]separated list of features to enable or disable for the target.\n+A preceding '+' enables a feature while a preceding '\\-' disables it.\n+Available features can be discovered through \\fItarget\\-cpu=help\\fR.\n .TP\n-\\fBpasses\\fR=list\n-A space-separated list of extra LLVM passes to run. A value of 'list' will\n-cause rustc to print all known passes and exit. The passes specified are\n-appended at the end of the normal pass manager.\n+\\fBpasses\\fR=\\fIval\\fR\n+A space\\[hy]separated list of extra LLVM passes to run.\n+A value of 'list' will cause \\fBrustc\\fR to print all known passes and\n+exit.\n+The passes specified are appended at the end of the normal pass manager.\n .TP\n-\\fBllvm-args\\fR='-arg1 -arg2'\n-A space-separated list of arguments to pass through to LLVM.\n+\\fBllvm\\-args\\fR='\\fI\\-arg1\\fR \\fI\\-arg2\\fR'\n+A space\\[hy]separated list of arguments to pass through to LLVM.\n .TP\n-\\fBsave-temps\\fR\n-If specified, the compiler will save more files (.bc, .o, .no-opt.bc) generated\n+\\fBsave\\-temps\\fR\n+If specified, the compiler will save more files (.bc, .o, .no\\-opt.bc) generated\n throughout compilation in the output directory.\n .TP\n \\fBrpath\\fR\n If specified, then the rpath value for dynamic libraries will be set in\n either dynamic library or executable outputs.\n .TP\n-\\fBno-prepopulate-passes\\fR\n-Suppresses pre-population of the LLVM pass manager that is run over the module.\n+\\fBno\\-prepopulate\\-passes\\fR\n+Suppresses pre\\[hy]population of the LLVM pass manager that is run over the module.\n .TP\n-\\fBno-vectorize-loops\\fR\n+\\fBno\\-vectorize\\-loops\\fR\n Suppresses running the loop vectorization LLVM pass, regardless of optimization\n level.\n .TP\n-\\fBno-vectorize-slp\\fR\n+\\fBno\\-vectorize\\-slp\\fR\n Suppresses running the LLVM SLP vectorization pass, regardless of optimization\n level.\n .TP\n-\\fBsoft-float\\fR\n+\\fBsoft\\-float\\fR\n Generates software floating point library calls instead of hardware\n instructions.\n .TP\n-\\fBprefer-dynamic\\fR\n+\\fBprefer\\-dynamic\\fR\n Prefers dynamic linking to static linking.\n .TP\n-\\fBno-integrated-as\\fR\n+\\fBno\\-integrated\\-as\\fR\n Force usage of an external assembler rather than LLVM's integrated one.\n .TP\n-\\fBno-redzone\\fR\n+\\fBno\\-redzone\\fR\n Disable the use of the redzone.\n .TP\n-\\fBrelocation-model\\fR=[pic,static,dynamic-no-pic]\n-The relocation model to use. (Default: pic)\n+\\fBrelocation\\-model\\fR=[pic,static,dynamic\\-no\\-pic]\n+The relocation model to use.\n+(Default: \\fIpic\\fR)\n .TP\n-\\fBcode-model\\fR=[small,kernel,medium,large]\n+\\fBcode\\-model\\fR=[small,kernel,medium,large]\n Choose the code model to use.\n .TP\n-\\fBmetadata\\fR=val\n+\\fBmetadata\\fR=\\fIval\\fR\n Metadata to mangle symbol names with.\n .TP\n-\\fBextra-filename\\fR=val\n+\\fBextra\\-filename\\fR=\\fIval\\fR\n Extra data to put in each output filename.\n .TP\n-\\fBcodegen-units\\fR=val\n-Divide crate into N units to optimize in parallel.\n+\\fBcodegen\\-units\\fR=\\fIn\\fR\n+Divide crate into \\fIn\\fR units to optimize in parallel.\n .TP\n-\\fBremark\\fR=val\n+\\fBremark\\fR=\\fIval\\fR\n Print remarks for these optimization passes (space separated, or \"all\").\n .TP\n-\\fBno-stack-check\\fR\n-Disable checks for stack exhaustion (a memory-safety hazard!).\n+\\fBno\\-stack\\-check\\fR\n+Disable checks for stack exhaustion (a memory\\[hy]safety hazard!).\n .TP\n-\\fBdebuginfo\\fR=val\n+\\fBdebuginfo\\fR=\\fIval\\fR\n Debug info emission level:\n-    0 = no debug info;\n-    1 = line-tables only (for stacktraces and breakpoints);\n-    2 = full debug info with variable and type information.\n+.RS\n+.TP\n+.B 0\n+no debug info;\n+.TP\n+.B 1\n+line\\[hy]tables only (for stacktraces and breakpoints);\n+.TP\n+.B 2\n+full debug info with variable and type information.\n+.RE\n .TP\n-\\fBopt-level\\fR=val\n-Optimize with possible levels 0-3\n+\\fBopt\\-level\\fR=\\fIVAL\\fR\n+Optimize with possible levels 0\\[en]3\n \n .SH \"EXAMPLES\"\n To build an executable from a source file with a main function:\n-    $ rustc -o hello hello.rs\n+    $ rustc \\-o hello hello.rs\n \n To build a library from a source file:\n-    $ rustc --crate-type=lib hello-lib.rs\n+    $ rustc \\-\\-crate\\-type=lib hello\\-lib.rs\n \n To build either with a crate (.rs) file:\n     $ rustc hello.rs\n \n To build an executable with debug info:\n-    $ rustc -g -o hello hello.rs\n+    $ rustc \\-g \\-o hello hello.rs\n \n .SH \"SEE ALSO\"\n \n-rustdoc\n+.BR rustdoc (1)\n \n .SH \"BUGS\"\n-See <\\fBhttps://github.com/rust-lang/rust/issues\\fR> for issues.\n+See\n+.UR https://github.com/rust\\-lang/rust/issues\n+.UE\n+for issues.\n \n .SH \"AUTHOR\"\n-See \\fBAUTHORS.txt\\fR in the Rust source distribution.\n+See \\fIAUTHORS.txt\\fR in the Rust source distribution.\n \n .SH \"COPYRIGHT\"\n-This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n-file in the rust source distribution.\n+This work is dual\\[hy]licensed under Apache\\ 2.0 and MIT terms.\n+See \\fICOPYRIGHT\\fR file in the rust source distribution."}, {"sha": "1738354fb43d50b6d01376755e688d54925f1680", "filename": "man/rustdoc.1", "status": "modified", "additions": 55, "deletions": 47, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -8,129 +8,137 @@ rustdoc \\- generate documentation from Rust source code\n .SH DESCRIPTION\n This tool generates API reference documentation by extracting comments from\n source code written in the Rust language, available at\n-<\\fBhttps://www.rust-lang.org\\fR>. It accepts several input formats and provides\n-several output formats for the generated documentation.\n+.UR https://www.rust\\-lang.org\n+.UE .\n+It accepts several input formats and provides several output formats\n+for the generated documentation.\n \n .SH OPTIONS\n \n .TP\n--r --input-format <val>\n+\\fB\\-r\\fR, \\fB\\-\\-input\\-format\\fR \\fIFORMAT\\fR\n html or json (default: inferred)\n .TP\n--w --output-format <val>\n+\\fB\\-w\\fR, \\fB\\-\\-output\\-format\\fR \\fIFORMAT\\fR\n html or json (default: html)\n .TP\n--o --output <val>\n-where to place the output (default: doc/ for html, doc.json for json)\n+\\fB\\-o\\fR, \\fB\\-\\-output\\fR \\fIOUTPUT\\fR\n+where to place the output (default: \\fIdoc/\\fR for html,\n+\\fIdoc.json\\fR for json)\n .TP\n---passes <val>\n-space-separated list of passes to run (default: '')\n+\\fB\\-\\-passes\\fR \\fILIST\\fR\n+space\\[hy]separated list of passes to run (default: '')\n .TP\n---no-defaults\n+\\fB\\-\\-no\\-defaults\\fR\n don't run the default passes\n .TP\n---plugins <val>\n+\\fB\\-\\-plugins\\fR \\fILIST\\fR\n space-separated list of plugins to run (default: '')\n .TP\n---plugin-path <val>\n-directory to load plugins from (default: /tmp/rustdoc_ng/plugins)\n+\\fB\\-\\-plugin\\-path\\fR \\fIDIR\\fR\n+directory to load plugins from (default: \\fI/tmp/rustdoc_ng/plugins\\fR)\n .TP\n---target <val>\n+\\fB\\-\\-target\\fR \\fITRIPLE\\fR\n target triple to document\n .TP\n---crate-name <val>\n+\\fB\\-\\-crate\\-name\\fR \\fINAME\\fR\n specify the name of this crate\n .TP\n--L --library-path <val>\n+\\fB\\-L\\fR, \\fB\\-\\-library\\-path\\fR \\fIDIR\\fR\n directory to add to crate search path\n .TP\n---cfg <val>\n-pass a --cfg to rustc\n+\\fB\\-\\-cfg\\fR \\fISPEC\\fR\n+pass a \\fI\\-\\-cfg\\fR to rustc\n .TP\n---extern <val>\n-pass an --extern to rustc\n+\\fB\\-\\-extern\\fR \\fIVAL\\fR\n+pass an \\fI\\-\\-extern\\fR to rustc\n .TP\n---test\n+\\fB\\-\\-test\\fR\n run code examples as tests\n .TP\n---test-args <val>\n+\\fB\\-\\-test\\-args\\fR \\fIARGS\\fR\n pass arguments to the test runner\n .TP\n---html-in-header <val>\n+\\fB\\-\\-html\\-in\\-header\\fR \\fIFILE\\fR\n file to add to <head>\n .TP\n---html-before-content <val>\n+\\fB\\-\\-html\\-before\\-content\\fR \\fIFILE\\fR\n file to add in <body>, before content\n .TP\n---html-after-content <val>\n+\\fB\\-\\-html\\-after\\-content\\fR \\fIFILE\\fR\n file to add in <body>, after content\n .TP\n---markdown-css <val>\n+\\fB\\-\\-markdown\\-css\\fR \\fIFILE\\fR\n CSS files to include via <link> in a rendered Markdown file\n .TP\n---markdown-playground-url <val>\n+\\fB\\-\\-markdown\\-playground\\-url\\fR \\fIURL\\fR\n URL to send code snippets to\n .TP\n---markdown-no-toc\n+\\fB\\-\\-markdown\\-no\\-toc\\fR\n don't include table of contents\n .TP\n--h, --help\n+\\fB\\-h\\fR, \\fB\\-\\-help\\fR\n Print help\n .TP\n--V, --version\n+\\fB\\-V\\fR, \\fB\\-\\-version\\fR\n Print rustdoc's version\n \n .SH \"OUTPUT FORMATS\"\n \n The rustdoc tool can generate output in either an HTML or JSON format.\n \n If using an HTML format, then the specified output destination will be the root\n-directory of an HTML structure for all the documentation. Pages will be placed\n-into this directory, and source files will also possibly be rendered into it as\n-well.\n+directory of an HTML structure for all the documentation.\n+Pages will be placed into this directory, and source files will also\n+possibly be rendered into it as well.\n \n If using a JSON format, then the specified output destination will have the\n-rustdoc output serialized as JSON into it. This output format exists to\n-pre-compile documentation for crates, and for usage in non-rustdoc tools. The\n-JSON output is the following hash:\n+rustdoc output serialized as JSON into it.\n+This output format exists to pre\\[hy]compile documentation for crates,\n+and for usage in non\\[hy]rustdoc tools.\n+The JSON output is the following hash:\n \n     {\n         \"schema\": VERSION,\n         \"crate\": ...,\n         \"plugins\": ...,\n     }\n \n-The schema version indicates what the structure of crate/plugins will look\n-like. Within a schema version the structure will remain the same. The `crate`\n-field will contain all relevant documentation for the source being documented,\n-and the `plugins` field will contain the output of the plugins run over the\n-crate.\n+The schema version indicates what the structure of crate/plugins will\n+look like.\n+Within a schema version the structure will remain the same.\n+The \\fIcrate\\fR field will contain all relevant documentation for the\n+source being documented, and the \\fIplugins\\fR field will contain the\n+output of the plugins run over the crate.\n \n .SH \"EXAMPLES\"\n \n To generate documentation for the source in the current directory:\n     $ rustdoc hello.rs\n \n List all available passes that rustdoc has, along with default passes:\n-    $ rustdoc --passes list\n+    $ rustdoc \\-\\-passes list\n \n To precompile the documentation for a crate, and then use it to render html at\n a later date:\n-    $ rustdoc -w json hello.rs\n+    $ rustdoc \\-w json hello.rs\n     $ rustdoc doc.json\n \n The generated HTML can be viewed with any standard web browser.\n \n .SH \"SEE ALSO\"\n \n-rustc\n+.BR rustc (1)\n \n .SH \"BUGS\"\n-See <\\fBhttps://github.com/rust-lang/rust/issues\\fR> for issues.\n+See\n+.UR https://github.com/rust\\-lang/rust/issues\n+.UE\n+for issues.\n \n .SH \"AUTHOR\"\n-See \\fBAUTHORS.txt\\fR in the Rust source distribution.\n+See \\fIAUTHORS.txt\\fR in the Rust source distribution.\n \n .SH \"COPYRIGHT\"\n-This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n-file in the rust source distribution.\n+This work is dual\\[hy]licensed under Apache\\ 2.0 and MIT terms.\n+See \\fICOPYRIGHT\\fR file in the rust source distribution."}, {"sha": "4f5f2a631adef5ba8e27c8858f72e861b2572f05", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -229,14 +229,14 @@ cases mentioned in [Number literals](#number-literals) below.\n \n ##### Characters and strings\n \n-|   | Example | Number of `#` pairs allowed | Available characters | Escapes | Equivalent to |\n-|---|---------|-----------------------------|----------------------|---------|---------------|\n-| [Character](#character-literals) | `'H'` | `N/A` | All unicode | `\\'` & [Byte escapes](#byte-escapes) & [Unicode escapes](#unicode-escapes) | `N/A` |\n-| [String](#string-literals) | `\"hello\"` | `N/A` | All unicode | `\\\"` & [Byte escapes](#byte-escapes) & [Unicode escapes](#unicode-escapes) | `N/A` |\n-| [Raw](#raw-string-literals) | `r##\"hello\"##`  | `0...` | All unicode | `N/A` | `N/A` |\n-| [Byte](#byte-literals) | `b'H'` | `N/A` | All ASCII | `\\'` & [Byte escapes](#byte-escapes) | `u8` |\n-| [Byte string](#byte-string-literals) | `b\"hello\"` | `N/A`  | All ASCII | `\\\"` & [Byte escapes](#byte-escapes) | `&'static [u8]` |\n-| [Raw byte string](#raw-byte-string-literals) | `br##\"hello\"##` | `0...` | All ASCII | `N/A` | `&'static [u8]` (unsure...not stated) |\n+|                                              | Example       | # sets | Characters  | Escapes             |\n+|----------------------------------------------|---------------|--------|-------------|---------------------|\n+| [Character](#character-literals)             | 'H'           | N/A    | All Unicode | \\' & [Byte](#byte-escapes) & [Unicode](#unicode-escapes) |\n+| [String](#string-literals)                   | \"hello\"       | N/A    | All Unicode | \\\" & [Byte](#byte-escapes) & [Unicode](#unicode-escapes) |\n+| [Raw](#raw-string-literals)                  | r#\"hello\"#    | 0...   | All Unicode | N/A                                                      |\n+| [Byte](#byte-literals)                       | b'H'          | N/A    | All ASCII   | \\' & [Byte](#byte-escapes)                               |\n+| [Byte string](#byte-string-literals)         | b\"hello\"      | N/A    | All ASCII   | \\\" & [Byte](#byte-escapes)                               |\n+| [Raw byte string](#raw-byte-string-literals) | br#\"hello\"#   | 0...   | All ASCII   | N/A                                                      |\n \n ##### Byte escapes\n "}, {"sha": "8eaad5067f09e7dc84fc653d4be4c0ed6e791fde", "filename": "src/doc/trpl/crates-and-modules.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -555,6 +555,13 @@ Here we have a `pub use` for each function we want to bring into the\n `japanese` scope. We could alternatively use the wildcard syntax to include\n everything from `greetings` into the current scope: `pub use self::greetings::*`. \n \n+What about the `self`? Well, by default, `use` declarations are absolute paths,\n+starting from your crate root. `self` makes that path relative to your current\n+place in the hierarchy instead. There's one more special form of `use`: you can\n+`use super::` to reach one level up the tree from your current location. Some\n+people like to think of `self` as `.` and `super` as `..`, from many shells'\n+display for the current directory and the parent directory.\n+\n Also, note that we `pub use`d before we declared our `mod`s. Rust requires that\n `use` declarations go first.\n "}, {"sha": "ecdc7c06bb19dfa8eb629b1a16f17b0d8e763bc8", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 44, "deletions": 24, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -1500,8 +1500,45 @@ pub fn trans_adt<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     // panic occur before the ADT as a whole is ready.\n     let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n \n-    // First we trans the base, if we have one, to the dest\n-    if let Some(base) = optbase {\n+    if ty::type_is_simd(bcx.tcx(), ty) {\n+        // Issue 23112: The original logic appeared vulnerable to same\n+        // order-of-eval bug. But, SIMD values are tuple-structs;\n+        // i.e. functional record update (FRU) syntax is unavailable.\n+        //\n+        // To be safe, double-check that we did not get here via FRU.\n+        assert!(optbase.is_none());\n+\n+        // This is the constructor of a SIMD type, such types are\n+        // always primitive machine types and so do not have a\n+        // destructor or require any clean-up.\n+        let llty = type_of::type_of(bcx.ccx(), ty);\n+\n+        // keep a vector as a register, and running through the field\n+        // `insertelement`ing them directly into that register\n+        // (i.e. avoid GEPi and `store`s to an alloca) .\n+        let mut vec_val = C_undef(llty);\n+\n+        for &(i, ref e) in fields {\n+            let block_datum = trans(bcx, &**e);\n+            bcx = block_datum.bcx;\n+            let position = C_uint(bcx.ccx(), i);\n+            let value = block_datum.datum.to_llscalarish(bcx);\n+            vec_val = InsertElement(bcx, vec_val, value, position);\n+        }\n+        Store(bcx, vec_val, addr);\n+    } else if let Some(base) = optbase {\n+        // Issue 23112: If there is a base, then order-of-eval\n+        // requires field expressions eval'ed before base expression.\n+\n+        // First, trans field expressions to temporary scratch values.\n+        let scratch_vals: Vec<_> = fields.iter().map(|&(i, ref e)| {\n+            let datum = unpack_datum!(bcx, trans(bcx, &**e));\n+            (i, datum)\n+        }).collect();\n+\n+        debug_location.apply(bcx.fcx);\n+\n+        // Second, trans the base to the dest.\n         assert_eq!(discr, 0);\n \n         match ty::expr_kind(bcx.tcx(), &*base.expr) {\n@@ -1520,31 +1557,14 @@ pub fn trans_adt<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 }\n             }\n         }\n-    }\n-\n-    debug_location.apply(bcx.fcx);\n-\n-    if ty::type_is_simd(bcx.tcx(), ty) {\n-        // This is the constructor of a SIMD type, such types are\n-        // always primitive machine types and so do not have a\n-        // destructor or require any clean-up.\n-        let llty = type_of::type_of(bcx.ccx(), ty);\n-\n-        // keep a vector as a register, and running through the field\n-        // `insertelement`ing them directly into that register\n-        // (i.e. avoid GEPi and `store`s to an alloca) .\n-        let mut vec_val = C_undef(llty);\n \n-        for &(i, ref e) in fields {\n-            let block_datum = trans(bcx, &**e);\n-            bcx = block_datum.bcx;\n-            let position = C_uint(bcx.ccx(), i);\n-            let value = block_datum.datum.to_llscalarish(bcx);\n-            vec_val = InsertElement(bcx, vec_val, value, position);\n+        // Finally, move scratch field values into actual field locations\n+        for (i, datum) in scratch_vals.into_iter() {\n+            let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n+            bcx = datum.store_to(bcx, dest);\n         }\n-        Store(bcx, vec_val, addr);\n     } else {\n-        // Now, we just overwrite the fields we've explicitly specified\n+        // No base means we can write all fields directly in place.\n         for &(i, ref e) in fields {\n             let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n             let e_ty = expr_ty_adjusted(bcx, &**e);"}, {"sha": "1f075566ad5a280aca775e27fd5398e076b7bf11", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -83,7 +83,7 @@ h2 {\n h3 {\n     font-size: 1.3em;\n }\n-h1, h2, h3:not(.impl):not(.method):not(.type), h4:not(.method):not(.type) {\n+h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {\n     color: black;\n     font-weight: 500;\n     margin: 20px 0 15px 0;\n@@ -93,7 +93,7 @@ h1.fqn {\n     border-bottom: 1px dashed #D5D5D5;\n     margin-top: 0;\n }\n-h2, h3:not(.impl):not(.method):not(.type), h4:not(.method):not(.type) {\n+h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {\n     border-bottom: 1px solid #DDDDDD;\n }\n h3.impl, h3.method, h4.method, h3.type, h4.type {"}, {"sha": "2ae1d4a9d50bc42f7adc9b130052740c45cbdcc6", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -318,6 +318,7 @@\n use prelude::v1::*;\n \n use sync::Arc;\n+use error;\n use fmt;\n use mem;\n use cell::UnsafeCell;\n@@ -975,6 +976,18 @@ impl<T> fmt::Display for SendError<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> error::Error for SendError<T> {\n+\n+    fn description(&self) -> &str {\n+        \"sending on a closed channel\"\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for TrySendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -999,13 +1012,44 @@ impl<T> fmt::Display for TrySendError<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> error::Error for TrySendError<T> {\n+\n+    fn description(&self) -> &str {\n+        match *self {\n+            TrySendError::Full(..) => {\n+                \"sending on a full channel\"\n+            }\n+            TrySendError::Disconnected(..) => {\n+                \"sending on a closed channel\"\n+            }\n+        }\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for RecvError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"receiving on a closed channel\".fmt(f)\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl error::Error for RecvError {\n+\n+    fn description(&self) -> &str {\n+        \"receiving on a closed channel\"\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for TryRecvError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -1020,6 +1064,25 @@ impl fmt::Display for TryRecvError {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl error::Error for TryRecvError {\n+\n+    fn description(&self) -> &str {\n+        match *self {\n+            TryRecvError::Empty => {\n+                \"receiving on an empty channel\"\n+            }\n+            TryRecvError::Disconnected => {\n+                \"receiving on a closed channel\"\n+            }\n+        }\n+    }\n+\n+    fn cause(&self) -> Option<&error::Error> {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use prelude::v1::*;"}, {"sha": "6a5cd88a591563676d71a7b5cffbb519765f85d7", "filename": "src/test/compile-fail-fulldeps/gated-quote.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `quote`-related macro are gated by `quote` feature gate.\n+\n+// (To sanity-check the code, uncomment this.)\n+// #![feature(quote)]\n+\n+// FIXME the error message that is current emitted seems pretty bad.\n+\n+#![feature(rustc_private)]\n+#![allow(dead_code, unused_imports, unused_variables)]\n+\n+#[macro_use]\n+extern crate syntax;\n+\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::parse;\n+\n+struct ParseSess;\n+\n+impl ParseSess {\n+    fn cfg(&self) -> ast::CrateConfig { loop { } }\n+    fn parse_sess<'a>(&'a self) -> &'a parse::ParseSess { loop { } }\n+    fn call_site(&self) -> Span { loop { } }\n+    fn ident_of(&self, st: &str) -> ast::Ident { loop { } }\n+    fn name_of(&self, st: &str) -> ast::Name { loop { } }\n+}\n+\n+pub fn main() {\n+    let ecx = &ParseSess;\n+    let x = quote_tokens!(ecx, 3);   //~ ERROR macro undefined: 'quote_tokens!'\n+    let x = quote_expr!(ecx, 3);     //~ ERROR macro undefined: 'quote_expr!'\n+    let x = quote_ty!(ecx, 3);       //~ ERROR macro undefined: 'quote_ty!'\n+    let x = quote_method!(ecx, 3);   //~ ERROR macro undefined: 'quote_method!'\n+    let x = quote_item!(ecx, 3);     //~ ERROR macro undefined: 'quote_item!'\n+    let x = quote_pat!(ecx, 3);      //~ ERROR macro undefined: 'quote_pat!'\n+    let x = quote_arm!(ecx, 3);      //~ ERROR macro undefined: 'quote_arm!'\n+    let x = quote_stmt!(ecx, 3);     //~ ERROR macro undefined: 'quote_stmt!'\n+    let x = quote_matcher!(ecx, 3);  //~ ERROR macro undefined: 'quote_matcher!'\n+    let x = quote_attr!(ecx, 3);     //~ ERROR macro undefined: 'quote_attr!'\n+}"}, {"sha": "c8845ced2fc92cb9c99dd9156622eea020563ab0", "filename": "src/test/compile-fail/gated-link-args.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-link-args.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `#[link_args]` attribute is gated by `link_args`\n+// feature gate.\n+\n+#[link_args = \"aFdEfSeVEEE\"]\n+extern {}\n+//~^ ERROR the `link_args` attribute is not portable across platforms\n+//~| HELP add #![feature(link_args)] to the crate attributes to enable\n+\n+fn main() { }"}, {"sha": "716ea9f8dba21ff678941d09bbd7ffe0e35ae60b", "filename": "src/test/compile-fail/gated-link-llvm-intrinsics.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-link-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-link-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-link-llvm-intrinsics.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    #[link_name = \"llvm.sqrt.f32\"]\n+    fn sqrt(x: f32) -> f32;\n+    //~^ ERROR linking to LLVM intrinsics is experimental\n+    //~| HELP add #![feature(link_llvm_intrinsics)] to the crate attributes\n+}\n+\n+fn main(){\n+}"}, {"sha": "d716c53e1d18ce68c4db2f1a79f42b7c9802cae4", "filename": "src/test/compile-fail/gated-plugin_registrar.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-plugin_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-plugin_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-plugin_registrar.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that `#[plugin_registrar]` attribute is gated by `plugin_registrar`\n+// feature gate.\n+\n // the registration function isn't typechecked yet\n #[plugin_registrar]\n-pub fn registrar() {} //~ ERROR compiler plugins are experimental\n-\n+pub fn registrar() {}\n+//~^ ERROR compiler plugins are experimental\n+//~| HELP add #![feature(plugin_registrar)] to the crate attributes to enable\n fn main() {}"}, {"sha": "f355c6562c8b0a2e18cd8babd32c44c608297ff2", "filename": "src/test/compile-fail/gated-thread-local.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-thread-local.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `#[thread_local]` attribute is gated by `thread_local`\n+// feature gate.\n+//\n+// (Note that the `thread_local!` macro is explicitly *not* gated; it\n+// is given permission to expand into this unstable attribute even\n+// when the surrounding context does not have permission to use it.)\n+\n+#[thread_local] //~ ERROR `#[thread_local]` is an experimental feature\n+static FOO: i32 = 3;\n+\n+pub fn main() {\n+    FOO.with(|x| {\n+        println!(\"x: {}\", x);\n+    });\n+}"}, {"sha": "6024fef9fb81f043256f4f189995349a6943e8b4", "filename": "src/test/compile-fail/gated-unsafe-destructor.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `#[unsafe_destructor]` attribute is gated by `unsafe_destructor`\n+// feature gate.\n+\n+struct D<'a>(&'a u32);\n+\n+#[unsafe_destructor]\n+impl<'a> Drop for D<'a> {\n+    //~^ ERROR `#[unsafe_destructor]` allows too many unsafe patterns\n+    fn drop(&mut self) { }\n+}\n+//~^ HELP: add #![feature(unsafe_destructor)] to the crate attributes to enable\n+\n+pub fn main() { }"}, {"sha": "a64477242c08fb43eb7b2fadbc81c5e866c95b50", "filename": "src/test/run-pass/struct-order-of-eval-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -12,11 +12,12 @@ struct S { f0: String, f1: int }\n \n pub fn main() {\n     let s = \"Hello, world!\".to_string();\n-    let _s = S {\n+    let s = S {\n         f0: s.to_string(),\n         ..S {\n             f0: s,\n             f1: 23\n         }\n     };\n+    assert_eq!(s.f0, \"Hello, world!\");\n }"}, {"sha": "359ecdab630eccc56fefe0bd811ac916dbc81bd4", "filename": "src/test/run-pass/struct-order-of-eval-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -15,8 +15,9 @@ struct S {\n \n pub fn main() {\n     let s = \"Hello, world!\".to_string();\n-    let _s = S {\n+    let s = S {\n         f1: s.to_string(),\n         f0: s\n     };\n+    assert_eq!(s.f0, \"Hello, world!\");\n }"}, {"sha": "856ed7c105e8a29add09aec52b547f8bd6886580", "filename": "src/test/run-pass/struct-order-of-eval-3.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that functional-record-update order-of-eval is as expected\n+// even when no Drop-implementations are involved.\n+\n+use std::sync::atomic::{Ordering, AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+struct W { wrapped: u32 }\n+struct S { f0: W, _f1: i32 }\n+\n+pub fn main() {\n+    const VAL: u32 = 0x89AB_CDEF;\n+    let w = W { wrapped: VAL };\n+    let s = S {\n+        f0: { event(0x01); W { wrapped: w.wrapped + 1 } },\n+        ..S {\n+            f0: { event(0x02); w},\n+            _f1: 23\n+        }\n+    };\n+    assert_eq!(s.f0.wrapped, VAL + 1);\n+    let actual = event_log();\n+    let expect = 0x01_02;\n+    assert!(expect == actual,\n+            \"expect: 0x{:x} actual: 0x{:x}\", expect, actual);\n+}\n+\n+static LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+fn event_log() -> usize {\n+    LOG.load(Ordering::SeqCst)\n+}\n+\n+fn event(tag: u8) {\n+    let old_log = LOG.load(Ordering::SeqCst);\n+    let new_log = (old_log << 8) + tag as usize;\n+    LOG.store(new_log, Ordering::SeqCst);\n+}"}, {"sha": "25923beffdde4e871e630d2829fbc0d10a1f2938", "filename": "src/test/run-pass/struct-order-of-eval-4.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f47c0613ed4eb46fca3633c1297364c09e5e451/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs?ref=5f47c0613ed4eb46fca3633c1297364c09e5e451", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks that struct-literal expression order-of-eval is as expected\n+// even when no Drop-implementations are involved.\n+\n+use std::sync::atomic::{Ordering, AtomicUsize, ATOMIC_USIZE_INIT};\n+\n+struct W { wrapped: u32 }\n+struct S { f0: W, _f1: i32 }\n+\n+pub fn main() {\n+    const VAL: u32 = 0x89AB_CDEF;\n+    let w = W { wrapped: VAL };\n+    let s = S {\n+        _f1: { event(0x01); 23 },\n+        f0: { event(0x02); w },\n+    };\n+    assert_eq!(s.f0.wrapped, VAL);\n+    let actual = event_log();\n+    let expect = 0x01_02;\n+    assert!(expect == actual,\n+            \"expect: 0x{:x} actual: 0x{:x}\", expect, actual);\n+}\n+\n+static LOG: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+fn event_log() -> usize {\n+    LOG.load(Ordering::SeqCst)\n+}\n+\n+fn event(tag: u8) {\n+    let old_log = LOG.load(Ordering::SeqCst);\n+    let new_log = (old_log << 8) + tag as usize;\n+    LOG.store(new_log, Ordering::SeqCst);\n+}"}]}