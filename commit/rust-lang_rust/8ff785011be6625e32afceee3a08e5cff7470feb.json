{"sha": "8ff785011be6625e32afceee3a08e5cff7470feb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZjc4NTAxMWJlNjYyNWUzMmFmY2VlZTNhMDhlNWNmZjc0NzBmZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T06:02:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T06:02:34Z"}, "message": "Auto merge of #70296 - Centril:rollup-wvfmb3n, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #69251 (#[track_caller] in traits)\n - #69880 (miri engine: turn error sanity checks into assertions)\n - #70207 (Use getentropy(2) on macos)\n - #70227 (Only display definition when suggesting a typo)\n - #70236 (resolve: Avoid \"self-confirming\" import resolutions in one more case)\n - #70248 (parser: simplify & remove unused field)\n - #70249 (handle ConstKind::Unresolved after monomorphizing)\n - #70269 (remove redundant closures (clippy::redundant_closure))\n - #70270 (Clean up E0449 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f9a842b8f8e390c261192943061f48d6754f65da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a842b8f8e390c261192943061f48d6754f65da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ff785011be6625e32afceee3a08e5cff7470feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff785011be6625e32afceee3a08e5cff7470feb", "html_url": "https://github.com/rust-lang/rust/commit/8ff785011be6625e32afceee3a08e5cff7470feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ff785011be6625e32afceee3a08e5cff7470feb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "html_url": "https://github.com/rust-lang/rust/commit/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b"}, {"sha": "5f91f30b0ace8a687e1acd2e057e27d4b57ad364", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f91f30b0ace8a687e1acd2e057e27d4b57ad364", "html_url": "https://github.com/rust-lang/rust/commit/5f91f30b0ace8a687e1acd2e057e27d4b57ad364"}], "stats": {"total": 808, "additions": 468, "deletions": 340}, "files": [{"sha": "bde66c406af7f20fd64ae7cbbcf1c3b6f449f448", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -196,7 +196,7 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n                                 (root, length)\n                             };\n \n-                            out_node.push(k, v, subroot.unwrap_or_else(|| node::Root::new_leaf()));\n+                            out_node.push(k, v, subroot.unwrap_or_else(node::Root::new_leaf));\n                             out_tree.length += 1 + sublength;\n                         }\n                     }\n@@ -2147,7 +2147,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// If the root node is the empty (non-allocated) root node, allocate our\n     /// own node.\n     fn ensure_root_is_owned(&mut self) -> &mut node::Root<K, V> {\n-        self.root.get_or_insert_with(|| node::Root::new_leaf())\n+        self.root.get_or_insert_with(node::Root::new_leaf)\n     }\n }\n "}, {"sha": "36edf0f0fc26ad8877453ba54d44a85f9883d7f1", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -245,7 +245,7 @@ impl DepGraph {\n         C: DepGraphSafe + StableHashingContextProvider<'a>,\n     {\n         if let Some(ref data) = self.data {\n-            let task_deps = create_task(key).map(|deps| Lock::new(deps));\n+            let task_deps = create_task(key).map(Lock::new);\n \n             // In incremental mode, hash the result of the task. We don't\n             // do anything with the hash yet, but we are computing it"}, {"sha": "6f18560a02d7f76dfc1f9232b54030fb57af3ca2", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -38,6 +38,7 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(option_expect_none)]\n+#![feature(or_patterns)]\n #![feature(range_is_empty)]\n #![feature(specialization)]\n #![feature(trusted_len)]"}, {"sha": "dd2a3f6c29a76ab2231ed4959c4c0da6b5552cfc", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -796,7 +796,7 @@ impl UndefMask {\n         }\n \n         // FIXME(oli-obk): optimize this for allocations larger than a block.\n-        let idx = (start.bytes()..end.bytes()).map(|i| Size::from_bytes(i)).find(|&i| !self.get(i));\n+        let idx = (start.bytes()..end.bytes()).map(Size::from_bytes).find(|&i| !self.get(i));\n \n         match idx {\n             Some(idx) => Err(idx),"}, {"sha": "e7316ea763e8a7acb9bc01012196fe7900031890", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -35,7 +35,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n@@ -2875,8 +2875,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                 _ => false,\n             }\n         } else {\n-            match self.def_kind(def_id).expect(\"no def for `DefId`\") {\n-                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy => true,\n+            match self.def_kind(def_id) {\n+                Some(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy) => true,\n                 _ => false,\n             }\n         };\n@@ -3054,17 +3054,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If the given defid describes a method belonging to an impl, returns the\n     /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n-        let item = if def_id.krate != LOCAL_CRATE {\n-            if let Some(DefKind::AssocFn) = self.def_kind(def_id) {\n-                Some(self.associated_item(def_id))\n-            } else {\n-                None\n-            }\n-        } else {\n-            self.opt_associated_item(def_id)\n-        };\n-\n-        item.and_then(|trait_item| match trait_item.container {\n+        self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {\n             TraitContainer(_) => None,\n             ImplContainer(def_id) => Some(def_id),\n         })"}, {"sha": "9d00cbe1951eae945d91632df238dfec7039df0a", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -250,7 +250,7 @@ impl ParenthesizedArgs {\n     pub fn as_angle_bracketed_args(&self) -> AngleBracketedArgs {\n         AngleBracketedArgs {\n             span: self.span,\n-            args: self.inputs.iter().cloned().map(|input| GenericArg::Type(input)).collect(),\n+            args: self.inputs.iter().cloned().map(GenericArg::Type).collect(),\n             constraints: vec![],\n         }\n     }"}, {"sha": "e996bdac7cb370c7e9813495e06001b600abf352", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -274,7 +274,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         if !generic_args.parenthesized && !has_lifetimes {\n             generic_args.args = self\n                 .elided_path_lifetimes(path_span, expected_lifetimes)\n-                .map(|lt| GenericArg::Lifetime(lt))\n+                .map(GenericArg::Lifetime)\n                 .chain(generic_args.args.into_iter())\n                 .collect();\n             if expected_lifetimes > 0 && param_mode == ParamMode::Explicit {"}, {"sha": "d83c98572a272611d6a2064fd620d7d386e19acb", "filename": "src/librustc_builtin_macros/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fty.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -76,8 +76,8 @@ impl<'a> Path<'a> {\n             self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n         let params = lt\n             .into_iter()\n-            .map(|lt| GenericArg::Lifetime(lt))\n-            .chain(tys.into_iter().map(|ty| GenericArg::Type(ty)))\n+            .map(GenericArg::Lifetime)\n+            .chain(tys.into_iter().map(GenericArg::Type))\n             .collect();\n \n         match self.kind {"}, {"sha": "51a15f9df1bc79b57c9f35cc97bd0867eb2408a0", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -6,7 +6,7 @@ use rustc_ast_pretty::pprust;\n use rustc_expand::base::{self, *};\n use rustc_expand::module::DirectoryOwnership;\n use rustc_expand::panictry;\n-use rustc_parse::{self, new_sub_parser_from_file, parser::Parser};\n+use rustc_parse::{self, new_parser_from_file, parser::Parser};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Pos, Span};\n@@ -110,7 +110,7 @@ pub fn expand_include<'cx>(\n             return DummyResult::any(sp);\n         }\n     };\n-    let p = new_sub_parser_from_file(cx.parse_sess(), &file, None, sp);\n+    let p = new_parser_from_file(cx.parse_sess(), &file, Some(sp));\n \n     // If in the included file we have e.g., `mod bar;`,\n     // then the path of `bar.rs` should be relative to the directory of `file`."}, {"sha": "74a9646a0c0afd9429eaf356cafae14c3fb4a222", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -40,31 +40,26 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n-        match constant.literal.val {\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n-                let substs = self.monomorphize(&substs);\n-                self.cx\n-                    .tcx()\n-                    .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n-                    .map_err(|err| {\n-                        if promoted.is_none() {\n-                            self.cx\n-                                .tcx()\n-                                .sess\n-                                .span_err(constant.span, \"erroneous constant encountered\");\n-                        }\n-                        err\n-                    })\n-            }\n+        match self.monomorphize(&constant.literal).val {\n+            ty::ConstKind::Unevaluated(def_id, substs, promoted) => self\n+                .cx\n+                .tcx()\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n+                .map_err(|err| {\n+                    if promoted.is_none() {\n+                        self.cx\n+                            .tcx()\n+                            .sess\n+                            .span_err(constant.span, \"erroneous constant encountered\");\n+                    }\n+                    err\n+                }),\n             ty::ConstKind::Value(value) => Ok(value),\n-            _ => {\n-                let const_ = self.monomorphize(&constant.literal);\n-                if let ty::ConstKind::Value(value) = const_.val {\n-                    Ok(value)\n-                } else {\n-                    span_bug!(constant.span, \"encountered bad ConstKind in codegen: {:?}\", const_);\n-                }\n-            }\n+            err => span_bug!(\n+                constant.span,\n+                \"encountered bad ConstKind after monomorphizing: {:?}\",\n+                err\n+            ),\n         }\n     }\n "}, {"sha": "485719c5175643532a5d7618e17ca614f1ba1e4b", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -30,7 +30,7 @@ pub struct Sharded<T> {\n impl<T: Default> Default for Sharded<T> {\n     #[inline]\n     fn default() -> Self {\n-        Self::new(|| T::default())\n+        Self::new(T::default)\n     }\n }\n "}, {"sha": "9afc67689bf857ee98fbd764588df72a2af3c73d", "filename": "src/librustc_error_codes/error_codes/E0449.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0449.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0449.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0449.md?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,5 +1,6 @@\n-A visibility qualifier was used when it was unnecessary. Erroneous code\n-examples:\n+A visibility qualifier was used when it was unnecessary.\n+\n+Erroneous code examples:\n \n ```compile_fail,E0449\n struct Bar;"}, {"sha": "8f31b701e495e7d609135e2dee50035d72f7c59b", "filename": "src/librustc_error_codes/error_codes/E0738.md", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0738.md?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,48 +1,11 @@\n-`#[track_caller]` cannot be used in traits yet. This is due to limitations in\n-the compiler which are likely to be temporary. See [RFC 2091] for details on\n-this and other restrictions.\n+`#[track_caller]` cannot be used to annotate foreign functions.\n \n-Erroneous example with a trait method implementation:\n+Erroneous example:\n \n ```compile_fail,E0738\n #![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self);\n-}\n-\n-impl Foo for u64 {\n-    #[track_caller]\n-    fn bar(&self) {}\n-}\n-```\n-\n-Erroneous example with a blanket trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n+extern \"Rust\" {\n     #[track_caller]\n-    fn bar(&self) {}\n-    fn baz(&self);\n+    fn bar();\n }\n ```\n-\n-Erroneous example with a trait method declaration:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self) {}\n-\n-    #[track_caller]\n-    fn baz(&self);\n-}\n-```\n-\n-Note that while the compiler may be able to support the attribute in traits in\n-the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n-\n-[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md"}, {"sha": "fffae0bfd24d967f84a141a6ef540e246619b200", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -162,7 +162,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         message: &str,\n         span: Option<S>,\n     ) -> &mut Self {\n-        let span = span.map(|s| s.into()).unwrap_or_else(|| MultiSpan::new());\n+        let span = span.map(|s| s.into()).unwrap_or_else(MultiSpan::new);\n         self.0.diagnostic.sub(level, message, span, None);\n         self\n     }"}, {"sha": "b6b69400bad434b323ae061548d26f085408268e", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -259,8 +259,6 @@ fn generic_extension<'cx>(\n                 }\n \n                 let mut p = Parser::new(sess, tts, false, None);\n-                p.root_module_name =\n-                    cx.current_expansion.module.mod_path.last().map(|id| id.to_string());\n                 p.last_type_ascription = cx.current_expansion.prior_type_ascription;\n \n                 // Let the context choose how to interpret the result."}, {"sha": "aad92a09743b3d53ef9b78da039dff62f8e175bc", "filename": "src/librustc_expand/module.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_expand%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_expand%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmodule.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast::{self, Attribute, Ident, Mod};\n use rustc_ast::{attr, token};\n use rustc_errors::{struct_span_err, PResult};\n-use rustc_parse::new_sub_parser_from_file;\n+use rustc_parse::new_parser_from_file;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FileName, Span};\n use rustc_span::symbol::sym;\n@@ -59,9 +59,8 @@ crate fn parse_external_mod(\n         *pop_mod_stack = true; // We have pushed, so notify caller.\n         drop(included_mod_stack);\n \n-        // Actually parse the external file as amodule.\n-        let mut p0 = new_sub_parser_from_file(sess, &mp.path, Some(id.to_string()), span);\n-        let mut module = p0.parse_mod(&token::Eof)?;\n+        // Actually parse the external file as a module.\n+        let mut module = new_parser_from_file(sess, &mp.path, Some(span)).parse_mod(&token::Eof)?;\n         module.0.inline = false;\n         module\n     };"}, {"sha": "f8bf0315d0c9f0a4a26729a9bd4efcb444566dee", "filename": "src/librustc_feature/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -51,7 +51,7 @@ pub struct Feature {\n \n impl Feature {\n     fn issue(&self) -> Option<NonZeroU32> {\n-        self.issue.and_then(|i| NonZeroU32::new(i))\n+        self.issue.and_then(NonZeroU32::new)\n     }\n }\n "}, {"sha": "60bb4a661fd01c4c44f99c6bc53cb3bdd0a751ad", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -707,7 +707,7 @@ impl<'tcx> QueryContext<'tcx> {\n     where\n         F: FnOnce(TyCtxt<'tcx>) -> R,\n     {\n-        ty::tls::enter_global(self.0, |tcx| f(tcx))\n+        ty::tls::enter_global(self.0, f)\n     }\n \n     pub fn print_stats(&mut self) {"}, {"sha": "c1a95c094b10c76962d4049a66f4c5143ea46229", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -327,7 +327,7 @@ impl<'a> CrateLocator<'a> {\n                     .into_iter()\n                     .filter_map(|entry| entry.files())\n                     .flatten()\n-                    .map(|location| PathBuf::from(location))\n+                    .map(PathBuf::from)\n                     .collect()\n             } else {\n                 // SVH being specified means this is a transitive dependency,"}, {"sha": "c15f2a726ee705e5d2f4c570be1a4615ae3691ca", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -577,7 +577,7 @@ fn write_diff<A: Analysis<'tcx>>(\n     let mut clear = HybridBitSet::new_empty(len);\n \n     // FIXME: Implement a lazy iterator over the symmetric difference of two bitsets.\n-    for i in (0..len).map(|i| A::Idx::new(i)) {\n+    for i in (0..len).map(A::Idx::new) {\n         match (from.contains(i), to.contains(i)) {\n             (false, true) => set.insert(i),\n             (true, false) => clear.insert(i),"}, {"sha": "6f9543bf95a3b569087fef86e4454e2f6b647f44", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -825,11 +825,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Run it.\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n+            // We should only get validation errors here. Avoid other errors as\n+            // those do not show *where* in the value the issue lies.\n             Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n-            Err(err) if cfg!(debug_assertions) => {\n-                bug!(\"Unexpected error during validation: {}\", err)\n-            }\n-            Err(err) => Err(err),\n+            Err(err) => bug!(\"Unexpected error during validation: {}\", err),\n         }\n     }\n "}, {"sha": "cbd19f080eb9ef8acd6a22e5f165952d7a223027", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -895,7 +895,7 @@ fn create_mono_items_for_vtable_methods<'tcx>(\n                     .unwrap()\n                 })\n                 .filter(|&instance| should_monomorphize_locally(tcx, &instance))\n-                .map(|instance| create_fn_mono_item(instance));\n+                .map(create_fn_mono_item);\n             output.extend(methods);\n         }\n "}, {"sha": "a19901f37787e55b5d64329a6d1d57b697e639f6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -404,8 +404,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 // Some errors shouldn't come up because creating them causes\n                 // an allocation, which we should avoid. When that happens,\n                 // dedicated error variants should be introduced instead.\n-                // Only test this in debug builds though to avoid disruptions.\n-                debug_assert!(\n+                assert!(\n                     !error.kind.allocates(),\n                     \"const-prop encountered allocating error: {}\",\n                     error"}, {"sha": "89063a4227fa9cb56ee597e8baeb3e057005d9c9", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -2066,7 +2066,7 @@ fn split_grouped_constructors<'p, 'tcx>(\n                         }\n                         intersection\n                     })\n-                    .flat_map(|range| range_borders(range));\n+                    .flat_map(range_borders);\n                 let ctor_borders = range_borders(ctor_range.clone());\n                 let mut borders: Vec<_> = row_borders.chain(ctor_borders).collect();\n                 borders.sort_unstable();"}, {"sha": "13fb85db84779eeb9d1afb02016deef7b4a29b17", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -50,15 +50,15 @@ macro_rules! panictry_buffer {\n }\n \n pub fn parse_crate_from_file<'a>(input: &Path, sess: &'a ParseSess) -> PResult<'a, ast::Crate> {\n-    let mut parser = new_parser_from_file(sess, input);\n+    let mut parser = new_parser_from_file(sess, input, None);\n     parser.parse_crate_mod()\n }\n \n pub fn parse_crate_attrs_from_file<'a>(\n     input: &Path,\n     sess: &'a ParseSess,\n ) -> PResult<'a, Vec<ast::Attribute>> {\n-    let mut parser = new_parser_from_file(sess, input);\n+    let mut parser = new_parser_from_file(sess, input, None);\n     parser.parse_inner_attributes()\n }\n \n@@ -106,8 +106,9 @@ pub fn maybe_new_parser_from_source_str(\n }\n \n /// Creates a new parser, handling errors as appropriate if the file doesn't exist.\n-pub fn new_parser_from_file<'a>(sess: &'a ParseSess, path: &Path) -> Parser<'a> {\n-    source_file_to_parser(sess, file_to_source_file(sess, path, None))\n+/// If a span is given, that is used on an error as the as the source of the problem.\n+pub fn new_parser_from_file<'a>(sess: &'a ParseSess, path: &Path, sp: Option<Span>) -> Parser<'a> {\n+    source_file_to_parser(sess, file_to_source_file(sess, path, sp))\n }\n \n /// Creates a new parser, returning buffered diagnostics if the file doesn't exist,\n@@ -120,20 +121,6 @@ pub fn maybe_new_parser_from_file<'a>(\n     maybe_source_file_to_parser(sess, file)\n }\n \n-/// Given a session, a crate config, a path, and a span, add\n-/// the file at the given path to the `source_map`, and returns a parser.\n-/// On an error, uses the given span as the source of the problem.\n-pub fn new_sub_parser_from_file<'a>(\n-    sess: &'a ParseSess,\n-    path: &Path,\n-    module_name: Option<String>,\n-    sp: Span,\n-) -> Parser<'a> {\n-    let mut p = source_file_to_parser(sess, file_to_source_file(sess, path, Some(sp)));\n-    p.root_module_name = module_name;\n-    p\n-}\n-\n /// Given a `source_file` and config, returns a parser.\n fn source_file_to_parser(sess: &ParseSess, source_file: Lrc<SourceFile>) -> Parser<'_> {\n     panictry_buffer!(&sess.span_diagnostic, maybe_source_file_to_parser(sess, source_file))"}, {"sha": "b987813e38d982f88e88623593144f6cfa625a14", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -88,10 +88,6 @@ pub struct Parser<'a> {\n     /// The previous token.\n     pub prev_token: Token,\n     restrictions: Restrictions,\n-    /// Name of the root module this parser originated from. If `None`, then the\n-    /// name is not known. This does not change while the parser is descending\n-    /// into modules, and sub-parsers have new values for this name.\n-    pub root_module_name: Option<String>,\n     expected_tokens: Vec<TokenType>,\n     token_cursor: TokenCursor,\n     desugar_doc_comments: bool,\n@@ -350,7 +346,6 @@ impl<'a> Parser<'a> {\n             token: Token::dummy(),\n             prev_token: Token::dummy(),\n             restrictions: Restrictions::empty(),\n-            root_module_name: None,\n             expected_tokens: Vec::new(),\n             token_cursor: TokenCursor {\n                 frame: TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, &tokens),"}, {"sha": "583e1fdc1f05f40f0ed70c683b3e928e154fca66", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -151,17 +151,17 @@ impl CheckAttrVisitor<'tcx> {\n                 .emit();\n                 false\n             }\n-            Target::Fn | Target::Method(MethodKind::Inherent) => true,\n-            Target::Method(_) => {\n+            Target::ForeignFn => {\n                 struct_span_err!(\n                     self.tcx.sess,\n                     *attr_span,\n                     E0738,\n-                    \"`#[track_caller]` may not be used on trait methods\",\n+                    \"`#[track_caller]` is not supported on foreign functions\",\n                 )\n                 .emit();\n                 false\n             }\n+            Target::Fn | Target::Method(..) => true,\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "c3d6baee0c7b04f453ffda95ded95ed4cd3f7e5f", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -796,7 +796,7 @@ impl<'a> Resolver<'a> {\n             });\n             if let Some(span) = def_span {\n                 err.span_label(\n-                    span,\n+                    self.session.source_map().def_span(span),\n                     &format!(\n                         \"similarly named {} `{}` defined here\",\n                         suggestion.res.descr(),"}, {"sha": "d375ae4a447a3801e09bbb8d7ebf258d65b0f2a6", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -874,6 +874,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+        let orig_blacklisted_binding = match &import.kind {\n+            ImportKind::Single { target_bindings, .. } => {\n+                Some(mem::replace(&mut self.r.blacklisted_binding, target_bindings[TypeNS].get()))\n+            }\n+            _ => None,\n+        };\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n         let path_res = self.r.resolve_path(\n             &import.module_path,\n@@ -884,6 +890,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             import.crate_lint(),\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n+        if let Some(orig_blacklisted_binding) = orig_blacklisted_binding {\n+            self.r.blacklisted_binding = orig_blacklisted_binding;\n+        }\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n             // Consider erroneous imports used to avoid duplicate diagnostics."}, {"sha": "a80c3b72044ef8319d0752a198011a3a5d4d4358", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1148,7 +1148,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n                 let sub_span = path.segments.last().unwrap().ident.span;\n                 if !self.span.filter_generated(sub_span) {\n-                    let ref_id = self.lookup_def_id(id).map(|id| id_from_def_id(id));\n+                    let ref_id = self.lookup_def_id(id).map(id_from_def_id);\n                     let alias_span = alias.map(|i| self.span_from_span(i.span));\n                     let span = self.span_from_span(sub_span);\n                     self.dumper.import("}, {"sha": "024633c3b3dec638e66bfd1afeecf3d8282153b5", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -326,7 +326,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                                     .as_ref()\n                                     .and_then(|t| self.lookup_def_id(t.ref_id))\n                                     .map(id_from_def_id)\n-                                    .unwrap_or_else(|| null_id()),\n+                                    .unwrap_or_else(null_id),\n                             },\n                             Impl {\n                                 id: impl_id,\n@@ -487,9 +487,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             qualname,\n             // FIXME you get better data here by using the visitor.\n             value: String::new(),\n-            parent: parent_scope.map(|id| id_from_def_id(id)),\n+            parent: parent_scope.map(id_from_def_id),\n             children: vec![],\n-            decl_id: decl_id.map(|id| id_from_def_id(id)),\n+            decl_id: decl_id.map(id_from_def_id),\n             docs,\n             sig: None,\n             attributes: lower_attributes(attributes, self),\n@@ -541,7 +541,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                                 .tcx\n                                 .find_field_index(ident, variant)\n                                 .map(|index| id_from_def_id(variant.fields[index].did))\n-                                .unwrap_or_else(|| null_id()),\n+                                .unwrap_or_else(null_id),\n                         }))\n                     }\n                     ty::Tuple(..) => None,\n@@ -590,14 +590,11 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 Some(Data::RefData(Ref {\n                     kind: RefKind::Function,\n                     span,\n-                    ref_id: def_id\n-                        .or(decl_id)\n-                        .map(|id| id_from_def_id(id))\n-                        .unwrap_or_else(|| null_id()),\n+                    ref_id: def_id.or(decl_id).map(id_from_def_id).unwrap_or_else(|| null_id()),\n                 }))\n             }\n             ast::ExprKind::Path(_, ref path) => {\n-                self.get_path_data(expr.id, path).map(|d| Data::RefData(d))\n+                self.get_path_data(expr.id, path).map(Data::RefData)\n             }\n             _ => {\n                 // FIXME\n@@ -1075,7 +1072,7 @@ fn id_from_def_id(id: DefId) -> rls_data::Id {\n \n fn id_from_node_id(id: NodeId, scx: &SaveContext<'_, '_>) -> rls_data::Id {\n     let def_id = scx.tcx.hir().opt_local_def_id_from_node_id(id);\n-    def_id.map(|id| id_from_def_id(id)).unwrap_or_else(|| {\n+    def_id.map(id_from_def_id).unwrap_or_else(|| {\n         // Create a *fake* `DefId` out of a `NodeId` by subtracting the `NodeId`\n         // out of the maximum u32 value. This will work unless you have *billions*\n         // of definitions in a single crate (very unlikely to actually happen)."}, {"sha": "6c4d70c09a39ac6f810fb99b1165df5ec24f039e", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1310,7 +1310,7 @@ fn select_incremental_path(\n         (None, Some(path)) => Some(path),\n         (None, None) => None,\n     }\n-    .map(|m| PathBuf::from(m))\n+    .map(PathBuf::from)\n }\n \n fn collect_print_requests("}, {"sha": "260363a5d1fb5cd926ae2e71d5e5e6ffe80f09ed", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> FulfillmentContext<'tcx> {\n             // FIXME: if we kept the original cache key, we could mark projection\n             // obligations as complete for the projection cache here.\n \n-            errors.extend(outcome.errors.into_iter().map(|e| to_fulfillment_error(e)));\n+            errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));\n \n             // If nothing new was added, no need to keep looping.\n             if outcome.stalled {\n@@ -214,7 +214,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n             .predicates\n             .to_errors(CodeAmbiguity)\n             .into_iter()\n-            .map(|e| to_fulfillment_error(e))\n+            .map(to_fulfillment_error)\n             .collect();\n         if errors.is_empty() { Ok(()) } else { Err(errors) }\n     }"}, {"sha": "5cc1da045fc371e42bae948300efb33a0c08507d", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -39,7 +39,7 @@ pub fn astconv_object_safety_violations(\n     let violations = traits::supertrait_def_ids(tcx, trait_def_id)\n         .map(|def_id| predicates_reference_self(tcx, def_id, true))\n         .filter(|spans| !spans.is_empty())\n-        .map(|spans| ObjectSafetyViolation::SupertraitSelf(spans))\n+        .map(ObjectSafetyViolation::SupertraitSelf)\n         .collect();\n \n     debug!(\"astconv_object_safety_violations(trait_def_id={:?}) = {:?}\", trait_def_id, violations);"}, {"sha": "080eb8b3f3a00b9729842336b4f62eef0bee9659", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -2947,13 +2947,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let existential_predicates = data_a.map_bound(|data_a| {\n                     let iter = data_a\n                         .principal()\n-                        .map(|x| ty::ExistentialPredicate::Trait(x))\n+                        .map(ty::ExistentialPredicate::Trait)\n                         .into_iter()\n-                        .chain(\n-                            data_a\n-                                .projection_bounds()\n-                                .map(|x| ty::ExistentialPredicate::Projection(x)),\n-                        )\n+                        .chain(data_a.projection_bounds().map(ty::ExistentialPredicate::Projection))\n                         .chain(data_b.auto_traits().map(ty::ExistentialPredicate::AutoTrait));\n                     tcx.mk_existential_predicates(iter)\n                 });"}, {"sha": "408e5c2d2f24d78462ce1a8048d0f17816c2c346", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1693,9 +1693,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n \n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n-        let existential_trait_refs = regular_traits\n-            .iter()\n-            .map(|i| i.trait_ref().map_bound(|trait_ref| trait_ref_to_existential(trait_ref)));\n+        let existential_trait_refs =\n+            regular_traits.iter().map(|i| i.trait_ref().map_bound(trait_ref_to_existential));\n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n                 let trait_ref = trait_ref_to_existential(b.projection_ty.trait_ref(tcx));"}, {"sha": "f666ef72d5278c0016ba342943a163a4c0a88db0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -677,7 +677,7 @@ fn compare_number_of_generics<'tcx>(\n                         impl_count,\n                         kind,\n                         pluralize!(impl_count),\n-                        suffix.unwrap_or_else(|| String::new()),\n+                        suffix.unwrap_or_else(String::new),\n                     ),\n                 );\n             }"}, {"sha": "bb9354b8ab339c9638b55e1133e7228d56e1ec30", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -2339,6 +2339,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let attrs = tcx.get_attrs(id);\n \n     let mut codegen_fn_attrs = CodegenFnAttrs::new();\n+    if should_inherit_track_caller(tcx, id) {\n+        codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n+    }\n \n     let whitelist = tcx.target_features_whitelist(LOCAL_CRATE);\n \n@@ -2583,6 +2586,32 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     codegen_fn_attrs\n }\n \n+/// Checks if the provided DefId is a method in a trait impl for a trait which has track_caller\n+/// applied to the method prototype.\n+fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    if let Some(impl_item) = tcx.opt_associated_item(def_id) {\n+        if let ty::AssocItemContainer::ImplContainer(impl_def_id) = impl_item.container {\n+            if let Some(trait_def_id) = tcx.trait_id_of_impl(impl_def_id) {\n+                if let Some(trait_item) = tcx\n+                    .associated_items(trait_def_id)\n+                    .filter_by_name_unhygienic(impl_item.ident.name)\n+                    .find(move |trait_item| {\n+                        trait_item.kind == ty::AssocKind::Method\n+                            && tcx.hygienic_eq(impl_item.ident, trait_item.ident, trait_def_id)\n+                    })\n+                {\n+                    return tcx\n+                        .codegen_fn_attrs(trait_item.def_id)\n+                        .flags\n+                        .intersects(CodegenFnAttrFlags::TRACK_CALLER);\n+                }\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n     use rustc_ast::ast::{Lit, LitIntType, LitKind};\n     let meta_item_list = attr.meta_item_list();"}, {"sha": "eed6fbf13b7d2f416c9548a9d833c5c57eac50fb", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -12,6 +12,7 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n \n #[cfg(all(\n     unix,\n+    not(target_os = \"macos\"),\n     not(target_os = \"ios\"),\n     not(target_os = \"openbsd\"),\n     not(target_os = \"freebsd\"),\n@@ -92,6 +93,42 @@ mod imp {\n     }\n }\n \n+#[cfg(target_os = \"macos\")]\n+mod imp {\n+    use crate::fs::File;\n+    use crate::io::Read;\n+    use crate::sys::os::errno;\n+    use libc::{c_int, c_void, size_t};\n+\n+    fn getentropy_fill_bytes(v: &mut [u8]) -> bool {\n+        weak!(fn getentropy(*mut c_void, size_t) -> c_int);\n+\n+        getentropy\n+            .get()\n+            .map(|f| {\n+                // getentropy(2) permits a maximum buffer size of 256 bytes\n+                for s in v.chunks_mut(256) {\n+                    let ret = unsafe { f(s.as_mut_ptr() as *mut c_void, s.len()) };\n+                    if ret == -1 {\n+                        panic!(\"unexpected getentropy error: {}\", errno());\n+                    }\n+                }\n+                true\n+            })\n+            .unwrap_or(false)\n+    }\n+\n+    pub fn fill_bytes(v: &mut [u8]) {\n+        if getentropy_fill_bytes(v) {\n+            return;\n+        }\n+\n+        // for older macos which doesn't support getentropy\n+        let mut file = File::open(\"/dev/urandom\").expect(\"failed to open /dev/urandom\");\n+        file.read_exact(v).expect(\"failed to read /dev/urandom\")\n+    }\n+}\n+\n #[cfg(target_os = \"openbsd\")]\n mod imp {\n     use crate::sys::os::errno;"}, {"sha": "3c5738f574c265abd9f33348b2b06cbdb8c6ab2d", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -28,6 +28,6 @@ fn parse() {\n \n     let path = Path::new(file!());\n     let path = path.canonicalize().unwrap();\n-    let mut parser = new_parser_from_file(&parse_session, &path);\n+    let mut parser = new_parser_from_file(&parse_session, &path, None);\n     let _ = parser.parse_crate_mod();\n }"}, {"sha": "8b933c078ff26661ec85da6787ccefac8f9e3493", "filename": "src/test/ui/const-generics/issues/issue-70125-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+const L: usize = 4;\n+\n+pub trait Print<const N: usize> {\n+    fn print(&self) -> usize {\n+        N\n+    }\n+}\n+\n+pub struct Printer;\n+impl Print<L> for Printer {}\n+\n+fn main() {\n+    let p = Printer;\n+    assert_eq!(p.print(), 4);\n+}"}, {"sha": "f28f58cf5ce4dbc3db9fd441ea0650d24344d7ce", "filename": "src/test/ui/const-generics/issues/issue-70125-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-70125-1.rs:2:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "ea7a68c2f93d9d2075015552ea9156b61d227366", "filename": "src/test/ui/const-generics/issues/issue-70125-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    <()>::foo();\n+}\n+\n+trait Foo<const X: usize> {\n+    fn foo() -> usize {\n+        X\n+    }\n+}\n+\n+impl Foo<{3}> for () {}"}, {"sha": "664aa7ba45161f4bb54a45d86720ffd46bee8ee5", "filename": "src/test/ui/const-generics/issues/issue-70125-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-70125-2.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "a985e963e5726b547b20125863d5629c99e571b4", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -29,20 +29,17 @@ LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}\n error[E0423]: expected function, tuple struct or tuple variant, found struct `Foo`\n   --> $DIR/E0423.rs:4:13\n    |\n-LL |       struct Foo { a: bool };\n-   |       ---------------------- `Foo` defined here\n+LL |     struct Foo { a: bool };\n+   |     ---------------------- `Foo` defined here\n LL | \n-LL |       let f = Foo();\n-   |               ^^^\n-   |               |\n-   |               did you mean `Foo { /* fields */ }`?\n-   |               help: a function with a similar name exists (notice the capitalization): `foo`\n+LL |     let f = Foo();\n+   |             ^^^\n+   |             |\n+   |             did you mean `Foo { /* fields */ }`?\n+   |             help: a function with a similar name exists (notice the capitalization): `foo`\n ...\n-LL | / fn foo() {\n-LL | |     for _ in std::ops::Range { start: 0, end: 10 } {}\n-LL | |\n-LL | | }\n-   | |_- similarly named function `foo` defined here\n+LL | fn foo() {\n+   | -------- similarly named function `foo` defined here\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8"}, {"sha": "efbd53fd223a4e12e877d94f1d7578af9a65086a", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -47,7 +47,7 @@ error[E0412]: cannot find type `A` in this scope\n   --> $DIR/glob-resolve1.rs:28:11\n    |\n LL |     pub enum B { B1 }\n-   |     ----------------- similarly named enum `B` defined here\n+   |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<A>();\n    |           ^\n@@ -65,7 +65,7 @@ error[E0412]: cannot find type `C` in this scope\n   --> $DIR/glob-resolve1.rs:29:11\n    |\n LL |     pub enum B { B1 }\n-   |     ----------------- similarly named enum `B` defined here\n+   |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<C>();\n    |           ^\n@@ -83,7 +83,7 @@ error[E0412]: cannot find type `D` in this scope\n   --> $DIR/glob-resolve1.rs:30:11\n    |\n LL |     pub enum B { B1 }\n-   |     ----------------- similarly named enum `B` defined here\n+   |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<D>();\n    |           ^"}, {"sha": "984d3f0ca92f4a9fac073acc37eab85fe426609d", "filename": "src/test/ui/imports/issue-62767.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+mod m {\n+    pub enum Same {\n+        Same,\n+    }\n+}\n+\n+use m::*;\n+\n+// The variant `Same` introduced by this import is not considered when resolving the prefix\n+// `Same::` during import validation (issue #62767).\n+use Same::Same;\n+\n+fn main() {}"}, {"sha": "fe51fa0699fb43496d40d2bd79078219005cbb74", "filename": "src/test/ui/issues/issue-31845.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,11 +1,10 @@\n error[E0425]: cannot find function `g` in this scope\n   --> $DIR/issue-31845.rs:7:12\n    |\n-LL | /         fn h() {\n-LL | |            g();\n-   | |            ^ help: a function with a similar name exists: `h`\n-LL | |         }\n-   | |_________- similarly named function `h` defined here\n+LL |         fn h() {\n+   |         ------ similarly named function `h` defined here\n+LL |            g();\n+   |            ^ help: a function with a similar name exists: `h`\n \n error: aborting due to previous error\n "}, {"sha": "890ef8014b489e261da1d3f592e9a16e1c8546bd", "filename": "src/test/ui/issues/issue-46332.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -2,7 +2,7 @@ error[E0422]: cannot find struct, variant or union type `TyUInt` in this scope\n   --> $DIR/issue-46332.rs:9:5\n    |\n LL | struct TyUint {}\n-   | ---------------- similarly named struct `TyUint` defined here\n+   | ------------- similarly named struct `TyUint` defined here\n ...\n LL |     TyUInt {};\n    |     ^^^^^^ help: a struct with a similar name exists (notice the capitalization): `TyUint`"}, {"sha": "4ab16bd10173d36570e860dc49a3db6169dfd2f5", "filename": "src/test/ui/macros/macro_undefined.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro_undefined.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,13 +1,11 @@\n error: cannot find macro `k` in this scope\n   --> $DIR/macro_undefined.rs:11:5\n    |\n-LL | /     macro_rules! kl {\n-LL | |         () => ()\n-LL | |     }\n-   | |_____- similarly named macro `kl` defined here\n+LL |     macro_rules! kl {\n+   |     --------------- similarly named macro `kl` defined here\n ...\n-LL |       k!();\n-   |       ^ help: a macro with a similar name exists: `kl`\n+LL |     k!();\n+   |     ^ help: a macro with a similar name exists: `kl`\n \n error: aborting due to previous error\n "}, {"sha": "4f0d72de6f1a4c815508c9816e1a398ed9de2ee7", "filename": "src/test/ui/privacy/legacy-ctor-visibility.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,12 +1,10 @@\n error[E0423]: expected function, tuple struct or tuple variant, found struct `S`\n   --> $DIR/legacy-ctor-visibility.rs:9:13\n    |\n-LL | /         fn f() {\n-LL | |             S(10);\n-   | |             ^ help: a function with a similar name exists: `f`\n-LL | |\n-LL | |         }\n-   | |_________- similarly named function `f` defined here\n+LL |         fn f() {\n+   |         ------ similarly named function `f` defined here\n+LL |             S(10);\n+   |             ^ help: a function with a similar name exists: `f`\n \n error: aborting due to previous error\n "}, {"sha": "15a1d6d9479fe856d737b849f92a965d7489354e", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -18,24 +18,20 @@ LL |     Dlona!();\n error: cannot find macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:58:5\n    |\n-LL | / macro_rules! attr_proc_mac {\n-LL | |     () => {}\n-LL | | }\n-   | |_- similarly named macro `attr_proc_mac` defined here\n+LL | macro_rules! attr_proc_mac {\n+   | -------------------------- similarly named macro `attr_proc_mac` defined here\n ...\n-LL |       attr_proc_macra!();\n-   |       ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `attr_proc_mac`\n+LL |     attr_proc_macra!();\n+   |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `attr_proc_mac`\n \n error: cannot find macro `FooWithLongNama` in this scope\n   --> $DIR/resolve-error.rs:55:5\n    |\n-LL | / macro_rules! FooWithLongNam {\n-LL | |     () => {}\n-LL | | }\n-   | |_- similarly named macro `FooWithLongNam` defined here\n+LL | macro_rules! FooWithLongNam {\n+   | --------------------------- similarly named macro `FooWithLongNam` defined here\n ...\n-LL |       FooWithLongNama!();\n-   |       ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `FooWithLongNam`\n+LL |     FooWithLongNama!();\n+   |     ^^^^^^^^^^^^^^^ help: a macro with a similar name exists: `FooWithLongNam`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n   --> $DIR/resolve-error.rs:49:10"}, {"sha": "622f0dfcda4cbd3c59a017a98bc901956ff82668", "filename": "src/test/ui/resolve/issue-5035.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -8,7 +8,7 @@ error[E0404]: expected trait, found type alias `K`\n   --> $DIR/issue-5035.rs:3:6\n    |\n LL | trait I {}\n-   | ---------- similarly named trait `I` defined here\n+   | ------- similarly named trait `I` defined here\n LL | type K = dyn I;\n LL | impl K for isize {}\n    |      ^"}, {"sha": "ecdec3c24a1d8e380e91604b9cb2506fc2530e88", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -8,7 +8,7 @@ error[E0412]: cannot find type `Baz` in this scope\n   --> $DIR/levenshtein.rs:14:10\n    |\n LL | enum Bar { }\n-   | ------------ similarly named enum `Bar` defined here\n+   | -------- similarly named enum `Bar` defined here\n LL | \n LL | type A = Baz; // Misspelled type name.\n    |          ^^^ help: an enum with a similar name exists: `Bar`\n@@ -43,7 +43,7 @@ error[E0425]: cannot find function `foobar` in this scope\n   --> $DIR/levenshtein.rs:30:5\n    |\n LL | fn foo_bar() {}\n-   | --------------- similarly named function `foo_bar` defined here\n+   | ------------ similarly named function `foo_bar` defined here\n ...\n LL |     foobar(); // Misspelled function name.\n    |     ^^^^^^ help: a function with a similar name exists: `foo_bar`"}, {"sha": "1187a661bbed1e32e112e856ef288ed45663ad2b", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 25, "deletions": 59, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -16,15 +16,11 @@ LL |         m::Z::Unit;\n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n-LL | /     fn f() {\n-LL | |         n::Z;\n-LL | |\n-LL | |         Z;\n-   | |         ^\n-...  |\n-LL | |         // This is ok, it is equivalent to not having braces\n-LL | |     }\n-   | |_____- similarly named function `f` defined here\n+LL |     fn f() {\n+   |     ------ similarly named function `f` defined here\n+...\n+LL |         Z;\n+   |         ^\n    |\n help: a function with a similar name exists\n    |\n@@ -53,17 +49,11 @@ LL |           let _: Z = Z::Struct;\n error[E0423]: expected value, found enum `m::E`\n   --> $DIR/privacy-enum-ctor.rs:41:16\n    |\n-LL | /     fn f() {\n-LL | |         n::Z;\n-LL | |\n-LL | |         Z;\n-...  |\n-LL | |         // This is ok, it is equivalent to not having braces\n-LL | |     }\n-   | |_____- similarly named function `f` defined here\n+LL |     fn f() {\n+   |     ------ similarly named function `f` defined here\n ...\n-LL |       let _: E = m::E;\n-   |                  ^^^^\n+LL |     let _: E = m::E;\n+   |                ^^^^\n    |\n help: a function with a similar name exists\n    |\n@@ -130,17 +120,11 @@ LL |       let _: E = E::Struct;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:57:12\n    |\n-LL | /     pub enum E {\n-LL | |         Fn(u8),\n-LL | |         Struct {\n-LL | |             s: u8,\n-LL | |         },\n-LL | |         Unit,\n-LL | |     }\n-   | |_____- similarly named enum `E` defined here\n+LL |     pub enum E {\n+   |     ---------- similarly named enum `E` defined here\n ...\n-LL |       let _: Z = m::n::Z;\n-   |              ^\n+LL |     let _: Z = m::n::Z;\n+   |            ^\n    |\n help: an enum with a similar name exists\n    |\n@@ -169,17 +153,11 @@ LL |     let _: Z = m::Z::Unit;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12\n    |\n-LL | /     pub enum E {\n-LL | |         Fn(u8),\n-LL | |         Struct {\n-LL | |             s: u8,\n-LL | |         },\n-LL | |         Unit,\n-LL | |     }\n-   | |_____- similarly named enum `E` defined here\n+LL |     pub enum E {\n+   |     ---------- similarly named enum `E` defined here\n ...\n-LL |       let _: Z = m::n::Z::Fn;\n-   |              ^\n+LL |     let _: Z = m::n::Z::Fn;\n+   |            ^\n    |\n help: an enum with a similar name exists\n    |\n@@ -193,17 +171,11 @@ LL | use m::n::Z;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:64:12\n    |\n-LL | /     pub enum E {\n-LL | |         Fn(u8),\n-LL | |         Struct {\n-LL | |             s: u8,\n-LL | |         },\n-LL | |         Unit,\n-LL | |     }\n-   | |_____- similarly named enum `E` defined here\n+LL |     pub enum E {\n+   |     ---------- similarly named enum `E` defined here\n ...\n-LL |       let _: Z = m::n::Z::Struct;\n-   |              ^\n+LL |     let _: Z = m::n::Z::Struct;\n+   |            ^\n    |\n help: an enum with a similar name exists\n    |\n@@ -228,17 +200,11 @@ LL |       let _: Z = m::n::Z::Struct;\n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:68:12\n    |\n-LL | /     pub enum E {\n-LL | |         Fn(u8),\n-LL | |         Struct {\n-LL | |             s: u8,\n-LL | |         },\n-LL | |         Unit,\n-LL | |     }\n-   | |_____- similarly named enum `E` defined here\n+LL |     pub enum E {\n+   |     ---------- similarly named enum `E` defined here\n ...\n-LL |       let _: Z = m::n::Z::Unit {};\n-   |              ^\n+LL |     let _: Z = m::n::Z::Unit {};\n+   |            ^\n    |\n help: an enum with a similar name exists\n    |"}, {"sha": "9f6a69a51c0ceca41873815d6a28172e7ae86e52", "filename": "src/test/ui/rfc-2091-track-caller/error-extern-fn.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -0,0 +1,9 @@\n+#![feature(track_caller)]\n+#![allow(dead_code)]\n+\n+extern \"Rust\" {\n+    #[track_caller] //~ ERROR: `#[track_caller]` is not supported on foreign functions\n+    fn bar();\n+}\n+\n+fn main() {}"}, {"sha": "b03f5fbbdb20e1bf5ba06f205d61a3f2fd5d6c55", "filename": "src/test/ui/rfc-2091-track-caller/error-extern-fn.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-extern-fn.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,5 +1,5 @@\n-error[E0738]: `#[track_caller]` may not be used on trait methods\n-  --> $DIR/error-with-trait-decl.rs:4:5\n+error[E0738]: `#[track_caller]` is not supported on foreign functions\n+  --> $DIR/error-extern-fn.rs:5:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.stderr"}, {"sha": "ef037ab62aa3e001f9e4230a234eb55d288ff9cc", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,12 +0,0 @@\n-#![feature(track_caller)]\n-\n-trait Trait {\n-    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n-    fn unwrap(&self);\n-}\n-\n-impl Trait for u64 {\n-    fn unwrap(&self) {}\n-}\n-\n-fn main() {}"}, {"sha": "17e4bf41ddb53930f81973bde0955c078c73e4cb", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,8 +0,0 @@\n-#![feature(track_caller)]\n-\n-trait Trait {\n-    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n-    fn unwrap(&self) {}\n-}\n-\n-fn main() {}"}, {"sha": "867eb918b6e087eb2e149f698622f110f928128b", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,9 +0,0 @@\n-error[E0738]: `#[track_caller]` may not be used on trait methods\n-  --> $DIR/error-with-trait-default-impl.rs:4:5\n-   |\n-LL |     #[track_caller]\n-   |     ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0738`."}, {"sha": "75f20f76e660d618c1bd10874deffab0ae044e44", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,21 +0,0 @@\n-// check-fail\n-\n-#![feature(track_caller)]\n-\n-trait Trait {\n-    fn unwrap(&self);\n-}\n-\n-impl Trait for u64 {\n-    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n-    fn unwrap(&self) {}\n-}\n-\n-struct S;\n-\n-impl S {\n-    #[track_caller] // ok\n-    fn foo() {}\n-}\n-\n-fn main() {}"}, {"sha": "fafceefbfd8397f859eac694f6bca8f91a5ab945", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,9 +0,0 @@\n-error[E0738]: `#[track_caller]` may not be used on trait methods\n-  --> $DIR/error-with-trait-fn-impl.rs:10:5\n-   |\n-LL |     #[track_caller]\n-   |     ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0738`."}, {"sha": "b17c1efb3d38c4cfcfb22514ce766be5249c5195", "filename": "src/test/ui/rfc-2091-track-caller/tracked-fn-ptr-with-arg.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr-with-arg.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -14,6 +14,49 @@ fn tracked_unit(_: ()) {\n     assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n }\n \n+trait Trait {\n+    fn trait_tracked_unit(_: ());\n+}\n+\n+impl Trait for () {\n+    #[track_caller]\n+    fn trait_tracked_unit(_: ()) {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+trait TrackedTrait {\n+    #[track_caller]\n+    fn trait_tracked_unit_default(_: ()) {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+impl TrackedTrait for () {}\n+\n+trait BlanketTrackedTrait {\n+    #[track_caller]\n+    fn tracked_blanket(_: ());\n+}\n+\n+impl BlanketTrackedTrait for () {\n+    fn tracked_blanket(_: ()) {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n fn main() {\n     pass_to_ptr_call(tracked_unit, ());\n+    pass_to_ptr_call(<() as Trait>::trait_tracked_unit, ());\n+    pass_to_ptr_call(<() as TrackedTrait>::trait_tracked_unit_default, ());\n+    pass_to_ptr_call(<() as BlanketTrackedTrait>::tracked_blanket, ());\n }"}, {"sha": "8ee4d4fa168714a74599920527374c3985edbb0a", "filename": "src/test/ui/rfc-2091-track-caller/tracked-fn-ptr.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-fn-ptr.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -14,6 +14,49 @@ fn tracked() {\n     assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n }\n \n+trait Trait {\n+    fn trait_tracked();\n+}\n+\n+impl Trait for () {\n+    #[track_caller]\n+    fn trait_tracked() {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+trait TrackedTrait {\n+    #[track_caller]\n+    fn trait_tracked_default() {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n+impl TrackedTrait for () {}\n+\n+trait TraitBlanketTracked {\n+    #[track_caller]\n+    fn tracked_blanket();\n+}\n+\n+impl TraitBlanketTracked for () {\n+    fn tracked_blanket() {\n+        let expected_line = line!() - 1;\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_eq!(location.line(), expected_line, \"call shims report location as fn definition\");\n+    }\n+}\n+\n fn main() {\n     ptr_call(tracked);\n+    ptr_call(<() as Trait>::trait_tracked);\n+    ptr_call(<() as TrackedTrait>::trait_tracked_default);\n+    ptr_call(<() as TraitBlanketTracked>::tracked_blanket);\n }"}, {"sha": "0a5f92bb635e58795f6ef2f9ab0d7c5e27bbfa7e", "filename": "src/test/ui/rfc-2091-track-caller/tracked-trait-impls.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-trait-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-trait-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftracked-trait-impls.rs?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -0,0 +1,79 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+macro_rules! assert_expansion_site_is_tracked {\n+    () => {{\n+        let location = std::panic::Location::caller();\n+        assert_eq!(location.file(), file!());\n+        assert_ne!(location.line(), line!(), \"line should be outside this fn\");\n+    }}\n+}\n+\n+trait Tracked {\n+    fn local_tracked(&self);\n+\n+    #[track_caller]\n+    fn blanket_tracked(&self);\n+\n+    #[track_caller]\n+    fn default_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+impl Tracked for () {\n+    #[track_caller]\n+    fn local_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn blanket_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+impl Tracked for bool {\n+    #[track_caller]\n+    fn local_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn blanket_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn default_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+impl Tracked for u8 {\n+    #[track_caller]\n+    fn local_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    fn blanket_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+\n+    #[track_caller]\n+    fn default_tracked(&self) {\n+        assert_expansion_site_is_tracked!();\n+    }\n+}\n+\n+fn main() {\n+    ().local_tracked();\n+    ().default_tracked();\n+    ().blanket_tracked();\n+\n+    true.local_tracked();\n+    true.default_tracked();\n+    true.blanket_tracked();\n+\n+    0u8.local_tracked();\n+    0u8.default_tracked();\n+    0u8.blanket_tracked();\n+}"}, {"sha": "cd2713a5bd50c9159be1115480a242a68ab77709", "filename": "src/test/ui/traits/trait-impl-for-module.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -1,12 +1,11 @@\n error[E0573]: expected type, found module `a`\n   --> $DIR/trait-impl-for-module.rs:7:12\n    |\n-LL | / trait A {\n-LL | | }\n-   | |_- similarly named trait `A` defined here\n-LL | \n-LL |   impl A for a {\n-   |              ^ help: a trait with a similar name exists: `A`\n+LL | trait A {\n+   | ------- similarly named trait `A` defined here\n+...\n+LL | impl A for a {\n+   |            ^ help: a trait with a similar name exists: `A`\n \n error: aborting due to previous error\n "}, {"sha": "3950dc9877cd8e3eb620946a2e935b09411b94d2", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff785011be6625e32afceee3a08e5cff7470feb/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=8ff785011be6625e32afceee3a08e5cff7470feb", "patch": "@@ -35,7 +35,7 @@ error[E0576]: cannot find method or associated constant `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:22:17\n    |\n LL |     fn Y() {}\n-   |     --------- similarly named associated function `Y` defined here\n+   |     ------ similarly named associated function `Y` defined here\n ...\n LL |     <u8 as Tr>::N;\n    |                 ^ help: an associated function with a similar name exists: `Y`\n@@ -181,7 +181,7 @@ error[E0575]: expected method or associated constant, found associated type `Dr:\n   --> $DIR/ufcs-partially-resolved.rs:53:5\n    |\n LL |     fn Z() {}\n-   |     --------- similarly named associated function `Z` defined here\n+   |     ------ similarly named associated function `Z` defined here\n ...\n LL |     <u8 as Dr>::X;\n    |     ^^^^^^^^^^^^-"}]}