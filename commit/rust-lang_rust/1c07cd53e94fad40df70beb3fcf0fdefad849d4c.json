{"sha": "1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDdjZDUzZTk0ZmFkNDBkZjcwYmViM2ZjZjBmZGVmYWQ4NDlkNGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-22T09:32:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-22T09:32:12Z"}, "message": "Merge pull request #709 from RalfJung/macos-rand\n\nimplement SecRandomCopyBytes for macOS RNG", "tree": {"sha": "f748a68304a8a74fb8d6fc82656ca3f61ef0bf90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f748a68304a8a74fb8d6fc82656ca3f61ef0bf90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcvYocCRBK7hj4Ov3rIwAAdHIIAFnkWW3c6s6QqBDU8RU4/Bv3\njC/rFSjsCJr95xFS1gGg6aD2JQkjgAzpm1rrC9AWOPsOpzwk1R6brNkvrMCu36jV\ntMOta65nPfOqw7Ia6LeSwmcDy+Pzh3+vNSTSipqncGCIjr8qNr4sCy6ylhA/esWw\ns4nD48mtlSkiiyr2VkOTNeWUl5L9lPuQ+FfqAyLG3qR2vpMtBAGhxXyF3sepNbt9\nwXQYannceAS5ZbYQtB1QiRi70GRl5ML1i0ZLD40vJdyTvd8H6CXfKDdarS7cawGo\nEcZhliuT/+KR6o+J8oaBc49BhLA9O7WsfowamJQAz+TdlsbTzVc8AusZr2AUx08=\n=JXQ9\n-----END PGP SIGNATURE-----\n", "payload": "tree f748a68304a8a74fb8d6fc82656ca3f61ef0bf90\nparent 298bd1f9ce22d9a73565904d7fc3e3c1d2c76a97\nparent b7314369e28560aa3358e5df221007ec304e023e\nauthor Ralf Jung <post@ralfj.de> 1555925532 +0200\ncommitter GitHub <noreply@github.com> 1555925532 +0200\n\nMerge pull request #709 from RalfJung/macos-rand\n\nimplement SecRandomCopyBytes for macOS RNG"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "html_url": "https://github.com/rust-lang/rust/commit/1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298bd1f9ce22d9a73565904d7fc3e3c1d2c76a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/298bd1f9ce22d9a73565904d7fc3e3c1d2c76a97", "html_url": "https://github.com/rust-lang/rust/commit/298bd1f9ce22d9a73565904d7fc3e3c1d2c76a97"}, {"sha": "b7314369e28560aa3358e5df221007ec304e023e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7314369e28560aa3358e5df221007ec304e023e", "html_url": "https://github.com/rust-lang/rust/commit/b7314369e28560aa3358e5df221007ec304e023e"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "7a684bdaa78f4201a1d3698235ead334e1053bee", "filename": "src/fn_call.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "patch": "@@ -298,19 +298,14 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                 match this.read_scalar(args[0])?.to_usize(this)? {\n                     id if id == sys_getrandom => {\n-                        let ptr = this.read_scalar(args[1])?.to_ptr()?;\n+                        let ptr = this.read_scalar(args[1])?.not_undef()?;\n                         let len = this.read_scalar(args[2])?.to_usize(this)?;\n \n                         // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n                         // neither of which have any effect on our current PRNG\n                         let _flags = this.read_scalar(args[3])?.to_i32()?;\n \n-                        if len > 0 {\n-                            let data = gen_random(this, len as usize)?;\n-                            this.memory_mut().get_mut(ptr.alloc_id)?\n-                                        .write_bytes(tcx, ptr, &data)?;\n-                        }\n-\n+                        gen_random(this, len as usize, ptr)?;\n                         this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n                     }\n                     id => {\n@@ -712,6 +707,12 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             \"_NSGetArgv\" => {\n                 this.write_scalar(Scalar::Ptr(this.machine.argv.unwrap()), dest)?;\n             },\n+            \"SecRandomCopyBytes\" => {\n+                let len = this.read_scalar(args[1])?.to_usize(this)?;\n+                let ptr = this.read_scalar(args[2])?.not_undef()?;\n+                gen_random(this, len as usize, ptr)?;\n+                this.write_null(dest)?;\n+            }\n \n             // Windows API stubs.\n             // HANDLE = isize\n@@ -866,15 +867,9 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             }\n             // The actual name of 'RtlGenRandom'\n             \"SystemFunction036\" => {\n-                let ptr = this.read_scalar(args[0])?.to_ptr()?;\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let len = this.read_scalar(args[1])?.to_u32()?;\n-\n-                if len > 0 {\n-                    let data = gen_random(this, len as usize)?;\n-                    this.memory_mut().get_mut(ptr.alloc_id)?\n-                        .write_bytes(tcx, ptr, &data)?;\n-                }\n-\n+                gen_random(this, len as usize, ptr)?;\n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }\n \n@@ -915,21 +910,30 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n fn gen_random<'a, 'mir, 'tcx>(\n     this: &mut MiriEvalContext<'a, 'mir, 'tcx>,\n     len: usize,\n-) -> Result<Vec<u8>, EvalError<'tcx>>  {\n+    dest: Scalar<Tag>,\n+) -> EvalResult<'tcx>  {\n+    if len == 0 {\n+        // Nothing to do\n+        return Ok(());\n+    }\n+    let ptr = dest.to_ptr()?;\n \n-    match &mut this.machine.rng {\n+    let data = match &mut this.machine.rng {\n         Some(rng) => {\n             let mut data = vec![0; len];\n             rng.fill_bytes(&mut data);\n-            Ok(data)\n+            data\n         }\n         None => {\n-            err!(Unimplemented(\n+            return err!(Unimplemented(\n                 \"miri does not support gathering system entropy in deterministic mode!\n                 Use '-Zmiri-seed=<seed>' to enable random number generation.\n                 WARNING: Miri does *not* generate cryptographically secure entropy -\n                 do not use Miri to run any program that needs secure random number generation\".to_owned(),\n-            ))\n+            ));\n         }\n-    }\n+    };\n+    let tcx = &{this.tcx.tcx};\n+    this.memory_mut().get_mut(ptr.alloc_id)?\n+        .write_bytes(tcx, ptr, &data)\n }"}, {"sha": "33664737709c0771306695a3d4d4fd00e3e8a385", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "patch": "@@ -61,7 +61,10 @@ def test_cargo_miri_test():\n         \"test.stdout.ref2\", \"test.stderr.ref\"\n     )\n \n+os.chdir(os.path.dirname(os.path.realpath(__file__)))\n+\n test_cargo_miri_run()\n test_cargo_miri_test()\n+\n print(\"TEST SUCCESSFUL!\")\n sys.exit(0)"}, {"sha": "ce15824f94a225dada3bf6b3e45abdac62083ee1", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "patch": "@@ -1,7 +1,3 @@\n-#![allow(unused_imports)] // FIXME for macOS\n-\n-extern crate rand;\n-\n use rand::{SeedableRng, FromEntropy, Rng, rngs::SmallRng};\n \n #[test]\n@@ -21,17 +17,13 @@ fn fixed_rng() {\n \n #[test]\n fn entropy_rng() {\n-    #[cfg(not(target_os=\"macos\"))] // FIXME entropy does not work on macOS\n-    // (Not disabling the entire test as that would change the output.)\n-    {\n-        // Use this opportunity to test querying the RNG (needs an external crate, hence tested here and not in the compiletest suite)\n-        let mut rng = SmallRng::from_entropy();\n-        let _val = rng.gen::<i32>();\n+    // Use this opportunity to test querying the RNG (needs an external crate, hence tested here and not in the compiletest suite)\n+    let mut rng = SmallRng::from_entropy();\n+    let _val = rng.gen::<i32>();\n \n-        // Also try per-thread RNG.\n-        let mut rng = rand::thread_rng();\n-        let _val = rng.gen::<i32>();\n-    }\n+    // Also try per-thread RNG.\n+    let mut rng = rand::thread_rng();\n+    let _val = rng.gen::<i32>();\n }\n \n // A test that won't work on miri"}, {"sha": "84f9c408dcba5c84cef754aa320a1ac513d3f72c", "filename": "travis.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1c07cd53e94fad40df70beb3fcf0fdefad849d4c/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "patch": "@@ -24,7 +24,7 @@ echo\n # Test\n function run_tests {\n   cargo test --release --all-features\n-  (cd test-cargo-miri && ./run-test.py)\n+  test-cargo-miri/run-test.py\n }\n \n echo \"Test host architecture\""}]}