{"sha": "a893117f38d8d6343d381e06b8ed6653f0435848", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OTMxMTdmMzhkOGQ2MzQzZDM4MWUwNmI4ZWQ2NjUzZjA0MzU4NDg=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-14T19:43:03Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-20T10:42:27Z"}, "message": "add a bunch of debug prints", "tree": {"sha": "20b2b841558c2eaf03cad2725ee7c0fbdf280e8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b2b841558c2eaf03cad2725ee7c0fbdf280e8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a893117f38d8d6343d381e06b8ed6653f0435848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a893117f38d8d6343d381e06b8ed6653f0435848", "html_url": "https://github.com/rust-lang/rust/commit/a893117f38d8d6343d381e06b8ed6653f0435848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a893117f38d8d6343d381e06b8ed6653f0435848/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50fa16f5b5f8d88a032ecf71215c2f5303a8cbb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/50fa16f5b5f8d88a032ecf71215c2f5303a8cbb9", "html_url": "https://github.com/rust-lang/rust/commit/50fa16f5b5f8d88a032ecf71215c2f5303a8cbb9"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "44d23b0555a766799a2483e9364810ff420a6763", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a893117f38d8d6343d381e06b8ed6653f0435848/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a893117f38d8d6343d381e06b8ed6653f0435848/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a893117f38d8d6343d381e06b8ed6653f0435848", "patch": "@@ -527,6 +527,7 @@ pub fn record_extern_trait(cx: &DocContext, did: DefId) {\n \n     cx.active_extern_traits.borrow_mut().push(did);\n \n+    debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);\n \n     cx.external_traits.borrow_mut().insert(did, trait_);"}, {"sha": "22fcbf1728d8da315170977775900fef5088b6b3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a893117f38d8d6343d381e06b8ed6653f0435848/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a893117f38d8d6343d381e06b8ed6653f0435848/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a893117f38d8d6343d381e06b8ed6653f0435848", "patch": "@@ -1223,6 +1223,10 @@ impl<'a> SourceCollector<'a> {\n \n impl DocFolder for Cache {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n+        if item.def_id.is_local() {\n+            debug!(\"folding item \\\"{:?}\\\", a {}\", item.name, item.type_());\n+        }\n+\n         // If this is a stripped module,\n         // we don't want it or its children in the search index.\n         let orig_stripped_mod = match item.inner {"}, {"sha": "95c613cc14d11fc75146b6de7c98be82105ec8e1", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a893117f38d8d6343d381e06b8ed6653f0435848/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a893117f38d8d6343d381e06b8ed6653f0435848/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=a893117f38d8d6343d381e06b8ed6653f0435848", "patch": "@@ -195,6 +195,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n                 // We need to recurse into stripped modules to strip things\n                 // like impl methods but when doing so we must not add any\n                 // items to the `retained` set.\n+                debug!(\"Stripper: recursing into stripped {} {:?}\", i.type_(), i.name);\n                 let old = mem::replace(&mut self.update_retained, false);\n                 let ret = self.fold_item_recur(i);\n                 self.update_retained = old;\n@@ -218,6 +219,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             | clean::ForeignTypeItem => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {\n+                        debug!(\"Stripper: stripping {} {:?}\", i.type_(), i.name);\n                         return None;\n                     }\n                 }\n@@ -231,6 +233,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n \n             clean::ModuleItem(..) => {\n                 if i.def_id.is_local() && i.visibility != Some(clean::Public) {\n+                    debug!(\"Stripper: stripping module {:?}\", i.name);\n                     let old = mem::replace(&mut self.update_retained, false);\n                     let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n                     self.update_retained = old;\n@@ -302,18 +305,22 @@ impl<'a> fold::DocFolder for ImplStripper<'a> {\n             }\n             if let Some(did) = imp.for_.def_id() {\n                 if did.is_local() && !imp.for_.is_generic() && !self.retained.contains(&did) {\n+                    debug!(\"ImplStripper: impl item for stripped type; removing\");\n                     return None;\n                 }\n             }\n             if let Some(did) = imp.trait_.def_id() {\n                 if did.is_local() && !self.retained.contains(&did) {\n+                    debug!(\"ImplStripper: impl item for stripped trait; removing\");\n                     return None;\n                 }\n             }\n             if let Some(generics) = imp.trait_.as_ref().and_then(|t| t.generics()) {\n                 for typaram in generics {\n                     if let Some(did) = typaram.def_id() {\n                         if did.is_local() && !self.retained.contains(&did) {\n+                            debug!(\"ImplStripper: stripped item in trait's generics; \\\n+                                   removing impl\");\n                             return None;\n                         }\n                     }"}]}