{"sha": "3679821eea94f30f2582ea7bca7569dad3ca31be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Nzk4MjFlZWE5NGYzMGYyNTgyZWE3YmNhNzU2OWRhZDNjYTMxYmU=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-12T03:11:14Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-12T14:16:01Z"}, "message": "add completion relevance score", "tree": {"sha": "99edbd24d1d5da54af0e3f177cb18719b7880bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99edbd24d1d5da54af0e3f177cb18719b7880bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3679821eea94f30f2582ea7bca7569dad3ca31be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3679821eea94f30f2582ea7bca7569dad3ca31be", "html_url": "https://github.com/rust-lang/rust/commit/3679821eea94f30f2582ea7bca7569dad3ca31be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3679821eea94f30f2582ea7bca7569dad3ca31be/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e9530fd095317563532c20f13959619515c9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e9530fd095317563532c20f13959619515c9b2", "html_url": "https://github.com/rust-lang/rust/commit/c0e9530fd095317563532c20f13959619515c9b2"}], "stats": {"total": 119, "additions": 82, "deletions": 37}, "files": [{"sha": "16302eb2fb6e847ae6655deb301062a0ca3e04cc", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=3679821eea94f30f2582ea7bca7569dad3ca31be", "patch": "@@ -87,8 +87,8 @@ pub use crate::{\n pub use hir::{Documentation, Semantics};\n pub use ide_assists::{Assist, AssistConfig, AssistId, AssistKind};\n pub use ide_completion::{\n-    CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, ImportEdit,\n-    InsertTextFormat,\n+    CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, CompletionScore,\n+    ImportEdit, InsertTextFormat,\n };\n pub use ide_db::{\n     base_db::{"}, {"sha": "9a4dc915c96193b6e6837bfc3e3422de4ae5b8ae", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=3679821eea94f30f2582ea7bca7569dad3ca31be", "patch": "@@ -70,7 +70,7 @@ pub struct CompletionItem {\n     /// Note that Relevance ignores fuzzy match score. We compute Relevance for\n     /// all possible items, and then separately build an ordered completion list\n     /// based on relevance and fuzzy matching with the already typed identifier.\n-    relevance: Relevance,\n+    relevance: CompletionRelevance,\n \n     /// Indicates that a reference or mutable reference to this variable is a\n     /// possible match.\n@@ -107,9 +107,11 @@ impl fmt::Debug for CompletionItem {\n         if self.deprecated {\n             s.field(\"deprecated\", &true);\n         }\n-        if self.relevance.is_relevant() {\n+\n+        if self.relevance != CompletionRelevance::default() {\n             s.field(\"relevance\", &self.relevance);\n         }\n+\n         if let Some(mutability) = &self.ref_match {\n             s.field(\"ref_match\", &format!(\"&{}\", mutability.as_keyword_for_ref()));\n         }\n@@ -129,7 +131,7 @@ pub enum CompletionScore {\n }\n \n #[derive(Debug, Clone, Copy, Ord, PartialOrd, Eq, PartialEq, Default)]\n-pub struct Relevance {\n+pub struct CompletionRelevance {\n     /// This is set in cases like these:\n     ///\n     /// ```\n@@ -152,9 +154,34 @@ pub struct Relevance {\n     pub exact_type_match: bool,\n }\n \n-impl Relevance {\n+impl CompletionRelevance {\n+    /// Provides a relevance score. Higher values are more relevant.\n+    ///\n+    /// The absolute value of the relevance score is not meaningful, for\n+    /// example a value of 0 doesn't mean \"not relevant\", rather\n+    /// it means \"least relevant\". The score value should only be used\n+    /// for relative ordering.\n+    ///\n+    /// See is_relevant if you need to make some judgement about score\n+    /// in an absolute sense.\n+    pub fn score(&self) -> u8 {\n+        let mut score = 0;\n+\n+        if self.exact_name_match {\n+            score += 1;\n+        }\n+        if self.exact_type_match {\n+            score += 1;\n+        }\n+\n+        score\n+    }\n+\n+    /// Returns true when the score for this threshold is above\n+    /// some threshold such that we think it is especially likely\n+    /// to be relevant.\n     pub fn is_relevant(&self) -> bool {\n-        self != &Relevance::default()\n+        self.score() > 0\n     }\n }\n \n@@ -249,7 +276,7 @@ impl CompletionItem {\n             text_edit: None,\n             deprecated: false,\n             trigger_call_info: None,\n-            relevance: Relevance::default(),\n+            relevance: CompletionRelevance::default(),\n             ref_match: None,\n             import_to_add: None,\n         }\n@@ -292,16 +319,22 @@ impl CompletionItem {\n         self.deprecated\n     }\n \n-    pub fn relevance(&self) -> Relevance {\n+    pub fn relevance(&self) -> CompletionRelevance {\n         self.relevance\n     }\n \n     pub fn trigger_call_info(&self) -> bool {\n         self.trigger_call_info\n     }\n \n-    pub fn ref_match(&self) -> Option<Mutability> {\n-        self.ref_match\n+    pub fn ref_match(&self) -> Option<(Mutability, CompletionRelevance)> {\n+        // Relevance of the ref match should be the same as the original\n+        // match, but with exact type match set because self.ref_match\n+        // is only set if there is an exact type match.\n+        let mut relevance = self.relevance;\n+        relevance.exact_type_match = true;\n+\n+        self.ref_match.map(|mutability| (mutability, relevance))\n     }\n \n     pub fn import_to_add(&self) -> Option<&ImportEdit> {\n@@ -349,7 +382,7 @@ pub(crate) struct Builder {\n     text_edit: Option<TextEdit>,\n     deprecated: bool,\n     trigger_call_info: Option<bool>,\n-    relevance: Relevance,\n+    relevance: CompletionRelevance,\n     ref_match: Option<Mutability>,\n }\n \n@@ -457,7 +490,7 @@ impl Builder {\n         self.deprecated = deprecated;\n         self\n     }\n-    pub(crate) fn set_relevance(&mut self, relevance: Relevance) -> &mut Builder {\n+    pub(crate) fn set_relevance(&mut self, relevance: CompletionRelevance) -> &mut Builder {\n         self.relevance = relevance;\n         self\n     }"}, {"sha": "21e489755ad1b74c09521527918749cdf675665c", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=3679821eea94f30f2582ea7bca7569dad3ca31be", "patch": "@@ -24,8 +24,8 @@ use crate::{completions::Completions, context::CompletionContext, item::Completi\n pub use crate::{\n     config::CompletionConfig,\n     item::{\n-        CompletionItem, CompletionItemKind, CompletionScore, ImportEdit, InsertTextFormat,\n-        Relevance,\n+        CompletionItem, CompletionItemKind, CompletionRelevance, CompletionScore, ImportEdit,\n+        InsertTextFormat,\n     },\n };\n "}, {"sha": "db31896e53228fe3d6b8b61870de36580f20e54c", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=3679821eea94f30f2582ea7bca7569dad3ca31be", "patch": "@@ -20,7 +20,7 @@ use ide_db::{\n use syntax::TextRange;\n \n use crate::{\n-    item::{ImportEdit, Relevance},\n+    item::{CompletionRelevance, ImportEdit},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n };\n \n@@ -322,9 +322,9 @@ impl<'a> Render<'a> {\n     }\n }\n \n-fn compute_relevance(ctx: &RenderContext, ty: &Type, name: &str) -> Option<Relevance> {\n+fn compute_relevance(ctx: &RenderContext, ty: &Type, name: &str) -> Option<CompletionRelevance> {\n     let (expected_name, expected_type) = ctx.expected_name_and_type()?;\n-    let mut res = Relevance::default();\n+    let mut res = CompletionRelevance::default();\n     res.exact_type_match = ty == &expected_type;\n     res.exact_name_match = name == &expected_name;\n     Some(res)\n@@ -338,7 +338,7 @@ mod tests {\n \n     use crate::{\n         test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n-        CompletionKind, Relevance,\n+        CompletionKind, CompletionRelevance,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n@@ -347,12 +347,14 @@ mod tests {\n     }\n \n     fn check_relevance(ra_fixture: &str, expect: Expect) {\n-        fn display_relevance(relevance: Relevance) -> &'static str {\n+        fn display_relevance(relevance: CompletionRelevance) -> &'static str {\n             match relevance {\n-                Relevance { exact_type_match: true, exact_name_match: true } => \"[type+name]\",\n-                Relevance { exact_type_match: true, exact_name_match: false } => \"[type]\",\n-                Relevance { exact_type_match: false, exact_name_match: true } => \"[name]\",\n-                Relevance { exact_type_match: false, exact_name_match: false } => \"[]\",\n+                CompletionRelevance { exact_type_match: true, exact_name_match: true } => {\n+                    \"[type+name]\"\n+                }\n+                CompletionRelevance { exact_type_match: true, exact_name_match: false } => \"[type]\",\n+                CompletionRelevance { exact_type_match: false, exact_name_match: true } => \"[name]\",\n+                CompletionRelevance { exact_type_match: false, exact_name_match: false } => \"[]\",\n             }\n         }\n \n@@ -975,7 +977,7 @@ fn main() {\n                             Local,\n                         ),\n                         detail: \"S\",\n-                        relevance: Relevance {\n+                        relevance: CompletionRelevance {\n                             exact_name_match: true,\n                             exact_type_match: false,\n                         },"}, {"sha": "a467bc685ccce0836c89f1227878721458547732", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3679821eea94f30f2582ea7bca7569dad3ca31be/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3679821eea94f30f2582ea7bca7569dad3ca31be", "patch": "@@ -6,9 +6,10 @@ use std::{\n \n use ide::{\n     Annotation, AnnotationKind, Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind,\n-    Documentation, FileId, FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HlMod, HlPunct,\n-    HlRange, HlTag, Indel, InlayHint, InlayKind, InsertTextFormat, Markup, NavigationTarget,\n-    ReferenceAccess, RenameError, Runnable, Severity, SourceChange, TextEdit, TextRange, TextSize,\n+    CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit, Fold, FoldKind,\n+    Highlight, HlMod, HlPunct, HlRange, HlTag, Indel, InlayHint, InlayKind, InsertTextFormat,\n+    Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable, Severity, SourceChange,\n+    TextEdit, TextRange, TextSize,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n@@ -213,12 +214,22 @@ pub(crate) fn completion_item(\n         ..Default::default()\n     };\n \n-    if item.relevance().is_relevant() {\n-        lsp_item.preselect = Some(true);\n-        // HACK: sort preselect items first\n-        lsp_item.sort_text = Some(format!(\" {}\", item.label()));\n+    fn set_score(res: &mut lsp_types::CompletionItem, relevance: CompletionRelevance) {\n+        if relevance.is_relevant() {\n+            res.preselect = Some(true);\n+        }\n+        // The relevance needs to be inverted to come up with a sort score\n+        // because the client will sort ascending.\n+        let sort_score = relevance.score() ^ 0xFF;\n+        // Zero pad the string to ensure values are sorted numerically\n+        // even though the client is sorting alphabetically. Three\n+        // characters is enough to fit the largest u8, which is the\n+        // type of the relevance score.\n+        res.sort_text = Some(format!(\"{:03}\", sort_score));\n     }\n \n+    set_score(&mut lsp_item, item.relevance());\n+\n     if item.deprecated() {\n         lsp_item.tags = Some(vec![lsp_types::CompletionItemTag::Deprecated])\n     }\n@@ -228,10 +239,9 @@ pub(crate) fn completion_item(\n     }\n \n     let mut res = match item.ref_match() {\n-        Some(mutability) => {\n+        Some((mutability, relevance)) => {\n             let mut lsp_item_with_ref = lsp_item.clone();\n-            lsp_item.preselect = Some(true);\n-            lsp_item.sort_text = Some(format!(\" {}\", item.label()));\n+            set_score(&mut lsp_item_with_ref, relevance);\n             lsp_item_with_ref.label =\n                 format!(\"&{}{}\", mutability.as_keyword_for_ref(), lsp_item_with_ref.label);\n             if let Some(lsp_types::CompletionTextEdit::Edit(it)) = &mut lsp_item_with_ref.text_edit\n@@ -1107,13 +1117,13 @@ mod tests {\n                 (\n                     \"&arg\",\n                     Some(\n-                        \" arg\",\n+                        \"253\",\n                     ),\n                 ),\n                 (\n                     \"arg\",\n                     Some(\n-                        \" arg\",\n+                        \"254\",\n                     ),\n                 ),\n             ]"}]}