{"sha": "76b5b27d88234d60a1609b86445b134c81b61cf2", "node_id": "C_kwDOAAsO6NoAKDc2YjViMjdkODgyMzRkNjBhMTYwOWI4NjQ0NWIxMzRjODFiNjFjZjI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-02T06:27:07Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-02T06:27:07Z"}, "message": "Use multipart suggestion for code wrapping\n\nAnother one of those \"good grief, I just submitted it and NOW I think of it\" moments.", "tree": {"sha": "14b32946600ffd68cb5331d44060457ee22aba78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b32946600ffd68cb5331d44060457ee22aba78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b5b27d88234d60a1609b86445b134c81b61cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b5b27d88234d60a1609b86445b134c81b61cf2", "html_url": "https://github.com/rust-lang/rust/commit/76b5b27d88234d60a1609b86445b134c81b61cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b5b27d88234d60a1609b86445b134c81b61cf2/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db9e4067038f3c70eb04e86b1bba5b14b172f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db9e4067038f3c70eb04e86b1bba5b14b172f47", "html_url": "https://github.com/rust-lang/rust/commit/0db9e4067038f3c70eb04e86b1bba5b14b172f47"}], "stats": {"total": 102, "additions": 50, "deletions": 52}, "files": [{"sha": "9caadef3dec7c92c371a3600fed3c9fc4eeaaadd", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=76b5b27d88234d60a1609b86445b134c81b61cf2", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                     // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n                     if let Some(Some(generics_start)) = (is_open_tag\n                         && dox[..range.end].ends_with(\">\"))\n-                        .then(|| extract_path_backwards(&dox, range.start))\n+                    .then(|| extract_path_backwards(&dox, range.start))\n                     {\n                         let generics_sp = match super::source_span_for_markdown_range(\n                             tcx,\n@@ -231,22 +231,15 @@ impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n                             Some(sp) => sp,\n                             None => item.attr_span(tcx),\n                         };\n-                        if let Ok(generics_snippet) =\n-                            tcx.sess.source_map().span_to_snippet(generics_sp)\n-                        {\n-                            // short form is chosen here because ``Vec<i32>`` would be confusing.\n-                            diag.span_suggestion_short(\n-                                generics_sp,\n-                                \"try marking as source code with `backticks`\",\n-                                format!(\"`{}`\", generics_snippet),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        } else {\n-                            diag.span_help(\n-                                generics_sp,\n-                                \"try marking as source code with `backticks`\",\n-                            );\n-                        }\n+                        // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n+                        diag.multipart_suggestion(\n+                            \"try marking as source code\",\n+                            vec![\n+                                (generics_sp.shrink_to_lo(), String::from(\"`\")),\n+                                (generics_sp.shrink_to_hi(), String::from(\"`\")),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                     diag.emit()\n                 });"}, {"sha": "c0a0de24c5263c05542464a1467834a2c86fb895", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.fixed?ref=76b5b27d88234d60a1609b86445b134c81b61cf2", "patch": "@@ -4,35 +4,29 @@\n /// This `Vec<i32>` thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `Vec<i32>`\n pub struct Generic;\n \n /// This `vec::Vec<i32>` thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `vec::Vec<i32>`\n pub struct GenericPath;\n \n /// This `i32<i32>` thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `i32<i32>`\n pub struct PathsCanContainTrailingNumbers;\n \n /// This `Vec::<i32>` thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `Vec::<i32>`\n pub struct Turbofish;\n \n /// This [link](https://rust-lang.org)`::<i32>` thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `::<i32>`\n pub struct BareTurbofish;\n \n /// This <span>`Vec::<i32>`</span> thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `Vec::<i32>`\n pub struct Nested;"}, {"sha": "0b6009b0e59c3574047aff463e452f54e18d06d8", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.rs?ref=76b5b27d88234d60a1609b86445b134c81b61cf2", "patch": "@@ -4,35 +4,29 @@\n /// This Vec<i32> thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `Vec<i32>`\n pub struct Generic;\n \n /// This vec::Vec<i32> thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `vec::Vec<i32>`\n pub struct GenericPath;\n \n /// This i32<i32> thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `i32<i32>`\n pub struct PathsCanContainTrailingNumbers;\n \n /// This Vec::<i32> thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `Vec::<i32>`\n pub struct Turbofish;\n \n /// This [link](https://rust-lang.org)::<i32> thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `::<i32>`\n pub struct BareTurbofish;\n \n /// This <span>Vec::<i32></span> thing!\n //~^ERROR unclosed HTML tag `i32`\n //~|HELP try marking as source\n-//~|SUGGESTION `Vec::<i32>`\n pub struct Nested;"}, {"sha": "df54b71264ebcb770eae2b5aed806e6140e3a6ee", "filename": "src/test/rustdoc-ui/suggestions/html-as-generics.stderr", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76b5b27d88234d60a1609b86445b134c81b61cf2/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fsuggestions%2Fhtml-as-generics.stderr?ref=76b5b27d88234d60a1609b86445b134c81b61cf2", "patch": "@@ -2,55 +2,72 @@ error: unclosed HTML tag `i32`\n   --> $DIR/html-as-generics.rs:4:13\n    |\n LL | /// This Vec<i32> thing!\n-   |          ---^^^^^\n-   |          |\n-   |          help: try marking as source code with `backticks`\n+   |             ^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/html-as-generics.rs:2:9\n    |\n LL | #![deny(rustdoc::invalid_html_tags)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try marking as source code\n+   |\n+LL | /// This `Vec<i32>` thing!\n+   |          +        +\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics.rs:10:18\n+  --> $DIR/html-as-generics.rs:9:18\n    |\n LL | /// This vec::Vec<i32> thing!\n-   |          --------^^^^^\n-   |          |\n-   |          help: try marking as source code with `backticks`\n+   |                  ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This `vec::Vec<i32>` thing!\n+   |          +             +\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics.rs:16:13\n+  --> $DIR/html-as-generics.rs:14:13\n    |\n LL | /// This i32<i32> thing!\n-   |          ---^^^^^\n-   |          |\n-   |          help: try marking as source code with `backticks`\n+   |             ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This `i32<i32>` thing!\n+   |          +        +\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics.rs:22:15\n+  --> $DIR/html-as-generics.rs:19:15\n    |\n LL | /// This Vec::<i32> thing!\n-   |          -----^^^^^\n-   |          |\n-   |          help: try marking as source code with `backticks`\n+   |               ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This `Vec::<i32>` thing!\n+   |          +          +\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics.rs:28:41\n+  --> $DIR/html-as-generics.rs:24:41\n    |\n LL | /// This [link](https://rust-lang.org)::<i32> thing!\n-   |                                       --^^^^^\n-   |                                       |\n-   |                                       help: try marking as source code with `backticks`\n+   |                                         ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This [link](https://rust-lang.org)`::<i32>` thing!\n+   |                                       +       +\n \n error: unclosed HTML tag `i32`\n-  --> $DIR/html-as-generics.rs:34:21\n+  --> $DIR/html-as-generics.rs:29:21\n    |\n LL | /// This <span>Vec::<i32></span> thing!\n-   |                -----^^^^^\n-   |                |\n-   |                help: try marking as source code with `backticks`\n+   |                     ^^^^^\n+   |\n+help: try marking as source code\n+   |\n+LL | /// This <span>`Vec::<i32>`</span> thing!\n+   |                +          +\n \n error: aborting due to 6 previous errors\n "}]}