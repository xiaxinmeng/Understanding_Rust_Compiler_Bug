{"sha": "8b4601e08eb0ac54f4c8c12b4dd762b89248abca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNDYwMWUwOGViMGFjNTRmNGM4YzEyYjRkZDc2MmI4OTI0OGFiY2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T03:07:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T23:21:55Z"}, "message": "Figure out the relative path from output to each crate", "tree": {"sha": "795dc8cfa4e45590381074894fc998da5c2a7af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795dc8cfa4e45590381074894fc998da5c2a7af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4601e08eb0ac54f4c8c12b4dd762b89248abca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4601e08eb0ac54f4c8c12b4dd762b89248abca", "html_url": "https://github.com/rust-lang/rust/commit/8b4601e08eb0ac54f4c8c12b4dd762b89248abca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4601e08eb0ac54f4c8c12b4dd762b89248abca/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "html_url": "https://github.com/rust-lang/rust/commit/19ba9b4d8d0fec474acbbd472e17ef0351c20df2"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "214be55f4e0e5ed224eef3b32637e2b12e12163c", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 62, "deletions": 15, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8b4601e08eb0ac54f4c8c12b4dd762b89248abca/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4601e08eb0ac54f4c8c12b4dd762b89248abca/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=8b4601e08eb0ac54f4c8c12b4dd762b89248abca", "patch": "@@ -1,10 +1,13 @@\n import std::os;\n import std::fs;\n+import std::os_fs;\n import std::vec;\n+import std::map;\n+import std::str;\n+import std::uint;\n import metadata::cstore;\n import driver::session;\n import util::filesearch;\n-import std::map;\n \n export get_rpath_flags, test;\n \n@@ -70,18 +73,44 @@ fn get_rpaths_relative_to_output(cwd: fs::path,\n     vec::map(bind get_rpath_relative_to_output(cwd, output, _), libs)\n }\n \n-fn get_rpath_relative_to_output(_cwd: fs::path,\n-                                _output: fs::path,\n-                                _lib: fs::path) -> str {\n-    fail;\n-    /*get_relative_to(\n+fn get_rpath_relative_to_output(cwd: fs::path,\n+                                output: fs::path,\n+                                lib: fs::path) -> str {\n+    \"$ORIGIN\" + fs::path_sep() + get_relative_to(\n         get_absolute(cwd, output),\n-        get_absolute(cwd, lib))*/\n+        get_absolute(cwd, lib))\n }\n \n // Find the relative path from one file to another\n-fn get_relative_to(_abs1: fs::path, _abs2: fs::path) -> fs::path {\n-    fail;\n+fn get_relative_to(abs1: fs::path, abs2: fs::path) -> fs::path {\n+    assert fs::path_is_absolute(abs1);\n+    assert fs::path_is_absolute(abs2);\n+    let normal1 = fs::normalize(abs1);\n+    let normal2 = fs::normalize(abs2);\n+    let split1 = str::split(normal1, os_fs::path_sep as u8);\n+    let split2 = str::split(normal2, os_fs::path_sep as u8);\n+    let len1 = vec::len(split1);\n+    let len2 = vec::len(split2);\n+    assert len1 > 0u;\n+    assert len2 > 0u;\n+\n+    let max_common_path = uint::min(len1, len2) - 1u;\n+    let start_idx = 0u;\n+    while start_idx < max_common_path\n+        && split1[start_idx] == split2[start_idx] {\n+        start_idx += 1u;\n+    }\n+\n+    let path = [];\n+\n+    for each _ in uint::range(start_idx, len1 - 1u) {\n+        path += [\"..\"];\n+    }\n+\n+    path += vec::slice(split2, start_idx, len2 - 1u);\n+\n+    check vec::is_not_empty(path);\n+    ret fs::connect_many(path);\n }\n \n fn get_absolute_rpaths(cwd: fs::path, libs: [fs::path]) -> [str] {\n@@ -159,7 +188,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_relative_to1() {\n         let p1 = \"/usr/bin/rustc\";\n         let p2 = \"/usr/lib/mylib\";\n@@ -168,7 +196,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_relative_to2() {\n         let p1 = \"/usr/bin/rustc\";\n         let p2 = \"/usr/bin/../lib/mylib\";\n@@ -177,7 +204,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_relative_to3() {\n         let p1 = \"/usr/bin/whatever/rustc\";\n         let p2 = \"/usr/lib/whatever/mylib\";\n@@ -186,7 +212,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_relative_to4() {\n         let p1 = \"/usr/bin/whatever/../rustc\";\n         let p2 = \"/usr/lib/whatever/mylib\";\n@@ -195,11 +220,33 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore]\n     fn test_relative_to5() {\n         let p1 = \"/usr/bin/whatever/../rustc\";\n         let p2 = \"/usr/lib/whatever/../mylib\";\n         let res = get_relative_to(p1, p2);\n-        assert res == \"../lib/whatever\";\n+        assert res == \"../lib\";\n+    }\n+\n+    #[test]\n+    fn test_relative_to6() {\n+        let p1 = \"/1\";\n+        let p2 = \"/2/3\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \"2\";\n+    }\n+\n+    #[test]\n+    fn test_relative_to7() {\n+        let p1 = \"/1/2\";\n+        let p2 = \"/3\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \"..\";\n+    }\n+\n+    #[test]\n+    fn test_rpath_relative() {\n+        let res = get_rpath_relative_to_output(\n+            \"/usr\", \"bin/rustc\", \"lib/libstd.so\");\n+        assert res == \"$ORIGIN/../lib\";\n     }\n }"}]}