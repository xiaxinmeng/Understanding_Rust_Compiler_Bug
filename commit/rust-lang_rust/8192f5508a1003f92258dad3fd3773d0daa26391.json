{"sha": "8192f5508a1003f92258dad3fd3773d0daa26391", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOTJmNTUwOGExMDAzZjkyMjU4ZGFkM2ZkMzc3M2QwZGFhMjYzOTE=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-07T17:42:11Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-07T18:39:50Z"}, "message": "Clean up formatting in macros module", "tree": {"sha": "f078f2171faa000479cc69faef6c0aec19109bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f078f2171faa000479cc69faef6c0aec19109bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8192f5508a1003f92258dad3fd3773d0daa26391", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8192f5508a1003f92258dad3fd3773d0daa26391", "html_url": "https://github.com/rust-lang/rust/commit/8192f5508a1003f92258dad3fd3773d0daa26391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8192f5508a1003f92258dad3fd3773d0daa26391/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e55cae78350c4d58508afeeec99373254e33336", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e55cae78350c4d58508afeeec99373254e33336", "html_url": "https://github.com/rust-lang/rust/commit/1e55cae78350c4d58508afeeec99373254e33336"}], "stats": {"total": 132, "additions": 74, "deletions": 58}, "files": [{"sha": "be1fdc4594d053bc617b52be3177a1bcdb7f1466", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 74, "deletions": 58, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/8192f5508a1003f92258dad3fd3773d0daa26391/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8192f5508a1003f92258dad3fd3773d0daa26391/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=8192f5508a1003f92258dad3fd3773d0daa26391", "patch": "@@ -20,23 +20,33 @@ macro_rules! log(\n         }\n     })\n )\n+\n #[macro_export]\n-macro_rules! error( ($($arg:tt)*) => (log!(1u32, $($arg)*)) )\n+macro_rules! error(\n+    ($($arg:tt)*) => (log!(1u32, $($arg)*))\n+)\n+\n #[macro_export]\n-macro_rules! warn ( ($($arg:tt)*) => (log!(2u32, $($arg)*)) )\n+macro_rules! warn(\n+    ($($arg:tt)*) => (log!(2u32, $($arg)*))\n+)\n+\n #[macro_export]\n-macro_rules! info ( ($($arg:tt)*) => (log!(3u32, $($arg)*)) )\n+macro_rules! info(\n+    ($($arg:tt)*) => (log!(3u32, $($arg)*))\n+)\n+\n #[macro_export]\n-macro_rules! debug( ($($arg:tt)*) => (\n-    if cfg!(not(ndebug)) { log!(4u32, $($arg)*) }\n-))\n+macro_rules! debug(\n+    ($($arg:tt)*) => (if cfg!(not(ndebug)) { log!(4u32, $($arg)*) })\n+)\n \n #[macro_export]\n macro_rules! log_enabled(\n-    ($lvl:expr) => ( {\n+    ($lvl:expr) => ({\n         let lvl = $lvl;\n         lvl <= __log_level() && (lvl != 4 || cfg!(not(ndebug)))\n-    } )\n+    })\n )\n \n #[macro_export]\n@@ -47,54 +57,50 @@ macro_rules! fail(\n     ($msg:expr) => (\n         ::std::rt::begin_unwind($msg, file!(), line!())\n     );\n-    ($fmt:expr, $($arg:tt)*) => (\n-        {\n-            // a closure can't have return type !, so we need a full\n-            // function to pass to format_args!, *and* we need the\n-            // file and line numbers right here; so an inner bare fn\n-            // is our only choice.\n-            #[inline]\n-            fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-                ::std::rt::begin_unwind_fmt(fmt, file!(), line!())\n-            }\n-            format_args!(run_fmt, $fmt, $($arg)*)\n+    ($fmt:expr, $($arg:tt)*) => ({\n+        // a closure can't have return type !, so we need a full\n+        // function to pass to format_args!, *and* we need the\n+        // file and line numbers right here; so an inner bare fn\n+        // is our only choice.\n+        #[inline]\n+        fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n+            ::std::rt::begin_unwind_fmt(fmt, file!(), line!())\n         }\n-        )\n+        format_args!(run_fmt, $fmt, $($arg)*)\n+    });\n )\n \n #[macro_export]\n macro_rules! assert(\n-    ($cond:expr) => {\n+    ($cond:expr) => (\n         if !$cond {\n             fail!(\"assertion failed: {:s}\", stringify!($cond))\n         }\n-    };\n-    ($cond:expr, $msg:expr) => {\n+    );\n+    ($cond:expr, $msg:expr) => (\n         if !$cond {\n             fail!($msg)\n         }\n-    };\n-    ($cond:expr, $( $arg:expr ),+) => {\n+    );\n+    ($cond:expr, $($arg:expr),+) => (\n         if !$cond {\n-            fail!( $($arg),+ )\n+            fail!($($arg),+)\n         }\n-    }\n+    );\n )\n \n #[macro_export]\n-macro_rules! assert_eq (\n-    ($given:expr , $expected:expr) => (\n-        {\n-            let given_val = &($given);\n-            let expected_val = &($expected);\n-            // check both directions of equality....\n-            if !((*given_val == *expected_val) &&\n-                 (*expected_val == *given_val)) {\n-                fail!(\"assertion failed: `(left == right) && (right == left)` \\\n-                       (left: `{:?}`, right: `{:?}`)\", *given_val, *expected_val)\n-            }\n+macro_rules! assert_eq(\n+    ($given:expr , $expected:expr) => ({\n+        let given_val = &($given);\n+        let expected_val = &($expected);\n+        // check both directions of equality....\n+        if !((*given_val == *expected_val) &&\n+             (*expected_val == *given_val)) {\n+            fail!(\"assertion failed: `(left == right) && (right == left)` \\\n+                   (left: `{:?}`, right: `{:?}`)\", *given_val, *expected_val)\n         }\n-    )\n+    })\n )\n \n /// A utility macro for indicating unreachable code. It will fail if\n@@ -103,7 +109,7 @@ macro_rules! assert_eq (\n ///\n /// # Example\n ///\n-/// ```rust\n+/// ~~~rust\n /// fn choose_weighted_item(v: &[Item]) -> Item {\n ///     assert!(!v.is_empty());\n ///     let mut so_far = 0u;\n@@ -117,11 +123,11 @@ macro_rules! assert_eq (\n ///     // type checker that it isn't possible to get down here\n ///     unreachable!();\n /// }\n-/// ```\n+/// ~~~\n #[macro_export]\n-macro_rules! unreachable (() => (\n-    fail!(\"internal error: entered unreachable code\");\n-))\n+macro_rules! unreachable(\n+    () => (fail!(\"internal error: entered unreachable code\"))\n+)\n \n /// A standardised placeholder for marking unfinished code. It fails with the\n /// message `\"not yet implemented\"` when executed.\n@@ -131,37 +137,47 @@ macro_rules! unimplemented(\n )\n \n #[macro_export]\n-macro_rules! format(($($arg:tt)*) => (\n-    format_args!(::std::fmt::format, $($arg)*)\n-))\n+macro_rules! format(\n+    ($($arg:tt)*) => (\n+        format_args!(::std::fmt::format, $($arg)*)\n+    )\n+)\n+\n #[macro_export]\n-macro_rules! write(($dst:expr, $($arg:tt)*) => (\n-    format_args!(|args| { ::std::fmt::write($dst, args) }, $($arg)*)\n-))\n+macro_rules! write(\n+    ($dst:expr, $($arg:tt)*) => (\n+        format_args!(|args| { ::std::fmt::write($dst, args) }, $($arg)*)\n+    )\n+)\n+\n #[macro_export]\n-macro_rules! writeln(($dst:expr, $($arg:tt)*) => (\n-    format_args!(|args| { ::std::fmt::writeln($dst, args) }, $($arg)*)\n-))\n+macro_rules! writeln(\n+    ($dst:expr, $($arg:tt)*) => (\n+        format_args!(|args| { ::std::fmt::writeln($dst, args) }, $($arg)*)\n+    )\n+)\n+\n #[macro_export]\n-macro_rules! print (\n+macro_rules! print(\n     ($($arg:tt)*) => (format_args!(::std::io::stdio::print_args, $($arg)*))\n )\n+\n #[macro_export]\n-macro_rules! println (\n+macro_rules! println(\n     ($($arg:tt)*) => (format_args!(::std::io::stdio::println_args, $($arg)*))\n )\n \n #[macro_export]\n-macro_rules! local_data_key (\n+macro_rules! local_data_key(\n     ($name:ident: $ty:ty) => (\n         static $name: ::std::local_data::Key<$ty> = &::std::local_data::Key;\n     );\n     (pub $name:ident: $ty:ty) => (\n         pub static $name: ::std::local_data::Key<$ty> = &::std::local_data::Key;\n-    )\n+    );\n )\n \n #[macro_export]\n-macro_rules! if_ok (\n+macro_rules! if_ok(\n     ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n )"}]}