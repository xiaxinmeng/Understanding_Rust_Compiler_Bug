{"sha": "94aac0af59d66bc0007149c6eb55039b8d440a54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YWFjMGFmNTlkNjZiYzAwMDcxNDljNmViNTUwMzliOGQ0NDBhNTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-12T15:39:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-12T15:39:58Z"}, "message": "Pass around BackendConfig", "tree": {"sha": "a8e388f0772e0d91b668c54bf5d0aeb3fbfffcee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e388f0772e0d91b668c54bf5d0aeb3fbfffcee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94aac0af59d66bc0007149c6eb55039b8d440a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94aac0af59d66bc0007149c6eb55039b8d440a54", "html_url": "https://github.com/rust-lang/rust/commit/94aac0af59d66bc0007149c6eb55039b8d440a54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94aac0af59d66bc0007149c6eb55039b8d440a54/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5dff34ae97007ed5a6f53b9b8c71b4d40cde997", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5dff34ae97007ed5a6f53b9b8c71b4d40cde997", "html_url": "https://github.com/rust-lang/rust/commit/c5dff34ae97007ed5a6f53b9b8c71b4d40cde997"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "4ae7b42fa664ab1ef30c937d365b087a6939d049", "filename": "src/driver/aot.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=94aac0af59d66bc0007149c6eb55039b8d440a54", "patch": "@@ -14,7 +14,7 @@ use rustc_session::config::{DebugInfo, OutputType};\n \n use cranelift_object::{ObjectModule, ObjectProduct};\n \n-use crate::prelude::*;\n+use crate::{prelude::*, BackendConfig};\n \n use crate::backend::AddConstructor;\n \n@@ -117,7 +117,10 @@ fn reuse_workproduct_for_cgu(\n     }\n }\n \n-fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodegenResult {\n+fn module_codegen(\n+    tcx: TyCtxt<'_>,\n+    (backend_config, cgu_name): (BackendConfig, rustc_span::Symbol),\n+) -> ModuleCodegenResult {\n     let cgu = tcx.codegen_unit(cgu_name);\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n \n@@ -148,9 +151,9 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n \n     let mut cx = crate::CodegenCx::new(\n         tcx,\n+        backend_config,\n         module,\n         tcx.sess.opts.debuginfo != DebugInfo::None,\n-        true,\n     );\n     super::predefine_mono_items(&mut cx, &mono_items);\n     for (mono_item, (linkage, visibility)) in mono_items {\n@@ -202,6 +205,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n \n pub(super) fn run_aot(\n     tcx: TyCtxt<'_>,\n+    backend_config: BackendConfig,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)> {\n@@ -242,7 +246,7 @@ pub(super) fn run_aot(\n                 let (ModuleCodegenResult(module, work_product), _) = tcx.dep_graph.with_task(\n                     dep_node,\n                     tcx,\n-                    cgu.name(),\n+                    (backend_config, cgu.name()),\n                     module_codegen,\n                     rustc_middle::dep_graph::hash_result,\n                 );"}, {"sha": "841b496dd1c83cbb1882fbd0884dfcd932afad08", "filename": "src/driver/jit.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=94aac0af59d66bc0007149c6eb55039b8d440a54", "patch": "@@ -10,14 +10,15 @@ use rustc_middle::mir::mono::MonoItem;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n-use crate::prelude::*;\n+use crate::{prelude::*, BackendConfig};\n use crate::{CodegenCx, CodegenMode};\n \n thread_local! {\n+    pub static BACKEND_CONFIG: RefCell<Option<BackendConfig>> = RefCell::new(None);\n     pub static CURRENT_MODULE: RefCell<Option<JITModule>> = RefCell::new(None);\n }\n \n-pub(super) fn run_jit(tcx: TyCtxt<'_>, codegen_mode: CodegenMode) -> ! {\n+pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     if !tcx.sess.opts.output_types.should_codegen() {\n         tcx.sess.fatal(\"JIT mode doesn't work with `cargo check`.\");\n     }\n@@ -46,7 +47,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, codegen_mode: CodegenMode) -> ! {\n         crate::build_isa(tcx.sess),\n         cranelift_module::default_libcall_names(),\n     );\n-    jit_builder.hotswap(matches!(codegen_mode, CodegenMode::JitLazy));\n+    jit_builder.hotswap(matches!(backend_config.codegen_mode, CodegenMode::JitLazy));\n     jit_builder.symbols(imported_symbols);\n     let mut jit_module = JITModule::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n@@ -74,14 +75,14 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, codegen_mode: CodegenMode) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    let mut cx = crate::CodegenCx::new(tcx, jit_module, false, false);\n+    let mut cx = crate::CodegenCx::new(tcx, backend_config, jit_module, false);\n \n     super::time(tcx, \"codegen mono items\", || {\n         super::predefine_mono_items(&mut cx, &mono_items);\n         for (mono_item, (linkage, visibility)) in mono_items {\n             let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n             match mono_item {\n-                MonoItem::Fn(inst) => match codegen_mode {\n+                MonoItem::Fn(inst) => match backend_config.codegen_mode {\n                     CodegenMode::Aot => unreachable!(),\n                     CodegenMode::Jit => {\n                         cx.tcx.sess.time(\"codegen fn\", || {\n@@ -137,6 +138,12 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, codegen_mode: CodegenMode) -> ! {\n     // useful as some dynamic linkers use it as a marker to jump over.\n     argv.push(std::ptr::null());\n \n+    BACKEND_CONFIG.with(|tls_backend_config| {\n+        assert!(tls_backend_config\n+            .borrow_mut()\n+            .replace(backend_config)\n+            .is_none())\n+    });\n     CURRENT_MODULE\n         .with(|current_module| assert!(current_module.borrow_mut().replace(jit_module).is_none()));\n \n@@ -154,7 +161,9 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n         CURRENT_MODULE.with(|jit_module| {\n             let mut jit_module = jit_module.borrow_mut();\n             let jit_module = jit_module.as_mut().unwrap();\n-            let mut cx = crate::CodegenCx::new(tcx, jit_module, false, false);\n+            let backend_config =\n+                BACKEND_CONFIG.with(|backend_config| backend_config.borrow().clone().unwrap());\n+            let mut cx = crate::CodegenCx::new(tcx, backend_config, jit_module, false);\n \n             let name = tcx.symbol_name(instance).name.to_string();\n             let sig = crate::abi::get_function_sig(tcx, cx.module.isa().triple(), instance);"}, {"sha": "360810cb58e18fbd6f251693580f00ee1b769a04", "filename": "src/driver/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=94aac0af59d66bc0007149c6eb55039b8d440a54", "patch": "@@ -17,12 +17,12 @@ pub(crate) fn codegen_crate(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n-    config: crate::BackendConfig,\n+    backend_config: crate::BackendConfig,\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n-    match config.codegen_mode {\n-        CodegenMode::Aot => aot::run_aot(tcx, metadata, need_metadata_module),\n+    match backend_config.codegen_mode {\n+        CodegenMode::Aot => aot::run_aot(tcx, backend_config, metadata, need_metadata_module),\n         CodegenMode::Jit | CodegenMode::JitLazy => {\n             let is_executable = tcx\n                 .sess\n@@ -33,7 +33,7 @@ pub(crate) fn codegen_crate(\n             }\n \n             #[cfg(feature = \"jit\")]\n-            let _: ! = jit::run_jit(tcx, config.codegen_mode);\n+            let _: ! = jit::run_jit(tcx, backend_config);\n \n             #[cfg(not(feature = \"jit\"))]\n             tcx.sess"}, {"sha": "119716268c11564e827a33f63fb7d23ccb06539b", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94aac0af59d66bc0007149c6eb55039b8d440a54/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=94aac0af59d66bc0007149c6eb55039b8d440a54", "patch": "@@ -142,8 +142,12 @@ struct CodegenCx<'tcx, M: Module> {\n }\n \n impl<'tcx, M: Module> CodegenCx<'tcx, M> {\n-    fn new(tcx: TyCtxt<'tcx>, module: M, debug_info: bool, pic_eh_frame: bool) -> Self {\n-        let unwind_context = UnwindContext::new(tcx, module.isa(), pic_eh_frame);\n+    fn new(tcx: TyCtxt<'tcx>, backend_config: BackendConfig, module: M, debug_info: bool) -> Self {\n+        let unwind_context = UnwindContext::new(\n+            tcx,\n+            module.isa(),\n+            matches!(backend_config.codegen_mode, CodegenMode::Aot),\n+        );\n         let debug_context = if debug_info {\n             Some(DebugContext::new(tcx, module.isa()))\n         } else {"}]}