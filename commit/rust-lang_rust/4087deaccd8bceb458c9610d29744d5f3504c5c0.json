{"sha": "4087deaccd8bceb458c9610d29744d5f3504c5c0", "node_id": "C_kwDOAAsO6NoAKDQwODdkZWFjY2Q4YmNlYjQ1OGM5NjEwZDI5NzQ0ZDVmMzUwNGM1YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T20:01:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T20:01:36Z"}, "message": "Auto merge of #110249 - matthiaskrgr:rollup-7iig04q, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #110153 (Fix typos in compiler)\n - #110165 (rustdoc: use CSS `overscroll-behavior` instead of JavaScript)\n - #110175 (Symbol cleanups)\n - #110203 (Remove `..` from return type notation)\n - #110205 (rustdoc: make settings radio and checks thicker, less contrast)\n - #110222 (Improve the error message when forwarding a matched fragment to another macro)\n - #110237 (Split out a separate feature gate for impl trait in associated types)\n - #110241 (tidy: Issue an error when UI test limits are too high)\n\nFailed merges:\n\n - #110218 (Remove `ToRegionVid`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "295fb2c9316ebed4d0790117b20ff4fc156aad93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/295fb2c9316ebed4d0790117b20ff4fc156aad93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4087deaccd8bceb458c9610d29744d5f3504c5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4087deaccd8bceb458c9610d29744d5f3504c5c0", "html_url": "https://github.com/rust-lang/rust/commit/4087deaccd8bceb458c9610d29744d5f3504c5c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4087deaccd8bceb458c9610d29744d5f3504c5c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a05ad118a5d85dd8998babbe5bcd3163303a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a05ad118a5d85dd8998babbe5bcd3163303a43", "html_url": "https://github.com/rust-lang/rust/commit/59a05ad118a5d85dd8998babbe5bcd3163303a43"}, {"sha": "484416465e0a1ff0bbb0d37505f5d08fb62d361c", "url": "https://api.github.com/repos/rust-lang/rust/commits/484416465e0a1ff0bbb0d37505f5d08fb62d361c", "html_url": "https://github.com/rust-lang/rust/commit/484416465e0a1ff0bbb0d37505f5d08fb62d361c"}], "stats": {"total": 1190, "additions": 635, "deletions": 555}, "files": [{"sha": "df1a716755b481f37fc1ef4190448a11449e4047", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -167,9 +167,6 @@ pub enum GenericArgs {\n     AngleBracketed(AngleBracketedArgs),\n     /// The `(A, B)` and `C` in `Foo(A, B) -> C`.\n     Parenthesized(ParenthesizedArgs),\n-    /// Associated return type bounds, like `T: Trait<method(..): Send>`\n-    /// which applies the `Send` bound to the return-type of `method`.\n-    ReturnTypeNotation(Span),\n }\n \n impl GenericArgs {\n@@ -181,7 +178,6 @@ impl GenericArgs {\n         match self {\n             AngleBracketed(data) => data.span,\n             Parenthesized(data) => data.span,\n-            ReturnTypeNotation(span) => *span,\n         }\n     }\n }"}, {"sha": "699946f307b50820e07ac545f50d16ca386df861", "filename": "compiler/rustc_ast/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fformat.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -94,7 +94,7 @@ impl FormatArguments {\n         }\n         if !matches!(arg.kind, FormatArgumentKind::Captured(..)) {\n             // This is an explicit argument.\n-            // Make sure that all arguments so far are explcit.\n+            // Make sure that all arguments so far are explicit.\n             assert_eq!(\n                 self.num_explicit_args,\n                 self.arguments.len(),"}, {"sha": "694d31d8f1fd4718f97448c7f209465e2475f877", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -561,7 +561,6 @@ pub fn noop_visit_generic_args<T: MutVisitor>(generic_args: &mut GenericArgs, vi\n     match generic_args {\n         GenericArgs::AngleBracketed(data) => vis.visit_angle_bracketed_parameter_data(data),\n         GenericArgs::Parenthesized(data) => vis.visit_parenthesized_parameter_data(data),\n-        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "ac9b321b71c6fe643223d74bc51fbf058ddd8eb8", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -482,7 +482,6 @@ where\n             walk_list!(visitor, visit_ty, &data.inputs);\n             walk_fn_ret_ty(visitor, &data.output);\n         }\n-        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "3e9f9b43623f8131ad4f44aaa7f398e9b64772af", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -137,7 +137,7 @@ pub struct AsyncNonMoveClosureNotSupported {\n \n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_functional_record_update_destructuring_assignment)]\n-pub struct FunctionalRecordUpdateDestructuringAssignemnt {\n+pub struct FunctionalRecordUpdateDestructuringAssignment {\n     #[primary_span]\n     #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,\n@@ -353,13 +353,7 @@ pub enum BadReturnTypeNotation {\n     #[diag(ast_lowering_bad_return_type_notation_inputs)]\n     Inputs {\n         #[primary_span]\n-        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n-        span: Span,\n-    },\n-    #[diag(ast_lowering_bad_return_type_notation_needs_dots)]\n-    NeedsDots {\n-        #[primary_span]\n-        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n+        #[suggestion(code = \"()\", applicability = \"maybe-incorrect\")]\n         span: Span,\n     },\n     #[diag(ast_lowering_bad_return_type_notation_output)]"}, {"sha": "1b1c4765bc07a705477d83079128943f2c8aebc4", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n use super::errors::{\n     AsyncGeneratorsNotSupported, AsyncNonMoveClosureNotSupported, AwaitOnlyInAsyncFnAndBlocks,\n-    BaseExpressionDoubleDot, ClosureCannotBeStatic, FunctionalRecordUpdateDestructuringAssignemnt,\n+    BaseExpressionDoubleDot, ClosureCannotBeStatic, FunctionalRecordUpdateDestructuringAssignment,\n     GeneratorTooManyParameters, InclusiveRangeWithNoEnd, NotSupportedForLifetimeBinderAsyncClosure,\n     UnderscoreExprLhsAssign,\n };\n@@ -434,7 +434,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `if let pat = val` or `if foo && let pat = val`, as we _do_ want `val` to live beyond the\n         // condition in this case.\n         //\n-        // In order to mantain the drop behavior for the non `let` parts of the condition,\n+        // In order to maintain the drop behavior for the non `let` parts of the condition,\n         // we still wrap them in terminating scopes, e.g. `if foo && let pat = val` essentially\n         // gets transformed into `if { let _t = foo; _t } && let pat = val`\n         match &cond.kind {\n@@ -1232,7 +1232,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {\n-                        self.tcx.sess.emit_err(FunctionalRecordUpdateDestructuringAssignemnt {\n+                        self.tcx.sess.emit_err(FunctionalRecordUpdateDestructuringAssignment {\n                             span: e.span,\n                         });\n                         true"}, {"sha": "f7ae96b7c4a3dbedce95f5496c66ff0c79b70a69", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -987,15 +987,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 GenericArgs::AngleBracketed(data) => {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n-                &GenericArgs::ReturnTypeNotation(span) => GenericArgsCtor {\n-                    args: Default::default(),\n-                    bindings: &[],\n-                    parenthesized: hir::GenericArgsParentheses::ReturnTypeNotation,\n-                    span,\n-                },\n                 GenericArgs::Parenthesized(data) => {\n-                    if let Some(start_char) = constraint.ident.as_str().chars().next()\n-                        && start_char.is_ascii_lowercase()\n+                    if data.inputs.is_empty() && matches!(data.output, FnRetTy::Default(..)) {\n+                        let parenthesized = if self.tcx.features().return_type_notation {\n+                            hir::GenericArgsParentheses::ReturnTypeNotation\n+                        } else {\n+                            self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n+                            hir::GenericArgsParentheses::No\n+                        };\n+                        GenericArgsCtor {\n+                            args: Default::default(),\n+                            bindings: &[],\n+                            parenthesized,\n+                            span: data.inputs_span,\n+                        }\n+                    } else if let Some(first_char) = constraint.ident.as_str().chars().next()\n+                        && first_char.is_ascii_lowercase()\n                     {\n                         let mut err = if !data.inputs.is_empty() {\n                             self.tcx.sess.create_err(errors::BadReturnTypeNotation::Inputs {\n@@ -1006,9 +1013,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 span: data.inputs_span.shrink_to_hi().to(ty.span),\n                             })\n                         } else {\n-                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::NeedsDots {\n-                                span: data.inputs_span,\n-                            })\n+                            unreachable!(\"inputs are empty and return type is not provided\")\n                         };\n                         if !self.tcx.features().return_type_notation\n                             && self.tcx.sess.is_nightly_build()"}, {"sha": "8eb84c036a0840d74cd2041d16f72fe70ba3ec6b", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -13,7 +13,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n-use thin_vec::ThinVec;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     #[instrument(level = \"trace\", skip(self))]\n@@ -219,18 +218,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                 },\n-                &GenericArgs::ReturnTypeNotation(span) => {\n-                    self.tcx.sess.emit_err(GenericTypeWithParentheses { span, sub: None });\n-                    (\n-                        self.lower_angle_bracketed_parameter_data(\n-                            &AngleBracketedArgs { span, args: ThinVec::default() },\n-                            param_mode,\n-                            itctx,\n-                        )\n-                        .0,\n-                        false,\n-                    )\n-                }\n             }\n         } else {\n             ("}, {"sha": "c79626ccd76f0dc18249cffc15e09a30daaec8c2", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1080,7 +1080,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.with_impl_trait(None, |this| this.visit_ty(ty));\n                 }\n             }\n-            GenericArgs::ReturnTypeNotation(_span) => {}\n         }\n     }\n \n@@ -1391,7 +1390,6 @@ fn deny_equality_constraints(\n                                     match &mut assoc_path.segments[len].args {\n                                         Some(args) => match args.deref_mut() {\n                                             GenericArgs::Parenthesized(_) => continue,\n-                                            GenericArgs::ReturnTypeNotation(_span) => continue,\n                                             GenericArgs::AngleBracketed(args) => {\n                                                 args.args.push(arg);\n                                             }"}, {"sha": "17bcd24ee39fd48105cacfd08d0f222099e8be8a", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -121,24 +121,34 @@ impl<'a> PostExpansionVisitor<'a> {\n     }\n \n     /// Feature gate `impl Trait` inside `type Alias = $type_expr;`.\n-    fn check_impl_trait(&self, ty: &ast::Ty) {\n+    fn check_impl_trait(&self, ty: &ast::Ty, in_associated_ty: bool) {\n         struct ImplTraitVisitor<'a> {\n             vis: &'a PostExpansionVisitor<'a>,\n+            in_associated_ty: bool,\n         }\n         impl Visitor<'_> for ImplTraitVisitor<'_> {\n             fn visit_ty(&mut self, ty: &ast::Ty) {\n                 if let ast::TyKind::ImplTrait(..) = ty.kind {\n-                    gate_feature_post!(\n-                        &self.vis,\n-                        type_alias_impl_trait,\n-                        ty.span,\n-                        \"`impl Trait` in type aliases is unstable\"\n-                    );\n+                    if self.in_associated_ty {\n+                        gate_feature_post!(\n+                            &self.vis,\n+                            impl_trait_in_assoc_type,\n+                            ty.span,\n+                            \"`impl Trait` in associated types is unstable\"\n+                        );\n+                    } else {\n+                        gate_feature_post!(\n+                            &self.vis,\n+                            type_alias_impl_trait,\n+                            ty.span,\n+                            \"`impl Trait` in type aliases is unstable\"\n+                        );\n+                    }\n                 }\n                 visit::walk_ty(self, ty);\n             }\n         }\n-        ImplTraitVisitor { vis: self }.visit_ty(ty);\n+        ImplTraitVisitor { vis: self, in_associated_ty }.visit_ty(ty);\n     }\n \n     fn check_late_bound_lifetime_defs(&self, params: &[ast::GenericParam]) {\n@@ -294,7 +304,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n \n             ast::ItemKind::TyAlias(box ast::TyAlias { ty: Some(ty), .. }) => {\n-                self.check_impl_trait(&ty)\n+                self.check_impl_trait(&ty, false)\n             }\n \n             _ => {}\n@@ -485,20 +495,23 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {\n         if let AssocConstraintKind::Bound { .. } = constraint.kind {\n-            if let Some(args) = constraint.gen_args.as_ref()\n-                && matches!(\n-                    args,\n-                    ast::GenericArgs::ReturnTypeNotation(..)\n-                )\n+            if let Some(ast::GenericArgs::Parenthesized(args)) = constraint.gen_args.as_ref()\n+                && args.inputs.is_empty()\n+                && matches!(args.output, ast::FnRetTy::Default(..))\n             {\n-                // RTN is gated below with a `gate_all`.\n+                gate_feature_post!(\n+                    &self,\n+                    return_type_notation,\n+                    constraint.span,\n+                    \"return type notation is experimental\"\n+                );\n             } else {\n                 gate_feature_post!(\n                     &self,\n                     associated_type_bounds,\n                     constraint.span,\n                     \"associated type bounds are unstable\"\n-                )\n+                );\n             }\n         }\n         visit::walk_assoc_constraint(self, constraint)\n@@ -517,7 +530,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     );\n                 }\n                 if let Some(ty) = ty {\n-                    self.check_impl_trait(ty);\n+                    self.check_impl_trait(ty, true);\n                 }\n                 false\n             }\n@@ -589,7 +602,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n-    gate_all!(return_type_notation, \"return type notation is experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded).\n@@ -605,6 +617,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n \n     gate_all!(trait_alias, \"trait aliases are experimental\");\n     gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n+    gate_all!(return_type_notation, \"return type notation is experimental\");\n     gate_all!(decl_macro, \"`macro` is experimental\");\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");"}, {"sha": "849336c8669a1288fe20031bf54a7cf4a9c5452e", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -936,10 +936,6 @@ impl<'a> PrintState<'a> for State<'a> {\n                 self.word(\")\");\n                 self.print_fn_ret_ty(&data.output);\n             }\n-\n-            ast::GenericArgs::ReturnTypeNotation(_span) => {\n-                self.word(\"(..)\");\n-            }\n         }\n     }\n }"}, {"sha": "f5a34cb0561bb31ffa237865c664388c41ef85d6", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -13,7 +13,7 @@ use crate::{\n /// The construct graph organizes the constraints by their end-points.\n /// It can be used to view a `R1: R2` constraint as either an edge `R1\n /// -> R2` or `R2 -> R1` depending on the direction type `D`.\n-pub(crate) struct ConstraintGraph<D: ConstraintGraphDirecton> {\n+pub(crate) struct ConstraintGraph<D: ConstraintGraphDirection> {\n     _direction: D,\n     first_constraints: IndexVec<RegionVid, Option<OutlivesConstraintIndex>>,\n     next_constraints: IndexVec<OutlivesConstraintIndex, Option<OutlivesConstraintIndex>>,\n@@ -25,7 +25,7 @@ pub(crate) type ReverseConstraintGraph = ConstraintGraph<Reverse>;\n \n /// Marker trait that controls whether a `R1: R2` constraint\n /// represents an edge `R1 -> R2` or `R2 -> R1`.\n-pub(crate) trait ConstraintGraphDirecton: Copy + 'static {\n+pub(crate) trait ConstraintGraphDirection: Copy + 'static {\n     fn start_region(c: &OutlivesConstraint<'_>) -> RegionVid;\n     fn end_region(c: &OutlivesConstraint<'_>) -> RegionVid;\n     fn is_normal() -> bool;\n@@ -38,7 +38,7 @@ pub(crate) trait ConstraintGraphDirecton: Copy + 'static {\n #[derive(Copy, Clone, Debug)]\n pub(crate) struct Normal;\n \n-impl ConstraintGraphDirecton for Normal {\n+impl ConstraintGraphDirection for Normal {\n     fn start_region(c: &OutlivesConstraint<'_>) -> RegionVid {\n         c.sup\n     }\n@@ -59,7 +59,7 @@ impl ConstraintGraphDirecton for Normal {\n #[derive(Copy, Clone, Debug)]\n pub(crate) struct Reverse;\n \n-impl ConstraintGraphDirecton for Reverse {\n+impl ConstraintGraphDirection for Reverse {\n     fn start_region(c: &OutlivesConstraint<'_>) -> RegionVid {\n         c.sub\n     }\n@@ -73,7 +73,7 @@ impl ConstraintGraphDirecton for Reverse {\n     }\n }\n \n-impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n+impl<D: ConstraintGraphDirection> ConstraintGraph<D> {\n     /// Creates a \"dependency graph\" where each region constraint `R1:\n     /// R2` is treated as an edge `R1 -> R2`. We use this graph to\n     /// construct SCCs for region inference but also for error\n@@ -133,15 +133,15 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n     }\n }\n \n-pub(crate) struct Edges<'s, 'tcx, D: ConstraintGraphDirecton> {\n+pub(crate) struct Edges<'s, 'tcx, D: ConstraintGraphDirection> {\n     graph: &'s ConstraintGraph<D>,\n     constraints: &'s OutlivesConstraintSet<'tcx>,\n     pointer: Option<OutlivesConstraintIndex>,\n     next_static_idx: Option<usize>,\n     static_region: RegionVid,\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Edges<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> Iterator for Edges<'s, 'tcx, D> {\n     type Item = OutlivesConstraint<'tcx>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -174,13 +174,13 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Edges<'s, 'tcx, D> {\n /// This struct brings together a constraint set and a (normal, not\n /// reverse) constraint graph. It implements the graph traits and is\n /// usd for doing the SCC computation.\n-pub(crate) struct RegionGraph<'s, 'tcx, D: ConstraintGraphDirecton> {\n+pub(crate) struct RegionGraph<'s, 'tcx, D: ConstraintGraphDirection> {\n     set: &'s OutlivesConstraintSet<'tcx>,\n     constraint_graph: &'s ConstraintGraph<D>,\n     static_region: RegionVid,\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> RegionGraph<'s, 'tcx, D> {\n     /// Creates a \"dependency graph\" where each region constraint `R1:\n     /// R2` is treated as an edge `R1 -> R2`. We use this graph to\n     /// construct SCCs for region inference but also for error\n@@ -202,35 +202,37 @@ impl<'s, 'tcx, D: ConstraintGraphDirecton> RegionGraph<'s, 'tcx, D> {\n     }\n }\n \n-pub(crate) struct Successors<'s, 'tcx, D: ConstraintGraphDirecton> {\n+pub(crate) struct Successors<'s, 'tcx, D: ConstraintGraphDirection> {\n     edges: Edges<'s, 'tcx, D>,\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> Iterator for Successors<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> Iterator for Successors<'s, 'tcx, D> {\n     type Item = RegionVid;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         self.edges.next().map(|c| D::end_region(&c))\n     }\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::DirectedGraph for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::DirectedGraph for RegionGraph<'s, 'tcx, D> {\n     type Node = RegionVid;\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::WithNumNodes for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::WithNumNodes for RegionGraph<'s, 'tcx, D> {\n     fn num_nodes(&self) -> usize {\n         self.constraint_graph.first_constraints.len()\n     }\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::WithSuccessors for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::WithSuccessors for RegionGraph<'s, 'tcx, D> {\n     fn successors(&self, node: Self::Node) -> <Self as graph::GraphSuccessors<'_>>::Iter {\n         self.outgoing_regions(node)\n     }\n }\n \n-impl<'s, 'tcx, D: ConstraintGraphDirecton> graph::GraphSuccessors<'_> for RegionGraph<'s, 'tcx, D> {\n+impl<'s, 'tcx, D: ConstraintGraphDirection> graph::GraphSuccessors<'_>\n+    for RegionGraph<'s, 'tcx, D>\n+{\n     type Item = RegionVid;\n     type Iter = Successors<'s, 'tcx, D>;\n }"}, {"sha": "94ce29dfe519790e968d67d7ab0980774fa9b2eb", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -51,12 +51,10 @@ impl RegionCtxt {\n     /// Used to determine the representative of a component in the strongly connected\n     /// constraint graph\n     pub(crate) fn preference_value(self) -> usize {\n-        let _anon = Symbol::intern(\"anon\");\n-\n         match self {\n             RegionCtxt::Unknown => 1,\n             RegionCtxt::Existential(None) => 2,\n-            RegionCtxt::Existential(Some(_anon)) | RegionCtxt::Free(_anon) => 2,\n+            RegionCtxt::Existential(Some(_)) | RegionCtxt::Free(_) => 2,\n             RegionCtxt::Location(_) => 3,\n             RegionCtxt::TyContext(_) => 4,\n             _ => 5,"}, {"sha": "6d8305b7d471b002bdc298c7c9ecd7dd0ded2da6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -35,6 +35,7 @@ use rustc_middle::ty::{\n     OpaqueHiddenType, OpaqueTypeKey, RegionVid, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n+use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{FieldIdx, FIRST_VARIANT};\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n@@ -1338,18 +1339,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 };\n                 let (sig, map) = tcx.replace_late_bound_regions(sig, |br| {\n                     use crate::renumber::{BoundRegionInfo, RegionCtxt};\n-                    use rustc_span::Symbol;\n \n                     let region_ctxt_fn = || {\n                         let reg_info = match br.kind {\n                             ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n-                            ty::BoundRegionKind::BrAnon(..) => {\n-                                BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n-                            }\n+                            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(sym::anon),\n                             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-                            ty::BoundRegionKind::BrEnv => {\n-                                BoundRegionInfo::Name(Symbol::intern(\"env\"))\n-                            }\n+                            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n                         };\n \n                         RegionCtxt::LateBound(reg_info)\n@@ -2600,7 +2596,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.implicit_region_bound,\n                 self.param_env,\n                 location.to_locations(),\n-                DUMMY_SP,                   // irrelevant; will be overrided.\n+                DUMMY_SP,                   // irrelevant; will be overridden.\n                 ConstraintCategory::Boring, // same as above.\n                 &mut self.borrowck_context.constraints,\n             )"}, {"sha": "6b64e65518f5bf605637dc66b4bbc535e3406586", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -4,6 +4,7 @@ use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Ty};\n+use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n use rustc_trait_selection::traits::query::Fallible;\n \n@@ -125,9 +126,9 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n \n         let reg_info = match placeholder.bound.kind {\n             ty::BoundRegionKind::BrAnon(Some(span)) => BoundRegionInfo::Span(span),\n-            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n+            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(sym::anon),\n             ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n+            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n         };\n \n         let reg_var ="}, {"sha": "35dfc1f7d129a710383c9db23fed7d76b74f51ed", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -24,6 +24,7 @@ use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n+use rustc_span::symbol::{kw, sym};\n use rustc_span::Symbol;\n use std::iter;\n \n@@ -404,10 +405,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         assert_eq!(FIRST_GLOBAL_INDEX, self.infcx.num_region_vars());\n \n         // Create the \"global\" region that is always free in all contexts: 'static.\n-        let fr_static = self\n-            .infcx\n-            .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"static\")))\n-            .to_region_vid();\n+        let fr_static =\n+            self.infcx.next_nll_region_var(FR, || RegionCtxt::Free(kw::Static)).to_region_vid();\n \n         // We've now added all the global regions. The next ones we\n         // add will be external.\n@@ -440,11 +439,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     debug!(?r);\n                     if !indices.indices.contains_key(&r) {\n                         let region_vid = {\n-                            let name = match r.get_name() {\n-                                Some(name) => name,\n-                                _ => Symbol::intern(\"anon\"),\n-                            };\n-\n+                            let name = r.get_name_or_anon();\n                             self.infcx.next_nll_region_var(FR, || {\n                                 RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                             })\n@@ -478,11 +473,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.infcx.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })\n@@ -768,15 +759,10 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.infcx.tcx.fold_regions(value, |region, _depth| {\n-            let name = match region.get_name() {\n-                Some(name) => name,\n-                _ => Symbol::intern(\"anon\"),\n-            };\n+            let name = region.get_name_or_anon();\n             debug!(?region, ?name);\n \n-            let reg_var = self.next_nll_region_var(origin, || RegionCtxt::Free(name));\n-\n-            reg_var\n+            self.next_nll_region_var(origin, || RegionCtxt::Free(name))\n         })\n     }\n \n@@ -797,7 +783,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             let region_vid = {\n                 let name = match br.kind.get_name() {\n                     Some(name) => name,\n-                    _ => Symbol::intern(\"anon\"),\n+                    _ => sym::anon,\n                 };\n \n                 self.next_nll_region_var(origin, || RegionCtxt::Bound(BoundRegionInfo::Name(name)))\n@@ -829,11 +815,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })\n@@ -855,11 +837,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })"}, {"sha": "f0fc61d7c4f21fd2d0f07c06ae5525c23fd4608b", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -42,7 +42,7 @@ struct MacroInput {\n     fmtstr: P<Expr>,\n     args: FormatArguments,\n     /// Whether the first argument was a string literal or a result from eager macro expansion.\n-    /// If it's not a string literal, we disallow implicit arugment capturing.\n+    /// If it's not a string literal, we disallow implicit argument capturing.\n     ///\n     /// This does not correspond to whether we can treat spans to the literal normally, as the whole\n     /// invocation might be the result of another macro expansion, in which case this flag may still be true."}, {"sha": "243be0e1f70e70c6303e3834c3d26899de01a481", "filename": "compiler/rustc_codegen_ssa/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fmessages.ftl?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -141,7 +141,7 @@ codegen_ssa_msvc_missing_linker = the msvc targets depend on the msvc linker but\n \n codegen_ssa_check_installed_visual_studio = please ensure that Visual Studio 2017 or later, or Build Tools for Visual Studio were installed with the Visual C++ option.\n \n-codegen_ssa_unsufficient_vs_code_product = VS Code is a different product, and is not sufficient.\n+codegen_ssa_insufficient_vs_code_product = VS Code is a different product, and is not sufficient.\n \n codegen_ssa_processing_dymutil_failed = processing debug info with `dsymutil` failed: {$status}\n     .note = {$output}"}, {"sha": "02e21e74fadc828e08953d194c6b1c1dc10b517b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -923,7 +923,7 @@ fn link_natively<'a>(\n             if sess.target.is_like_msvc && linker_not_found {\n                 sess.emit_note(errors::MsvcMissingLinker);\n                 sess.emit_note(errors::CheckInstalledVisualStudio);\n-                sess.emit_note(errors::UnsufficientVSCodeProduct);\n+                sess.emit_note(errors::InsufficientVSCodeProduct);\n             }\n             sess.abort_if_errors();\n         }"}, {"sha": "66e7e314f79d860aff5fcb3d5cff267bb49b9fee", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -405,8 +405,8 @@ pub struct MsvcMissingLinker;\n pub struct CheckInstalledVisualStudio;\n \n #[derive(Diagnostic)]\n-#[diag(codegen_ssa_unsufficient_vs_code_product)]\n-pub struct UnsufficientVSCodeProduct;\n+#[diag(codegen_ssa_insufficient_vs_code_product)]\n+pub struct InsufficientVSCodeProduct;\n \n #[derive(Diagnostic)]\n #[diag(codegen_ssa_processing_dymutil_failed)]"}, {"sha": "4bd6fe19931e7c83ecf6d736162c7a9b21ac1d09", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -205,7 +205,7 @@ pub(crate) fn turn_into_const_value<'tcx>(\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n     let is_static = tcx.is_static(def_id);\n-    // This is just accessing an already computed constant, so no need to check alginment here.\n+    // This is just accessing an already computed constant, so no need to check alignment here.\n     let ecx = mk_eval_cx(\n         tcx,\n         tcx.def_span(key.value.instance.def_id()),"}, {"sha": "5d999d0db5dbd5c76ceb5432cc4ccffd9dbb0cc9", "filename": "compiler/rustc_expand/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_expand%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_expand%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fmessages.ftl?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -135,4 +135,4 @@ expand_proc_macro_panicked =\n     .help = message: {$message}\n \n expand_proc_macro_derive_tokens =\n-    proc-macro derive produced unparseable tokens\n+    proc-macro derive produced unparsable tokens"}, {"sha": "35572292271c4997962cdc801f2edf678639eb40", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -66,7 +66,12 @@ pub(super) fn failed_to_match_macro<'cx>(\n         && (matches!(expected_token.kind, TokenKind::Interpolated(_))\n             || matches!(token.kind, TokenKind::Interpolated(_)))\n     {\n-        err.note(\"captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\");\n+        err.note(\"captured metavariables except for `:tt`, `:ident` and `:lifetime` cannot be compared to other tokens\");\n+        err.note(\"see <https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment> for more information\");\n+\n+        if !def_span.is_dummy() && !cx.source_map().is_imported(def_span) {\n+            err.help(\"try using `:tt` instead in the macro definition\");\n+        }\n     }\n \n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`"}, {"sha": "48f5bd1cb50488c4085ae32965ea4d0764699da4", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -309,7 +309,7 @@ declare_features! (\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n-    /// Alows async functions to be declared, implemented, and used in traits.\n+    /// Allows async functions to be declared, implemented, and used in traits.\n     (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n     /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n@@ -416,6 +416,8 @@ declare_features! (\n     (active, half_open_range_patterns_in_slices, \"1.66.0\", Some(67264), None),\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n+    /// Allows `impl Trait` to be used inside associated types (RFC 2515).\n+    (active, impl_trait_in_assoc_type, \"CURRENT_RUSTC_VERSION\", Some(63063), None),\n     /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n     (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n     /// Allows referencing `Self` and projections in impl-trait."}, {"sha": "284b099e7bc71e2ec9297b29d6891cf6aebc6a5b", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> Bounds<'tcx> {\n     pub fn push_sized(&mut self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) {\n         let sized_def_id = tcx.require_lang_item(LangItem::Sized, Some(span));\n         let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized_def_id, [ty]));\n-        // Preferrable to put this obligation first, since we report better errors for sized ambiguity.\n+        // Preferable to put this obligation first, since we report better errors for sized ambiguity.\n         self.predicates.insert(0, (trait_ref.without_const().to_predicate(tcx), span));\n     }\n "}, {"sha": "a4c3be1d1774567d4b34a8e18affd0723ee9aa78", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let rcvr_ty = self.node_ty(rcvr.hir_id);\n                 // Get the evaluated type *after* calling the method call, so that the influence\n                 // of the arguments can be reflected in the receiver type. The receiver\n-                // expression has the type *before* theis analysis is done.\n+                // expression has the type *before* this analysis is done.\n                 let ty = match self.lookup_probe_for_diagnostic(\n                     segment.ident,\n                     rcvr_ty,"}, {"sha": "6ffa0134f3d55f74a194321d12cd77dd90cf4572", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    pub(super) fn check_expr_coercable_to_type(\n+    pub(super) fn check_expr_coercible_to_type(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n@@ -1128,7 +1128,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n-        // This is (basically) inlined `check_expr_coercable_to_type`, but we want\n+        // This is (basically) inlined `check_expr_coercible_to_type`, but we want\n         // to suggest an additional fixup here in `suggest_deref_binop`.\n         let rhs_ty = self.check_expr_with_hint(&rhs, lhs_ty);\n         if let (_, Some(mut diag)) =\n@@ -1401,7 +1401,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (element_ty, t) = match uty {\n             Some(uty) => {\n-                self.check_expr_coercable_to_type(&element, uty, None);\n+                self.check_expr_coercible_to_type(&element, uty, None);\n                 (uty, uty)\n             }\n             None => {\n@@ -1478,7 +1478,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| match flds {\n             Some(fs) if i < fs.len() => {\n                 let ety = fs[i];\n-                self.check_expr_coercable_to_type(&e, ety, None);\n+                self.check_expr_coercible_to_type(&e, ety, None);\n                 ety\n             }\n             _ => self.check_expr_with_expectation(&e, NoExpectation),\n@@ -2869,7 +2869,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         match self.resume_yield_tys {\n             Some((resume_ty, yield_ty)) => {\n-                self.check_expr_coercable_to_type(&value, yield_ty, None);\n+                self.check_expr_coercible_to_type(&value, yield_ty, None);\n \n                 resume_ty\n             }\n@@ -2878,7 +2878,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // information. Hence, we check the source of the yield expression here and check its\n             // value's type against `()` (this check should always hold).\n             None if src.is_await() => {\n-                self.check_expr_coercable_to_type(&value, self.tcx.mk_unit(), None);\n+                self.check_expr_coercible_to_type(&value, self.tcx.mk_unit(), None);\n                 self.tcx.mk_unit()\n             }\n             _ => {"}, {"sha": "e887ab2fa142f909a323a214ee08e48fc510f050", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -466,7 +466,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// obligation. Hence we refine the `expr` \"outwards-in\" and bail at the first kind of expression/impl we don't recognize.\n     ///\n     /// This function returns a `Result<&Expr, &Expr>` - either way, it returns the `Expr` whose span should be\n-    /// reported as an error. If it is `Ok`, then it means it refined successfull. If it is `Err`, then it may be\n+    /// reported as an error. If it is `Ok`, then it means it refined successful. If it is `Err`, then it may be\n     /// only a partial success - but it cannot be refined even further.\n     fn blame_specific_expr_if_possible_for_derived_predicate_obligation(\n         &self,\n@@ -534,7 +534,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// - in_ty: `(Option<Vec<T>, bool)`\n     /// we would drill until we arrive at `vec![1, 2, 3]`.\n     ///\n-    /// If successful, we return `Ok(refined_expr)`. If unsuccesful, we return `Err(partially_refined_expr`),\n+    /// If successful, we return `Ok(refined_expr)`. If unsuccessful, we return `Err(partially_refined_expr`),\n     /// which will go as far as possible. For example, given `(foo(), false)` instead, we would drill to\n     /// `foo()` and then return `Err(\"foo()\")`.\n     ///"}, {"sha": "a009ae5d44eb16d71b53378c0da1653d9cda4df9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1413,7 +1413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.demand_eqtype(init.span, local_ty, init_ty);\n             init_ty\n         } else {\n-            self.check_expr_coercable_to_type(init, local_ty, None)\n+            self.check_expr_coercible_to_type(init, local_ty, None)\n         }\n     }\n "}, {"sha": "45890abad92e39ce3549bfcd56adfb10836136da", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -280,7 +280,7 @@ fn typeck_with_fallback<'tcx>(\n         // Gather locals in statics (because of block expressions).\n         GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n-        fcx.check_expr_coercable_to_type(&body.value, expected_type, None);\n+        fcx.check_expr_coercible_to_type(&body.value, expected_type, None);\n \n         fcx.write_ty(id, expected_type);\n     };"}, {"sha": "7702a8b7004f6e6777075b741f6ef97733cacf86", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // We could pass the file for long types into these two, but it isn't strictly necessary\n-        // given how targetted they are.\n+        // given how targeted they are.\n         if self.suggest_wrapping_range_with_parens(\n             tcx,\n             rcvr_ty,"}, {"sha": "0ab6af127c096f4ce460c09cdf13f2f172cf3f08", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -103,9 +103,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match BinOpCategory::from(op) {\n             BinOpCategory::Shortcircuit => {\n                 // && and || are a simple case.\n-                self.check_expr_coercable_to_type(lhs_expr, tcx.types.bool, None);\n+                self.check_expr_coercible_to_type(lhs_expr, tcx.types.bool, None);\n                 let lhs_diverges = self.diverges.get();\n-                self.check_expr_coercable_to_type(rhs_expr, tcx.types.bool, None);\n+                self.check_expr_coercible_to_type(rhs_expr, tcx.types.bool, None);\n \n                 // Depending on the LHS' value, the RHS can never execute.\n                 self.diverges.set(lhs_diverges);\n@@ -255,7 +255,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n \n         // see `NB` above\n-        let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var, Some(lhs_expr));\n+        let rhs_ty = self.check_expr_coercible_to_type(rhs_expr, rhs_ty_var, Some(lhs_expr));\n         let rhs_ty = self.resolve_vars_with_obligations(rhs_ty);\n \n         let return_ty = match result {"}, {"sha": "c8998ea91bfe1fdfe457e5ef7a9b54c31f12f956", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -173,7 +173,7 @@ infer_region_explanation = {$pref_kind ->\n \n infer_outlives_content = lifetime of reference outlives lifetime of borrowed content...\n infer_outlives_bound = lifetime of the source pointer does not outlive lifetime bound of the object type\n-infer_fullfill_req_lifetime = the type `{$ty}` does not fulfill the required lifetime\n+infer_fulfill_req_lifetime = the type `{$ty}` does not fulfill the required lifetime\n infer_lf_bound_not_satisfied = lifetime bound not satisfied\n infer_borrowed_too_long = a value of type `{$ty}` is borrowed for too long\n infer_ref_longer_than_data = in type `{$ty}`, reference has a longer lifetime than the data it references"}, {"sha": "65b3dd1a892b8aa3d17a40c07564d8305eb03ff8", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -53,7 +53,7 @@ pub struct AnnotationRequired<'a> {\n // Copy of `AnnotationRequired` for E0283\n #[derive(Diagnostic)]\n #[diag(infer_type_annotations_needed, code = \"E0283\")]\n-pub struct AmbigousImpl<'a> {\n+pub struct AmbiguousImpl<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub source_kind: &'static str,\n@@ -942,8 +942,8 @@ pub struct OutlivesBound<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(infer_fullfill_req_lifetime, code = \"E0477\")]\n-pub struct FullfillReqLifetime<'a> {\n+#[diag(infer_fulfill_req_lifetime, code = \"E0477\")]\n+pub struct FulfillReqLifetime<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub ty: Ty<'a>,"}, {"sha": "d5170f522bfd9b20638289e971a1bbbd7777475e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1819,7 +1819,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             // will try to hide in some case such as `async fn`, so\n                             // to make an error more use friendly we will\n                             // avoid to suggest a mismatch type with a\n-                            // type that the user usually are not usign\n+                            // type that the user usually are not using\n                             // directly such as `impl Future<Output = u8>`.\n                             if !self.tcx.ty_is_opaque_future(found_ty) {\n                                 diag.note_expected_found_extra("}, {"sha": "75cc4e257bd83283cf592851ffa992ec0a51d6a2", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n use crate::errors::{\n-    AmbigousImpl, AmbigousReturn, AnnotationRequired, InferenceBadError, NeedTypeInfoInGenerator,\n+    AmbigousReturn, AmbiguousImpl, AnnotationRequired, InferenceBadError, NeedTypeInfoInGenerator,\n     SourceKindMultiSuggestion, SourceKindSubdiag,\n };\n use crate::infer::error_reporting::TypeErrCtxt;\n@@ -358,7 +358,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 bad_label,\n             }\n             .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n-            TypeAnnotationNeeded::E0283 => AmbigousImpl {\n+            TypeAnnotationNeeded::E0283 => AmbiguousImpl {\n                 span,\n                 source_kind,\n                 source_name,\n@@ -563,7 +563,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 bad_label: None,\n             }\n             .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n-            TypeAnnotationNeeded::E0283 => AmbigousImpl {\n+            TypeAnnotationNeeded::E0283 => AmbiguousImpl {\n                 span,\n                 source_kind,\n                 source_name: &name,"}, {"sha": "07a9eff2dbefe485bd08f3dbaacc6124352f5c9c", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n use crate::errors::{\n-    note_and_explain, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n+    note_and_explain, FulfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n     RefLongerThanData, RegionOriginNote, WhereClauseSuggestions,\n };\n use crate::fluent_generated as fluent;\n@@ -176,7 +176,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let note = note_and_explain::RegionExplanation::new(\n                     self.tcx, sub, opt_span, prefix, suffix,\n                 );\n-                FullfillReqLifetime { span, ty: self.resolve_vars_if_possible(ty), note }\n+                FulfillReqLifetime { span, ty: self.resolve_vars_if_possible(ty), note }\n                     .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n             }\n             infer::RelateRegionParamBound(span) => {"}, {"sha": "db15b176df001091558d3556a9ea2e1240341723", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -91,7 +91,7 @@ lint_ty_qualified = usage of qualified `ty::{$ty}`\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n-lint_non_existant_doc_keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \"...\")]`\n+lint_non_existent_doc_keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \"...\")]`\n     .help = only existing keywords are allowed in core/std\n \n lint_diag_out_of_impl =\n@@ -107,7 +107,7 @@ lint_cstring_ptr = getting the inner pointer of a temporary `CString`\n     .note = pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n     .help = for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n-lint_multple_supertrait_upcastable = `{$ident}` is object-safe and has multiple supertraits\n+lint_multiple_supertrait_upcastable = `{$ident}` is object-safe and has multiple supertraits\n \n lint_identifier_non_ascii_char = identifier contains non-ASCII characters\n "}, {"sha": "4ac589c2e10f097ec8bafd62a068f965aa802849", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,7 +2,7 @@\n //! Clippy.\n \n use crate::lints::{\n-    BadOptAccessDiag, DefaultHashTypesDiag, DiagOutOfImpl, LintPassByHand, NonExistantDocKeyword,\n+    BadOptAccessDiag, DefaultHashTypesDiag, DiagOutOfImpl, LintPassByHand, NonExistentDocKeyword,\n     QueryInstability, TyQualified, TykindDiag, TykindKind, UntranslatableDiag,\n };\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n@@ -334,7 +334,7 @@ impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n                         cx.emit_spanned_lint(\n                             EXISTING_DOC_KEYWORD,\n                             attr.span,\n-                            NonExistantDocKeyword { keyword },\n+                            NonExistentDocKeyword { keyword },\n                         );\n                     }\n                 }\n@@ -424,7 +424,7 @@ impl LateLintPass<'_> for Diagnostics {\n }\n \n declare_tool_lint! {\n-    /// The `bad_opt_access` lint detects accessing options by field instad of\n+    /// The `bad_opt_access` lint detects accessing options by field instead of\n     /// the wrapper function.\n     pub rustc::BAD_OPT_ACCESS,\n     Deny,"}, {"sha": "3eefd1b0e083316fd1903348dc12dd73d3732b91", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -25,7 +25,7 @@ declare_lint! {\n     ///\n     /// fn main() {\n     ///    #[warn(let_underscore_drop)]\n-    ///     // SomeStuct is dropped immediately instead of at end of scope,\n+    ///     // SomeStruct is dropped immediately instead of at end of scope,\n     ///     // so \"Dropping SomeStruct\" is printed before \"end of main\".\n     ///     // The order of prints would be reversed if SomeStruct was bound to\n     ///     // a name (such as \"_foo\")."}, {"sha": "bb863f09516833ecae25d78a6b2d0a3c130dc03b", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -3,7 +3,7 @@ use crate::{\n     fluent_generated as fluent,\n     late::unerased_lint_store,\n     lints::{\n-        DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAtributeLint,\n+        DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAttributeLint,\n         RenamedOrRemovedLint, RenamedOrRemovedLintSuggestion, UnknownLint, UnknownLintSuggestion,\n     },\n };\n@@ -612,7 +612,7 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     self.emit_spanned_lint(\n                         FORBIDDEN_LINT_GROUPS,\n                         src.span().into(),\n-                        OverruledAtributeLint {\n+                        OverruledAttributeLint {\n                             overruled: src.span(),\n                             lint_level: level.as_str(),\n                             lint_source: src.name(),"}, {"sha": "1d5e02369f528b605ab3b0e45c5edd99e393d2f9", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -806,9 +806,9 @@ pub struct TyQualified {\n pub struct LintPassByHand;\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_non_existant_doc_keyword)]\n+#[diag(lint_non_existent_doc_keyword)]\n #[help]\n-pub struct NonExistantDocKeyword {\n+pub struct NonExistentDocKeyword {\n     pub keyword: Symbol,\n }\n \n@@ -875,7 +875,7 @@ impl AddToDiagnostic for NonBindingLetSub {\n // levels.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_overruled_attribute)]\n-pub struct OverruledAtributeLint<'a> {\n+pub struct OverruledAttributeLint<'a> {\n     #[label]\n     pub overruled: Span,\n     pub lint_level: &'a str,\n@@ -947,7 +947,7 @@ pub struct CStringPtr {\n \n // multiple_supertrait_upcastable.rs\n #[derive(LintDiagnostic)]\n-#[diag(lint_multple_supertrait_upcastable)]\n+#[diag(lint_multiple_supertrait_upcastable)]\n pub struct MultipleSupertraitUpcastable {\n     pub ident: Ident,\n }\n@@ -1422,7 +1422,7 @@ pub struct UnusedResult<'a> {\n     pub ty: Ty<'a>,\n }\n \n-// FIXME(davidtwco): this isn't properly translatable becauses of the\n+// FIXME(davidtwco): this isn't properly translatable because of the\n // pre/post strings\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_closure)]\n@@ -1433,7 +1433,7 @@ pub struct UnusedClosure<'a> {\n     pub post: &'a str,\n }\n \n-// FIXME(davidtwco): this isn't properly translatable becauses of the\n+// FIXME(davidtwco): this isn't properly translatable because of the\n // pre/post strings\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_generator)]\n@@ -1444,7 +1444,7 @@ pub struct UnusedGenerator<'a> {\n     pub post: &'a str,\n }\n \n-// FIXME(davidtwco): this isn't properly translatable becauses of the pre/post\n+// FIXME(davidtwco): this isn't properly translatable because of the pre/post\n // strings\n pub struct UnusedDef<'a, 'b> {\n     pub pre: &'a str,"}, {"sha": "4af879b4e91284ed565ab1f01ae29dd9b12654ac", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -250,7 +250,7 @@ impl EarlyLintPass for NonAsciiIdents {\n             let latin_augmented_script_set = AugmentedScriptSet::for_char('A');\n             script_states.insert(latin_augmented_script_set, ScriptSetUsage::Verified);\n \n-            let mut has_suspicous = false;\n+            let mut has_suspicious = false;\n             for (symbol, &sp) in symbols.iter() {\n                 let symbol_str = symbol.as_str();\n                 for ch in symbol_str.chars() {\n@@ -278,14 +278,14 @@ impl EarlyLintPass for NonAsciiIdents {\n                             if !is_potential_mixed_script_confusable_char(ch) {\n                                 ScriptSetUsage::Verified\n                             } else {\n-                                has_suspicous = true;\n+                                has_suspicious = true;\n                                 ScriptSetUsage::Suspicious(vec![ch], sp)\n                             }\n                         });\n                 }\n             }\n \n-            if has_suspicous {\n+            if has_suspicious {\n                 let verified_augmented_script_sets = script_states\n                     .iter()\n                     .flat_map(|(k, v)| match v {"}, {"sha": "7ea472ed504a30ed0aac9c72533e7e451d72bb4a", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -532,7 +532,7 @@ pub enum BuiltinLintDiagnostics {\n     AmbiguousGlobReexports {\n         /// The name for which collision(s) have occurred.\n         name: String,\n-        /// The name space for whihc the collision(s) occurred in.\n+        /// The name space for which the collision(s) occurred in.\n         namespace: String,\n         /// Span where the name is first re-exported.\n         first_reexport_span: Span,"}, {"sha": "a873854f0686ac09b042fe137d742f60d09b17e6", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n         // We pick the value of the least universe because it is compatible with more variables.\n-        // This is *not* neccessary for soundness, but it allows more region variables to be\n+        // This is *not* necessary for soundness, but it allows more region variables to be\n         // resolved to the said value.\n         #[cold]\n         fn min_universe<'tcx>(r1: Region<'tcx>, r2: Region<'tcx>) -> Region<'tcx> {"}, {"sha": "89014f62d4d69ff4ef05659f5ac07b8756117559", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n /// A macro for triggering an ICE.\n /// Calling `bug` instead of panicking will result in a nicer error message and should\n-/// therefore be prefered over `panic`/`unreachable` or others.\n+/// therefore be preferred over `panic`/`unreachable` or others.\n ///\n /// If you have a span available, you should use [`span_bug`] instead.\n ///"}, {"sha": "dcb56a1755e45b6e2570ac782a7022dac721ec7c", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/init_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -63,7 +63,7 @@ impl InitMask {\n     }\n \n     /// Sets a specified range to a value. If the range is out-of-bounds, the mask will grow to\n-    /// accomodate it entirely.\n+    /// accommodate it entirely.\n     pub fn set_range(&mut self, range: AllocRange, new_state: bool) {\n         let start = range.start;\n         let end = range.end();"}, {"sha": "318f93e12b582d47650c24e8f47e957cf30f24de", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/provenance_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Fprovenance_map.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -14,7 +14,7 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n #[derive(HashStable)]\n pub struct ProvenanceMap<Prov = AllocId> {\n     /// Provenance in this map applies from the given offset for an entire pointer-size worth of\n-    /// bytes. Two entires in this map are always at least a pointer size apart.\n+    /// bytes. Two entries in this map are always at least a pointer size apart.\n     ptrs: SortedMap<Size, Prov>,\n     /// Provenance in this map only applies to the given single byte.\n     /// This map is disjoint from the previous. It will always be empty when"}, {"sha": "7d9aea022898d3f3f4c06f2eb1d3e8e903ecba5f", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -37,7 +37,7 @@ pub fn erase<T: EraseType>(src: T) -> Erase<T> {\n #[inline(always)]\n pub fn restore<T: EraseType>(value: Erase<T>) -> T {\n     let value: Erased<<T as EraseType>::Result> = value;\n-    // SAFETY: Due to the use of impl Trait in `Erase` the only way to safetly create an instance\n+    // SAFETY: Due to the use of impl Trait in `Erase` the only way to safely create an instance\n     // of `Erase` is to call `erase`, so we know that `value.data` is a valid instance of `T` of\n     // the right size.\n     unsafe { transmute_copy(&value.data) }"}, {"sha": "23b28ac5ca938971277394d31ace642d88b880a8", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -26,7 +26,7 @@ pub trait Key: Sized {\n     //\n     //      ...But r-a doesn't support them yet and using a default here causes r-a to not infer\n     //      return types of queries which is very annoying. Thus, until r-a support associated\n-    //      type defaults, plese restrain from using them here <3\n+    //      type defaults, please restrain from using them here <3\n     //\n     //      r-a issue: <https://github.com/rust-lang/rust-analyzer/issues/13693>\n     type CacheSelector;"}, {"sha": "568aa39e09a9ddc72398cdd6a8814a2d17adf2b1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -97,7 +97,7 @@ rustc_queries! {\n \n     /// Gives access to the HIR ID for the given `LocalDefId` owner `key` if any.\n     ///\n-    /// Definitions that were generated with no HIR, would be feeded to return `None`.\n+    /// Definitions that were generated with no HIR, would be fed to return `None`.\n     query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         feedable"}, {"sha": "72caadaf66199e7957a9efc2744e9c9fceb7f953", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1347,7 +1347,7 @@ pub trait PrettyPrinter<'tcx>:\n                             p!(write(\"{}::{}\", self.tcx().crate_name(def.did.krate), self.tcx().def_path(def.did).to_string_no_crate_verbose()))\n                         }\n                     }\n-                    defkind => bug!(\"`{:?}` has unexpcted defkind {:?}\", ct, defkind),\n+                    defkind => bug!(\"`{:?}` has unexpected defkind {:?}\", ct, defkind),\n                 }\n             }\n             ty::ConstKind::Infer(infer_ct) => {"}, {"sha": "086ceebd24d6021f5bce78f80b93bc6f20dba97c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1621,19 +1621,24 @@ impl<'tcx> Region<'tcx> {\n \n     pub fn get_name(self) -> Option<Symbol> {\n         if self.has_name() {\n-            let name = match *self {\n+            match *self {\n                 ty::ReEarlyBound(ebr) => Some(ebr.name),\n                 ty::ReLateBound(_, br) => br.kind.get_name(),\n                 ty::ReFree(fr) => fr.bound_region.get_name(),\n                 ty::ReStatic => Some(kw::StaticLifetime),\n                 ty::RePlaceholder(placeholder) => placeholder.bound.kind.get_name(),\n                 _ => None,\n-            };\n-\n-            return name;\n+            }\n+        } else {\n+            None\n         }\n+    }\n \n-        None\n+    pub fn get_name_or_anon(self) -> Symbol {\n+        match self.get_name() {\n+            Some(name) => name,\n+            None => sym::anon,\n+        }\n     }\n \n     /// Is this region named by the user?"}, {"sha": "43e787db41a8886f0c998ff256401b722a037757", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -593,7 +593,7 @@ pub struct MultipleMutBorrows {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Diagnostic)]\n@@ -602,7 +602,7 @@ pub struct AlreadyBorrowed {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Diagnostic)]\n@@ -611,7 +611,7 @@ pub struct AlreadyMutBorrowed {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Diagnostic)]\n@@ -620,7 +620,7 @@ pub struct MovedWhileBorrowed {\n     #[primary_span]\n     pub span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<Conflict>,\n+    pub occurrences: Vec<Conflict>,\n }\n \n #[derive(Subdiagnostic)]"}, {"sha": "bac46db2b1e62bbeaefa1ad8cee7ae49974eab8f", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -966,30 +966,30 @@ fn check_borrow_conflicts_in_at_patterns<'tcx>(cx: &MatchVisitor<'_, '_, 'tcx>,\n     let report_mut_ref = !conflicts_mut_ref.is_empty();\n     let report_move_conflict = !conflicts_move.is_empty();\n \n-    let mut occurences = match mut_outer {\n+    let mut occurrences = match mut_outer {\n         Mutability::Mut => vec![Conflict::Mut { span: pat.span, name }],\n         Mutability::Not => vec![Conflict::Ref { span: pat.span, name }],\n     };\n-    occurences.extend(conflicts_mut_mut);\n-    occurences.extend(conflicts_mut_ref);\n-    occurences.extend(conflicts_move);\n+    occurrences.extend(conflicts_mut_mut);\n+    occurrences.extend(conflicts_mut_ref);\n+    occurrences.extend(conflicts_move);\n \n     // Report errors if any.\n     if report_mut_mut {\n         // Report mutability conflicts for e.g. `ref mut x @ Some(ref mut y)`.\n-        sess.emit_err(MultipleMutBorrows { span: pat.span, occurences });\n+        sess.emit_err(MultipleMutBorrows { span: pat.span, occurrences });\n     } else if report_mut_ref {\n         // Report mutability conflicts for e.g. `ref x @ Some(ref mut y)` or the converse.\n         match mut_outer {\n             Mutability::Mut => {\n-                sess.emit_err(AlreadyMutBorrowed { span: pat.span, occurences });\n+                sess.emit_err(AlreadyMutBorrowed { span: pat.span, occurrences });\n             }\n             Mutability::Not => {\n-                sess.emit_err(AlreadyBorrowed { span: pat.span, occurences });\n+                sess.emit_err(AlreadyBorrowed { span: pat.span, occurrences });\n             }\n         };\n     } else if report_move_conflict {\n         // Report by-ref and by-move conflicts, e.g. `ref x @ y`.\n-        sess.emit_err(MovedWhileBorrowed { span: pat.span, occurences });\n+        sess.emit_err(MovedWhileBorrowed { span: pat.span, occurrences });\n     }\n }"}, {"sha": "707729f8f21b71e2e3c581a9129c2e8b1dbc972e", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -394,8 +394,8 @@ where\n     ) -> io::Result<()> {\n         let diffs = StateDiffCollector::run(body, block, self.results.results(), self.style);\n \n-        let mut befores = diffs.before.map(|v| v.into_iter());\n-        let mut afters = diffs.after.into_iter();\n+        let mut diffs_before = diffs.before.map(|v| v.into_iter());\n+        let mut diffs_after = diffs.after.into_iter();\n \n         let next_in_dataflow_order = |it: &mut std::vec::IntoIter<_>| {\n             if A::Direction::IS_FORWARD { it.next().unwrap() } else { it.next_back().unwrap() }\n@@ -405,8 +405,8 @@ where\n             let statement_str = format!(\"{statement:?}\");\n             let index_str = format!(\"{i}\");\n \n-            let after = next_in_dataflow_order(&mut afters);\n-            let before = befores.as_mut().map(next_in_dataflow_order);\n+            let after = next_in_dataflow_order(&mut diffs_after);\n+            let before = diffs_before.as_mut().map(next_in_dataflow_order);\n \n             self.write_row(w, &index_str, &statement_str, |_this, w, fmt| {\n                 if let Some(before) = before {\n@@ -417,11 +417,11 @@ where\n             })?;\n         }\n \n-        let after = next_in_dataflow_order(&mut afters);\n-        let before = befores.as_mut().map(next_in_dataflow_order);\n+        let after = next_in_dataflow_order(&mut diffs_after);\n+        let before = diffs_before.as_mut().map(next_in_dataflow_order);\n \n-        assert!(afters.is_empty());\n-        assert!(befores.as_ref().map_or(true, ExactSizeIterator::is_empty));\n+        assert!(diffs_after.is_empty());\n+        assert!(diffs_before.as_ref().map_or(true, ExactSizeIterator::is_empty));\n \n         let terminator = body[block].terminator();\n         let mut terminator_str = String::new();"}, {"sha": "39164917770886053202a2898e56cf44c5dc6112", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -83,7 +83,7 @@\n //!   that ever have their address taken. Of course that requires actually having alias analysis\n //!   (and a model to build it on), so this might be a bit of a ways off.\n //!\n-//! * Various perf improvents. There are a bunch of comments in here marked `PERF` with ideas for\n+//! * Various perf improvements. There are a bunch of comments in here marked `PERF` with ideas for\n //!   how to do things more efficiently. However, the complexity of the pass as a whole should be\n //!   kept in mind.\n //!"}, {"sha": "bd1724bf84241abc1fe8db09511a253862a2ae66", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -99,7 +99,7 @@ where\n                 //\n                 // This generates a `switchInt() -> [0: 0, 1: 1, otherwise: unreachable]`, which allows us or LLVM to\n                 // turn it into just `x` later. Without the unreachable, such a transformation would be illegal.\n-                // If the otherwise branch is unreachable, we can delete all other unreacahble targets, as they will\n+                // If the otherwise branch is unreachable, we can delete all other unreachable targets, as they will\n                 // still point to the unreachable and therefore not lose reachability information.\n                 let reachable_iter = targets.iter().filter(|(_, bb)| !is_unreachable(*bb));\n "}, {"sha": "18aa0742c099a02c94cab4845369e72c35943855", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -474,7 +474,7 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n-/// Outputs stats about instantation counts and estimated size, per `MonoItem`'s\n+/// Outputs stats about instantiation counts and estimated size, per `MonoItem`'s\n /// def, to a file in the given output directory.\n fn dump_mono_items_stats<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "f11d0ed0f0109e20826fd0253b283c3334749595", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -738,3 +738,7 @@ parse_box_syntax_removed = `box_syntax` has been removed\n parse_bad_return_type_notation_output =\n     return type not allowed with return type notation\n     .suggestion = remove the return type\n+\n+parse_bad_return_type_notation_dotdot =\n+    return type notation uses `()` instead of `(..)` for elided arguments\n+    .suggestion = remove the `..`"}, {"sha": "069217165fabe3c920630d707cc200ceba8bdbfc", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2324,3 +2324,11 @@ pub(crate) struct BadReturnTypeNotationOutput {\n     #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_bad_return_type_notation_dotdot)]\n+pub(crate) struct BadReturnTypeNotationDotDot {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+    pub span: Span,\n+}"}, {"sha": "9e6d27bf036fc819c4712ce4e8fd6e2e11ee0a7a", "filename": "compiler/rustc_parse/src/lexer/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -21,7 +21,7 @@ pub struct TokenTreeDiagInfo {\n     pub matching_block_spans: Vec<(Span, Span)>,\n }\n \n-pub fn same_identation_level(sm: &SourceMap, open_sp: Span, close_sp: Span) -> bool {\n+pub fn same_indentation_level(sm: &SourceMap, open_sp: Span, close_sp: Span) -> bool {\n     match (sm.span_to_margin(open_sp), sm.span_to_margin(close_sp)) {\n         (Some(open_padding), Some(close_padding)) => open_padding == close_padding,\n         _ => false,\n@@ -67,13 +67,13 @@ pub fn report_suspicious_mismatch_block(\n     let mut matched_spans: Vec<(Span, bool)> = diag_info\n         .matching_block_spans\n         .iter()\n-        .map(|&(open, close)| (open.with_hi(close.lo()), same_identation_level(sm, open, close)))\n+        .map(|&(open, close)| (open.with_hi(close.lo()), same_indentation_level(sm, open, close)))\n         .collect();\n \n     // sort by `lo`, so the large block spans in the front\n     matched_spans.sort_by_key(|(span, _)| span.lo());\n \n-    // We use larger block whose identation is well to cover those inner mismatched blocks\n+    // We use larger block whose indentation is well to cover those inner mismatched blocks\n     // O(N^2) here, but we are on error reporting path, so it is fine\n     for i in 0..matched_spans.len() {\n         let (block_span, same_ident) = matched_spans[i];"}, {"sha": "7c2c0895193edf3f9371bba483d99305b3559b4c", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n use super::diagnostics::report_suspicious_mismatch_block;\n-use super::diagnostics::same_identation_level;\n+use super::diagnostics::same_indentation_level;\n use super::diagnostics::TokenTreeDiagInfo;\n use super::{StringReader, UnmatchedDelim};\n use rustc_ast::token::{self, Delimiter, Token};\n@@ -153,7 +153,7 @@ impl<'a> TokenTreesReader<'a> {\n                         unclosed_delimiter = Some(sp);\n                     };\n                     for (brace, brace_span) in &self.diag_info.open_braces {\n-                        if same_identation_level(&sm, self.token.span, *brace_span)\n+                        if same_indentation_level(&sm, self.token.span, *brace_span)\n                             && brace == &close_delim\n                         {\n                             // high likelihood of these two corresponding"}, {"sha": "03c82fbd329fc217e0a636198978017255b866c1", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2767,7 +2767,7 @@ impl<'a> Parser<'a> {\n                     (token::DotDotEq, token::Gt)\n                 ) {\n                     // `error_inclusive_range_match_arrow` handles cases like `0..=> {}`,\n-                    // so we supress the error here\n+                    // so we suppress the error here\n                     err.delay_as_bug();\n                     this.bump();\n                 } else {"}, {"sha": "c25c23d849f04f56387061217c471395a35971ed", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -290,16 +290,17 @@ impl<'a> Parser<'a> {\n                     })?;\n                     let span = lo.to(self.prev_token.span);\n                     AngleBracketedArgs { args, span }.into()\n-                } else if self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n+                } else if self.may_recover()\n+                    && self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n                     // FIXME(return_type_notation): Could also recover `...` here.\n                     && self.look_ahead(1, |tok| tok.kind == token::DotDot)\n                 {\n-                    let lo = self.token.span;\n                     self.bump();\n+                    self.sess\n+                        .emit_err(errors::BadReturnTypeNotationDotDot { span: self.token.span });\n                     self.bump();\n                     self.expect(&token::CloseDelim(Delimiter::Parenthesis))?;\n                     let span = lo.to(self.prev_token.span);\n-                    self.sess.gated_spans.gate(sym::return_type_notation, span);\n \n                     if self.eat_noexpect(&token::RArrow) {\n                         let lo = self.prev_token.span;\n@@ -308,7 +309,13 @@ impl<'a> Parser<'a> {\n                             .emit_err(errors::BadReturnTypeNotationOutput { span: lo.to(ty.span) });\n                     }\n \n-                    P(GenericArgs::ReturnTypeNotation(span))\n+                    ParenthesizedArgs {\n+                        span,\n+                        inputs: ThinVec::new(),\n+                        inputs_span: span,\n+                        output: ast::FnRetTy::Default(self.prev_token.span.shrink_to_hi()),\n+                    }\n+                    .into()\n                 } else {\n                     // `(T, U) -> R`\n                     let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n@@ -566,13 +573,13 @@ impl<'a> Parser<'a> {\n                     };\n \n                     let span = lo.to(self.prev_token.span);\n-\n                     // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n                     if let AssocConstraintKind::Bound { .. } = kind {\n-                        if gen_args.as_ref().map_or(false, |args| {\n-                            matches!(args, GenericArgs::ReturnTypeNotation(..))\n-                        }) {\n-                            // This is already gated in `parse_path_segment`\n+                        if let Some(ast::GenericArgs::Parenthesized(args)) = &gen_args\n+                            && args.inputs.is_empty()\n+                            && matches!(args.output, ast::FnRetTy::Default(..))\n+                        {\n+                            self.sess.gated_spans.gate(sym::return_type_notation, span);\n                         } else {\n                             self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n                         }"}, {"sha": "7de84db211ed8ac0fdd1295a38ac6ea5c4f276e6", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -909,7 +909,7 @@ fn find_width_map_from_snippet(\n     // Strip quotes.\n     let snippet = &snippet[1..snippet.len() - 1];\n \n-    // Macros like `println` add a newline at the end. That technically doens't make them \"literals\" anymore, but it's fine\n+    // Macros like `println` add a newline at the end. That technically doesn't make them \"literals\" anymore, but it's fine\n     // since we will never need to point our spans there, so we lie about it here by ignoring it.\n     // Since there might actually be newlines in the source code, we need to normalize away all trailing newlines.\n     // If we only trimmed it off the input, `format!(\"\\n\")` would cause a mismatch as here we they actually match up."}, {"sha": "47e032758f23da1b90be4453357f8af649fd1246", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -666,7 +666,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_generic_args(&mut self, g: &'v ast::GenericArgs) {\n         record_variants!(\n             (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n-            [AngleBracketed, Parenthesized, ReturnTypeNotation]\n+            [AngleBracketed, Parenthesized]\n         );\n         ast_visit::walk_generic_args(self, g)\n     }"}, {"sha": "01f002c940840e66e887081b81947be5800594b1", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -42,7 +42,7 @@ resolve_try_adding_local_generic_param_on_method =\n     try adding a local generic parameter in this method instead\n \n resolve_help_try_using_local_generic_param =\n-    try using a local generic paramter instead\n+    try using a local generic parameter instead\n \n resolve_name_is_already_used_as_generic_parameter =\n     the name `{$name}` is already used for a generic parameter in this item's generic parameters"}, {"sha": "90a2fa89cd2abdacf33c5e22c128cadb3dafd491", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -598,7 +598,7 @@ struct LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     /// The current set of local scopes for types and values.\n     ribs: PerNS<Vec<Rib<'a>>>,\n \n-    /// Previous poped `rib`, only used for diagnostic.\n+    /// Previous popped `rib`, only used for diagnostic.\n     last_block_rib: Option<Rib<'a>>,\n \n     /// The current set of local scopes, for labels.\n@@ -1116,7 +1116,6 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                         }\n                     }\n                 }\n-                GenericArgs::ReturnTypeNotation(_span) => {}\n             }\n         }\n     }"}, {"sha": "572b0c4cf6452dd7a9c2cfa2399fca66daf59a18", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -312,7 +312,6 @@ impl<'a> From<&'a ast::PathSegment> for Segment {\n                     (args.span, found_lifetimes)\n                 }\n                 GenericArgs::Parenthesized(args) => (args.span, true),\n-                GenericArgs::ReturnTypeNotation(span) => (*span, false),\n             }\n         } else {\n             (DUMMY_SP, false)\n@@ -1652,7 +1651,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 misc2: AmbiguityErrorMisc::None,\n             };\n             if !self.matches_previous_ambiguity_error(&ambiguity_error) {\n-                // avoid dumplicated span information to be emitt out\n+                // avoid duplicated span information to be emitt out\n                 self.ambiguity_errors.push(ambiguity_error);\n             }\n         }"}, {"sha": "259f423865480cd1864b598837c59d8f78f38310", "filename": "compiler/rustc_span/src/edit_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -219,7 +219,7 @@ fn find_best_match_for_name_impl(\n     }\n \n     // We have a tie among several candidates, try to select the best among them ignoring substrings.\n-    // For example, the candidates list `force_capture`, `capture`, and user inputed `forced_capture`,\n+    // For example, the candidates list `force_capture`, `capture`, and user inputted `forced_capture`,\n     // we select `force_capture` with a extra round of edit distance calculation.\n     if next_candidates.len() > 1 {\n         debug_assert!(use_substring_score);"}, {"sha": "08c4414034a0acd3ea3f2e159f49215abbce6040", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1207,7 +1207,7 @@ impl HygieneEncodeContext {\n         // a `SyntaxContext` that we haven't seen before\n         while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {\n             debug!(\n-                \"encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}\",\n+                \"encode_hygiene: Serializing a round of {:?} SyntaxContextData: {:?}\",\n                 self.latest_ctxts.lock().len(),\n                 self.latest_ctxts\n             );"}, {"sha": "b619e5877ad7b852e6586bddd15830a66268e965", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -357,6 +357,7 @@ symbols! {\n         always,\n         and,\n         and_then,\n+        anon,\n         anonymous_lifetime_in_impl_trait,\n         any,\n         append_const_msg,\n@@ -800,6 +801,7 @@ symbols! {\n         ignore,\n         impl_header_lifetime_elision,\n         impl_lint_pass,\n+        impl_trait_in_assoc_type,\n         impl_trait_in_bindings,\n         impl_trait_in_fn_trait_return,\n         impl_trait_projections,"}, {"sha": "57011aa8a14748b7d45af3641c2b7e2f7697400b", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -755,7 +755,7 @@ impl FromStr for Conv {\n             \"AmdGpuKernel\" => Ok(Conv::AmdGpuKernel),\n             \"AvrInterrupt\" => Ok(Conv::AvrInterrupt),\n             \"AvrNonBlockingInterrupt\" => Ok(Conv::AvrNonBlockingInterrupt),\n-            _ => Err(format!(\"'{s}' is not a valid value for entry function call convetion.\")),\n+            _ => Err(format!(\"'{s}' is not a valid value for entry function call convention.\")),\n         }\n     }\n }"}, {"sha": "4e5a821f0f6abe29357e73e5aa2ccc33222aa93a", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -123,7 +123,7 @@ pub enum Lld {\n /// target properties, in accordance with the first design goal.\n ///\n /// The first component of the flavor is tightly coupled with the compilation target,\n-/// while the `Cc` and `Lld` flags can vary withing the same target.\n+/// while the `Cc` and `Lld` flags can vary within the same target.\n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavor {\n     /// Unix-like linker with GNU extensions (both naked and compiler-wrapped forms)."}, {"sha": "25e7439ece79187c7ef487740f7bae9c8b0f9bba", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -13,15 +13,15 @@ use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{self, Ty};\n use rustc_middle::ty::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n \n-/// Whether we're canonicalizing a query input or the query reponse.\n+/// Whether we're canonicalizing a query input or the query response.\n ///\n /// When canonicalizing an input we're in the context of the caller\n /// while canonicalizing the response happens in the context of the\n /// query.\n #[derive(Debug, Clone, Copy)]\n pub enum CanonicalizeMode {\n     Input,\n-    /// FIXME: We currently return region constraints refering to\n+    /// FIXME: We currently return region constraints referring to\n     /// placeholders and inference variables from a binder instantiated\n     /// inside of the query.\n     ///"}, {"sha": "ada868705c7c3514be59b0c1a869bfb590c684d6", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ///\n     /// - `var_values`: a map from bound variables in the canonical goal to\n     ///   the values inferred while solving the instantiated goal.\n-    /// - `external_constraints`: additional constraints which aren't expressable\n+    /// - `external_constraints`: additional constraints which aren't expressible\n     ///   using simple unification of inference variables.\n     #[instrument(level = \"debug\", skip(self))]\n     pub(in crate::solve) fn evaluate_added_goals_and_make_canonical_response(\n@@ -113,7 +113,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     }\n \n     /// This returns the substitutions to instantiate the bound variables of\n-    /// the canonical reponse. This depends on the `original_values` for the\n+    /// the canonical response. This depends on the `original_values` for the\n     /// bound variables.\n     fn compute_query_response_substitution(\n         &self,"}, {"sha": "050269fa973e99dde66ffb5bf55bbadf98f38b47", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -153,7 +153,7 @@ impl<'tcx> SearchGraph<'tcx> {\n     /// coinductive cycles.\n     ///\n     /// When we encounter a coinductive cycle, we have to prove the final result of that cycle\n-    /// while we are still computing that result. Because of this we continously recompute the\n+    /// while we are still computing that result. Because of this we continuously recompute the\n     /// cycle until the result of the previous iteration is equal to the final result, at which\n     /// point we are done.\n     ///"}, {"sha": "e0a2e0c5cc29b3f2ba1710094dd895d9cd665c2e", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -45,7 +45,7 @@ impl OverflowData {\n     /// Updating the current limit when hitting overflow.\n     fn deal_with_overflow(&mut self) {\n         // When first hitting overflow we reduce the overflow limit\n-        // for all future goals to prevent hangs if there's an exponental\n+        // for all future goals to prevent hangs if there's an exponential\n         // blowup.\n         self.current_limit.0 = self.default_limit.0 / 8;\n     }"}, {"sha": "1f5bbc178f7d712a130b775fb35902b3b1faec3b", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -294,7 +294,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n-        // Keep this funtion in sync with extract_tupled_inputs_and_output_from_callable\n+        // Keep this function in sync with extract_tupled_inputs_and_output_from_callable\n         // until the old solver (and thus this function) is removed.\n \n         // Okay to skip binder because what we are inspecting doesn't involve bound regions.\n@@ -406,7 +406,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             match obligation.self_ty().skip_binder().kind() {\n-                // Fast path to avoid evaluating an obligation that trivally holds.\n+                // Fast path to avoid evaluating an obligation that trivially holds.\n                 // There may be more bounds, but these are checked by the regular path.\n                 ty::FnPtr(..) => return false,\n                 // These may potentially implement `FnPtr`"}, {"sha": "15a14112f4a28fd0c14e48ceb0be146b73620421", "filename": "compiler/rustc_ty_utils/messages.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ty_utils%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ty_utils%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fmessages.ftl?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -12,7 +12,7 @@ ty_utils_array_not_supported = array construction is not supported in generic co\n \n ty_utils_block_not_supported = blocks are not supported in generic constants\n \n-ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constants\n+ty_utils_never_to_any_not_supported = coercing the `never` type is not supported in generic constants\n \n ty_utils_tuple_not_supported = tuple construction is not supported in generic constants\n \n@@ -54,4 +54,4 @@ ty_utils_multiple_array_fields_simd_type = monomorphising SIMD type `{$ty}` with\n \n ty_utils_oversized_simd_type = monomorphising SIMD type `{$ty}` of length greater than {$max_lanes}\n \n-ty_utils_non_primative_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`\n+ty_utils_non_primitive_simd_type = monomorphising SIMD type `{$ty}` with a non-primitive-scalar (integer/float/pointer) element type `{$e_ty}`"}, {"sha": "3d3fc50e6e59fefb36d01a93e09dcc701f352155", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -95,7 +95,7 @@ pub struct OversizedSimdType<'tcx> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(ty_utils_non_primative_simd_type)]\n+#[diag(ty_utils_non_primitive_simd_type)]\n pub struct NonPrimitiveSimdType<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub e_ty: Ty<'tcx>,"}, {"sha": "63ef1c72417fb2c52a571c2d84998e29e978b923", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -322,7 +322,7 @@ fn layout_of_uncached<'tcx>(\n                 if fi.ty(tcx, substs) != f0_ty {\n                     tcx.sess.delay_span_bug(\n                         DUMMY_SP,\n-                        \"#[repr(simd)] was applied to an ADT with hetrogeneous field type\",\n+                        \"#[repr(simd)] was applied to an ADT with heterogeneous field type\",\n                     );\n                     return Err(LayoutError::Unknown(ty));\n                 }"}, {"sha": "a3c98ae007edeb2354a2f68a065b07b7208d3398", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -83,7 +83,7 @@ pub trait CollectAndApply<T, R>: Sized {\n     /// Produce a result of type `Self::Output` from `iter`. The result will\n     /// typically be produced by applying `f` on the elements produced by\n     /// `iter`, though this may not happen in some impls, e.g. if an error\n-    /// occured during iteration.\n+    /// occurred during iteration.\n     fn collect_and_apply<I, F>(iter: I, f: F) -> Self::Output\n     where\n         I: Iterator<Item = Self>,"}, {"sha": "6fbb4508662c7a1418492da0b5a904301371d77b", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -384,6 +384,7 @@ img {\n \tfont-size: 0.875rem;\n \tflex: 0 0 200px;\n \toverflow-y: scroll;\n+\toverscroll-behavior: contain;\n \tposition: sticky;\n \theight: 100vh;\n \ttop: 0;\n@@ -1531,7 +1532,7 @@ However, it's not needed with smaller screen width because the doc/code block is\n /*\n WARNING: RUSTDOC_MOBILE_BREAKPOINT MEDIA QUERY\n If you update this line, then you also need to update the line with the same warning\n-in main.js\n+in source-script.js\n */\n @media (max-width: 700px) {\n \t/* When linking to an item with an `id` (for instance, by clicking a link in the sidebar,"}, {"sha": "d13c783d2e4fbd93bb849a766df1c52a947a2a5c", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -8,7 +8,7 @@\n \theight: 1.2rem;\n \twidth: 1.2rem;\n \tcolor: inherit;\n-\tborder: 1px solid currentColor;\n+\tborder: 2px solid var(--settings-input-border-color);\n \toutline: none;\n \t-webkit-appearance: none;\n \tcursor: pointer;\n@@ -52,6 +52,7 @@\n }\n .setting-check input:checked {\n \tbackground-color: var(--settings-input-color);\n+\tborder-width: 1px;\n }\n .setting-radio input:focus, .setting-check input:focus {\n \tbox-shadow: 0 0 1px 1px var(--settings-input-color);"}, {"sha": "7145baad256732935282aa99f399b25ce1b48de4", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -7,6 +7,7 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--main-background-color: #0f1419;\n \t--main-color: #c5c5c5;\n \t--settings-input-color: #ffb454;\n+\t--settings-input-border-color: #999;\n \t--settings-button-color: #fff;\n \t--settings-button-border-focus: #e0e0e0;\n \t--sidebar-background-color: #14191f;"}, {"sha": "3c1186a5649f1cd6ae590632ddcb3c966531f73a", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,6 +2,7 @@\n \t--main-background-color: #353535;\n \t--main-color: #ddd;\n \t--settings-input-color: #2196f3;\n+\t--settings-input-border-color: #999;\n \t--settings-button-color: #000;\n \t--settings-button-border-focus: #ffb900;\n \t--sidebar-background-color: #505050;"}, {"sha": "f8c287137deac18021219c3e30ca8859002919eb", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,6 +2,7 @@\n \t--main-background-color: white;\n \t--main-color: black;\n \t--settings-input-color: #2196f3;\n+\t--settings-input-border-color: #717171;\n \t--settings-button-color: #000;\n \t--settings-button-border-focus: #717171;\n \t--sidebar-background-color: #F5F5F5;"}, {"sha": "6f5987e68bf1c91654acbacf161257a56ec2c59f", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -4,11 +4,6 @@\n \n \"use strict\";\n \n-// WARNING: RUSTDOC_MOBILE_BREAKPOINT MEDIA QUERY\n-// If you update this line, then you also need to update the media query with the same\n-// warning in rustdoc.css\n-window.RUSTDOC_MOBILE_BREAKPOINT = 700;\n-\n // Given a basename (e.g. \"storage\") and an extension (e.g. \".js\"), return a URL\n // for a resource under the root-path, with the resource-suffix.\n function resourcePath(basename, extension) {\n@@ -730,65 +725,18 @@ function preLoadCss(cssUrl) {\n         window.rustdoc_add_line_numbers_to_examples();\n     }\n \n-    let oldSidebarScrollPosition = null;\n-\n-    // Scroll locking used both here and in source-script.js\n-\n-    window.rustdocMobileScrollLock = function() {\n-        const mobile_topbar = document.querySelector(\".mobile-topbar\");\n-        if (window.innerWidth <= window.RUSTDOC_MOBILE_BREAKPOINT) {\n-            // This is to keep the scroll position on mobile.\n-            oldSidebarScrollPosition = window.scrollY;\n-            document.body.style.width = `${document.body.offsetWidth}px`;\n-            document.body.style.position = \"fixed\";\n-            document.body.style.top = `-${oldSidebarScrollPosition}px`;\n-            if (mobile_topbar) {\n-                mobile_topbar.style.top = `${oldSidebarScrollPosition}px`;\n-                mobile_topbar.style.position = \"relative\";\n-            }\n-        } else {\n-            oldSidebarScrollPosition = null;\n-        }\n-    };\n-\n-    window.rustdocMobileScrollUnlock = function() {\n-        const mobile_topbar = document.querySelector(\".mobile-topbar\");\n-        if (oldSidebarScrollPosition !== null) {\n-            // This is to keep the scroll position on mobile.\n-            document.body.style.width = \"\";\n-            document.body.style.position = \"\";\n-            document.body.style.top = \"\";\n-            if (mobile_topbar) {\n-                mobile_topbar.style.top = \"\";\n-                mobile_topbar.style.position = \"\";\n-            }\n-            // The scroll position is lost when resetting the style, hence why we store it in\n-            // `oldSidebarScrollPosition`.\n-            window.scrollTo(0, oldSidebarScrollPosition);\n-            oldSidebarScrollPosition = null;\n-        }\n-    };\n-\n     function showSidebar() {\n         window.hideAllModals(false);\n-        window.rustdocMobileScrollLock();\n         const sidebar = document.getElementsByClassName(\"sidebar\")[0];\n         addClass(sidebar, \"shown\");\n     }\n \n     function hideSidebar() {\n-        window.rustdocMobileScrollUnlock();\n         const sidebar = document.getElementsByClassName(\"sidebar\")[0];\n         removeClass(sidebar, \"shown\");\n     }\n \n     window.addEventListener(\"resize\", () => {\n-        if (window.innerWidth > window.RUSTDOC_MOBILE_BREAKPOINT &&\n-            oldSidebarScrollPosition !== null) {\n-            // If the user opens the sidebar in \"mobile\" mode, and then grows the browser window,\n-            // we need to switch away from mobile mode and make the main content area scrollable.\n-            hideSidebar();\n-        }\n         if (window.CURRENT_TOOLTIP_ELEMENT) {\n             // As a workaround to the behavior of `contains: layout` used in doc togglers,\n             // tooltip popovers are positioned using javascript."}, {"sha": "9aa75517330cd5174c7c85ceba9b7793e1fbdaf8", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -15,8 +15,13 @@ const NAME_OFFSET = 0;\n const DIRS_OFFSET = 1;\n const FILES_OFFSET = 2;\n \n+// WARNING: RUSTDOC_MOBILE_BREAKPOINT MEDIA QUERY\n+// If you update this line, then you also need to update the media query with the same\n+// warning in rustdoc.css\n+const RUSTDOC_MOBILE_BREAKPOINT = 700;\n+\n function closeSidebarIfMobile() {\n-    if (window.innerWidth < window.RUSTDOC_MOBILE_BREAKPOINT) {\n+    if (window.innerWidth < RUSTDOC_MOBILE_BREAKPOINT) {\n         updateLocalStorage(\"source-sidebar-show\", \"false\");\n     }\n }\n@@ -69,12 +74,10 @@ function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n function toggleSidebar() {\n     const child = this.parentNode.children[0];\n     if (child.innerText === \">\") {\n-        window.rustdocMobileScrollLock();\n         addClass(document.documentElement, \"source-sidebar-expanded\");\n         child.innerText = \"<\";\n         updateLocalStorage(\"source-sidebar-show\", \"true\");\n     } else {\n-        window.rustdocMobileScrollUnlock();\n         removeClass(document.documentElement, \"source-sidebar-expanded\");\n         child.innerText = \">\";\n         updateLocalStorage(\"source-sidebar-show\", \"false\");"}, {"sha": "ed86deb26d0e89384360c8b5590dcfdb7b579b55", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -15,6 +15,7 @@\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![feature(type_alias_impl_trait)]\n+#![cfg_attr(not(bootstrap), feature(impl_trait_in_assoc_type))]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}, {"sha": "7b7ee62a2474dd9a28b3309d017e2fc3f4ada4f0", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -9,7 +9,7 @@ use std::path::{Path, PathBuf};\n \n // FIXME: The following limits should be reduced eventually.\n const ENTRY_LIMIT: usize = 885;\n-const ROOT_ENTRY_LIMIT: usize = 881;\n+const ROOT_ENTRY_LIMIT: usize = 880;\n const ISSUES_ENTRY_LIMIT: usize = 1978;\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {\n@@ -22,18 +22,19 @@ fn check_entries(tests_path: &Path, bad: &mut bool) {\n         }\n     }\n \n+    let (mut max, mut max_root, mut max_issues) = (0usize, 0usize, 0usize);\n     for (dir_path, count) in directories {\n         // Use special values for these dirs.\n         let is_root = tests_path.join(\"ui\") == dir_path;\n         let is_issues_dir = tests_path.join(\"ui/issues\") == dir_path;\n-        let limit = if is_root {\n-            ROOT_ENTRY_LIMIT\n+        let (limit, maxcnt) = if is_root {\n+            (ROOT_ENTRY_LIMIT, &mut max_root)\n         } else if is_issues_dir {\n-            ISSUES_ENTRY_LIMIT\n+            (ISSUES_ENTRY_LIMIT, &mut max_issues)\n         } else {\n-            ENTRY_LIMIT\n+            (ENTRY_LIMIT, &mut max)\n         };\n-\n+        *maxcnt = (*maxcnt).max(count);\n         if count > limit {\n             tidy_error!(\n                 bad,\n@@ -45,6 +46,21 @@ fn check_entries(tests_path: &Path, bad: &mut bool) {\n             );\n         }\n     }\n+    if ENTRY_LIMIT > max {\n+        tidy_error!(bad, \"`ENTRY_LIMIT` is too high (is {ENTRY_LIMIT}, should be {max})\");\n+    }\n+    if ROOT_ENTRY_LIMIT > max_root {\n+        tidy_error!(\n+            bad,\n+            \"`ROOT_ENTRY_LIMIT` is too high (is {ROOT_ENTRY_LIMIT}, should be {max_root})\"\n+        );\n+    }\n+    if ISSUES_ENTRY_LIMIT > max_issues {\n+        tidy_error!(\n+            bad,\n+            \"`ISSUES_ENTRY_LIMIT` is too high (is {ISSUES_ENTRY_LIMIT}, should be {max_issues})\"\n+        );\n+    }\n }\n \n pub fn check(path: &Path, bad: &mut bool) {"}, {"sha": "733be9bebbabcd2a1fb787830c293e00bd1fb149", "filename": "tests/rustdoc-gui/settings.goml", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsettings.goml?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -56,38 +56,49 @@ move-cursor-to: \"#settings-menu > a\"\n assert-css: (\n     \"#theme-dark\",\n     {\n-        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"border-color\": \"rgb(153, 153, 153)\",\n         \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset\",\n+        \"border-width\": \"2px\",\n     },\n )\n-assert-css: (\"#theme-light\", {\"border-color\": \"rgb(221, 221, 221)\", \"box-shadow\": \"none\"})\n+assert-css: (\"#theme-light\", {\"border-color\": \"rgb(153, 153, 153)\", \"box-shadow\": \"none\"})\n // Let's start with the hover for radio buttons.\n move-cursor-to: \"#theme-dark\"\n assert-css: (\n     \"#theme-dark\",\n     {\n         \"border-color\": \"rgb(33, 150, 243)\",\n         \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset\",\n+        \"border-width\": \"2px\",\n     },\n )\n move-cursor-to: \"#theme-light\"\n-assert-css: (\"#theme-light\", {\"border-color\": \"rgb(33, 150, 243)\", \"box-shadow\": \"none\"})\n+assert-css: (\n+    \"#theme-light\",\n+    {\n+        \"border-color\": \"rgb(33, 150, 243)\",\n+        \"box-shadow\": \"none\",\n+        \"border-width\": \"2px\",\n+    }\n+)\n move-cursor-to: \"#theme-ayu\"\n // Let's now check with the focus for radio buttons.\n focus: \"#theme-dark\"\n assert-css: (\n     \"#theme-dark\",\n     {\n-        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"border-color\": \"rgb(153, 153, 153)\",\n         \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset, rgb(33, 150, 243) 0px 0px 2px 2px\",\n+        \"border-width\": \"2px\",\n     },\n )\n focus: \"#theme-light\"\n assert-css: (\n     \"#theme-light\",\n     {\n-        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"border-color\": \"rgb(153, 153, 153)\",\n         \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+        \"border-width\": \"2px\",\n     },\n )\n // Now we check we both focus and hover for radio buttons.\n@@ -98,6 +109,7 @@ assert-css: (\n     {\n         \"border-color\": \"rgb(33, 150, 243)\",\n         \"box-shadow\": \"rgb(53, 53, 53) 0px 0px 0px 3px inset, rgb(33, 150, 243) 0px 0px 2px 2px\",\n+        \"border-width\": \"2px\",\n     },\n )\n move-cursor-to: \"#theme-light\"\n@@ -107,6 +119,7 @@ assert-css: (\n     {\n         \"border-color\": \"rgb(33, 150, 243)\",\n         \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+        \"border-width\": \"2px\",\n     },\n )\n // Now we check the setting-radio-name is on a different line than the label.\n@@ -142,7 +155,18 @@ assert-css: (\n     \"#auto-hide-large-items\",\n     {\n         \"background-color\": \"rgb(33, 150, 243)\",\n-        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"border-color\": \"rgb(153, 153, 153)\",\n+        // 1px border when checked\n+        \"border-width\": \"1px\",\n+    },\n+)\n+assert-css: (\n+    \"#auto-hide-method-docs\",\n+    {\n+        \"background-color\": \"rgba(0, 0, 0, 0)\",\n+        \"border-color\": \"rgb(153, 153, 153)\",\n+        // 2px border when unchecked\n+        \"border-width\": \"2px\",\n     },\n )\n // Let's start with the hover for toggles.\n@@ -152,6 +176,18 @@ assert-css: (\n     {\n         \"background-color\": \"rgb(33, 150, 243)\",\n         \"border-color\": \"rgb(33, 150, 243)\",\n+        // 1px border when checked\n+        \"border-width\": \"1px\",\n+    },\n+)\n+move-cursor-to: \"#auto-hide-method-docs\"\n+assert-css: (\n+    \"#auto-hide-method-docs\",\n+    {\n+        \"background-color\": \"rgba(0, 0, 0, 0)\",\n+        \"border-color\": \"rgb(33, 150, 243)\",\n+        // 2px border when unchecked\n+        \"border-width\": \"2px\",\n     },\n )\n move-cursor-to: \"#settings-menu > a\"\n@@ -161,8 +197,21 @@ assert-css: (\n     \"#auto-hide-large-items\",\n     {\n         \"background-color\": \"rgb(33, 150, 243)\",\n-        \"border-color\": \"rgb(221, 221, 221)\",\n+        \"border-color\": \"rgb(153, 153, 153)\",\n+        \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+        // 1px border when checked\n+        \"border-width\": \"1px\",\n+    },\n+)\n+focus: \"#auto-hide-method-docs\"\n+assert-css: (\n+    \"#auto-hide-method-docs\",\n+    {\n+        \"background-color\": \"rgba(0, 0, 0, 0)\",\n+        \"border-color\": \"rgb(153, 153, 153)\",\n         \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+        // 2px border when unchecked\n+        \"border-width\": \"2px\",\n     },\n )\n // Now we check we both focus and hover for toggles.\n@@ -174,6 +223,20 @@ assert-css: (\n         \"background-color\": \"rgb(33, 150, 243)\",\n         \"border-color\": \"rgb(33, 150, 243)\",\n         \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+        // 1px border when checked\n+        \"border-width\": \"1px\",\n+    },\n+)\n+move-cursor-to: \"#auto-hide-method-docs\"\n+focus: \"#auto-hide-method-docs\"\n+assert-css: (\n+    \"#auto-hide-method-docs\",\n+    {\n+        \"background-color\": \"rgba(0, 0, 0, 0)\",\n+        \"border-color\": \"rgb(33, 150, 243)\",\n+        \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n+        // 2px border when unchecked\n+        \"border-width\": \"2px\",\n     },\n )\n "}, {"sha": "d58d1d48726efc5c7e3b9dd7ab15bf3f4b11b1c5", "filename": "tests/rustdoc-gui/sidebar-mobile-scroll.goml", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,31 +1,12 @@\n-// This test ensures that the mobile sidebar preserves scroll position.\n+// This test ensures that the mobile disables scrolling the page.\n go-to: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-// Switching to \"mobile view\" by reducing the width to 600px.\n-set-window-size: (700, 600)\n-assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n-\n-// Scroll down.\n-scroll-to: \"//h2[@id='blanket-implementations']\"\n-assert-window-property: {\"pageYOffset\": \"622\"}\n-\n-// Open the sidebar menu.\n-click: \".sidebar-menu-toggle\"\n-wait-for-css: (\".sidebar\", {\"left\": \"0px\"})\n-\n-// We are no longer \"scrolled\". It's important that the user can't\n-// scroll the body at all, but these test scripts are run only in Chrome,\n-// and we need to use a more complicated solution to this problem because\n-// of Mobile Safari...\n-assert-window-property: {\"pageYOffset\": \"0\"}\n-\n-// Close the sidebar menu. Make sure the scroll position gets restored.\n-click: \".sidebar-menu-toggle\"\n-wait-for-css: (\".sidebar\", {\"left\": \"-1000px\"})\n-assert-window-property: {\"pageYOffset\": \"622\"}\n-\n-// Now test that scrollability returns when the browser window is just resized.\n-click: \".sidebar-menu-toggle\"\n-wait-for-css: (\".sidebar\", {\"left\": \"0px\"})\n-assert-window-property: {\"pageYOffset\": \"0\"}\n-set-window-size: (900, 600)\n-assert-window-property: {\"pageYOffset\": \"622\"}\n+set-window-size: (1280, 800) // desktop\n+assert-css: (\".sidebar\", {\"overscroll-behavior\": \"contain\"})\n+set-window-size: (700, 600) // mobile\n+assert-css: (\".sidebar\", {\"overscroll-behavior\": \"contain\"})\n+\n+go-to: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n+set-window-size: (1280, 800) // desktop\n+assert-css: (\".sidebar\", {\"overscroll-behavior\": \"contain\"})\n+set-window-size: (700, 600) // mobile\n+assert-css: (\".sidebar\", {\"overscroll-behavior\": \"contain\"})"}, {"sha": "20bf0596f9589ed6299190b229d22f6ca7fd634b", "filename": "tests/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -183,22 +183,12 @@ wait-for-css: (\".sidebar\", {\"left\": \"-1000px\"})\n // The \"scrollTop\" property should be the same.\n assert-window-property: {\"pageYOffset\": \"2542\"}\n \n-// We now check that the scroll position is restored if the window is resized.\n-set-window-size: (500, 700)\n-click: \"#src-sidebar-toggle\"\n-wait-for-css: (\"#source-sidebar\", {\"visibility\": \"visible\"})\n-assert-window-property: {\"pageYOffset\": \"0\"}\n-set-window-size: (900, 900)\n-assert-window-property: {\"pageYOffset\": \"2542\"}\n-set-window-size: (500, 700)\n-click: \"#src-sidebar-toggle\"\n-wait-for-css: (\"#source-sidebar\", {\"visibility\": \"hidden\"})\n-\n // We now check that opening the sidebar and clicking a link will close it.\n // The behavior here on mobile is different than the behavior on desktop,\n // but common sense dictates that if you have a list of files that fills the entire screen, and\n // you click one of them, you probably want to actually see the file's contents, and not just\n // make it the current selection.\n+set-window-size: (500, 700)\n click: \"#src-sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"visible\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"true\"}"}, {"sha": "01e9a984d440381da687fd08e8726d374152253f", "filename": "tests/rustdoc/auxiliary/issue-73061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-73061.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n //edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Foo {\n     type X: std::future::Future<Output = ()>;"}, {"sha": "79cee55177ba0261d92ddbf437ea8d8a0294c4b8", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -12,11 +12,11 @@ fn foo<T: Trait<method(i32): Send>>() {}\n //~^ ERROR argument types not allowed with return type notation\n //~| ERROR associated type bounds are unstable\n \n-fn bar<T: Trait<method(..) -> (): Send>>() {}\n+fn bar<T: Trait<method() -> (): Send>>() {}\n //~^ ERROR return type not allowed with return type notation\n-\n-fn baz<T: Trait<method(): Send>>() {}\n-//~^ ERROR return type notation arguments must be elided with `..`\n //~| ERROR associated type bounds are unstable\n \n+fn baz<T: Trait<method(..): Send>>() {}\n+//~^ ERROR return type notation uses `()` instead of `(..)` for elided arguments\n+\n fn main() {}"}, {"sha": "b23e0f791eae4646113ca0ca79d2ed7e17913ffe", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,8 +1,8 @@\n-error: return type not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:15:28\n+error: return type notation uses `()` instead of `(..)` for elided arguments\n+  --> $DIR/bad-inputs-and-output.rs:19:24\n    |\n-LL | fn bar<T: Trait<method(..) -> (): Send>>() {}\n-   |                            ^^^^^ help: remove the return type\n+LL | fn baz<T: Trait<method(..): Send>>() {}\n+   |                        ^^ help: remove the `..`\n \n error[E0658]: associated type bounds are unstable\n   --> $DIR/bad-inputs-and-output.rs:11:17\n@@ -14,10 +14,10 @@ LL | fn foo<T: Trait<method(i32): Send>>() {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/bad-inputs-and-output.rs:18:17\n+  --> $DIR/bad-inputs-and-output.rs:15:17\n    |\n-LL | fn baz<T: Trait<method(): Send>>() {}\n-   |                 ^^^^^^^^^^^^^^\n+LL | fn bar<T: Trait<method() -> (): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n@@ -43,13 +43,13 @@ error: argument types not allowed with return type notation\n   --> $DIR/bad-inputs-and-output.rs:11:23\n    |\n LL | fn foo<T: Trait<method(i32): Send>>() {}\n-   |                       ^^^^^ help: remove the input types: `(..)`\n+   |                       ^^^^^ help: remove the input types: `()`\n \n-error: return type notation arguments must be elided with `..`\n-  --> $DIR/bad-inputs-and-output.rs:18:23\n+error: return type not allowed with return type notation\n+  --> $DIR/bad-inputs-and-output.rs:15:25\n    |\n-LL | fn baz<T: Trait<method(): Send>>() {}\n-   |                       ^^ help: add `..`: `(..)`\n+LL | fn bar<T: Trait<method() -> (): Send>>() {}\n+   |                         ^^^^^^ help: remove the return type\n \n error: aborting due to 5 previous errors; 2 warnings emitted\n "}, {"sha": "0b7530b65d758e4d3dfd46c4fe8fa57f460c2b14", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -18,7 +18,7 @@ async fn foo<T: Foo>() -> Result<(), ()> {\n fn is_send(_: impl Send) {}\n \n fn test<\n-    #[cfg(with)] T: Foo<method(..): Send>,\n+    #[cfg(with)] T: Foo<method(): Send>,\n     #[cfg(without)] T: Foo,\n >() {\n     is_send(foo::<T>());"}, {"sha": "75f757e90259ba1433a479150bbf43c22c05cdad", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -10,7 +10,7 @@ trait Trait {\n     async fn method() {}\n }\n \n-fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n+fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n //~^ ERROR return type notation is not allowed to use type equality\n \n fn main() {}"}, {"sha": "c5b2e5710d4a79db20b38662d643c1cdabe42e56", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -18,8 +18,8 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n error: return type notation is not allowed to use type equality\n   --> $DIR/equality.rs:13:18\n    |\n-LL | fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "7b98a5cdafdd3b27cfcab2e17e5d45842d3989e4", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -8,7 +8,7 @@ trait Trait {\n     async fn method() {}\n }\n \n-fn bar<T: Trait<methid(..): Send>>() {}\n+fn bar<T: Trait<methid(): Send>>() {}\n //~^ ERROR cannot find associated function `methid` in trait `Trait`\n \n fn main() {}"}, {"sha": "34f5bda884d4caa9dd11ecb56c3e85f496032c6e", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -18,8 +18,8 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n error: cannot find associated function `methid` in trait `Trait`\n   --> $DIR/missing.rs:11:17\n    |\n-LL | fn bar<T: Trait<methid(..): Send>>() {}\n-   |                 ^^^^^^^^^^^^^^^^\n+LL | fn bar<T: Trait<methid(): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "db5f6fe389ea7769967ec6e59ec56da5c78bd41a", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -5,7 +5,7 @@ trait Trait {\n     fn method() {}\n }\n \n-fn test<T: Trait<method(..): Send>>() {}\n+fn test<T: Trait<method(): Send>>() {}\n //~^ ERROR  return type notation used on function that is not `async` and does not return `impl Trait`\n \n fn main() {}"}, {"sha": "31b793995f8ab965616ac86d8cad41c364ef7401", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -13,8 +13,8 @@ error: return type notation used on function that is not `async` and does not re\n LL |     fn method() {}\n    |     ----------- this function must be `async` or return `impl Trait`\n ...\n-LL | fn test<T: Trait<method(..): Send>>() {}\n-   |                  ^^^^^^^^^^^^^^^^\n+LL | fn test<T: Trait<method(): Send>>() {}\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: function returns `()`, which is not compatible with associated type return bounds\n "}, {"sha": "d07c123499892352b4fc316dc48fedccf2184480", "filename": "tests/ui/associated-types/issue-63591.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-types%2Fissue-63591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fassociated-types%2Fissue-63591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-63591.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,19 +1,23 @@\n // check-pass\n \n #![feature(associated_type_bounds)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n fn main() {}\n \n-trait Bar { type Assoc; }\n+trait Bar {\n+    type Assoc;\n+}\n \n trait Thing {\n     type Out;\n     fn func() -> Self::Out;\n }\n \n struct AssocIsCopy;\n-impl Bar for AssocIsCopy { type Assoc = u8; }\n+impl Bar for AssocIsCopy {\n+    type Assoc = u8;\n+}\n \n impl Thing for AssocIsCopy {\n     type Out = impl Bar<Assoc: Copy>;"}, {"sha": "b889f616a03118bf03c9391594b81190b5dcf816", "filename": "tests/ui/async-await/in-trait/async-associated-types2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -4,7 +4,7 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n #![allow(incomplete_features)]\n \n use std::future::Future;\n@@ -23,9 +23,7 @@ impl MyTrait for i32 {\n         Self: 'a;\n \n     fn foo<'a>(&'a self) -> Self::Fut<'a> {\n-        async {\n-            *self\n-        }\n+        async { *self }\n     }\n }\n "}, {"sha": "de0487cdb208fbc68c92e23254ed7e5d271b0c18", "filename": "tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -0,0 +1,18 @@\n+trait Foo {\n+    type Bar;\n+}\n+\n+impl Foo for () {\n+    type Bar = impl std::fmt::Debug;\n+    //~^ ERROR: `impl Trait` in associated types is unstable\n+}\n+\n+struct Mop;\n+\n+impl Mop {\n+    type Bop = impl std::fmt::Debug;\n+    //~^ ERROR: `impl Trait` in associated types is unstable\n+    //~| ERROR: inherent associated types are unstable\n+}\n+\n+fn main() {}"}, {"sha": "9a1ded9682251a16dbe31ab274b6155cbb67a325", "filename": "tests/ui/feature-gates/feature-gate-impl_trait_in_assoc_type.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_assoc_type.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: `impl Trait` in associated types is unstable\n+  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:6:16\n+   |\n+LL |     type Bar = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n+\n+error[E0658]: `impl Trait` in associated types is unstable\n+  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:13:16\n+   |\n+LL |     type Bop = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n+\n+error[E0658]: inherent associated types are unstable\n+  --> $DIR/feature-gate-impl_trait_in_assoc_type.rs:13:5\n+   |\n+LL |     type Bop = impl std::fmt::Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c3a371e25e8961a6e44bfa9e9d90679197a97eee", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,21 +1,36 @@\n error[E0658]: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:12:18\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n    |\n-LL | fn foo<T: Trait<m(..): Send>>() {}\n-   |                  ^^^^\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^^^^^^^^^\n    |\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n \n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+  --> $DIR/feature-gate-return_type_notation.rs:7:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error: aborting due to previous error; 1 warning emitted\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^--\n+   |                  |\n+   |                  help: remove these parentheses\n+\n+error[E0220]: associated type `m` not found for `Trait`\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^ associated type `m` not found\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0220, E0658.\n+For more information about an error, try `rustc --explain E0220`."}, {"sha": "52c90c1565cff0bf25c907e33c09325a80fb575b", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,21 +1,22 @@\n-error[E0658]: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:12:18\n-   |\n-LL | fn foo<T: Trait<m(..): Send>>() {}\n-   |                  ^^^^\n-   |\n-   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n-   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n-\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+  --> $DIR/feature-gate-return_type_notation.rs:7:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error: aborting due to previous error; 1 warning emitted\n+warning: return type notation is experimental\n+  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+   |\n+LL | fn foo<T: Trait<m(): Send>>() {}\n+   |                 ^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n+   = warning: unstable syntax can change at any point in the future, causing a hard error!\n+   = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n+\n+warning: 2 warnings emitted\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "5028b9ec9e3de7fc88ac31f707a76d3616d07894", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,9 @@\n // edition: 2021\n // revisions: cfg no\n \n+//[no] check-pass\n+// Since we're not adding new syntax, `cfg`'d out RTN must pass.\n+\n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete\n \n@@ -9,7 +12,11 @@ trait Trait {\n }\n \n #[cfg(cfg)]\n-fn foo<T: Trait<m(..): Send>>() {}\n-//~^ ERROR return type notation is experimental\n+fn foo<T: Trait<m(): Send>>() {}\n+//[cfg]~^ ERROR return type notation is experimental\n+//[cfg]~| ERROR parenthesized generic arguments cannot be used in associated type constraints\n+//[cfg]~| ERROR associated type `m` not found for `Trait`\n+//[no]~^^^^ WARN return type notation is experimental\n+//[no]~| WARN unstable syntax can change at any point in the future, causing a hard error!\n \n fn main() {}"}, {"sha": "7f670919ed60389cbda3bdce3ed6574697c7d28f", "filename": "tests/ui/generator/issue-87142.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgenerator%2Fissue-87142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgenerator%2Fissue-87142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-87142.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -4,7 +4,7 @@\n // Regression test for #87142\n // This test needs the above flags and the \"lib\" crate type.\n \n-#![feature(type_alias_impl_trait, generator_trait, generators)]\n+#![feature(impl_trait_in_assoc_type, generator_trait, generators)]\n #![crate_type = \"lib\"]\n \n use std::ops::Generator;"}, {"sha": "8a5e4a0f3cc396b4fb5be694d0ec96561ec11cea", "filename": "tests/ui/generic-associated-types/issue-86218-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218-2.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Stream {\n     type Item;\n@@ -17,7 +17,9 @@ trait Yay<AdditionalValue> {\n \n impl<T> Yay<T> for () {\n     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-    fn foo<'s>() -> Self::InnerStream<'s> { () }\n+    fn foo<'s>() -> Self::InnerStream<'s> {\n+        ()\n+    }\n }\n \n fn main() {}"}, {"sha": "61cfdd35a8926bc8e928884df015c070c287e486", "filename": "tests/ui/generic-associated-types/issue-86218.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-86218.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Stream {\n     type Item;\n@@ -18,7 +18,9 @@ trait Yay<AdditionalValue> {\n impl<'a> Yay<&'a ()> for () {\n     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n     //^ ERROR does not fulfill the required lifetime\n-    fn foo<'s>() -> Self::InnerStream<'s> { () }\n+    fn foo<'s>() -> Self::InnerStream<'s> {\n+        ()\n+    }\n }\n \n fn main() {}"}, {"sha": "6f737b21f53cdc18ffb0ba310a9cd82a68ad121f", "filename": "tests/ui/generic-associated-types/issue-87258_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-87258_a.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // See https://github.com/rust-lang/rust/issues/87258#issuecomment-883293367\n "}, {"sha": "5a40a61297233d5b8e91fb8843c73756cedcc5a2", "filename": "tests/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,8 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n fn main() {}\n \n+#[rustfmt::skip]\n trait A<'a> {\n     type B<'b>: Clone\n     // FIXME(generic_associated_types): Remove one of the below bounds"}, {"sha": "79d3479af8c8fa1955259547939754e08d31f528", "filename": "tests/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:20:35\n+  --> $DIR/issue-88595.rs:21:35\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n    |                                   ^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/issue-88595.rs:17:6\n+  --> $DIR/issue-88595.rs:18:6\n    |\n LL | impl<'a> A<'a> for C {\n    |      ^^"}, {"sha": "94b07e674e8241bf8d153008b83c35ab889d67e9", "filename": "tests/ui/generic-associated-types/issue-89008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // edition:2021\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::future::Future;\n use std::marker::PhantomData;"}, {"sha": "c4d762796e2deaa7fb845bc59858d5319bb0fc7a", "filename": "tests/ui/generic-associated-types/issue-90014.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,11 +1,13 @@\n // edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::future::Future;\n \n trait MakeFut {\n-    type Fut<'a> where Self: 'a;\n+    type Fut<'a>\n+    where\n+        Self: 'a;\n     fn make_fut<'a>(&'a self) -> Self::Fut<'a>;\n }\n "}, {"sha": "0d49398cac94a8dc7d356cb648731ab1797e7cca", "filename": "tests/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,14 +1,14 @@\n error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n-  --> $DIR/issue-90014.rs:13:20\n+  --> $DIR/issue-90014.rs:15:20\n    |\n-LL |     type Fut<'a> where Self: 'a;\n+LL |     type Fut<'a>\n    |     ------------ definition of `Fut` from trait\n ...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'a` as defined here\n-  --> $DIR/issue-90014.rs:13:14\n+  --> $DIR/issue-90014.rs:15:14\n    |\n LL |     type Fut<'a> = impl Future<Output = ()>;\n    |              ^^"}, {"sha": "0908a0bf39df9ade248df5925ecd7416063f8a10", "filename": "tests/ui/impl-trait/associated-impl-trait-type-generic-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "b5ea90bb0c7c6d527bc7d2631f39791551974197", "filename": "tests/ui/impl-trait/associated-impl-trait-type-trivial.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "f5981261c383847be5f061d493427a40bee3a4ca", "filename": "tests/ui/impl-trait/associated-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "f36a310ddf31061b96eeb9473acd4b4e88a43969", "filename": "tests/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "7a5cb3b3dfcbecca1afd7ea5e8dc97c893f9440e", "filename": "tests/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -3,7 +3,7 @@\n // [drop_tracking_mir] compile-flags: -Zdrop-tracking-mir\n // edition:2018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Send;"}, {"sha": "477c964bd40fd3b6d17757367d59f5a3b9d24711", "filename": "tests/ui/impl-trait/issue-55872-2.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59a05ad118a5d85dd8998babbe5bcd3163303a43/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59a05ad118a5d85dd8998babbe5bcd3163303a43/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=59a05ad118a5d85dd8998babbe5bcd3163303a43", "patch": "@@ -1,8 +0,0 @@\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:17:9\n-   |\n-LL |         async {}\n-   |         ^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "d031271ac08072c54becd08d4237e4bea586d86a", "filename": "tests/ui/impl-trait/issue-55872-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872-3.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // ignore-compare-mode-chalk\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "10850f0a9335e995edff7070564679349e8aaf77", "filename": "tests/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "3f0b0f1a8dee05b58122fcc67bdefc9801aef804", "filename": "tests/ui/impl-trait/issues/issue-82139.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-82139.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Trait {\n     type Associated;"}, {"sha": "4e699e7f302605c5b397d5dcaca1f370609d6318", "filename": "tests/ui/impl-trait/issues/issue-83919.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-83919.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,25 +1,25 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // edition:2021\n \n use std::future::Future;\n \n trait Foo {\n     type T;\n-    type Fut2: Future<Output=Self::T>; // ICE got triggered with traits other than Future here\n-    type Fut: Future<Output=Self::Fut2>;\n+    type Fut2: Future<Output = Self::T>; // ICE got triggered with traits other than Future here\n+    type Fut: Future<Output = Self::Fut2>;\n     fn get_fut(&self) -> Self::Fut;\n }\n \n struct Implementor;\n \n impl Foo for Implementor {\n     type T = u64;\n-    type Fut2 = impl Future<Output=u64>;\n-    type Fut = impl Future<Output=Self::Fut2>;\n+    type Fut2 = impl Future<Output = u64>;\n+    type Fut = impl Future<Output = Self::Fut2>;\n \n     fn get_fut(&self) -> Self::Fut {\n-    //~^ ERROR `{integer}` is not a future\n+        //~^ ERROR `{integer}` is not a future\n         async move {\n             42\n             // 42 does not impl Future and rustc does actually point out the error,"}, {"sha": "7abab5bfb75d5483a13e4f7a41e39f2cb798d928", "filename": "tests/ui/impl-trait/issues/issue-86719.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,11 +1,12 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     type E;\n }\n impl<S> Bar for S {\n     type E = impl ; //~ ERROR at least one trait must be specified\n-    fn foo() -> Self::E { //~ ERROR `foo` is not a member\n+    fn foo() -> Self::E {\n+        //~^ ERROR `foo` is not a member\n         |_| true //~ ERROR type annotations needed\n     }\n }"}, {"sha": "15893df5f945865da6dc501ab483e6bbae2dd30b", "filename": "tests/ui/impl-trait/issues/issue-86719.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -8,12 +8,13 @@ error[E0407]: method `foo` is not a member of trait `Bar`\n   --> $DIR/issue-86719.rs:8:5\n    |\n LL | /     fn foo() -> Self::E {\n+LL | |\n LL | |         |_| true\n LL | |     }\n    | |_____^ not a member of trait `Bar`\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-86719.rs:9:10\n+  --> $DIR/issue-86719.rs:10:10\n    |\n LL |         |_| true\n    |          ^"}, {"sha": "705a4addcb704ebd873c84da0f3741fbc5e652e4", "filename": "tests/ui/impl-trait/issues/issue-87340.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-87340.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,12 +1,12 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait X {\n     type I;\n     fn f() -> Self::I;\n }\n \n impl<T> X for () {\n-//~^ ERROR `T` is not constrained by the impl trait, self type, or predicates\n+    //~^ ERROR `T` is not constrained by the impl trait, self type, or predicates\n     type I = impl Sized;\n     fn f() -> Self::I {}\n }"}, {"sha": "1211625dac9cc81251e299c080bee58417f7981b", "filename": "tests/ui/impl-trait/type-alias-generic-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -3,7 +3,7 @@\n // types in 'item' position when generic parameters are involved\n //\n // run-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Meow {\n     type MeowType;"}, {"sha": "509d2716649e5c745eee970fb5ba245c5030b8bc", "filename": "tests/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,8 @@\n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n #![feature(impl_trait_in_fn_trait_return)]\n+#![feature(custom_inner_attributes)]\n+#![rustfmt::skip]\n use std::fmt::Debug;\n \n // Allowed\n@@ -116,7 +118,7 @@ trait DummyTrait {\n }\n impl DummyTrait for () {\n     type Out = impl Debug;\n-    //~^ ERROR `impl Trait` in type aliases is unstable\n+    //~^ ERROR `impl Trait` in associated types is unstable\n \n     fn in_trait_impl_parameter(_: impl Debug) { }\n     // Allowed"}, {"sha": "3e29343797554e888bfc74b596ec11b6231c8032", "filename": "tests/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:47:51\n+  --> $DIR/where-allowed.rs:49:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           --------^^^^^^^^^^-\n@@ -8,25 +8,25 @@ LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:56:57\n+  --> $DIR/where-allowed.rs:58:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                 --------^^^^^^^^^^-\n    |                                                 |       |\n    |                                                 |       nested `impl Trait` here\n    |                                                 outer `impl Trait`\n \n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:118:16\n+error[E0658]: `impl Trait` in associated types is unstable\n+  --> $DIR/where-allowed.rs:120:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:153:23\n+  --> $DIR/where-allowed.rs:155:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:156:39\n+  --> $DIR/where-allowed.rs:158:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -44,109 +44,109 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n-  --> $DIR/where-allowed.rs:16:40\n+  --> $DIR/where-allowed.rs:18:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n-  --> $DIR/where-allowed.rs:20:42\n+  --> $DIR/where-allowed.rs:22:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer params\n-  --> $DIR/where-allowed.rs:24:38\n+  --> $DIR/where-allowed.rs:26:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n-  --> $DIR/where-allowed.rs:28:40\n+  --> $DIR/where-allowed.rs:30:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:32:49\n+  --> $DIR/where-allowed.rs:34:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:36:51\n+  --> $DIR/where-allowed.rs:38:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:40:55\n+  --> $DIR/where-allowed.rs:42:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:47:51\n+  --> $DIR/where-allowed.rs:49:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:52:53\n+  --> $DIR/where-allowed.rs:54:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:56:57\n+  --> $DIR/where-allowed.rs:58:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:64:38\n+  --> $DIR/where-allowed.rs:66:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:68:40\n+  --> $DIR/where-allowed.rs:70:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:81:32\n+  --> $DIR/where-allowed.rs:83:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:85:41\n+  --> $DIR/where-allowed.rs:87:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:89:27\n+  --> $DIR/where-allowed.rs:91:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:94:25\n+  --> $DIR/where-allowed.rs:96:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in field types\n-  --> $DIR/where-allowed.rs:96:20\n+  --> $DIR/where-allowed.rs:98:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return types\n-  --> $DIR/where-allowed.rs:107:23\n+  --> $DIR/where-allowed.rs:109:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n@@ -155,7 +155,7 @@ LL |     fn in_return() -> impl Debug;\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n-  --> $DIR/where-allowed.rs:124:34\n+  --> $DIR/where-allowed.rs:126:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n@@ -164,127 +164,127 @@ LL |     fn in_trait_impl_return() -> impl Debug { () }\n    = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` params\n-  --> $DIR/where-allowed.rs:137:33\n+  --> $DIR/where-allowed.rs:139:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` return types\n-  --> $DIR/where-allowed.rs:140:31\n+  --> $DIR/where-allowed.rs:142:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `fn` pointer return types\n-  --> $DIR/where-allowed.rs:156:39\n+  --> $DIR/where-allowed.rs:158:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in traits\n-  --> $DIR/where-allowed.rs:161:16\n+  --> $DIR/where-allowed.rs:163:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n-  --> $DIR/where-allowed.rs:166:24\n+  --> $DIR/where-allowed.rs:168:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n-  --> $DIR/where-allowed.rs:171:6\n+  --> $DIR/where-allowed.rs:173:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in impl headers\n-  --> $DIR/where-allowed.rs:177:24\n+  --> $DIR/where-allowed.rs:179:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n-  --> $DIR/where-allowed.rs:183:11\n+  --> $DIR/where-allowed.rs:185:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n-  --> $DIR/where-allowed.rs:190:15\n+  --> $DIR/where-allowed.rs:192:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in bounds\n-  --> $DIR/where-allowed.rs:197:24\n+  --> $DIR/where-allowed.rs:199:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait params\n-  --> $DIR/where-allowed.rs:204:17\n+  --> $DIR/where-allowed.rs:206:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return types\n-  --> $DIR/where-allowed.rs:211:22\n+  --> $DIR/where-allowed.rs:213:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:217:40\n+  --> $DIR/where-allowed.rs:219:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:221:36\n+  --> $DIR/where-allowed.rs:223:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:225:38\n+  --> $DIR/where-allowed.rs:227:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:229:41\n+  --> $DIR/where-allowed.rs:231:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:233:11\n+  --> $DIR/where-allowed.rs:235:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in generic parameter defaults\n-  --> $DIR/where-allowed.rs:240:40\n+  --> $DIR/where-allowed.rs:242:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable bindings\n-  --> $DIR/where-allowed.rs:246:29\n+  --> $DIR/where-allowed.rs:248:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in closure return types\n-  --> $DIR/where-allowed.rs:248:46\n+  --> $DIR/where-allowed.rs:250:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:233:7\n+  --> $DIR/where-allowed.rs:235:7\n    |\n LL | impl <T = impl Debug> T {}\n    |       ^^^^^^^^^^^^^^\n@@ -294,7 +294,7 @@ LL | impl <T = impl Debug> T {}\n    = note: `#[deny(invalid_type_param_default)]` on by default\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/where-allowed.rs:240:36\n+  --> $DIR/where-allowed.rs:242:36\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                    ^^^^^^^^^^^^^^\n@@ -303,7 +303,7 @@ LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/where-allowed.rs:233:1\n+  --> $DIR/where-allowed.rs:235:1\n    |\n LL | impl <T = impl Debug> T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ impl requires a nominal type"}, {"sha": "39bc01f71b5a079e3cb127b947fdbef0f3be9ac6", "filename": "tests/ui/lint/inline-trait-and-foreign-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n #![feature(extern_types)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n #![warn(unused_attributes)]\n "}, {"sha": "07906a43472c2ca1f30800d587ec647ce04e6dbe", "filename": "tests/ui/lint/no-coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flint%2Fno-coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Flint%2Fno-coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fno-coverage.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n #![feature(extern_types)]\n #![feature(no_coverage)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n #![warn(unused_attributes)]\n #![no_coverage]\n //~^ WARN: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly"}, {"sha": "c2b047022ed5a623c1b12e99dfa935258f05858f", "filename": "tests/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -18,7 +18,9 @@ LL |     macro n(a $nt_item b) {\n ...\n LL | complex_nonterminal!(enum E {});\n    | ------------------------------- in this macro invocation\n-   = note: captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\n+   = note: captured metavariables except for `:tt`, `:ident` and `:lifetime` cannot be compared to other tokens\n+   = note: see <https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment> for more information\n+   = help: try using `:tt` instead in the macro definition\n    = note: this error originates in the macro `complex_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "1a2a3ca56c8d4379e2a72373a59b73cfbee6f1f0", "filename": "tests/ui/nll/issue-78561.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fnll%2Fissue-78561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fnll%2Fissue-78561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-78561.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait Trait {\n     type A;"}, {"sha": "d4d379bdb7327ca0317bc5d63f512881bec0c5d7", "filename": "tests/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,7 +2,7 @@\n // This test also ensures that the checks are performed even inside private modules.\n \n #![feature(associated_type_defaults)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n mod m {\n     struct Priv;"}, {"sha": "fe6ed46734cd24f5b3d3f81187fea1effac869df", "filename": "tests/ui/privacy/private-in-public-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-\n+#![feature(impl_trait_in_assoc_type)]\n #![feature(type_alias_impl_trait)]\n #![deny(private_in_public)]\n "}, {"sha": "92d35f5371ab86146663d018f5efed7d14298792", "filename": "tests/ui/proc-macro/derive-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fderive-bad.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -4,7 +4,7 @@\n extern crate derive_bad;\n \n #[derive(A)]\n-//~^ ERROR proc-macro derive produced unparseable tokens\n+//~^ ERROR proc-macro derive produced unparsable tokens\n //~| ERROR expected `:`, found `}`\n struct A; //~ ERROR the name `A` is defined multiple times\n "}, {"sha": "43e97f40ba884d7e8453b656a2cc9b3e0c76f215", "filename": "tests/ui/proc-macro/derive-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fderive-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fderive-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fderive-bad.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -9,7 +9,7 @@ LL | #[derive(A)]\n    |\n    = note: this error originates in the derive macro `A` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: proc-macro derive produced unparseable tokens\n+error: proc-macro derive produced unparsable tokens\n   --> $DIR/derive-bad.rs:6:10\n    |\n LL | #[derive(A)]"}, {"sha": "f48c8bf72d727a516f4d68b977fe4a092773b0f6", "filename": "tests/ui/proc-macro/issue-91800.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fissue-91800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fissue-91800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fissue-91800.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -5,7 +5,7 @@ extern crate issue_91800_macro;\n \n #[derive(MyTrait)]\n //~^ ERROR macros that expand to items must be delimited with braces or followed by a semicolon\n-//~| ERROR proc-macro derive produced unparseable tokens\n+//~| ERROR proc-macro derive produced unparsable tokens\n #[attribute_macro]\n //~^ ERROR macros that expand to items must be delimited with braces or followed by a semicolon\n struct MyStruct;"}, {"sha": "d831d62e919d228fb778a7bcbb16e6320785920a", "filename": "tests/ui/proc-macro/issue-91800.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fissue-91800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Fproc-macro%2Fissue-91800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fissue-91800.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(MyTrait)]\n    |\n    = note: this error originates in the derive macro `MyTrait` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: proc-macro derive produced unparseable tokens\n+error: proc-macro derive produced unparsable tokens\n   --> $DIR/issue-91800.rs:6:10\n    |\n LL | #[derive(MyTrait)]"}, {"sha": "62f66914ee330c2ed7fb837728f7fdef070b9a23", "filename": "tests/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,7 +2,7 @@\n // const generics in an associated opaque type\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt<'a, const C: usize> {\n     type Iter;"}, {"sha": "7c7c68ad60afe1d1d979dba6530d4425f5e63819", "filename": "tests/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // Tests that we don't allow unconstrained lifetime parameters in impls when\n // the lifetime is used in an associated opaque type.\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "81dacbcfb7eccdb3e26aea257f2e2212d464caca", "filename": "tests/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,7 +2,7 @@\n // lifetimes are used in an associated opaque type\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt<'a> {\n     type Iter;"}, {"sha": "551815d021a0a849a5dc6ece871b4f766d9e255a", "filename": "tests/ui/type-alias-impl-trait/associated-type-impl-trait-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n //check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Trait {\n     type Opaque1;"}, {"sha": "444a4e6957fad478d5372d242803b8c16c91805e", "filename": "tests/ui/type-alias-impl-trait/auxiliary/collect_hidden_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcollect_hidden_types.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // edition:2018\n "}, {"sha": "98c9615035af86fabdb3ec985c718201ffc67a6f", "filename": "tests/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n #![crate_type = \"rlib\"]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait View {\n     type Tmp: Iterator<Item = u32>;"}, {"sha": "1824ff5e2fb826839f4549ba58dd5c51bddc82d0", "filename": "tests/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // Ensure that we don't ICE if associated type impl trait is used in an impl\n // with an unconstrained type parameter.\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait X {\n     type I;"}, {"sha": "4f99236f4eab358b89f72c200c7489fc1a18a106", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Callable {\n     type Output;"}, {"sha": "5d5645077c2a4b17650be14ce243f15e6755361e", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Callable {\n     type Output;\n@@ -17,7 +17,9 @@ impl<'a> PlusOne for &'a mut i32 {\n \n impl<T: PlusOne> Callable for T {\n     type Output = impl PlusOne;\n-    fn call(t: T) -> Self::Output { t }\n+    fn call(t: T) -> Self::Output {\n+        t\n+    }\n }\n \n fn test<'a>(y: &'a mut i32) -> impl PlusOne {"}, {"sha": "66e4783157b7c71c7fa3342a9bf84d9c483b7e18", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl PlusOne` captures lifetime that does not appear in bounds\n-  --> $DIR/imply_bounds_from_bounds_param.rs:24:5\n+  --> $DIR/imply_bounds_from_bounds_param.rs:26:5\n    |\n LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n    |         --                     ------------ opaque type defined here"}, {"sha": "8df59c68fefc2e67322beda4d5e59ca7d5194ce7", "filename": "tests/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // Regression test for issue 67856\n \n #![feature(unboxed_closures)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n #![feature(fn_traits)]\n \n trait MyTrait {}"}, {"sha": "e3e2787b66bb4ece66f532d4e3e10ee2cdb3094e", "filename": "tests/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::fmt::Debug;\n "}, {"sha": "3bdb3bf1d5305cb0ada503a869553bcdd86c41a4", "filename": "tests/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,7 +2,7 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n struct Baz<'a> {\n     source: &'a str,"}, {"sha": "3917bb3b6cfbf5d8e9a5965c36226bf56e5c57ec", "filename": "tests/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -3,7 +3,7 @@\n // Ensures that we don't ICE\n \n #![feature(trait_alias)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Foo {\n     type Bar: Baz<Self, Self>;"}, {"sha": "8746545ecc9ef586302005109c879131cce811cb", "filename": "tests/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,5 +1,5 @@\n #![feature(arbitrary_self_types)]\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n use std::ops::Deref;\n "}, {"sha": "841bac5f6a0f409a8a1fde958a376c7d58dea718", "filename": "tests/ui/type-alias-impl-trait/issue-57807-associated-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,7 +2,7 @@\n // that we properly unify associated types within\n // a type alias impl trait\n // check-pass\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     type A;"}, {"sha": "9675867656a967fd250cca5587244a52a9b7b35d", "filename": "tests/ui/type-alias-impl-trait/issue-58887.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "a6173967333c0511b82ea4789d5f9a46b2d0f3ce", "filename": "tests/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -5,7 +5,7 @@ trait Bug {\n }\n \n impl Bug for &() {\n-    type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n+    type Item = impl Bug; //~ ERROR `impl Trait` in associated types is unstable\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR the trait bound `(): Bug` is not satisfied"}, {"sha": "ffc664736355a907a87a6b5b77ca54f5d6533441", "filename": "tests/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: `impl Trait` in type aliases is unstable\n+error[E0658]: `impl Trait` in associated types is unstable\n   --> $DIR/issue-60371.rs:8:17\n    |\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_assoc_type)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:40"}, {"sha": "c4687c29de8e1c99f4a144dbcd70441e9e1643a6", "filename": "tests/ui/type-alias-impl-trait/issue-60564-working.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n // check-pass\n "}, {"sha": "0245eab79694865ee0b690c55f3ded45a97869bf", "filename": "tests/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -2,7 +2,7 @@\n \n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait MyTrait {\n     type AssocType: Send;"}, {"sha": "f582592e9bcc8d4cadd53cf2728bf583569b968b", "filename": "tests/ui/type-alias-impl-trait/issue-74761-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait A {\n     type B;"}, {"sha": "f582592e9bcc8d4cadd53cf2728bf583569b968b", "filename": "tests/ui/type-alias-impl-trait/issue-74761.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait A {\n     type B;"}, {"sha": "2a984c1ed7133d12a6545a0e548b2a7fef284309", "filename": "tests/ui/type-alias-impl-trait/issue-78450.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n pub trait AssociatedImpl {\n     type ImplTrait;"}, {"sha": "f0ba9fa7cec29b516830cdecb9414858d80dd26f", "filename": "tests/ui/type-alias-impl-trait/issue-89952.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait SomeTrait {}\n impl SomeTrait for () {}"}, {"sha": "50207605748c898e8e159fc3732c1b728e6187fb", "filename": "tests/ui/type-alias-impl-trait/issue-90400-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-1.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #90400,\n // taken from https://github.com/rust-lang/rust/issues/90400#issuecomment-954927836\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     fn bar(&self);"}, {"sha": "60ff962ea2e3092376ec438308f8ad1e78402e17", "filename": "tests/ui/type-alias-impl-trait/issue-90400-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #90400,\n // taken from https://github.com/rust-lang/rust/issues/90400#issuecomment-954927836\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Bar {\n     fn bar(&self);"}, {"sha": "d764545f906f3ed17a80d66eb559207d63229cc5", "filename": "tests/ui/type-alias-impl-trait/issue-94429.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(type_alias_impl_trait, generator_trait, generators)]\n+#![feature(impl_trait_in_assoc_type, generator_trait, generators)]\n use std::ops::Generator;\n \n trait Runnable {\n@@ -13,7 +13,7 @@ impl Runnable for Implementor {\n     type Gen = impl Generator<Yield = (), Return = ()>;\n \n     fn run(&mut self) -> Self::Gen {\n-    //~^ ERROR: type mismatch resolving\n+        //~^ ERROR: type mismatch resolving\n         move || {\n             yield 1;\n         }"}, {"sha": "296a3f3e30072d3cd36f479292fc5591f2fc7c9a", "filename": "tests/ui/type-alias-impl-trait/type-alias-impl-trait-unconstrained-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4087deaccd8bceb458c9610d29744d5f3504c5c0/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-unconstrained-lifetime.rs?ref=4087deaccd8bceb458c9610d29744d5f3504c5c0", "patch": "@@ -1,6 +1,6 @@\n // regression test for #74018\n \n-#![feature(type_alias_impl_trait)]\n+#![feature(impl_trait_in_assoc_type)]\n \n trait Trait {\n     type Associated;"}]}