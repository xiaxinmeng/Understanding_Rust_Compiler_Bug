{"sha": "2744bcd693671869d17bc9b8db013d487fe465b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NDRiY2Q2OTM2NzE4NjlkMTdiYzliOGRiMDEzZDQ4N2ZlNDY1YjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-26T20:58:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-26T20:58:26Z"}, "message": "Revert \"Use cstrcache in C_str, C_cstr, C_shape.\"\n\nThis reverts commit d5173b1f2cc174d53272be0d14a8290c05b8670a.", "tree": {"sha": "5a08b51a913ac9aab94868b2b7097f9c7c3591a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a08b51a913ac9aab94868b2b7097f9c7c3591a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2744bcd693671869d17bc9b8db013d487fe465b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2744bcd693671869d17bc9b8db013d487fe465b1", "html_url": "https://github.com/rust-lang/rust/commit/2744bcd693671869d17bc9b8db013d487fe465b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2744bcd693671869d17bc9b8db013d487fe465b1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0820662c9bdc3d3150b7b7317bb165556c2348b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0820662c9bdc3d3150b7b7317bb165556c2348b", "html_url": "https://github.com/rust-lang/rust/commit/f0820662c9bdc3d3150b7b7317bb165556c2348b"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "022ad4cddedc7cfc93a10d9dc0a3041a42430587", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2744bcd693671869d17bc9b8db013d487fe465b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2744bcd693671869d17bc9b8db013d487fe465b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2744bcd693671869d17bc9b8db013d487fe465b1", "patch": "@@ -6395,8 +6395,7 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n           task_type: task_type,\n           builder: BuilderRef_res(llvm::LLVMCreateBuilder()),\n           shape_cx: shape::mk_ctxt(llmod),\n-          gc_cx: gc::mk_ctxt(),\n-          cstrcache: cstrcache::mk()};\n+          gc_cx: gc::mk_ctxt()};\n     let cx = new_local_ctxt(ccx);\n     collect_items(ccx, crate);\n     collect_tag_ctors(ccx, crate);"}, {"sha": "8edbcbdbcf96e0bbc4393a294bd1913cda6d2adb", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2744bcd693671869d17bc9b8db013d487fe465b1/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2744bcd693671869d17bc9b8db013d487fe465b1/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=2744bcd693671869d17bc9b8db013d487fe465b1", "patch": "@@ -154,8 +154,7 @@ type crate_ctxt =\n      task_type: TypeRef,\n      builder: BuilderRef_res,\n      shape_cx: shape::ctxt,\n-     gc_cx: gc::ctxt,\n-     cstrcache: cstrcache::t};\n+     gc_cx: gc::ctxt};\n \n type local_ctxt =\n     {path: [str],\n@@ -843,11 +842,10 @@ fn C_u8(i: uint) -> ValueRef { ret C_integral(T_i8(), i, False); }\n // This is a 'c-like' raw string, which differs from\n // our boxed-and-length-annotated strings.\n fn C_cstr(cx: &@crate_ctxt, s: &str) -> ValueRef {\n-    let sc = llvm::LLVMConstString(safe_sbuf(cx, s),\n-                                   str::byte_len(s), False);\n+    let sc = llvm::LLVMConstString(str::buf(s), str::byte_len(s), False);\n     let g =\n         llvm::LLVMAddGlobal(cx.llmod, val_ty(sc),\n-                            safe_sbuf(cx, cx.names.next(\"str\")));\n+                            str::buf(cx.names.next(\"str\")));\n     llvm::LLVMSetInitializer(g, sc);\n     llvm::LLVMSetGlobalConstant(g, True);\n     llvm::LLVMSetLinkage(g, lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -865,10 +863,10 @@ fn C_str(cx: &@crate_ctxt, s: &str) -> ValueRef {\n     let box =\n         C_struct([C_int(abi::const_refcount as int), C_int(len + 1u as int),\n                   C_int(len + 1u as int), C_int(0),\n-                  llvm::LLVMConstString(safe_sbuf(cx, s), len, False)]);\n+                  llvm::LLVMConstString(str::buf(s), len, False)]);\n     let g =\n         llvm::LLVMAddGlobal(cx.llmod, val_ty(box),\n-                            safe_sbuf(cx, cx.names.next(\"str\")));\n+                            str::buf(cx.names.next(\"str\")));\n     llvm::LLVMSetInitializer(g, box);\n     llvm::LLVMSetGlobalConstant(g, True);\n     llvm::LLVMSetLinkage(g, lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -911,18 +909,14 @@ fn C_shape(ccx: &@crate_ctxt, bytes: &[u8]) -> ValueRef {\n     let llshape = C_bytes(bytes);\n     let llglobal =\n         llvm::LLVMAddGlobal(ccx.llmod, val_ty(llshape),\n-                            safe_sbuf(ccx, ccx.names.next(\"shape\")));\n+                            str::buf(ccx.names.next(\"shape\")));\n     llvm::LLVMSetInitializer(llglobal, llshape);\n     llvm::LLVMSetGlobalConstant(llglobal, True);\n     llvm::LLVMSetLinkage(llglobal,\n                          lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n     ret llvm::LLVMConstPointerCast(llglobal, T_ptr(T_i8()));\n }\n \n-fn safe_sbuf(ccx: &@crate_ctxt, s: &str) -> str::rustrt::sbuf {\n-    cstrcache::get_cstr(ccx.cstrcache, s)\n-}\n-\n //\n // Local Variables:\n // mode: rust"}]}