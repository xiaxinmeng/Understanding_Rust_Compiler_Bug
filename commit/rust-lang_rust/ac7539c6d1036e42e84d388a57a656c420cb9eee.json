{"sha": "ac7539c6d1036e42e84d388a57a656c420cb9eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNzUzOWM2ZDEwMzZlNDJlODRkMzg4YTU3YTY1NmM0MjBjYjllZWU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-06-24T11:15:37Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-06-30T15:06:16Z"}, "message": "Deny unsafe ops in unsafe fns, part 3", "tree": {"sha": "578072cd4e4e8ec41b48068d022c2da3d7b9df84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578072cd4e4e8ec41b48068d022c2da3d7b9df84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac7539c6d1036e42e84d388a57a656c420cb9eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac7539c6d1036e42e84d388a57a656c420cb9eee", "html_url": "https://github.com/rust-lang/rust/commit/ac7539c6d1036e42e84d388a57a656c420cb9eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac7539c6d1036e42e84d388a57a656c420cb9eee/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a515e963cf2711192495802d7bbf2e49979cdf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a515e963cf2711192495802d7bbf2e49979cdf2", "html_url": "https://github.com/rust-lang/rust/commit/8a515e963cf2711192495802d7bbf2e49979cdf2"}], "stats": {"total": 294, "additions": 181, "deletions": 113}, "files": [{"sha": "028beb86e68ba9f3d38cd29df856a57481945bbf", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=ac7539c6d1036e42e84d388a57a656c420cb9eee", "patch": "@@ -9,6 +9,7 @@\n //! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::convert::FloatToInt;\n #[cfg(not(test))]\n@@ -629,7 +630,9 @@ impl f32 {\n     where\n         Self: FloatToInt<Int>,\n     {\n-        FloatToInt::<Int>::to_int_unchecked(self)\n+        // SAFETY: the caller must uphold the safety contract for\n+        // `FloatToInt::to_int_unchecked`.\n+        unsafe { FloatToInt::<Int>::to_int_unchecked(self) }\n     }\n \n     /// Raw transmutation to `u32`."}, {"sha": "74e38c128b37710fefd2eef6a53f8f07d37080fa", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=ac7539c6d1036e42e84d388a57a656c420cb9eee", "patch": "@@ -9,6 +9,7 @@\n //! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::convert::FloatToInt;\n #[cfg(not(test))]\n@@ -643,7 +644,9 @@ impl f64 {\n     where\n         Self: FloatToInt<Int>,\n     {\n-        FloatToInt::<Int>::to_int_unchecked(self)\n+        // SAFETY: the caller must uphold the safety contract for\n+        // `FloatToInt::to_int_unchecked`.\n+        unsafe { FloatToInt::<Int>::to_int_unchecked(self) }\n     }\n \n     /// Raw transmutation to `u64`."}, {"sha": "918eea7acb3ad4a19423166c16f7ddc1e3f0b957", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ac7539c6d1036e42e84d388a57a656c420cb9eee", "patch": "@@ -3,6 +3,7 @@\n //! Numeric traits and functions for the built-in numeric types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::convert::Infallible;\n use crate::fmt;\n@@ -74,7 +75,8 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 #[rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\")]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n-                    Self(n)\n+                    // SAFETY: this is guaranteed to be safe by the caller.\n+                    unsafe { Self(n) }\n                 }\n \n                 /// Creates a non-zero if the given value is not zero.\n@@ -762,7 +764,9 @@ cannot occur. This results in undefined behavior when `self + rhs > \", stringify\n                           without modifying the original\"]\n             #[inline]\n             pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n-                intrinsics::unchecked_add(self, rhs)\n+                // SAFETY: the caller must uphold the safety contract for\n+                // `unchecked_add`.\n+                unsafe { intrinsics::unchecked_add(self, rhs) }\n             }\n         }\n \n@@ -804,7 +808,9 @@ cannot occur. This results in undefined behavior when `self - rhs > \", stringify\n                           without modifying the original\"]\n             #[inline]\n             pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n-                intrinsics::unchecked_sub(self, rhs)\n+                // SAFETY: the caller must uphold the safety contract for\n+                // `unchecked_sub`.\n+                unsafe { intrinsics::unchecked_sub(self, rhs) }\n             }\n         }\n \n@@ -846,7 +852,9 @@ cannot occur. This results in undefined behavior when `self * rhs > \", stringify\n                           without modifying the original\"]\n             #[inline]\n             pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n-                intrinsics::unchecked_mul(self, rhs)\n+                // SAFETY: the caller must uphold the safety contract for\n+                // `unchecked_mul`.\n+                unsafe { intrinsics::unchecked_mul(self, rhs) }\n             }\n         }\n \n@@ -2998,7 +3006,9 @@ cannot occur. This results in undefined behavior when `self + rhs > \", stringify\n                           without modifying the original\"]\n             #[inline]\n             pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n-                intrinsics::unchecked_add(self, rhs)\n+                // SAFETY: the caller must uphold the safety contract for\n+                // `unchecked_add`.\n+                unsafe { intrinsics::unchecked_add(self, rhs) }\n             }\n         }\n \n@@ -3038,7 +3048,9 @@ cannot occur. This results in undefined behavior when `self - rhs > \", stringify\n                           without modifying the original\"]\n             #[inline]\n             pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n-                intrinsics::unchecked_sub(self, rhs)\n+                // SAFETY: the caller must uphold the safety contract for\n+                // `unchecked_sub`.\n+                unsafe { intrinsics::unchecked_sub(self, rhs) }\n             }\n         }\n \n@@ -3078,7 +3090,9 @@ cannot occur. This results in undefined behavior when `self * rhs > \", stringify\n                           without modifying the original\"]\n             #[inline]\n             pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n-                intrinsics::unchecked_mul(self, rhs)\n+                // SAFETY: the caller must uphold the safety contract for\n+                // `unchecked_mul`.\n+                unsafe { intrinsics::unchecked_mul(self, rhs) }\n             }\n         }\n "}, {"sha": "359c39a065f51ef9c4acd75903a10dee1a2f1497", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 150, "deletions": 104, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=ac7539c6d1036e42e84d388a57a656c420cb9eee", "patch": "@@ -115,6 +115,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![cfg_attr(not(target_has_atomic_load_store = \"8\"), allow(dead_code))]\n #![cfg_attr(not(target_has_atomic_load_store = \"8\"), allow(unused_imports))]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use self::Ordering::*;\n \n@@ -2335,61 +2336,76 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n \n #[inline]\n unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {\n-    match order {\n-        Release => intrinsics::atomic_store_rel(dst, val),\n-        Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_store(dst, val),\n-        Acquire => panic!(\"there is no such thing as an acquire store\"),\n-        AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_store`.\n+    unsafe {\n+        match order {\n+            Release => intrinsics::atomic_store_rel(dst, val),\n+            Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_store(dst, val),\n+            Acquire => panic!(\"there is no such thing as an acquire store\"),\n+            AcqRel => panic!(\"there is no such thing as an acquire/release store\"),\n+        }\n     }\n }\n \n #[inline]\n unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_load_acq(dst),\n-        Relaxed => intrinsics::atomic_load_relaxed(dst),\n-        SeqCst => intrinsics::atomic_load(dst),\n-        Release => panic!(\"there is no such thing as a release load\"),\n-        AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_load`.\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_load_acq(dst),\n+            Relaxed => intrinsics::atomic_load_relaxed(dst),\n+            SeqCst => intrinsics::atomic_load(dst),\n+            Release => panic!(\"there is no such thing as a release load\"),\n+            AcqRel => panic!(\"there is no such thing as an acquire/release load\"),\n+        }\n     }\n }\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_xchg_acq(dst, val),\n-        Release => intrinsics::atomic_xchg_rel(dst, val),\n-        AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_xchg(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_swap`.\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_xchg_acq(dst, val),\n+            Release => intrinsics::atomic_xchg_rel(dst, val),\n+            AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_xchg(dst, val),\n+        }\n     }\n }\n \n /// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_xadd_acq(dst, val),\n-        Release => intrinsics::atomic_xadd_rel(dst, val),\n-        AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_xadd(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_add`.\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_xadd_acq(dst, val),\n+            Release => intrinsics::atomic_xadd_rel(dst, val),\n+            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_xadd(dst, val),\n+        }\n     }\n }\n \n /// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_xsub_acq(dst, val),\n-        Release => intrinsics::atomic_xsub_rel(dst, val),\n-        AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_xsub(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_sub`.\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_xsub_acq(dst, val),\n+            Release => intrinsics::atomic_xsub_rel(dst, val),\n+            AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_xsub(dst, val),\n+        }\n     }\n }\n \n@@ -2402,19 +2418,22 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n     success: Ordering,\n     failure: Ordering,\n ) -> Result<T, T> {\n-    let (val, ok) = match (success, failure) {\n-        (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),\n-        (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),\n-        (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),\n-        (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),\n-        (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),\n-        (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),\n-        (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n-        (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n-        (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n-        (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n-        (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n-        _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_compare_exchange`.\n+    let (val, ok) = unsafe {\n+        match (success, failure) {\n+            (Acquire, Acquire) => intrinsics::atomic_cxchg_acq(dst, old, new),\n+            (Release, Relaxed) => intrinsics::atomic_cxchg_rel(dst, old, new),\n+            (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel(dst, old, new),\n+            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed(dst, old, new),\n+            (SeqCst, SeqCst) => intrinsics::atomic_cxchg(dst, old, new),\n+            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acq_failrelaxed(dst, old, new),\n+            (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n+            (SeqCst, Relaxed) => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n+            (SeqCst, Acquire) => intrinsics::atomic_cxchg_failacq(dst, old, new),\n+            (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n+            (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n+        }\n     };\n     if ok { Ok(val) } else { Err(val) }\n }\n@@ -2428,120 +2447,147 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     success: Ordering,\n     failure: Ordering,\n ) -> Result<T, T> {\n-    let (val, ok) = match (success, failure) {\n-        (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acq(dst, old, new),\n-        (Release, Relaxed) => intrinsics::atomic_cxchgweak_rel(dst, old, new),\n-        (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel(dst, old, new),\n-        (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed(dst, old, new),\n-        (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak(dst, old, new),\n-        (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acq_failrelaxed(dst, old, new),\n-        (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n-        (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n-        (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n-        (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n-        (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n-        _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_compare_exchange_weak`.\n+    let (val, ok) = unsafe {\n+        match (success, failure) {\n+            (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acq(dst, old, new),\n+            (Release, Relaxed) => intrinsics::atomic_cxchgweak_rel(dst, old, new),\n+            (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel(dst, old, new),\n+            (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed(dst, old, new),\n+            (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak(dst, old, new),\n+            (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acq_failrelaxed(dst, old, new),\n+            (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n+            (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n+            (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n+            (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n+            (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n+        }\n     };\n     if ok { Ok(val) } else { Err(val) }\n }\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_and_acq(dst, val),\n-        Release => intrinsics::atomic_and_rel(dst, val),\n-        AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_and(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_and`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_and_acq(dst, val),\n+            Release => intrinsics::atomic_and_rel(dst, val),\n+            AcqRel => intrinsics::atomic_and_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_and_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_and(dst, val),\n+        }\n     }\n }\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_nand_acq(dst, val),\n-        Release => intrinsics::atomic_nand_rel(dst, val),\n-        AcqRel => intrinsics::atomic_nand_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_nand(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_nand`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_nand_acq(dst, val),\n+            Release => intrinsics::atomic_nand_rel(dst, val),\n+            AcqRel => intrinsics::atomic_nand_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_nand(dst, val),\n+        }\n     }\n }\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_or_acq(dst, val),\n-        Release => intrinsics::atomic_or_rel(dst, val),\n-        AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_or(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_or`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_or_acq(dst, val),\n+            Release => intrinsics::atomic_or_rel(dst, val),\n+            AcqRel => intrinsics::atomic_or_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_or_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_or(dst, val),\n+        }\n     }\n }\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_xor_acq(dst, val),\n-        Release => intrinsics::atomic_xor_rel(dst, val),\n-        AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_xor(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_xor`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_xor_acq(dst, val),\n+            Release => intrinsics::atomic_xor_rel(dst, val),\n+            AcqRel => intrinsics::atomic_xor_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_xor_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_xor(dst, val),\n+        }\n     }\n }\n \n /// returns the max value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_max_acq(dst, val),\n-        Release => intrinsics::atomic_max_rel(dst, val),\n-        AcqRel => intrinsics::atomic_max_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_max_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_max(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_max`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_max_acq(dst, val),\n+            Release => intrinsics::atomic_max_rel(dst, val),\n+            AcqRel => intrinsics::atomic_max_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_max_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_max(dst, val),\n+        }\n     }\n }\n \n /// returns the min value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_min_acq(dst, val),\n-        Release => intrinsics::atomic_min_rel(dst, val),\n-        AcqRel => intrinsics::atomic_min_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_min_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_min(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_min`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_min_acq(dst, val),\n+            Release => intrinsics::atomic_min_rel(dst, val),\n+            AcqRel => intrinsics::atomic_min_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_min_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_min(dst, val),\n+        }\n     }\n }\n \n /// returns the max value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_umax_acq(dst, val),\n-        Release => intrinsics::atomic_umax_rel(dst, val),\n-        AcqRel => intrinsics::atomic_umax_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_umax_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_umax(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_umax`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_umax_acq(dst, val),\n+            Release => intrinsics::atomic_umax_rel(dst, val),\n+            AcqRel => intrinsics::atomic_umax_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_umax_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_umax(dst, val),\n+        }\n     }\n }\n \n /// returns the min value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n-    match order {\n-        Acquire => intrinsics::atomic_umin_acq(dst, val),\n-        Release => intrinsics::atomic_umin_rel(dst, val),\n-        AcqRel => intrinsics::atomic_umin_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_umin_relaxed(dst, val),\n-        SeqCst => intrinsics::atomic_umin(dst, val),\n+    // SAFETY: the caller must uphold the safety contract for `atomic_umin`\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_umin_acq(dst, val),\n+            Release => intrinsics::atomic_umin_rel(dst, val),\n+            AcqRel => intrinsics::atomic_umin_acqrel(dst, val),\n+            Relaxed => intrinsics::atomic_umin_relaxed(dst, val),\n+            SeqCst => intrinsics::atomic_umin(dst, val),\n+        }\n     }\n }\n "}, {"sha": "68a5e20a66fdc8a89bfad516b3057a3a6ac2bb23", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7539c6d1036e42e84d388a57a656c420cb9eee/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=ac7539c6d1036e42e84d388a57a656c420cb9eee", "patch": "@@ -44,6 +44,8 @@\n #![feature(option_unwrap_none)]\n #![feature(peekable_next_if)]\n #![feature(partition_point)]\n+#![feature(unsafe_block_in_unsafe_fn)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;\n "}]}