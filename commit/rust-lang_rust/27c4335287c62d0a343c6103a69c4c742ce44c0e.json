{"sha": "27c4335287c62d0a343c6103a69c4c742ce44c0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzQzMzUyODdjNjJkMGEzNDNjNjEwM2E2OWM0Yzc0MmNlNDRjMGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T10:52:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T10:52:13Z"}, "message": "Auto merge of #56983 - ljedrz:parallel_query_tweaks, r=Zoxc\n\nParallel query tweaks\n\n- faster stack reversal in `remove_cycle`\n- insert visited queries more eagerly\n- simplify stack trimming in `cycle_check`\n- minor refactoring in 2 spots", "tree": {"sha": "7ff2ce6692a497d6984f9904e0a511eb9004e2fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff2ce6692a497d6984f9904e0a511eb9004e2fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c4335287c62d0a343c6103a69c4c742ce44c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c4335287c62d0a343c6103a69c4c742ce44c0e", "html_url": "https://github.com/rust-lang/rust/commit/27c4335287c62d0a343c6103a69c4c742ce44c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c4335287c62d0a343c6103a69c4c742ce44c0e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73dcb52198d2e4949439a5f8d5e0233d6d05ccaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/73dcb52198d2e4949439a5f8d5e0233d6d05ccaf", "html_url": "https://github.com/rust-lang/rust/commit/73dcb52198d2e4949439a5f8d5e0233d6d05ccaf"}, {"sha": "dfe187d348aa74b47c4caaac112945adfd47456e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe187d348aa74b47c4caaac112945adfd47456e", "html_url": "https://github.com/rust-lang/rust/commit/dfe187d348aa74b47c4caaac112945adfd47456e"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "ba7226610979d063e56c01dbec32af363aa87874", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27c4335287c62d0a343c6103a69c4c742ce44c0e/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4335287c62d0a343c6103a69c4c742ce44c0e/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=27c4335287c62d0a343c6103a69c4c742ce44c0e", "patch": "@@ -303,12 +303,12 @@ fn cycle_check<'tcx>(query: Lrc<QueryJob<'tcx>>,\n                      stack: &mut Vec<(Span, Lrc<QueryJob<'tcx>>)>,\n                      visited: &mut FxHashSet<*const QueryJob<'tcx>>\n ) -> Option<Option<Waiter<'tcx>>> {\n-    if visited.contains(&query.as_ptr()) {\n+    if !visited.insert(query.as_ptr()) {\n         return if let Some(p) = stack.iter().position(|q| q.1.as_ptr() == query.as_ptr()) {\n             // We detected a query cycle, fix up the initial span and return Some\n \n             // Remove previous stack entries\n-            stack.splice(0..p, iter::empty());\n+            stack.drain(0..p);\n             // Replace the span for the first query with the cycle cause\n             stack[0].0 = span;\n             Some(None)\n@@ -317,8 +317,7 @@ fn cycle_check<'tcx>(query: Lrc<QueryJob<'tcx>>,\n         }\n     }\n \n-    // Mark this query is visited and add it to the stack\n-    visited.insert(query.as_ptr());\n+    // Query marked as visited is added it to the stack\n     stack.push((span, query.clone()));\n \n     // Visit all the waiters\n@@ -343,7 +342,7 @@ fn connected_to_root<'tcx>(\n     visited: &mut FxHashSet<*const QueryJob<'tcx>>\n ) -> bool {\n     // We already visited this or we're deliberately ignoring it\n-    if visited.contains(&query.as_ptr()) {\n+    if !visited.insert(query.as_ptr()) {\n         return false;\n     }\n \n@@ -352,8 +351,6 @@ fn connected_to_root<'tcx>(\n         return true;\n     }\n \n-    visited.insert(query.as_ptr());\n-\n     visit_waiters(query, |_, successor| {\n         if connected_to_root(successor, visited) {\n             Some(None)\n@@ -403,11 +400,9 @@ fn remove_cycle<'tcx>(\n                                       DUMMY_SP,\n                                       &mut stack,\n                                       &mut visited) {\n-        // Reverse the stack so earlier entries require later entries\n-        stack.reverse();\n-\n-        // The stack is a vector of pairs of spans and queries\n-        let (mut spans, queries): (Vec<_>, Vec<_>) = stack.into_iter().unzip();\n+        // The stack is a vector of pairs of spans and queries; reverse it so that\n+        // the earlier entries require later entries\n+        let (mut spans, queries): (Vec<_>, Vec<_>) = stack.into_iter().rev().unzip();\n \n         // Shift the spans so that queries are matched with the span for their waitee\n         spans.rotate_right(1);\n@@ -424,7 +419,7 @@ fn remove_cycle<'tcx>(\n \n         // Find the queries in the cycle which are\n         // connected to queries outside the cycle\n-        let entry_points: Vec<_> = stack.iter().filter_map(|(span, query)| {\n+        let entry_points = stack.iter().filter_map(|(span, query)| {\n             if query.parent.is_none() {\n                 // This query is connected to the root (it has no query parent)\n                 Some((*span, query.clone(), None))\n@@ -449,10 +444,7 @@ fn remove_cycle<'tcx>(\n                     Some((*span, query.clone(), Some(waiter)))\n                 }\n             }\n-        }).collect();\n-\n-        let entry_points: Vec<(Span, Lrc<QueryJob<'tcx>>, Option<(Span, Lrc<QueryJob<'tcx>>)>)>\n-         = entry_points;\n+        }).collect::<Vec<(Span, Lrc<QueryJob<'tcx>>, Option<(Span, Lrc<QueryJob<'tcx>>)>)>>();\n \n         // Deterministically pick an entry point\n         let (_, entry_point, usage) = pick_query(tcx, &entry_points, |e| (e.0, e.1.clone()));"}, {"sha": "94456e3e773d8b89c11f69894a3f337a37ae6745", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27c4335287c62d0a343c6103a69c4c742ce44c0e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c4335287c62d0a343c6103a69c4c742ce44c0e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=27c4335287c62d0a343c6103a69c4c742ce44c0e", "patch": "@@ -398,11 +398,7 @@ impl<'sess> OnDiskCache<'sess> {\n                              -> Option<T>\n         where T: Decodable\n     {\n-        let pos = if let Some(&pos) = index.get(&dep_node_index) {\n-            pos\n-        } else {\n-            return None\n-        };\n+        let pos = index.get(&dep_node_index).cloned()?;\n \n         // Initialize the cnum_map using the value from the thread which finishes the closure first\n         self.cnum_map.init_nonlocking_same(|| {"}]}