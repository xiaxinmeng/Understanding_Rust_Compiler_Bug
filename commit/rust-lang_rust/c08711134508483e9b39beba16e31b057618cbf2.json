{"sha": "c08711134508483e9b39beba16e31b057618cbf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODcxMTEzNDUwODQ4M2U5YjM5YmViYTE2ZTMxYjA1NzYxOGNiZjI=", "commit": {"author": {"name": "Avi Dessauer", "email": "avi.the.coder@gmail.com", "date": "2019-10-06T07:42:53Z"}, "committer": {"name": "Avi Dessauer", "email": "avi.the.coder@gmail.com", "date": "2019-10-06T07:42:53Z"}, "message": "Use shorthand initialization in rustdoc", "tree": {"sha": "b03e5cbe448211185ba1c808da89d70c8e6a4c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b03e5cbe448211185ba1c808da89d70c8e6a4c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08711134508483e9b39beba16e31b057618cbf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08711134508483e9b39beba16e31b057618cbf2", "html_url": "https://github.com/rust-lang/rust/commit/c08711134508483e9b39beba16e31b057618cbf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08711134508483e9b39beba16e31b057618cbf2/comments", "author": {"login": "Avi-D-coder", "id": 29133776, "node_id": "MDQ6VXNlcjI5MTMzNzc2", "avatar_url": "https://avatars.githubusercontent.com/u/29133776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avi-D-coder", "html_url": "https://github.com/Avi-D-coder", "followers_url": "https://api.github.com/users/Avi-D-coder/followers", "following_url": "https://api.github.com/users/Avi-D-coder/following{/other_user}", "gists_url": "https://api.github.com/users/Avi-D-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avi-D-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avi-D-coder/subscriptions", "organizations_url": "https://api.github.com/users/Avi-D-coder/orgs", "repos_url": "https://api.github.com/users/Avi-D-coder/repos", "events_url": "https://api.github.com/users/Avi-D-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/Avi-D-coder/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Avi-D-coder", "id": 29133776, "node_id": "MDQ6VXNlcjI5MTMzNzc2", "avatar_url": "https://avatars.githubusercontent.com/u/29133776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avi-D-coder", "html_url": "https://github.com/Avi-D-coder", "followers_url": "https://api.github.com/users/Avi-D-coder/followers", "following_url": "https://api.github.com/users/Avi-D-coder/following{/other_user}", "gists_url": "https://api.github.com/users/Avi-D-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avi-D-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avi-D-coder/subscriptions", "organizations_url": "https://api.github.com/users/Avi-D-coder/orgs", "repos_url": "https://api.github.com/users/Avi-D-coder/repos", "events_url": "https://api.github.com/users/Avi-D-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/Avi-D-coder/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "html_url": "https://github.com/rust-lang/rust/commit/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "212a09ee6e6341e643b33bcdac095f69eb165686", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c08711134508483e9b39beba16e31b057618cbf2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08711134508483e9b39beba16e31b057618cbf2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c08711134508483e9b39beba16e31b057618cbf2", "patch": "@@ -198,7 +198,7 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n             Item {\n                 source: Span::empty(),\n                 name: Some(kw.clone()),\n-                attrs: attrs,\n+                attrs,\n                 visibility: Public,\n                 stability: get_stability(cx, def_id),\n                 deprecation: get_deprecation(cx, def_id),\n@@ -1570,7 +1570,7 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n                     did: cx.tcx.hir().local_def_id(self.hir_id),\n                     bounds: self.bounds.clean(cx),\n                     default: default.clean(cx),\n-                    synthetic: synthetic,\n+                    synthetic,\n                 })\n             }\n             hir::GenericParamKind::Const { ref ty } => {\n@@ -2213,7 +2213,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n         let is_spotlight = attrs.has_doc_flag(sym::spotlight);\n         Item {\n             name: Some(self.name.clean(cx)),\n-            attrs: attrs,\n+            attrs,\n             source: self.whence.clean(cx),\n             def_id: cx.tcx.hir().local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n@@ -2844,7 +2844,7 @@ impl Clean<Type> for hir::Ty {\n                 } else {\n                     Some(l.clean(cx))\n                 };\n-                BorrowedRef {lifetime: lifetime, mutability: m.mutbl.clean(cx),\n+                BorrowedRef {lifetime, mutability: m.mutbl.clean(cx),\n                              type_: box m.ty.clean(cx)}\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n@@ -3102,9 +3102,9 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let path = external_path(cx, cx.tcx.item_name(did),\n                                          None, false, vec![], InternalSubsts::empty());\n                 ResolvedPath {\n-                    path: path,\n+                    path,\n                     param_names: None,\n-                    did: did,\n+                    did,\n                     is_generic: false,\n                 }\n             }\n@@ -4274,7 +4274,7 @@ fn resolve_type(cx: &DocContext<'_>,\n         _ => false,\n     };\n     let did = register_res(&*cx, path.res);\n-    ResolvedPath { path: path, param_names: None, did: did, is_generic: is_generic }\n+    ResolvedPath { path, param_names: None, did, is_generic }\n }\n \n pub fn register_res(cx: &DocContext<'_>, res: Res) -> DefId {"}, {"sha": "00eb8f164fce72301a97b5c158c692e2fb6af4da", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08711134508483e9b39beba16e31b057618cbf2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08711134508483e9b39beba16e31b057618cbf2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c08711134508483e9b39beba16e31b057618cbf2", "patch": "@@ -487,8 +487,8 @@ where R: 'static + Send,\n         krate.version = crate_version;\n \n         f(Output {\n-            krate: krate,\n-            renderinfo: renderinfo,\n+            krate,\n+            renderinfo,\n             renderopts,\n         })\n     });"}]}