{"sha": "0f8c96c92689af8378dbe9f466c6bf15a3a27458", "node_id": "C_kwDOAAsO6NoAKDBmOGM5NmM5MjY4OWFmODM3OGRiZTlmNDY2YzZiZjE1YTNhMjc0NTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-08T14:46:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-08T14:46:01Z"}, "message": "Merge #11238\n\n11238: fix: shrink the span of errors from attribute macros and derives r=jonas-schievink a=jonas-schievink\n\nSome procedural macros tend to get very large invocations, for example RTIC's, leading to issues like https://github.com/rtic-rs/cortex-m-rtic/issues/582, where almost the entire screen is underlined while editing incomplete code in the macro.\r\n\r\nThis PR shrinks the spans of errors from attribute macros and derives to point only at the attribute, which also matches rustc more closely.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "86cc1eb6c7f90d6f718fbe3bc2955276b316f91f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cc1eb6c7f90d6f718fbe3bc2955276b316f91f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f8c96c92689af8378dbe9f466c6bf15a3a27458", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2aOpCRBK7hj4Ov3rIwAARQMIAGCFhvz50WPwmVhvyPPH5wyI\nyJdvuyhB9+Kg3NJXWBruy1+okG2Qyq5lyQ495k/RXow6/vOsiHyQjPHqfq4m61Kv\neFbtcJYhzp2kBzS9vUtWx34wFU7a03bwKaQQpM++fLInKzt3mRBeUUjhSgTperkd\nC0fKrb4pFHlZa2stBwV5AqTTVt7Y10sjm24f2kvcSSmty3fGono+ZPAc0JkCfHPH\nBtrEvr5EKgUPn/66Sx5ftTunMuC9DL3ynfu2TjpmbB8OC4COFQi7mhlL7ZtBJVKy\nMTLcI8UZh3DzJVGWQD2dFL2vY1nf4A6FoDOob+OjwWtu3bn556hIaH5As9uFSwE=\n=rfyd\n-----END PGP SIGNATURE-----\n", "payload": "tree 86cc1eb6c7f90d6f718fbe3bc2955276b316f91f\nparent ca8bd3ec42c9ab98b53c3402041e1e78bcc948a4\nparent 3dd5e273b6a86adb13a1b9d8677ff4116cbdb679\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641653161 +0000\ncommitter GitHub <noreply@github.com> 1641653161 +0000\n\nMerge #11238\n\n11238: fix: shrink the span of errors from attribute macros and derives r=jonas-schievink a=jonas-schievink\n\nSome procedural macros tend to get very large invocations, for example RTIC's, leading to issues like https://github.com/rtic-rs/cortex-m-rtic/issues/582, where almost the entire screen is underlined while editing incomplete code in the macro.\r\n\r\nThis PR shrinks the spans of errors from attribute macros and derives to point only at the attribute, which also matches rustc more closely.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8c96c92689af8378dbe9f466c6bf15a3a27458", "html_url": "https://github.com/rust-lang/rust/commit/0f8c96c92689af8378dbe9f466c6bf15a3a27458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f8c96c92689af8378dbe9f466c6bf15a3a27458/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8bd3ec42c9ab98b53c3402041e1e78bcc948a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8bd3ec42c9ab98b53c3402041e1e78bcc948a4", "html_url": "https://github.com/rust-lang/rust/commit/ca8bd3ec42c9ab98b53c3402041e1e78bcc948a4"}, {"sha": "3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "html_url": "https://github.com/rust-lang/rust/commit/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679"}], "stats": {"total": 91, "additions": 71, "deletions": 20}, "files": [{"sha": "5e49d3f6af70acd14c97c3b65b91cc6548aaddc3", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=0f8c96c92689af8378dbe9f466c6bf15a3a27458", "patch": "@@ -350,6 +350,53 @@ impl MacroCallKind {\n         }\n     }\n \n+    /// Returns the original file range that best describes the location of this macro call.\n+    ///\n+    /// Here we try to roughly match what rustc does to improve diagnostics: fn-like macros\n+    /// get the whole `ast::MacroCall`, attribute macros get the attribute's range, and derives\n+    /// get only the specific derive that is being referred to.\n+    pub fn original_call_range(self, db: &dyn db::AstDatabase) -> FileRange {\n+        let mut kind = self;\n+        loop {\n+            match kind.file_id().0 {\n+                HirFileIdRepr::MacroFile(file) => {\n+                    kind = db.lookup_intern_macro_call(file.macro_call_id).kind;\n+                }\n+                _ => break,\n+            }\n+        }\n+\n+        // `call_id` is now the outermost macro call, so its location is in a real file.\n+        let file_id = match kind.file_id().0 {\n+            HirFileIdRepr::FileId(it) => it,\n+            HirFileIdRepr::MacroFile(_) => unreachable!(\"encountered unexpected macro file\"),\n+        };\n+        let range = match kind {\n+            MacroCallKind::FnLike { ast_id, .. } => ast_id.to_node(db).syntax().text_range(),\n+            MacroCallKind::Derive { ast_id, derive_attr_index, .. } => {\n+                // FIXME: should be the range of the macro name, not the whole derive\n+                ast_id\n+                    .to_node(db)\n+                    .doc_comments_and_attrs()\n+                    .nth(derive_attr_index as usize)\n+                    .expect(\"missing derive\")\n+                    .expect_right(\"derive is a doc comment?\")\n+                    .syntax()\n+                    .text_range()\n+            }\n+            MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => ast_id\n+                .to_node(db)\n+                .doc_comments_and_attrs()\n+                .nth(invoc_attr_index as usize)\n+                .expect(\"missing attribute\")\n+                .expect_right(\"attribute macro is a doc comment?\")\n+                .syntax()\n+                .text_range(),\n+        };\n+\n+        FileRange { range, file_id }\n+    }\n+\n     fn arg(&self, db: &dyn db::AstDatabase) -> Option<SyntaxNode> {\n         match self {\n             MacroCallKind::FnLike { ast_id, .. } => {\n@@ -623,15 +670,13 @@ impl<'a> InFile<&'a SyntaxNode> {\n         }\n \n         // Fall back to whole macro call.\n-        let mut node = self.cloned();\n-        while let Some(call_node) = node.file_id.call_node(db) {\n-            node = call_node;\n+        match self.file_id.0 {\n+            HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n+            HirFileIdRepr::MacroFile(mac_file) => {\n+                let loc = db.lookup_intern_macro_call(mac_file.macro_call_id);\n+                loc.kind.original_call_range(db)\n+            }\n         }\n-\n-        let orig_file = node.file_id.original_file(db);\n-        assert_eq!(node.file_id, orig_file.into());\n-\n-        FileRange { file_id: orig_file, range: node.value.text_range() }\n     }\n \n     /// Attempts to map the syntax node back up its macro calls."}, {"sha": "ee1c2d4553a0fa8cc533c9613064dac806c40bd8", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fmod.rs?ref=0f8c96c92689af8378dbe9f466c6bf15a3a27458", "patch": "@@ -51,7 +51,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -62,7 +62,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -74,7 +74,7 @@ impl Abi {\n                         rustc_server::Rustc::default(),\n                         parsed_attributes,\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }"}, {"sha": "dd3fd8b642274c936dfb0351d7ee3b96a743607b", "filename": "crates/proc_macro_srv/src/abis/abi_1_58/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs?ref=0f8c96c92689af8378dbe9f466c6bf15a3a27458", "patch": "@@ -51,7 +51,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -62,7 +62,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -74,7 +74,7 @@ impl Abi {\n                         rustc_server::Rustc::default(),\n                         parsed_attributes,\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }"}, {"sha": "09c5af210f58d78fdb79a1f762cea3ecd2ba0cfe", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=0f8c96c92689af8378dbe9f466c6bf15a3a27458", "patch": "@@ -162,6 +162,7 @@ pub struct MacroCall {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::HasAttrs for MacroCall {}\n+impl ast::HasDocComments for MacroCall {}\n impl MacroCall {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n@@ -259,6 +260,7 @@ pub struct ExternBlock {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::HasAttrs for ExternBlock {}\n+impl ast::HasDocComments for ExternBlock {}\n impl ExternBlock {\n     pub fn abi(&self) -> Option<Abi> { support::child(&self.syntax) }\n     pub fn extern_item_list(&self) -> Option<ExternItemList> { support::child(&self.syntax) }\n@@ -270,6 +272,7 @@ pub struct ExternCrate {\n }\n impl ast::HasAttrs for ExternCrate {}\n impl ast::HasVisibility for ExternCrate {}\n+impl ast::HasDocComments for ExternCrate {}\n impl ExternCrate {\n     pub fn extern_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![extern]) }\n     pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n@@ -1543,6 +1546,7 @@ pub enum Item {\n     Use(Use),\n }\n impl ast::HasAttrs for Item {}\n+impl ast::HasDocComments for Item {}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n@@ -1597,6 +1601,7 @@ pub enum AssocItem {\n     TypeAlias(TypeAlias),\n }\n impl ast::HasAttrs for AssocItem {}\n+impl ast::HasDocComments for AssocItem {}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ExternItem {\n@@ -1606,6 +1611,7 @@ pub enum ExternItem {\n     TypeAlias(TypeAlias),\n }\n impl ast::HasAttrs for ExternItem {}\n+impl ast::HasDocComments for ExternItem {}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum GenericParam {\n@@ -3902,10 +3908,9 @@ impl AnyHasDocComments {\n impl AstNode for AnyHasDocComments {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            SOURCE_FILE | CONST | ENUM | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n-            | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => {\n-                true\n-            }\n+            MACRO_CALL | SOURCE_FILE | CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL\n+            | MACRO_RULES | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION\n+            | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => true,\n             _ => false,\n         }\n     }"}, {"sha": "705aa5edac48b9834b22681777d2ca0a48ba1fb9", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=0f8c96c92689af8378dbe9f466c6bf15a3a27458", "patch": "@@ -772,7 +772,6 @@ impl ast::HasLoopBody for ast::ForExpr {\n }\n \n impl ast::HasAttrs for ast::AnyHasDocComments {}\n-impl ast::HasDocComments for ast::Item {}\n \n impl From<ast::Adt> for ast::Item {\n     fn from(it: ast::Adt) -> Self {"}, {"sha": "4a608da9ff4b11adce924393ee03c3a93a54294a", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8c96c92689af8378dbe9f466c6bf15a3a27458/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=0f8c96c92689af8378dbe9f466c6bf15a3a27458", "patch": "@@ -793,9 +793,11 @@ fn extract_struct_traits(ast: &mut AstSrc) {\n         \"Const\",\n         \"TypeAlias\",\n         \"Impl\",\n+        \"ExternBlock\",\n+        \"ExternCrate\",\n+        \"MacroCall\",\n         \"MacroRules\",\n         \"MacroDef\",\n-        \"Macro\",\n         \"Use\",\n     ];\n "}]}