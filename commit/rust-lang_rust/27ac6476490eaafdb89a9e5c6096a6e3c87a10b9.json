{"sha": "27ac6476490eaafdb89a9e5c6096a6e3c87a10b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YWM2NDc2NDkwZWFhZmRiODlhOWU1YzYwOTZhNmUzYzg3YTEwYjk=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-12T15:15:28Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-24T14:31:09Z"}, "message": "Use discriminant instead of stable_hash", "tree": {"sha": "83f04fcf9ebba610d9328d62c254c41bfdf55276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f04fcf9ebba610d9328d62c254c41bfdf55276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27ac6476490eaafdb89a9e5c6096a6e3c87a10b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27ac6476490eaafdb89a9e5c6096a6e3c87a10b9", "html_url": "https://github.com/rust-lang/rust/commit/27ac6476490eaafdb89a9e5c6096a6e3c87a10b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27ac6476490eaafdb89a9e5c6096a6e3c87a10b9/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e027b6bc49f7b0719b65aa2e366bc39c96ef698b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e027b6bc49f7b0719b65aa2e366bc39c96ef698b", "html_url": "https://github.com/rust-lang/rust/commit/e027b6bc49f7b0719b65aa2e366bc39c96ef698b"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "6c0cb22beb184dbef9d28fa1436d550dcfcdec1b", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27ac6476490eaafdb89a9e5c6096a6e3c87a10b9/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27ac6476490eaafdb89a9e5c6096a6e3c87a10b9/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=27ac6476490eaafdb89a9e5c6096a6e3c87a10b9", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{constant_context, constant_simple};\n use crate::differing_macro_contexts;\n use crate::source::snippet_opt;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n@@ -12,7 +12,6 @@ use rustc_hir::{\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ich::StableHashingContextProvider;\n use rustc_middle::ty::TypeckResults;\n use rustc_span::Symbol;\n use std::hash::Hash;\n@@ -571,17 +570,15 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(r);\n             },\n             ExprKind::AssignOp(ref o, l, r) => {\n-                o.node\n-                    .hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n+                std::mem::discriminant(&o.node).hash(&mut self.s);\n                 self.hash_expr(l);\n                 self.hash_expr(r);\n             },\n             ExprKind::Block(b, _) => {\n                 self.hash_block(b);\n             },\n             ExprKind::Binary(op, l, r) => {\n-                op.node\n-                    .hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n+                std::mem::discriminant(&op.node).hash(&mut self.s);\n                 self.hash_expr(l);\n                 self.hash_expr(r);\n             },\n@@ -736,7 +733,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_exprs(v);\n             },\n             ExprKind::Unary(lop, le) => {\n-                lop.hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n+                std::mem::discriminant(&lop).hash(&mut self.s);\n                 self.hash_expr(le);\n             },\n         }\n@@ -761,7 +758,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_name(path.ident.name);\n             },\n             QPath::LangItem(lang_item, ..) => {\n-                lang_item.hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n+                std::mem::discriminant(&lang_item).hash(&mut self.s);\n             },\n         }\n         // self.maybe_typeck_results.unwrap().qpath_res(p, id).hash(&mut self.s);\n@@ -771,7 +768,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&pat.kind).hash(&mut self.s);\n         match pat.kind {\n             PatKind::Binding(ann, _, _, pat) => {\n-                ann.hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n+                std::mem::discriminant(&ann).hash(&mut self.s);\n                 if let Some(pat) = pat {\n                     self.hash_pat(pat);\n                 }\n@@ -791,11 +788,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 if let Some(e) = e {\n                     self.hash_expr(e);\n                 }\n-                i.hash_stable(&mut self.cx.tcx.get_stable_hashing_context(), &mut self.s);\n+                std::mem::discriminant(&i).hash(&mut self.s);\n             },\n-            PatKind::Ref(pat, m) => {\n+            PatKind::Ref(pat, mu) => {\n                 self.hash_pat(pat);\n-                m.hash(&mut self.s);\n+                std::mem::discriminant(&mu).hash(&mut self.s);\n             },\n             PatKind::Slice(l, m, r) => {\n                 for pat in l {"}]}