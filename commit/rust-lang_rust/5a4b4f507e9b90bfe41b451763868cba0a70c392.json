{"sha": "5a4b4f507e9b90bfe41b451763868cba0a70c392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNGI0ZjUwN2U5YjkwYmZlNDFiNDUxNzYzODY4Y2JhMGE3MGMzOTI=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-29T21:15:03Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-30T08:17:53Z"}, "message": "Fix API of Attr", "tree": {"sha": "7e136a69aa5bf67a2dacf74fdee189558970ff20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e136a69aa5bf67a2dacf74fdee189558970ff20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4b4f507e9b90bfe41b451763868cba0a70c392", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2RujIACgkQztOS3gxI\nPQCdgA//Qb7ZoAC5ZY2Sw1M3pWbo5Rj0fXPoYMqqlNOInOYoK7KT9UN3qiKzBUw7\nxyNY7sr5a+RVwE6A46FZ0pUTapbKR7qjMTrrUg0FjpfZYNg5bTsoke6gva2nC9q5\n6JpWTJti/M5t910uOyjLSp/GfZxIJ4vNBghJ8ZuGIPp84tPzlZnh/1BTnIy7yT+S\ncflpVdx5Z4BESkUqEzoa0sc3CQCT/BPWiQRYw6gvlysWdiLbeka3Dw1zTJje2tIg\nX5fdgPamwBVrf249fJptv6MtTndhgg8nHo0EFnHMGz6zpbeX/ra+1OBNoyRgWZRG\nhjyQVNlkZWwpE4+TvYKyeZ6diDOP7FTT92LKTvJ9EkbM9ZcVXN9DF5IO9eDOAd5O\nZlU4THa5EreZP5G13OeoczGvk0XXOny+tfehXW1FlwW1mbb5SFLNrxTO+WHqwhIO\n1DZFPHyyfGnNJbt/G17udUWxBTnjG0hNkjfhMMZ9ebjoNKey1Nmy8WlkAZMdkDVF\n73DBpZK6b4yrWOKSR+hu6viickSg70R3PtAsduFJPoJhRXcmih4ZCzj24NqPnq4G\nRFtKZSJtO0k7gaLDtNlrPqH/wMNkkbYqD68yW7Nv0gAHUyUY61PKgTVvZ9/qs3Ct\nwTjaH9kQ9z4zFpRw9r334fg9Qr0stIiMjjFY6vG/W8aV9d/ZveU=\n=se3d\n-----END PGP SIGNATURE-----", "payload": "tree 7e136a69aa5bf67a2dacf74fdee189558970ff20\nparent 71efdaa6364142b359c59659ec10f35a1e53b5d2\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1569791703 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1569831473 +0800\n\nFix API of Attr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4b4f507e9b90bfe41b451763868cba0a70c392", "html_url": "https://github.com/rust-lang/rust/commit/5a4b4f507e9b90bfe41b451763868cba0a70c392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4b4f507e9b90bfe41b451763868cba0a70c392/comments", "author": null, "committer": null, "parents": [{"sha": "71efdaa6364142b359c59659ec10f35a1e53b5d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/71efdaa6364142b359c59659ec10f35a1e53b5d2", "html_url": "https://github.com/rust-lang/rust/commit/71efdaa6364142b359c59659ec10f35a1e53b5d2"}], "stats": {"total": 86, "additions": 32, "deletions": 54}, "files": [{"sha": "8f2c6266e4ce42abe8af6697a6932119157e1081", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     ctx.add_action(AssistId(\"add_derive\"), \"add `#[derive]`\", |edit| {\n         let derive_attr = nominal\n             .attrs()\n-            .filter_map(|x| x.as_call())\n+            .filter_map(|x| x.as_simple_call())\n             .filter(|(name, _arg)| name == \"derive\")\n             .map(|(_name, arg)| arg)\n             .next();"}, {"sha": "dbba433fe01354073fd2c9a3839bcc498b99e8aa", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -151,7 +151,7 @@ impl LangItems {\n \n fn lang_item_name<T: AttrsOwner>(node: &T) -> Option<SmolStr> {\n     node.attrs()\n-        .filter_map(|a| a.as_key_value())\n+        .filter_map(|a| a.as_simple_key_value())\n         .filter(|(key, _)| key == \"lang\")\n         .map(|(_, val)| val)\n         .nth(0)"}, {"sha": "0e27dd2db318cfe610471a0dc3ba0ed3c2ac44b2", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -353,8 +353,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n \n         let name = m.name().map(|it| it.as_name());\n         let ast_id = self.source_ast_id_map.ast_id(&m);\n-        let export = m.has_atom_attr(\"macro_export\")\n-            || m.attrs().filter_map(|x| x.as_call()).any(|(name, _)| name == \"macro_export\");\n+        let export = m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"macro_export\");\n \n         let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export });\n         self.push_item(current_module, RawItem::Macro(m));\n@@ -385,7 +384,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n \n fn extract_mod_path_attribute(module: &ast::Module) -> Option<SmolStr> {\n     module.attrs().into_iter().find_map(|attr| {\n-        attr.as_key_value().and_then(|(name, value)| {\n+        attr.as_simple_key_value().and_then(|(name, value)| {\n             let is_path = name == \"path\";\n             if is_path {\n                 Some(value)"}, {"sha": "38a56d7524cbdaf2ac8b83c5cd34491bd223de56", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -77,7 +77,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             node_range: node.syntax().text_range(),\n             kind: node.syntax().kind(),\n             detail,\n-            deprecated: node.attrs().filter_map(|x| x.as_named()).any(|x| x == \"deprecated\"),\n+            deprecated: node.attrs().filter_map(|x| x.simple_name()).any(|x| x == \"deprecated\"),\n         })\n     }\n "}, {"sha": "ae30ebba383d06a6f2f287459ac9a112ee53e12c", "filename": "crates/ra_ide_api/src/snapshots/highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -19,7 +19,7 @@\n .keyword\\.unsafe   { color: #DFAF8F; }\n .keyword\\.control  { color: #F0DFAF; font-weight: bold; }\n </style>\n-<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n+<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute text\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"type\">Foo</span> {\n     <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"type\">i32</span>,\n     <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"type\">i32</span>,"}, {"sha": "a7b886457954d1bb1d884ad0ff6803c9f24035b3", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -1,10 +1,8 @@\n //! Various extension methods to ast Nodes, which are hard to code-generate.\n //! Extensions for various expressions live in a sibling `expr_extensions` module.\n \n-use itertools::Itertools;\n-\n use crate::{\n-    ast::{self, child_opt, children, AstChildren, AstNode, SyntaxNode},\n+    ast::{self, child_opt, children, AstChildren, AstNode, AttrInput, SyntaxNode},\n     SmolStr, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxToken, T,\n@@ -39,61 +37,45 @@ fn text_of_first_token(node: &SyntaxNode) -> &SmolStr {\n \n impl ast::Attr {\n     pub fn is_inner(&self) -> bool {\n-        let tt = match self.value() {\n-            None => return false,\n-            Some(tt) => tt,\n-        };\n-\n-        let prev = match tt.syntax().prev_sibling() {\n+        let prev = match self.syntax().prev_sibling() {\n             None => return false,\n             Some(prev) => prev,\n         };\n \n         prev.kind() == T![!]\n     }\n \n-    pub fn as_atom(&self) -> Option<SmolStr> {\n-        let tt = self.value()?;\n-        let (_bra, attr, _ket) = tt.syntax().children_with_tokens().collect_tuple()?;\n-        if attr.kind() == IDENT {\n-            Some(attr.as_token()?.text().clone())\n-        } else {\n-            None\n+    pub fn as_simple_atom(&self) -> Option<SmolStr> {\n+        match self.input() {\n+            None => self.simple_name(),\n+            Some(_) => None,\n         }\n     }\n \n-    pub fn as_call(&self) -> Option<(SmolStr, ast::TokenTree)> {\n-        let tt = self.value()?;\n-        let (_bra, attr, args, _ket) = tt.syntax().children_with_tokens().collect_tuple()?;\n-        let args = ast::TokenTree::cast(args.as_node()?.clone())?;\n-        if attr.kind() == IDENT {\n-            Some((attr.as_token()?.text().clone(), args))\n-        } else {\n-            None\n+    pub fn as_simple_call(&self) -> Option<(SmolStr, ast::TokenTree)> {\n+        match self.input() {\n+            Some(AttrInput::TokenTree(tt)) => Some((self.simple_name()?, tt)),\n+            _ => None,\n         }\n     }\n \n-    pub fn as_named(&self) -> Option<SmolStr> {\n-        let tt = self.value()?;\n-        let attr = tt.syntax().children_with_tokens().nth(1)?;\n-        if attr.kind() == IDENT {\n-            Some(attr.as_token()?.text().clone())\n-        } else {\n-            None\n+    pub fn as_simple_key_value(&self) -> Option<(SmolStr, SmolStr)> {\n+        match self.input() {\n+            Some(AttrInput::Literal(lit)) => {\n+                let key = self.simple_name()?;\n+                // FIXME: escape? raw string?\n+                let value = lit.syntax().first_token()?.text().trim_matches('\"').into();\n+                Some((key, value))\n+            }\n+            _ => None,\n         }\n     }\n \n-    pub fn as_key_value(&self) -> Option<(SmolStr, SmolStr)> {\n-        let tt = self.value()?;\n-        let tt_node = tt.syntax();\n-        let attr = tt_node.children_with_tokens().nth(1)?;\n-        if attr.kind() == IDENT {\n-            let key = attr.as_token()?.text().clone();\n-            let val_node = tt_node.children_with_tokens().find(|t| t.kind() == STRING)?;\n-            let val = val_node.as_token()?.text().trim_start_matches('\"').trim_end_matches('\"');\n-            Some((key, SmolStr::new(val)))\n-        } else {\n-            None\n+    pub fn simple_name(&self) -> Option<SmolStr> {\n+        let path = self.path()?;\n+        match (path.segment(), path.qualifier()) {\n+            (Some(segment), None) => Some(segment.syntax().first_token()?.text().clone()),\n+            _ => None,\n         }\n     }\n }"}, {"sha": "aaf03ce3f47e9973d657269ce4f594e18883c9b1", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -172,9 +172,6 @@ impl Attr {\n     pub fn input(&self) -> Option<AttrInput> {\n         AstChildren::new(&self.syntax).next()\n     }\n-    pub fn value(&self) -> Option<TokenTree> {\n-        AstChildren::new(&self.syntax).next()\n-    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AttrInput {"}, {"sha": "f275a49558d7ad2c264532046e8d4048b02f1258", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -99,7 +99,7 @@ pub trait AttrsOwner: AstNode {\n         children(self)\n     }\n     fn has_atom_attr(&self, atom: &str) -> bool {\n-        self.attrs().filter_map(|x| x.as_atom()).any(|x| x == atom)\n+        self.attrs().filter_map(|x| x.as_simple_atom()).any(|x| x == atom)\n     }\n }\n "}, {"sha": "30328f59faf2b4e635ea009113c74c44b213f13c", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/5a4b4f507e9b90bfe41b451763868cba0a70c392/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=5a4b4f507e9b90bfe41b451763868cba0a70c392", "patch": "@@ -577,7 +577,7 @@ Grammar(\n             options: [ \"TokenTree\", \"Path\" ],\n         ),\n         \"AttrInput\": ( enum: [ \"Literal\", \"TokenTree\" ] ),\n-        \"Attr\": ( options: [ \"Path\", [ \"input\", \"AttrInput\" ], [ \"value\", \"TokenTree\" ] ] ),\n+        \"Attr\": ( options: [ \"Path\", [ \"input\", \"AttrInput\" ] ] ),\n         \"TokenTree\": (),\n         \"TypeParamList\": (\n             collections: ["}]}