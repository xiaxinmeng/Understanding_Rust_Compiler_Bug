{"sha": "d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "node_id": "C_kwDOAAsO6NoAKGQ4MzQxYzViOTJjMDkyODI2YzlhNWUzYzgyNzkxY2Y5Zjg3YTA0YjQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-10T15:50:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-10T15:50:14Z"}, "message": "Parse for<'a> closure syntax", "tree": {"sha": "a139b1c692f5488745f1fa13898fc7b74e29f24c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a139b1c692f5488745f1fa13898fc7b74e29f24c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "html_url": "https://github.com/rust-lang/rust/commit/d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e691ae0ab287a77dcf42842d7c564362b45460eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e691ae0ab287a77dcf42842d7c564362b45460eb", "html_url": "https://github.com/rust-lang/rust/commit/e691ae0ab287a77dcf42842d7c564362b45460eb"}], "stats": {"total": 403, "additions": 245, "deletions": 158}, "files": [{"sha": "10e5d897e0781c32d7f66e5bffd0ef015ed217ad", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 38, "deletions": 42, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -71,16 +71,8 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n     let done = match p.current() {\n         T!['('] => tuple_expr(p),\n         T!['['] => array_expr(p),\n-        T![|] => closure_expr(p),\n-        T![static] | T![async] | T![move] if la == T![|] => closure_expr(p),\n-        T![static] | T![async] if la == T![move] && p.nth(2) == T![|] => closure_expr(p),\n-        T![static] if la == T![async] && p.nth(2) == T![|] => closure_expr(p),\n-        T![static] if la == T![async] && p.nth(2) == T![move] && p.nth(3) == T![|] => {\n-            closure_expr(p)\n-        }\n         T![if] => if_expr(p),\n         T![let] => let_expr(p),\n-\n         T![_] => {\n             // test destructuring_assignment_wildcard_pat\n             // fn foo() {\n@@ -91,12 +83,16 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             p.bump(T![_]);\n             m.complete(p, UNDERSCORE_EXPR)\n         }\n-\n         T![loop] => loop_expr(p, None),\n         T![box] => box_expr(p, None),\n-        T![for] => for_expr(p, None),\n         T![while] => while_expr(p, None),\n         T![try] => try_block_expr(p, None),\n+        T![match] => match_expr(p),\n+        T![return] => return_expr(p),\n+        T![yield] => yield_expr(p),\n+        T![continue] => continue_expr(p),\n+        T![break] => break_expr(p, r),\n+\n         LIFETIME_IDENT if la == T![:] => {\n             let m = p.start();\n             label(p);\n@@ -121,27 +117,21 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n                 }\n             }\n         }\n-        T![async] if la == T!['{'] || (la == T![move] && p.nth(2) == T!['{']) => {\n-            let m = p.start();\n-            p.bump(T![async]);\n-            p.eat(T![move]);\n-            stmt_list(p);\n-            m.complete(p, BLOCK_EXPR)\n-        }\n-        T![match] => match_expr(p),\n-        // test unsafe_block\n+        // test effect_blocks\n         // fn f() { unsafe { } }\n-        T![unsafe] if la == T!['{'] => {\n+        // fn f() { const { } }\n+        // fn f() { async { } }\n+        // fn f() { async move { } }\n+        T![const] | T![unsafe] | T![async] if la == T!['{'] => {\n             let m = p.start();\n-            p.bump(T![unsafe]);\n+            p.bump_any();\n             stmt_list(p);\n             m.complete(p, BLOCK_EXPR)\n         }\n-        // test const_block\n-        // fn f() { const { } }\n-        T![const] if la == T!['{'] => {\n+        T![async] if la == T![move] && p.nth(2) == T!['{'] => {\n             let m = p.start();\n-            p.bump(T![const]);\n+            p.bump(T![async]);\n+            p.eat(T![move]);\n             stmt_list(p);\n             m.complete(p, BLOCK_EXPR)\n         }\n@@ -156,10 +146,11 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             stmt_list(p);\n             m.complete(p, BLOCK_EXPR)\n         }\n-        T![return] => return_expr(p),\n-        T![yield] => yield_expr(p),\n-        T![continue] => continue_expr(p),\n-        T![break] => break_expr(p, r),\n+\n+        T![static] | T![async] | T![move] | T![|] => closure_expr(p),\n+        T![for] if la == T![<] => closure_expr(p),\n+        T![for] => for_expr(p, None),\n+\n         _ => {\n             p.err_recover(\"expected expression\", EXPR_RECOVERY_SET);\n             return None;\n@@ -254,25 +245,30 @@ fn array_expr(p: &mut Parser) -> CompletedMarker {\n //     static move || {};\n //     static async || {};\n //     static async move || {};\n+//     for<'a> || {};\n+//     for<'a> move || {};\n // }\n fn closure_expr(p: &mut Parser) -> CompletedMarker {\n-    assert!(\n-        p.at(T![|])\n-            || (p.at(T![move]) && p.nth(1) == T![|])\n-            || (p.at(T![async]) && p.nth(1) == T![|])\n-            || (p.at(T![async]) && p.nth(1) == T![move] && p.nth(2) == T![|])\n-            || (p.at(T![static]) && p.nth(1) == T![|])\n-            || (p.at(T![static]) && p.nth(1) == T![move] && p.nth(2) == T![|])\n-            || (p.at(T![static]) && p.nth(1) == T![async] && p.nth(2) == T![|])\n-            || (p.at(T![static])\n-                && p.nth(1) == T![async]\n-                && p.nth(2) == T![move]\n-                && p.nth(3) == T![|])\n-    );\n+    assert!(match p.current() {\n+        T![static] | T![async] | T![move] | T![|] => true,\n+        T![for] => p.nth(1) == T![<],\n+        _ => false,\n+    });\n+\n     let m = p.start();\n+\n+    if p.at(T![for]) {\n+        types::for_binder(p);\n+    }\n+\n     p.eat(T![static]);\n     p.eat(T![async]);\n     p.eat(T![move]);\n+\n+    if !p.at(T![|]) {\n+        p.error(\"expected `|`\");\n+        return m.complete(p, CLOSURE_EXPR);\n+    }\n     params::param_list_closure(p);\n     if opt_ret_type(p) {\n         // test lambda_ret_block"}, {"sha": "d374f86610b2878fd309e983614771b43bb9f535", "filename": "crates/parser/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 61, "deletions": 65, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -182,45 +182,44 @@ SOURCE_FILE\n         WHITESPACE \" \"\n         TUPLE_EXPR\n           L_PAREN \"(\"\n-          FOR_EXPR\n+          CLOSURE_EXPR\n             FOR_KW \"for\"\n-            PATH_PAT\n-              PATH\n-                PATH_SEGMENT\n-                  L_ANGLE \"<\"\n-                  ERROR\n-                    LIFETIME_IDENT \"'a\"\n-                  R_ANGLE \">\"\n-            WHITESPACE \" \"\n+            GENERIC_PARAM_LIST\n+              L_ANGLE \"<\"\n+              LIFETIME_PARAM\n+                LIFETIME\n+                  LIFETIME_IDENT \"'a\"\n+              R_ANGLE \">\"\n+          WHITESPACE \" \"\n+          BIN_EXPR\n             BIN_EXPR\n               BIN_EXPR\n                 BIN_EXPR\n-                  BIN_EXPR\n-                    PATH_EXPR\n-                      PATH\n-                        PATH_SEGMENT\n-                          NAME_REF\n-                            IDENT \"Trait\"\n-                    L_ANGLE \"<\"\n-                    ERROR\n-                      LIFETIME_IDENT \"'a\"\n-                  R_ANGLE \">\"\n-                  ERROR\n-                    R_PAREN \")\"\n-                WHITESPACE \" \"\n-                PLUS \"+\"\n-                WHITESPACE \" \"\n-                PAREN_EXPR\n-                  L_PAREN \"(\"\n                   PATH_EXPR\n                     PATH\n                       PATH_SEGMENT\n                         NAME_REF\n-                          IDENT \"Copy\"\n+                          IDENT \"Trait\"\n+                  L_ANGLE \"<\"\n+                  ERROR\n+                    LIFETIME_IDENT \"'a\"\n+                R_ANGLE \">\"\n+                ERROR\n                   R_PAREN \")\"\n-              R_ANGLE \">\"\n-              ERROR\n-                SEMICOLON \";\"\n+              WHITESPACE \" \"\n+              PLUS \"+\"\n+              WHITESPACE \" \"\n+              PAREN_EXPR\n+                L_PAREN \"(\"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Copy\"\n+                R_PAREN \")\"\n+            R_ANGLE \">\"\n+            ERROR\n+              SEMICOLON \";\"\n           WHITESPACE \"\\n    \"\n           LET_EXPR\n             LET_KW \"let\"\n@@ -240,49 +239,48 @@ SOURCE_FILE\n               L_ANGLE \"<\"\n               TUPLE_EXPR\n                 L_PAREN \"(\"\n-                FOR_EXPR\n+                CLOSURE_EXPR\n                   FOR_KW \"for\"\n-                  PATH_PAT\n-                    PATH\n-                      PATH_SEGMENT\n-                        L_ANGLE \"<\"\n-                        ERROR\n-                          LIFETIME_IDENT \"'a\"\n-                        R_ANGLE \">\"\n-                  WHITESPACE \" \"\n+                  GENERIC_PARAM_LIST\n+                    L_ANGLE \"<\"\n+                    LIFETIME_PARAM\n+                      LIFETIME\n+                        LIFETIME_IDENT \"'a\"\n+                    R_ANGLE \">\"\n+                WHITESPACE \" \"\n+                BIN_EXPR\n                   BIN_EXPR\n                     BIN_EXPR\n                       BIN_EXPR\n-                        BIN_EXPR\n-                          PATH_EXPR\n-                            PATH\n-                              PATH_SEGMENT\n-                                NAME_REF\n-                                  IDENT \"Trait\"\n-                          L_ANGLE \"<\"\n-                          ERROR\n-                            LIFETIME_IDENT \"'a\"\n-                        R_ANGLE \">\"\n-                        ERROR\n-                          R_PAREN \")\"\n-                      WHITESPACE \" \"\n-                      PLUS \"+\"\n-                      WHITESPACE \" \"\n-                      PAREN_EXPR\n-                        L_PAREN \"(\"\n                         PATH_EXPR\n                           PATH\n                             PATH_SEGMENT\n                               NAME_REF\n-                                IDENT \"Copy\"\n+                                IDENT \"Trait\"\n+                        L_ANGLE \"<\"\n+                        ERROR\n+                          LIFETIME_IDENT \"'a\"\n+                      R_ANGLE \">\"\n+                      ERROR\n                         R_PAREN \")\"\n                     WHITESPACE \" \"\n                     PLUS \"+\"\n                     WHITESPACE \" \"\n                     PAREN_EXPR\n                       L_PAREN \"(\"\n-                      ERROR\n-                        QUESTION \"?\"\n+                      PATH_EXPR\n+                        PATH\n+                          PATH_SEGMENT\n+                            NAME_REF\n+                              IDENT \"Copy\"\n+                      R_PAREN \")\"\n+                  WHITESPACE \" \"\n+                  PLUS \"+\"\n+                  WHITESPACE \" \"\n+                  PAREN_EXPR\n+                    L_PAREN \"(\"\n+                    ERROR\n+                      QUESTION \"?\"\n                 PATH_EXPR\n                   PATH\n                     PATH_SEGMENT\n@@ -307,23 +305,21 @@ error 141: expected SEMICOLON\n error 146: expected SEMICOLON\n error 146: expected expression\n error 148: expected expression\n-error 155: expected type\n-error 158: expected IN_KW\n+error 158: expected `|`\n+error 158: expected COMMA\n error 165: expected expression\n error 168: expected expression\n error 179: expected expression\n-error 180: expected a block\n error 180: expected COMMA\n error 190: expected EQ\n error 190: expected expression\n error 191: expected COMMA\n-error 201: expected type\n-error 204: expected IN_KW\n+error 204: expected `|`\n+error 204: expected COMMA\n error 211: expected expression\n error 214: expected expression\n error 228: expected expression\n error 229: expected R_PAREN\n-error 229: expected a block\n error 229: expected COMMA\n error 236: expected expression\n error 237: expected COMMA"}, {"sha": "c25ad8430d0d060f9f2f6a1e53c3534d776f8147", "filename": "crates/parser/test_data/parser/inline/ok/0106_lambda_expr.rast", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rast?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -199,6 +199,48 @@ SOURCE_FILE\n                 L_CURLY \"{\"\n                 R_CURLY \"}\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CLOSURE_EXPR\n+            FOR_KW \"for\"\n+            GENERIC_PARAM_LIST\n+              L_ANGLE \"<\"\n+              LIFETIME_PARAM\n+                LIFETIME\n+                  LIFETIME_IDENT \"'a\"\n+              R_ANGLE \">\"\n+            WHITESPACE \" \"\n+            PARAM_LIST\n+              PIPE \"|\"\n+              PIPE \"|\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          CLOSURE_EXPR\n+            FOR_KW \"for\"\n+            GENERIC_PARAM_LIST\n+              L_ANGLE \"<\"\n+              LIFETIME_PARAM\n+                LIFETIME\n+                  LIFETIME_IDENT \"'a\"\n+              R_ANGLE \">\"\n+            WHITESPACE \" \"\n+            MOVE_KW \"move\"\n+            WHITESPACE \" \"\n+            PARAM_LIST\n+              PIPE \"|\"\n+              PIPE \"|\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "75516d258456fed69dc640d139ca05ad60915b50", "filename": "crates/parser/test_data/parser/inline/ok/0106_lambda_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0106_lambda_expr.rs?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -10,4 +10,6 @@ fn foo() {\n     static move || {};\n     static async || {};\n     static async move || {};\n+    for<'a> || {};\n+    for<'a> move || {};\n }"}, {"sha": "d2025b895dc31f9c119a13ffc2ed1310970929ee", "filename": "crates/parser/test_data/parser/inline/ok/0157_const_block.rast", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rast?ref=e691ae0ab287a77dcf42842d7c564362b45460eb", "patch": "@@ -1,24 +0,0 @@\n-SOURCE_FILE\n-  FN\n-    FN_KW \"fn\"\n-    WHITESPACE \" \"\n-    NAME\n-      IDENT \"f\"\n-    PARAM_LIST\n-      L_PAREN \"(\"\n-      R_PAREN \")\"\n-    WHITESPACE \" \"\n-    BLOCK_EXPR\n-      STMT_LIST\n-        L_CURLY \"{\"\n-        WHITESPACE \" \"\n-        BLOCK_EXPR\n-          CONST_KW \"const\"\n-          WHITESPACE \" \"\n-          STMT_LIST\n-            L_CURLY \"{\"\n-            WHITESPACE \" \"\n-            R_CURLY \"}\"\n-        WHITESPACE \" \"\n-        R_CURLY \"}\"\n-  WHITESPACE \"\\n\""}, {"sha": "a2e3565a321f2f583859c8f1a8f961cbd982e000", "filename": "crates/parser/test_data/parser/inline/ok/0157_const_block.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_const_block.rs?ref=e691ae0ab287a77dcf42842d7c564362b45460eb", "patch": "@@ -1 +0,0 @@\n-fn f() { const { } }"}, {"sha": "2149676dedbcdae6d276e9e935460c6c6ac63ea4", "filename": "crates/parser/test_data/parser/inline/ok/0162_unsafe_block.rast", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rast?ref=e691ae0ab287a77dcf42842d7c564362b45460eb", "patch": "@@ -1,24 +0,0 @@\n-SOURCE_FILE\n-  FN\n-    FN_KW \"fn\"\n-    WHITESPACE \" \"\n-    NAME\n-      IDENT \"f\"\n-    PARAM_LIST\n-      L_PAREN \"(\"\n-      R_PAREN \")\"\n-    WHITESPACE \" \"\n-    BLOCK_EXPR\n-      STMT_LIST\n-        L_CURLY \"{\"\n-        WHITESPACE \" \"\n-        BLOCK_EXPR\n-          UNSAFE_KW \"unsafe\"\n-          WHITESPACE \" \"\n-          STMT_LIST\n-            L_CURLY \"{\"\n-            WHITESPACE \" \"\n-            R_CURLY \"}\"\n-        WHITESPACE \" \"\n-        R_CURLY \"}\"\n-  WHITESPACE \"\\n\""}, {"sha": "dfb9b2a1c18721c7ab11d87727db82431992e8b2", "filename": "crates/parser/test_data/parser/inline/ok/0162_unsafe_block.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e691ae0ab287a77dcf42842d7c564362b45460eb/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0162_unsafe_block.rs?ref=e691ae0ab287a77dcf42842d7c564362b45460eb", "patch": "@@ -1 +0,0 @@\n-fn f() { unsafe { } }"}, {"sha": "f14080c90ea486c99f2c4e5e0072f08974655aff", "filename": "crates/parser/test_data/parser/inline/ok/0199_effect_blocks.rast", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_effect_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_effect_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_effect_blocks.rast?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -0,0 +1,95 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \" \"\n+        BLOCK_EXPR\n+          UNSAFE_KW \"unsafe\"\n+          WHITESPACE \" \"\n+          STMT_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \" \"\n+            R_CURLY \"}\"\n+        WHITESPACE \" \"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\"\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \" \"\n+        BLOCK_EXPR\n+          CONST_KW \"const\"\n+          WHITESPACE \" \"\n+          STMT_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \" \"\n+            R_CURLY \"}\"\n+        WHITESPACE \" \"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\"\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \" \"\n+        BLOCK_EXPR\n+          ASYNC_KW \"async\"\n+          WHITESPACE \" \"\n+          STMT_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \" \"\n+            R_CURLY \"}\"\n+        WHITESPACE \" \"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\"\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \" \"\n+        BLOCK_EXPR\n+          ASYNC_KW \"async\"\n+          WHITESPACE \" \"\n+          MOVE_KW \"move\"\n+          WHITESPACE \" \"\n+          STMT_LIST\n+            L_CURLY \"{\"\n+            WHITESPACE \" \"\n+            R_CURLY \"}\"\n+        WHITESPACE \" \"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "c57d24b2f7bb181ec52642a08dd0d8398364c690", "filename": "crates/parser/test_data/parser/inline/ok/0199_effect_blocks.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_effect_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_effect_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0199_effect_blocks.rs?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -0,0 +1,4 @@\n+fn f() { unsafe { } }\n+fn f() { const { } }\n+fn f() { async { } }\n+fn f() { async move { } }"}, {"sha": "19e642968cc15a03a793d67c193b4010657bf8e9", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -449,7 +449,7 @@ FieldExpr =\n   Attr* Expr '.' NameRef\n \n ClosureExpr =\n-  Attr* 'static'? 'async'? 'move'?  ParamList RetType?\n+  Attr* ('for' GenericParamList)? 'static'? 'async'? 'move'?  ParamList RetType?\n   body:Expr\n \n IfExpr ="}, {"sha": "92d793e0fd77b4891cebea9f1c139f4d7d213acd", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8341c5b92c092826c9a5e3c82791cf9f87a04b4/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=d8341c5b92c092826c9a5e3c82791cf9f87a04b4", "patch": "@@ -837,6 +837,8 @@ pub struct ClosureExpr {\n }\n impl ast::HasAttrs for ClosureExpr {}\n impl ClosureExpr {\n+    pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n+    pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n     pub fn move_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![move]) }"}]}