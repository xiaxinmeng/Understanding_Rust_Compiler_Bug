{"sha": "361ddfeb1324179811280002c1e40443cc9c74a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MWRkZmViMTMyNDE3OTgxMTI4MDAwMmMxZTQwNDQzY2M5Yzc0YTE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-29T23:31:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-29T23:31:16Z"}, "message": "Rollup merge of #49466 - glandium:master, r=rkruppe\n\nUse f{32,64}::to_bits for is_zero test in vec::SpecFromElem\n\nvec::SpecFromElem provides an optimization to use calloc to fill a Vec\nwhen the element given to fill the Vec is represented by 0.\n\nFor floats, the test for that currently used is `x == 0. &&\nx.is_sign_positive()`. When compiled in a standalone function, rustc\ngenerates the following assembly:\n\n```\n  xorps xmm1, xmm1\n  ucomisd xmm0, xmm1\n  setnp al\n  sete cl\n  and cl, al\n  movq rax, xmm0\n  test rax, rax\n  setns al\n  and al, cl\n  ret\n```\n\nA simpler test telling us whether the value is represented by 0, is\n`x.to_bits() == 0`, which rustc compiles to:\n\n```\n  movq rax, xmm0\n  test rax, rax\n  sete al\n  ret\n```\n\nNot that the test is hot in any way, but it also makes it clearer what\nthe intent in the rust code is.", "tree": {"sha": "1271a47d7590ed291d61220132971d886d2516c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1271a47d7590ed291d61220132971d886d2516c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361ddfeb1324179811280002c1e40443cc9c74a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJavXdECRBK7hj4Ov3rIwAAdHIIACEt1H6PrayNnbLUWDSzV/SW\nuJZryU8I3q5SrNE4CjYLnmuLovFjIdzx1YyjMotdW93f8CdLZfLzdq7CfzyddB0k\nMck+3rm9bLIrebj7guY6H3Tt2pomcexCjnGaKL0zHPK/t380wm9V4zHd81a9C2jK\noChZRjQurrjN63s77igAD7elsFVDhAU1vodr9+FT4AicM+58JRZ5SYMFhwsapA2p\nHHHZl0XH5Ux/KxOAC4Hum0mLXRjSh/atby+44DZAt33O0on5rpw+HhtUFUl/EITK\n1SXzq8VhNue0idEeiSKeokx5Y9kuOoHcTYe8FaJbkHv8z393iu98Txf7PPesReA=\n=qwEX\n-----END PGP SIGNATURE-----\n", "payload": "tree 1271a47d7590ed291d61220132971d886d2516c7\nparent 9ab97a8747d968943662c3be533bf3337eb9876d\nparent 262be13643cf5e3ff4f4e880b2dee601d4740fd8\nauthor kennytm <kennytm@gmail.com> 1522366276 +0200\ncommitter GitHub <noreply@github.com> 1522366276 +0200\n\nRollup merge of #49466 - glandium:master, r=rkruppe\n\nUse f{32,64}::to_bits for is_zero test in vec::SpecFromElem\n\nvec::SpecFromElem provides an optimization to use calloc to fill a Vec\nwhen the element given to fill the Vec is represented by 0.\n\nFor floats, the test for that currently used is `x == 0. &&\nx.is_sign_positive()`. When compiled in a standalone function, rustc\ngenerates the following assembly:\n\n```\n  xorps xmm1, xmm1\n  ucomisd xmm0, xmm1\n  setnp al\n  sete cl\n  and cl, al\n  movq rax, xmm0\n  test rax, rax\n  setns al\n  and al, cl\n  ret\n```\n\nA simpler test telling us whether the value is represented by 0, is\n`x.to_bits() == 0`, which rustc compiles to:\n\n```\n  movq rax, xmm0\n  test rax, rax\n  sete al\n  ret\n```\n\nNot that the test is hot in any way, but it also makes it clearer what\nthe intent in the rust code is.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361ddfeb1324179811280002c1e40443cc9c74a1", "html_url": "https://github.com/rust-lang/rust/commit/361ddfeb1324179811280002c1e40443cc9c74a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361ddfeb1324179811280002c1e40443cc9c74a1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab97a8747d968943662c3be533bf3337eb9876d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab97a8747d968943662c3be533bf3337eb9876d", "html_url": "https://github.com/rust-lang/rust/commit/9ab97a8747d968943662c3be533bf3337eb9876d"}, {"sha": "262be13643cf5e3ff4f4e880b2dee601d4740fd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/262be13643cf5e3ff4f4e880b2dee601d4740fd8", "html_url": "https://github.com/rust-lang/rust/commit/262be13643cf5e3ff4f4e880b2dee601d4740fd8"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "2eedb964f88ba4f4792b45c45b87935467d8a02b", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/361ddfeb1324179811280002c1e40443cc9c74a1/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361ddfeb1324179811280002c1e40443cc9c74a1/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=361ddfeb1324179811280002c1e40443cc9c74a1", "patch": "@@ -1599,8 +1599,8 @@ impl_spec_from_elem!(u64, |x| x == 0);\n impl_spec_from_elem!(u128, |x| x == 0);\n impl_spec_from_elem!(usize, |x| x == 0);\n \n-impl_spec_from_elem!(f32, |x: f32| x == 0. && x.is_sign_positive());\n-impl_spec_from_elem!(f64, |x: f64| x == 0. && x.is_sign_positive());\n+impl_spec_from_elem!(f32, |x: f32| x.to_bits() == 0);\n+impl_spec_from_elem!(f64, |x: f64| x.to_bits() == 0);\n \n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec"}]}