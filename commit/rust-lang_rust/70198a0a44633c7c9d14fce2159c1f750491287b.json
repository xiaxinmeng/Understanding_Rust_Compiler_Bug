{"sha": "70198a0a44633c7c9d14fce2159c1f750491287b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMTk4YTBhNDQ2MzNjN2M5ZDE0ZmNlMjE1OWMxZjc1MDQ5MTI4N2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-08T05:29:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-08T05:29:24Z"}, "message": "Auto merge of #41818 - michaelwu:hvx-v60, r=nagisa\n\nAdd support for Hexagon v60 HVX intrinsics\n\nHVX is a SIMD coprocessor available on newer hexagon cores. It can be configured for 512 or 1024 bit registers, and some instructions use pairs of registers. It only does integer operations, but it probably has every integer operation you'd want for 8/16/32 bit elements.\n\nThere are a lot of intrinsics. The generator outputs 582 of them. I probably got some wrong. I did some scripting to make sure that every llvm intrinsic name exists, but intrinsic names provided for programs have only been compared by eye to Qualcomm's own names. 64/128 is also appended to the names to select between 512/1024 bit. The C intrinsics don't do this, but they only expose one set, selected at compile time.\n\nThe json specifying the intrinsics required a bit of duplication since I didn't see an easy way to specify combinations of signed/unsigned types (eg. u(8-16) and s(16-32)). I also didn't see an easy way to specify variants of instructions like saturating or rounding.\n\nBasic multiplication and load/store tested on the hexagon simulator.", "tree": {"sha": "dc37812f9f917ca235a3c61ae0f2482e6e71b5e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc37812f9f917ca235a3c61ae0f2482e6e71b5e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70198a0a44633c7c9d14fce2159c1f750491287b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70198a0a44633c7c9d14fce2159c1f750491287b", "html_url": "https://github.com/rust-lang/rust/commit/70198a0a44633c7c9d14fce2159c1f750491287b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70198a0a44633c7c9d14fce2159c1f750491287b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9956e81c19c2f5bbc273d75b49f2e031d80d0e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9956e81c19c2f5bbc273d75b49f2e031d80d0e4e", "html_url": "https://github.com/rust-lang/rust/commit/9956e81c19c2f5bbc273d75b49f2e031d80d0e4e"}, {"sha": "cc4efd1370e2be49abfda9cf90db4523f1043805", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4efd1370e2be49abfda9cf90db4523f1043805", "html_url": "https://github.com/rust-lang/rust/commit/cc4efd1370e2be49abfda9cf90db4523f1043805"}], "stats": {"total": 4289, "additions": 4288, "deletions": 1}, "files": [{"sha": "a1897e6bf6100bd692a34e7f9899bdf5eee9afc6", "filename": "src/etc/platform-intrinsics/hexagon/hvx_v60.json", "status": "added", "additions": 1326, "deletions": 0, "changes": 1326, "blob_url": "https://github.com/rust-lang/rust/blob/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json", "raw_url": "https://github.com/rust-lang/rust/raw/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fhexagon%2Fhvx_v60.json?ref=70198a0a44633c7c9d14fce2159c1f750491287b", "patch": "@@ -0,0 +1,1326 @@\n+{\n+    \"platform\": \"Q6_\",\n+    \"intrinsic_prefix\": \"\",\n+    \"llvm_prefix\": \"llvm.hexagon.V6.\",\n+    \"number_info\": {\n+        \"signed\": {\n+            \"kind\": \"s\",\n+            \"data_type\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" },\n+            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n+        },\n+        \"unsigned\": {\n+            \"kind\": \"u\",\n+            \"data_type\": { \"8\": \"ub\", \"16\": \"uh\", \"32\": \"uw\" },\n+            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n+        },\n+        \"float\": {\n+            \"kind\": \"f\",\n+            \"data_type\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" },\n+            \"data_type_plain\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\" }\n+        }\n+    },\n+    \"width_info\": {\n+        \"64\": { \"width_b\": \"64\", \"width_suffix\": \"\" },\n+        \"128\": { \"width_b\": \"128\", \"width_suffix\": \".128B\" },\n+        \"512\": { \"width_b\": \"64\", \"width_suffix\": \"\" },\n+        \"1024\": { \"widthd_b\": \"64\", \"width_b\": \"128\", \"width_suffix\": \".128B\",  \"widthd_suffix\": \"\" },\n+        \"2048\": { \"widthd_b\": \"128\", \"widthd_suffix\": \".128B\" }\n+    },\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"R_vextract{1.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"extractw{1.width_suffix}\",\n+            \"ret\": \"U32\",\n+            \"args\": [\"u32\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_lo{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"lo{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0d\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_hi{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"hi{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0d\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vsplat_R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"lvsplat{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0S\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_and_QQ{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.and{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_not_Q{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.not{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_or_QQ{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.or{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_xor_QQ{0.width_b}\",\n+            \"width\": [64, 128],\n+            \"llvm\": \"pred.xor{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabsdiff_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabsdiff{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabsdiff_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabsdiff{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(16-32)\",\n+            \"args\": [\"0s\", \"0s\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabs_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabs{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vabs_V{1.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vabs{1.data_type}.sat{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vadd_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(8-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vadd_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"u(8-16)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_valign_VVR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"valignb{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_valign_VVI{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"valignbi{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vlalign_VVR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlalignb{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vlalign_VVI{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlalignbi{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vand_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vand{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vand_QR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandqrt{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"u32hhh\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vandor_VQR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandqrt.acc{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"u32hhh\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vand_VR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandvrt{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vandor_QVR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vandvrt{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasl_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasl{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasl_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasl{0.data_type}v{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vaslacc_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasl{0.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}v{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasracc_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{0.data_type}{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0hw\", \"0hw\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{1.data_type}{0.data_type_plain}sat{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vasr_V{1.data_type}V{2.data_type}R_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vasr{1.data_type}{0.data_type_plain}rndsat{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_equals_V{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vassign{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_equals_W{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vassignp{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}_rnd{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavgrnd{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vavg_V{1.data_type}V{2.data_type}_rnd{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vavgrnd{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vcl0_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vcl0{0.data_type_plain}{0.width_suffix}\",\n+            \"ret\": \"u(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vcombine_VV{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vcombine{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"0h\", \"0h\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vzero{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vd0{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": []\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdeal_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdeal{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdeale_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdeal{1.data_type}4w{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vdeal_VVR{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdealvdd{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"0h\", \"0h\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vdelta_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdelta{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus.acc{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"s16\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus.dv{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpybus.dv.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"s16d\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s32\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb.dv{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhb.dv.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"s32d\", \"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_W{1.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhisat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_W{1.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsuisat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsusat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpy_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhvsat{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"s16\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}W{2.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhisat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdsad_W{1.data_type}Ruh{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdsaduh{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"u16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vdsadacc_W{1.data_type}W{2.data_type}Ruh{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdsaduh.acc{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\", \"u16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Rh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}W{2.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsuisat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}Ruh_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhsusat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vdmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vdmpyhvsat_acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"s16\", \"s16\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eq_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"s(8-32)\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eqand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{2.data_type}.and{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eqor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{2.data_type}.or{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_eqxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"veq{2.data_type}.xor{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gt_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"s(8-32)\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gt_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"u(8-16)\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.and{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtand_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.and{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.or{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtor_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.or{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.xor{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"s(8-32)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"Q_vcmp_gtxacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vgt{2.data_type}.xor{0.width_suffix}\",\n+            \"ret\": \"u32hhh\",\n+            \"args\": [\"0\", \"u(8-16)\", \"2\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vinsert_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vinsertwr{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"S32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlsr_V{1.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlsr{0.data_type_plain}{0.width_suffix}\",\n+            \"ret\": \"u(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlsr_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlsr{0.data_type}v{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlut32_V{1.data_type}V{2.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvv{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vlut16_V{1.data_type}V{2.data_type}R{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvw{0.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"s8\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vlut32or_V{1.data_type}V{2.data_type}V{3.data_type}R{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvv{0.data_type}.oracc{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vlut16or_W{1.data_type}V{2.data_type}V{3.data_type}R{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vlutvw{0.data_type}.oracc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"s8\", \"s16\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmax_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmax{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmax_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmax{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmin_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmin{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmin_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmin{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpabus{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpaacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpabus.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpab{1.kind}{2.kind}v{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"i8d\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpa_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpahb{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpaacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpahb.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"s16d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}us{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0n\", \"0nu\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}us.acc{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0n\", \"0nu\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpybusv{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpybusv.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"0nu\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}v{0.widthd_suffix}\",\n+            \"ret\": \"i(16-32)d\",\n+            \"args\": [\"0n\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}V{3.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}v.acc{0.widthd_suffix}\",\n+            \"ret\": \"i(16-32)d\",\n+            \"args\": [\"0\", \"0n\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpye_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyewuh{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"s32\", \"u16\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}R{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"i32d\",\n+            \"args\": [\"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}R{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}sat.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}R{1.data_type}_s1_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}srs{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}R{1.data_type}_s1_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}ss{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpy_V{1.data_type}V{2.data_type}_s1_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}vsrs{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyieo_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyieo{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0nd\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyieacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyie{2.data_type}{3.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"i16\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyie_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyie{1.data_type}{2.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"u16\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}.acc{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}b{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}b.acc{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rh{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}h{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rh{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}h.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyi_V{1.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}ub{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyiacc_V{1.data_type}V{2.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyi{1.data_type}ub.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_rnd_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.rnd{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_rnd_sat_shift{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.rnd.sacc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyo_V{1.data_type}V{2.data_type}_s1_sat_shift{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyo{1.data_type}{2.data_type}.sacc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmpyio_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpyio{1.data_type}{2.data_type}{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"0nd\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpy_V{1.data_type}R{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"u16d\",\n+            \"args\": [\"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vmpyacc_W{1.data_type}V{2.data_type}R{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmpy{2.data_type}.acc{0.widthd_suffix}\",\n+            \"ret\": \"u(16-32)d\",\n+            \"args\": [\"0\", \"0n\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vmux_QVV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vmux{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vnavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"i(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vnavg_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnavg{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vnormamt_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnormamt{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vnot_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vnot{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vor_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vor{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpacke_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpack{1.data_type}e{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0hw\", \"0hw\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpacko_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpack{1.data_type}o{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0hw\", \"0hw\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpack_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpack{1.data_type}{0.data_type}.sat{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vpopcount_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vpopcount{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vrdelta_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrdelta{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybus{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}Rb{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybus.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpy_W{1.data_type}RbI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusi{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpyacc_W{1.data_type}W{2.data_type}RbI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusi.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusv{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"u8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpybusv.acc{0.width_suffix}\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"0\", \"u8\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpy{1.data_type}v{0.width_suffix}\",\n+            \"ret\": \"i32\",\n+            \"args\": [\"0nndd\", \"0nndd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpy{1.data_type}v.acc{0.width_suffix}\",\n+            \"ret\": \"i32\",\n+            \"args\": [\"0\", \"0nndd\", \"0nndd\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpy_V{1.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyub{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vrmpyacc_V{1.data_type}V{2.data_type}Rub{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyub.acc{0.width_suffix}\",\n+            \"ret\": \"u32\",\n+            \"args\": [\"0\", \"u8\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpy_W{1.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyubi{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrmpyacc_W{1.data_type}W{2.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrmpyubi.acc{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vror_VR{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vror{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vround_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vround{1.data_type}{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"i(8-16)\",\n+            \"args\": [\"0hws\", \"0hws\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrsad_W{1.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrsadubi{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vrsadacc_W{1.data_type}W{2.data_type}RubI{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vrsadubi.acc{0.widthd_suffix}\",\n+            \"ret\": \"u32d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsat_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsat{1.data_type}{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"u8\",\n+            \"args\": [\"0hws\", \"0hws\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsat_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsat{1.data_type}{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0hw\", \"0hw\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsxt_V{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vs{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vzxt_V{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vz{1.data_type_plain}{0.widthd_suffix}\",\n+            \"ret\": \"u(16-32)d\",\n+            \"args\": [\"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condacc_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}q{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condacc_QnV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vadd{0.data_type}nq{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condnac_QV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}q{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_condnac_QnV{2.data_type}V{3.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}nq{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"u32hhh\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffe_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshufe{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffo_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshufo{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuff_V{1.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuff{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffe_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuffe{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffo_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuffo{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s8\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vshuffoe_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshuffoe{1.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vshuff_VVR{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vshufvvd{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"0h\", \"0h\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}{0.width_suffix}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"s(16-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"V{0.data_type}_vsub_V{1.data_type}V{2.data_type}_sat{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat{0.width_suffix}\",\n+            \"ret\": \"u(8-16)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(8-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vsub_W{1.data_type}W{2.data_type}_sat{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vsub{0.data_type}sat.dv{0.widthd_suffix}\",\n+            \"ret\": \"u(8-16)d\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"W_vswap_QVV{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vswap{0.widthd_suffix}\",\n+            \"ret\": \"u8d\",\n+            \"args\": [\"u32hhh\", \"0h\", \"0h\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyb{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyb.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpybus{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpybus.acc{0.widthd_suffix}\",\n+            \"ret\": \"s16d\",\n+            \"args\": [\"0\", \"u8d\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpy_W{1.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyhb{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vunpack_V{1.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vunpack{1.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"i(16-32)d\",\n+            \"args\": [\"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vunpackoor_W{1.data_type}V{2.data_type}{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vunpacko{2.data_type}{0.widthd_suffix}\",\n+            \"ret\": \"s(16-32)d\",\n+            \"args\": [\"0\", \"0n\"]\n+        },\n+        {\n+            \"intrinsic\": \"W{0.data_type}_vtmpyacc_W{1.data_type}W{2.data_type}Rb{0.widthd_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vtmpyhb.acc{0.widthd_suffix}\",\n+            \"ret\": \"s32d\",\n+            \"args\": [\"0\", \"0nd\", \"U32\"]\n+        },\n+        {\n+            \"intrinsic\": \"V_vxor_VV{0.width_b}\",\n+            \"width\": [512, 1024],\n+            \"llvm\": \"vxor{0.width_suffix}\",\n+            \"ret\": \"u16\",\n+            \"args\": [\"0\", \"0\"]\n+        }\n+    ]\n+}"}, {"sha": "718f2b515068b3415033e2cf578e2cb39fd135e5", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=70198a0a44633c7c9d14fce2159c1f750491287b", "patch": "@@ -27,6 +27,8 @@ const X86_WHITELIST: &'static [&'static str] = &[\"avx\\0\", \"avx2\\0\", \"bmi\\0\", \"bm\n                                                  \"ssse3\\0\", \"tbm\\0\", \"lzcnt\\0\", \"popcnt\\0\",\n                                                  \"sse4a\\0\", \"rdrnd\\0\", \"rdseed\\0\", \"fma\\0\"];\n \n+const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\\0\", \"hvx-double\\0\"];\n+\n /// Add `target_feature = \"...\"` cfgs for a variety of platform\n /// specific features (SSE, NEON etc.).\n ///\n@@ -38,6 +40,7 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n     let whitelist = match &*sess.target.target.arch {\n         \"arm\" => ARM_WHITELIST,\n         \"x86\" | \"x86_64\" => X86_WHITELIST,\n+        \"hexagon\" => HEXAGON_WHITELIST,\n         _ => &[],\n     };\n "}, {"sha": "56d639868e0566b4885841c46e04bcac9cdd5ab1", "filename": "src/librustc_platform_intrinsics/hexagon.rs", "status": "added", "additions": 2937, "deletions": 0, "changes": 2937, "blob_url": "https://github.com/rust-lang/rust/blob/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Flibrustc_platform_intrinsics%2Fhexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Flibrustc_platform_intrinsics%2Fhexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fhexagon.rs?ref=70198a0a44633c7c9d14fce2159c1f750491287b"}, {"sha": "dd2d60a1d22d6492dcb98729f1ae7254727d73be", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70198a0a44633c7c9d14fce2159c1f750491287b/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=70198a0a44633c7c9d14fce2159c1f750491287b", "patch": "@@ -29,7 +29,7 @@ pub enum Type {\n     Integer(/* signed */ bool, u8, /* llvm width */ u8),\n     Float(u8),\n     Pointer(&'static Type, Option<&'static Type>, /* const */ bool),\n-    Vector(&'static Type, Option<&'static Type>, u8),\n+    Vector(&'static Type, Option<&'static Type>, u16),\n     Aggregate(bool, &'static [&'static Type]),\n }\n \n@@ -56,20 +56,38 @@ static I8x16: Type = Type::Vector(&I8, None, 16);\n static U8x16: Type = Type::Vector(&U8, None, 16);\n static I8x32: Type = Type::Vector(&I8, None, 32);\n static U8x32: Type = Type::Vector(&U8, None, 32);\n+static I8x64: Type = Type::Vector(&I8, None, 64);\n+static U8x64: Type = Type::Vector(&U8, None, 64);\n+static I8x128: Type = Type::Vector(&I8, None, 128);\n+static U8x128: Type = Type::Vector(&U8, None, 128);\n+static I8x256: Type = Type::Vector(&I8, None, 256);\n+static U8x256: Type = Type::Vector(&U8, None, 256);\n \n static I16x4: Type = Type::Vector(&I16, None, 4);\n static U16x4: Type = Type::Vector(&U16, None, 4);\n static I16x8: Type = Type::Vector(&I16, None, 8);\n static U16x8: Type = Type::Vector(&U16, None, 8);\n static I16x16: Type = Type::Vector(&I16, None, 16);\n static U16x16: Type = Type::Vector(&U16, None, 16);\n+static I16x32: Type = Type::Vector(&I16, None, 32);\n+static U16x32: Type = Type::Vector(&U16, None, 32);\n+static I16x64: Type = Type::Vector(&I16, None, 64);\n+static U16x64: Type = Type::Vector(&U16, None, 64);\n+static I16x128: Type = Type::Vector(&I16, None, 128);\n+static U16x128: Type = Type::Vector(&U16, None, 128);\n \n static I32x2: Type = Type::Vector(&I32, None, 2);\n static U32x2: Type = Type::Vector(&U32, None, 2);\n static I32x4: Type = Type::Vector(&I32, None, 4);\n static U32x4: Type = Type::Vector(&U32, None, 4);\n static I32x8: Type = Type::Vector(&I32, None, 8);\n static U32x8: Type = Type::Vector(&U32, None, 8);\n+static I32x16: Type = Type::Vector(&I32, None, 16);\n+static U32x16: Type = Type::Vector(&U32, None, 16);\n+static I32x32: Type = Type::Vector(&I32, None, 32);\n+static U32x32: Type = Type::Vector(&U32, None, 32);\n+static I32x64: Type = Type::Vector(&I32, None, 64);\n+static U32x64: Type = Type::Vector(&U32, None, 64);\n \n static I64x1: Type = Type::Vector(&I64, None, 1);\n static U64x1: Type = Type::Vector(&U64, None, 1);\n@@ -96,6 +114,7 @@ mod x86;\n mod arm;\n mod aarch64;\n mod nvptx;\n+mod hexagon;\n \n impl Intrinsic {\n     pub fn find(name: &str) -> Option<Intrinsic> {\n@@ -107,6 +126,8 @@ impl Intrinsic {\n             aarch64::find(name)\n         } else if name.starts_with(\"nvptx_\") {\n             nvptx::find(name)\n+        } else if name.starts_with(\"Q6_\") {\n+            hexagon::find(name)\n         } else {\n             None\n         }"}]}