{"sha": "907f7307af8b1824fdd986ff32f78fed5fc54b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2Y3MzA3YWY4YjE4MjRmZGQ5ODZmZjMyZjc4ZmVkNWZjNTRiMzA=", "commit": {"author": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2019-03-17T18:48:25Z"}, "committer": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2019-03-17T18:48:25Z"}, "message": "Implement naive version of fill_struct_fields assist", "tree": {"sha": "4ce62242cc85bc3f34086197ffa14b3fa9a251ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ce62242cc85bc3f34086197ffa14b3fa9a251ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907f7307af8b1824fdd986ff32f78fed5fc54b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907f7307af8b1824fdd986ff32f78fed5fc54b30", "html_url": "https://github.com/rust-lang/rust/commit/907f7307af8b1824fdd986ff32f78fed5fc54b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907f7307af8b1824fdd986ff32f78fed5fc54b30/comments", "author": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd9e93aa14cccb57c4fd9afd93068399db40d837", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9e93aa14cccb57c4fd9afd93068399db40d837", "html_url": "https://github.com/rust-lang/rust/commit/cd9e93aa14cccb57c4fd9afd93068399db40d837"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "05a5ebf66a2c4aaecd0f4d64784ec075c4224070", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/907f7307af8b1824fdd986ff32f78fed5fc54b30/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907f7307af8b1824fdd986ff32f78fed5fc54b30/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=907f7307af8b1824fdd986ff32f78fed5fc54b30", "patch": "@@ -0,0 +1,120 @@\n+use std::fmt::Write;\n+\n+use hir::{AdtDef, Ty, source_binder};\n+use hir::db::HirDatabase;\n+\n+use ra_syntax::ast::{self, AstNode, Expr};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+pub(crate) fn fill_struct_fields(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let struct_lit = ctx.node_at_offset::<ast::StructLit>()?;\n+\n+    // If we already have existing struct fields, don't provide the assist.\n+    // TODO: provide assist for tuple structs\n+    match struct_lit.named_field_list() {\n+        Some(named_field_list) if named_field_list.fields().count() > 0 => {\n+            return None;\n+        }\n+        _ => {}\n+    }\n+\n+    let expr: &Expr = struct_lit.into();\n+    let function =\n+        source_binder::function_from_child_node(ctx.db, ctx.frange.file_id, struct_lit.syntax())?;\n+\n+    let infer_result = function.infer(ctx.db);\n+    let source_map = function.body_source_map(ctx.db);\n+    let node_expr = source_map.node_expr(expr)?;\n+    let struct_lit_ty = infer_result[node_expr].clone();\n+    let struct_def = match struct_lit_ty {\n+        Ty::Adt { def_id: AdtDef::Struct(s), .. } => s,\n+        _ => return None,\n+    };\n+\n+    let struct_name = struct_def.name(ctx.db)?;\n+    let db = ctx.db;\n+\n+    ctx.add_action(AssistId(\"fill_struct_fields\"), \"fill struct fields\", |edit| {\n+        let mut buf = format!(\"{} {{\\n\", struct_name);\n+        let struct_fields = struct_def.fields(db);\n+        for field in struct_fields {\n+            let field_name = field.name(db).to_string();\n+            write!(&mut buf, \"    {}: (),\\n\", field_name).unwrap();\n+        }\n+        buf.push_str(\"}\");\n+\n+        edit.target(struct_lit.syntax().range());\n+        edit.set_cursor(expr.syntax().range().start());\n+        edit.replace_node_and_indent(struct_lit.syntax(), buf);\n+    });\n+\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::{check_assist, check_assist_target};\n+\n+    use super::fill_struct_fields;\n+\n+    #[test]\n+    fn fill_struct_fields_empty_body() {\n+        check_assist(\n+            fill_struct_fields,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                r: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = S<|> {}\n+            }\n+            \"#,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                r: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = <|>S {\n+                    a: (),\n+                    b: (),\n+                    c: (),\n+                    d: (),\n+                    r: (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn fill_struct_fields_target() {\n+        check_assist_target(\n+            fill_struct_fields,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                r: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = S<|> {}\n+            }\n+            \"#,\n+            \"S {}\",\n+        );\n+    }\n+}"}, {"sha": "5efc5025ebd9f2f8c5cb4cde2fb5e4b2c3b08bb9", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907f7307af8b1824fdd986ff32f78fed5fc54b30/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907f7307af8b1824fdd986ff32f78fed5fc54b30/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=907f7307af8b1824fdd986ff32f78fed5fc54b30", "patch": "@@ -90,6 +90,7 @@ mod add_impl;\n mod flip_comma;\n mod change_visibility;\n mod fill_match_arms;\n+mod fill_struct_fields;\n mod introduce_variable;\n mod replace_if_let_with_match;\n mod split_import;\n@@ -102,6 +103,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         add_impl::add_impl,\n         change_visibility::change_visibility,\n         fill_match_arms::fill_match_arms,\n+        fill_struct_fields::fill_struct_fields,\n         flip_comma::flip_comma,\n         introduce_variable::introduce_variable,\n         replace_if_let_with_match::replace_if_let_with_match,"}]}