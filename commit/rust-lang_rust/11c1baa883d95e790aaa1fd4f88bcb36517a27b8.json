{"sha": "11c1baa883d95e790aaa1fd4f88bcb36517a27b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYzFiYWE4ODNkOTVlNzkwYWFhMWZkNGY4OGJjYjM2NTE3YTI3Yjg=", "commit": {"author": {"name": "alexrp", "email": "alex@lycus.org", "date": "2012-08-08T11:33:19Z"}, "committer": {"name": "alexrp", "email": "alex@lycus.org", "date": "2012-08-08T11:33:19Z"}, "message": "Remove remaining references to typestate in the manual.", "tree": {"sha": "f6edd9dc27f643745d2db4933d16cfef64442408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6edd9dc27f643745d2db4933d16cfef64442408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c1baa883d95e790aaa1fd4f88bcb36517a27b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c1baa883d95e790aaa1fd4f88bcb36517a27b8", "html_url": "https://github.com/rust-lang/rust/commit/11c1baa883d95e790aaa1fd4f88bcb36517a27b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c1baa883d95e790aaa1fd4f88bcb36517a27b8/comments", "author": null, "committer": null, "parents": [{"sha": "81aef34a5acd8c546992e100defb6f769b46d9d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/81aef34a5acd8c546992e100defb6f769b46d9d7", "html_url": "https://github.com/rust-lang/rust/commit/81aef34a5acd8c546992e100defb6f769b46d9d7"}], "stats": {"total": 33, "additions": 4, "deletions": 29}, "files": [{"sha": "cbe4525eac1d83178ddce79015661857ff52124f", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11c1baa883d95e790aaa1fd4f88bcb36517a27b8/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/11c1baa883d95e790aaa1fd4f88bcb36517a27b8/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=11c1baa883d95e790aaa1fd4f88bcb36517a27b8", "patch": "@@ -1129,8 +1129,8 @@ looks like:\n \n The only exception is that the body of the class constructor begins\n with all the class's fields uninitialized, and is allowed to -- in\n-fact, must -- initialize all the fields. A special case in the\n-typestate pass enforces this invariant.\n+fact, must -- initialize all the fields. The compiler enforces this\n+invariant.\n \n Usually, the class constructor stores its argument or arguments in the\n class's named fields. In this case, the `file_descriptor`'s data field\n@@ -2067,31 +2067,6 @@ A `loop` expression denotes an infinite loop:\n loop_expr : \"loop\" '{' block '}';\n ~~~~~~~~\n \n-For a block `b`, the expression `loop b` is semantically equivalent to\n-`while true b`. However, `loop`s differ from `while` loops in that the\n-typestate analysis pass takes into account that `loop`s are infinite.\n-\n-For example, the following (contrived) function uses a `loop` with a\n-`return` expression:\n-\n-~~~~\n-fn count() -> bool {\n-  let mut i = 0;\n-  loop {\n-    i += 1;\n-    if i == 20 { return true; }\n-  }\n-}\n-~~~~\n-\n-This function compiles, because typestate recognizes that the `loop`\n-never terminates (except non-locally, with `return`), thus there is no\n-need to insert a spurious `fail` or `return` after the `loop`. If `loop`\n-were replaced with `while true`, the function would be rejected\n-because from the compiler's perspective, there would be a control path\n-along which `count` does not return a value (that is, if the loop\n-condition is always false).\n-\n ### Break expressions\n \n ~~~~~~~~{.ebnf .gram}\n@@ -2533,7 +2508,7 @@ macro-generated and user-written code can cause unintentional capture.\n Future versions of Rust will address these issues.\n \n \n-# Types and typestates\n+# Type system\n \n ## Types\n \n@@ -2959,7 +2934,7 @@ Local variables are not initialized when allocated; the entire frame worth of\n local variables are allocated at once, on frame-entry, in an uninitialized\n state. Subsequent statements within a function may or may not initialize the\n local variables. Local variables can be used only after they have been\n-initialized; this condition is guaranteed by the typestate system.\n+initialized; this is enforced by the compiler.\n \n References are created for function arguments. If the compiler can not prove\n that the referred-to value will outlive the reference, it will try to set"}]}