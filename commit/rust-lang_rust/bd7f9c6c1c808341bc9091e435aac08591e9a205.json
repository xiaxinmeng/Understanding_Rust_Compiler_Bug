{"sha": "bd7f9c6c1c808341bc9091e435aac08591e9a205", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkN2Y5YzZjMWM4MDgzNDFiYzkwOTFlNDM1YWFjMDg1OTFlOWEyMDU=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-12-08T08:01:25Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-12-08T08:01:25Z"}, "message": "Merge remote-tracking branch 'upstream/master' into sync-from-rust", "tree": {"sha": "3e2cec769d3845ab72264c651b65c46e5148c257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e2cec769d3845ab72264c651b65c46e5148c257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7f9c6c1c808341bc9091e435aac08591e9a205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7f9c6c1c808341bc9091e435aac08591e9a205", "html_url": "https://github.com/rust-lang/rust/commit/bd7f9c6c1c808341bc9091e435aac08591e9a205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7f9c6c1c808341bc9091e435aac08591e9a205/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e527baf775221dc25cba5c48cbf44d28893d8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e527baf775221dc25cba5c48cbf44d28893d8cd", "html_url": "https://github.com/rust-lang/rust/commit/0e527baf775221dc25cba5c48cbf44d28893d8cd"}, {"sha": "50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "url": "https://api.github.com/repos/rust-lang/rust/commits/50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "html_url": "https://github.com/rust-lang/rust/commit/50bca8af1dd29b8b376ec217c6c1ee16d6b69228"}], "stats": {"total": 831, "additions": 722, "deletions": 109}, "files": [{"sha": "adb4a5c82610805f62329cf5ad73b1b8dfb99441", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -2024,6 +2024,7 @@ Released 2018-09-13\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n [`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call\n [`redundant_closure_for_method_calls`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\n+[`redundant_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\n [`redundant_field_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n [`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n [`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching"}, {"sha": "55e4755c278a05df449c899cba206db9615626d8", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -480,7 +480,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, span: Span) {\n                     | ItemKind::ForeignMod(..) => return false,\n                     // We found a main function ...\n                     ItemKind::Fn(_, sig, _, Some(block)) if item.ident.name == sym::main => {\n-                        let is_async = matches!(sig.header.asyncness, Async::Yes{..});\n+                        let is_async = matches!(sig.header.asyncness, Async::Yes { .. });\n                         let returns_nothing = match &sig.decl.output {\n                             FnRetTy::Default(..) => true,\n                             FnRetTy::Ty(ty) if ty.kind.is_unit() => true,"}, {"sha": "fd93548b55c6db3a327b2a9ac29fc7464476967b", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -405,13 +405,10 @@ impl<'tcx> Functions {\n                     break;\n                 }\n                 if in_comment {\n-                    match line.find(\"*/\") {\n-                        Some(i) => {\n-                            line = &line[i + 2..];\n-                            in_comment = false;\n-                            continue;\n-                        },\n-                        None => break,\n+                    if let Some(i) = line.find(\"*/\") {\n+                        line = &line[i + 2..];\n+                        in_comment = false;\n+                        continue;\n                     }\n                 } else {\n                     let multi_idx = line.find(\"/*\").unwrap_or_else(|| line.len());\n@@ -423,8 +420,8 @@ impl<'tcx> Functions {\n                         in_comment = true;\n                         continue;\n                     }\n-                    break;\n                 }\n+                break;\n             }\n             if code_in_line {\n                 line_count += 1;"}, {"sha": "eb5857348fd390804113d7ad1f27f22cce7309c9", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "6fe5335109045acfd799b46e75a994d0c5416255", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -222,9 +222,8 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n         if cx.access_levels.is_exported(is_empty.id.hir_id) {\n             return;\n-        } else {\n-            \"a private\"\n         }\n+        \"a private\"\n     } else {\n         \"no corresponding\"\n     };"}, {"sha": "ac5a45ccfd242f5360f10207e183839a99d7dc5d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -294,6 +294,7 @@ mod question_mark;\n mod ranges;\n mod redundant_clone;\n mod redundant_closure_call;\n+mod redundant_else;\n mod redundant_field_names;\n mod redundant_pub_crate;\n mod redundant_static_lifetimes;\n@@ -831,6 +832,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ranges::REVERSED_EMPTY_RANGES,\n         &redundant_clone::REDUNDANT_CLONE,\n         &redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n+        &redundant_else::REDUNDANT_ELSE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n@@ -1132,6 +1134,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n+    store.register_early_pass(|| box redundant_else::RedundantElse);\n     store.register_late_pass(|| box create_dir::CreateDir);\n     store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n@@ -1308,6 +1311,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n+        LintId::of(&redundant_else::REDUNDANT_ELSE),\n         LintId::of(&ref_option_ref::REF_OPTION_REF),\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),"}, {"sha": "2a1a73f98ee5caad7d3985c43165f6e461c19b1a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -689,10 +689,9 @@ fn check_single_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], exp\n             if stmts.len() == 1 && block_expr.is_none() || stmts.is_empty() && block_expr.is_some() {\n                 // single statement/expr \"else\" block, don't lint\n                 return;\n-            } else {\n-                // block with 2+ statements or 1 expr and 1+ statement\n-                Some(els)\n             }\n+            // block with 2+ statements or 1 expr and 1+ statement\n+            Some(els)\n         } else {\n             // not a block, don't lint\n             return;"}, {"sha": "d082a88cd2db55a9d56e48160d78696a03722500", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -69,10 +69,9 @@ fn check_expression<'tcx>(cx: &LateContext<'tcx>, arg_id: hir::HirId, expr: &'tc\n                             }\n                         }\n                         return (true, false);\n-                    } else {\n-                        // We don't know. It might do anything.\n-                        return (true, true);\n                     }\n+                    // We don't know. It might do anything.\n+                    return (true, true);\n                 }\n             }\n             (true, true)"}, {"sha": "38e2ce563eeb2951feda3de9b0ae55633230111c", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -99,7 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                 let has_const_generic_params = generics\n                     .params\n                     .iter()\n-                    .any(|param| matches!(param.kind, GenericParamKind::Const{ .. }));\n+                    .any(|param| matches!(param.kind, GenericParamKind::Const { .. }));\n \n                 if already_const(header) || has_const_generic_params {\n                     return;"}, {"sha": "5043b7b1fc3c1858743ee4862127e67aed09a4a0", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -90,9 +90,10 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n \n         // Exclude non-inherent impls\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), .. } |\n-                ItemKind::Trait(..))\n-            {\n+            if matches!(\n+                item.kind,\n+                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+            ) {\n                 return;\n             }\n         }"}, {"sha": "446426b3e611f84e8ccad4a21cedab263ffda6ee", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -409,11 +409,10 @@ fn levenstein_not_1(a_name: &str, b_name: &str) -> bool {\n         if let Some(b2) = b_chars.next() {\n             // check if there's just one character inserted\n             return a != b2 || a_chars.ne(b_chars);\n-        } else {\n-            // tuple\n-            // ntuple\n-            return true;\n         }\n+        // tuple\n+        // ntuple\n+        return true;\n     }\n     // for item in items\n     true"}, {"sha": "37e2b50def17a389b7473a280f59527f6ed2785b", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -1,18 +1,16 @@\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, return_ty, span_lint_and_then};\n+use crate::utils::{find_macro_calls, is_type_diagnostic_item, return_ty, span_lint_and_then};\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n-use rustc_hir::Expr;\n+use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!` or `unreachable!` in a function of type result.\n+    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!`, `unreachable!` or assertions in a function of type result.\n     ///\n-    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence unimplemented, panic and unreachable should be avoided.\n+    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence panicking macros should be avoided.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Functions called from a function returning a `Result` may invoke a panicking macro. This is not checked.\n     ///\n     /// **Example:**\n     ///\n@@ -22,9 +20,15 @@ declare_clippy_lint! {\n     ///     panic!(\"error\");\n     /// }\n     /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn result_without_panic() -> Result<bool, String> {\n+    ///     Err(String::from(\"error\"))\n+    /// }\n+    /// ```\n     pub PANIC_IN_RESULT_FN,\n     restriction,\n-    \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \"\n+    \"functions of type `Result<..>` that contain `panic!()`, `todo!()`, `unreachable()`, `unimplemented()` or assertion\"\n }\n \n declare_lint_pass!(PanicInResultFn  => [PANIC_IN_RESULT_FN]);\n@@ -47,43 +51,33 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n     }\n }\n \n-struct FindPanicUnimplementedUnreachable {\n-    result: Vec<Span>,\n-}\n-\n-impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if [\"unimplemented\", \"unreachable\", \"panic\", \"todo\"]\n-            .iter()\n-            .any(|fun| is_expn_of(expr.span, fun).is_some())\n-        {\n-            self.result.push(expr.span);\n-        }\n-        // and check sub-expressions\n-        intravisit::walk_expr(self, expr);\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir::Body<'tcx>) {\n-    let mut panics = FindPanicUnimplementedUnreachable { result: Vec::new() };\n-    panics.visit_expr(&body.value);\n-    if !panics.result.is_empty() {\n+    let panics = find_macro_calls(\n+        &[\n+            \"unimplemented\",\n+            \"unreachable\",\n+            \"panic\",\n+            \"todo\",\n+            \"assert\",\n+            \"assert_eq\",\n+            \"assert_ne\",\n+            \"debug_assert\",\n+            \"debug_assert_eq\",\n+            \"debug_assert_ne\",\n+        ],\n+        body,\n+    );\n+    if !panics.is_empty() {\n         span_lint_and_then(\n             cx,\n             PANIC_IN_RESULT_FN,\n             impl_span,\n-            \"used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\",\n+            \"used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\",\n             move |diag| {\n                 diag.help(\n-                    \"`unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\",\n+                    \"`unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\",\n                 );\n-                diag.span_note(panics.result, \"return Err() instead of panicking\");\n+                diag.span_note(panics, \"return Err() instead of panicking\");\n             },\n         );\n     }"}, {"sha": "6a17d654ac943e55f3964cfd9a8b7865c296b53e", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -244,9 +244,10 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n \n         // Exclude non-inherent impls\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), .. } |\n-            ItemKind::Trait(..))\n-            {\n+            if matches!(\n+                item.kind,\n+                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+            ) {\n                 return;\n             }\n         }"}, {"sha": "06adbb523d706288c4e1a98b8a990fb188af7313", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -390,7 +390,10 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n         let local = place.local;\n \n         if local == self.used.0\n-            && !matches!(ctx, PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(_))\n+            && !matches!(\n+                ctx,\n+                PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(_)\n+            )\n         {\n             self.used.1 = true;\n         }"}, {"sha": "3d585cd27a3d07c9a5e808526767eae4cdaacd8d", "filename": "clippy_lints/src/redundant_else.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_else.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -0,0 +1,135 @@\n+use crate::utils::span_lint_and_help;\n+use rustc_ast::ast::{Block, Expr, ExprKind, Stmt, StmtKind};\n+use rustc_ast::visit::{walk_expr, Visitor};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `else` blocks that can be removed without changing semantics.\n+    ///\n+    /// **Why is this bad?** The `else` block adds unnecessary indentation and verbosity.\n+    ///\n+    /// **Known problems:** Some may prefer to keep the `else` block for clarity.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn my_func(count: u32) {\n+    ///     if count == 0 {\n+    ///         print!(\"Nothing to do\");\n+    ///         return;\n+    ///     } else {\n+    ///         print!(\"Moving on...\");\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn my_func(count: u32) {\n+    ///     if count == 0 {\n+    ///         print!(\"Nothing to do\");\n+    ///         return;\n+    ///     }\n+    ///     print!(\"Moving on...\");\n+    /// }\n+    /// ```\n+    pub REDUNDANT_ELSE,\n+    pedantic,\n+    \"`else` branch that can be removed without changing semantics\"\n+}\n+\n+declare_lint_pass!(RedundantElse => [REDUNDANT_ELSE]);\n+\n+impl EarlyLintPass for RedundantElse {\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n+        if in_external_macro(cx.sess, stmt.span) {\n+            return;\n+        }\n+        // Only look at expressions that are a whole statement\n+        let expr: &Expr = match &stmt.kind {\n+            StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr,\n+            _ => return,\n+        };\n+        // if else\n+        let (mut then, mut els): (&Block, &Expr) = match &expr.kind {\n+            ExprKind::If(_, then, Some(els)) => (then, els),\n+            _ => return,\n+        };\n+        loop {\n+            if !BreakVisitor::default().check_block(then) {\n+                // then block does not always break\n+                return;\n+            }\n+            match &els.kind {\n+                // else if else\n+                ExprKind::If(_, next_then, Some(next_els)) => {\n+                    then = next_then;\n+                    els = next_els;\n+                    continue;\n+                },\n+                // else if without else\n+                ExprKind::If(..) => return,\n+                // done\n+                _ => break,\n+            }\n+        }\n+        span_lint_and_help(\n+            cx,\n+            REDUNDANT_ELSE,\n+            els.span,\n+            \"redundant else block\",\n+            None,\n+            \"remove the `else` block and move the contents out\",\n+        );\n+    }\n+}\n+\n+/// Call `check` functions to check if an expression always breaks control flow\n+#[derive(Default)]\n+struct BreakVisitor {\n+    is_break: bool,\n+}\n+\n+impl<'ast> Visitor<'ast> for BreakVisitor {\n+    fn visit_block(&mut self, block: &'ast Block) {\n+        self.is_break = match block.stmts.as_slice() {\n+            [.., last] => self.check_stmt(last),\n+            _ => false,\n+        };\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'ast Expr) {\n+        self.is_break = match expr.kind {\n+            ExprKind::Break(..) | ExprKind::Continue(..) | ExprKind::Ret(..) => true,\n+            ExprKind::Match(_, ref arms) => arms.iter().all(|arm| self.check_expr(&arm.body)),\n+            ExprKind::If(_, ref then, Some(ref els)) => self.check_block(then) && self.check_expr(els),\n+            ExprKind::If(_, _, None)\n+            // ignore loops for simplicity\n+            | ExprKind::While(..) | ExprKind::ForLoop(..) | ExprKind::Loop(..) => false,\n+            _ => {\n+                walk_expr(self, expr);\n+                return;\n+            },\n+        };\n+    }\n+}\n+\n+impl BreakVisitor {\n+    fn check<T>(&mut self, item: T, visit: fn(&mut Self, T)) -> bool {\n+        visit(self, item);\n+        std::mem::replace(&mut self.is_break, false)\n+    }\n+\n+    fn check_block(&mut self, block: &Block) -> bool {\n+        self.check(block, Self::visit_block)\n+    }\n+\n+    fn check_expr(&mut self, expr: &Expr) -> bool {\n+        self.check(expr, Self::visit_expr)\n+    }\n+\n+    fn check_stmt(&mut self, stmt: &Stmt) -> bool {\n+        self.check(stmt, Self::visit_stmt)\n+    }\n+}"}, {"sha": "fd74783335d57599bd57b3a1fd4d1fc9b7f75e31", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -1104,7 +1104,9 @@ fn is_empty_block(expr: &Expr<'_>) -> bool {\n         expr.kind,\n         ExprKind::Block(\n             Block {\n-                stmts: &[], expr: None, ..\n+                stmts: &[],\n+                expr: None,\n+                ..\n             },\n             _,\n         )"}, {"sha": "e763da593d49bd8be4bc1185621f1291cfbbc4a7", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -74,7 +74,10 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-            if matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), ..} | ItemKind::Trait(..)) {\n+            if matches!(\n+                item.kind,\n+                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+            ) {\n                 return;\n             }\n         }"}, {"sha": "f0267e4c792893b36869f19ed32f5103c8c5569b", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -408,7 +408,10 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n }\n \n pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n-    matches!((l, r), (Defaultness::Final, Defaultness::Final) | (Defaultness::Default(_), Defaultness::Default(_)))\n+    matches!(\n+        (l, r),\n+        (Defaultness::Final, Defaultness::Final) | (Defaultness::Default(_), Defaultness::Default(_))\n+    )\n }\n \n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {"}, {"sha": "e83371f8b99a4c3007641b1661fbc6745e318e6b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -41,7 +41,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::{\n     def, Arm, Block, Body, Constness, Crate, Expr, ExprKind, FnDecl, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n@@ -603,6 +603,37 @@ pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n     visitor.found\n }\n \n+struct FindMacroCalls<'a, 'b> {\n+    names: &'a [&'b str],\n+    result: Vec<Span>,\n+}\n+\n+impl<'a, 'b, 'tcx> Visitor<'tcx> for FindMacroCalls<'a, 'b> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.names.iter().any(|fun| is_expn_of(expr.span, fun).is_some()) {\n+            self.result.push(expr.span);\n+        }\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+/// Finds calls of the specified macros in a function body.\n+pub fn find_macro_calls(names: &[&str], body: &Body<'_>) -> Vec<Span> {\n+    let mut fmc = FindMacroCalls {\n+        names,\n+        result: Vec::new(),\n+    };\n+    fmc.visit_expr(&body.value);\n+    fmc.result\n+}\n+\n /// Converts a span to a code snippet if available, otherwise use default.\n ///\n /// This is useful if you want to provide suggestions for your lint or more generally, if you want\n@@ -1500,7 +1531,7 @@ pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-        matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), .. })\n+        matches!(item.kind, ItemKind::Impl { of_trait: Some(_), .. })\n     } else {\n         false\n     }"}, {"sha": "fc0db7f64ec9550dbc0dc830c6fb5c833a2a6a24", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -116,20 +116,27 @@ pub struct ParamBindingIdCollector {\n }\n impl<'tcx> ParamBindingIdCollector {\n     fn collect_binding_hir_ids(body: &'tcx hir::Body<'tcx>) -> Vec<hir::HirId> {\n-        let mut finder = ParamBindingIdCollector {\n-            binding_hir_ids: Vec::new(),\n-        };\n-        finder.visit_body(body);\n-        finder.binding_hir_ids\n+        let mut hir_ids: Vec<hir::HirId> = Vec::new();\n+        for param in body.params.iter() {\n+            let mut finder = ParamBindingIdCollector {\n+                binding_hir_ids: Vec::new(),\n+            };\n+            finder.visit_param(param);\n+            for hir_id in &finder.binding_hir_ids {\n+                hir_ids.push(*hir_id);\n+            }\n+        }\n+        hir_ids\n     }\n }\n impl<'tcx> intravisit::Visitor<'tcx> for ParamBindingIdCollector {\n     type Map = Map<'tcx>;\n \n-    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        if let hir::PatKind::Binding(_, hir_id, ..) = param.pat.kind {\n+    fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {\n+        if let hir::PatKind::Binding(_, hir_id, ..) = pat.kind {\n             self.binding_hir_ids.push(hir_id);\n         }\n+        intravisit::walk_pat(self, pat);\n     }\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "eb744b0c198fabf28dc94e0b387d4d09da513c57", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -1,4 +1,4 @@\n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:7:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n@@ -8,15 +8,15 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:9:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:12:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n@@ -25,15 +25,15 @@ LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:14:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:17:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n@@ -42,15 +42,15 @@ LL | |         unreachable!();\n LL | |     }\n    | |_____^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:19:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:22:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n@@ -59,15 +59,15 @@ LL | |         todo!(\"Finish this\");\n LL | |     }\n    | |_____^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:24:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:53:1\n    |\n LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n@@ -76,15 +76,15 @@ LL | |     panic!(\"error\");\n LL | | }\n    | |_^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:55:5\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:68:1\n    |\n LL | / fn main() -> Result<(), String> {\n@@ -93,7 +93,7 @@ LL | |     Ok(())\n LL | | }\n    | |_^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:69:5\n    |"}, {"sha": "ffdf8288adc709d1808072d082e3325b35c3821f", "filename": "tests/ui/panic_in_result_fn_assertions.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_assertions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_assertions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -0,0 +1,48 @@\n+#![warn(clippy::panic_in_result_fn)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+struct A;\n+\n+impl A {\n+    fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        assert!(x == 5, \"wrong argument\");\n+        Ok(true)\n+    }\n+\n+    fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        assert_eq!(x, 5);\n+        Ok(true)\n+    }\n+\n+    fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        assert_ne!(x, 1);\n+        Ok(true)\n+    }\n+\n+    fn other_with_assert_with_message(x: i32) // should not emit lint\n+    {\n+        assert!(x == 5, \"wrong argument\");\n+    }\n+\n+    fn other_with_assert_eq(x: i32) // should not emit lint\n+    {\n+        assert_eq!(x, 5);\n+    }\n+\n+    fn other_with_assert_ne(x: i32) // should not emit lint\n+    {\n+        assert_ne!(x, 1);\n+    }\n+\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    {\n+        let assert = \"assert!\";\n+        println!(\"No {}\", assert);\n+        Ok(true)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "86f61ad718a9cbde8b19597bb06fcf39074abad4", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -0,0 +1,57 @@\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_assertions.rs:7:5\n+   |\n+LL | /     fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         assert!(x == 5, \"wrong argument\");\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_assertions.rs:9:9\n+   |\n+LL |         assert!(x == 5, \"wrong argument\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_assertions.rs:13:5\n+   |\n+LL | /     fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         assert_eq!(x, 5);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_assertions.rs:15:9\n+   |\n+LL |         assert_eq!(x, 5);\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_assertions.rs:19:5\n+   |\n+LL | /     fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         assert_ne!(x, 1);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_assertions.rs:21:9\n+   |\n+LL |         assert_ne!(x, 1);\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b60c79f97c865935a72e954ad765a6680e5eb4d2", "filename": "tests/ui/panic_in_result_fn_debug_assertions.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -0,0 +1,48 @@\n+#![warn(clippy::panic_in_result_fn)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+struct A;\n+\n+impl A {\n+    fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        debug_assert!(x == 5, \"wrong argument\");\n+        Ok(true)\n+    }\n+\n+    fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        debug_assert_eq!(x, 5);\n+        Ok(true)\n+    }\n+\n+    fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        debug_assert_ne!(x, 1);\n+        Ok(true)\n+    }\n+\n+    fn other_with_debug_assert_with_message(x: i32) // should not emit lint\n+    {\n+        debug_assert!(x == 5, \"wrong argument\");\n+    }\n+\n+    fn other_with_debug_assert_eq(x: i32) // should not emit lint\n+    {\n+        debug_assert_eq!(x, 5);\n+    }\n+\n+    fn other_with_debug_assert_ne(x: i32) // should not emit lint\n+    {\n+        debug_assert_ne!(x, 1);\n+    }\n+\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    {\n+        let debug_assert = \"debug_assert!\";\n+        println!(\"No {}\", debug_assert);\n+        Ok(true)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ec18e89698c56d6d2cc59a158adcdb3a0053e166", "filename": "tests/ui/panic_in_result_fn_debug_assertions.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -0,0 +1,57 @@\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:7:5\n+   |\n+LL | /     fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         debug_assert!(x == 5, \"wrong argument\");\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:9:9\n+   |\n+LL |         debug_assert!(x == 5, \"wrong argument\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:13:5\n+   |\n+LL | /     fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         debug_assert_eq!(x, 5);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:15:9\n+   |\n+LL |         debug_assert_eq!(x, 5);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:19:5\n+   |\n+LL | /     fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         debug_assert_ne!(x, 1);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:21:9\n+   |\n+LL |         debug_assert_ne!(x, 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "737c8a9f8db43783313ab6d6fdfbfe0341709984", "filename": "tests/ui/redundant_else.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_else.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -0,0 +1,154 @@\n+#![warn(clippy::redundant_else)]\n+#![allow(clippy::needless_return)]\n+\n+fn main() {\n+    loop {\n+        // break\n+        if foo() {\n+            println!(\"Love your neighbor;\");\n+            break;\n+        } else {\n+            println!(\"yet don't pull down your hedge.\");\n+        }\n+        // continue\n+        if foo() {\n+            println!(\"He that lies down with Dogs,\");\n+            continue;\n+        } else {\n+            println!(\"shall rise up with fleas.\");\n+        }\n+        // match block\n+        if foo() {\n+            match foo() {\n+                1 => break,\n+                _ => return,\n+            }\n+        } else {\n+            println!(\"You may delay, but time will not.\");\n+        }\n+    }\n+    // else if\n+    if foo() {\n+        return;\n+    } else if foo() {\n+        return;\n+    } else {\n+        println!(\"A fat kitchen makes a lean will.\");\n+    }\n+    // let binding outside of block\n+    let _ = {\n+        if foo() {\n+            return;\n+        } else {\n+            1\n+        }\n+    };\n+    // else if with let binding outside of block\n+    let _ = {\n+        if foo() {\n+            return;\n+        } else if foo() {\n+            return;\n+        } else {\n+            2\n+        }\n+    };\n+    // inside if let\n+    let _ = if let Some(1) = foo() {\n+        let _ = 1;\n+        if foo() {\n+            return;\n+        } else {\n+            1\n+        }\n+    } else {\n+        1\n+    };\n+\n+    //\n+    // non-lint cases\n+    //\n+\n+    // sanity check\n+    if foo() {\n+        let _ = 1;\n+    } else {\n+        println!(\"Who is wise? He that learns from every one.\");\n+    }\n+    // else if without else\n+    if foo() {\n+        return;\n+    } else if foo() {\n+        foo()\n+    };\n+    // nested if return\n+    if foo() {\n+        if foo() {\n+            return;\n+        }\n+    } else {\n+        foo()\n+    };\n+    // match with non-breaking branch\n+    if foo() {\n+        match foo() {\n+            1 => foo(),\n+            _ => return,\n+        }\n+    } else {\n+        println!(\"Three may keep a secret, if two of them are dead.\");\n+    }\n+    // let binding\n+    let _ = if foo() {\n+        return;\n+    } else {\n+        1\n+    };\n+    // assign\n+    let a;\n+    a = if foo() {\n+        return;\n+    } else {\n+        1\n+    };\n+    // assign-op\n+    a += if foo() {\n+        return;\n+    } else {\n+        1\n+    };\n+    // if return else if else\n+    if foo() {\n+        return;\n+    } else if foo() {\n+        1\n+    } else {\n+        2\n+    };\n+    // if else if return else\n+    if foo() {\n+        1\n+    } else if foo() {\n+        return;\n+    } else {\n+        2\n+    };\n+    // else if with let binding\n+    let _ = if foo() {\n+        return;\n+    } else if foo() {\n+        return;\n+    } else {\n+        2\n+    };\n+    // inside function call\n+    Box::new(if foo() {\n+        return;\n+    } else {\n+        1\n+    });\n+}\n+\n+fn foo<T>() -> T {\n+    unimplemented!(\"I'm not Santa Claus\")\n+}"}, {"sha": "9000cdc814b1fe7fe27ec966785d9d106851dd2f", "filename": "tests/ui/redundant_else.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fredundant_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Fredundant_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_else.stderr?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -0,0 +1,80 @@\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:10:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             println!(\"yet don't pull down your hedge.\");\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: `-D clippy::redundant-else` implied by `-D warnings`\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:17:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             println!(\"shall rise up with fleas.\");\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:26:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             println!(\"You may delay, but time will not.\");\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:35:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         println!(\"A fat kitchen makes a lean will.\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:42:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             1\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:52:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             2\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:61:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             1\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "b05dd143bfd745f6901e2fd34109bdae5fdd611c", "filename": "tests/ui/unnecessary_lazy_eval_unfixable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7f9c6c1c808341bc9091e435aac08591e9a205/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs?ref=bd7f9c6c1c808341bc9091e435aac08591e9a205", "patch": "@@ -15,4 +15,8 @@ fn main() {\n     }\n     let _ = Ok(1).unwrap_or_else(|e::E| 2);\n     let _ = Ok(1).unwrap_or_else(|SomeStruct { .. }| 2);\n+\n+    // Fix #6343\n+    let arr = [(Some(1),)];\n+    Some(&0).and_then(|&i| arr[i].0);\n }"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e527baf775221dc25cba5c48cbf44d28893d8cd/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/0e527baf775221dc25cba5c48cbf44d28893d8cd/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=0e527baf775221dc25cba5c48cbf44d28893d8cd", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}