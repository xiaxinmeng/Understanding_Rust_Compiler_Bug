{"sha": "85fb5cdf2633e91c5101dd8fb89a637c6d007802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZmI1Y2RmMjYzM2U5MWM1MTAxZGQ4ZmI4OWE2MzdjNmQwMDc4MDI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-06T16:01:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-06T16:01:45Z"}, "message": "Rollup merge of #81680 - camsteffen:primty, r=oli-obk\n\nRefactor `PrimitiveTypeTable` for Clippy\n\nI removed `PrimitiveTypeTable` and added `PrimTy::ALL` and `PrimTy::from_name` in its place. This allows Clippy to use `PrimTy::from_name` for the `builtin_type_shadow` lint, and a `const` list of primitive types is deleted from Clippy code (the goal). All changes should be a little faster, if anything.", "tree": {"sha": "5b8f7cea569dfac657166b0f7d0e85f3381f37bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b8f7cea569dfac657166b0f7d0e85f3381f37bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85fb5cdf2633e91c5101dd8fb89a637c6d007802", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHr1pCRBK7hj4Ov3rIwAAdHIIAIzR67MqjECzsOqKClhkJRVV\nwmcgYG6HWOvBC9Zfxf0aYH7BFF4MAk8/1OAWQMdHVM6eH2CMjk24xpaeKhPCvW9t\nSgOAPdkwqF0l79n84cuSsgjnyO5cmW+BVAjxAfBy6N0yeVRqswBdfwUhYBgUfaI6\nxOXtNhd7lcxVyejm3rD+Gv76DR6aTYnugzfnexSO3KYRtDgbBLTISMK37KhcA4Q1\ni0vafTWSpOEhVBAnE2FA7sOkz4hkCugp1qO5J+GGC2j1C2526IBp53h7rpWLSGNp\nbrEaizZpoMERM4hUnwfTRStSJ5lr938XgwoZ9BDr7/oqVsC4IoC2axj6po5a0bM=\n=Q9c6\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b8f7cea569dfac657166b0f7d0e85f3381f37bf\nparent 747abb86db0ed0eeb97e5373a2111c767eb8c173\nparent f66115dc10d53976daba4bad7ec522a151c4c5a4\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612627305 +0100\ncommitter GitHub <noreply@github.com> 1612627305 +0100\n\nRollup merge of #81680 - camsteffen:primty, r=oli-obk\n\nRefactor `PrimitiveTypeTable` for Clippy\n\nI removed `PrimitiveTypeTable` and added `PrimTy::ALL` and `PrimTy::from_name` in its place. This allows Clippy to use `PrimTy::from_name` for the `builtin_type_shadow` lint, and a `const` list of primitive types is deleted from Clippy code (the goal). All changes should be a little faster, if anything.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85fb5cdf2633e91c5101dd8fb89a637c6d007802", "html_url": "https://github.com/rust-lang/rust/commit/85fb5cdf2633e91c5101dd8fb89a637c6d007802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85fb5cdf2633e91c5101dd8fb89a637c6d007802/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747abb86db0ed0eeb97e5373a2111c767eb8c173", "url": "https://api.github.com/repos/rust-lang/rust/commits/747abb86db0ed0eeb97e5373a2111c767eb8c173", "html_url": "https://github.com/rust-lang/rust/commit/747abb86db0ed0eeb97e5373a2111c767eb8c173"}, {"sha": "f66115dc10d53976daba4bad7ec522a151c4c5a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66115dc10d53976daba4bad7ec522a151c4c5a4", "html_url": "https://github.com/rust-lang/rust/commit/f66115dc10d53976daba4bad7ec522a151c4c5a4"}], "stats": {"total": 151, "additions": 71, "deletions": 80}, "files": [{"sha": "49d9e3b60b49214955d26d90c9eed6156d4c4f8c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -2058,6 +2058,28 @@ pub enum PrimTy {\n }\n \n impl PrimTy {\n+    /// All of the primitive types\n+    pub const ALL: [Self; 17] = [\n+        // any changes here should also be reflected in `PrimTy::from_name`\n+        Self::Int(IntTy::I8),\n+        Self::Int(IntTy::I16),\n+        Self::Int(IntTy::I32),\n+        Self::Int(IntTy::I64),\n+        Self::Int(IntTy::I128),\n+        Self::Int(IntTy::Isize),\n+        Self::Uint(UintTy::U8),\n+        Self::Uint(UintTy::U16),\n+        Self::Uint(UintTy::U32),\n+        Self::Uint(UintTy::U64),\n+        Self::Uint(UintTy::U128),\n+        Self::Uint(UintTy::Usize),\n+        Self::Float(FloatTy::F32),\n+        Self::Float(FloatTy::F64),\n+        Self::Bool,\n+        Self::Char,\n+        Self::Str,\n+    ];\n+\n     pub fn name_str(self) -> &'static str {\n         match self {\n             PrimTy::Int(i) => i.name_str(),\n@@ -2079,6 +2101,33 @@ impl PrimTy {\n             PrimTy::Char => sym::char,\n         }\n     }\n+\n+    /// Returns the matching `PrimTy` for a `Symbol` such as \"str\" or \"i32\".\n+    /// Returns `None` if no matching type is found.\n+    pub fn from_name(name: Symbol) -> Option<Self> {\n+        let ty = match name {\n+            // any changes here should also be reflected in `PrimTy::ALL`\n+            sym::i8 => Self::Int(IntTy::I8),\n+            sym::i16 => Self::Int(IntTy::I16),\n+            sym::i32 => Self::Int(IntTy::I32),\n+            sym::i64 => Self::Int(IntTy::I64),\n+            sym::i128 => Self::Int(IntTy::I128),\n+            sym::isize => Self::Int(IntTy::Isize),\n+            sym::u8 => Self::Uint(UintTy::U8),\n+            sym::u16 => Self::Uint(UintTy::U16),\n+            sym::u32 => Self::Uint(UintTy::U32),\n+            sym::u64 => Self::Uint(UintTy::U64),\n+            sym::u128 => Self::Uint(UintTy::U128),\n+            sym::usize => Self::Uint(UintTy::Usize),\n+            sym::f32 => Self::Float(FloatTy::F32),\n+            sym::f64 => Self::Float(FloatTy::F64),\n+            sym::bool => Self::Bool,\n+            sym::char => Self::Char,\n+            sym::str => Self::Str,\n+            _ => return None,\n+        };\n+        Some(ty)\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "7493fd68505fea8bb20886b96c878f0515205c4d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -9,6 +9,7 @@ use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::PrimTy;\n use rustc_middle::bug;\n use rustc_middle::ty::{self, DefIdTree};\n use rustc_session::Session;\n@@ -718,10 +719,9 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n                 Scope::BuiltinTypes => {\n-                    let primitive_types = &this.primitive_type_table.primitive_types;\n-                    suggestions.extend(primitive_types.iter().flat_map(|(name, prim_ty)| {\n+                    suggestions.extend(PrimTy::ALL.iter().filter_map(|prim_ty| {\n                         let res = Res::PrimTy(*prim_ty);\n-                        filter_fn(res).then_some(TypoSuggestion::from_res(*name, res))\n+                        filter_fn(res).then_some(TypoSuggestion::from_res(prim_ty.name(), res))\n                     }))\n                 }\n             }"}, {"sha": "cca40a793dd006cfd2092bb91f97740260f4aa02", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc_hir::TraitCandidate;\n+use rustc_hir::{PrimTy, TraitCandidate};\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -1927,7 +1927,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.r.trait_map.insert(id, traits);\n                 }\n \n-                if self.r.primitive_type_table.primitive_types.contains_key(&path[0].ident.name) {\n+                if PrimTy::from_name(path[0].ident.name).is_some() {\n                     let mut std_path = Vec::with_capacity(1 + path.len());\n \n                     std_path.push(Segment::from_ident(Ident::with_dummy_span(sym::std)));\n@@ -2121,13 +2121,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // The same fallback is used when `a` resolves to nothing.\n             PathResult::Module(ModuleOrUniformRoot::Module(_)) | PathResult::Failed { .. }\n                 if (ns == TypeNS || path.len() > 1)\n-                    && self\n-                        .r\n-                        .primitive_type_table\n-                        .primitive_types\n-                        .contains_key(&path[0].ident.name) =>\n+                    && PrimTy::from_name(path[0].ident.name).is_some() =>\n             {\n-                let prim = self.r.primitive_type_table.primitive_types[&path[0].ident.name];\n+                let prim = PrimTy::from_name(path[0].ident.name).unwrap();\n                 PartialRes::with_unresolved_segments(Res::PrimTy(prim), path.len() - 1)\n             }\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) => {"}, {"sha": "d2a693a568828b4e9f771ba0d5e328c4a9928c82", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -1212,8 +1212,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             // Add primitive types to the mix\n             if filter_fn(Res::PrimTy(PrimTy::Bool)) {\n                 names.extend(\n-                    self.r.primitive_type_table.primitive_types.iter().map(|(name, prim_ty)| {\n-                        TypoSuggestion::from_res(*name, Res::PrimTy(*prim_ty))\n+                    PrimTy::ALL.iter().map(|prim_ty| {\n+                        TypoSuggestion::from_res(prim_ty.name(), Res::PrimTy(*prim_ty))\n                     }),\n                 )\n             }"}, {"sha": "2be669a1726a1d7da97609534a7c7f9a0453269c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -25,7 +25,7 @@ use rustc_arena::{DroplessArena, TypedArena};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::unwrap_or;\n use rustc_ast::visit::{self, Visitor};\n-use rustc_ast::{self as ast, FloatTy, IntTy, NodeId, UintTy};\n+use rustc_ast::{self as ast, NodeId};\n use rustc_ast::{Crate, CRATE_NODE_ID};\n use rustc_ast::{ItemKind, Path};\n use rustc_ast_lowering::ResolverAstLowering;\n@@ -39,8 +39,7 @@ use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n-use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n-use rustc_hir::TraitCandidate;\n+use rustc_hir::{PrimTy, TraitCandidate};\n use rustc_index::vec::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::hir::exports::ExportMap;\n@@ -834,39 +833,6 @@ impl<'a> NameBinding<'a> {\n     }\n }\n \n-/// Interns the names of the primitive types.\n-///\n-/// All other types are defined somewhere and possibly imported, but the primitive ones need\n-/// special handling, since they have no place of origin.\n-struct PrimitiveTypeTable {\n-    primitive_types: FxHashMap<Symbol, PrimTy>,\n-}\n-\n-impl PrimitiveTypeTable {\n-    fn new() -> PrimitiveTypeTable {\n-        let mut table = FxHashMap::default();\n-\n-        table.insert(sym::bool, Bool);\n-        table.insert(sym::char, Char);\n-        table.insert(sym::f32, Float(FloatTy::F32));\n-        table.insert(sym::f64, Float(FloatTy::F64));\n-        table.insert(sym::isize, Int(IntTy::Isize));\n-        table.insert(sym::i8, Int(IntTy::I8));\n-        table.insert(sym::i16, Int(IntTy::I16));\n-        table.insert(sym::i32, Int(IntTy::I32));\n-        table.insert(sym::i64, Int(IntTy::I64));\n-        table.insert(sym::i128, Int(IntTy::I128));\n-        table.insert(sym::str, Str);\n-        table.insert(sym::usize, Uint(UintTy::Usize));\n-        table.insert(sym::u8, Uint(UintTy::U8));\n-        table.insert(sym::u16, Uint(UintTy::U16));\n-        table.insert(sym::u32, Uint(UintTy::U32));\n-        table.insert(sym::u64, Uint(UintTy::U64));\n-        table.insert(sym::u128, Uint(UintTy::U128));\n-        Self { primitive_types: table }\n-    }\n-}\n-\n #[derive(Debug, Default, Clone)]\n pub struct ExternPreludeEntry<'a> {\n     extern_crate_item: Option<&'a NameBinding<'a>>,\n@@ -912,9 +878,6 @@ pub struct Resolver<'a> {\n     /// \"self-confirming\" import resolutions during import validation.\n     unusable_binding: Option<&'a NameBinding<'a>>,\n \n-    /// The idents for the primitive types.\n-    primitive_type_table: PrimitiveTypeTable,\n-\n     /// Resolutions for nodes that have a single resolution.\n     partial_res_map: NodeMap<PartialRes>,\n     /// Resolutions for import nodes, which have multiple resolutions in different namespaces.\n@@ -1284,8 +1247,6 @@ impl<'a> Resolver<'a> {\n             last_import_segment: false,\n             unusable_binding: None,\n \n-            primitive_type_table: PrimitiveTypeTable::new(),\n-\n             partial_res_map: Default::default(),\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n@@ -1994,9 +1955,9 @@ impl<'a> Resolver<'a> {\n         }\n \n         if ns == TypeNS {\n-            if let Some(prim_ty) = self.primitive_type_table.primitive_types.get(&ident.name) {\n+            if let Some(prim_ty) = PrimTy::from_name(ident.name) {\n                 let binding =\n-                    (Res::PrimTy(*prim_ty), ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n+                    (Res::PrimTy(prim_ty), ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n                         .to_name_binding(self.arenas);\n                 return Some(LexicalScopeBinding::Item(binding));\n             }"}, {"sha": "d76db7c645abc25e72d891e8f8937a88ccac4952", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -21,6 +21,7 @@ use rustc_expand::expand::{AstFragment, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id;\n+use rustc_hir::PrimTy;\n use rustc_middle::middle::stability;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::{SOFT_UNSTABLE, UNUSED_MACROS};\n@@ -796,12 +797,10 @@ impl<'a> Resolver<'a> {\n                         }\n                         result\n                     }\n-                    Scope::BuiltinTypes => {\n-                        match this.primitive_type_table.primitive_types.get(&ident.name).cloned() {\n-                            Some(prim_ty) => ok(Res::PrimTy(prim_ty), DUMMY_SP, this.arenas),\n-                            None => Err(Determinacy::Determined),\n-                        }\n-                    }\n+                    Scope::BuiltinTypes => match PrimTy::from_name(ident.name) {\n+                        Some(prim_ty) => ok(Res::PrimTy(prim_ty), DUMMY_SP, this.arenas),\n+                        None => Err(Determinacy::Determined),\n+                    },\n                 };\n \n                 match result {"}, {"sha": "84a0df92f5b43ae45620a9ef0ca3de550ccb2d5a", "filename": "src/tools/clippy/clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc_early.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -1,11 +1,12 @@\n-use crate::utils::{constants, snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use rustc_ast::ast::{\n     BindingMode, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n     NodeId, Pat, PatKind, UnOp,\n };\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n+use rustc_hir::PrimTy;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -264,13 +265,12 @@ impl EarlyLintPass for MiscEarlyLints {\n     fn check_generics(&mut self, cx: &EarlyContext<'_>, gen: &Generics) {\n         for param in &gen.params {\n             if let GenericParamKind::Type { .. } = param.kind {\n-                let name = param.ident.as_str();\n-                if constants::BUILTIN_TYPES.contains(&&*name) {\n+                if let Some(prim_ty) = PrimTy::from_name(param.ident.name) {\n                     span_lint(\n                         cx,\n                         BUILTIN_TYPE_SHADOW,\n                         param.ident.span,\n-                        &format!(\"this generic shadows the built-in type `{}`\", name),\n+                        &format!(\"this generic shadows the built-in type `{}`\", prim_ty.name()),\n                     );\n                 }\n             }"}, {"sha": "522932f054d894eef06d81b7a53203fc255f9d89", "filename": "src/tools/clippy/clippy_lints/src/utils/constants.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/747abb86db0ed0eeb97e5373a2111c767eb8c173/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconstants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747abb86db0ed0eeb97e5373a2111c767eb8c173/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconstants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconstants.rs?ref=747abb86db0ed0eeb97e5373a2111c767eb8c173", "patch": "@@ -1,13 +0,0 @@\n-//! This module contains some useful constants.\n-\n-#![deny(clippy::missing_docs_in_private_items)]\n-\n-/// List of the built-in types names.\n-///\n-/// See also [the reference][reference-types] for a list of such types.\n-///\n-/// [reference-types]: https://doc.rust-lang.org/reference/types.html\n-pub const BUILTIN_TYPES: &[&str] = &[\n-    \"i8\", \"u8\", \"i16\", \"u16\", \"i32\", \"u32\", \"i64\", \"u64\", \"i128\", \"u128\", \"isize\", \"usize\", \"f32\", \"f64\", \"bool\",\n-    \"str\", \"char\",\n-];"}, {"sha": "de1538233a8c3c96d19b0e8a9d7bf4c701fdddb5", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85fb5cdf2633e91c5101dd8fb89a637c6d007802/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fb5cdf2633e91c5101dd8fb89a637c6d007802/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=85fb5cdf2633e91c5101dd8fb89a637c6d007802", "patch": "@@ -8,7 +8,6 @@ pub mod author;\n pub mod camel_case;\n pub mod comparisons;\n pub mod conf;\n-pub mod constants;\n mod diagnostics;\n pub mod eager_or_lazy;\n pub mod higher;"}]}