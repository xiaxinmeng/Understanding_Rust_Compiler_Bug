{"sha": "bca294da1f27cdbf66584b84f62c3090053b65ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYTI5NGRhMWYyN2NkYmY2NjU4NGI4NGY2MmMzMDkwMDUzYjY1ZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-24T19:27:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T12:57:22Z"}, "message": "rename `QueryResult` to `QueryResponse`\n\n`Result` really sounds like the rustc result type", "tree": {"sha": "2ac7facefaf6496905ed9fcf851bf5efe03d5e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac7facefaf6496905ed9fcf851bf5efe03d5e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca294da1f27cdbf66584b84f62c3090053b65ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca294da1f27cdbf66584b84f62c3090053b65ed", "html_url": "https://github.com/rust-lang/rust/commit/bca294da1f27cdbf66584b84f62c3090053b65ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca294da1f27cdbf66584b84f62c3090053b65ed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd046a2ede1f83383e7a4a5f653f75550db91ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd046a2ede1f83383e7a4a5f653f75550db91ea4", "html_url": "https://github.com/rust-lang/rust/commit/fd046a2ede1f83383e7a4a5f653f75550db91ea4"}], "stats": {"total": 316, "additions": 158, "deletions": 158}, "files": [{"sha": "dd2c41dda640300ca78b72ed743bba2320dd9e58", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -1297,7 +1297,7 @@ impl_stable_hash_for!(enum infer::canonical::CanonicalTyVarKind {\n });\n \n impl_stable_hash_for!(\n-    impl<'tcx, R> for struct infer::canonical::QueryResult<'tcx, R> {\n+    impl<'tcx, R> for struct infer::canonical::QueryResponse<'tcx, R> {\n         var_values, region_constraints, certainty, value\n     }\n );"}, {"sha": "c937f80ea099deef09484bce470caa68ebddc456", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -44,7 +44,7 @@ use ty::{self, CanonicalVar, Lift, Region, List, TyCtxt};\n \n mod canonicalizer;\n \n-pub mod query_result;\n+pub mod query_response;\n \n mod substitute;\n \n@@ -118,10 +118,10 @@ pub enum CanonicalTyVarKind {\n }\n \n /// After we execute a query with a canonicalized key, we get back a\n-/// `Canonical<QueryResult<..>>`. You can use\n+/// `Canonical<QueryResponse<..>>`. You can use\n /// `instantiate_query_result` to access the data in this result.\n #[derive(Clone, Debug)]\n-pub struct QueryResult<'tcx, R> {\n+pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     pub region_constraints: Vec<QueryRegionConstraint<'tcx>>,\n     pub certainty: Certainty,\n@@ -130,8 +130,8 @@ pub struct QueryResult<'tcx, R> {\n \n pub type Canonicalized<'gcx, V> = Canonical<'gcx, <V as Lift<'gcx>>::Lifted>;\n \n-pub type CanonicalizedQueryResult<'gcx, T> =\n-    Lrc<Canonical<'gcx, QueryResult<'gcx, <T as Lift<'gcx>>::Lifted>>>;\n+pub type CanonicalizedQueryResponse<'gcx, T> =\n+    Lrc<Canonical<'gcx, QueryResponse<'gcx, <T as Lift<'gcx>>::Lifted>>>;\n \n /// Indicates whether or not we were able to prove the query to be\n /// true.\n@@ -168,7 +168,7 @@ impl Certainty {\n     }\n }\n \n-impl<'tcx, R> QueryResult<'tcx, R> {\n+impl<'tcx, R> QueryResponse<'tcx, R> {\n     pub fn is_proven(&self) -> bool {\n         self.certainty.is_proven()\n     }\n@@ -178,7 +178,7 @@ impl<'tcx, R> QueryResult<'tcx, R> {\n     }\n }\n \n-impl<'tcx, R> Canonical<'tcx, QueryResult<'tcx, R>> {\n+impl<'tcx, R> Canonical<'tcx, QueryResponse<'tcx, R>> {\n     pub fn is_proven(&self) -> bool {\n         self.value.is_proven()\n     }\n@@ -351,14 +351,14 @@ BraceStructTypeFoldableImpl! {\n }\n \n BraceStructTypeFoldableImpl! {\n-    impl<'tcx, R> TypeFoldable<'tcx> for QueryResult<'tcx, R> {\n+    impl<'tcx, R> TypeFoldable<'tcx> for QueryResponse<'tcx, R> {\n         var_values, region_constraints, certainty, value\n     } where R: TypeFoldable<'tcx>,\n }\n \n BraceStructLiftImpl! {\n-    impl<'a, 'tcx, R> Lift<'tcx> for QueryResult<'a, R> {\n-        type Lifted = QueryResult<'tcx, R::Lifted>;\n+    impl<'a, 'tcx, R> Lift<'tcx> for QueryResponse<'a, R> {\n+        type Lifted = QueryResponse<'tcx, R::Lifted>;\n         var_values, region_constraints, certainty, value\n     } where R: Lift<'tcx>\n }"}, {"sha": "07421f0bd45524ac788f7905bb2cee6fafff5e5f", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "renamed", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -19,8 +19,8 @@\n \n use infer::canonical::substitute::substitute_value;\n use infer::canonical::{\n-    Canonical, CanonicalVarKind, CanonicalVarValues, CanonicalizedQueryResult, Certainty,\n-    QueryRegionConstraint, QueryResult, SmallCanonicalVarValues,\n+    Canonical, CanonicalVarKind, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n+    QueryRegionConstraint, QueryResponse, SmallCanonicalVarValues,\n };\n use infer::region_constraints::{Constraint, RegionConstraintData};\n use infer::InferCtxtBuilder;\n@@ -59,15 +59,15 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n         canonical_key: &Canonical<'tcx, K>,\n         operation: impl FnOnce(&InferCtxt<'_, 'gcx, 'tcx>, &mut FulfillmentContext<'tcx>, K)\n             -> Fallible<R>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, R>>\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, R>>\n     where\n         K: TypeFoldable<'tcx>,\n         R: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n     {\n         self.enter_with_canonical(DUMMY_SP, canonical_key, |ref infcx, key, canonical_inference_vars| {\n             let fulfill_cx = &mut FulfillmentContext::new();\n             let value = operation(infcx, fulfill_cx, key)?;\n-            infcx.make_canonicalized_query_result(canonical_inference_vars, value, fulfill_cx)\n+            infcx.make_canonicalized_query_response(canonical_inference_vars, value, fulfill_cx)\n         })\n     }\n }\n@@ -92,41 +92,41 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ///   the same thing happens, but the resulting query is marked as ambiguous.\n     /// - Finally, if any of the obligations result in a hard error,\n     ///   then `Err(NoSolution)` is returned.\n-    pub fn make_canonicalized_query_result<T>(\n+    pub fn make_canonicalized_query_response<T>(\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n         fulfill_cx: &mut FulfillmentContext<'tcx>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, T>>\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, T>>\n     where\n         T: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n     {\n-        let query_result = self.make_query_result(inference_vars, answer, fulfill_cx)?;\n-        let canonical_result = self.canonicalize_response(&query_result);\n+        let query_response = self.make_query_response(inference_vars, answer, fulfill_cx)?;\n+        let canonical_result = self.canonicalize_response(&query_response);\n \n         debug!(\n-            \"make_canonicalized_query_result: canonical_result = {:#?}\",\n+            \"make_canonicalized_query_response: canonical_result = {:#?}\",\n             canonical_result\n         );\n \n         Ok(Lrc::new(canonical_result))\n     }\n \n-    /// Helper for `make_canonicalized_query_result` that does\n+    /// Helper for `make_canonicalized_query_response` that does\n     /// everything up until the final canonicalization.\n-    fn make_query_result<T>(\n+    fn make_query_response<T>(\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n         fulfill_cx: &mut FulfillmentContext<'tcx>,\n-    ) -> Result<QueryResult<'tcx, T>, NoSolution>\n+    ) -> Result<QueryResponse<'tcx, T>, NoSolution>\n     where\n         T: Debug + TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n         let tcx = self.tcx;\n \n         debug!(\n-            \"make_query_result(\\\n+            \"make_query_response(\\\n              inference_vars={:?}, \\\n              answer={:?})\",\n             inference_vars, answer,\n@@ -138,7 +138,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         if !true_errors.is_empty() {\n             // FIXME -- we don't indicate *why* we failed to solve\n-            debug!(\"make_query_result: true_errors={:#?}\", true_errors);\n+            debug!(\"make_query_response: true_errors={:#?}\", true_errors);\n             return Err(NoSolution);\n         }\n \n@@ -162,7 +162,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             Certainty::Ambiguous\n         };\n \n-        Ok(QueryResult {\n+        Ok(QueryResponse {\n             var_values: inference_vars,\n             region_constraints,\n             certainty,\n@@ -180,30 +180,30 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// out the [chapter in the rustc guide][c].\n     ///\n     /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#processing-the-canonicalized-query-result\n-    pub fn instantiate_query_result_and_region_obligations<R>(\n+    pub fn instantiate_query_response_and_region_obligations<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: &SmallCanonicalVarValues<'tcx>,\n-        query_result: &Canonical<'tcx, QueryResult<'tcx, R>>,\n+        query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, R>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n         let InferOk {\n             value: result_subst,\n             mut obligations,\n-        } = self.query_result_substitution(cause, param_env, original_values, query_result)?;\n+        } = self.query_response_substitution(cause, param_env, original_values, query_response)?;\n \n         obligations.extend(self.query_region_constraints_into_obligations(\n             cause,\n             param_env,\n-            &query_result.value.region_constraints,\n+            &query_response.value.region_constraints,\n             &result_subst,\n         ));\n \n         let user_result: R =\n-            query_result.substitute_projected(self.tcx, &result_subst, |q_r| &q_r.value);\n+            query_response.substitute_projected(self.tcx, &result_subst, |q_r| &q_r.value);\n \n         Ok(InferOk {\n             value: user_result,\n@@ -212,7 +212,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     /// An alternative to\n-    /// `instantiate_query_result_and_region_obligations` that is more\n+    /// `instantiate_query_response_and_region_obligations` that is more\n     /// efficient for NLL. NLL is a bit more advanced in the\n     /// \"transition to chalk\" than the rest of the compiler. During\n     /// the NLL type check, all of the \"processing\" of types and\n@@ -227,8 +227,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// into the older infcx-style constraints (e.g., calls to\n     /// `sub_regions` or `register_region_obligation`).\n     ///\n-    /// Therefore, `instantiate_nll_query_result_and_region_obligations` performs the same\n-    /// basic operations as `instantiate_query_result_and_region_obligations` but\n+    /// Therefore, `instantiate_nll_query_response_and_region_obligations` performs the same\n+    /// basic operations as `instantiate_query_response_and_region_obligations` but\n     /// it returns its result differently:\n     ///\n     /// - It creates a substitution `S` that maps from the original\n@@ -246,26 +246,26 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ///   are propagated back in the return value.\n     /// - Finally, the query result (of type `R`) is propagated back,\n     ///   after applying the substitution `S`.\n-    pub fn instantiate_nll_query_result_and_region_obligations<R>(\n+    pub fn instantiate_nll_query_response_and_region_obligations<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: &SmallCanonicalVarValues<'tcx>,\n-        query_result: &Canonical<'tcx, QueryResult<'tcx, R>>,\n+        query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n         output_query_region_constraints: &mut Vec<QueryRegionConstraint<'tcx>>,\n     ) -> InferResult<'tcx, R>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n         // In an NLL query, there should be no type variables in the\n         // query, only region variables.\n-        debug_assert!(query_result.variables.iter().all(|v| match v.kind {\n+        debug_assert!(query_response.variables.iter().all(|v| match v.kind {\n             CanonicalVarKind::Ty(_) => false,\n             CanonicalVarKind::Region => true,\n         }));\n \n         let result_subst =\n-            self.query_result_substitution_guess(cause, original_values, query_result);\n+            self.query_response_substitution_guess(cause, original_values, query_response);\n \n         // Compute `QueryRegionConstraint` values that unify each of\n         // the original values `v_o` that was canonicalized into a\n@@ -274,7 +274,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         for (index, original_value) in original_values.iter().enumerate() {\n             // ...with the value `v_r` of that variable from the query.\n-            let result_value = query_result.substitute_projected(self.tcx, &result_subst, |v| {\n+            let result_value = query_response.substitute_projected(self.tcx, &result_subst, |v| {\n                 &v.var_values[CanonicalVar::new(index)]\n             });\n             match (original_value.unpack(), result_value.unpack()) {\n@@ -309,7 +309,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         // ...also include the other query region constraints from the query.\n         output_query_region_constraints.extend(\n-            query_result.value.region_constraints.iter().filter_map(|r_c| {\n+            query_response.value.region_constraints.iter().filter_map(|r_c| {\n                 let &ty::OutlivesPredicate(k1, r2) = r_c.skip_binder(); // reconstructed below\n                 let k1 = substitute_value(self.tcx, &result_subst, &k1);\n                 let r2 = substitute_value(self.tcx, &result_subst, &r2);\n@@ -322,7 +322,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         let user_result: R =\n-            query_result.substitute_projected(self.tcx, &result_subst, |q_r| &q_r.value);\n+            query_response.substitute_projected(self.tcx, &result_subst, |q_r| &q_r.value);\n \n         Ok(InferOk {\n             value: user_result,\n@@ -340,30 +340,30 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// example) we are doing lazy normalization and the value\n     /// assigned to a type variable is unified with an unnormalized\n     /// projection.\n-    fn query_result_substitution<R>(\n+    fn query_response_substitution<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: &SmallCanonicalVarValues<'tcx>,\n-        query_result: &Canonical<'tcx, QueryResult<'tcx, R>>,\n+        query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, CanonicalVarValues<'tcx>>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n         debug!(\n-            \"query_result_substitution(original_values={:#?}, query_result={:#?})\",\n-            original_values, query_result,\n+            \"query_response_substitution(original_values={:#?}, query_response={:#?})\",\n+            original_values, query_response,\n         );\n \n         let result_subst =\n-            self.query_result_substitution_guess(cause, original_values, query_result);\n+            self.query_response_substitution_guess(cause, original_values, query_response);\n \n-        let obligations = self.unify_query_result_substitution_guess(\n+        let obligations = self.unify_query_response_substitution_guess(\n             cause,\n             param_env,\n             original_values,\n             &result_subst,\n-            query_result,\n+            query_response,\n         )?\n             .into_obligations();\n \n@@ -382,25 +382,25 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// will instantiate fresh inference variables for each canonical\n     /// variable instead. Therefore, the result of this method must be\n     /// properly unified\n-    fn query_result_substitution_guess<R>(\n+    fn query_response_substitution_guess<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         original_values: &SmallCanonicalVarValues<'tcx>,\n-        query_result: &Canonical<'tcx, QueryResult<'tcx, R>>,\n+        query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> CanonicalVarValues<'tcx>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n         debug!(\n-            \"query_result_substitution_guess(original_values={:#?}, query_result={:#?})\",\n-            original_values, query_result,\n+            \"query_response_substitution_guess(original_values={:#?}, query_response={:#?})\",\n+            original_values, query_response,\n         );\n \n         // Every canonical query result includes values for each of\n         // the inputs to the query. Therefore, we begin by unifying\n         // these values with the original inputs that were\n         // canonicalized.\n-        let result_values = &query_result.value.var_values;\n+        let result_values = &query_response.value.var_values;\n         assert_eq!(original_values.len(), result_values.len());\n \n         // Quickly try to find initial values for the canonical\n@@ -411,7 +411,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // result, then we can type the corresponding value from the\n         // input. See the example above.\n         let mut opt_values: IndexVec<CanonicalVar, Option<Kind<'tcx>>> =\n-            IndexVec::from_elem_n(None, query_result.variables.len());\n+            IndexVec::from_elem_n(None, query_response.variables.len());\n \n         // In terms of our example above, we are iterating over pairs like:\n         // [(?A, Vec<?0>), ('static, '?1), (?B, ?0)]\n@@ -438,7 +438,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // given variable in the loop above, use that. Otherwise, use\n         // a fresh inference variable.\n         let result_subst = CanonicalVarValues {\n-            var_values: query_result\n+            var_values: query_response\n                 .variables\n                 .iter()\n                 .enumerate()\n@@ -456,29 +456,29 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// query result.  Often, but not always, this is a no-op, because\n     /// we already found the mapping in the \"guessing\" step.\n     ///\n-    /// See also: `query_result_substitution_guess`\n-    fn unify_query_result_substitution_guess<R>(\n+    /// See also: `query_response_substitution_guess`\n+    fn unify_query_response_substitution_guess<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         original_values: &SmallCanonicalVarValues<'tcx>,\n         result_subst: &CanonicalVarValues<'tcx>,\n-        query_result: &Canonical<'tcx, QueryResult<'tcx, R>>,\n+        query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, ()>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n         // A closure that yields the result value for the given\n         // canonical variable; this is taken from\n-        // `query_result.var_values` after applying the substitution\n+        // `query_response.var_values` after applying the substitution\n         // `result_subst`.\n-        let substituted_query_result = |index: CanonicalVar| -> Kind<'tcx> {\n-            query_result.substitute_projected(self.tcx, &result_subst, |v| &v.var_values[index])\n+        let substituted_query_response = |index: CanonicalVar| -> Kind<'tcx> {\n+            query_response.substitute_projected(self.tcx, &result_subst, |v| &v.var_values[index])\n         };\n \n         // Unify the original value for each variable with the value\n-        // taken from `query_result` (after applying `result_subst`).\n-        Ok(self.unify_canonical_vars(cause, param_env, original_values, substituted_query_result)?)\n+        // taken from `query_response` (after applying `result_subst`).\n+        Ok(self.unify_canonical_vars(cause, param_env, original_values, substituted_query_response)?)\n     }\n \n     /// Converts the region constraints resulting from a query into an", "previous_filename": "src/librustc/infer/canonical/query_result.rs"}, {"sha": "c2091c182d65c3081edbf6cc08ef8782d3fbbbb0", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -58,7 +58,7 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         match &gcx.dropck_outlives(c_ty) {\n             Ok(result) if result.is_proven() => {\n                 if let Ok(InferOk { value, obligations }) =\n-                    self.infcx.instantiate_query_result_and_region_obligations(\n+                    self.infcx.instantiate_query_response_and_region_obligations(\n                     self.cause,\n                     self.param_env,\n                     &orig_values,"}, {"sha": "833c650680ea33b748ecb9800f0a068dd8062717", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -167,7 +167,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                             return ty;\n                         }\n \n-                        match self.infcx.instantiate_query_result_and_region_obligations(\n+                        match self.infcx.instantiate_query_response_and_region_obligations(\n                             self.cause,\n                             self.param_env,\n                             &orig_values,"}, {"sha": "5415efe1514deac8d841fd2ccc7ba0ec46df6f32", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -119,7 +119,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         };\n         assert!(result.value.is_proven());\n \n-        let result = self.instantiate_query_result_and_region_obligations(\n+        let result = self.instantiate_query_response_and_region_obligations(\n             &ObligationCause::misc(span, body_id), param_env, &orig_values, &result);\n         debug!(\"implied_outlives_bounds for {:?}: {:#?}\", ty, result);\n         let result = match result {"}, {"sha": "54860dd0434a03ce6745bdf6d8b835baf2f20fd0", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -12,7 +12,7 @@ use infer::{InferCtxt, InferOk};\n use std::fmt;\n use traits::query::Fallible;\n \n-use infer::canonical::query_result;\n+use infer::canonical::query_response;\n use infer::canonical::QueryRegionConstraint;\n use std::rc::Rc;\n use syntax::source_map::DUMMY_SP;\n@@ -102,7 +102,7 @@ fn scrape_region_constraints<'gcx, 'tcx, R>(\n \n     let region_constraint_data = infcx.take_and_reset_region_constraints();\n \n-    let outlives = query_result::make_query_outlives(\n+    let outlives = query_response::make_query_outlives(\n         infcx.tcx,\n         region_obligations\n             .iter()"}, {"sha": "43dea442df65ada4205d78b216d23ea4bf58dada", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use traits::query::Fallible;\n use ty::{ParamEnvAnd, Ty, TyCtxt};\n \n@@ -25,12 +25,12 @@ impl<'tcx> Eq<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n-    type QueryResult = ();\n+    type QueryResponse = ();\n \n     fn try_fast_path(\n         _tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Eq<'tcx>>,\n-    ) -> Option<Self::QueryResult> {\n+    ) -> Option<Self::QueryResponse> {\n         if key.value.a == key.value.b {\n             Some(())\n         } else {\n@@ -41,13 +41,13 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n         tcx.type_op_eq(canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, ()>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n         v\n     }\n }"}, {"sha": "b113a322d370ac91db2d0eb1bea264ff563dc488", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use traits::query::outlives_bounds::OutlivesBound;\n use traits::query::Fallible;\n use ty::{ParamEnvAnd, Ty, TyCtxt};\n@@ -25,19 +25,19 @@ impl<'tcx> ImpliedOutlivesBounds<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ImpliedOutlivesBounds<'tcx> {\n-    type QueryResult = Vec<OutlivesBound<'tcx>>;\n+    type QueryResponse = Vec<OutlivesBound<'tcx>>;\n \n     fn try_fast_path(\n         _tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         _key: &ParamEnvAnd<'tcx, Self>,\n-    ) -> Option<Self::QueryResult> {\n+    ) -> Option<Self::QueryResponse> {\n         None\n     }\n \n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>> {\n         // FIXME the query should take a `ImpliedOutlivesBounds`\n         let Canonical {\n             variables,\n@@ -56,8 +56,8 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ImpliedOutlivesBounds<\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, Self::QueryResponse>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self::QueryResponse>> {\n         v\n     }\n }"}, {"sha": "0d86b009996e5ac290248235f7daf5112e5e8196", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint,\n-                       QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryRegionConstraint,\n+                       QueryResponse};\n use infer::{InferCtxt, InferOk};\n use smallvec::SmallVec;\n use std::fmt;\n@@ -55,15 +55,15 @@ pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n     fmt::Debug + Sized + TypeFoldable<'tcx> + Lift<'gcx>\n {\n-    type QueryResult: TypeFoldable<'tcx> + Lift<'gcx>;\n+    type QueryResponse: TypeFoldable<'tcx> + Lift<'gcx>;\n \n     /// Give query the option for a simple fast path that never\n     /// actually hits the tcx cache lookup etc. Return `Some(r)` with\n     /// a final result or `None` to do the full path.\n     fn try_fast_path(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n-    ) -> Option<Self::QueryResult>;\n+    ) -> Option<Self::QueryResponse>;\n \n     /// Performs the actual query with the canonicalized key -- the\n     /// real work happens here. This method is not given an `infcx`\n@@ -74,29 +74,29 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>>;\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>>;\n \n     /// Casts a lifted query result (which is in the gcx lifetime)\n     /// into the tcx lifetime. This is always just an identity cast,\n     /// but the generic code doesn't realize it -- put another way, in\n-    /// the generic code, we have a `Lifted<'gcx, Self::QueryResult>`\n-    /// and we want to convert that to a `Self::QueryResult`. This is\n+    /// the generic code, we have a `Lifted<'gcx, Self::QueryResponse>`\n+    /// and we want to convert that to a `Self::QueryResponse`. This is\n     /// not a priori valid, so we can't do it -- but in practice, it\n     /// is always a no-op (e.g., the lifted form of a type,\n     /// `Ty<'gcx>`, is a subtype of `Ty<'tcx>`). So we have to push\n     /// the operation into the impls that know more specifically what\n-    /// `QueryResult` is. This operation would (maybe) be nicer with\n+    /// `QueryResponse` is. This operation would (maybe) be nicer with\n     /// something like HKTs or GATs, since then we could make\n-    /// `QueryResult` parametric and `'gcx` and `'tcx` etc.\n+    /// `QueryResponse` parametric and `'gcx` and `'tcx` etc.\n     fn shrink_to_tcx_lifetime(\n-        lifted_query_result: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>>;\n+        lifted_query_result: &'a CanonicalizedQueryResponse<'gcx, Self::QueryResponse>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self::QueryResponse>>;\n \n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         output_query_region_constraints: &mut Vec<QueryRegionConstraint<'tcx>>,\n-    ) -> Fallible<Self::QueryResult> {\n+    ) -> Fallible<Self::QueryResponse> {\n         if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {\n             return Ok(result);\n         }\n@@ -114,7 +114,7 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n         let param_env = query_key.param_env;\n \n         let InferOk { value, obligations } = infcx\n-            .instantiate_nll_query_result_and_region_obligations(\n+            .instantiate_nll_query_response_and_region_obligations(\n                 &ObligationCause::dummy(),\n                 param_env,\n                 &canonical_var_values,\n@@ -145,7 +145,7 @@ impl<'gcx: 'tcx, 'tcx, Q> TypeOp<'gcx, 'tcx> for ParamEnvAnd<'tcx, Q>\n where\n     Q: QueryTypeOp<'gcx, 'tcx>,\n {\n-    type Output = Q::QueryResult;\n+    type Output = Q::QueryResponse;\n \n     fn fully_perform(\n         self,"}, {"sha": "c45e8b2554b0fdb1d00ae5e72e3247c5086eeb00", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use std::fmt;\n use traits::query::Fallible;\n use ty::fold::TypeFoldable;\n@@ -32,7 +32,7 @@ impl<'gcx: 'tcx, 'tcx, T> super::QueryTypeOp<'gcx, 'tcx> for Normalize<T>\n where\n     T: Normalizable<'gcx, 'tcx>,\n {\n-    type QueryResult = T;\n+    type QueryResponse = T;\n \n     fn try_fast_path(_tcx: TyCtxt<'_, 'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<T> {\n         if !key.value.value.has_projections() {\n@@ -45,13 +45,13 @@ where\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>> {\n         T::type_op_method(tcx, canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, T>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, T>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, T>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, T>> {\n         T::shrink_to_tcx_lifetime(v)\n     }\n }\n@@ -60,13 +60,13 @@ pub trait Normalizable<'gcx, 'tcx>: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx>\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>>;\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>>;\n \n     /// Convert from the `'gcx` (lifted) form of `Self` into the `tcx`\n     /// form of `Self`.\n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>>;\n+        v: &'a CanonicalizedQueryResponse<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>>;\n }\n \n impl Normalizable<'gcx, 'tcx> for Ty<'tcx>\n@@ -76,13 +76,13 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_ty(canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n         v\n     }\n }\n@@ -94,13 +94,13 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_predicate(canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n         v\n     }\n }\n@@ -112,13 +112,13 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_poly_fn_sig(canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n         v\n     }\n }\n@@ -130,13 +130,13 @@ where\n     fn type_op_method(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Normalize<Self>>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self>> {\n         tcx.type_op_normalize_fn_sig(canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, Self>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, Self>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self>> {\n         v\n     }\n }"}, {"sha": "a36c5accd2a681ae2a491bc3675cb8568ae4cc6e", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use traits::query::dropck_outlives::trivial_dropck_outlives;\n use traits::query::dropck_outlives::DropckOutlivesResult;\n use traits::query::Fallible;\n@@ -29,12 +29,12 @@ impl super::QueryTypeOp<'gcx, 'tcx> for DropckOutlives<'tcx>\n where\n     'gcx: 'tcx,\n {\n-    type QueryResult = DropckOutlivesResult<'tcx>;\n+    type QueryResponse = DropckOutlivesResult<'tcx>;\n \n     fn try_fast_path(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n-    ) -> Option<Self::QueryResult> {\n+    ) -> Option<Self::QueryResponse> {\n         if trivial_dropck_outlives(tcx, key.value.dropped_ty) {\n             Some(DropckOutlivesResult::default())\n         } else {\n@@ -45,7 +45,7 @@ where\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, Self::QueryResult>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, Self::QueryResponse>> {\n         // Subtle: note that we are not invoking\n         // `infcx.at(...).dropck_outlives(...)` here, but rather the\n         // underlying `dropck_outlives` query. This same underlying\n@@ -76,8 +76,8 @@ where\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        lifted_query_result: &'a CanonicalizedQueryResult<'gcx, Self::QueryResult>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, Self::QueryResult>> {\n+        lifted_query_result: &'a CanonicalizedQueryResponse<'gcx, Self::QueryResponse>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, Self::QueryResponse>> {\n         lifted_query_result\n     }\n }"}, {"sha": "460ddb2a138b5d07a620c6fa8d9229ba056813e2", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use traits::query::Fallible;\n use ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n@@ -24,12 +24,12 @@ impl<'tcx> ProvePredicate<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n-    type QueryResult = ();\n+    type QueryResponse = ();\n \n     fn try_fast_path(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n-    ) -> Option<Self::QueryResult> {\n+    ) -> Option<Self::QueryResponse> {\n         // Proving Sized, very often on \"obviously sized\" types like\n         // `&T`, accounts for about 60% percentage of the predicates\n         // we have to prove. No need to canonicalize and all that for\n@@ -50,13 +50,13 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, ()>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n         v\n     }\n }"}, {"sha": "2b2939c644aa3a2ec91420e9fde4592555204746", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResult, QueryResult};\n+use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use traits::query::Fallible;\n use ty::{ParamEnvAnd, Ty, TyCtxt};\n \n@@ -28,7 +28,7 @@ impl<'tcx> Subtype<'tcx> {\n }\n \n impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n-    type QueryResult = ();\n+    type QueryResponse = ();\n \n     fn try_fast_path(_tcx: TyCtxt<'_, 'gcx, 'tcx>, key: &ParamEnvAnd<'tcx, Self>) -> Option<()> {\n         if key.value.sub == key.value.sup {\n@@ -41,13 +41,13 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     fn perform_query(\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n-    ) -> Fallible<CanonicalizedQueryResult<'gcx, ()>> {\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n         tcx.type_op_subtype(canonicalized)\n     }\n \n     fn shrink_to_tcx_lifetime(\n-        v: &'a CanonicalizedQueryResult<'gcx, ()>,\n-    ) -> &'a Canonical<'tcx, QueryResult<'tcx, ()>> {\n+        v: &'a CanonicalizedQueryResponse<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n         v\n     }\n }"}, {"sha": "c4f39ffcd2067aebea1ed0ddf6d87414f3c15c34", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -559,7 +559,7 @@ define_queries! { <'tcx>\n         [] fn normalize_projection_ty: NormalizeProjectionTy(\n             CanonicalProjectionGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, NormalizationResult<'tcx>>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, NormalizationResult<'tcx>>>>,\n             NoSolution,\n         >,\n \n@@ -571,15 +571,15 @@ define_queries! { <'tcx>\n         [] fn implied_outlives_bounds: ImpliedOutlivesBounds(\n             CanonicalTyGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n             NoSolution,\n         >,\n \n         /// Do not call this query directly: invoke `infcx.at().dropck_outlives()` instead.\n         [] fn dropck_outlives: DropckOutlives(\n             CanonicalTyGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>>,\n             NoSolution,\n         >,\n \n@@ -593,55 +593,55 @@ define_queries! { <'tcx>\n         [] fn type_op_eq: TypeOpEq(\n             CanonicalTypeOpEqGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n             NoSolution,\n         >,\n \n         /// Do not call this query directly: part of the `Subtype` type-op\n         [] fn type_op_subtype: TypeOpSubtype(\n             CanonicalTypeOpSubtypeGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n             NoSolution,\n         >,\n \n         /// Do not call this query directly: part of the `ProvePredicate` type-op\n         [] fn type_op_prove_predicate: TypeOpProvePredicate(\n             CanonicalTypeOpProvePredicateGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n             NoSolution,\n         >,\n \n         /// Do not call this query directly: part of the `Normalize` type-op\n         [] fn type_op_normalize_ty: TypeOpNormalizeTy(\n             CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, Ty<'tcx>>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Ty<'tcx>>>>,\n             NoSolution,\n         >,\n \n         /// Do not call this query directly: part of the `Normalize` type-op\n         [] fn type_op_normalize_predicate: TypeOpNormalizePredicate(\n             CanonicalTypeOpNormalizeGoal<'tcx, ty::Predicate<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ty::Predicate<'tcx>>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::Predicate<'tcx>>>>,\n             NoSolution,\n         >,\n \n         /// Do not call this query directly: part of the `Normalize` type-op\n         [] fn type_op_normalize_poly_fn_sig: TypeOpNormalizePolyFnSig(\n             CanonicalTypeOpNormalizeGoal<'tcx, ty::PolyFnSig<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ty::PolyFnSig<'tcx>>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::PolyFnSig<'tcx>>>>,\n             NoSolution,\n         >,\n \n         /// Do not call this query directly: part of the `Normalize` type-op\n         [] fn type_op_normalize_fn_sig: TypeOpNormalizeFnSig(\n             CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ty::FnSig<'tcx>>>>,\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::FnSig<'tcx>>>>,\n             NoSolution,\n         >,\n "}, {"sha": "5a0ab8422003389deae9386fc1fc29aa7967f29c", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -10,7 +10,7 @@\n \n use chalk_engine::fallible::Fallible as ChalkEngineFallible;\n use chalk_engine::{context, hh::HhGoal, DelayedLiteral, ExClause};\n-use rustc::infer::canonical::{Canonical, CanonicalVarValues, QueryRegionConstraint, QueryResult};\n+use rustc::infer::canonical::{Canonical, CanonicalVarValues, QueryRegionConstraint, QueryResponse};\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc::traits::{\n     WellFormed,\n@@ -77,7 +77,7 @@ impl context::Context for ChalkArenas<'tcx> {\n     // u-canonicalization not yet implemented\n     type UniverseMap = UniverseMap;\n \n-    type Solution = Canonical<'tcx, QueryResult<'tcx, ()>>;\n+    type Solution = Canonical<'tcx, QueryResponse<'tcx, ()>>;\n \n     type InferenceNormalizedSubst = CanonicalVarValues<'tcx>;\n \n@@ -116,7 +116,7 @@ impl context::AggregateOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n         &self,\n         _root_goal: &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>,\n         _simplified_answers: impl context::AnswerStream<ChalkArenas<'gcx>>,\n-    ) -> Option<Canonical<'gcx, QueryResult<'gcx, ()>>> {\n+    ) -> Option<Canonical<'gcx, QueryResponse<'gcx, ()>>> {\n         unimplemented!()\n     }\n }"}, {"sha": "37e61e74e64d972a8a8e87c80796c991a95b5fe0", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::hir::def_id::DefId;\n-use rustc::infer::canonical::{Canonical, QueryResult};\n+use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::traits::query::dropck_outlives::{DropckOutlivesResult, DtorckConstraint};\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc::traits::{FulfillmentContext, Normalized, ObligationCause, TraitEngineExt};\n@@ -31,7 +31,7 @@ crate fn provide(p: &mut Providers) {\n fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonical_goal: CanonicalTyGoal<'tcx>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n     debug!(\"dropck_outlives(goal={:#?})\", canonical_goal);\n \n     tcx.infer_ctxt().enter_with_canonical(DUMMY_SP, &canonical_goal, |ref infcx, goal, canonical_inference_vars| {\n@@ -143,7 +143,7 @@ fn dropck_outlives<'tcx>(\n \n         debug!(\"dropck_outlives: result = {:#?}\", result);\n \n-        infcx.make_canonicalized_query_result(canonical_inference_vars, result, fulfill_cx)\n+        infcx.make_canonicalized_query_response(canonical_inference_vars, result, fulfill_cx)\n     })\n }\n "}, {"sha": "ad0a54e392f583ed55d483180a87a3d9f688ea32", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -37,7 +37,7 @@ fn implied_outlives_bounds<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n ) -> Result<\n-        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n+        Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n         NoSolution,\n > {\n     tcx.infer_ctxt()"}, {"sha": "637a50728f39cec6354ae2f59de556d09ef48052", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::canonical::{Canonical, QueryResult};\n+use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::traits::query::{normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution};\n use rustc::traits::{self, ObligationCause, SelectionContext, TraitEngineExt};\n use rustc::ty::query::Providers;\n@@ -28,7 +28,7 @@ crate fn provide(p: &mut Providers) {\n fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n     tcx.sess"}, {"sha": "a857cdbda45ae87cbdb6510d329a6b90470c12ec", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca294da1f27cdbf66584b84f62c3090053b65ed/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=bca294da1f27cdbf66584b84f62c3090053b65ed", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::canonical::{Canonical, QueryResult};\n+use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::InferCtxt;\n use rustc::traits::query::type_op::eq::Eq;\n use rustc::traits::query::type_op::normalize::Normalize;\n@@ -38,7 +38,7 @@ crate fn provide(p: &mut Providers) {\n fn type_op_eq<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Eq<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Eq { a, b }) = key.into_parts();\n@@ -68,39 +68,39 @@ where\n fn type_op_normalize_ty(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Ty<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Ty<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_predicate(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Predicate<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Predicate<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, Predicate<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<FnSig<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, FnSig<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, FnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_poly_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<PolyFnSig<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_subtype<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Subtype<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Subtype { sub, sup }) = key.into_parts();\n@@ -114,7 +114,7 @@ fn type_op_subtype<'tcx>(\n fn type_op_prove_predicate<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, ProvePredicate { predicate }) = key.into_parts();"}]}