{"sha": "c13a62593c218243b4d3b0e8be0b903c0315571b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxM2E2MjU5M2MyMTgyNDNiNGQzYjBlOGJlMGI5MDNjMDMxNTU3MWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-23T17:53:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-29T16:35:49Z"}, "message": "Flag Result as #[must_use] and deal with fallout.", "tree": {"sha": "aba8c199c07f51e420188242aa4d6edceab52054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba8c199c07f51e420188242aa4d6edceab52054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c13a62593c218243b4d3b0e8be0b903c0315571b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c13a62593c218243b4d3b0e8be0b903c0315571b", "html_url": "https://github.com/rust-lang/rust/commit/c13a62593c218243b4d3b0e8be0b903c0315571b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c13a62593c218243b4d3b0e8be0b903c0315571b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "html_url": "https://github.com/rust-lang/rust/commit/9896beb5b5363eae1f8bfee35c12b3d78185e0e6"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "acab7ce3a91b4763b8615236ed0fabcf005fd6f1", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -118,7 +118,10 @@ impl io::Reader for FileDesc {\n \n impl io::Writer for FileDesc {\n     fn write(&mut self, buf: &[u8]) {\n-        self.inner_write(buf);\n+        match self.inner_write(buf) {\n+            Ok(()) => {}\n+            Err(e) => { io::io_error::cond.raise(e); }\n+        }\n     }\n }\n \n@@ -276,7 +279,7 @@ impl rtio::RtioFileStream for FileDesc {\n                 _ => Ok(())\n             }\n         };\n-        self.seek(orig_pos as i64, io::SeekSet);\n+        let _ = self.seek(orig_pos as i64, io::SeekSet);\n         return ret;\n     }\n     #[cfg(unix)]\n@@ -383,12 +386,10 @@ impl rtio::RtioFileStream for CFile {\n     }\n \n     fn pread(&mut self, buf: &mut [u8], offset: u64) -> Result<int, IoError> {\n-        self.flush();\n-        self.fd.pread(buf, offset)\n+        self.flush().and_then(|()| self.fd.pread(buf, offset))\n     }\n     fn pwrite(&mut self, buf: &[u8], offset: u64) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.pwrite(buf, offset)\n+        self.flush().and_then(|()| self.fd.pwrite(buf, offset))\n     }\n     fn seek(&mut self, pos: i64, style: io::SeekStyle) -> Result<u64, IoError> {\n         let whence = match style {\n@@ -412,16 +413,13 @@ impl rtio::RtioFileStream for CFile {\n         }\n     }\n     fn fsync(&mut self) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.fsync()\n+        self.flush().and_then(|()| self.fd.fsync())\n     }\n     fn datasync(&mut self) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.fsync()\n+        self.flush().and_then(|()| self.fd.fsync())\n     }\n     fn truncate(&mut self, offset: i64) -> Result<(), IoError> {\n-        self.flush();\n-        self.fd.truncate(offset)\n+        self.flush().and_then(|()| self.fd.truncate(offset))\n     }\n }\n "}, {"sha": "13dd4298777c617db5bdf5cd1451cd49b55dd433", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -486,7 +486,7 @@ fn spawn_process_os(prog: &str, args: &[~str],\n                 (errno <<  8) as u8,\n                 (errno <<  0) as u8,\n             ];\n-            output.inner_write(bytes);\n+            assert!(output.inner_write(bytes).is_ok());\n             intrinsics::abort();\n         })\n     }"}, {"sha": "9297679857b0fb787cf857fbbe871e73723073b9", "filename": "src/libnative/io/timer_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ftimer_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ftimer_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_helper.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -101,7 +101,7 @@ mod imp {\n     }\n \n     pub fn signal(fd: libc::c_int) {\n-        FileDesc::new(fd, false).inner_write([0]);\n+        FileDesc::new(fd, false).inner_write([0]).unwrap();\n     }\n \n     pub fn close(fd: libc::c_int) {"}, {"sha": "bc005f2fe8dd3542b40ee033f900a20c16817b22", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -187,7 +187,7 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n \n                 // drain the file descriptor\n                 let mut buf = [0];\n-                fd.inner_read(buf);\n+                fd.inner_read(buf).unwrap();\n             }\n \n             -1 if os::errno() == libc::EINTR as int => {}"}, {"sha": "1888b8578a0920952f35f1589b2933724f1e3b7f", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -98,15 +98,15 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n             if fd == input {\n                 let mut buf = [0, ..1];\n                 // drain the input file descriptor of its input\n-                FileDesc::new(fd, false).inner_read(buf);\n+                FileDesc::new(fd, false).inner_read(buf).unwrap();\n                 incoming = true;\n             } else {\n                 let mut bits = [0, ..8];\n                 // drain the timerfd of how many times its fired\n                 //\n                 // FIXME: should this perform a send() this number of\n                 //      times?\n-                FileDesc::new(fd, false).inner_read(bits);\n+                FileDesc::new(fd, false).inner_read(bits).unwrap();\n                 let remove = {\n                     match map.find(&fd).expect(\"fd unregistered\") {\n                         &(ref c, oneshot) => !c.try_send(()) || oneshot"}, {"sha": "31afa7b5c7c80edf626bd6614fa101b4fcc50411", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -389,7 +389,7 @@ impl Drop for FileWatcher {\n                 }\n             }\n             rtio::CloseSynchronously => {\n-                execute_nop(|req, cb| unsafe {\n+                let _ = execute_nop(|req, cb| unsafe {\n                     uvll::uv_fs_close(self.loop_.handle, req, self.fd, cb)\n                 });\n             }"}, {"sha": "8904101dd05ed1ec6b02e4310bc2822a950f3278", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -175,7 +175,7 @@ impl File {\n     ///\n     /// This function will raise on the `io_error` condition on failure.\n     pub fn fsync(&mut self) {\n-        self.fd.fsync().map_err(|e| io_error::cond.raise(e));\n+        let _ = self.fd.fsync().map_err(|e| io_error::cond.raise(e));\n     }\n \n     /// This function is similar to `fsync`, except that it may not synchronize\n@@ -187,7 +187,7 @@ impl File {\n     ///\n     /// This function will raise on the `io_error` condition on failure.\n     pub fn datasync(&mut self) {\n-        self.fd.datasync().map_err(|e| io_error::cond.raise(e));\n+        let _ = self.fd.datasync().map_err(|e| io_error::cond.raise(e));\n     }\n \n     /// Either truncates or extends the underlying file, updating the size of\n@@ -203,7 +203,7 @@ impl File {\n     ///\n     /// On error, this function will raise on the `io_error` condition.\n     pub fn truncate(&mut self, size: i64) {\n-        self.fd.truncate(size).map_err(|e| io_error::cond.raise(e));\n+        let _ = self.fd.truncate(size).map_err(|e| io_error::cond.raise(e));\n     }\n \n     /// Tests whether this stream has reached EOF."}, {"sha": "c3618bad18ec4f8cb6af067e82b52f57df070adb", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13a62593c218243b4d3b0e8be0b903c0315571b/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=c13a62593c218243b4d3b0e8be0b903c0315571b", "patch": "@@ -20,6 +20,7 @@ use to_str::ToStr;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n #[deriving(Clone, DeepClone, Eq, Ord, TotalEq, TotalOrd, ToStr)]\n+#[must_use]\n pub enum Result<T, E> {\n     /// Contains the success value\n     Ok(T),"}]}