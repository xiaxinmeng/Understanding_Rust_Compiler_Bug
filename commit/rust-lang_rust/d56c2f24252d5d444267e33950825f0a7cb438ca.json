{"sha": "d56c2f24252d5d444267e33950825f0a7cb438ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NmMyZjI0MjUyZDVkNDQ0MjY3ZTMzOTUwODI1ZjBhN2NiNDM4Y2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-20T13:05:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-20T13:44:44Z"}, "message": "explain how to launch the thing", "tree": {"sha": "a0e0b76567e4f9a5210c6545d089c722508c4a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e0b76567e4f9a5210c6545d089c722508c4a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56c2f24252d5d444267e33950825f0a7cb438ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56c2f24252d5d444267e33950825f0a7cb438ca", "html_url": "https://github.com/rust-lang/rust/commit/d56c2f24252d5d444267e33950825f0a7cb438ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56c2f24252d5d444267e33950825f0a7cb438ca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad322236dbe54ada2c284bda4a2b72830b3ff3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad322236dbe54ada2c284bda4a2b72830b3ff3d", "html_url": "https://github.com/rust-lang/rust/commit/1ad322236dbe54ada2c284bda4a2b72830b3ff3d"}], "stats": {"total": 127, "additions": 91, "deletions": 36}, "files": [{"sha": "ac7f4fd71bf7afab8387df7bae2e66c2b7989010", "filename": "docs/dev/README.md", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d56c2f24252d5d444267e33950825f0a7cb438ca/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d56c2f24252d5d444267e33950825f0a7cb438ca/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=d56c2f24252d5d444267e33950825f0a7cb438ca", "patch": "@@ -41,3 +41,84 @@ We use Travis for CI. Most of the things, including formatting, are checked by\n `cargo test` so, if `cargo test` passes locally, that's a good sign that CI will\n be green as well. We use bors-ng to enforce the [not rocket\n science](https://graydon2.dreamwidth.org/1597.html) rule.\n+\n+You can run `cargo format-hook` to install git-hook to run rustfmt on commit.\n+\n+# Code organization\n+\n+All Rust code lives in the `crates` top-level directory, and is organized as a\n+single Cargo workspace. The `editors` top-level directory contains code for\n+integrating with editors. Currently, it contains plugins for VS Code (in\n+typescript) and Emacs (in elisp). The `docs` top-level directory contains both\n+developer and user documentation.\n+\n+We have some automation infra in Rust in the `crates/tool` package. It contains\n+stuff like formatting checking, code generation and powers `cargo install-code`.\n+The latter syntax is achieved with the help of cargo aliases (see `.cargo`\n+directory).\n+\n+# Launching rust-analyzer\n+\n+Debugging language server can be tricky: LSP is rather chatty, so driving it\n+from the command line is not really feasible, driving it via VS Code requires\n+interacting with two processes.\n+\n+For this reason, the best way to see how rust-analyzer works is to find a\n+relevant test and execute it (VS Code includes an action for running a single\n+test).\n+\n+However, launching a VS Code instance with locally build language server is\n+possible. There's even a VS Code task for this, so just <kbd>F5</kbd> should\n+work (thanks, [@andrew-w-ross](https://github.com/andrew-w-ross)!).\n+\n+I often just install development version with `cargo jinstall-lsp` and\n+restart the host VS Code.\n+\n+See [./debugging.md](./debugging.md) for how to attach to rust-analyzer with\n+debugger, and don't forget that rust-analyzer has useful `pd` snippet and `dbg`\n+postfix completion for printf debugging :-)\n+\n+# Working With VS Code Extension\n+\n+To work on the VS Code extension, launch code inside `editors/code` and use `F5`\n+to launch/debug. To automatically apply formatter and linter suggestions, use\n+`npm run fix`.\n+\n+# Logging\n+\n+Logging is done by both rust-analyzer and VS Code, so it might be tricky to\n+figure out where logs go.\n+\n+Inside rust-analyzer, we use the standard `log` crate for logging, and\n+`flexi_logger` for logging frotend. By default, log goes to stderr (the same as\n+with `env_logger`), but the stderr itself is processed by VS Code. To mirror\n+logs to a `./log` directory, set `RA_INTERNAL_MODE=1` environmental variable.\n+\n+To see stderr in the running VS Code instance, go to the \"Output\" tab of the\n+panel and select `rust-analyzer`. This shows `eprintln!` as well. Note that\n+`stdout` is used for the actual protocol, so `println!` will break things.\n+\n+To log all communication between the server and the client, there are two choices:\n+\n+* you can log on the server side, by running something like\n+  ```\n+  env RUST_LOG=gen_lsp_server=trace code .\n+  ```\n+\n+* you can log on the client side, by enabling `\"rust-analyzer.trace.server\":\n+  \"verbose\"` workspace setting. These logs are shown in a separate tab in the\n+  output and could be used with LSP inspector. Kudos to\n+  [@DJMcNab](https://github.com/DJMcNab) for setting this awesome infra up!\n+\n+\n+There's also two VS Code commands which might be of interest:\n+\n+* `Rust Analyzer: Status` shows some memory-usage statistics. To take full\n+  advantage of it, you need to compile rust-analyzer with jemalloc support:\n+  ```\n+  $ cargo install --path crates/ra_lsp_server --force --features jemalloc\n+  ```\n+\n+  There's an alias for this: `cargo jinstall-lsp`.\n+\n+* `Rust Analyzer: Syntax Tree` shows syntax tree of the current file/selection."}, {"sha": "3cd63bf732a3b00e51c2a7b5a96c2135c02e2139", "filename": "docs/dev/architecture.md", "status": "renamed", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d56c2f24252d5d444267e33950825f0a7cb438ca/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/d56c2f24252d5d444267e33950825f0a7cb438ca/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=d56c2f24252d5d444267e33950825f0a7cb438ca", "patch": "@@ -7,8 +7,10 @@ in the right place!\n See also the [guide](./guide.md), which walks through a particular snapshot of\n rust-analyzer code base.\n \n-For syntax-trees specifically, there's a [video walk\n-through](https://youtu.be/DGAuLWdCCAI) as well.\n+Yet another resource is this playlist with videos about various parts of the\n+analyzer:\n+\n+https://www.youtube.com/playlist?list=PL85XCvVPmGQho7MZkdW-wtPtuJcFpzycE\n \n ## The Big Picture\n \n@@ -61,7 +63,7 @@ processes. These are outlined below:\n \n ## Code Walk-Through\n \n-### `crates/ra_syntax`\n+### `crates/ra_syntax`, `crates/ra_parser`\n \n Rust syntax tree structure and parser. See\n [RFC](https://github.com/rust-lang/rfcs/pull/2256) for some design notes.\n@@ -145,12 +147,14 @@ throughout its modules.\n \n An LSP implementation which wraps `ra_ide_api` into a langauge server protocol.\n \n-### `crates/ra_vfs`\n+### `ra_vfs`\n \n Although `hir` and `ra_ide_api` don't do any IO, we need to be able to read\n files from disk at the end of the day. This is what `ra_vfs` does. It also\n manages overlays: \"dirty\" files in the editor, whose \"true\" contents is\n-different from data on disk.\n+different from data on disk. This is more or less the single really\n+platform-dependent component, so it lives in a separate repository and has an\n+extensive cross-platform CI testing.\n \n ### `crates/gen_lsp_server`\n \n@@ -164,37 +168,7 @@ Run with `RUST_LOG=sync_lsp_server=debug` to see all the messages.\n \n A CLI interface to rust-analyzer.\n \n-### `crate/tools`\n-\n-Custom Cargo tasks used to develop rust-analyzer:\n-\n-- `cargo gen-syntax` -- generate `ast` and `syntax_kinds`\n-- `cargo gen-tests` -- collect inline tests from grammar\n-- `cargo install-code` -- build and install VS Code extension and server\n-\n-### `editors/code`\n-\n-VS Code plugin\n-\n-\n-## Common workflows\n-\n-To try out VS Code extensions, run `cargo install-code`.  This installs both the\n-`ra_lsp_server` binary and the VS Code extension. To install only the binary, use\n-`cargo install-lsp` (shorthand for `cargo install --path crates/ra_lsp_server --force`)\n-\n-To see logs from the language server, set `RUST_LOG=info` env variable. To see\n-all communication between the server and the client, use\n-`RUST_LOG=gen_lsp_server=debug` (this will print quite a bit of stuff).\n \n-There's `rust-analyzer: status` command which prints common high-level debug\n-info. In particular, it prints info about memory usage of various data\n-structures, and, if compiled with jemalloc support (`cargo jinstall-lsp` or \n-`cargo install --path crates/ra_lsp_server --force --features jemalloc`), includes\n- statistic about the heap.\n+## Testing Infrastructure\n \n-To run tests, just `cargo test`.\n \n-To work on the VS Code extension, launch code inside `editors/code` and use `F5` to\n-launch/debug. To automatically apply formatter and linter suggestions, use `npm\n-run fix`.", "previous_filename": "docs/dev/arhictecture.md"}, {"sha": "f868e6998f7f9ca3f68a2daa8d0148c2cf40942d", "filename": "docs/dev/debugging.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d56c2f24252d5d444267e33950825f0a7cb438ca/docs%2Fdev%2Fdebugging.md", "raw_url": "https://github.com/rust-lang/rust/raw/d56c2f24252d5d444267e33950825f0a7cb438ca/docs%2Fdev%2Fdebugging.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fdebugging.md?ref=d56c2f24252d5d444267e33950825f0a7cb438ca", "previous_filename": "docs/dev/DEBUGGING.md"}]}