{"sha": "9afbf2dff43dee3227358f10162d4c77d192ce7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZmJmMmRmZjQzZGVlMzIyNzM1OGYxMDE2MmQ0Yzc3ZDE5MmNlN2E=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-08T19:43:52Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-07-08T19:47:37Z"}, "message": "Unify `normalize` and `implements` to simplify code", "tree": {"sha": "82d38315b9be21dec920f59389ea89cdb3ae0a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82d38315b9be21dec920f59389ea89cdb3ae0a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9afbf2dff43dee3227358f10162d4c77d192ce7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9afbf2dff43dee3227358f10162d4c77d192ce7a", "html_url": "https://github.com/rust-lang/rust/commit/9afbf2dff43dee3227358f10162d4c77d192ce7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9afbf2dff43dee3227358f10162d4c77d192ce7a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15862fc04183c7f9b3f3af666336a594a6a52cd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/15862fc04183c7f9b3f3af666336a594a6a52cd9", "html_url": "https://github.com/rust-lang/rust/commit/15862fc04183c7f9b3f3af666336a594a6a52cd9"}], "stats": {"total": 174, "additions": 67, "deletions": 107}, "files": [{"sha": "b0c02763154f2decd9b065d2712930e229f650dc", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -213,18 +213,11 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     #[salsa::invoke(crate::ty::traits::chalk::impl_datum_query)]\n     fn impl_datum(&self, krate: Crate, impl_id: chalk_ir::ImplId) -> Arc<chalk_rust_ir::ImplDatum>;\n \n-    #[salsa::invoke(crate::ty::traits::implements_query)]\n-    fn implements(\n+    #[salsa::invoke(crate::ty::traits::solve_query)]\n+    fn solve(\n         &self,\n         krate: Crate,\n-        goal: crate::ty::Canonical<crate::ty::InEnvironment<crate::ty::TraitRef>>,\n-    ) -> Option<crate::ty::traits::Solution>;\n-\n-    #[salsa::invoke(crate::ty::traits::normalize_query)]\n-    fn normalize(\n-        &self,\n-        krate: Crate,\n-        goal: crate::ty::Canonical<crate::ty::InEnvironment<crate::ty::ProjectionPredicate>>,\n+        goal: crate::ty::Canonical<crate::ty::InEnvironment<crate::ty::Obligation>>,\n     ) -> Option<crate::ty::traits::Solution>;\n }\n "}, {"sha": "9accffcbc8f30cf40ed21e8876a632faba7fa68e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -26,7 +26,7 @@ pub(crate) use lower::{\n     callable_item_sig, generic_defaults_query, generic_predicates_query, type_for_def,\n     type_for_field, TypableDef,\n };\n-pub(crate) use traits::{Environment, InEnvironment, ProjectionPredicate};\n+pub(crate) use traits::{Environment, InEnvironment, Obligation, ProjectionPredicate};\n \n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or"}, {"sha": "c265138719c481bbad043d3ce0f130b797bd2bf3", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -62,11 +62,13 @@ fn deref_by_trait(\n         },\n     };\n \n-    let in_env = super::traits::InEnvironment { value: projection, environment: env };\n+    let obligation = super::Obligation::Projection(projection);\n+\n+    let in_env = super::traits::InEnvironment { value: obligation, environment: env };\n \n     let canonical = super::Canonical { num_vars: 1 + ty.num_vars, value: in_env };\n \n-    let solution = db.normalize(krate, canonical)?;\n+    let solution = db.solve(krate, canonical)?;\n \n     match &solution {\n         Solution::Unique(vars) => {"}, {"sha": "1f74108a447b7f56eae1c118ca47ef170aa12fea", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 18, "deletions": 46, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -331,53 +331,25 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn resolve_obligations_as_possible(&mut self) {\n         let obligations = mem::replace(&mut self.obligations, Vec::new());\n         for obligation in obligations {\n-            match &obligation {\n-                Obligation::Trait(tr) => {\n-                    let in_env = InEnvironment::new(self.trait_env.clone(), tr.clone());\n-                    let canonicalized = self.canonicalizer().canonicalize_trait_ref(in_env);\n-                    let solution = self\n-                        .db\n-                        .implements(self.resolver.krate().unwrap(), canonicalized.value.clone());\n-                    match solution {\n-                        Some(Solution::Unique(substs)) => {\n-                            canonicalized.apply_solution(self, substs.0);\n-                        }\n-                        Some(Solution::Ambig(Guidance::Definite(substs))) => {\n-                            canonicalized.apply_solution(self, substs.0);\n-                            self.obligations.push(obligation);\n-                        }\n-                        Some(_) => {\n-                            // FIXME use this when trying to resolve everything at the end\n-                            self.obligations.push(obligation);\n-                        }\n-                        None => {\n-                            // FIXME obligation cannot be fulfilled => diagnostic\n-                        }\n-                    };\n+            let in_env = InEnvironment::new(self.trait_env.clone(), obligation.clone());\n+            let canonicalized = self.canonicalizer().canonicalize_obligation(in_env);\n+            let solution =\n+                self.db.solve(self.resolver.krate().unwrap(), canonicalized.value.clone());\n+\n+            match solution {\n+                Some(Solution::Unique(substs)) => {\n+                    canonicalized.apply_solution(self, substs.0);\n                 }\n-                Obligation::Projection(pr) => {\n-                    let in_env = InEnvironment::new(self.trait_env.clone(), pr.clone());\n-                    let canonicalized = self.canonicalizer().canonicalize_projection(in_env);\n-                    let solution = self\n-                        .db\n-                        .normalize(self.resolver.krate().unwrap(), canonicalized.value.clone());\n-\n-                    match solution {\n-                        Some(Solution::Unique(substs)) => {\n-                            canonicalized.apply_solution(self, substs.0);\n-                        }\n-                        Some(Solution::Ambig(Guidance::Definite(substs))) => {\n-                            canonicalized.apply_solution(self, substs.0);\n-                            self.obligations.push(obligation);\n-                        }\n-                        Some(_) => {\n-                            // FIXME use this when trying to resolve everything at the end\n-                            self.obligations.push(obligation);\n-                        }\n-                        None => {\n-                            // FIXME obligation cannot be fulfilled => diagnostic\n-                        }\n-                    };\n+                Some(Solution::Ambig(Guidance::Definite(substs))) => {\n+                    canonicalized.apply_solution(self, substs.0);\n+                    self.obligations.push(obligation);\n+                }\n+                Some(_) => {\n+                    // FIXME use this when trying to resolve everything at the end\n+                    self.obligations.push(obligation);\n+                }\n+                None => {\n+                    // FIXME obligation cannot be fulfilled => diagnostic\n                 }\n             };\n         }"}, {"sha": "e7e8825d1acdc1f97bb01f2a8f2fa3910e3db111", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -1,6 +1,6 @@\n //! Unification and canonicalization logic.\n \n-use super::InferenceContext;\n+use super::{InferenceContext, Obligation};\n use crate::db::HirDatabase;\n use crate::ty::{\n     Canonical, InEnvironment, InferTy, ProjectionPredicate, ProjectionTy, TraitRef, Ty,\n@@ -110,32 +110,24 @@ where\n     // FIXME: add some point, we need to introduce a `Fold` trait that abstracts\n     // over all the things that can be canonicalized (like Chalk and rustc have)\n \n-    pub fn canonicalize_ty(mut self, ty: Ty) -> Canonicalized<Ty> {\n+    pub(crate) fn canonicalize_ty(mut self, ty: Ty) -> Canonicalized<Ty> {\n         let result = self.do_canonicalize_ty(ty);\n         self.into_canonicalized(result)\n     }\n \n-    pub fn canonicalize_trait_ref(\n+    pub(crate) fn canonicalize_obligation(\n         mut self,\n-        trait_ref_in_env: InEnvironment<TraitRef>,\n-    ) -> Canonicalized<InEnvironment<TraitRef>> {\n-        let result = self.do_canonicalize_trait_ref(trait_ref_in_env.value);\n-        // FIXME canonicalize env\n-        self.into_canonicalized(InEnvironment {\n-            value: result,\n-            environment: trait_ref_in_env.environment,\n-        })\n-    }\n-\n-    pub fn canonicalize_projection(\n-        mut self,\n-        projection: InEnvironment<ProjectionPredicate>,\n-    ) -> Canonicalized<InEnvironment<ProjectionPredicate>> {\n-        let result = self.do_canonicalize_projection_predicate(projection.value);\n-        // FIXME canonicalize env\n+        obligation: InEnvironment<Obligation>,\n+    ) -> Canonicalized<InEnvironment<Obligation>> {\n+        let result = match obligation.value {\n+            Obligation::Trait(tr) => Obligation::Trait(self.do_canonicalize_trait_ref(tr)),\n+            Obligation::Projection(pr) => {\n+                Obligation::Projection(self.do_canonicalize_projection_predicate(pr))\n+            }\n+        };\n         self.into_canonicalized(InEnvironment {\n             value: result,\n-            environment: projection.environment,\n+            environment: obligation.environment,\n         })\n     }\n }"}, {"sha": "e214bf1af4c1123e309c6b059f684b567a605044", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -211,8 +211,8 @@ fn iterate_trait_method_candidates<T>(\n                 let data = m.data(db);\n                 if name.map_or(true, |name| data.name() == name) && data.has_self_param() {\n                     if !known_implemented {\n-                        let trait_ref = canonical_trait_ref(db, env.clone(), t, ty.clone());\n-                        if db.implements(krate, trait_ref).is_none() {\n+                        let goal = generic_implements_goal(db, env.clone(), t, ty.clone());\n+                        if db.solve(krate, goal).is_none() {\n                             continue 'traits;\n                         }\n                     }\n@@ -279,12 +279,12 @@ impl Ty {\n \n /// This creates Substs for a trait with the given Self type and type variables\n /// for all other parameters, to query Chalk with it.\n-fn canonical_trait_ref(\n+fn generic_implements_goal(\n     db: &impl HirDatabase,\n     env: Arc<Environment>,\n     trait_: Trait,\n     self_ty: Canonical<Ty>,\n-) -> Canonical<InEnvironment<TraitRef>> {\n+) -> Canonical<InEnvironment<super::Obligation>> {\n     let mut substs = Vec::new();\n     let generics = trait_.generic_params(db);\n     let num_vars = self_ty.num_vars;\n@@ -297,8 +297,8 @@ fn canonical_trait_ref(\n             .enumerate()\n             .map(|(i, _p)| Ty::Bound((i + num_vars) as u32)),\n     );\n-    Canonical {\n-        num_vars: substs.len() - 1 + self_ty.num_vars,\n-        value: InEnvironment::new(env, TraitRef { trait_, substs: substs.into() }),\n-    }\n+    let num_vars = substs.len() - 1 + self_ty.num_vars;\n+    let trait_ref = TraitRef { trait_, substs: substs.into() };\n+    let obligation = super::Obligation::Trait(trait_ref);\n+    Canonical { num_vars, value: InEnvironment::new(env, obligation) }\n }"}, {"sha": "d99843319575768149b49c15b6cbad6b85cfc897", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -93,7 +93,7 @@ impl<T> InEnvironment<T> {\n /// Something that needs to be proven (by Chalk) during type checking, e.g. that\n /// a certain type implements a certain trait. Proving the Obligation might\n /// result in additional information about inference variables.\n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum Obligation {\n     /// Prove that a certain type implements a trait (the type is the `Self` type\n     /// parameter to the `TraitRef`).\n@@ -116,11 +116,11 @@ pub struct ProjectionPredicate {\n     pub ty: Ty,\n }\n \n-/// Check using Chalk whether trait is implemented for given parameters including `Self` type.\n-pub(crate) fn implements_query(\n+/// Solve a trait goal using Chalk.\n+pub(crate) fn solve_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n-    trait_ref: Canonical<InEnvironment<TraitRef>>,\n+    trait_ref: Canonical<InEnvironment<Obligation>>,\n ) -> Option<Solution> {\n     let _p = profile(\"implements_query\");\n     let canonical = trait_ref.to_chalk(db).cast();\n@@ -131,19 +131,6 @@ pub(crate) fn implements_query(\n     solution.map(|solution| solution_from_chalk(db, solution))\n }\n \n-pub(crate) fn normalize_query(\n-    db: &impl HirDatabase,\n-    krate: Crate,\n-    projection: Canonical<InEnvironment<ProjectionPredicate>>,\n-) -> Option<Solution> {\n-    let canonical = projection.to_chalk(db).cast();\n-    // We currently don't deal with universes (I think / hope they're not yet\n-    // relevant for our use cases?)\n-    let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n-    let solution = solve(db, krate, &u_canonical);\n-    solution.map(|solution| solution_from_chalk(db, solution))\n-}\n-\n fn solution_from_chalk(db: &impl HirDatabase, solution: chalk_solve::Solution) -> Solution {\n     let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution>| {\n         let value = subst"}, {"sha": "2df4dd13f84e47d30faa067336d94b30f72d2608", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -12,7 +12,7 @@ use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n use ra_db::salsa::{InternId, InternKey};\n use test_utils::tested_by;\n \n-use super::{Canonical, ChalkContext};\n+use super::{Canonical, ChalkContext, Obligation};\n use crate::{\n     db::HirDatabase,\n     generics::GenericDef,\n@@ -233,6 +233,21 @@ impl ToChalk for super::ProjectionPredicate {\n     }\n }\n \n+impl ToChalk for Obligation {\n+    type Chalk = chalk_ir::DomainGoal;\n+\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::DomainGoal {\n+        match self {\n+            Obligation::Trait(tr) => tr.to_chalk(db).cast(),\n+            Obligation::Projection(pr) => pr.to_chalk(db).cast(),\n+        }\n+    }\n+\n+    fn from_chalk(_db: &impl HirDatabase, _goal: chalk_ir::DomainGoal) -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n impl<T> ToChalk for Canonical<T>\n where\n     T: ToChalk,"}, {"sha": "efc9a92deb20109d9aadc5d2ba043198115bc657", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afbf2dff43dee3227358f10162d4c77d192ce7a/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=9afbf2dff43dee3227358f10162d4c77d192ce7a", "patch": "@@ -295,8 +295,7 @@ impl RootDatabase {\n             hir::db::TraitDatumQuery\n             hir::db::StructDatumQuery\n             hir::db::ImplDatumQuery\n-            hir::db::ImplementsQuery\n-            hir::db::NormalizeQuery\n+            hir::db::SolveQuery\n         ];\n         acc.sort_by_key(|it| std::cmp::Reverse(it.1));\n         acc"}]}