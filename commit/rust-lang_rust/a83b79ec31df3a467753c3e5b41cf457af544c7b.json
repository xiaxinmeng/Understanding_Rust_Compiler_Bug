{"sha": "a83b79ec31df3a467753c3e5b41cf457af544c7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4M2I3OWVjMzFkZjNhNDY3NzUzYzNlNWI0MWNmNDU3YWY1NDRjN2I=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-07-10T22:15:24Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-21T20:37:30Z"}, "message": "Finished documenting all unsafe op inside unsafe fn", "tree": {"sha": "829f38112852740dbb8cbe81597b2b18ff63e40f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829f38112852740dbb8cbe81597b2b18ff63e40f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a83b79ec31df3a467753c3e5b41cf457af544c7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a83b79ec31df3a467753c3e5b41cf457af544c7b", "html_url": "https://github.com/rust-lang/rust/commit/a83b79ec31df3a467753c3e5b41cf457af544c7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a83b79ec31df3a467753c3e5b41cf457af544c7b/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c9cb06c2ec287e4b9d2bce79390b444752c3686", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9cb06c2ec287e4b9d2bce79390b444752c3686", "html_url": "https://github.com/rust-lang/rust/commit/8c9cb06c2ec287e4b9d2bce79390b444752c3686"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "281e1ef6741a540b756af72af2c22027bd24a050", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a83b79ec31df3a467753c3e5b41cf457af544c7b/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83b79ec31df3a467753c3e5b41cf457af544c7b/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=a83b79ec31df3a467753c3e5b41cf457af544c7b", "patch": "@@ -539,20 +539,28 @@ pub mod os {\n         }\n \n         pub unsafe fn get(&'static self, init: fn() -> T) -> Option<&'static T> {\n-            let ptr = self.os.get() as *mut Value<T>;\n+            // SAFETY: No mutable references are ever handed out meaning getting\n+            // the value is ok.\n+            let ptr = unsafe { self.os.get() as *mut Value<T> };\n             if ptr as usize > 1 {\n-                if let Some(ref value) = (*ptr).inner.get() {\n+                // SAFETY: the check ensured the pointer is safe (its destructor\n+                // is not running) + it is coming from a trusted source (self).\n+                if let Some(ref value) = unsafe { (*ptr).inner.get() } {\n                     return Some(value);\n                 }\n             }\n-            self.try_initialize(init)\n+            // SAFETY: At this point we are sure we have no value and so\n+            // initializing (or trying to) is safe.\n+            unsafe { self.try_initialize(init) }\n         }\n \n         // `try_initialize` is only called once per os thread local variable,\n         // except in corner cases where thread_local dtors reference other\n         // thread_local's, or it is being recursively initialized.\n         unsafe fn try_initialize(&'static self, init: fn() -> T) -> Option<&'static T> {\n-            let ptr = self.os.get() as *mut Value<T>;\n+            // SAFETY: No mutable references are ever handed out meaning getting\n+            // the value is ok.\n+            let ptr = unsafe { self.os.get() as *mut Value<T> };\n             if ptr as usize == 1 {\n                 // destructor is running\n                 return None;\n@@ -563,7 +571,11 @@ pub mod os {\n                 // local copy, so do that now.\n                 let ptr: Box<Value<T>> = box Value { inner: LazyKeyInner::new(), key: self };\n                 let ptr = Box::into_raw(ptr);\n-                self.os.set(ptr as *mut u8);\n+                // SAFETY: At this point we are sure there is no value inside\n+                // ptr so setting it will not affect anyone else.\n+                unsafe {\n+                    self.os.set(ptr as *mut u8);\n+                }\n                 ptr\n             } else {\n                 // recursive initialization"}]}