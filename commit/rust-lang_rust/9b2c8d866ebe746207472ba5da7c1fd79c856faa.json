{"sha": "9b2c8d866ebe746207472ba5da7c1fd79c856faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMmM4ZDg2NmViZTc0NjIwNzQ3MmJhNWRhN2MxZmQ3OWM4NTZmYWE=", "commit": {"author": {"name": "Ashley Mannix", "email": "ashleymannix@live.com.au", "date": "2020-09-22T22:39:19Z"}, "committer": {"name": "Ashley Mannix", "email": "ashleymannix@live.com.au", "date": "2020-09-22T23:40:51Z"}, "message": "revert const_type_id stabilization\n\nThis reverts commit e3856616ee2a894c7811a7017d98fafa7ba84dd8.", "tree": {"sha": "b0c50057c23cad0c32363f2245421cfd2a0f9bcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0c50057c23cad0c32363f2245421cfd2a0f9bcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2c8d866ebe746207472ba5da7c1fd79c856faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2c8d866ebe746207472ba5da7c1fd79c856faa", "html_url": "https://github.com/rust-lang/rust/commit/9b2c8d866ebe746207472ba5da7c1fd79c856faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2c8d866ebe746207472ba5da7c1fd79c856faa/comments", "author": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bc267512fc0cb49c86978192857e8187017f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bc267512fc0cb49c86978192857e8187017f0b", "html_url": "https://github.com/rust-lang/rust/commit/e0bc267512fc0cb49c86978192857e8187017f0b"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "88ff2a632fd49f396b3f38af1defa4339e30e22a", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2c8d866ebe746207472ba5da7c1fd79c856faa/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2c8d866ebe746207472ba5da7c1fd79c856faa/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=9b2c8d866ebe746207472ba5da7c1fd79c856faa", "patch": "@@ -435,7 +435,7 @@ impl TypeId {\n     /// assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"63084\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId { t: intrinsics::type_id::<T>() }\n     }"}, {"sha": "b8c0519f659c12069ffb7cd662da06a0f0e0dfa4", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2c8d866ebe746207472ba5da7c1fd79c856faa/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2c8d866ebe746207472ba5da7c1fd79c856faa/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9b2c8d866ebe746207472ba5da7c1fd79c856faa", "patch": "@@ -807,7 +807,7 @@ extern \"rust-intrinsic\" {\n     /// crate it is invoked in.\n     ///\n     /// The stabilized version of this intrinsic is [`crate::any::TypeId::of`].\n-    #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"63084\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:"}, {"sha": "a0d1f0165c4c2ca778abf6e7c766614cb30ab654", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2c8d866ebe746207472ba5da7c1fd79c856faa/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2c8d866ebe746207472ba5da7c1fd79c856faa/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9b2c8d866ebe746207472ba5da7c1fd79c856faa", "patch": "@@ -90,6 +90,7 @@\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]\n #![feature(const_align_of_val)]\n+#![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_likely)]\n #![feature(const_unreachable_unchecked)]"}, {"sha": "89d57ae4f98e628230080204c6555837816b828b", "filename": "src/test/ui/consts/const-typeid-of-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs?ref=9b2c8d866ebe746207472ba5da7c1fd79c856faa", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![feature(const_type_id)]\n #![feature(core_intrinsics)]\n \n use std::any::TypeId;"}, {"sha": "7706a97f23b4834bd0c2166e8354c0659ca34f4b", "filename": "src/test/ui/consts/issue-73976-monomorphic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs?ref=9b2c8d866ebe746207472ba5da7c1fd79c856faa", "patch": "@@ -5,6 +5,7 @@\n // will be properly rejected. This test will ensure that monomorphic use of these\n // would not be wrongly rejected in patterns.\n \n+#![feature(const_type_id)]\n #![feature(const_type_name)]\n \n use std::any::{self, TypeId};"}, {"sha": "787462da9f960b923782c5c5c249cd059789d0f9", "filename": "src/test/ui/consts/issue-73976-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs?ref=9b2c8d866ebe746207472ba5da7c1fd79c856faa", "patch": "@@ -5,6 +5,7 @@\n // This test case should either run-pass or be rejected at compile time.\n // Currently we just disallow this usage and require pattern is monomorphic.\n \n+#![feature(const_type_id)]\n #![feature(const_type_name)]\n \n use std::any::{self, TypeId};"}, {"sha": "442ad23f2cc425c97f6721be378341911383f79b", "filename": "src/test/ui/consts/issue-73976-polymorphic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2c8d866ebe746207472ba5da7c1fd79c856faa/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr?ref=9b2c8d866ebe746207472ba5da7c1fd79c856faa", "patch": "@@ -1,23 +1,23 @@\n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:19:37\n+  --> $DIR/issue-73976-polymorphic.rs:20:37\n    |\n LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n    |                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:31:42\n+  --> $DIR/issue-73976-polymorphic.rs:32:42\n    |\n LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:19:37\n+  --> $DIR/issue-73976-polymorphic.rs:20:37\n    |\n LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n    |                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:31:42\n+  --> $DIR/issue-73976-polymorphic.rs:32:42\n    |\n LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}