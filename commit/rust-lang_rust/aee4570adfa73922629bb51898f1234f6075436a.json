{"sha": "aee4570adfa73922629bb51898f1234f6075436a", "node_id": "C_kwDOAAsO6NoAKGFlZTQ1NzBhZGZhNzM5MjI2MjliYjUxODk4ZjEyMzRmNjA3NTQzNmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-09T04:01:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-09T04:01:24Z"}, "message": "Rollup merge of #107429 - tgross35:from-bytes-until-null-stabilization, r=dtolnay\n\nStabilize feature `cstr_from_bytes_until_nul`\n\nThis PR seeks to stabilize `cstr_from_bytes_until_nul`.\n\nPartially addresses #95027\n\nThis function has only been on nightly for about 10 months, but I think it is simple enough that there isn't harm discussing stabilization. It has also had at least a handful of mentions on both the user forum and the discord, so it seems like it's already in use or at least known.\n\nThis needs FCP still.\n\nComment on potential discussion points:\n- eventual conversion of `CStr` to be a single thin pointer: this function will still be useful to provide a safe way to create a `CStr` after this change.\n- should this return a length too, to address concerns about the `CStr` change? I don't see it as being particularly useful, and it seems less ergonomic (i.e. returning `Result<(&CStr, usize), FromBytesUntilNulError>`). I think users that also need this length without the additional `strlen` call are likely better off using a combination of other methods, but this is up for discussion\n- `CString::from_vec_until_nul`: this is also useful, but it doesn't even have a nightly implementation merged yet. I propose feature gating that separately, as opposed to blocking this `CStr` implementation on that\n\nPossible alternatives:\n\nA user can use `from_bytes_with_nul` on a slice up to `my_slice[..my_slice.iter().find(|c| c == 0).unwrap()]`. However; that is significantly less ergonomic, and is a bit more work for the compiler to optimize compared the direct `memchr` call that this wraps.\n\n## New stable API\n\n```rs\n// both in core::ffi\n\npub struct FromBytesUntilNulError(());\n\nimpl CStr {\n    pub const fn from_bytes_until_nul(\n        bytes: &[u8]\n    ) -> Result<&CStr, FromBytesUntilNulError>\n}\n```\n\ncc ```@ericseppanen``` original author, ```@Mark-Simulacrum``` original reviewer, ```@m-ou-se``` brought up some issues on the thin pointer CStr\n\n```@rustbot``` modify labels: +T-libs-api +needs-fcp", "tree": {"sha": "32679d28e3fad8ede53fbe8a4470d08b3844e9fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32679d28e3fad8ede53fbe8a4470d08b3844e9fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee4570adfa73922629bb51898f1234f6075436a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5HAUCRBK7hj4Ov3rIwAAvv4IADS+zNHFRANIWqV/RkVkbjsN\nRlj3NBcBBy0cT/xBu/6XJxomqOHD4CLzOYnYND3hXY1LBuSKjRTD+2yTPFN8nfoN\nafIg/qDd/rI3urZq/NkJRF9f91288DZT9FG7W7BtUuQlvyoOvkgdJkMPEch+Nvpd\nxYLeJke/dmURiNYr6kW0GIuAtl/11H6M4yIRAw/kAD6FbbVFvrnD3xrrIPPTLM18\n422Fi4BL+7lpZRDPfaGO9/fm2jEr7j07zLQzfDi9SI6GT2Q2+UskirhuO95ZKjxB\nAs4F8IMzYbKIFpjm/CqDHdfRNqUHgnp6qkzDyWNXL16YoATSKj8q45CNXzU3ijQ=\n=zDex\n-----END PGP SIGNATURE-----\n", "payload": "tree 32679d28e3fad8ede53fbe8a4470d08b3844e9fc\nparent a478b836fa8ba8691e7c57744049eda1c9d3b8c2\nparent 877e9f5d3a8282932e1be8ac63fdea584eef804a\nauthor Michael Goulet <michael@errs.io> 1675915284 -0800\ncommitter GitHub <noreply@github.com> 1675915284 -0800\n\nRollup merge of #107429 - tgross35:from-bytes-until-null-stabilization, r=dtolnay\n\nStabilize feature `cstr_from_bytes_until_nul`\n\nThis PR seeks to stabilize `cstr_from_bytes_until_nul`.\n\nPartially addresses #95027\n\nThis function has only been on nightly for about 10 months, but I think it is simple enough that there isn't harm discussing stabilization. It has also had at least a handful of mentions on both the user forum and the discord, so it seems like it's already in use or at least known.\n\nThis needs FCP still.\n\nComment on potential discussion points:\n- eventual conversion of `CStr` to be a single thin pointer: this function will still be useful to provide a safe way to create a `CStr` after this change.\n- should this return a length too, to address concerns about the `CStr` change? I don't see it as being particularly useful, and it seems less ergonomic (i.e. returning `Result<(&CStr, usize), FromBytesUntilNulError>`). I think users that also need this length without the additional `strlen` call are likely better off using a combination of other methods, but this is up for discussion\n- `CString::from_vec_until_nul`: this is also useful, but it doesn't even have a nightly implementation merged yet. I propose feature gating that separately, as opposed to blocking this `CStr` implementation on that\n\nPossible alternatives:\n\nA user can use `from_bytes_with_nul` on a slice up to `my_slice[..my_slice.iter().find(|c| c == 0).unwrap()]`. However; that is significantly less ergonomic, and is a bit more work for the compiler to optimize compared the direct `memchr` call that this wraps.\n\n## New stable API\n\n```rs\n// both in core::ffi\n\npub struct FromBytesUntilNulError(());\n\nimpl CStr {\n    pub const fn from_bytes_until_nul(\n        bytes: &[u8]\n    ) -> Result<&CStr, FromBytesUntilNulError>\n}\n```\n\ncc ```@ericseppanen``` original author, ```@Mark-Simulacrum``` original reviewer, ```@m-ou-se``` brought up some issues on the thin pointer CStr\n\n```@rustbot``` modify labels: +T-libs-api +needs-fcp\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee4570adfa73922629bb51898f1234f6075436a", "html_url": "https://github.com/rust-lang/rust/commit/aee4570adfa73922629bb51898f1234f6075436a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee4570adfa73922629bb51898f1234f6075436a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a478b836fa8ba8691e7c57744049eda1c9d3b8c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a478b836fa8ba8691e7c57744049eda1c9d3b8c2", "html_url": "https://github.com/rust-lang/rust/commit/a478b836fa8ba8691e7c57744049eda1c9d3b8c2"}, {"sha": "877e9f5d3a8282932e1be8ac63fdea584eef804a", "url": "https://api.github.com/repos/rust-lang/rust/commits/877e9f5d3a8282932e1be8ac63fdea584eef804a", "html_url": "https://github.com/rust-lang/rust/commit/877e9f5d3a8282932e1be8ac63fdea584eef804a"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "e9cc3875f683b1cf09c301775eb249ce87734920", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aee4570adfa73922629bb51898f1234f6075436a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee4570adfa73922629bb51898f1234f6075436a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=aee4570adfa73922629bb51898f1234f6075436a", "patch": "@@ -116,7 +116,6 @@\n #![feature(const_eval_select)]\n #![feature(const_pin)]\n #![feature(const_waker)]\n-#![feature(cstr_from_bytes_until_nul)]\n #![feature(dispatch_from_dyn)]\n #![feature(error_generic_member_access)]\n #![feature(error_in_core)]"}, {"sha": "e11a5e99184cb47bdee8bdc8a9d9c92ee2319268", "filename": "library/core/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee4570adfa73922629bb51898f1234f6075436a/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee4570adfa73922629bb51898f1234f6075436a/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=aee4570adfa73922629bb51898f1234f6075436a", "patch": "@@ -505,7 +505,7 @@ impl Error for crate::ffi::FromBytesWithNulError {\n     }\n }\n \n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n impl Error for crate::ffi::FromBytesUntilNulError {}\n \n #[unstable(feature = \"get_many_mut\", issue = \"104642\")]"}, {"sha": "82e5fa75ded841e0299b63574cf4a658066020ec", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aee4570adfa73922629bb51898f1234f6075436a/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee4570adfa73922629bb51898f1234f6075436a/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=aee4570adfa73922629bb51898f1234f6075436a", "patch": "@@ -150,10 +150,10 @@ impl FromBytesWithNulError {\n /// This error is created by the [`CStr::from_bytes_until_nul`] method.\n ///\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n pub struct FromBytesUntilNulError(());\n \n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n impl fmt::Display for FromBytesUntilNulError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"data provided does not contain a nul\")\n@@ -306,8 +306,6 @@ impl CStr {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(cstr_from_bytes_until_nul)]\n-    ///\n     /// use std::ffi::CStr;\n     ///\n     /// let mut buffer = [0u8; 16];\n@@ -322,8 +320,9 @@ impl CStr {\n     /// assert_eq!(c_str.to_str().unwrap(), \"AAAAAAAA\");\n     /// ```\n     ///\n-    #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n-    #[rustc_const_unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    #[rustc_allow_const_fn_unstable(const_slice_index)]\n+    #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {"}, {"sha": "98c8349eb602484c795f9514f697616558086b53", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aee4570adfa73922629bb51898f1234f6075436a/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee4570adfa73922629bb51898f1234f6075436a/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=aee4570adfa73922629bb51898f1234f6075436a", "patch": "@@ -16,25 +16,29 @@ const USIZE_BYTES: usize = mem::size_of::<usize>();\n /// bytes where the borrow propagated all the way to the most significant\n /// bit.\"\n #[inline]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn contains_zero_byte(x: usize) -> bool {\n     x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0\n }\n \n-#[cfg(target_pointer_width = \"16\")]\n #[inline]\n+#[cfg(target_pointer_width = \"16\")]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn repeat_byte(b: u8) -> usize {\n     (b as usize) << 8 | b as usize\n }\n \n-#[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n+#[cfg(not(target_pointer_width = \"16\"))]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn repeat_byte(b: u8) -> usize {\n     (b as usize) * (usize::MAX / 255)\n }\n \n /// Returns the first index matching the byte `x` in `text`.\n-#[must_use]\n #[inline]\n+#[must_use]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Fast path for small slices.\n     if text.len() < 2 * USIZE_BYTES {\n@@ -45,6 +49,7 @@ pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n }\n \n #[inline]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn memchr_naive(x: u8, text: &[u8]) -> Option<usize> {\n     let mut i = 0;\n \n@@ -60,6 +65,10 @@ const fn memchr_naive(x: u8, text: &[u8]) -> Option<usize> {\n     None\n }\n \n+#[rustc_allow_const_fn_unstable(const_cmp)]\n+#[rustc_allow_const_fn_unstable(const_slice_index)]\n+#[rustc_allow_const_fn_unstable(const_align_offset)]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn memchr_aligned(x: u8, text: &[u8]) -> Option<usize> {\n     // Scan for a single byte value by reading two `usize` words at a time.\n     //"}, {"sha": "cd9f74820ae9b576fbe529b0b6995ba23fcbd90f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aee4570adfa73922629bb51898f1234f6075436a/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee4570adfa73922629bb51898f1234f6075436a/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=aee4570adfa73922629bb51898f1234f6075436a", "patch": "@@ -278,7 +278,6 @@\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n #![feature(core_intrinsics)]\n-#![feature(cstr_from_bytes_until_nul)]\n #![feature(cstr_internals)]\n #![feature(duration_constants)]\n #![feature(error_generic_member_access)]"}, {"sha": "80b8d67401ad143086b69363c11e86e51f1dae2b", "filename": "src/tools/miri/tests/pass-dep/shims/pthreads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aee4570adfa73922629bb51898f1234f6075436a/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee4570adfa73922629bb51898f1234f6075436a/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs?ref=aee4570adfa73922629bb51898f1234f6075436a", "patch": "@@ -1,5 +1,4 @@\n //@ignore-target-windows: No libc on Windows\n-#![feature(cstr_from_bytes_until_nul)]\n use std::ffi::{CStr, CString};\n use std::thread;\n "}]}