{"sha": "9fd3c2d7886a61a10c37f922f6e866e221565add", "node_id": "C_kwDOAAsO6NoAKDlmZDNjMmQ3ODg2YTYxYTEwYzM3ZjkyMmY2ZTg2NmUyMjE1NjVhZGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T00:42:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T00:42:18Z"}, "message": "Auto merge of #8543 - dswij:8393, r=giraffate\n\n`unnecessary_lazy_eval` show suggestions on multiline lint\n\nCloses #8393\n\nchangelog: [`unnecessary_lazy_eval`] now shows suggestions for long-line lints", "tree": {"sha": "f59ee3c8ac9c28dfe312990c62b7ba2900059657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f59ee3c8ac9c28dfe312990c62b7ba2900059657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fd3c2d7886a61a10c37f922f6e866e221565add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd3c2d7886a61a10c37f922f6e866e221565add", "html_url": "https://github.com/rust-lang/rust/commit/9fd3c2d7886a61a10c37f922f6e866e221565add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fd3c2d7886a61a10c37f922f6e866e221565add/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d5c0eadde39deaf257d9d3511cac8d31837205b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5c0eadde39deaf257d9d3511cac8d31837205b", "html_url": "https://github.com/rust-lang/rust/commit/8d5c0eadde39deaf257d9d3511cac8d31837205b"}, {"sha": "bd888d435423a47ce3bdbaec6c61a3cb093a7e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd888d435423a47ce3bdbaec6c61a3cb093a7e18", "html_url": "https://github.com/rust-lang/rust/commit/bd888d435423a47ce3bdbaec6c61a3cb093a7e18"}], "stats": {"total": 202, "additions": 151, "deletions": 51}, "files": [{"sha": "2369be708129403f242fcdbfd55204d1295cf47b", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9fd3c2d7886a61a10c37f922f6e866e221565add/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd3c2d7886a61a10c37f922f6e866e221565add/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=9fd3c2d7886a61a10c37f922f6e866e221565add", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{eager_or_lazy, usage};\n@@ -48,20 +48,19 @@ pub(super) fn check<'tcx>(\n                     Applicability::MaybeIncorrect\n                 };\n \n-                span_lint_and_sugg(\n-                    cx,\n-                    UNNECESSARY_LAZY_EVALUATIONS,\n-                    expr.span,\n-                    msg,\n-                    &format!(\"use `{}` instead\", simplify_using),\n-                    format!(\n-                        \"{0}.{1}({2})\",\n-                        snippet(cx, recv.span, \"..\"),\n-                        simplify_using,\n-                        snippet(cx, body_expr.span, \"..\"),\n-                    ),\n-                    applicability,\n-                );\n+                // This is a duplicate of what's happening in clippy_lints::methods::method_call,\n+                // which isn't ideal, We want to get the method call span,\n+                // but prefer to avoid changing the signature of the function itself.\n+                if let hir::ExprKind::MethodCall(_, _, span) = expr.kind {\n+                    span_lint_and_then(cx, UNNECESSARY_LAZY_EVALUATIONS, expr.span, msg, |diag| {\n+                        diag.span_suggestion(\n+                            span,\n+                            &format!(\"use `{}(..)` instead\", simplify_using),\n+                            format!(\"{}({})\", simplify_using, snippet(cx, body_expr.span, \"..\")),\n+                            applicability,\n+                        );\n+                    });\n+                }\n             }\n         }\n     }"}, {"sha": "65fcdc43061bfe8557441050c3cc73c54121ccb5", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=9fd3c2d7886a61a10c37f922f6e866e221565add", "patch": "@@ -115,6 +115,14 @@ fn main() {\n     let _: Result<usize, usize> = res.or(Ok(2));\n     let _: Result<usize, usize> = res.or(Ok(astronomers_pi));\n     let _: Result<usize, usize> = res.or(Ok(ext_str.some_field));\n+    let _: Result<usize, usize> = res.\n+        // some lines\n+        // some lines\n+        // some lines\n+        // some lines\n+        // some lines\n+        // some lines\n+        or(Ok(ext_str.some_field));\n \n     // neither bind_instead_of_map nor unnecessary_lazy_eval applies here\n     let _: Result<usize, usize> = res.and_then(|x| Err(x));"}, {"sha": "206080ed69ada8dd7735ed9b6551cd7b12dc672b", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=9fd3c2d7886a61a10c37f922f6e866e221565add", "patch": "@@ -115,6 +115,14 @@ fn main() {\n     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n+    let _: Result<usize, usize> = res.\n+        // some lines\n+        // some lines\n+        // some lines\n+        // some lines\n+        // some lines\n+        // some lines\n+        or_else(|_| Ok(ext_str.some_field));\n \n     // neither bind_instead_of_map nor unnecessary_lazy_eval applies here\n     let _: Result<usize, usize> = res.and_then(|x| Err(x));"}, {"sha": "7e4dd7730e71530b79aa78b6f41937a13c90b143", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 112, "deletions": 33, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=9fd3c2d7886a61a10c37f922f6e866e221565add", "patch": "@@ -2,195 +2,274 @@ error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:35:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `opt.unwrap_or(2)`\n+   |             ^^^^--------------------\n+   |                 |\n+   |                 help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n    |\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:36:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `opt.unwrap_or(astronomers_pi)`\n+   |             ^^^^---------------------------------\n+   |                 |\n+   |                 help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:37:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `opt.unwrap_or(ext_str.some_field)`\n+   |             ^^^^-------------------------------------\n+   |                 |\n+   |                 help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:39:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `opt.and(ext_opt)`\n+   |             ^^^^---------------------\n+   |                 |\n+   |                 help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:40:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `opt.or(ext_opt)`\n+   |             ^^^^-------------------\n+   |                 |\n+   |                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:41:13\n    |\n LL |     let _ = opt.or_else(|| None);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `opt.or(None)`\n+   |             ^^^^----------------\n+   |                 |\n+   |                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:42:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `get_or_insert` instead: `opt.get_or_insert(2)`\n+   |             ^^^^------------------------\n+   |                 |\n+   |                 help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:43:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: use `ok_or` instead: `opt.ok_or(2)`\n+   |             ^^^^----------------\n+   |                 |\n+   |                 help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:44:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `nested_tuple_opt.unwrap_or(Some((1, 2)))`\n+   |             ^^^^^^^^^^^^^^^^^-------------------------------\n+   |                              |\n+   |                              help: use `unwrap_or(..)` instead: `unwrap_or(Some((1, 2)))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:47:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Some(10).unwrap_or(2)`\n+   |             ^^^^^^^^^--------------------\n+   |                      |\n+   |                      help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:48:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `Some(10).and(ext_opt)`\n+   |             ^^^^^^^^^---------------------\n+   |                      |\n+   |                      help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:49:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `None.or(ext_opt)`\n+   |                            ^^^^^-------------------\n+   |                                 |\n+   |                                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:50:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `get_or_insert` instead: `None.get_or_insert(2)`\n+   |             ^^^^^------------------------\n+   |                  |\n+   |                  help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:51:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^ help: use `ok_or` instead: `None.ok_or(2)`\n+   |                                   ^^^^^----------------\n+   |                                        |\n+   |                                        help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:52:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n-   |                            ^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `None.or(None)`\n+   |                            ^^^^^----------------\n+   |                                 |\n+   |                                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:55:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `deep.0.unwrap_or(2)`\n+   |             ^^^^^^^--------------------\n+   |                    |\n+   |                    help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:56:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `deep.0.and(ext_opt)`\n+   |             ^^^^^^^---------------------\n+   |                    |\n+   |                    help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `deep.0.or(None)`\n+   |             ^^^^^^^----------------\n+   |                    |\n+   |                    help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `get_or_insert` instead: `deep.0.get_or_insert(2)`\n+   |             ^^^^^^^------------------------\n+   |                    |\n+   |                    help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:59:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `ok_or` instead: `deep.0.ok_or(2)`\n+   |             ^^^^^^^----------------\n+   |                    |\n+   |                    help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:79:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `None.or(Some(3))`\n+   |                            ^^^^^-------------------\n+   |                                 |\n+   |                                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:80:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `deep.0.or(Some(3))`\n+   |             ^^^^^^^-------------------\n+   |                    |\n+   |                    help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:81:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `opt.or(Some(3))`\n+   |             ^^^^-------------------\n+   |                 |\n+   |                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:87:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `res2.unwrap_or(2)`\n+   |             ^^^^^---------------------\n+   |                  |\n+   |                  help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:88:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `res2.unwrap_or(astronomers_pi)`\n+   |             ^^^^^----------------------------------\n+   |                  |\n+   |                  help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:89:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `res2.unwrap_or(ext_str.some_field)`\n+   |             ^^^^^--------------------------------------\n+   |                  |\n+   |                  help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:111:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `res.and(Err(2))`\n+   |                                   ^^^^--------------------\n+   |                                       |\n+   |                                       help: use `and(..)` instead: `and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:112:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `res.and(Err(astronomers_pi))`\n+   |                                   ^^^^---------------------------------\n+   |                                       |\n+   |                                       help: use `and(..)` instead: `and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:113:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `and` instead: `res.and(Err(ext_str.some_field))`\n+   |                                   ^^^^-------------------------------------\n+   |                                       |\n+   |                                       help: use `and(..)` instead: `and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:115:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `res.or(Ok(2))`\n+   |                                   ^^^^------------------\n+   |                                       |\n+   |                                       help: use `or(..)` instead: `or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:116:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `res.or(Ok(astronomers_pi))`\n+   |                                   ^^^^-------------------------------\n+   |                                       |\n+   |                                       help: use `or(..)` instead: `or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval.rs:117:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `or` instead: `res.or(Ok(ext_str.some_field))`\n+   |                                   ^^^^-----------------------------------\n+   |                                       |\n+   |                                       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n-error: aborting due to 32 previous errors\n+error: unnecessary closure used to substitute value for `Result::Err`\n+  --> $DIR/unnecessary_lazy_eval.rs:118:35\n+   |\n+LL |       let _: Result<usize, usize> = res.\n+   |  ___________________________________^\n+LL | |         // some lines\n+LL | |         // some lines\n+LL | |         // some lines\n+...  |\n+LL | |         // some lines\n+LL | |         or_else(|_| Ok(ext_str.some_field));\n+   | |_________----------------------------------^\n+   |           |\n+   |           help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n+\n+error: aborting due to 33 previous errors\n "}, {"sha": "20acab6e844f86bb3b885956f9cecbd3d181d15e", "filename": "tests/ui/unnecessary_lazy_eval_unfixable.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9fd3c2d7886a61a10c37f922f6e866e221565add/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval_unfixable.stderr?ref=9fd3c2d7886a61a10c37f922f6e866e221565add", "patch": "@@ -2,21 +2,27 @@ error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval_unfixable.rs:12:13\n    |\n LL |     let _ = Ok(1).unwrap_or_else(|()| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+   |             ^^^^^^----------------------\n+   |                   |\n+   |                   help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n    |\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval_unfixable.rs:16:13\n    |\n LL |     let _ = Ok(1).unwrap_or_else(|e::E| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+   |             ^^^^^^------------------------\n+   |                   |\n+   |                   help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n   --> $DIR/unnecessary_lazy_eval_unfixable.rs:17:13\n    |\n LL |     let _ = Ok(1).unwrap_or_else(|SomeStruct { .. }| 2);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `unwrap_or` instead: `Ok(1).unwrap_or(2)`\n+   |             ^^^^^^-------------------------------------\n+   |                   |\n+   |                   help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: aborting due to 3 previous errors\n "}]}