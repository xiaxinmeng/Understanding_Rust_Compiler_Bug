{"sha": "c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YjNhNzE5ZWQ4NWFlNDhlODEzZWUwN2NiOWU3YjU2YzZhNzYzZDk=", "commit": {"author": {"name": "Yukio Tanaka", "email": "news7vip@gmail.com", "date": "2021-03-16T10:46:40Z"}, "committer": {"name": "Yukio Tanaka", "email": "news7vip@gmail.com", "date": "2021-03-16T10:46:40Z"}, "message": "Fix FP of `manual_unwrap_or` in const fn", "tree": {"sha": "785387cb87e98ccdb49df1034f1b3b38dcb8598f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785387cb87e98ccdb49df1034f1b3b38dcb8598f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQQrONMOdGa87BByzY1eFte2xnTc5gUCYFCMkAAKCRBeFte2xnTc\n5vO1AP0aLFtS+Veo9JPSKPr2v+Mg62LXC8O5z84GzC14RwwvTAD7BfmtsRFyIeYH\nDVK9vdHr+FfeP0ZrOYuMewfikcqgyA0=\n=xs2a\n-----END PGP SIGNATURE-----", "payload": "tree 785387cb87e98ccdb49df1034f1b3b38dcb8598f\nparent 1a206fc4abae0b57a3f393481367cf3efca23586\nauthor Yukio Tanaka <news7vip@gmail.com> 1615891600 +0900\ncommitter Yukio Tanaka <news7vip@gmail.com> 1615891600 +0900\n\nFix FP of `manual_unwrap_or` in const fn\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9", "html_url": "https://github.com/rust-lang/rust/commit/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9/comments", "author": {"login": "MysteryJump", "id": 7474910, "node_id": "MDQ6VXNlcjc0NzQ5MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7474910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MysteryJump", "html_url": "https://github.com/MysteryJump", "followers_url": "https://api.github.com/users/MysteryJump/followers", "following_url": "https://api.github.com/users/MysteryJump/following{/other_user}", "gists_url": "https://api.github.com/users/MysteryJump/gists{/gist_id}", "starred_url": "https://api.github.com/users/MysteryJump/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MysteryJump/subscriptions", "organizations_url": "https://api.github.com/users/MysteryJump/orgs", "repos_url": "https://api.github.com/users/MysteryJump/repos", "events_url": "https://api.github.com/users/MysteryJump/events{/privacy}", "received_events_url": "https://api.github.com/users/MysteryJump/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MysteryJump", "id": 7474910, "node_id": "MDQ6VXNlcjc0NzQ5MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7474910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MysteryJump", "html_url": "https://github.com/MysteryJump", "followers_url": "https://api.github.com/users/MysteryJump/followers", "following_url": "https://api.github.com/users/MysteryJump/following{/other_user}", "gists_url": "https://api.github.com/users/MysteryJump/gists{/gist_id}", "starred_url": "https://api.github.com/users/MysteryJump/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MysteryJump/subscriptions", "organizations_url": "https://api.github.com/users/MysteryJump/orgs", "repos_url": "https://api.github.com/users/MysteryJump/repos", "events_url": "https://api.github.com/users/MysteryJump/events{/privacy}", "received_events_url": "https://api.github.com/users/MysteryJump/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a206fc4abae0b57a3f393481367cf3efca23586", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a206fc4abae0b57a3f393481367cf3efca23586", "html_url": "https://github.com/rust-lang/rust/commit/1a206fc4abae0b57a3f393481367cf3efca23586"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "203f018a9e26bb08d43aef30fc1ea621bf3d2418", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9", "patch": "@@ -6,12 +6,12 @@ use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, Pat, PatKind};\n+use rustc_hir::{hir_id::HirId, intravisit::FnKind, Arm, Body, Expr, ExprKind, FnDecl, Pat, PatKind, StmtKind};\n use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n+use rustc_span::{source_map::Span, sym};\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -44,11 +44,34 @@ declare_clippy_lint! {\n declare_lint_pass!(ManualUnwrapOr => [MANUAL_UNWRAP_OR]);\n \n impl LateLintPass<'_> for ManualUnwrapOr {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        kind: FnKind<'tcx>,\n+        _: &'tcx FnDecl<'tcx>,\n+        body: &'tcx Body<'tcx>,\n+        span: Span,\n+        _: HirId,\n+    ) {\n+        if in_external_macro(cx.sess(), span) {\n             return;\n         }\n-        lint_manual_unwrap_or(cx, expr);\n+        if_chain! {\n+            if let FnKind::ItemFn(_, _, header, _) = kind;\n+            if !header.is_const();\n+            let expr = &body.value;\n+            if let ExprKind::Block(block, _) = expr.kind;\n+            then {\n+                for stmt in block.stmts {\n+                    if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = &stmt.kind {\n+                        lint_manual_unwrap_or(cx, expr);\n+                    }\n+                }\n+                if let Some(expr) = block.expr {\n+                    lint_manual_unwrap_or(cx, expr);\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "2f57957f55bf61b4dda8c6ba47033592c2084ebb", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9", "patch": "@@ -136,4 +136,19 @@ fn result_unwrap_or() {\n     };\n }\n \n+// don't lint in const fn\n+const fn const_fn_unwrap_or() {\n+    match Some(1) {\n+        Some(s) => s,\n+        None => 0,\n+    };\n+}\n+\n+const fn const_fn_unwrap() {\n+    match Ok::<&str, &str>(\"Alice\") {\n+        Ok(s) => s,\n+        Err(_) => \"Bob\",\n+    };\n+}\n+\n fn main() {}"}, {"sha": "1088047da75b872b05ea9deaddf15f7b969cd850", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=c5b3a719ed85ae48e813ee07cb9e7b56c6a763d9", "patch": "@@ -175,4 +175,19 @@ fn result_unwrap_or() {\n     };\n }\n \n+// don't lint in const fn\n+const fn const_fn_unwrap_or() {\n+    match Some(1) {\n+        Some(s) => s,\n+        None => 0,\n+    };\n+}\n+\n+const fn const_fn_unwrap() {\n+    match Ok::<&str, &str>(\"Alice\") {\n+        Ok(s) => s,\n+        Err(_) => \"Bob\",\n+    };\n+}\n+\n fn main() {}"}]}