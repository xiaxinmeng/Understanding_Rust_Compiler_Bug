{"sha": "b0db13956f4f106c4bf5a9210c7df439b34506a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZGIxMzk1NmY0ZjEwNmM0YmY1YTkyMTBjN2RmNDM5YjM0NTA2YTQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-26T07:57:14Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-26T07:59:41Z"}, "message": "Revert \"Use typestate constraints for trans_be\"\n\nThis reverts commit 1b60bba141c54f374d3378aa229c756d4a8f7f3d.\n(Need a snapshot first)", "tree": {"sha": "e130bec88faad321a847c33b0e343b0b92612a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e130bec88faad321a847c33b0e343b0b92612a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0db13956f4f106c4bf5a9210c7df439b34506a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0db13956f4f106c4bf5a9210c7df439b34506a4", "html_url": "https://github.com/rust-lang/rust/commit/b0db13956f4f106c4bf5a9210c7df439b34506a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0db13956f4f106c4bf5a9210c7df439b34506a4/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b60bba141c54f374d3378aa229c756d4a8f7f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b60bba141c54f374d3378aa229c756d4a8f7f3d", "html_url": "https://github.com/rust-lang/rust/commit/1b60bba141c54f374d3378aa229c756d4a8f7f3d"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "bae944659d90ced45652e0ffde5b2a1df1f053e9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b0db13956f4f106c4bf5a9210c7df439b34506a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0db13956f4f106c4bf5a9210c7df439b34506a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b0db13956f4f106c4bf5a9210c7df439b34506a4", "patch": "@@ -4450,14 +4450,7 @@ fn trans_expr_out(cx: &@block_ctxt, e: &@ast::expr, output: out_method) ->\n       ast::expr_cont. { ret trans_cont(e.span, cx); }\n       ast::expr_ret(ex) { ret trans_ret(cx, ex); }\n       ast::expr_put(ex) { ret trans_put(cx, ex); }\n-      ast::expr_be(ex) {\n-        // Ideally, the expr_be tag would have a precondition\n-        // that is_call_expr(ex) -- but we don't support that\n-        // yet\n-        // FIXME\n-        check ast_util::is_call_expr(ex);\n-        ret trans_be(cx, ex);\n-      }\n+      ast::expr_be(ex) { ret trans_be(cx, ex); }\n       ast::expr_anon_obj(anon_obj) {\n         ret trans_anon_obj(cx, e.span, anon_obj, e.id);\n       }\n@@ -4783,10 +4776,10 @@ fn trans_ret(cx: &@block_ctxt, e: &option::t<@ast::expr>) -> result {\n \n fn build_return(bcx: &@block_ctxt) { bld::Br(bcx, bcx_fcx(bcx).llreturn); }\n \n-// fn trans_be(cx: &@block_ctxt, e: &@ast::expr) -> result {\n-fn trans_be(cx: &@block_ctxt, e: &@ast::expr)\n-    : ast_util::is_call_expr(e) -> result {\n+fn trans_be(cx: &@block_ctxt, e: &@ast::expr) -> result {\n+    // FIXME: This should be a typestate precondition\n \n+    assert (ast_util::is_call_expr(e));\n     // FIXME: Turn this into a real tail call once\n     // calling convention issues are settled\n "}, {"sha": "517e252dd9cca460753552baaf66ba3fa8be6522", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0db13956f4f106c4bf5a9210c7df439b34506a4/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0db13956f4f106c4bf5a9210c7df439b34506a4/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=b0db13956f4f106c4bf5a9210c7df439b34506a4", "patch": "@@ -167,8 +167,8 @@ fn is_exported(i: ident, m: _mod) -> bool {\n     ret count == 0u && !nonlocal;\n }\n \n-pure fn is_call_expr(e: @expr) -> bool {\n-    alt e.node { expr_call(_, _) { true } _ { false } }\n+fn is_call_expr(e: @expr) -> bool {\n+    alt e.node { expr_call(_, _) { ret true; } _ { ret false; } }\n }\n \n fn is_constraint_arg(e: @expr) -> bool {"}]}