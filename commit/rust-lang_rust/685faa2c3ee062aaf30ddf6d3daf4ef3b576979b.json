{"sha": "685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NWZhYTJjM2VlMDYyYWFmMzBkZGY2ZDNkYWY0ZWYzYjU3Njk3OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-06T08:14:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-06T08:14:11Z"}, "message": "Auto merge of #50844 - bjorn3:adhoc_compiller_calls, r=nrc\n\nAdd AdHocCalls and pass self to build_controller as Box<Self>\n\nThis makes it easier to write custom drivers.", "tree": {"sha": "67c13bc60bb3a8c67ef195c5394bd5ba8f34913d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c13bc60bb3a8c67ef195c5394bd5ba8f34913d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "html_url": "https://github.com/rust-lang/rust/commit/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a9c58c6bd0e609538053a35685e206f66019820", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9c58c6bd0e609538053a35685e206f66019820", "html_url": "https://github.com/rust-lang/rust/commit/4a9c58c6bd0e609538053a35685e206f66019820"}, {"sha": "cc5c1a0abb1a4e25c8a40126991acce4c34508c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5c1a0abb1a4e25c8a40126991acce4c34508c4", "html_url": "https://github.com/rust-lang/rust/commit/cc5c1a0abb1a4e25c8a40126991acce4c34508c4"}], "stats": {"total": 144, "additions": 110, "deletions": 34}, "files": [{"sha": "8dcbda917b2430fb04c0a40ce8d3053d4f408221", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "patch": "@@ -414,6 +414,75 @@ impl<'a> CompileController<'a> {\n     }\n }\n \n+/// This implementation makes it easier to create a custom driver when you only want to hook\n+/// into callbacks from `CompileController`.\n+///\n+/// # Example\n+///\n+/// ```no_run\n+/// # extern crate rustc_driver;\n+/// # use rustc_driver::driver::CompileController;\n+/// let mut controller = CompileController::basic();\n+/// controller.after_analysis.callback = Box::new(move |_state| {});\n+/// rustc_driver::run_compiler(&[], Box::new(controller), None, None);\n+/// ```\n+impl<'a> ::CompilerCalls<'a> for CompileController<'a> {\n+    fn early_callback(\n+        &mut self,\n+        matches: &::getopts::Matches,\n+        sopts: &config::Options,\n+        cfg: &ast::CrateConfig,\n+        descriptions: &::errors::registry::Registry,\n+        output: ::ErrorOutputType,\n+    ) -> Compilation {\n+        ::RustcDefaultCalls.early_callback(\n+            matches,\n+            sopts,\n+            cfg,\n+            descriptions,\n+            output,\n+        )\n+    }\n+    fn no_input(\n+        &mut self,\n+        matches: &::getopts::Matches,\n+        sopts: &config::Options,\n+        cfg: &ast::CrateConfig,\n+        odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>,\n+        descriptions: &::errors::registry::Registry,\n+    ) -> Option<(Input, Option<PathBuf>)> {\n+        ::RustcDefaultCalls.no_input(\n+            matches,\n+            sopts,\n+            cfg,\n+            odir,\n+            ofile,\n+            descriptions,\n+        )\n+    }\n+    fn late_callback(\n+        &mut self,\n+        codegen_backend: &::CodegenBackend,\n+        matches: &::getopts::Matches,\n+        sess: &Session,\n+        cstore: &::CrateStore,\n+        input: &Input,\n+        odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>,\n+    ) -> Compilation {\n+        ::RustcDefaultCalls\n+            .late_callback(codegen_backend, matches, sess, cstore, input, odir, ofile)\n+    }\n+    fn build_controller(\n+        self: Box<Self>,\n+        _: &Session,\n+        _: &::getopts::Matches\n+    ) -> CompileController<'a> {\n+        *self\n+    }\n+}\n+\n pub struct PhaseController<'a> {\n     pub stop: Compilation,\n     // If true then the compiler will try to run the callback even if the phase"}, {"sha": "67fd5da8c92d9e69e5154cd9d28061ee84075b3f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "patch": "@@ -454,7 +454,7 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<CodegenBackend> {\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n pub fn run_compiler<'a>(args: &[String],\n-                        callbacks: &mut (CompilerCalls<'a> + sync::Send),\n+                        callbacks: Box<CompilerCalls<'a> + sync::Send + 'a>,\n                         file_loader: Option<Box<FileLoader + Send + Sync + 'static>>,\n                         emitter_dest: Option<Box<Write + Send>>)\n                         -> (CompileResult, Option<Session>)\n@@ -478,7 +478,7 @@ fn run_compiler_with_pool<'a>(\n     matches: getopts::Matches,\n     sopts: config::Options,\n     cfg: ast::CrateConfig,\n-    callbacks: &mut (CompilerCalls<'a> + sync::Send),\n+    mut callbacks: Box<CompilerCalls<'a> + sync::Send + 'a>,\n     file_loader: Option<Box<FileLoader + Send + Sync + 'static>>,\n     emitter_dest: Option<Box<Write + Send>>\n ) -> (CompileResult, Option<Session>) {\n@@ -642,12 +642,12 @@ impl Compilation {\n     }\n }\n \n-// A trait for customising the compilation process. Offers a number of hooks for\n-// executing custom code or customising input.\n+/// A trait for customising the compilation process. Offers a number of hooks for\n+/// executing custom code or customising input.\n pub trait CompilerCalls<'a> {\n-    // Hook for a callback early in the process of handling arguments. This will\n-    // be called straight after options have been parsed but before anything\n-    // else (e.g., selecting input and output).\n+    /// Hook for a callback early in the process of handling arguments. This will\n+    /// be called straight after options have been parsed but before anything\n+    /// else (e.g., selecting input and output).\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n@@ -658,9 +658,9 @@ pub trait CompilerCalls<'a> {\n         Compilation::Continue\n     }\n \n-    // Hook for a callback late in the process of handling arguments. This will\n-    // be called just before actual compilation starts (and before build_controller\n-    // is called), after all arguments etc. have been completely handled.\n+    /// Hook for a callback late in the process of handling arguments. This will\n+    /// be called just before actual compilation starts (and before build_controller\n+    /// is called), after all arguments etc. have been completely handled.\n     fn late_callback(&mut self,\n                      _: &CodegenBackend,\n                      _: &getopts::Matches,\n@@ -673,21 +673,21 @@ pub trait CompilerCalls<'a> {\n         Compilation::Continue\n     }\n \n-    // Called after we extract the input from the arguments. Gives the implementer\n-    // an opportunity to change the inputs or to add some custom input handling.\n-    // The default behaviour is to simply pass through the inputs.\n+    /// Called after we extract the input from the arguments. Gives the implementer\n+    /// an opportunity to change the inputs or to add some custom input handling.\n+    /// The default behaviour is to simply pass through the inputs.\n     fn some_input(&mut self,\n                   input: Input,\n                   input_path: Option<PathBuf>)\n                   -> (Input, Option<PathBuf>) {\n         (input, input_path)\n     }\n \n-    // Called after we extract the input from the arguments if there is no valid\n-    // input. Gives the implementer an opportunity to supply alternate input (by\n-    // returning a Some value) or to add custom behaviour for this error such as\n-    // emitting error messages. Returning None will cause compilation to stop\n-    // at this point.\n+    /// Called after we extract the input from the arguments if there is no valid\n+    /// input. Gives the implementer an opportunity to supply alternate input (by\n+    /// returning a Some value) or to add custom behaviour for this error such as\n+    /// emitting error messages. Returning None will cause compilation to stop\n+    /// at this point.\n     fn no_input(&mut self,\n                 _: &getopts::Matches,\n                 _: &config::Options,\n@@ -701,10 +701,14 @@ pub trait CompilerCalls<'a> {\n \n     // Create a CompilController struct for controlling the behaviour of\n     // compilation.\n-    fn build_controller(&mut self, _: &Session, _: &getopts::Matches) -> CompileController<'a>;\n+    fn build_controller(\n+        self: Box<Self>,\n+        _: &Session,\n+        _: &getopts::Matches\n+    ) -> CompileController<'a>;\n }\n \n-// CompilerCalls instance for a regular rustc build.\n+/// CompilerCalls instance for a regular rustc build.\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n@@ -878,7 +882,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             .and_then(|| RustcDefaultCalls::list_metadata(sess, cstore, matches, input))\n     }\n \n-    fn build_controller(&mut self,\n+    fn build_controller(self: Box<Self>,\n                         sess: &Session,\n                         matches: &getopts::Matches)\n                         -> CompileController<'a> {\n@@ -1693,7 +1697,7 @@ pub fn main() {\n             }))\n             .collect::<Vec<_>>();\n         run_compiler(&args,\n-                     &mut RustcDefaultCalls,\n+                     Box::new(RustcDefaultCalls),\n                      None,\n                      None)\n     });"}, {"sha": "b3a6fb4d590ae279925001b94b39f85eaacdc8bd", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685faa2c3ee062aaf30ddf6d3daf4ef3b576979b/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=685faa2c3ee062aaf30ddf6d3daf4ef3b576979b", "patch": "@@ -31,19 +31,19 @@ use syntax::ast;\n \n use std::path::PathBuf;\n \n-struct TestCalls {\n-    count: u32\n+struct TestCalls<'a> {\n+    count: &'a mut u32\n }\n \n-impl<'a> CompilerCalls<'a> for TestCalls {\n+impl<'a> CompilerCalls<'a> for TestCalls<'a> {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &config::Options,\n                       _: &ast::CrateConfig,\n                       _: &errors::registry::Registry,\n                       _: config::ErrorOutputType)\n                       -> Compilation {\n-        self.count *= 2;\n+        *self.count *= 2;\n         Compilation::Continue\n     }\n \n@@ -56,13 +56,13 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)\n                      -> Compilation {\n-        self.count *= 3;\n+        *self.count *= 3;\n         Compilation::Stop\n     }\n \n     fn some_input(&mut self, input: Input, input_path: Option<PathBuf>)\n                   -> (Input, Option<PathBuf>) {\n-        self.count *= 5;\n+        *self.count *= 5;\n         (input, input_path)\n     }\n \n@@ -77,7 +77,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n         panic!(\"This shouldn't happen\");\n     }\n \n-    fn build_controller(&mut self,\n+    fn build_controller(self: Box<Self>,\n                         _: &Session,\n                         _: &getopts::Matches)\n                         -> driver::CompileController<'a> {\n@@ -87,9 +87,12 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n \n \n fn main() {\n-    let mut tc = TestCalls { count: 1 };\n-    // we should never get use this filename, but lets make sure they are valid args.\n-    let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-    rustc_driver::run_compiler(&args, &mut tc, None, None);\n-    assert_eq!(tc.count, 30);\n+    let mut count = 1;\n+    {\n+        let tc = TestCalls { count: &mut count };\n+        // we should never get use this filename, but lets make sure they are valid args.\n+        let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n+        rustc_driver::run_compiler(&args, Box::new(tc), None, None);\n+    }\n+    assert_eq!(count, 30);\n }"}]}