{"sha": "74a6d1c821a37a407d2b2bc701d62d0b460b9215", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YTZkMWM4MjFhMzdhNDA3ZDJiMmJjNzAxZDYyZDBiNDYwYjkyMTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-08T08:36:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-08T20:55:25Z"}, "message": "Turn `#[allocator]` into a built-in attribute and rename it to `#[rustc_allocator]`", "tree": {"sha": "0fb11c32bcc088719f9a54eeff4315d61507d505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb11c32bcc088719f9a54eeff4315d61507d505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74a6d1c821a37a407d2b2bc701d62d0b460b9215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74a6d1c821a37a407d2b2bc701d62d0b460b9215", "html_url": "https://github.com/rust-lang/rust/commit/74a6d1c821a37a407d2b2bc701d62d0b460b9215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74a6d1c821a37a407d2b2bc701d62d0b460b9215/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8049e6199bad86d3148c94463216cc745db2d796", "url": "https://api.github.com/repos/rust-lang/rust/commits/8049e6199bad86d3148c94463216cc745db2d796", "html_url": "https://github.com/rust-lang/rust/commit/8049e6199bad86d3148c94463216cc745db2d796"}], "stats": {"total": 78, "additions": 13, "deletions": 65}, "files": [{"sha": "755feb849620357dda2d109220b5b5bf2e7536ff", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=74a6d1c821a37a407d2b2bc701d62d0b460b9215", "patch": "@@ -15,7 +15,8 @@ extern \"Rust\" {\n     // them from the `#[global_allocator]` attribute if there is one, or uses the\n     // default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n     // otherwise.\n-    #[allocator]\n+    #[cfg_attr(bootstrap, allocator)]\n+    #[cfg_attr(not(bootstrap), rustc_allocator)]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n     #[rustc_allocator_nounwind]"}, {"sha": "c530ac24275c2bb5f85b7431a28f43d009805bd3", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=74a6d1c821a37a407d2b2bc701d62d0b460b9215", "patch": "@@ -79,7 +79,7 @@\n #![feature(coerce_unsized)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n-#![feature(custom_attribute)]\n+#![cfg_attr(bootstrap, feature(custom_attribute))]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]"}, {"sha": "27ee664aa5f580ed7dc178c040caf80419fd11cf", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=74a6d1c821a37a407d2b2bc701d62d0b460b9215", "patch": "@@ -2574,7 +2574,7 @@ bitflags! {\n         /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n         /// the hot path.\n         const COLD                      = 1 << 0;\n-        /// `#[allocator]`: a hint to LLVM that the pointer returned from this\n+        /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n         /// function is never null.\n         const ALLOCATOR                 = 1 << 1;\n         /// `#[unwind]`: an indicator that this function may unwind despite what"}, {"sha": "f738f90b31eb6320a47357939ef8bcbfe82edf19", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=74a6d1c821a37a407d2b2bc701d62d0b460b9215", "patch": "@@ -2445,7 +2445,7 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n     for attr in attrs.iter() {\n         if attr.check_name(sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n-        } else if attr.check_name(sym::allocator) {\n+        } else if attr.check_name(sym::rustc_allocator) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n         } else if attr.check_name(sym::unwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::UNWIND;"}, {"sha": "ac4a7271221bb982752fe9824b2503ede447bd45", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=74a6d1c821a37a407d2b2bc701d62d0b460b9215", "patch": "@@ -1331,6 +1331,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),\n \n+    (sym::rustc_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                sym::rustc_attrs,\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\n         sym::doc,"}, {"sha": "224b85a11f91cc4d07e1177b4371e77204e91433", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=74a6d1c821a37a407d2b2bc701d62d0b460b9215", "patch": "@@ -513,6 +513,7 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n+        rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_ptr,\n         rustc_args_required_const,"}, {"sha": "bd121ef24adae1db555cffc70af3c327d564c2b0", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6d1c821a37a407d2b2bc701d62d0b460b9215/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=74a6d1c821a37a407d2b2bc701d62d0b460b9215", "patch": "@@ -2,7 +2,7 @@\n // ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n pub struct S {\n   _field: [i32; 8],\n@@ -146,7 +146,7 @@ pub fn enum_id_2(x: Option<u8>) -> Option<u8> {\n \n // CHECK: noalias i8* @allocator()\n #[no_mangle]\n-#[allocator]\n+#[rustc_allocator]\n pub fn allocator() -> *const i8 {\n   std::ptr::null()\n }"}, {"sha": "bedf3020c8be0fd8363f1f7d1bd47f9e78a80093", "filename": "src/test/run-pass/auxiliary/allocator-dummy.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8049e6199bad86d3148c94463216cc745db2d796/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8049e6199bad86d3148c94463216cc745db2d796/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs?ref=8049e6199bad86d3148c94463216cc745db2d796", "patch": "@@ -1,59 +0,0 @@\n-// no-prefer-dynamic\n-\n-#![feature(allocator, core_intrinsics, panic_unwind)]\n-#![allocator]\n-#![crate_type = \"rlib\"]\n-#![no_std]\n-\n-extern crate unwind;\n-\n-pub static mut HITS: usize = 0;\n-\n-type size_t = usize;\n-\n-extern {\n-    fn malloc(size: usize) -> *mut u8;\n-    fn free(ptr: *mut u8);\n-    fn calloc(size: usize, amt: usize) -> *mut u8;\n-    fn realloc(ptr: *mut u8, size: usize) -> *mut u8;\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n-    unsafe {\n-        HITS += 1;\n-        malloc(size as size_t) as *mut u8\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_allocate_zeroed(size: usize, _align: usize) -> *mut u8 {\n-    unsafe { calloc(size as size_t, 1) as *mut u8 }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n-    unsafe {\n-        HITS += 1;\n-        free(ptr as *mut _)\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate(ptr: *mut u8, old_size: usize, size: usize,\n-                                align: usize) -> *mut u8 {\n-    unsafe {\n-        realloc(ptr as *mut _, size as size_t) as *mut u8\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate_inplace(ptr: *mut u8, old_size: usize,\n-                                        size: usize, align: usize) -> usize {\n-    unsafe { core::intrinsics::abort() }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_usable_size(size: usize, align: usize) -> usize {\n-    unsafe { core::intrinsics::abort() }\n-}"}]}