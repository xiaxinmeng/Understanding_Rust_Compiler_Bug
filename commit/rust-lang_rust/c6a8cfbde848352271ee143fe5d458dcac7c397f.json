{"sha": "c6a8cfbde848352271ee143fe5d458dcac7c397f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YThjZmJkZTg0ODM1MjI3MWVlMTQzZmU1ZDQ1OGRjYWM3YzM5N2Y=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-16T20:39:01Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-19T15:08:43Z"}, "message": "BTreeMap: code readability tweaks", "tree": {"sha": "b49fdaeb9cdb43a5774230ef76100d27375dcb0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49fdaeb9cdb43a5774230ef76100d27375dcb0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a8cfbde848352271ee143fe5d458dcac7c397f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a8cfbde848352271ee143fe5d458dcac7c397f", "html_url": "https://github.com/rust-lang/rust/commit/c6a8cfbde848352271ee143fe5d458dcac7c397f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a8cfbde848352271ee143fe5d458dcac7c397f/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0925fba747b4cf910592540aa1f817778dc315c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0925fba747b4cf910592540aa1f817778dc315c", "html_url": "https://github.com/rust-lang/rust/commit/a0925fba747b4cf910592540aa1f817778dc315c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "469381e7235d235e4e299a2857d604b014ecddfe", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a8cfbde848352271ee143fe5d458dcac7c397f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a8cfbde848352271ee143fe5d458dcac7c397f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=c6a8cfbde848352271ee143fe5d458dcac7c397f", "patch": "@@ -1719,7 +1719,7 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     /// Allow Debug implementations to predict the next element.\n     pub(super) fn peek(&self) -> Option<(&K, &V)> {\n         let edge = self.cur_leaf_edge.as_ref()?;\n-        edge.reborrow().next_kv().ok().map(|kv| kv.into_kv())\n+        edge.reborrow().next_kv().ok().map(Handle::into_kv)\n     }\n \n     /// Implementation of a typical `DrainFilter::next` method, given the predicate."}, {"sha": "55ce7d275464e571197c674e71b29a135af60999", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a8cfbde848352271ee143fe5d458dcac7c397f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a8cfbde848352271ee143fe5d458dcac7c397f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=c6a8cfbde848352271ee143fe5d458dcac7c397f", "patch": "@@ -218,7 +218,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n         let mut edge = self.forget_node_type();\n         loop {\n             edge = match edge.right_kv() {\n-                Ok(internal_kv) => return Ok(internal_kv),\n+                Ok(kv) => return Ok(kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n                     Err(root) => return Err(root),\n@@ -239,7 +239,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n         let mut edge = self.forget_node_type();\n         loop {\n             edge = match edge.left_kv() {\n-                Ok(internal_kv) => return Ok(internal_kv),\n+                Ok(kv) => return Ok(kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n                     Err(root) => return Err(root),"}, {"sha": "5e01f7e1c72ecb917961501517bc69757c949486", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6a8cfbde848352271ee143fe5d458dcac7c397f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a8cfbde848352271ee143fe5d458dcac7c397f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=c6a8cfbde848352271ee143fe5d458dcac7c397f", "patch": "@@ -927,14 +927,14 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// The returned pointer points to the inserted value.\n     fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {\n         if self.node.len() < CAPACITY {\n-            let ptr = self.insert_fit(key, val);\n+            let val_ptr = self.insert_fit(key, val);\n             let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n-            (InsertResult::Fit(kv), ptr)\n+            (InsertResult::Fit(kv), val_ptr)\n         } else {\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n             let (mut left, k, v, mut right) = middle.split();\n-            let ptr = match insertion {\n+            let val_ptr = match insertion {\n                 InsertionPlace::Left(insert_idx) => unsafe {\n                     Handle::new_edge(left.reborrow_mut(), insert_idx).insert_fit(key, val)\n                 },\n@@ -946,7 +946,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                     .insert_fit(key, val)\n                 },\n             };\n-            (InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right }), ptr)\n+            (InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right }), val_ptr)\n         }\n     }\n }"}]}