{"sha": "f277b394af03284bea7fad45838f7dbc570cf634", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNzdiMzk0YWYwMzI4NGJlYTdmYWQ0NTgzOGY3ZGJjNTcwY2Y2MzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-23T19:10:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-25T03:38:21Z"}, "message": "generate extra liveness constraints before regioncx is created", "tree": {"sha": "516c4afc00465584f7e9284f48c42a9f143c25ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516c4afc00465584f7e9284f48c42a9f143c25ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f277b394af03284bea7fad45838f7dbc570cf634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f277b394af03284bea7fad45838f7dbc570cf634", "html_url": "https://github.com/rust-lang/rust/commit/f277b394af03284bea7fad45838f7dbc570cf634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f277b394af03284bea7fad45838f7dbc570cf634/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92786a48f8c56046df8adf3aea49617a22f88d9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92786a48f8c56046df8adf3aea49617a22f88d9e", "html_url": "https://github.com/rust-lang/rust/commit/92786a48f8c56046df8adf3aea49617a22f88d9e"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "3074782c8675053f686062982b5bb10cd20061c8", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f277b394af03284bea7fad45838f7dbc570cf634/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f277b394af03284bea7fad45838f7dbc570cf634/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=f277b394af03284bea7fad45838f7dbc570cf634", "patch": "@@ -12,19 +12,20 @@ use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::LocationTable;\n use borrow_check::nll::ToRegionVid;\n use borrow_check::nll::facts::AllFacts;\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n+use borrow_check::nll::region_infer::values::{RegionValueElements, RegionValues};\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, Rvalue};\n use rustc::mir::{Local, Statement, Terminator};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts};\n+use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts, RegionVid};\n \n pub(super) fn generate_constraints<'cx, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'gcx, 'tcx>,\n-    regioncx: &mut RegionInferenceContext<'tcx>,\n+    elements: &RegionValueElements,\n+    liveness_constraints: &mut RegionValues<RegionVid>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n     mir: &Mir<'tcx>,\n@@ -33,9 +34,10 @@ pub(super) fn generate_constraints<'cx, 'gcx, 'tcx>(\n     let mut cg = ConstraintGeneration {\n         borrow_set,\n         infcx,\n-        regioncx,\n+        liveness_constraints,\n         location_table,\n         all_facts,\n+        elements,\n     };\n \n     for (bb, data) in mir.basic_blocks().iter_enumerated() {\n@@ -48,8 +50,9 @@ struct ConstraintGeneration<'cg, 'cx: 'cg, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: &'cg InferCtxt<'cx, 'gcx, 'tcx>,\n     all_facts: &'cg mut Option<AllFacts>,\n     location_table: &'cg LocationTable,\n-    regioncx: &'cg mut RegionInferenceContext<'tcx>,\n+    liveness_constraints: &'cg mut RegionValues<RegionVid>,\n     borrow_set: &'cg BorrowSet<'tcx>,\n+    elements: &'cg RegionValueElements,\n }\n \n impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx, 'tcx> {\n@@ -202,7 +205,7 @@ impl<'cx, 'cg, 'gcx, 'tcx> ConstraintGeneration<'cx, 'cg, 'gcx, 'tcx> {\n             .tcx\n             .for_each_free_region(&live_ty, |live_region| {\n                 let vid = live_region.to_region_vid();\n-                self.regioncx.add_live_element(vid, location);\n+                self.liveness_constraints.add_element(&self.elements, vid, location);\n             });\n     }\n }"}, {"sha": "b9967c2be43d53a38af484c7cc7b507ccf523c4a", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f277b394af03284bea7fad45838f7dbc570cf634/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f277b394af03284bea7fad45838f7dbc570cf634/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=f277b394af03284bea7fad45838f7dbc570cf634", "patch": "@@ -136,10 +136,21 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // base constraints generated by the type-check.\n     let var_origins = infcx.take_region_var_origins();\n     let MirTypeckRegionConstraints {\n-        liveness_constraints,\n+        mut liveness_constraints,\n         outlives_constraints,\n         type_tests,\n     } = constraint_sets;\n+\n+    constraint_generation::generate_constraints(\n+        infcx,\n+        &elements,\n+        &mut liveness_constraints,\n+        &mut all_facts,\n+        location_table,\n+        &mir,\n+        borrow_set,\n+    );\n+\n     let mut regioncx = RegionInferenceContext::new(\n         var_origins,\n         universal_regions,\n@@ -151,14 +162,6 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     );\n \n     // Generate various additional constraints.\n-    constraint_generation::generate_constraints(\n-        infcx,\n-        &mut regioncx,\n-        &mut all_facts,\n-        location_table,\n-        &mir,\n-        borrow_set,\n-    );\n     invalidation::generate_invalidates(\n         infcx,\n         &mut all_facts,"}]}