{"sha": "09a24545a848f0d89bb6464c2af730095b816618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YTI0NTQ1YTg0OGYwZDg5YmI2NDY0YzJhZjczMDA5NWI4MTY2MTg=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2019-02-21T16:26:10Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2019-02-21T16:26:10Z"}, "message": "introduce benchmarks of BTreeSet.intersection", "tree": {"sha": "76da7b3e6d9800948a322a21ed3f1d971c9d5bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76da7b3e6d9800948a322a21ed3f1d971c9d5bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09a24545a848f0d89bb6464c2af730095b816618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09a24545a848f0d89bb6464c2af730095b816618", "html_url": "https://github.com/rust-lang/rust/commit/09a24545a848f0d89bb6464c2af730095b816618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09a24545a848f0d89bb6464c2af730095b816618/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e25a6829c66302dc06c351bb494774e3d075f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e25a6829c66302dc06c351bb494774e3d075f77", "html_url": "https://github.com/rust-lang/rust/commit/0e25a6829c66302dc06c351bb494774e3d075f77"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "095ca5dd2e21b4598ffff106e6576273494822be", "filename": "src/liballoc/benches/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09a24545a848f0d89bb6464c2af730095b816618/src%2Fliballoc%2Fbenches%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a24545a848f0d89bb6464c2af730095b816618/src%2Fliballoc%2Fbenches%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fmod.rs?ref=09a24545a848f0d89bb6464c2af730095b816618", "patch": "@@ -1 +1,2 @@\n mod map;\n+mod set;"}, {"sha": "08e1db5fbb74d01bf47784c61c0daf507355cfd7", "filename": "src/liballoc/benches/btree/set.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/09a24545a848f0d89bb6464c2af730095b816618/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a24545a848f0d89bb6464c2af730095b816618/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs?ref=09a24545a848f0d89bb6464c2af730095b816618", "patch": "@@ -0,0 +1,88 @@\n+use std::collections::BTreeSet;\n+\n+use rand::{thread_rng, Rng};\n+use test::{black_box, Bencher};\n+\n+fn random(n1: u32, n2: u32) -> [BTreeSet<usize>; 2] {\n+    let mut rng = thread_rng();\n+    let mut set1 = BTreeSet::new();\n+    let mut set2 = BTreeSet::new();\n+    for _ in 0..n1 {\n+        let i = rng.gen::<usize>();\n+        set1.insert(i);\n+    }\n+    for _ in 0..n2 {\n+        let i = rng.gen::<usize>();\n+        set2.insert(i);\n+    }\n+    [set1, set2]\n+}\n+\n+fn staggered(n1: u32, n2: u32) -> [BTreeSet<u32>; 2] {\n+    let mut even = BTreeSet::new();\n+    let mut odd = BTreeSet::new();\n+    for i in 0..n1 {\n+        even.insert(i * 2);\n+    }\n+    for i in 0..n2 {\n+        odd.insert(i * 2 + 1);\n+    }\n+    [even, odd]\n+}\n+\n+fn neg_vs_pos(n1: u32, n2: u32) -> [BTreeSet<i32>; 2] {\n+    let mut neg = BTreeSet::new();\n+    let mut pos = BTreeSet::new();\n+    for i in -(n1 as i32)..=-1 {\n+        neg.insert(i);\n+    }\n+    for i in 1..=(n2 as i32) {\n+        pos.insert(i);\n+    }\n+    [neg, pos]\n+}\n+\n+fn pos_vs_neg(n1: u32, n2: u32) -> [BTreeSet<i32>; 2] {\n+    let mut neg = BTreeSet::new();\n+    let mut pos = BTreeSet::new();\n+    for i in -(n1 as i32)..=-1 {\n+        neg.insert(i);\n+    }\n+    for i in 1..=(n2 as i32) {\n+        pos.insert(i);\n+    }\n+    [pos, neg]\n+}\n+\n+macro_rules! set_intersection_bench {\n+    ($name: ident, $sets: expr) => {\n+        #[bench]\n+        pub fn $name(b: &mut Bencher) {\n+            // setup\n+            let sets = $sets;\n+\n+            // measure\n+            b.iter(|| {\n+                let x = sets[0].intersection(&sets[1]).count();\n+                black_box(x);\n+            })\n+        }\n+    };\n+}\n+\n+set_intersection_bench! {intersect_random_100,          random(100, 100)}\n+set_intersection_bench! {intersect_random_10k,          random(10_000, 10_000)}\n+set_intersection_bench! {intersect_random_10_vs_10k,    random(10, 10_000)}\n+set_intersection_bench! {intersect_random_10k_vs_10,    random(10_000, 10)}\n+set_intersection_bench! {intersect_staggered_100,       staggered(100, 100)}\n+set_intersection_bench! {intersect_staggered_10k,       staggered(10_000, 10_000)}\n+set_intersection_bench! {intersect_staggered_10_vs_10k, staggered(10, 10_000)}\n+set_intersection_bench! {intersect_staggered_10k_vs_10, staggered(10_000, 10)}\n+set_intersection_bench! {intersect_neg_vs_pos_100,      neg_vs_pos(100, 100)}\n+set_intersection_bench! {intersect_neg_vs_pos_10k,      neg_vs_pos(10_000, 10_000)}\n+set_intersection_bench! {intersect_neg_vs_pos_10_vs_10k,neg_vs_pos(10, 10_000)}\n+set_intersection_bench! {intersect_neg_vs_pos_10k_vs_10,neg_vs_pos(10_000, 10)}\n+set_intersection_bench! {intersect_pos_vs_neg_100,      pos_vs_neg(100, 100)}\n+set_intersection_bench! {intersect_pos_vs_neg_10k,      pos_vs_neg(10_000, 10_000)}\n+set_intersection_bench! {intersect_pos_vs_neg_10_vs_10k,pos_vs_neg(10, 10_000)}\n+set_intersection_bench! {intersect_pos_vs_neg_10k_vs_10,pos_vs_neg(10_000, 10)}"}]}