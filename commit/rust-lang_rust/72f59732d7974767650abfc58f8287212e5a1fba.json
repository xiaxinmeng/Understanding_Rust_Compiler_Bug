{"sha": "72f59732d7974767650abfc58f8287212e5a1fba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZjU5NzMyZDc5NzQ3Njc2NTBhYmZjNThmODI4NzIxMmU1YTFmYmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T23:20:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T00:39:24Z"}, "message": "Test fixes and rebase conflicts, round 3", "tree": {"sha": "fbb20c45e460c82a79f86ded0fa59c0ada501c62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbb20c45e460c82a79f86ded0fa59c0ada501c62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f59732d7974767650abfc58f8287212e5a1fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f59732d7974767650abfc58f8287212e5a1fba", "html_url": "https://github.com/rust-lang/rust/commit/72f59732d7974767650abfc58f8287212e5a1fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f59732d7974767650abfc58f8287212e5a1fba/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681", "html_url": "https://github.com/rust-lang/rust/commit/50b3ecf3bcc2e39a7a42e7f4b49f19398d5cc681"}], "stats": {"total": 309, "additions": 156, "deletions": 153}, "files": [{"sha": "b92dfa9117e6beb5745f97c106a758ebfedef1fe", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -78,7 +78,6 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(core)]\n #![feature(unique)]\n-#![feature(convert)]\n #![cfg_attr(test, feature(test, alloc, rustc_private))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]"}, {"sha": "f8f2909291f3e0402fd70fb5e49972459657e06b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -12,10 +12,10 @@\n \n //! Unicode string manipulation (the `str` type).\n //!\n-//! Rust's `str` type is one of the core primitive types of the language. `&str` is the borrowed\n-//! string type. This type of string can only be created from other strings, unless it is a\n-//! `&'static str` (see below). It is not possible to move out of borrowed strings because they are\n-//! owned elsewhere.\n+//! Rust's `str` type is one of the core primitive types of the language. `&str`\n+//! is the borrowed string type. This type of string can only be created from\n+//! other strings, unless it is a `&'static str` (see below). It is not possible\n+//! to move out of borrowed strings because they are owned elsewhere.\n //!\n //! # Examples\n //!\n@@ -25,8 +25,9 @@\n //! let s = \"Hello, world.\";\n //! ```\n //!\n-//! This `&str` is a `&'static str`, which is the type of string literals. They're `'static`\n-//! because literals are available for the entire lifetime of the program.\n+//! This `&str` is a `&'static str`, which is the type of string literals.\n+//! They're `'static` because literals are available for the entire lifetime of\n+//! the program.\n //!\n //! You can get a non-`'static` `&str` by taking a slice of a `String`:\n //!\n@@ -37,12 +38,13 @@\n //!\n //! # Representation\n //!\n-//! Rust's string type, `str`, is a sequence of Unicode scalar values encoded as a stream of UTF-8\n-//! bytes. All [strings](../../reference.html#literals) are guaranteed to be validly encoded UTF-8\n-//! sequences. Additionally, strings are not null-terminated and can thus contain null bytes.\n+//! Rust's string type, `str`, is a sequence of Unicode scalar values encoded as\n+//! a stream of UTF-8 bytes. All [strings](../../reference.html#literals) are\n+//! guaranteed to be validly encoded UTF-8 sequences. Additionally, strings are\n+//! not null-terminated and can thus contain null bytes.\n //!\n-//! The actual representation of `str`s have direct mappings to slices: `&str` is the same as\n-//! `&[u8]`.\n+//! The actual representation of `str`s have direct mappings to slices: `&str`\n+//! is the same as `&[u8]`.\n \n #![doc(primitive = \"str\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2d69eeb9fa962cf7de006cff5b279612fc1ae1a1", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -41,10 +41,11 @@\n //! }\n //!\n //! // Rough translation of the iteration without a `for` iterator.\n+//! # let values = vec![1, 2, 3];\n //! let mut it = values.into_iter();\n //! loop {\n //!     match it.next() {\n-//!         Some(&x) => {\n+//!         Some(x) => {\n //!             println!(\"{}\", x);\n //!         }\n //!         None => { break }"}, {"sha": "3e91b98877062cc5f83a3288774f69c22527460e", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -123,7 +123,6 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![feature(io)]\n #![feature(core)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "161fae11ea6d42c1f254f80f5db9e700c447e72e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -73,7 +73,6 @@ use std::cmp;\n use std::fmt;\n use std::hash::{Hash, SipHasher, Hasher};\n use std::mem;\n-use std::num::ToPrimitive;\n use std::ops;\n use std::rc::Rc;\n use std::vec::IntoIter;"}, {"sha": "6fe35614a85b6da4e61be246ba0ab116cae70854", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -503,34 +503,34 @@ mod tests {\n \n         let mut buf = [0, 0, 0];\n         let nread = reader.read(&mut buf);\n-        assert_eq!(Ok(3), nread);\n+        assert_eq!(nread.unwrap(), 3);\n         let b: &[_] = &[5, 6, 7];\n         assert_eq!(buf, b);\n \n         let mut buf = [0, 0];\n         let nread = reader.read(&mut buf);\n-        assert_eq!(Ok(2), nread);\n+        assert_eq!(nread.unwrap(), 2);\n         let b: &[_] = &[0, 1];\n         assert_eq!(buf, b);\n \n         let mut buf = [0];\n         let nread = reader.read(&mut buf);\n-        assert_eq!(Ok(1), nread);\n+        assert_eq!(nread.unwrap(), 1);\n         let b: &[_] = &[2];\n         assert_eq!(buf, b);\n \n         let mut buf = [0, 0, 0];\n         let nread = reader.read(&mut buf);\n-        assert_eq!(Ok(1), nread);\n+        assert_eq!(nread.unwrap(), 1);\n         let b: &[_] = &[3, 0, 0];\n         assert_eq!(buf, b);\n \n         let nread = reader.read(&mut buf);\n-        assert_eq!(Ok(1), nread);\n+        assert_eq!(nread.unwrap(), 1);\n         let b: &[_] = &[4, 0, 0];\n         assert_eq!(buf, b);\n \n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n     #[test]\n@@ -592,7 +592,7 @@ mod tests {\n         }\n \n         let mut stream = BufStream::new(S);\n-        assert_eq!(stream.read(&mut [0; 10]), Ok(0));\n+        assert_eq!(stream.read(&mut [0; 10]).unwrap(), 0);\n         stream.write(&[0; 10]).unwrap();\n         stream.flush().unwrap();\n     }\n@@ -658,41 +658,41 @@ mod tests {\n         let in_buf: &[u8] = b\"a\\nb\\nc\";\n         let reader = BufReader::with_capacity(2, in_buf);\n         let mut it = reader.lines();\n-        assert_eq!(it.next(), Some(Ok(\"a\".to_string())));\n-        assert_eq!(it.next(), Some(Ok(\"b\".to_string())));\n-        assert_eq!(it.next(), Some(Ok(\"c\".to_string())));\n-        assert_eq!(it.next(), None);\n+        assert_eq!(it.next().unwrap().unwrap(), \"a\".to_string());\n+        assert_eq!(it.next().unwrap().unwrap(), \"b\".to_string());\n+        assert_eq!(it.next().unwrap().unwrap(), \"c\".to_string());\n+        assert!(it.next().is_none());\n     }\n \n     #[test]\n     fn test_short_reads() {\n         let inner = ShortReader{lengths: vec![0, 1, 2, 0, 1, 0]};\n         let mut reader = BufReader::new(inner);\n         let mut buf = [0, 0];\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n-        assert_eq!(reader.read(&mut buf), Ok(1));\n-        assert_eq!(reader.read(&mut buf), Ok(2));\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n-        assert_eq!(reader.read(&mut buf), Ok(1));\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 1);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 2);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 1);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n     #[test]\n     fn read_char_buffered() {\n         let buf = [195, 159];\n         let reader = BufReader::with_capacity(1, &buf[..]);\n-        assert_eq!(reader.chars().next(), Some(Ok('\u00df')));\n+        assert_eq!(reader.chars().next().unwrap().unwrap(), '\u00df');\n     }\n \n     #[test]\n     fn test_chars() {\n         let buf = [195, 159, b'a'];\n         let reader = BufReader::with_capacity(1, &buf[..]);\n         let mut it = reader.chars();\n-        assert_eq!(it.next(), Some(Ok('\u00df')));\n-        assert_eq!(it.next(), Some(Ok('a')));\n-        assert_eq!(it.next(), None);\n+        assert_eq!(it.next().unwrap().unwrap(), '\u00df');\n+        assert_eq!(it.next().unwrap().unwrap(), 'a');\n+        assert!(it.next().is_none());\n     }\n \n     #[test]"}, {"sha": "6433c29bb9d6e456d0701828cd576c58d2afe591", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -171,19 +171,19 @@ mod tests {\n     #[test]\n     fn test_vec_writer() {\n         let mut writer = Vec::new();\n-        assert_eq!(writer.write(&[0]), Ok(1));\n-        assert_eq!(writer.write(&[1, 2, 3]), Ok(3));\n-        assert_eq!(writer.write(&[4, 5, 6, 7]), Ok(4));\n+        assert_eq!(writer.write(&[0]).unwrap(), 1);\n+        assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n+        assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n         assert_eq!(writer, b);\n     }\n \n     #[test]\n     fn test_mem_writer() {\n         let mut writer = Cursor::new(Vec::new());\n-        assert_eq!(writer.write(&[0]), Ok(1));\n-        assert_eq!(writer.write(&[1, 2, 3]), Ok(3));\n-        assert_eq!(writer.write(&[4, 5, 6, 7]), Ok(4));\n+        assert_eq!(writer.write(&[0]).unwrap(), 1);\n+        assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n+        assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n         assert_eq!(&writer.get_ref()[..], b);\n     }\n@@ -194,16 +194,16 @@ mod tests {\n         {\n             let mut writer = Cursor::new(&mut buf[..]);\n             assert_eq!(writer.position(), 0);\n-            assert_eq!(writer.write(&[0]), Ok(1));\n+            assert_eq!(writer.write(&[0]).unwrap(), 1);\n             assert_eq!(writer.position(), 1);\n-            assert_eq!(writer.write(&[1, 2, 3]), Ok(3));\n-            assert_eq!(writer.write(&[4, 5, 6, 7]), Ok(4));\n+            assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n+            assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n             assert_eq!(writer.position(), 8);\n-            assert_eq!(writer.write(&[]), Ok(0));\n+            assert_eq!(writer.write(&[]).unwrap(), 0);\n             assert_eq!(writer.position(), 8);\n \n-            assert_eq!(writer.write(&[8, 9]), Ok(1));\n-            assert_eq!(writer.write(&[10]), Ok(0));\n+            assert_eq!(writer.write(&[8, 9]).unwrap(), 1);\n+            assert_eq!(writer.write(&[10]).unwrap(), 0);\n         }\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n         assert_eq!(buf, b);\n@@ -215,22 +215,22 @@ mod tests {\n         {\n             let mut writer = Cursor::new(&mut buf[..]);\n             assert_eq!(writer.position(), 0);\n-            assert_eq!(writer.write(&[1]), Ok(1));\n+            assert_eq!(writer.write(&[1]).unwrap(), 1);\n             assert_eq!(writer.position(), 1);\n \n-            assert_eq!(writer.seek(SeekFrom::Start(2)), Ok(2));\n+            assert_eq!(writer.seek(SeekFrom::Start(2)).unwrap(), 2);\n             assert_eq!(writer.position(), 2);\n-            assert_eq!(writer.write(&[2]), Ok(1));\n+            assert_eq!(writer.write(&[2]).unwrap(), 1);\n             assert_eq!(writer.position(), 3);\n \n-            assert_eq!(writer.seek(SeekFrom::Current(-2)), Ok(1));\n+            assert_eq!(writer.seek(SeekFrom::Current(-2)).unwrap(), 1);\n             assert_eq!(writer.position(), 1);\n-            assert_eq!(writer.write(&[3]), Ok(1));\n+            assert_eq!(writer.write(&[3]).unwrap(), 1);\n             assert_eq!(writer.position(), 2);\n \n-            assert_eq!(writer.seek(SeekFrom::End(-1)), Ok(7));\n+            assert_eq!(writer.seek(SeekFrom::End(-1)).unwrap(), 7);\n             assert_eq!(writer.position(), 7);\n-            assert_eq!(writer.write(&[4]), Ok(1));\n+            assert_eq!(writer.write(&[4]).unwrap(), 1);\n             assert_eq!(writer.position(), 8);\n \n         }\n@@ -242,31 +242,31 @@ mod tests {\n     fn test_buf_writer_error() {\n         let mut buf = [0 as u8; 2];\n         let mut writer = Cursor::new(&mut buf[..]);\n-        assert_eq!(writer.write(&[0]), Ok(1));\n-        assert_eq!(writer.write(&[0, 0]), Ok(1));\n-        assert_eq!(writer.write(&[0, 0]), Ok(0));\n+        assert_eq!(writer.write(&[0]).unwrap(), 1);\n+        assert_eq!(writer.write(&[0, 0]).unwrap(), 1);\n+        assert_eq!(writer.write(&[0, 0]).unwrap(), 0);\n     }\n \n     #[test]\n     fn test_mem_reader() {\n         let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7));\n         let mut buf = [];\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n-        assert_eq!(reader.read(&mut buf), Ok(1));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 1);\n         assert_eq!(reader.position(), 1);\n         let b: &[_] = &[0];\n         assert_eq!(buf, b);\n         let mut buf = [0; 4];\n-        assert_eq!(reader.read(&mut buf), Ok(4));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 4);\n         assert_eq!(reader.position(), 5);\n         let b: &[_] = &[1, 2, 3, 4];\n         assert_eq!(buf, b);\n-        assert_eq!(reader.read(&mut buf), Ok(3));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 3);\n         let b: &[_] = &[5, 6, 7];\n         assert_eq!(&buf[..3], b);\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n     #[test]\n@@ -282,55 +282,55 @@ mod tests {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n         let mut reader = &mut &in_buf[..];\n         let mut buf = [];\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n         let mut buf = [0];\n-        assert_eq!(reader.read(&mut buf), Ok(1));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 1);\n         assert_eq!(reader.len(), 7);\n         let b: &[_] = &[0];\n         assert_eq!(&buf[..], b);\n         let mut buf = [0; 4];\n-        assert_eq!(reader.read(&mut buf), Ok(4));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 4);\n         assert_eq!(reader.len(), 3);\n         let b: &[_] = &[1, 2, 3, 4];\n         assert_eq!(&buf[..], b);\n-        assert_eq!(reader.read(&mut buf), Ok(3));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 3);\n         let b: &[_] = &[5, 6, 7];\n         assert_eq!(&buf[..3], b);\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n     #[test]\n     fn test_buf_reader() {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n         let mut reader = Cursor::new(&in_buf[..]);\n         let mut buf = [];\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n-        assert_eq!(reader.read(&mut buf), Ok(1));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 1);\n         assert_eq!(reader.position(), 1);\n         let b: &[_] = &[0];\n         assert_eq!(buf, b);\n         let mut buf = [0; 4];\n-        assert_eq!(reader.read(&mut buf), Ok(4));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 4);\n         assert_eq!(reader.position(), 5);\n         let b: &[_] = &[1, 2, 3, 4];\n         assert_eq!(buf, b);\n-        assert_eq!(reader.read(&mut buf), Ok(3));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 3);\n         let b: &[_] = &[5, 6, 7];\n         assert_eq!(&buf[..3], b);\n-        assert_eq!(reader.read(&mut buf), Ok(0));\n+        assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n \n     #[test]\n     fn test_read_char() {\n         let b = &b\"Vi\\xE1\\xBB\\x87t\"[..];\n         let mut c = Cursor::new(b).chars();\n-        assert_eq!(c.next(), Some(Ok('V')));\n-        assert_eq!(c.next(), Some(Ok('i')));\n-        assert_eq!(c.next(), Some(Ok('\u1ec7')));\n-        assert_eq!(c.next(), Some(Ok('t')));\n-        assert_eq!(c.next(), None);\n+        assert_eq!(c.next().unwrap().unwrap(), 'V');\n+        assert_eq!(c.next().unwrap().unwrap(), 'i');\n+        assert_eq!(c.next().unwrap().unwrap(), '\u1ec7');\n+        assert_eq!(c.next().unwrap().unwrap(), 't');\n+        assert!(c.next().is_none());\n     }\n \n     #[test]\n@@ -344,17 +344,17 @@ mod tests {\n     fn seek_past_end() {\n         let buf = [0xff];\n         let mut r = Cursor::new(&buf[..]);\n-        assert_eq!(r.seek(SeekFrom::Start(10)), Ok(10));\n-        assert_eq!(r.read(&mut [0]), Ok(0));\n+        assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n+        assert_eq!(r.read(&mut [0]).unwrap(), 0);\n \n         let mut r = Cursor::new(vec!(10));\n-        assert_eq!(r.seek(SeekFrom::Start(10)), Ok(10));\n-        assert_eq!(r.read(&mut [0]), Ok(0));\n+        assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n+        assert_eq!(r.read(&mut [0]).unwrap(), 0);\n \n         let mut buf = [0];\n         let mut r = Cursor::new(&mut buf[..]);\n-        assert_eq!(r.seek(SeekFrom::Start(10)), Ok(10));\n-        assert_eq!(r.write(&[3]), Ok(0));\n+        assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n+        assert_eq!(r.write(&[3]).unwrap(), 0);\n     }\n \n     #[test]\n@@ -375,41 +375,41 @@ mod tests {\n     fn test_seekable_mem_writer() {\n         let mut writer = Cursor::new(Vec::<u8>::new());\n         assert_eq!(writer.position(), 0);\n-        assert_eq!(writer.write(&[0]), Ok(1));\n+        assert_eq!(writer.write(&[0]).unwrap(), 1);\n         assert_eq!(writer.position(), 1);\n-        assert_eq!(writer.write(&[1, 2, 3]), Ok(3));\n-        assert_eq!(writer.write(&[4, 5, 6, 7]), Ok(4));\n+        assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n+        assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         assert_eq!(writer.position(), 8);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n         assert_eq!(&writer.get_ref()[..], b);\n \n-        assert_eq!(writer.seek(SeekFrom::Start(0)), Ok(0));\n+        assert_eq!(writer.seek(SeekFrom::Start(0)).unwrap(), 0);\n         assert_eq!(writer.position(), 0);\n-        assert_eq!(writer.write(&[3, 4]), Ok(2));\n+        assert_eq!(writer.write(&[3, 4]).unwrap(), 2);\n         let b: &[_] = &[3, 4, 2, 3, 4, 5, 6, 7];\n         assert_eq!(&writer.get_ref()[..], b);\n \n-        assert_eq!(writer.seek(SeekFrom::Current(1)), Ok(3));\n-        assert_eq!(writer.write(&[0, 1]), Ok(2));\n+        assert_eq!(writer.seek(SeekFrom::Current(1)).unwrap(), 3);\n+        assert_eq!(writer.write(&[0, 1]).unwrap(), 2);\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 7];\n         assert_eq!(&writer.get_ref()[..], b);\n \n-        assert_eq!(writer.seek(SeekFrom::End(-1)), Ok(7));\n-        assert_eq!(writer.write(&[1, 2]), Ok(2));\n+        assert_eq!(writer.seek(SeekFrom::End(-1)).unwrap(), 7);\n+        assert_eq!(writer.write(&[1, 2]).unwrap(), 2);\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2];\n         assert_eq!(&writer.get_ref()[..], b);\n \n-        assert_eq!(writer.seek(SeekFrom::End(1)), Ok(10));\n-        assert_eq!(writer.write(&[1]), Ok(1));\n+        assert_eq!(writer.seek(SeekFrom::End(1)).unwrap(), 10);\n+        assert_eq!(writer.write(&[1]).unwrap(), 1);\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2, 0, 1];\n         assert_eq!(&writer.get_ref()[..], b);\n     }\n \n     #[test]\n     fn vec_seek_past_end() {\n         let mut r = Cursor::new(Vec::new());\n-        assert_eq!(r.seek(SeekFrom::Start(10)), Ok(10));\n-        assert_eq!(r.write(&[3]), Ok(1));\n+        assert_eq!(r.seek(SeekFrom::Start(10)).unwrap(), 10);\n+        assert_eq!(r.write(&[3]).unwrap(), 1);\n     }\n \n     #[test]"}, {"sha": "a014d6e68ffb172fc8e910232226404da1e6c8ee", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -920,91 +920,91 @@ mod tests {\n     fn read_until() {\n         let mut buf = Cursor::new(&b\"12\"[..]);\n         let mut v = Vec::new();\n-        assert_eq!(buf.read_until(b'3', &mut v), Ok(2));\n+        assert_eq!(buf.read_until(b'3', &mut v).unwrap(), 2);\n         assert_eq!(v, b\"12\");\n \n         let mut buf = Cursor::new(&b\"1233\"[..]);\n         let mut v = Vec::new();\n-        assert_eq!(buf.read_until(b'3', &mut v), Ok(3));\n+        assert_eq!(buf.read_until(b'3', &mut v).unwrap(), 3);\n         assert_eq!(v, b\"123\");\n         v.truncate(0);\n-        assert_eq!(buf.read_until(b'3', &mut v), Ok(1));\n+        assert_eq!(buf.read_until(b'3', &mut v).unwrap(), 1);\n         assert_eq!(v, b\"3\");\n         v.truncate(0);\n-        assert_eq!(buf.read_until(b'3', &mut v), Ok(0));\n+        assert_eq!(buf.read_until(b'3', &mut v).unwrap(), 0);\n         assert_eq!(v, []);\n     }\n \n     #[test]\n     fn split() {\n         let buf = Cursor::new(&b\"12\"[..]);\n         let mut s = buf.split(b'3');\n-        assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n-        assert_eq!(s.next(), None);\n+        assert_eq!(s.next().unwrap().unwrap(), vec![b'1', b'2']);\n+        assert!(s.next().is_none());\n \n         let buf = Cursor::new(&b\"1233\"[..]);\n         let mut s = buf.split(b'3');\n-        assert_eq!(s.next(), Some(Ok(vec![b'1', b'2'])));\n-        assert_eq!(s.next(), Some(Ok(vec![])));\n-        assert_eq!(s.next(), None);\n+        assert_eq!(s.next().unwrap().unwrap(), vec![b'1', b'2']);\n+        assert_eq!(s.next().unwrap().unwrap(), vec![]);\n+        assert!(s.next().is_none());\n     }\n \n     #[test]\n     fn read_line() {\n         let mut buf = Cursor::new(&b\"12\"[..]);\n         let mut v = String::new();\n-        assert_eq!(buf.read_line(&mut v), Ok(2));\n+        assert_eq!(buf.read_line(&mut v).unwrap(), 2);\n         assert_eq!(v, \"12\");\n \n         let mut buf = Cursor::new(&b\"12\\n\\n\"[..]);\n         let mut v = String::new();\n-        assert_eq!(buf.read_line(&mut v), Ok(3));\n+        assert_eq!(buf.read_line(&mut v).unwrap(), 3);\n         assert_eq!(v, \"12\\n\");\n         v.truncate(0);\n-        assert_eq!(buf.read_line(&mut v), Ok(1));\n+        assert_eq!(buf.read_line(&mut v).unwrap(), 1);\n         assert_eq!(v, \"\\n\");\n         v.truncate(0);\n-        assert_eq!(buf.read_line(&mut v), Ok(0));\n+        assert_eq!(buf.read_line(&mut v).unwrap(), 0);\n         assert_eq!(v, \"\");\n     }\n \n     #[test]\n     fn lines() {\n         let buf = Cursor::new(&b\"12\"[..]);\n         let mut s = buf.lines();\n-        assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n-        assert_eq!(s.next(), None);\n+        assert_eq!(s.next().unwrap().unwrap(), \"12\".to_string());\n+        assert!(s.next().is_none());\n \n         let buf = Cursor::new(&b\"12\\n\\n\"[..]);\n         let mut s = buf.lines();\n-        assert_eq!(s.next(), Some(Ok(\"12\".to_string())));\n-        assert_eq!(s.next(), Some(Ok(String::new())));\n-        assert_eq!(s.next(), None);\n+        assert_eq!(s.next().unwrap().unwrap(), \"12\".to_string());\n+        assert_eq!(s.next().unwrap().unwrap(), \"\".to_string());\n+        assert!(s.next().is_none());\n     }\n \n     #[test]\n     fn read_to_end() {\n         let mut c = Cursor::new(&b\"\"[..]);\n         let mut v = Vec::new();\n-        assert_eq!(c.read_to_end(&mut v), Ok(0));\n+        assert_eq!(c.read_to_end(&mut v).unwrap(), 0);\n         assert_eq!(v, []);\n \n         let mut c = Cursor::new(&b\"1\"[..]);\n         let mut v = Vec::new();\n-        assert_eq!(c.read_to_end(&mut v), Ok(1));\n+        assert_eq!(c.read_to_end(&mut v).unwrap(), 1);\n         assert_eq!(v, b\"1\");\n     }\n \n     #[test]\n     fn read_to_string() {\n         let mut c = Cursor::new(&b\"\"[..]);\n         let mut v = String::new();\n-        assert_eq!(c.read_to_string(&mut v), Ok(0));\n+        assert_eq!(c.read_to_string(&mut v).unwrap(), 0);\n         assert_eq!(v, \"\");\n \n         let mut c = Cursor::new(&b\"1\"[..]);\n         let mut v = String::new();\n-        assert_eq!(c.read_to_string(&mut v), Ok(1));\n+        assert_eq!(c.read_to_string(&mut v).unwrap(), 1);\n         assert_eq!(v, \"1\");\n \n         let mut c = Cursor::new(&b\"\\xff\"[..]);\n@@ -1018,11 +1018,11 @@ mod tests {\n \n         impl Read for R {\n             fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {\n-                Err(io::Error::new(io::ErrorKind::Other, \"\", None))\n+                Err(io::Error::new(io::ErrorKind::Other, \"\"))\n             }\n         }\n \n         let mut buf = [0; 1];\n-        assert_eq!(Ok(0), R.take(0).read(&mut buf));\n+        assert_eq!(0, R.take(0).read(&mut buf).unwrap());\n     }\n }"}, {"sha": "c82f9515e8d52813ba494a6b0a48b0b71bc27a65", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -111,33 +111,33 @@ mod test {\n     #[test]\n     fn sink_sinks() {\n         let mut s = sink();\n-        assert_eq!(s.write(&[]), Ok(0));\n-        assert_eq!(s.write(&[0]), Ok(1));\n-        assert_eq!(s.write(&[0; 1024]), Ok(1024));\n-        assert_eq!(s.by_ref().write(&[0; 1024]), Ok(1024));\n+        assert_eq!(s.write(&[]).unwrap(), 0);\n+        assert_eq!(s.write(&[0]).unwrap(), 1);\n+        assert_eq!(s.write(&[0; 1024]).unwrap(), 1024);\n+        assert_eq!(s.by_ref().write(&[0; 1024]).unwrap(), 1024);\n     }\n \n     #[test]\n     fn empty_reads() {\n         let mut e = empty();\n-        assert_eq!(e.read(&mut []), Ok(0));\n-        assert_eq!(e.read(&mut [0]), Ok(0));\n-        assert_eq!(e.read(&mut [0; 1024]), Ok(0));\n-        assert_eq!(e.by_ref().read(&mut [0; 1024]), Ok(0));\n+        assert_eq!(e.read(&mut []).unwrap(), 0);\n+        assert_eq!(e.read(&mut [0]).unwrap(), 0);\n+        assert_eq!(e.read(&mut [0; 1024]).unwrap(), 0);\n+        assert_eq!(e.by_ref().read(&mut [0; 1024]).unwrap(), 0);\n     }\n \n     #[test]\n     fn repeat_repeats() {\n         let mut r = repeat(4);\n         let mut b = [0; 1024];\n-        assert_eq!(r.read(&mut b), Ok(1024));\n+        assert_eq!(r.read(&mut b).unwrap(), 1024);\n         assert!(b.iter().all(|b| *b == 4));\n     }\n \n     #[test]\n     fn take_some_bytes() {\n         assert_eq!(repeat(4).take(100).bytes().count(), 100);\n-        assert_eq!(repeat(4).take(100).bytes().next(), Some(Ok(4)));\n+        assert_eq!(repeat(4).take(100).bytes().next().unwrap().unwrap(), 4);\n         assert_eq!(repeat(1).take(10).chain(repeat(2).take(10)).bytes().count(), 20);\n     }\n \n@@ -146,7 +146,7 @@ mod test {\n         let mut buf = [0; 10];\n         {\n             let mut ptr: &mut [u8] = &mut buf;\n-            assert_eq!(repeat(4).tee(&mut ptr).take(5).read(&mut [0; 10]), Ok(5));\n+            assert_eq!(repeat(4).tee(&mut ptr).take(5).read(&mut [0; 10]).unwrap(), 5);\n         }\n         assert_eq!(buf, [4, 4, 4, 4, 4, 0, 0, 0, 0, 0]);\n     }\n@@ -160,7 +160,7 @@ mod test {\n             let mut ptr2: &mut [u8] = &mut buf2;\n \n             assert_eq!((&mut ptr1).broadcast(&mut ptr2)\n-                                  .write(&[1, 2, 3]), Ok(3));\n+                                  .write(&[1, 2, 3]).unwrap(), 3);\n         }\n         assert_eq!(buf1, buf2);\n         assert_eq!(buf1, [1, 2, 3, 0, 0, 0, 0, 0, 0, 0]);"}, {"sha": "c45230e91ba9ea9b8e17b23657836934dd210cbf", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -697,8 +697,11 @@ mod tests {\n               false, false, false, true,  false, false, false, Some(Global));\n     }\n \n-    fn tsa<A: ToSocketAddrs>(a: A) -> io::Result<Vec<SocketAddr>> {\n-        Ok(try!(a.to_socket_addrs()).collect())\n+    fn tsa<A: ToSocketAddrs>(a: A) -> Result<Vec<SocketAddr>, String> {\n+        match a.to_socket_addrs() {\n+            Ok(a) => Ok(a.collect()),\n+            Err(e) => Err(e.to_string()),\n+        }\n     }\n \n     #[test]"}, {"sha": "04d1013af1faec67fd37be4cd91415bad249241f", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -521,7 +521,7 @@ mod tests {\n \n             let mut c = t!(TcpStream::connect(&addr));\n             let mut b = [0; 10];\n-            assert_eq!(c.read(&mut b), Ok(1));\n+            assert_eq!(c.read(&mut b).unwrap(), 1);\n             t!(c.write(&[1]));\n             rx.recv().unwrap();\n         })\n@@ -566,7 +566,7 @@ mod tests {\n             let _t = thread::spawn(move|| {\n                 let mut s = t!(TcpStream::connect(&addr));\n                 let mut buf = [0, 0];\n-                assert_eq!(s.read(&mut buf), Ok(1));\n+                assert_eq!(s.read(&mut buf).unwrap(), 1);\n                 assert_eq!(buf[0], 1);\n                 t!(s.write(&[2]));\n             });\n@@ -584,7 +584,7 @@ mod tests {\n             });\n             tx1.send(()).unwrap();\n             let mut buf = [0, 0];\n-            assert_eq!(s1.read(&mut buf), Ok(1));\n+            assert_eq!(s1.read(&mut buf).unwrap(), 1);\n             rx2.recv().unwrap();\n         })\n     }\n@@ -657,7 +657,7 @@ mod tests {\n             let _t = thread::spawn(move|| {\n                 let mut c = t!(a.accept()).0;\n                 let mut b = [0];\n-                assert_eq!(c.read(&mut b), Ok(0));\n+                assert_eq!(c.read(&mut b).unwrap(), 0);\n                 t!(c.write(&[1]));\n             });\n \n@@ -688,16 +688,16 @@ mod tests {\n             t!(s.shutdown(Shutdown::Write));\n             assert!(s.write(&[0]).is_err());\n             t!(s.shutdown(Shutdown::Read));\n-            assert_eq!(s.read(&mut b), Ok(0));\n+            assert_eq!(s.read(&mut b).unwrap(), 0);\n \n             // closing should affect previous handles\n             assert!(s2.write(&[0]).is_err());\n-            assert_eq!(s2.read(&mut b), Ok(0));\n+            assert_eq!(s2.read(&mut b).unwrap(), 0);\n \n             // closing should affect new handles\n             let mut s3 = t!(s.try_clone());\n             assert!(s3.write(&[0]).is_err());\n-            assert_eq!(s3.read(&mut b), Ok(0));\n+            assert_eq!(s3.read(&mut b).unwrap(), 0);\n \n             // make sure these don't die\n             let _ = s2.shutdown(Shutdown::Read);"}, {"sha": "7b14e4dbea6788420954a43731d8853ddb154a66", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -212,7 +212,7 @@ mod tests {\n \n             let _t = thread::spawn(move|| {\n                 let mut buf = [0, 0];\n-                assert_eq!(sock2.recv_from(&mut buf), Ok((1, addr1)));\n+                assert_eq!(sock2.recv_from(&mut buf).unwrap(), (1, addr1));\n                 assert_eq!(buf[0], 1);\n                 t!(sock2.send_to(&[2], &addr1));\n             });\n@@ -228,7 +228,7 @@ mod tests {\n             });\n             tx1.send(()).unwrap();\n             let mut buf = [0, 0];\n-            assert_eq!(sock1.recv_from(&mut buf), Ok((1, addr2)));\n+            assert_eq!(sock1.recv_from(&mut buf).unwrap(), (1, addr2));\n             rx2.recv().unwrap();\n         })\n     }"}, {"sha": "c2d43ba2a059e7858a8936a66f0cc64bac9dafe5", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -576,7 +576,7 @@ mod tests {\n         assert!(p.is_ok());\n         let mut p = p.unwrap();\n         assert!(p.wait().unwrap().code() == Some(1));\n-        drop(p.wait().clone());\n+        drop(p.wait());\n     }\n \n     #[cfg(all(unix, not(target_os=\"android\")))]"}, {"sha": "c0426af051be372061b45cae94f907247ae57298", "filename": "src/libstd/sys/unix/fs2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs2.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -277,7 +277,7 @@ impl File {\n \n fn cstr(path: &Path) -> io::Result<CString> {\n     path.as_os_str().to_cstring().ok_or(\n-        io::Error::new(io::ErrorKind::InvalidInput, \"path contained a null\", None))\n+        io::Error::new(io::ErrorKind::InvalidInput, \"path contained a null\"))\n }\n \n impl FromInner<c_int> for File {"}, {"sha": "e74de595f9750db33072c5396a74e3f7c3ab1119", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -433,7 +433,7 @@ extern \"system\" {\n                             TokenHandle: *mut libc::HANDLE) -> libc::BOOL;\n     pub fn GetCurrentProcess() -> libc::HANDLE;\n     pub fn GetStdHandle(which: libc::DWORD) -> libc::HANDLE;\n-    pub fn ExitProcess(uExitCode: libc::UINT) -> !;\n+    pub fn ExitProcess(uExitCode: libc::c_uint) -> !;\n }\n \n #[link(name = \"userenv\")]"}, {"sha": "d5843a2f9987b153b67543303530eb44dc9af436", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -382,5 +382,5 @@ pub fn home_dir() -> Option<PathBuf> {\n }\n \n pub fn exit(code: i32) -> ! {\n-    unsafe { libc::ExitProcess(code as libc::UINT) }\n+    unsafe { c::ExitProcess(code as libc::c_uint) }\n }"}, {"sha": "91f6f328ff6e0a9eb7038dbfe21e7c4babca885a", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -41,7 +41,7 @@ fn get(handle: libc::DWORD) -> io::Result<Output> {\n         Err(io::Error::last_os_error())\n     } else if handle.is_null() {\n         Err(io::Error::new(io::ErrorKind::Other,\n-                           \"no stdio handle available for this process\", None))\n+                           \"no stdio handle available for this process\"))\n     } else {\n         let ret = NoClose::new(handle);\n         let mut out = 0;\n@@ -160,6 +160,5 @@ impl Drop for NoClose {\n }\n \n fn invalid_encoding() -> io::Error {\n-    io::Error::new(io::ErrorKind::InvalidInput, \"text was not valid unicode\",\n-                   None)\n+    io::Error::new(io::ErrorKind::InvalidInput, \"text was not valid unicode\")\n }"}, {"sha": "2c4141b0bd37939a88ef3c827b9271532792d262", "filename": "src/test/run-pass/issue-22577.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f59732d7974767650abfc58f8287212e5a1fba/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f59732d7974767650abfc58f8287212e5a1fba/src%2Ftest%2Frun-pass%2Fissue-22577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22577.rs?ref=72f59732d7974767650abfc58f8287212e5a1fba", "patch": "@@ -15,13 +15,14 @@\n use std::{fs, net};\n \n fn assert_both<T: Send + Sync>() {}\n+fn assert_send<T: Send>() {}\n \n fn main() {\n     assert_both::<fs::File>();\n     assert_both::<fs::Metadata>();\n     assert_both::<fs::ReadDir>();\n     assert_both::<fs::DirEntry>();\n-    assert_both::<fs::WalkDir>();\n+    assert_send::<fs::WalkDir>();\n     assert_both::<fs::OpenOptions>();\n     assert_both::<fs::Permissions>();\n "}]}