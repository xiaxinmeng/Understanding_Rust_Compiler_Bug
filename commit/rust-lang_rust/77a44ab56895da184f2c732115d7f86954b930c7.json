{"sha": "77a44ab56895da184f2c732115d7f86954b930c7", "node_id": "C_kwDOAAsO6NoAKDc3YTQ0YWI1Njg5NWRhMTg0ZjJjNzMyMTE1ZDdmODY5NTRiOTMwYzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-08T05:53:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-08T05:53:51Z"}, "message": "Rollup merge of #103865 - compiler-errors:fallback-has-occurred-tracking, r=eholk\n\nMove `fallback_has_occurred` state tracking to `FnCtxt`\n\nRemoves a ton of callsites that defaulted to `false`", "tree": {"sha": "1d41e526fc2a326441ec23cc4abb8cf38edd311b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d41e526fc2a326441ec23cc4abb8cf38edd311b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a44ab56895da184f2c732115d7f86954b930c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjae7vCRBK7hj4Ov3rIwAAW6cIAESuzeWdE+euPGXGga0JHBCl\nBqQADMopb3Fqr5UBfqhhKNy8TLE/5b7axpm2jRosbGwb4jypQQ2v9WDg6aIsIg/S\naN49yTCkldI/wGlFFsyG4pEdefC5YuTpXPgCuHMLVexF6K/1H3jDSeoqVYXwrp57\ncR5I5yzKLo7BVODIBN7KmgoUpN9DSQ2ZBdmwBCZyhXV0DtOAHmPyf9oum0LQSvk/\nMUx1/hfk02chuYdr1OVkA0yvbHQHj+bWIO8q0T/hkdHZ1bKTmw4CcFgaUAL9E1Ef\nVgjweSccFgGg7wIvzQBuCkuEKe3mQ2KKQcpOedBZW+fk9Hs3xWA0Jp12d0irfQI=\n=fO0Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d41e526fc2a326441ec23cc4abb8cf38edd311b\nparent 4946ee7c8fd9a6b5b7e506373950cac57a4e8015\nparent bc345d7bd0c1d7ff7608bff504255842467c3d3c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667886831 +0530\ncommitter GitHub <noreply@github.com> 1667886831 +0530\n\nRollup merge of #103865 - compiler-errors:fallback-has-occurred-tracking, r=eholk\n\nMove `fallback_has_occurred` state tracking to `FnCtxt`\n\nRemoves a ton of callsites that defaulted to `false`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a44ab56895da184f2c732115d7f86954b930c7", "html_url": "https://github.com/rust-lang/rust/commit/77a44ab56895da184f2c732115d7f86954b930c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a44ab56895da184f2c732115d7f86954b930c7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4946ee7c8fd9a6b5b7e506373950cac57a4e8015", "url": "https://api.github.com/repos/rust-lang/rust/commits/4946ee7c8fd9a6b5b7e506373950cac57a4e8015", "html_url": "https://github.com/rust-lang/rust/commit/4946ee7c8fd9a6b5b7e506373950cac57a4e8015"}, {"sha": "bc345d7bd0c1d7ff7608bff504255842467c3d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc345d7bd0c1d7ff7608bff504255842467c3d3c", "html_url": "https://github.com/rust-lang/rust/commit/bc345d7bd0c1d7ff7608bff504255842467c3d3c"}], "stats": {"total": 116, "additions": 52, "deletions": 64}, "files": [{"sha": "103c7ed8ef7012167c83c9a23e73315d50731185", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         if errors.is_empty() {\n             definition_ty\n         } else {\n-            infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n             self.tcx.ty_error()\n         }\n     }"}, {"sha": "5a8b3e30b9fc0cdaab6bc89e90bfbb3624ee2668", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -765,7 +765,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                         let errors = ocx.select_all_or_error();\n                         if !errors.is_empty() {\n-                            infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+                            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n                         }\n                     }\n \n@@ -831,7 +831,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                                         obligation.clone(),\n                                         &obligation,\n                                         &e,\n-                                        false,\n                                     );\n                                 }\n "}, {"sha": "3170f8feffc66d0aa427f7b23f3bf556ca393348", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -471,7 +471,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n     }\n     match origin {\n         // Checked when type checking the function containing them."}, {"sha": "0e8ac17fb71b1588ad19e937cf03f413ca24b73e", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -405,7 +405,7 @@ fn compare_predicate_entailment<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n         return Err(reported);\n     }\n \n@@ -538,7 +538,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // RPITs.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n         return Err(reported);\n     }\n \n@@ -1431,7 +1431,7 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        return Err(infcx.err_ctxt().report_fulfillment_errors(&errors, None, false));\n+        return Err(infcx.err_ctxt().report_fulfillment_errors(&errors, None));\n     }\n \n     // FIXME return `ErrorReported` if region obligations error?\n@@ -1549,7 +1549,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n         return Err(reported);\n     }\n \n@@ -1769,7 +1769,7 @@ pub fn check_type_bounds<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n         return Err(reported);\n     }\n "}, {"sha": "e2c967d0b0836e03a2936ca434f091b761d92cda", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -105,7 +105,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n     f(&mut wfcx);\n     let errors = wfcx.select_all_or_error();\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n         return;\n     }\n "}, {"sha": "6f74ef3ccad6d75684c5576e5861fb83ac38425f", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -321,7 +321,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n                     }),\n                 );\n                 if !errors.is_empty() {\n-                    infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+                    infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n                 }\n \n                 // Finally, resolve all regions.\n@@ -561,7 +561,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n         predicate_for_trait_def(tcx, param_env, cause, trait_def_id, 0, source, &[target.into()]);\n     let errors = traits::fully_solve_obligation(&infcx, predicate);\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n     }\n \n     // Finally, resolve all regions."}, {"sha": "267077cdab4e62abe8f2a839445dc1e5df76f684", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -155,7 +155,7 @@ fn get_impl_substs<'tcx>(\n \n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        ocx.infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+        ocx.infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n         return None;\n     }\n "}, {"sha": "664d3a3a1db84c3d5e8cefd394ee650daaff1613", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -173,7 +173,7 @@ fn require_same_types<'tcx>(\n     match &errors[..] {\n         [] => true,\n         errors => {\n-            infcx.err_ctxt().report_fulfillment_errors(errors, None, false);\n+            infcx.err_ctxt().report_fulfillment_errors(errors, None);\n             false\n         }\n     }\n@@ -336,7 +336,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         ocx.register_bound(cause, param_env, norm_return_ty, term_did);\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {\n-            infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n             error = true;\n         }\n         // now we can take the return type of the given main function"}, {"sha": "25306ebf3567996d5bf26e3befa5f092db4f4dd7", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -705,12 +705,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    self.err_ctxt().report_selection_error(\n-                        obligation.clone(),\n-                        &obligation,\n-                        &err,\n-                        false,\n-                    );\n+                    self.err_ctxt().report_selection_error(obligation.clone(), &obligation, &err);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later."}, {"sha": "89b5e5161a9c28c80dc55ad45f8b2efe19b29c13", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -843,7 +843,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             // Point any obligations that were registered due to opaque type\n             // inference at the return expression.\n-            self.select_obligations_where_possible(false, |errors| {\n+            self.select_obligations_where_possible(|errors| {\n                 self.point_at_return_for_opaque_ty_error(errors, span, return_expr_ty);\n             });\n         }\n@@ -2738,7 +2738,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some((index_ty, element_ty)) => {\n                     // two-phase not needed because index_ty is never mutable\n                     self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n-                    self.select_obligations_where_possible(false, |errors| {\n+                    self.select_obligations_where_possible(|errors| {\n                         self.point_at_index_if_possible(errors, idx.span)\n                     });\n                     element_ty"}, {"sha": "5d44092a5f68e33c440e652e24608bf9745ba161", "filename": "compiler/rustc_hir_typeck/src/fallback.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -7,16 +7,16 @@ use rustc_data_structures::{\n use rustc_middle::ty::{self, Ty};\n \n impl<'tcx> FnCtxt<'_, 'tcx> {\n-    /// Performs type inference fallback, returning true if any fallback\n-    /// occurs.\n-    pub(super) fn type_inference_fallback(&self) -> bool {\n+    /// Performs type inference fallback, setting `FnCtxt::fallback_has_occurred`\n+    /// if fallback has occurred.\n+    pub(super) fn type_inference_fallback(&self) {\n         debug!(\n             \"type-inference-fallback start obligations: {:#?}\",\n             self.fulfillment_cx.borrow_mut().pending_obligations()\n         );\n \n         // All type checking constraints were added, try to fallback unsolved variables.\n-        self.select_obligations_where_possible(false, |_| {});\n+        self.select_obligations_where_possible(|_| {});\n \n         debug!(\n             \"type-inference-fallback post selection obligations: {:#?}\",\n@@ -26,18 +26,17 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         // Check if we have any unsolved variables. If not, no need for fallback.\n         let unsolved_variables = self.unsolved_variables();\n         if unsolved_variables.is_empty() {\n-            return false;\n+            return;\n         }\n \n         let diverging_fallback = self.calculate_diverging_fallback(&unsolved_variables);\n \n-        let mut fallback_has_occurred = false;\n         // We do fallback in two passes, to try to generate\n         // better error messages.\n         // The first time, we do *not* replace opaque types.\n         for ty in unsolved_variables {\n             debug!(\"unsolved_variable = {:?}\", ty);\n-            fallback_has_occurred |= self.fallback_if_possible(ty, &diverging_fallback);\n+            self.fallback_if_possible(ty, &diverging_fallback);\n         }\n \n         // We now see if we can make progress. This might cause us to\n@@ -63,9 +62,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         // If we had tried to fallback the opaque inference variable to `MyType`,\n         // we will generate a confusing type-check error that does not explicitly\n         // refer to opaque types.\n-        self.select_obligations_where_possible(fallback_has_occurred, |_| {});\n-\n-        fallback_has_occurred\n+        self.select_obligations_where_possible(|_| {});\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n@@ -81,12 +78,13 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n     // Fallback becomes very dubious if we have encountered\n     // type-checking errors.  In that case, fallback to Error.\n     //\n-    // The return value indicates whether fallback has occurred.\n+    // Sets `FnCtxt::fallback_has_occurred` if fallback is performed\n+    // during this call.\n     fn fallback_if_possible(\n         &self,\n         ty: Ty<'tcx>,\n         diverging_fallback: &FxHashMap<Ty<'tcx>, Ty<'tcx>>,\n-    ) -> bool {\n+    ) {\n         // Careful: we do NOT shallow-resolve `ty`. We know that `ty`\n         // is an unsolved variable, and we determine its fallback\n         // based solely on how it was created, not what other type\n@@ -111,7 +109,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n             ty::Infer(ty::FloatVar(_)) => self.tcx.types.f64,\n             _ => match diverging_fallback.get(&ty) {\n                 Some(&fallback_ty) => fallback_ty,\n-                None => return false,\n+                None => return,\n             },\n         };\n         debug!(\"fallback_if_possible(ty={:?}): defaulting to `{:?}`\", ty, fallback);\n@@ -122,7 +120,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n             .map(|origin| origin.span)\n             .unwrap_or(rustc_span::DUMMY_SP);\n         self.demand_eqtype(span, ty, fallback);\n-        true\n+        self.fallback_has_occurred.set(true);\n     }\n \n     /// The \"diverging fallback\" system is rather complicated. This is"}, {"sha": "35323137e2d5aca499caacd08b6faaef9cf663ae", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // possible. This can help substantially when there are\n         // indirect dependencies that don't seem worth tracking\n         // precisely.\n-        self.select_obligations_where_possible(false, mutate_fulfillment_errors);\n+        self.select_obligations_where_possible(mutate_fulfillment_errors);\n         self.resolve_vars_if_possible(ty)\n     }\n \n@@ -600,7 +600,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn resolve_generator_interiors(&self, def_id: DefId) {\n         let mut generators = self.deferred_generator_interiors.borrow_mut();\n         for (body_id, interior, kind) in generators.drain(..) {\n-            self.select_obligations_where_possible(false, |_| {});\n+            self.select_obligations_where_possible(|_| {});\n             crate::generator_interior::resolve_interior(self, def_id, body_id, interior, kind);\n         }\n     }\n@@ -611,25 +611,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if !errors.is_empty() {\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);\n-            self.err_ctxt().report_fulfillment_errors(&errors, self.inh.body_id, false);\n+            self.err_ctxt().report_fulfillment_errors(&errors, self.inh.body_id);\n         }\n     }\n \n     /// Select as many obligations as we can at present.\n     pub(in super::super) fn select_obligations_where_possible(\n         &self,\n-        fallback_has_occurred: bool,\n         mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n     ) {\n         let mut result = self.fulfillment_cx.borrow_mut().select_where_possible(self);\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut result);\n-            self.err_ctxt().report_fulfillment_errors(\n-                &result,\n-                self.inh.body_id,\n-                fallback_has_occurred,\n-            );\n+            self.err_ctxt().report_fulfillment_errors(&result, self.inh.body_id);\n         }\n     }\n "}, {"sha": "a7a60a19bd37e62429da2cafacb747a3e879706d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -345,7 +345,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // an \"opportunistic\" trait resolution of any trait bounds on\n             // the call. This helps coercions.\n             if check_closures {\n-                self.select_obligations_where_possible(false, |_| {})\n+                self.select_obligations_where_possible(|_| {})\n             }\n \n             // Check each argument, to satisfy the input it was provided for"}, {"sha": "75984243aa731644de6049bf4372c5432f69682f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -115,6 +115,8 @@ pub struct FnCtxt<'a, 'tcx> {\n     pub(super) enclosing_breakables: RefCell<EnclosingBreakables<'tcx>>,\n \n     pub(super) inh: &'a Inherited<'tcx>,\n+\n+    pub(super) fallback_has_occurred: Cell<bool>,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -138,6 +140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 by_id: Default::default(),\n             }),\n             inh,\n+            fallback_has_occurred: Cell::new(false),\n         }\n     }\n \n@@ -159,7 +162,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// [`InferCtxt::err_ctxt`]: infer::InferCtxt::err_ctxt\n     pub fn err_ctxt(&'a self) -> TypeErrCtxt<'a, 'tcx> {\n-        TypeErrCtxt { infcx: &self.infcx, typeck_results: Some(self.typeck_results.borrow()) }\n+        TypeErrCtxt {\n+            infcx: &self.infcx,\n+            typeck_results: Some(self.typeck_results.borrow()),\n+            fallback_has_occurred: self.fallback_has_occurred.get(),\n+        }\n     }\n \n     pub fn errors_reported_since_creation(&self) -> bool {"}, {"sha": "052fdef2fc51824a5c450e78a89337fb719361d6", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -316,12 +316,12 @@ fn typeck_with_fallback<'tcx>(\n             fcx\n         };\n \n-        let fallback_has_occurred = fcx.type_inference_fallback();\n+        fcx.type_inference_fallback();\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n         fcx.check_casts();\n-        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n+        fcx.select_obligations_where_possible(|_| {});\n \n         // Closure and generator analysis may run after fallback\n         // because they don't constrain other type variables."}, {"sha": "c3bcbcc993b7ce046099f1268ae5f69001576856", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -772,7 +772,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match (method, trait_did) {\n             (Some(ok), _) => {\n                 let method = self.register_infer_ok_obligations(ok);\n-                self.select_obligations_where_possible(false, |_| {});\n+                self.select_obligations_where_possible(|_| {});\n                 Ok(method)\n             }\n             (None, None) => Err(vec![]),"}, {"sha": "3dbc9b9f3f938fcc2c4262de81da3132e874196d", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -91,6 +91,7 @@ pub mod nice_region_error;\n pub struct TypeErrCtxt<'a, 'tcx> {\n     pub infcx: &'a InferCtxt<'tcx>,\n     pub typeck_results: Option<std::cell::Ref<'a, ty::TypeckResults<'tcx>>>,\n+    pub fallback_has_occurred: bool,\n }\n \n impl TypeErrCtxt<'_, '_> {"}, {"sha": "d5be9983ea7c60b0c0f2286d9c0225bee2a8f2e8", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -677,9 +677,9 @@ pub struct CombinedSnapshot<'tcx> {\n \n impl<'tcx> InferCtxt<'tcx> {\n     /// Creates a `TypeErrCtxt` for emitting various inference errors.\n-    /// During typeck, use `FnCtxt::infer_err` instead.\n+    /// During typeck, use `FnCtxt::err_ctxt` instead.\n     pub fn err_ctxt(&self) -> TypeErrCtxt<'_, 'tcx> {\n-        TypeErrCtxt { infcx: self, typeck_results: None }\n+        TypeErrCtxt { infcx: self, typeck_results: None, fallback_has_occurred: false }\n     }\n \n     /// calls `tcx.try_unify_abstract_consts` after"}, {"sha": "f2275e2303aecb5cab84c25c31ceb2d496c0ba1e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -101,7 +101,6 @@ pub trait TypeErrCtxtExt<'tcx> {\n         &self,\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n-        fallback_has_occurred: bool,\n     ) -> ErrorGuaranteed;\n \n     fn report_overflow_error<T>(\n@@ -124,7 +123,6 @@ pub trait TypeErrCtxtExt<'tcx> {\n         obligation: PredicateObligation<'tcx>,\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n-        fallback_has_occurred: bool,\n     );\n }\n \n@@ -375,7 +373,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         &self,\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n-        fallback_has_occurred: bool,\n     ) -> ErrorGuaranteed {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n@@ -452,7 +449,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         for (error, suppressed) in iter::zip(errors, is_suppressed) {\n             if !suppressed {\n-                self.report_fulfillment_error(error, body_id, fallback_has_occurred);\n+                self.report_fulfillment_error(error, body_id);\n             }\n         }\n \n@@ -534,7 +531,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         mut obligation: PredicateObligation<'tcx>,\n         root_obligation: &PredicateObligation<'tcx>,\n         error: &SelectionError<'tcx>,\n-        fallback_has_occurred: bool,\n     ) {\n         self.set_tainted_by_errors();\n         let tcx = self.tcx;\n@@ -1015,7 +1011,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         // variable that used to fallback to `()` now falling back to `!`. Issue a\n                         // note informing about the change in behaviour.\n                         if trait_predicate.skip_binder().self_ty().is_never()\n-                            && fallback_has_occurred\n+                            && self.fallback_has_occurred\n                         {\n                             let predicate = trait_predicate.map_bound(|mut trait_pred| {\n                                 trait_pred.trait_ref.substs = self.tcx.mk_substs_trait(\n@@ -1381,7 +1377,6 @@ trait InferCtxtPrivExt<'tcx> {\n         &self,\n         error: &FulfillmentError<'tcx>,\n         body_id: Option<hir::BodyId>,\n-        fallback_has_occurred: bool,\n     );\n \n     fn report_projection_error(\n@@ -1531,15 +1526,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         &self,\n         error: &FulfillmentError<'tcx>,\n         body_id: Option<hir::BodyId>,\n-        fallback_has_occurred: bool,\n     ) {\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref selection_error) => {\n                 self.report_selection_error(\n                     error.obligation.clone(),\n                     &error.root_obligation,\n                     selection_error,\n-                    fallback_has_occurred,\n                 );\n             }\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {"}, {"sha": "b6ded4ce5a3962e0d252dd81b0b226c72017174e", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -70,7 +70,7 @@ pub fn can_type_implement_copy<'tcx>(\n                     }\n                 }\n                 Err(errors) => {\n-                    infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+                    infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n                 }\n             };\n         }"}, {"sha": "0d5e4cfd3bb9616d74072423794b8f1169a67963", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77a44ab56895da184f2c732115d7f86954b930c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=77a44ab56895da184f2c732115d7f86954b930c7", "patch": "@@ -214,7 +214,7 @@ fn do_normalize_predicates<'tcx>(\n     let predicates = match fully_normalize(&infcx, cause, elaborated_env, predicates) {\n         Ok(predicates) => predicates,\n         Err(errors) => {\n-            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None, false);\n+            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n             return Err(reported);\n         }\n     };"}]}