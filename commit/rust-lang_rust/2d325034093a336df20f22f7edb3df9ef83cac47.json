{"sha": "2d325034093a336df20f22f7edb3df9ef83cac47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzI1MDM0MDkzYTMzNmRmMjBmMjJmN2VkYjNkZjllZjgzY2FjNDc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-10T03:53:20Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-10T03:53:20Z"}, "message": "Support C ABI memcmp function.", "tree": {"sha": "4b697df761300a227e315c65760e3e13e5333986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b697df761300a227e315c65760e3e13e5333986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d325034093a336df20f22f7edb3df9ef83cac47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d325034093a336df20f22f7edb3df9ef83cac47", "html_url": "https://github.com/rust-lang/rust/commit/2d325034093a336df20f22f7edb3df9ef83cac47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d325034093a336df20f22f7edb3df9ef83cac47/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78caee20c7e15f286147fc1a35fb0682cb046ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/78caee20c7e15f286147fc1a35fb0682cb046ab9", "html_url": "https://github.com/rust-lang/rust/commit/78caee20c7e15f286147fc1a35fb0682cb046ab9"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "24f0e859bd824303ac77e60ae87d83adccdb7810", "filename": "src/interpreter.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2d325034093a336df20f22f7edb3df9ef83cac47/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d325034093a336df20f22f7edb3df9ef83cac47/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=2d325034093a336df20f22f7edb3df9ef83cac47", "patch": "@@ -346,14 +346,22 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                                 match fn_ty.sig.0.output {\n                                     ty::FnConverging(ty) => {\n                                         let size = self.type_size(ty);\n-                                        self.call_intrinsic(&name, substs, args,\n-                                            return_ptr.unwrap(), size)?\n+                                        let ret = return_ptr.unwrap();\n+                                        self.call_intrinsic(&name, substs, args, ret, size)?\n                                     }\n                                     ty::FnDiverging => unimplemented!(),\n                                 }\n                             }\n \n-                            Abi::C => self.call_c_abi(def_id, args, return_ptr.unwrap())?,\n+                            Abi::C => {\n+                                match fn_ty.sig.0.output {\n+                                    ty::FnConverging(ty) => {\n+                                        let size = self.type_size(ty);\n+                                        self.call_c_abi(def_id, args, return_ptr.unwrap(), size)?\n+                                    }\n+                                    ty::FnDiverging => unimplemented!(),\n+                                }\n+                            }\n \n                             Abi::Rust | Abi::RustCall => {\n                                 // TODO(solson): Adjust the first argument when calling a Fn or\n@@ -613,7 +621,8 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         &mut self,\n         def_id: DefId,\n         args: &[mir::Operand<'tcx>],\n-        dest: Pointer\n+        dest: Pointer,\n+        dest_size: usize,\n     ) -> EvalResult<TerminatorTarget> {\n         let name = self.tcx.item_name(def_id);\n         let attrs = self.tcx.get_attrs(def_id);\n@@ -641,6 +650,26 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 self.memory.write_ptr(dest, ptr)?;\n             }\n \n+            \"memcmp\" => {\n+                let left = self.memory.read_ptr(args[0])?;\n+                let right = self.memory.read_ptr(args[1])?;\n+                let n = self.memory.read_usize(args[2])? as usize;\n+\n+                let result = {\n+                    let left_bytes = self.memory.read_bytes(left, n)?;\n+                    let right_bytes = self.memory.read_bytes(right, n)?;\n+\n+                    use std::cmp::Ordering::*;\n+                    match left_bytes.cmp(right_bytes) {\n+                        Less => -1,\n+                        Equal => 0,\n+                        Greater => 1,\n+                    }\n+                };\n+\n+                self.memory.write_int(dest, result, dest_size)?;\n+            }\n+\n             _ => panic!(\"can't call C ABI function: {}\", link_name),\n         }\n "}, {"sha": "3fd41e7b3dd2ee8e5f3bc75989c05bc9d6c46f7b", "filename": "tests/compile-fail/bugs/memcmp.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78caee20c7e15f286147fc1a35fb0682cb046ab9/tests%2Fcompile-fail%2Fbugs%2Fmemcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78caee20c7e15f286147fc1a35fb0682cb046ab9/tests%2Fcompile-fail%2Fbugs%2Fmemcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbugs%2Fmemcmp.rs?ref=78caee20c7e15f286147fc1a35fb0682cb046ab9", "patch": "@@ -1,11 +0,0 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-// error-pattern:can't call C ABI function: memcmp\n-\n-#[miri_run]\n-fn memcmp() {\n-    assert_eq!(\"\", \"\");\n-}\n-\n-fn main() {}"}, {"sha": "db4f999a8b043f327712bdab597a398cc13d0eb6", "filename": "tests/run-pass/arrays.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d325034093a336df20f22f7edb3df9ef83cac47/tests%2Frun-pass%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d325034093a336df20f22f7edb3df9ef83cac47/tests%2Frun-pass%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Farrays.rs?ref=2d325034093a336df20f22f7edb3df9ef83cac47", "patch": "@@ -46,13 +46,11 @@ fn slice_index() -> u8 {\n \n #[miri_run]\n fn main() {\n-    // assert_eq!(empty_array(), []);\n+    assert_eq!(empty_array(), []);\n     assert_eq!(index_unsafe(), 20);\n     assert_eq!(index(), 20);\n     assert_eq!(slice_index(), 106);\n-    /*\n     assert_eq!(big_array(), [5, 4, 3, 2, 1]);\n     assert_eq!(array_array(), [[5, 4], [3, 2], [1, 0]]);\n     assert_eq!(array_repeat(), [42; 8]);\n-    */\n }"}, {"sha": "60790fef439fc47e762467e624bf01a06455d806", "filename": "tests/run-pass/c_enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d325034093a336df20f22f7edb3df9ef83cac47/tests%2Frun-pass%2Fc_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d325034093a336df20f22f7edb3df9ef83cac47/tests%2Frun-pass%2Fc_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fc_enums.rs?ref=2d325034093a336df20f22f7edb3df9ef83cac47", "patch": "@@ -33,7 +33,7 @@ fn unsafe_match() -> bool {\n \n #[miri_run]\n fn main() {\n-    // assert_eq!(foo(), [42, 43, 100]);\n-    // assert_eq!(signed(), [-42, -41, 100]);\n+    assert_eq!(foo(), [42, 43, 100]);\n+    assert_eq!(signed(), [-42, -41, 100]);\n     assert!(unsafe_match());\n }"}]}