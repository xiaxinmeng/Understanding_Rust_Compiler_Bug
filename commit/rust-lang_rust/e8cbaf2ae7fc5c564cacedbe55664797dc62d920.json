{"sha": "e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2JhZjJhZTdmYzVjNTY0Y2FjZWRiZTU1NjY0Nzk3ZGM2MmQ5MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-01T11:54:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-01T11:54:58Z"}, "message": "Auto merge of #78623 - m-ou-se:rollup-m6y5j0m, r=m-ou-se\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #78073 (Add #[inline] to some functions in core::str.)\n - #78596 (Fix doc links to std::fmt)\n - #78599 (Add note to process::arg[s] that args shouldn't be escaped or quoted)\n - #78602 (fix various aliasing issues in the standard library)\n - #78603 (expand: Tweak a comment in implementation of `macro_rules`)\n - #78621 (Inline Default::default() for atomics)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "8dc4198dbba092145d4bf6e5a4b9ecd4a01534f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc4198dbba092145d4bf6e5a4b9ecd4a01534f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "html_url": "https://github.com/rust-lang/rust/commit/e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e37ba76d47280fa867c3863aa6d22376535637a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e37ba76d47280fa867c3863aa6d22376535637a", "html_url": "https://github.com/rust-lang/rust/commit/1e37ba76d47280fa867c3863aa6d22376535637a"}, {"sha": "97678b8358bf9e1d0b81f1e0e15f223f7a571d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/97678b8358bf9e1d0b81f1e0e15f223f7a571d68", "html_url": "https://github.com/rust-lang/rust/commit/97678b8358bf9e1d0b81f1e0e15f223f7a571d68"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "3d8a4bbff18339b94d9c82f08f903d3efed94085", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -232,17 +232,19 @@ pub(super) fn transcribe<'a>(\n                 // the meta-var.\n                 let ident = MacroRulesNormalizedIdent::new(orignal_ident);\n                 if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {\n-                    if let MatchedNonterminal(ref nt) = cur_matched {\n-                        // FIXME #2887: why do we apply a mark when matching a token tree meta-var\n-                        // (e.g. `$x:tt`), but not when we are matching any other type of token\n-                        // tree?\n-                        if let NtTT(ref tt) = **nt {\n-                            result.push(tt.clone().into());\n+                    if let MatchedNonterminal(nt) = cur_matched {\n+                        let token = if let NtTT(tt) = &**nt {\n+                            // `tt`s are emitted into the output stream directly as \"raw tokens\",\n+                            // without wrapping them into groups.\n+                            tt.clone()\n                         } else {\n+                            // Other variables are emitted into the output stream as groups with\n+                            // `Delimiter::None` to maintain parsing priorities.\n+                            // `Interpolated` is currenty used for such groups in rustc parser.\n                             marker.visit_span(&mut sp);\n-                            let token = TokenTree::token(token::Interpolated(nt.clone()), sp);\n-                            result.push(token.into());\n-                        }\n+                            TokenTree::token(token::Interpolated(nt.clone()), sp)\n+                        };\n+                        result.push(token.into());\n                     } else {\n                         // We were unable to descend far enough. This is an error.\n                         return Err(cx.struct_span_err("}, {"sha": "b67c72d7136a67e13ba993993723976124efded5", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -1036,8 +1036,9 @@ impl<'a, T> Hole<'a, T> {\n         debug_assert!(index != self.pos);\n         debug_assert!(index < self.data.len());\n         unsafe {\n-            let index_ptr: *const _ = self.data.get_unchecked(index);\n-            let hole_ptr = self.data.get_unchecked_mut(self.pos);\n+            let ptr = self.data.as_mut_ptr();\n+            let index_ptr: *const _ = ptr.add(index);\n+            let hole_ptr = ptr.add(self.pos);\n             ptr::copy_nonoverlapping(index_ptr, hole_ptr, 1);\n         }\n         self.pos = index;"}, {"sha": "a992d768d6314ee8d99873b09d3a9a9aa5cdd8cc", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -71,7 +71,7 @@ macro_rules! vec {\n ///\n /// Additional parameters passed to `format!` replace the `{}`s within the\n /// formatting string in the order given unless named or positional parameters\n-/// are used; see [`std::fmt`][fmt] for more information.\n+/// are used; see [`std::fmt`] for more information.\n ///\n /// A common use for `format!` is concatenation and interpolation of strings.\n /// The same convention is used with [`print!`] and [`write!`] macros,\n@@ -80,7 +80,7 @@ macro_rules! vec {\n /// To convert a single value to a string, use the [`to_string`] method. This\n /// will use the [`Display`] formatting trait.\n ///\n-/// [fmt]: core::fmt\n+/// [`std::fmt`]: ../std/fmt/index.html\n /// [`print!`]: ../std/macro.print.html\n /// [`write!`]: core::write\n /// [`to_string`]: crate::string::ToString"}, {"sha": "7a98210995ec75b4272199dd934f959f0f0c7fad", "filename": "library/core/src/fmt/num.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fnum.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -595,7 +595,6 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n     // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n     let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n     let mut curr = buf.len() as isize;\n-    let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n \n     let (n, rem) = udiv_1e19(n);\n     parse_u64_into(rem, &mut buf, &mut curr);\n@@ -606,7 +605,11 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n         // SAFETY: Guaranteed that we wrote at most 19 bytes, and there must be space\n         // remaining since it has length 39\n         unsafe {\n-            ptr::write_bytes(buf_ptr.offset(target), b'0', (curr - target) as usize);\n+            ptr::write_bytes(\n+                MaybeUninit::slice_as_mut_ptr(&mut buf).offset(target),\n+                b'0',\n+                (curr - target) as usize,\n+            );\n         }\n         curr = target;\n \n@@ -615,6 +618,9 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n         // Should this following branch be annotated with unlikely?\n         if n != 0 {\n             let target = (buf.len() - 38) as isize;\n+            // The raw `buf_ptr` pointer is only valid until `buf` is used the next time,\n+            // buf `buf` is not used in this scope so we are good.\n+            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n             // SAFETY: At this point we wrote at most 38 bytes, pad up to that point,\n             // There can only be at most 1 digit remaining.\n             unsafe {\n@@ -629,7 +635,7 @@ fn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::R\n     // UTF-8 since `DEC_DIGITS_LUT` is\n     let buf_slice = unsafe {\n         str::from_utf8_unchecked(slice::from_raw_parts(\n-            buf_ptr.offset(curr),\n+            MaybeUninit::slice_as_mut_ptr(&mut buf).offset(curr),\n             buf.len() - curr as usize,\n         ))\n     };"}, {"sha": "6178b0af137e8c4cd1fc9121cb52ce06ce5246ad", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -111,7 +111,7 @@ macro_rules! load_int_le {\n         debug_assert!($i + mem::size_of::<$int_ty>() <= $buf.len());\n         let mut data = 0 as $int_ty;\n         ptr::copy_nonoverlapping(\n-            $buf.get_unchecked($i),\n+            $buf.as_ptr().add($i),\n             &mut data as *mut _ as *mut u8,\n             mem::size_of::<$int_ty>(),\n         );"}, {"sha": "079d9f6006a3249a3e20bde259a3b33fc81bfb3e", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -327,7 +327,7 @@ macro_rules! r#try {\n ///\n /// See [`std::fmt`] for more information on the format string syntax.\n ///\n-/// [`std::fmt`]: crate::fmt\n+/// [`std::fmt`]: ../std/fmt/index.html\n /// [`fmt::Write`]: crate::fmt::Write\n /// [`io::Write`]: ../std/io/trait.Write.html\n /// [`fmt::Result`]: crate::fmt::Result"}, {"sha": "660b7db70be928ebebd5fcb5a36b98cc506044f3", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -842,13 +842,13 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n-        this as *const [MaybeUninit<T>] as *const T\n+        this.as_ptr() as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n-        this as *mut [MaybeUninit<T>] as *mut T\n+        this.as_mut_ptr() as *mut T\n     }\n }"}, {"sha": "ccf7b20285cb36615fe229386de0f0b32f453bc4", "filename": "library/core/src/str/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ferror.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -72,6 +72,7 @@ impl Utf8Error {\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn valid_up_to(&self) -> usize {\n         self.valid_up_to\n     }\n@@ -92,6 +93,7 @@ impl Utf8Error {\n     ///\n     /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     #[stable(feature = \"utf8_error_error_len\", since = \"1.20.0\")]\n+    #[inline]\n     pub fn error_len(&self) -> Option<usize> {\n         self.error_len.map(|len| len as usize)\n     }"}, {"sha": "28cd350019ebf1603b200c3bb1ba64c697c8fc73", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -326,6 +326,7 @@ unsafe impl TrustedLen for Bytes<'_> {}\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n unsafe impl TrustedRandomAccess for Bytes<'_> {\n+    #[inline]\n     fn may_have_side_effect() -> bool {\n         false\n     }"}, {"sha": "ab0c8739330304d4f1d73fdc7b6efb6da814b511", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -1712,6 +1712,7 @@ impl str {\n     ///\n     /// assert_eq!(\"Hello\\tworld\", s.trim());\n     /// ```\n+    #[inline]\n     #[must_use = \"this returns the trimmed string as a slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1749,6 +1750,7 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05e2') == s.trim_start().chars().next());\n     /// ```\n+    #[inline]\n     #[must_use = \"this returns the trimmed string as a new slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n@@ -1786,6 +1788,7 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05ea') == s.trim_end().chars().rev().next());\n     /// ```\n+    #[inline]\n     #[must_use = \"this returns the trimmed string as a new slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n@@ -1824,6 +1827,7 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea\";\n     /// assert!(Some('\u05e2') == s.trim_left().chars().next());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n         since = \"1.33.0\",\n@@ -1865,6 +1869,7 @@ impl str {\n     /// let s = \"\u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05ea') == s.trim_right().chars().rev().next());\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n         since = \"1.33.0\",\n@@ -2260,6 +2265,7 @@ impl str {\n     /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s);\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n         // SAFETY: safe because we transmute two types with the same layout.\n         let me = unsafe { self.as_bytes_mut() };\n@@ -2286,6 +2292,7 @@ impl str {\n     /// assert_eq!(\"gr\u00dc\u00dfe, j\u00dcrgen \u2764\", s);\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[inline]\n     pub fn make_ascii_lowercase(&mut self) {\n         // SAFETY: safe because we transmute two types with the same layout.\n         let me = unsafe { self.as_bytes_mut() };\n@@ -2423,6 +2430,7 @@ impl AsRef<[u8]> for str {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for &str {\n     /// Creates an empty str\n+    #[inline]\n     fn default() -> Self {\n         \"\"\n     }\n@@ -2431,6 +2439,7 @@ impl Default for &str {\n #[stable(feature = \"default_mut_str\", since = \"1.28.0\")]\n impl Default for &mut str {\n     /// Creates an empty mutable str\n+    #[inline]\n     fn default() -> Self {\n         // SAFETY: The empty string is valid UTF-8.\n         unsafe { from_utf8_unchecked_mut(&mut []) }"}, {"sha": "a3d93d7074b69e00df0fea87935c5d3efb908731", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -155,6 +155,7 @@ pub struct AtomicBool {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n     /// Creates an `AtomicBool` initialized to `false`.\n+    #[inline]\n     fn default() -> Self {\n         Self::new(false)\n     }\n@@ -1212,6 +1213,7 @@ macro_rules! atomic_int {\n \n         #[$stable]\n         impl Default for $atomic_type {\n+            #[inline]\n             fn default() -> Self {\n                 Self::new(Default::default())\n             }"}, {"sha": "2c7ed4614bce9e4701c3687481852d265f440eae", "filename": "library/std/src/process.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -557,6 +557,11 @@ impl Command {\n     ///\n     /// [`args`]: Command::args\n     ///\n+    /// Note that the argument is not passed through a shell, but given\n+    /// literally to the program. This means that shell syntax like quotes,\n+    /// escaped characters, word splitting, glob patterns, substitution, etc.\n+    /// have no effect.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -582,6 +587,11 @@ impl Command {\n     ///\n     /// [`arg`]: Command::arg\n     ///\n+    /// Note that the arguments are not passed through a shell, but given\n+    /// literally to the program. This means that shell syntax like quotes,\n+    /// escaped characters, word splitting, glob patterns, substitution, etc.\n+    /// have no effect.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}, {"sha": "f1ab302d30e1e70c558b6b53a9f6bbe6fcef7661", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbaf2ae7fc5c564cacedbe55664797dc62d920/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=e8cbaf2ae7fc5c564cacedbe55664797dc62d920", "patch": "@@ -178,7 +178,8 @@ impl Thread {\n                     tv_nsec: nsecs,\n                 };\n                 secs -= ts.tv_sec as u64;\n-                if libc::nanosleep(&ts, &mut ts) == -1 {\n+                let ts_ptr = &mut ts as *mut _;\n+                if libc::nanosleep(ts_ptr, ts_ptr) == -1 {\n                     assert_eq!(os::errno(), libc::EINTR);\n                     secs += ts.tv_sec as u64;\n                     nsecs = ts.tv_nsec;"}]}