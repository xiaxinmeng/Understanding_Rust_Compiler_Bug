{"sha": "6403f913dd102ed61626c9c1c6607731915957f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDNmOTEzZGQxMDJlZDYxNjI2YzljMWM2NjA3NzMxOTE1OTU3ZjY=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-02-13T19:44:37Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-02-13T19:44:37Z"}, "message": "Fixes #28528\nFix `read_link` to also be able to read the target of junctions on Windows.\nAlso the path returned should not include a NT namespace, and there were\nsome problems with permissions.", "tree": {"sha": "b8da7a8bf800fb72211db9044204c7f1d751ccb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8da7a8bf800fb72211db9044204c7f1d751ccb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6403f913dd102ed61626c9c1c6607731915957f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6403f913dd102ed61626c9c1c6607731915957f6", "html_url": "https://github.com/rust-lang/rust/commit/6403f913dd102ed61626c9c1c6607731915957f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6403f913dd102ed61626c9c1c6607731915957f6/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5367776bd123789a0cc7c9ab38f979c8455b0edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5367776bd123789a0cc7c9ab38f979c8455b0edd", "html_url": "https://github.com/rust-lang/rust/commit/5367776bd123789a0cc7c9ab38f979c8455b0edd"}], "stats": {"total": 150, "additions": 92, "deletions": 58}, "files": [{"sha": "badbba21d55cc9ddfbf7c55f266a7be4760550ea", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6403f913dd102ed61626c9c1c6607731915957f6/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6403f913dd102ed61626c9c1c6607731915957f6/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6403f913dd102ed61626c9c1c6607731915957f6", "patch": "@@ -2151,6 +2151,26 @@ mod tests {\n                    \"foo\");\n     }\n \n+    #[test]\n+    fn read_link() {\n+        if cfg!(windows) {\n+            // directory symlink\n+            assert_eq!(check!(fs::read_link(r\"C:\\Users\\All Users\")).to_str().unwrap(),\n+                       r\"C:\\ProgramData\");\n+            // junction\n+            assert_eq!(check!(fs::read_link(r\"C:\\Users\\Default User\")).to_str().unwrap(),\n+                       r\"C:\\Users\\Default\");\n+            // junction with special permissions\n+            assert_eq!(check!(fs::read_link(r\"C:\\Documents and Settings\\\")).to_str().unwrap(),\n+                       r\"C:\\Users\");\n+        }\n+        let tmpdir = tmpdir();\n+        let link = tmpdir.join(\"link\");\n+        if !got_symlink_permission(&tmpdir) { return };\n+        check!(symlink_file(&\"foo\", &link));\n+        assert_eq!(check!(fs::read_link(&link)).to_str().unwrap(), \"foo\");\n+    }\n+\n     #[test]\n     fn readlink_not_symlink() {\n         let tmpdir = tmpdir();"}, {"sha": "d25d8e0b8048d9ba6f9b7ef03759312d2df8f376", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6403f913dd102ed61626c9c1c6607731915957f6/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6403f913dd102ed61626c9c1c6607731915957f6/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=6403f913dd102ed61626c9c1c6607731915957f6", "patch": "@@ -240,6 +240,7 @@ pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: usize = 16 * 1024;\n pub const FSCTL_GET_REPARSE_POINT: DWORD = 0x900a8;\n pub const IO_REPARSE_TAG_SYMLINK: DWORD = 0xa000000c;\n pub const IO_REPARSE_TAG_MOUNT_POINT: DWORD = 0xa0000003;\n+pub const SYMLINK_FLAG_RELATIVE: DWORD = 0x00000001;\n pub const FSCTL_SET_REPARSE_POINT: DWORD = 0x900a4;\n pub const FSCTL_DELETE_REPARSE_POINT: DWORD = 0x900ac;\n \n@@ -533,6 +534,15 @@ pub struct SYMBOLIC_LINK_REPARSE_BUFFER {\n     pub PathBuffer: WCHAR,\n }\n \n+#[repr(C)]\n+pub struct MOUNT_POINT_REPARSE_BUFFER {\n+    pub SubstituteNameOffset: c_ushort,\n+    pub SubstituteNameLength: c_ushort,\n+    pub PrintNameOffset: c_ushort,\n+    pub PrintNameLength: c_ushort,\n+    pub PathBuffer: WCHAR,\n+}\n+\n pub type LPPROGRESS_ROUTINE = ::option::Option<unsafe extern \"system\" fn(\n     TotalFileSize: LARGE_INTEGER,\n     TotalBytesTransferred: LARGE_INTEGER,"}, {"sha": "d4d95a12f81c42a00be3d76007f6ff2e6990df4e", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 62, "deletions": 58, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/6403f913dd102ed61626c9c1c6607731915957f6/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6403f913dd102ed61626c9c1c6607731915957f6/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=6403f913dd102ed61626c9c1c6607731915957f6", "patch": "@@ -150,7 +150,12 @@ impl DirEntry {\n                 nFileSizeHigh: self.data.nFileSizeHigh,\n                 nFileSizeLow: self.data.nFileSizeLow,\n             },\n-            reparse_tag: self.data.dwReserved0,\n+            reparse_tag: if self.data.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n+                    // reserved unless this is a reparse point\n+                    self.data.dwReserved0\n+                } else {\n+                    0\n+                },\n         })\n     }\n }\n@@ -240,15 +245,6 @@ impl OpenOptions {\n }\n \n impl File {\n-    fn open_reparse_point(path: &Path, write: bool) -> io::Result<File> {\n-        let mut opts = OpenOptions::new();\n-        opts.read(!write);\n-        opts.write(write);\n-        opts.custom_flags(c::FILE_FLAG_OPEN_REPARSE_POINT |\n-                          c::FILE_FLAG_BACKUP_SEMANTICS);\n-        File::open(path, &opts)\n-    }\n-\n     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {\n         let path = try!(to_u16s(path));\n         let handle = unsafe {\n@@ -371,19 +367,34 @@ impl File {\n     fn readlink(&self) -> io::Result<PathBuf> {\n         let mut space = [0u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n         let (_bytes, buf) = try!(self.reparse_point(&mut space));\n-        if buf.ReparseTag != c::IO_REPARSE_TAG_SYMLINK {\n-            return Err(io::Error::new(io::ErrorKind::Other, \"not a symlink\"))\n-        }\n-\n         unsafe {\n-            let info: *const c::SYMBOLIC_LINK_REPARSE_BUFFER =\n-                    &buf.rest as *const _ as *const _;\n-            let path_buffer = &(*info).PathBuffer as *const _ as *const u16;\n-            let subst_off = (*info).SubstituteNameOffset / 2;\n+            let (path_buffer, subst_off, subst_len, relative) = match buf.ReparseTag {\n+                c::IO_REPARSE_TAG_SYMLINK => {\n+                    let info: *const c::SYMBOLIC_LINK_REPARSE_BUFFER =\n+                        &buf.rest as *const _ as *const _;\n+                    (&(*info).PathBuffer as *const _ as *const u16,\n+                     (*info).SubstituteNameOffset / 2,\n+                     (*info).SubstituteNameLength / 2,\n+                     (*info).Flags & c::SYMLINK_FLAG_RELATIVE != 0)\n+                },\n+                c::IO_REPARSE_TAG_MOUNT_POINT => {\n+                    let info: *const c::MOUNT_POINT_REPARSE_BUFFER =\n+                        &buf.rest as *const _ as *const _;\n+                    (&(*info).PathBuffer as *const _ as *const u16,\n+                     (*info).SubstituteNameOffset / 2,\n+                     (*info).SubstituteNameLength / 2,\n+                     false)\n+                },\n+                _ => return Err(io::Error::new(io::ErrorKind::Other,\n+                                               \"Unsupported reparse point type\"))\n+            };\n             let subst_ptr = path_buffer.offset(subst_off as isize);\n-            let subst_len = (*info).SubstituteNameLength / 2;\n-            let subst = slice::from_raw_parts(subst_ptr, subst_len as usize);\n-\n+            let mut subst = slice::from_raw_parts(subst_ptr, subst_len as usize);\n+            // Absolute paths start with an NT internal namespace prefix `\\??\\`\n+            // We should not let it leak through.\n+            if !relative && subst.starts_with(&[92u16, 63u16, 63u16, 92u16]) {\n+                subst = &subst[4..];\n+            }\n             Ok(PathBuf::from(OsString::from_wide(subst)))\n         }\n     }\n@@ -577,8 +588,15 @@ fn remove_dir_all_recursive(path: &Path) -> io::Result<()> {\n     rmdir(path)\n }\n \n-pub fn readlink(p: &Path) -> io::Result<PathBuf> {\n-    let file = try!(File::open_reparse_point(p, false));\n+pub fn readlink(path: &Path) -> io::Result<PathBuf> {\n+    // Open the link with no access mode, instead of generic read.\n+    // By default FILE_LIST_DIRECTORY is denied for the junction \"C:\\Documents and Settings\", so\n+    // this is needed for a common case.\n+    let mut opts = OpenOptions::new();\n+    opts.access_mode(0);\n+    opts.custom_flags(c::FILE_FLAG_OPEN_REPARSE_POINT |\n+                      c::FILE_FLAG_BACKUP_SEMANTICS);\n+    let file = try!(File::open(&path, &opts));\n     file.readlink()\n }\n \n@@ -605,42 +623,23 @@ pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n     Ok(())\n }\n \n-pub fn stat(p: &Path) -> io::Result<FileAttr> {\n-    let attr = try!(lstat(p));\n-\n-    // If this is a reparse point, then we need to reopen the file to get the\n-    // actual destination. We also pass the FILE_FLAG_BACKUP_SEMANTICS flag to\n-    // ensure that we can open directories (this path may be a directory\n-    // junction). Once the file is opened we ask the opened handle what its\n-    // metadata information is.\n-    if attr.is_reparse_point() {\n-        let mut opts = OpenOptions::new();\n-        // No read or write permissions are necessary\n-        opts.access_mode(0);\n-        // This flag is so we can open directories too\n-        opts.custom_flags(c::FILE_FLAG_BACKUP_SEMANTICS);\n-        let file = try!(File::open(p, &opts));\n-        file.file_attr()\n-    } else {\n-        Ok(attr)\n-    }\n+pub fn stat(path: &Path) -> io::Result<FileAttr> {\n+    let mut opts = OpenOptions::new();\n+    // No read or write permissions are necessary\n+    opts.access_mode(0);\n+    // This flag is so we can open directories too\n+    opts.custom_flags(c::FILE_FLAG_BACKUP_SEMANTICS);\n+    let file = try!(File::open(path, &opts));\n+    file.file_attr()\n }\n \n-pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n-    let u16s = try!(to_u16s(p));\n-    unsafe {\n-        let mut attr: FileAttr = mem::zeroed();\n-        try!(cvt(c::GetFileAttributesExW(u16s.as_ptr(),\n-                                         c::GetFileExInfoStandard,\n-                                         &mut attr.data as *mut _ as *mut _)));\n-        if attr.is_reparse_point() {\n-            attr.reparse_tag = File::open_reparse_point(p, false).and_then(|f| {\n-                let mut b = [0; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n-                f.reparse_point(&mut b).map(|(_, b)| b.ReparseTag)\n-            }).unwrap_or(0);\n-        }\n-        Ok(attr)\n-    }\n+pub fn lstat(path: &Path) -> io::Result<FileAttr> {\n+    let mut opts = OpenOptions::new();\n+    // No read or write permissions are necessary\n+    opts.access_mode(0);\n+    opts.custom_flags(c::FILE_FLAG_BACKUP_SEMANTICS | c::FILE_FLAG_OPEN_REPARSE_POINT);\n+    let file = try!(File::open(path, &opts));\n+    file.file_attr()\n }\n \n pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {\n@@ -709,7 +708,12 @@ pub fn symlink_junction<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::R\n fn symlink_junction_inner(target: &Path, junction: &Path) -> io::Result<()> {\n     let d = DirBuilder::new();\n     try!(d.mkdir(&junction));\n-    let f = try!(File::open_reparse_point(junction, true));\n+\n+    let mut opts = OpenOptions::new();\n+    opts.write(true);\n+    opts.custom_flags(c::FILE_FLAG_OPEN_REPARSE_POINT |\n+                      c::FILE_FLAG_BACKUP_SEMANTICS);\n+    let f = try!(File::open(junction, &opts));\n     let h = f.handle().raw();\n \n     unsafe {"}]}