{"sha": "11f19b784923ac701bc6fc39a6aea712f0091bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjE5Yjc4NDkyM2FjNzAxYmM2ZmMzOWE2YWVhNzEyZjAwOTFiZjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T14:51:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T14:51:02Z"}, "message": "name res uses paths", "tree": {"sha": "6a5b5ba2543bc52d10501d41a8514bae68b78c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5b5ba2543bc52d10501d41a8514bae68b78c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f19b784923ac701bc6fc39a6aea712f0091bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f19b784923ac701bc6fc39a6aea712f0091bf7", "html_url": "https://github.com/rust-lang/rust/commit/11f19b784923ac701bc6fc39a6aea712f0091bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f19b784923ac701bc6fc39a6aea712f0091bf7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a87a24f8288d905428db755c7ea806640b6ac1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a87a24f8288d905428db755c7ea806640b6ac1d", "html_url": "https://github.com/rust-lang/rust/commit/5a87a24f8288d905428db755c7ea806640b6ac1d"}], "stats": {"total": 121, "additions": 74, "deletions": 47}, "files": [{"sha": "a96570415be8e42cacca02546c6f963b4bd24fcf", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 22, "deletions": 42, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=11f19b784923ac701bc6fc39a6aea712f0091bf7", "patch": "@@ -10,8 +10,11 @@ use ra_syntax::{\n use crate::{\n     db::RootDatabase,\n     completion::CompletionItem,\n-    descriptors::module::{ModuleDescriptor},\n-    descriptors::function::FnScopes,\n+    descriptors::{\n+        module::{ModuleDescriptor},\n+        function::FnScopes,\n+        Path, PathKind,\n+    },\n     Cancelable\n };\n \n@@ -55,7 +58,7 @@ pub(super) fn completions(\n                     }),\n             );\n         }\n-        NameRefKind::CratePath(path) => complete_path(acc, db, module, path)?,\n+        NameRefKind::Path(path) => complete_path(acc, db, module, path)?,\n         NameRefKind::BareIdentInMod => {\n             let name_range = name_ref.syntax().range();\n             let top_node = name_ref\n@@ -79,8 +82,8 @@ enum NameRefKind<'a> {\n     LocalRef {\n         enclosing_fn: Option<ast::FnDef<'a>>,\n     },\n-    /// NameRef is the last segment in crate:: path\n-    CratePath(Vec<ast::NameRef<'a>>),\n+    /// NameRef is the last segment in some path\n+    Path(Path),\n     /// NameRef is bare identifier at the module's root.\n     /// Used for keyword completion\n     BareIdentInMod,\n@@ -102,8 +105,10 @@ fn classify_name_ref(name_ref: ast::NameRef) -> Option<NameRefKind> {\n     let parent = name_ref.syntax().parent()?;\n     if let Some(segment) = ast::PathSegment::cast(parent) {\n         let path = segment.parent_path();\n-        if let Some(crate_path) = crate_path(path) {\n-            return Some(NameRefKind::CratePath(crate_path));\n+        if let Some(path) = Path::from_ast(path) {\n+            if !path.is_ident() {\n+                return Some(NameRefKind::Path(path));\n+            }\n         }\n         if path.qualifier().is_none() {\n             let enclosing_fn = name_ref\n@@ -117,32 +122,6 @@ fn classify_name_ref(name_ref: ast::NameRef) -> Option<NameRefKind> {\n     None\n }\n \n-fn crate_path(mut path: ast::Path) -> Option<Vec<ast::NameRef>> {\n-    let mut res = Vec::new();\n-    loop {\n-        let segment = path.segment()?;\n-        match segment.kind()? {\n-            ast::PathSegmentKind::Name(name) => res.push(name),\n-            ast::PathSegmentKind::CrateKw => break,\n-            ast::PathSegmentKind::SelfKw | ast::PathSegmentKind::SuperKw => return None,\n-        }\n-        path = qualifier(path)?;\n-    }\n-    res.reverse();\n-    return Some(res);\n-\n-    fn qualifier(path: ast::Path) -> Option<ast::Path> {\n-        if let Some(q) = path.qualifier() {\n-            return Some(q);\n-        }\n-        // TODO: this bottom up traversal is not too precise.\n-        // Should we handle do a top-down analysiss, recording results?\n-        let use_tree_list = path.syntax().ancestors().find_map(ast::UseTreeList::cast)?;\n-        let use_tree = use_tree_list.parent_use_tree();\n-        use_tree.path()\n-    }\n-}\n-\n fn complete_fn(name_ref: ast::NameRef, scopes: &FnScopes, acc: &mut Vec<CompletionItem>) {\n     let mut shadowed = FxHashSet::default();\n     acc.extend(\n@@ -169,9 +148,9 @@ fn complete_path(\n     acc: &mut Vec<CompletionItem>,\n     db: &RootDatabase,\n     module: &ModuleDescriptor,\n-    crate_path: Vec<ast::NameRef>,\n+    path: Path,\n ) -> Cancelable<()> {\n-    let target_module = match find_target_module(module, crate_path) {\n+    let target_module = match find_target_module(module, path) {\n         None => return Ok(()),\n         Some(it) => it,\n     };\n@@ -188,14 +167,15 @@ fn complete_path(\n     Ok(())\n }\n \n-fn find_target_module(\n-    module: &ModuleDescriptor,\n-    mut crate_path: Vec<ast::NameRef>,\n-) -> Option<ModuleDescriptor> {\n-    crate_path.pop();\n+fn find_target_module(module: &ModuleDescriptor, path: Path) -> Option<ModuleDescriptor> {\n+    if path.kind != PathKind::Crate {\n+        return None;\n+    }\n+    let mut segments = path.segments;\n+    segments.pop();\n     let mut target_module = module.crate_root();\n-    for name in crate_path {\n-        target_module = target_module.child(name.text().as_str())?;\n+    for name in segments {\n+        target_module = target_module.child(&name)?;\n     }\n     Some(target_module)\n }"}, {"sha": "97750ea6462f8c2fed0b3c8965f52dc056710194", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=11f19b784923ac701bc6fc39a6aea712f0091bf7", "patch": "@@ -5,7 +5,7 @@ mod path;\n use std::sync::Arc;\n \n use ra_syntax::{\n-    ast::{self, FnDefNode},\n+    ast::{self, FnDefNode, AstNode},\n     TextRange,\n };\n "}, {"sha": "4c555421df69bfebcbebb51a2a1e2cdc753bf5f4", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=11f19b784923ac701bc6fc39a6aea712f0091bf7", "patch": "@@ -23,7 +23,7 @@ use rustc_hash::FxHashMap;\n \n use ra_syntax::{\n     SmolStr, SyntaxKind::{self, *},\n-    ast::{self, AstNode, ModuleItemOwner}\n+    ast::{self, ModuleItemOwner}\n };\n \n use crate::{\n@@ -309,7 +309,7 @@ where\n \n         let mut curr = match import.path.kind {\n             // TODO: handle extern crates\n-            PathKind::Abs => return,\n+            PathKind::Plain => return,\n             PathKind::Self_ => module_id,\n             PathKind::Super => {\n                 match module_id.parent(&self.module_tree) {"}, {"sha": "99fca18b17bd92b05156b86b3e79efda57020962", "filename": "crates/ra_analysis/src/descriptors/path.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f19b784923ac701bc6fc39a6aea712f0091bf7/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fpath.rs?ref=11f19b784923ac701bc6fc39a6aea712f0091bf7", "patch": "@@ -10,13 +10,14 @@ pub(crate) struct Path {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub(crate) enum PathKind {\n-    Abs,\n+    Plain,\n     Self_,\n     Super,\n     Crate,\n }\n \n impl Path {\n+    /// Calls `cb` with all paths, represented by this use item.\n     pub(crate) fn expand_use_item(\n         item: ast::UseItem,\n         mut cb: impl FnMut(Path, Option<LocalSyntaxPtr>),\n@@ -25,6 +26,52 @@ impl Path {\n             expand_use_tree(None, tree, &mut cb);\n         }\n     }\n+\n+    /// Converts an `ast::Path` to `Path`. Works with use trees.\n+    pub(crate) fn from_ast(mut path: ast::Path) -> Option<Path> {\n+        let mut kind = PathKind::Plain;\n+        let mut segments = Vec::new();\n+        loop {\n+            let segment = path.segment()?;\n+            match segment.kind()? {\n+                ast::PathSegmentKind::Name(name) => segments.push(name.text()),\n+                ast::PathSegmentKind::CrateKw => {\n+                    kind = PathKind::Crate;\n+                    break;\n+                }\n+                ast::PathSegmentKind::SelfKw => {\n+                    kind = PathKind::Self_;\n+                    break;\n+                }\n+                ast::PathSegmentKind::SuperKw => {\n+                    kind = PathKind::Super;\n+                    break;\n+                }\n+            }\n+            path = match qualifier(path) {\n+                Some(it) => it,\n+                None => break,\n+            };\n+        }\n+        segments.reverse();\n+        return Some(Path { kind, segments });\n+\n+        fn qualifier(path: ast::Path) -> Option<ast::Path> {\n+            if let Some(q) = path.qualifier() {\n+                return Some(q);\n+            }\n+            // TODO: this bottom up traversal is not too precise.\n+            // Should we handle do a top-down analysiss, recording results?\n+            let use_tree_list = path.syntax().ancestors().find_map(ast::UseTreeList::cast)?;\n+            let use_tree = use_tree_list.parent_use_tree();\n+            use_tree.path()\n+        }\n+    }\n+\n+    /// `true` is this path is a single identifier, like `foo`\n+    pub(crate) fn is_ident(&self) -> bool {\n+        self.kind == PathKind::Plain && self.segments.len() == 1\n+    }\n }\n \n fn expand_use_tree(\n@@ -68,7 +115,7 @@ fn convert_path(prefix: Option<Path>, path: ast::Path) -> Option<Path> {\n     let res = match segment.kind()? {\n         ast::PathSegmentKind::Name(name) => {\n             let mut res = prefix.unwrap_or_else(|| Path {\n-                kind: PathKind::Abs,\n+                kind: PathKind::Plain,\n                 segments: Vec::with_capacity(1),\n             });\n             res.segments.push(name.text());"}]}