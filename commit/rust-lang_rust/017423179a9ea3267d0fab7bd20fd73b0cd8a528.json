{"sha": "017423179a9ea3267d0fab7bd20fd73b0cd8a528", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNzQyMzE3OWE5ZWEzMjY3ZDBmYWI3YmQyMGZkNzNiMGNkOGE1Mjg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T16:04:44Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T16:04:44Z"}, "message": "Make sure we report a future incompat error in all cases", "tree": {"sha": "179f501af4b04220416e22fee3ea7cfd7de35688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/179f501af4b04220416e22fee3ea7cfd7de35688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017423179a9ea3267d0fab7bd20fd73b0cd8a528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017423179a9ea3267d0fab7bd20fd73b0cd8a528", "html_url": "https://github.com/rust-lang/rust/commit/017423179a9ea3267d0fab7bd20fd73b0cd8a528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017423179a9ea3267d0fab7bd20fd73b0cd8a528/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a33de017007233346c26a6f7b20c3e35e6b9e90", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a33de017007233346c26a6f7b20c3e35e6b9e90", "html_url": "https://github.com/rust-lang/rust/commit/6a33de017007233346c26a6f7b20c3e35e6b9e90"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "cf731a076ff0a3dce59493809083965bffcfcf38", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/017423179a9ea3267d0fab7bd20fd73b0cd8a528/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017423179a9ea3267d0fab7bd20fd73b0cd8a528/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=017423179a9ea3267d0fab7bd20fd73b0cd8a528", "patch": "@@ -408,7 +408,25 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // this pattern to a `PartialEq::eq` comparison and `PartialEq::eq` takes a\n                 // reference. This makes the rest of the matching logic simpler as it doesn't have\n                 // to figure out how to get a reference again.\n-                ty::Adt(..) if !self.type_marked_structural(pointee_ty) => {\n+                ty::Adt(adt_def, _) if !self.type_marked_structural(pointee_ty) => {\n+                    if self.include_lint_checks\n+                        && !self.saw_const_match_error.get()\n+                        && !self.saw_const_match_lint.get()\n+                    {\n+                        self.saw_const_match_lint.set(true);\n+                        let path = self.tcx().def_path_str(adt_def.did);\n+                        let msg = format!(\n+                            \"to use a constant of type `{}` in a pattern, \\\n+                             `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                            path, path,\n+                        );\n+                        self.tcx().struct_span_lint_hir(\n+                            lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n+                            self.id,\n+                            self.span,\n+                            |lint| lint.build(&msg).emit(),\n+                        );\n+                    }\n                     PatKind::Constant { value: cv }\n                 }\n                 // All other references are converted into deref patterns and then recursively"}, {"sha": "c46f2c2e972368afa6fb961c5cea767aed270e84", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=017423179a9ea3267d0fab7bd20fd73b0cd8a528", "patch": "@@ -1,12 +1,12 @@\n-warning: to use a constant of type `&S` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/match_ice.rs:11:9\n    |\n LL |         C => {}\n    |         ^\n    |\n-   = note: `#[warn(nontrivial_structural_match)]` on by default\n+   = note: `#[warn(indirect_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/match_ice.rs:11:9"}, {"sha": "659a9812672330b8ead5893c3e64a67e2629fb4e", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=017423179a9ea3267d0fab7bd20fd73b0cd8a528", "patch": "@@ -1,12 +1,16 @@\n-warning: to use a constant of type `&&WrapInline` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:24:9\n    |\n LL |         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(nontrivial_structural_match)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n warning: 1 warning emitted\n "}, {"sha": "c8c36510542a2d47378b60bda79bd661a23c9d45", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=017423179a9ea3267d0fab7bd20fd73b0cd8a528", "patch": "@@ -1,12 +1,16 @@\n-warning: to use a constant of type `&&WrapParam<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/cant-hide-behind-doubly-indirect-param.rs:24:9\n    |\n LL |         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[warn(nontrivial_structural_match)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/cant-hide-behind-doubly-indirect-param.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n warning: 1 warning emitted\n "}, {"sha": "a50093a5b1128bc225f42adc76f561ff6a083342", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/017423179a9ea3267d0fab7bd20fd73b0cd8a528/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=017423179a9ea3267d0fab7bd20fd73b0cd8a528", "patch": "@@ -1,25 +1,25 @@\n-warning: to use a constant of type `&&B` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:31:9\n    |\n LL |         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0); }\n    |         ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:36\n+  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:9\n    |\n LL | #![warn(indirect_structural_match, nontrivial_structural_match)]\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n-warning: to use a constant of type `&&B` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:38:9\n    |\n LL |         RR_B1 => { println!(\"CLAIM RR1: {:?} matches {:?}\", RR_B1, RR_B1); }\n    |         ^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n warning: 2 warnings emitted\n "}]}