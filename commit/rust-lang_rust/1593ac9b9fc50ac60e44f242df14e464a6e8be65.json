{"sha": "1593ac9b9fc50ac60e44f242df14e464a6e8be65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTNhYzliOWZjNTBhYzYwZTQ0ZjI0MmRmMTRlNDY0YTZlOGJlNjU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-19T19:33:41Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-19T19:33:41Z"}, "message": "Don't ignore `_` in type casts and ascriptions", "tree": {"sha": "6ed4bd030b55cd06b539344df5aad9632fc1a7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed4bd030b55cd06b539344df5aad9632fc1a7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1593ac9b9fc50ac60e44f242df14e464a6e8be65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1593ac9b9fc50ac60e44f242df14e464a6e8be65", "html_url": "https://github.com/rust-lang/rust/commit/1593ac9b9fc50ac60e44f242df14e464a6e8be65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1593ac9b9fc50ac60e44f242df14e464a6e8be65/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c76e55747b88949634438b6ed2e3f4dd24e799fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c76e55747b88949634438b6ed2e3f4dd24e799fc", "html_url": "https://github.com/rust-lang/rust/commit/c76e55747b88949634438b6ed2e3f4dd24e799fc"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "19e3d6bcaab587729b827d491db744f60de29fb8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1593ac9b9fc50ac60e44f242df14e464a6e8be65", "patch": "@@ -2437,9 +2437,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // types that involve projections, since those can resolve to\n         // `'static` bounds (modulo #54940, which hopefully will be\n         // fixed by the time you see this comment, dear reader,\n-        // although I have my doubts). Other sorts of things are\n-        // already sufficiently enforced with erased regions. =)\n-        if ty.has_free_regions() || ty.has_projections() {\n+        // although I have my doubts). Also pass in types with inference\n+        // types, because they may be repeated. Other sorts of things\n+        // are already sufficiently enforced with erased regions. =)\n+        if ty.has_free_regions() || ty.has_projections() || ty.has_infer_types() {\n             let c_ty = self.infcx.canonicalize_response(&UserType::Ty(ty));\n             debug!(\"to_ty_saving_user_provided_ty: c_ty={:?}\", c_ty);\n             self.tables.borrow_mut().user_provided_types_mut().insert(ast_ty.hir_id, c_ty);"}, {"sha": "bb794409ae01f635c02baa4cf814d749db2ba570", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=1593ac9b9fc50ac60e44f242df14e464a6e8be65", "patch": "@@ -75,18 +75,18 @@ fn main() {\n //         _10 = move _8;\n //         Retag(_10);\n //         ...\n-//         _14 = &mut (*_10);\n-//         Retag(_14);\n-//         _13 = move _14 as *mut i32 (Misc);\n-//         Retag([raw] _13);\n+//         _15 = &mut (*_10);\n+//         Retag(_15);\n+//         _14 = move _15 as *mut i32 (Misc);\n+//         Retag([raw] _14);\n //         ...\n-//         _17 = move _18(move _19) -> bb2;\n+//         _18 = move _19(move _20) -> bb2;\n //     }\n //\n //     bb2: {\n-//         Retag(_17);\n+//         Retag(_18);\n //         ...\n-//         _21 = const Test::foo_shr(move _22, move _24) -> bb3;\n+//         _22 = const Test::foo_shr(move _23, move _25) -> bb3;\n //     }\n //\n //     bb3: {"}, {"sha": "f4969bb4067c79218e80a2d7000018da69915c81", "filename": "src/test/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.rs?ref=1593ac9b9fc50ac60e44f242df14e464a6e8be65", "patch": "@@ -0,0 +1,40 @@\n+// Check that repeated type variables are correctly handled\n+\n+#![allow(unused)]\n+#![feature(nll, type_ascription)]\n+\n+type PairUncoupled<'a, 'b, T> = (&'a T, &'b T);\n+type PairCoupledTypes<T> = (T, T);\n+type PairCoupledRegions<'a, T> = (&'a T, &'a T);\n+\n+fn uncoupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),) = ((s, _x),): (PairUncoupled<_>,);\n+    y // OK\n+}\n+\n+fn coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),) = ((s, _x),): (PairCoupledTypes<_>,);\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),) = ((s, _x),): (PairCoupledRegions<_>,);\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn cast_uncoupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),) = ((s, _x),) as (PairUncoupled<_>,);\n+    y // OK\n+}\n+\n+fn cast_coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),) = ((s, _x),) as (PairCoupledTypes<_>,);\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn cast_coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),) = ((s, _x),) as (PairCoupledRegions<_>,);\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "76be637220a1505b259356180441471ec4bce6d2", "filename": "src/test/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1593ac9b9fc50ac60e44f242df14e464a6e8be65/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr?ref=1593ac9b9fc50ac60e44f242df14e464a6e8be65", "patch": "@@ -0,0 +1,38 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-57731-ascibed-coupled-types.rs:17:5\n+   |\n+LL | fn coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                      -- lifetime `'a` defined here\n+LL |     let ((y, _z),) = ((s, _x),): (PairCoupledTypes<_>,);\n+LL |     y //~ ERROR lifetime may not live long enough\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-57731-ascibed-coupled-types.rs:22:5\n+   |\n+LL | fn coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                        -- lifetime `'a` defined here\n+LL |     let ((y, _z),) = ((s, _x),): (PairCoupledRegions<_>,);\n+LL |     y //~ ERROR lifetime may not live long enough\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-57731-ascibed-coupled-types.rs:32:5\n+   |\n+LL | fn cast_coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                           -- lifetime `'a` defined here\n+LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledTypes<_>,);\n+LL |     y //~ ERROR lifetime may not live long enough\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-57731-ascibed-coupled-types.rs:37:5\n+   |\n+LL | fn cast_coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                             -- lifetime `'a` defined here\n+LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledRegions<_>,);\n+LL |     y //~ ERROR lifetime may not live long enough\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 4 previous errors\n+"}]}