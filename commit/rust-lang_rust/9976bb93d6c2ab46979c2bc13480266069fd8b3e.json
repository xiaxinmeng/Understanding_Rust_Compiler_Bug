{"sha": "9976bb93d6c2ab46979c2bc13480266069fd8b3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NzZiYjkzZDZjMmFiNDY5NzljMmJjMTM0ODAyNjYwNjlmZDhiM2U=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T23:50:58Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T23:50:58Z"}, "message": "Support the space flag in #fmt", "tree": {"sha": "036dee6d7f8d2b9f96b6611d407caf687f755cd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/036dee6d7f8d2b9f96b6611d407caf687f755cd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9976bb93d6c2ab46979c2bc13480266069fd8b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9976bb93d6c2ab46979c2bc13480266069fd8b3e", "html_url": "https://github.com/rust-lang/rust/commit/9976bb93d6c2ab46979c2bc13480266069fd8b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9976bb93d6c2ab46979c2bc13480266069fd8b3e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86a43c24d627131c7c543ffc2df7793939141404", "url": "https://api.github.com/repos/rust-lang/rust/commits/86a43c24d627131c7c543ffc2df7793939141404", "html_url": "https://github.com/rust-lang/rust/commit/86a43c24d627131c7c543ffc2df7793939141404"}], "stats": {"total": 76, "additions": 53, "deletions": 23}, "files": [{"sha": "287c7e552ec1d45fd5be0d3dbfae28fb13b6188d", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9976bb93d6c2ab46979c2bc13480266069fd8b3e/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9976bb93d6c2ab46979c2bc13480266069fd8b3e/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=9976bb93d6c2ab46979c2bc13480266069fd8b3e", "patch": "@@ -28,7 +28,7 @@ import std.ExtFmt.CT.ty_hex;\n import std.ExtFmt.CT.flag;\n import std.ExtFmt.CT.flag_left_justify;\n import std.ExtFmt.CT.flag_left_zero_pad;\n-import std.ExtFmt.CT.flag_left_space_pad;\n+import std.ExtFmt.CT.flag_space_for_sign;\n import std.ExtFmt.CT.flag_sign_always;\n import std.ExtFmt.CT.flag_alternate;\n import std.ExtFmt.CT.count;\n@@ -180,6 +180,10 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                         auto fstr = \"flag_sign_always\";\n                         flagexprs += vec(make_rt_path_expr(sp, fstr));\n                     }\n+                    case (flag_space_for_sign) {\n+                        auto fstr = \"flag_space_for_sign\";\n+                        flagexprs += vec(make_rt_path_expr(sp, fstr));\n+                    }\n                 }\n             }\n \n@@ -268,6 +272,25 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n \n     fn make_new_conv(conv cnv, @ast.expr arg) -> @ast.expr {\n \n+        // FIXME: Extract all this validation into ExtFmt.CT\n+        fn is_signed_type(conv cnv) -> bool {\n+            alt (cnv.ty) {\n+                case (ty_int(?s)) {\n+                    alt (s) {\n+                        case (signed) {\n+                            ret true;\n+                        }\n+                        case (unsigned) {\n+                            ret false;\n+                        }\n+                    }\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n         auto unsupported = \"conversion not supported in #fmt string\";\n \n         alt (cnv.param) {\n@@ -284,23 +307,16 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                 case (flag_left_justify) {\n                 }\n                 case (flag_sign_always) {\n-                    auto err = \"+ flag only valid in signed #fmt conversions\";\n-                    alt (cnv.ty) {\n-                        case (ty_int(?s)) {\n-                            alt (s) {\n-                                case (signed) {\n-                                    // Valid\n-                                }\n-                                case (unsigned) {\n-                                    log err;\n-                                    fail;\n-                                }\n-                            }\n-                        }\n-                        case (_) {\n-                            log err;\n-                            fail;\n-                        }\n+                    if (!is_signed_type(cnv)) {\n+                        log \"+ flag only valid in signed #fmt conversions\";\n+                        fail;\n+                    }\n+                }\n+                case (flag_space_for_sign) {\n+                    if (!is_signed_type(cnv)) {\n+                        log \"space flag only valid in \"\n+                            + \"signed #fmt conversions\";\n+                        fail;\n                     }\n                 }\n                 case (_) {\n@@ -382,7 +398,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                 case (flag_left_zero_pad) {\n                     log \"flag: left zero pad\";\n                 }\n-                case (flag_left_space_pad) {\n+                case (flag_space_for_sign) {\n                     log \"flag: left space pad\";\n                 }\n                 case (flag_sign_always) {"}, {"sha": "c6ddad303950c3f5b6c08692ea993ef6d9bfe0c2", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9976bb93d6c2ab46979c2bc13480266069fd8b3e/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9976bb93d6c2ab46979c2bc13480266069fd8b3e/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=9976bb93d6c2ab46979c2bc13480266069fd8b3e", "patch": "@@ -52,7 +52,7 @@ mod CT {\n     tag flag {\n         flag_left_justify;\n         flag_left_zero_pad;\n-        flag_left_space_pad;\n+        flag_space_for_sign;\n         flag_sign_always;\n         flag_alternate;\n     }\n@@ -201,7 +201,7 @@ mod CT {\n         } else if (f == ('0' as u8)) {\n             ret more(flag_left_zero_pad);\n         } else if (f == (' ' as u8)) {\n-            ret more(flag_left_space_pad);\n+            ret more(flag_space_for_sign);\n         } else if (f == ('+' as u8)) {\n             ret more(flag_sign_always);\n         } else if (f == ('#' as u8)) {\n@@ -306,6 +306,7 @@ mod RT {\n \n     tag flag {\n         flag_left_justify;\n+        flag_space_for_sign;\n         flag_sign_always;\n         // FIXME: This is a hack to avoid creating 0-length vec exprs,\n         // which have some difficulty typechecking currently. See\n@@ -336,8 +337,12 @@ mod RT {\n         auto radix = 10u;\n         auto prec = get_int_precision(cv);\n         auto s = int_to_str_prec(i, radix, prec);\n-        if (0 <= i && have_flag(cv.flags, flag_sign_always)) {\n-            s = \"+\" + s;\n+        if (0 <= i) {\n+            if (have_flag(cv.flags, flag_sign_always)) {\n+                s = \"+\" + s;\n+            } else if (have_flag(cv.flags, flag_space_for_sign)) {\n+                s = \" \" + s;\n+            }\n         }\n         ret pad(cv, s);\n     }"}, {"sha": "61143e4aac8887061ccaa4716be41b057f8001cb", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9976bb93d6c2ab46979c2bc13480266069fd8b3e/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9976bb93d6c2ab46979c2bc13480266069fd8b3e/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=9976bb93d6c2ab46979c2bc13480266069fd8b3e", "patch": "@@ -117,4 +117,13 @@ fn main() {\n   test(#fmt(\"%+d\", 0), \"+0\");\n   test(#fmt(\"%+d\", 1), \"+1\");\n   test(#fmt(\"%+d\", -1), \"-1\");\n+\n+  // Leave space for sign\n+  test(#fmt(\"% d\", 0), \" 0\");\n+  test(#fmt(\"% d\", 1), \" 1\");\n+  test(#fmt(\"% d\", -1), \"-1\");\n+\n+  // Plus overrides space\n+  test(#fmt(\"% +d\", 0), \"+0\");\n+  test(#fmt(\"%+ d\", 0), \"+0\");\n }"}]}