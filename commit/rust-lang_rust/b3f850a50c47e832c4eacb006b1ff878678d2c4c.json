{"sha": "b3f850a50c47e832c4eacb006b1ff878678d2c4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjg1MGE1MGM0N2U4MzJjNGVhY2IwMDZiMWZmODc4Njc4ZDJjNGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-31T14:50:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-02T10:25:26Z"}, "message": "Remove root field from CrateLocator", "tree": {"sha": "b1f2f5283c4ab5d2212e0b3380baefd222444ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f2f5283c4ab5d2212e0b3380baefd222444ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f850a50c47e832c4eacb006b1ff878678d2c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f850a50c47e832c4eacb006b1ff878678d2c4c", "html_url": "https://github.com/rust-lang/rust/commit/b3f850a50c47e832c4eacb006b1ff878678d2c4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f850a50c47e832c4eacb006b1ff878678d2c4c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a8c4579160dd9a00c61f279c4d14ade02406ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8c4579160dd9a00c61f279c4d14ade02406ed3", "html_url": "https://github.com/rust-lang/rust/commit/3a8c4579160dd9a00c61f279c4d14ade02406ed3"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "04d6aa0b46978d932db95b9b6b03a10a989583bf", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3f850a50c47e832c4eacb006b1ff878678d2c4c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f850a50c47e832c4eacb006b1ff878678d2c4c/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=b3f850a50c47e832c4eacb006b1ff878678d2c4c", "patch": "@@ -555,7 +555,6 @@ impl<'a> CrateLoader<'a> {\n                 extra_filename,\n                 false, // is_host\n                 path_kind,\n-                root,\n             );\n \n             match self.load(&mut locator)? {\n@@ -564,7 +563,7 @@ impl<'a> CrateLoader<'a> {\n                     dep_kind = CrateDepKind::MacrosOnly;\n                     match self.load_proc_macro(&mut locator, path_kind, host_hash)? {\n                         Some(res) => res,\n-                        None => return Err(locator.into_error()),\n+                        None => return Err(locator.into_error(root.cloned())),\n                     }\n                 }\n             }"}, {"sha": "11c306729f20cc28688885faadd57306db220d75", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3f850a50c47e832c4eacb006b1ff878678d2c4c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f850a50c47e832c4eacb006b1ff878678d2c4c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=b3f850a50c47e832c4eacb006b1ff878678d2c4c", "patch": "@@ -252,7 +252,6 @@ crate struct CrateLocator<'a> {\n     pub target: &'a Target,\n     pub triple: TargetTriple,\n     pub filesearch: FileSearch<'a>,\n-    root: Option<&'a CratePaths>,\n     pub is_proc_macro: bool,\n \n     // Mutable in-progress state or output.\n@@ -301,7 +300,6 @@ impl<'a> CrateLocator<'a> {\n         extra_filename: Option<&'a str>,\n         is_host: bool,\n         path_kind: PathKind,\n-        root: Option<&'a CratePaths>,\n     ) -> CrateLocator<'a> {\n         // The all loop is because `--crate-type=rlib --crate-type=rlib` is\n         // legal and produces both inside this type.\n@@ -344,7 +342,6 @@ impl<'a> CrateLocator<'a> {\n             } else {\n                 sess.target_filesearch(path_kind)\n             },\n-            root,\n             is_proc_macro: false,\n             rejected_via_hash: Vec::new(),\n             rejected_via_triple: Vec::new(),\n@@ -709,10 +706,10 @@ impl<'a> CrateLocator<'a> {\n         Ok(self.extract_lib(rlibs, rmetas, dylibs)?.map(|(_, lib)| lib))\n     }\n \n-    crate fn into_error(self) -> CrateError {\n+    crate fn into_error(self, root: Option<CratePaths>) -> CrateError {\n         CrateError::LocatorCombined(CombinedLocatorError {\n             crate_name: self.crate_name,\n-            root: self.root.cloned(),\n+            root,\n             triple: self.triple,\n             dll_prefix: self.target.dll_prefix.clone(),\n             dll_suffix: self.target.dll_suffix.clone(),\n@@ -807,15 +804,14 @@ fn find_plugin_registrar_impl<'a>(\n         None, // extra_filename\n         true, // is_host\n         PathKind::Crate,\n-        None, // root\n     );\n \n     match locator.maybe_load_library_crate()? {\n         Some(library) => match library.source.dylib {\n             Some(dylib) => Ok(dylib.0),\n             None => Err(CrateError::NonDylibPlugin(name)),\n         },\n-        None => Err(locator.into_error()),\n+        None => Err(locator.into_error(None)),\n     }\n }\n "}]}