{"sha": "417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxN2IwOThjZmM0OTNhOWI4MDNiNGZmYmY2Yjc0ZmM0ZjhlNzZmM2Q=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-04-24T21:41:57Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-07-25T07:28:51Z"}, "message": "Add generic arg infer", "tree": {"sha": "613cc0e82fa1f34794abc8c6795c8cbdac57c1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613cc0e82fa1f34794abc8c6795c8cbdac57c1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "html_url": "https://github.com/rust-lang/rust/commit/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a6c7c80398143a67e27b01412f4b2ec12bde8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a6c7c80398143a67e27b01412f4b2ec12bde8b", "html_url": "https://github.com/rust-lang/rust/commit/71a6c7c80398143a67e27b01412f4b2ec12bde8b"}], "stats": {"total": 364, "additions": 270, "deletions": 94}, "files": [{"sha": "5bffc94364d9dc8511513c8dd66acc498d15ed9d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -336,14 +336,15 @@ pub enum ParamKindOrd {\n     // is active. Specifically, if it's only `min_const_generics`, it will still require\n     // ordering consts after types.\n     Const { unordered: bool },\n+    Infer,\n }\n \n impl Ord for ParamKindOrd {\n     fn cmp(&self, other: &Self) -> Ordering {\n         use ParamKindOrd::*;\n         let to_int = |v| match v {\n             Lifetime => 0,\n-            Type | Const { unordered: true } => 1,\n+            Infer | Type | Const { unordered: true } => 1,\n             // technically both consts should be ordered equally,\n             // but only one is ever encountered at a time, so this is\n             // fine.\n@@ -371,6 +372,7 @@ impl fmt::Display for ParamKindOrd {\n             ParamKindOrd::Lifetime => \"lifetime\".fmt(f),\n             ParamKindOrd::Type => \"type\".fmt(f),\n             ParamKindOrd::Const { .. } => \"const\".fmt(f),\n+            ParamKindOrd::Infer => \"infer\".fmt(f),\n         }\n     }\n }"}, {"sha": "c7a477fedc6041172d37f91e18bdfbfa29784ba8", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 47, "deletions": 40, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -1218,48 +1218,55 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => {\n-                // We parse const arguments as path types as we cannot distinguish them during\n-                // parsing. We try to resolve that ambiguity by attempting resolution in both the\n-                // type and value namespaces. If we resolved the path in the value namespace, we\n-                // transform it into a generic const argument.\n-                if let TyKind::Path(ref qself, ref path) = ty.kind {\n-                    if let Some(partial_res) = self.resolver.get_partial_res(ty.id) {\n-                        let res = partial_res.base_res();\n-                        if !res.matches_ns(Namespace::TypeNS) {\n-                            debug!(\n-                                \"lower_generic_arg: Lowering type argument as const argument: {:?}\",\n-                                ty,\n-                            );\n-\n-                            // Construct a AnonConst where the expr is the \"ty\"'s path.\n-\n-                            let parent_def_id = self.current_hir_id_owner.0;\n-                            let node_id = self.resolver.next_node_id();\n-\n-                            // Add a definition for the in-band const def.\n-                            self.resolver.create_def(\n-                                parent_def_id,\n-                                node_id,\n-                                DefPathData::AnonConst,\n-                                ExpnId::root(),\n-                                ty.span,\n-                            );\n-\n-                            let path_expr = Expr {\n-                                id: ty.id,\n-                                kind: ExprKind::Path(qself.clone(), path.clone()),\n-                                span: ty.span,\n-                                attrs: AttrVec::new(),\n-                                tokens: None,\n-                            };\n-\n-                            let ct = self.with_new_scopes(|this| hir::AnonConst {\n-                                hir_id: this.lower_node_id(node_id),\n-                                body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n-                            });\n-                            return GenericArg::Const(ConstArg { value: ct, span: ty.span });\n+                match ty.kind {\n+                    TyKind::Infer => {\n+                        let hir_id = self.lower_node_id(ty.id);\n+                        return GenericArg::Infer(hir::InferArg { hir_id, span: ty.span });\n+                    }\n+                    // We parse const arguments as path types as we cannot distinguish them during\n+                    // parsing. We try to resolve that ambiguity by attempting resolution in both the\n+                    // type and value namespaces. If we resolved the path in the value namespace, we\n+                    // transform it into a generic const argument.\n+                    TyKind::Path(ref qself, ref path) => {\n+                        if let Some(partial_res) = self.resolver.get_partial_res(ty.id) {\n+                            let res = partial_res.base_res();\n+                            if !res.matches_ns(Namespace::TypeNS) {\n+                                debug!(\n+                                    \"lower_generic_arg: Lowering type argument as const argument: {:?}\",\n+                                    ty,\n+                                );\n+\n+                                // Construct a AnonConst where the expr is the \"ty\"'s path.\n+\n+                                let parent_def_id = self.current_hir_id_owner.0;\n+                                let node_id = self.resolver.next_node_id();\n+\n+                                // Add a definition for the in-band const def.\n+                                self.resolver.create_def(\n+                                    parent_def_id,\n+                                    node_id,\n+                                    DefPathData::AnonConst,\n+                                    ExpnId::root(),\n+                                    ty.span,\n+                                );\n+\n+                                let path_expr = Expr {\n+                                    id: ty.id,\n+                                    kind: ExprKind::Path(qself.clone(), path.clone()),\n+                                    span: ty.span,\n+                                    attrs: AttrVec::new(),\n+                                    tokens: None,\n+                                };\n+\n+                                let ct = self.with_new_scopes(|this| hir::AnonConst {\n+                                    hir_id: this.lower_node_id(node_id),\n+                                    body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n+                                });\n+                                return GenericArg::Const(ConstArg { value: ct, span: ty.span });\n+                            }\n                         }\n                     }\n+                    _ => {}\n                 }\n                 GenericArg::Type(self.lower_ty_direct(&ty, itctx))\n             }"}, {"sha": "140219287b1c0df1e335c6b735c1eff2d0a48c56", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -253,11 +253,24 @@ pub struct ConstArg {\n     pub span: Span,\n }\n \n+#[derive(Encodable, Debug, HashStable_Generic)]\n+pub struct InferArg {\n+    pub hir_id: HirId,\n+    pub span: Span,\n+}\n+\n+impl InferArg {\n+    pub fn to_ty(&self) -> Ty<'_> {\n+        Ty { kind: TyKind::Infer, span: self.span, hir_id: self.hir_id }\n+    }\n+}\n+\n #[derive(Debug, HashStable_Generic)]\n pub enum GenericArg<'hir> {\n     Lifetime(Lifetime),\n     Type(Ty<'hir>),\n     Const(ConstArg),\n+    Infer(InferArg),\n }\n \n impl GenericArg<'_> {\n@@ -266,6 +279,7 @@ impl GenericArg<'_> {\n             GenericArg::Lifetime(l) => l.span,\n             GenericArg::Type(t) => t.span,\n             GenericArg::Const(c) => c.span,\n+            GenericArg::Infer(i) => i.span,\n         }\n     }\n \n@@ -274,6 +288,7 @@ impl GenericArg<'_> {\n             GenericArg::Lifetime(l) => l.hir_id,\n             GenericArg::Type(t) => t.hir_id,\n             GenericArg::Const(c) => c.value.hir_id,\n+            GenericArg::Infer(i) => i.hir_id,\n         }\n     }\n \n@@ -290,6 +305,7 @@ impl GenericArg<'_> {\n             GenericArg::Lifetime(_) => \"lifetime\",\n             GenericArg::Type(_) => \"type\",\n             GenericArg::Const(_) => \"constant\",\n+            GenericArg::Infer(_) => \"inferred\",\n         }\n     }\n \n@@ -300,6 +316,7 @@ impl GenericArg<'_> {\n             GenericArg::Const(_) => {\n                 ast::ParamKindOrd::Const { unordered: feats.unordered_const_ty_params() }\n             }\n+            GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n         }\n     }\n }\n@@ -341,6 +358,7 @@ impl GenericArgs<'_> {\n                         break;\n                     }\n                     GenericArg::Const(_) => {}\n+                    GenericArg::Infer(_) => {}\n                 }\n             }\n         }\n@@ -358,6 +376,7 @@ impl GenericArgs<'_> {\n                 GenericArg::Lifetime(_) => own_counts.lifetimes += 1,\n                 GenericArg::Type(_) => own_counts.types += 1,\n                 GenericArg::Const(_) => own_counts.consts += 1,\n+                GenericArg::Infer(_) => own_counts.infer += 1,\n             };\n         }\n \n@@ -484,6 +503,7 @@ pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,\n     pub consts: usize,\n+    pub infer: usize,\n }\n \n /// Represents lifetimes and type parameters attached to a declaration\n@@ -2987,6 +3007,8 @@ pub enum Node<'hir> {\n     Visibility(&'hir Visibility<'hir>),\n \n     Crate(&'hir Mod<'hir>),\n+\n+    Infer(&'hir InferArg),\n }\n \n impl<'hir> Node<'hir> {\n@@ -3055,6 +3077,7 @@ impl<'hir> Node<'hir> {\n             | Node::Local(Local { hir_id, .. })\n             | Node::Lifetime(Lifetime { hir_id, .. })\n             | Node::Param(Param { hir_id, .. })\n+            | Node::Infer(InferArg { hir_id, .. })\n             | Node::GenericParam(GenericParam { hir_id, .. }) => Some(*hir_id),\n             Node::TraitRef(TraitRef { hir_ref_id, .. }) => Some(*hir_ref_id),\n             Node::PathSegment(PathSegment { hir_id, .. }) => *hir_id,"}, {"sha": "dc54c55341e9c8065e7d59dda4d13c635bf9bd88", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -436,13 +436,22 @@ pub trait Visitor<'v>: Sized {\n     fn visit_label(&mut self, label: &'v Label) {\n         walk_label(self, label)\n     }\n+    fn visit_infer(&mut self, inf: &'v InferArg) {\n+        self.visit_id(inf.hir_id);\n+    }\n     fn visit_generic_arg(&mut self, generic_arg: &'v GenericArg<'v>) {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n             GenericArg::Type(ty) => self.visit_ty(ty),\n             GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n+            GenericArg::Infer(inf) => self.visit_infer(inf),\n         }\n     }\n+    /*\n+    fn tcx(&self) -> Option<&TyCtxt<'tcx>> {\n+        None\n+    }\n+    */\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n@@ -746,6 +755,10 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n     }\n }\n \n+pub fn walk_inf<'v, V: Visitor<'v>>(visitor: &mut V, inf: &'v InferArg) {\n+    visitor.visit_id(inf.hir_id);\n+}\n+\n pub fn walk_qpath<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     qpath: &'v QPath<'v>,"}, {"sha": "d47bef4379c3280a5187a5477c6cd8825ebcb520", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -103,6 +103,7 @@ impl<'a> State<'a> {\n             Node::TraitRef(a) => self.print_trait_ref(&a),\n             Node::Binding(a) | Node::Pat(a) => self.print_pat(&a),\n             Node::Arm(a) => self.print_arm(&a),\n+            Node::Infer(_) => self.print_string(\"_\", ast::StrStyle::Cooked),\n             Node::Block(a) => {\n                 // Containing cbox, will be closed by print-block at `}`.\n                 self.cbox(INDENT_UNIT);\n@@ -437,14 +438,14 @@ impl<'a> State<'a> {\n                 self.print_anon_const(e);\n                 self.s.word(\")\");\n             }\n-            hir::TyKind::Infer => {\n-                self.s.word(\"_\");\n-            }\n             hir::TyKind::Err => {\n                 self.popen();\n                 self.s.word(\"/*ERROR*/\");\n                 self.pclose();\n             }\n+            hir::TyKind::Infer => {\n+                self.s.word(\"_\");\n+            }\n         }\n         self.end()\n     }\n@@ -1851,6 +1852,7 @@ impl<'a> State<'a> {\n                         GenericArg::Lifetime(_) => {}\n                         GenericArg::Type(ty) => s.print_type(ty),\n                         GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n+                        GenericArg::Infer(_inf) => s.word(\"_\"),\n                     },\n                 );\n             }"}, {"sha": "75dff288d783b0264889456f96345ce3a833a050", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -404,6 +404,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n+    fn visit_infer(&mut self, inf: &'hir InferArg) {\n+        self.insert(inf.span, inf.hir_id, Node::Infer(inf));\n+\n+        self.with_parent(inf.hir_id, |this| {\n+            intravisit::walk_inf(this, inf);\n+        });\n+    }\n+\n     fn visit_trait_ref(&mut self, tr: &'hir TraitRef<'hir>) {\n         self.insert(tr.path.span, tr.hir_ref_id, Node::TraitRef(tr));\n "}, {"sha": "c1f2b767e78d52033315c142d654e9c41db904d1", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -272,6 +272,7 @@ impl<'hir> Map<'hir> {\n                 GenericParamKind::Type { .. } => DefKind::TyParam,\n                 GenericParamKind::Const { .. } => DefKind::ConstParam,\n             },\n+            Node::Infer(_) => todo!(),\n             Node::Crate(_) => DefKind::Mod,\n             Node::Stmt(_)\n             | Node::PathSegment(_)\n@@ -882,6 +883,7 @@ impl<'hir> Map<'hir> {\n                 node: VisibilityKind::Restricted { ref path, .. },\n                 ..\n             }) => path.span,\n+            Node::Infer(i) => i.span,\n             Node::Visibility(v) => bug!(\"unexpected Visibility {:?}\", v),\n             Node::Local(local) => local.span,\n             Node::MacroDef(macro_def) => macro_def.span,\n@@ -1129,6 +1131,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n         Some(Node::Param(_)) => node_str(\"param\"),\n         Some(Node::Arm(_)) => node_str(\"arm\"),\n         Some(Node::Block(_)) => node_str(\"block\"),\n+        Some(Node::Infer(_)) => node_str(\"infer\"),\n         Some(Node::Local(_)) => node_str(\"local\"),\n         Some(Node::Ctor(..)) => format!(\"ctor {}{}\", path_str(), id_str),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),"}, {"sha": "0395082fa651afbb268c2055fcc8c0487c9e1d3f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -133,6 +133,11 @@ rustc_queries! {\n         cache_on_disk_if { key.is_local() }\n     }\n \n+    query generic_arg_for_infer_arg(key: DefId) -> hir::GenericArg<'tcx> {\n+        desc { |tcx| \"computes concrete type for inference, `{}`\", tcx.def_path_str(key) }\n+        storage(ArenaCacheSelector<'tcx>)\n+    }\n+\n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n     /// predicates (where-clauses) that must be proven true in order\n     /// to reference it. This is almost always the \"predicates query\""}, {"sha": "f4bdaffe3f73cf0a032cf6b79ca350e24a3b8dd7", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -1188,6 +1188,23 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         self.maybe_typeck_results = old_maybe_typeck_results;\n     }\n \n+    fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {\n+        match generic_arg {\n+            hir::GenericArg::Type(t) => self.visit_ty(t),\n+            hir::GenericArg::Infer(inf) => {\n+                self.span = inf.span;\n+                let parent_hir_id = self.tcx.hir().get_parent_node(inf.hir_id);\n+                if let Some(typeck_results) = self.maybe_typeck_results {\n+                    let node_substs = typeck_results.node_substs(parent_hir_id);\n+                    for ty in node_substs.types() {\n+                        self.visit(ty);\n+                    }\n+                }\n+            }\n+            hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}\n+        }\n+    }\n+\n     fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {\n         self.span = hir_ty.span;\n         if let Some(typeck_results) = self.maybe_typeck_results {\n@@ -1443,6 +1460,14 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n         NestedVisitorMap::None\n     }\n \n+    fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {\n+        match generic_arg {\n+            hir::GenericArg::Type(t) => self.visit_ty(t),\n+            hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),\n+            hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}\n+        }\n+    }\n+\n     fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n         if let hir::TyKind::Path(hir::QPath::Resolved(_, ref path)) = ty.kind {\n             if self.inner.path_is_private_type(path) {"}, {"sha": "26e2efc2552008d884128908508fb98c40b9270a", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -2557,6 +2557,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 GenericArg::Const(ct) => {\n                     self.visit_anon_const(&ct.value);\n                 }\n+                GenericArg::Infer(inf) => {\n+                    self.visit_id(inf.hir_id);\n+                    i += 1;\n+                }\n             }\n         }\n "}, {"sha": "a227d2f2337e23610b610616ef1d021ebde5d470", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -18,6 +18,23 @@ use rustc_session::lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS;\n use rustc_span::{symbol::kw, MultiSpan, Span};\n use smallvec::SmallVec;\n \n+/*\n+pub fn generic_arg_for_infer_arg<'tcx>(tcx: TyCtxt<'tcx>, did: LocalDefId) -> GenericArg<'tcx> {\n+    todo!()\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n+    let arg = match tcx.hir().get(hir_id) {\n+        hir::Node::GenericParam(hir::GenericParam {\n+            kind: hir::GenericParamKind::Const { ty: _, default: _ },\n+            ..\n+        }) => todo!(),\n+        _ => bug!(\"Expected GenericParam for generic_arg_for_infer_arg\"),\n+    };\n+\n+    assert!(!matches!(arg, GenericArg::Infer(_)));\n+    arg\n+}\n+*/\n+\n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Report an error that a generic argument did not match the generic parameter that was\n     /// expected.\n@@ -39,7 +56,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n \n         if let GenericParamDefKind::Const { .. } = param.kind {\n-            if let GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. }) = arg {\n+            if matches!(\n+                arg,\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. }) | GenericArg::Infer(_)\n+            ) {\n                 err.help(\"const arguments cannot yet be inferred with `_`\");\n             }\n         }\n@@ -249,14 +269,22 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     (Some(&arg), Some(&param)) => {\n                         match (arg, &param.kind, arg_count.explicit_late_bound) {\n                             (GenericArg::Lifetime(_), GenericParamDefKind::Lifetime, _)\n-                            | (GenericArg::Type(_), GenericParamDefKind::Type { .. }, _)\n-                            | (GenericArg::Const(_), GenericParamDefKind::Const { .. }, _) => {\n+                            | (\n+                                GenericArg::Type(_) | GenericArg::Infer(_),\n+                                GenericParamDefKind::Type { .. },\n+                                _,\n+                            )\n+                            | (\n+                                GenericArg::Const(_) | GenericArg::Infer(_),\n+                                GenericParamDefKind::Const { .. },\n+                                _,\n+                            ) => {\n                                 substs.push(ctx.provided_kind(param, arg));\n                                 args.next();\n                                 params.next();\n                             }\n                             (\n-                                GenericArg::Type(_) | GenericArg::Const(_),\n+                                GenericArg::Infer(_) | GenericArg::Type(_) | GenericArg::Const(_),\n                                 GenericParamDefKind::Lifetime,\n                                 _,\n                             ) => {\n@@ -325,6 +353,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                     .features()\n                                                     .unordered_const_ty_params(),\n                                             },\n+                                            GenericArg::Infer(_) => ParamKindOrd::Infer,\n                                         }),\n                                         Some(&format!(\n                                             \"reorder the arguments: {}: `<{}>`\",\n@@ -581,7 +610,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             check_types_and_consts(\n                 expected_min,\n                 param_counts.consts + named_type_param_count,\n-                arg_counts.consts + arg_counts.types,\n+                arg_counts.consts + arg_counts.types + arg_counts.infer,\n                 param_counts.lifetimes + has_self as usize,\n                 arg_counts.lifetimes,\n             )\n@@ -622,7 +651,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .args\n                 .iter()\n                 .filter_map(|arg| match arg {\n-                    GenericArg::Type(_) | GenericArg::Const(_) => Some(arg.span()),\n+                    GenericArg::Infer(_) | GenericArg::Type(_) | GenericArg::Const(_) => {\n+                        Some(arg.span())\n+                    }\n                     _ => None,\n                 })\n                 .collect::<Vec<_>>();"}, {"sha": "d80eb26f6c21fd5fa49775d6c08712cc96ef7a42", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -461,6 +461,40 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         )\n                         .into()\n                     }\n+                    (&GenericParamDefKind::Const { has_default }, hir::GenericArg::Infer(inf)) => {\n+                        if has_default {\n+                            // FIXME(const_generics): Actually infer parameter here?\n+                            tcx.const_param_default(param.def_id).into()\n+                        } else {\n+                            self.inferred_params.push(inf.span);\n+                            tcx.ty_error().into()\n+                        }\n+                    }\n+                    (\n+                        &GenericParamDefKind::Type { has_default, .. },\n+                        hir::GenericArg::Infer(inf),\n+                    ) => {\n+                        if has_default {\n+                            tcx.check_optional_stability(\n+                                param.def_id,\n+                                Some(arg.id()),\n+                                arg.span(),\n+                                |_, _| {\n+                                    // Default generic parameters may not be marked\n+                                    // with stability attributes, i.e. when the\n+                                    // default parameter was defined at the same time\n+                                    // as the rest of the type. As such, we ignore missing\n+                                    // stability attributes.\n+                                },\n+                            );\n+                        }\n+                        if self.astconv.allow_ty_infer() {\n+                            self.astconv.ast_ty_to_ty(&inf.to_ty()).into()\n+                        } else {\n+                            self.inferred_params.push(inf.span);\n+                            tcx.ty_error().into()\n+                        }\n+                    }\n                     _ => unreachable!(),\n                 }\n             }\n@@ -1922,6 +1956,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         has_err = true;\n                         (ct.span, \"const\")\n                     }\n+                    hir::GenericArg::Infer(inf) => {\n+                        if err_for_ty {\n+                            continue;\n+                        }\n+                        has_err = true;\n+                        err_for_ty = true;\n+                        (inf.span, \"inferred\")\n+                    }\n                 };\n                 let mut err = struct_span_err!(\n                     self.tcx().sess,"}, {"sha": "3a88fc5587ad224f6b3b5547984b5fb80ef143fe", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -1471,6 +1471,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.fcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n+                    (GenericParamDefKind::Type { .. }, GenericArg::Infer(inf)) => {\n+                        self.fcx.to_ty(&inf.to_ty()).into()\n+                    }\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n+                        self.fcx.var_for_def(inf.span, param)\n+                    }\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "3224fe362cb1f339d0b34244333bb0306b3b3ea3", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -366,6 +366,12 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.cfcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n+                    (GenericParamDefKind::Type { .. }, GenericArg::Infer(inf)) => {\n+                        self.cfcx.to_ty(&inf.to_ty()).into()\n+                    }\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n+                        self.cfcx.var_for_def(inf.span, param)\n+                    }\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "0b3fe82605c10682b273b354dedd619bc71d7653", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -129,6 +129,15 @@ impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n         }\n         intravisit::walk_ty(self, t)\n     }\n+    fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {\n+        match generic_arg {\n+            hir::GenericArg::Infer(inf) => {\n+                self.0.push(inf.span);\n+            }\n+            hir::GenericArg::Type(t) => self.visit_ty(t),\n+            _ => {}\n+        }\n+    }\n }\n \n struct CollectItemTypesVisitor<'tcx> {\n@@ -1714,13 +1723,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n }\n \n fn are_suggestable_generic_args(generic_args: &[hir::GenericArg<'_>]) -> bool {\n-    generic_args\n-        .iter()\n-        .filter_map(|arg| match arg {\n-            hir::GenericArg::Type(ty) => Some(ty),\n-            _ => None,\n-        })\n-        .any(is_suggestable_infer_ty)\n+    generic_args.iter().any(|arg| match arg {\n+        hir::GenericArg::Type(ty) => is_suggestable_infer_ty(ty),\n+        hir::GenericArg::Infer(_) => true,\n+        _ => false,\n+    })\n }\n \n /// Whether `ty` is a type with `_` placeholders that can be inferred. Used in diagnostics only to"}, {"sha": "27c2f6cc87e178cec69fcac04d0c6560643d116b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -1768,6 +1768,7 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n                         hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n                         hir::GenericArg::Type(ty) => GenericArg::Type(ty.clean(cx)),\n                         hir::GenericArg::Const(ct) => GenericArg::Const(ct.clean(cx)),\n+                        hir::GenericArg::Infer(_inf) => GenericArg::Infer,\n                     })\n                     .collect(),\n                 bindings: self.bindings.clean(cx),"}, {"sha": "da883d8057d8754d2b09cc9e3aefaeba9006093c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -2007,6 +2007,7 @@ crate enum GenericArg {\n     Lifetime(Lifetime),\n     Type(Type),\n     Const(Constant),\n+    Infer,\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "cd74006530b44d69921178cf8468d159b38e9dc3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -1424,6 +1424,7 @@ impl clean::GenericArg {\n             clean::GenericArg::Lifetime(lt) => fmt::Display::fmt(&lt.print(), f),\n             clean::GenericArg::Type(ty) => fmt::Display::fmt(&ty.print(cx), f),\n             clean::GenericArg::Const(ct) => fmt::Display::fmt(&ct.print(cx.tcx()), f),\n+            clean::GenericArg::Infer => fmt::Display::fmt(\"_\", f),\n         })\n     }\n }"}, {"sha": "f3eeea6c6ae0be5b6c4aed560d6bb22a258cbe1b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -140,6 +140,7 @@ impl FromWithTcx<clean::GenericArg> for GenericArg {\n             Lifetime(l) => GenericArg::Lifetime(l.0.to_string()),\n             Type(t) => GenericArg::Type(t.into_tcx(tcx)),\n             Const(c) => GenericArg::Const(c.into_tcx(tcx)),\n+            Infer => GenericArg::Infer,\n         }\n     }\n }"}, {"sha": "38ba87322c2385f6d86c29f9b3c84e3b1c96de33", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -127,6 +127,7 @@ pub enum GenericArg {\n     Lifetime(String),\n     Type(Type),\n     Const(Constant),\n+    Infer,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "08f6454fa2dfefcac006150720974f861c126a03", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -4,13 +4,13 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-error[E0747]: type provided when a constant was expected\n-  --> $DIR/issue-62878.rs:10:11\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62878.rs:10:14\n    |\n LL |     foo::<_, {[1]}>();\n-   |           ^\n+   |              ^^^^^\n    |\n-   = help: const arguments cannot yet be inferred with `_`\n+   = note: this may fail depending on what value the parameter takes\n \n error[E0308]: mismatched types\n   --> $DIR/issue-62878.rs:10:15\n@@ -20,5 +20,5 @@ LL |     foo::<_, {[1]}>();\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0747, E0770.\n+Some errors have detailed explanations: E0308, E0770.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "fae57b37773bb3fc2a04be26847f2561a80e5e94", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -8,6 +8,6 @@ fn foo<const N: usize, const A: [u8; N]>() {}\n \n fn main() {\n     foo::<_, {[1]}>();\n-    //[full]~^ ERROR type provided when a constant was expected\n-    //[full]~| ERROR mismatched types\n+    //[full]~^ ERROR mismatched types\n+    //[full]~| ERROR constant expression\n }"}, {"sha": "f5800d1097120f4014b49b3ea004778c29c57522", "filename": "src/test/ui/const-generics/min_const_generics/inferred_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -1,8 +1,8 @@\n-#![feature(min_const_generics)]\n-fn foo<const N: usize, const K: usize>(data: [u32; N]) -> [u32; K] {\n+// run-pass\n+\n+fn foo<const N: usize, const K: usize>(_data: [u32; N]) -> [u32; K] {\n     [0; K]\n }\n fn main() {\n-    let a = foo::<_, 2>([0, 1, 2]);\n-               //~^ ERROR type provided when a constant was expected\n+    let _a = foo::<_, 2>([0, 1, 2]);\n }"}, {"sha": "e17105b2aa99930c703147412bcf50110ce3cb86", "filename": "src/test/ui/const-generics/min_const_generics/inferred_const.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71a6c7c80398143a67e27b01412f4b2ec12bde8b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6c7c80398143a67e27b01412f4b2ec12bde8b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.stderr?ref=71a6c7c80398143a67e27b01412f4b2ec12bde8b", "patch": "@@ -1,11 +0,0 @@\n-error[E0747]: type provided when a constant was expected\n-  --> $DIR/inferred_const.rs:6:19\n-   |\n-LL |     let a = foo::<_, 2>([0, 1, 2]);\n-   |                   ^\n-   |\n-   = help: const arguments cannot yet be inferred with `_`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0747`."}, {"sha": "1757baec70f2bd9e75f855941322ad93826557eb", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -11,7 +11,7 @@ fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n     let _x = (*start..*end)\n         .map(|x| S { a: start, b: end })\n         .collect::<Vec<S<_, 'a>>>();\n-        //~^ ERROR type provided when a lifetime was expected\n+        //~^ ERROR inferred provided when a lifetime was expected\n }\n \n fn main() {}"}, {"sha": "a039eca0bfdf4a2fe7eecc858263ac42583d3c9c", "filename": "src/test/ui/parser/issue-14303-fncall.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -1,4 +1,4 @@\n-error[E0747]: type provided when a lifetime was expected\n+error[E0747]: inferred provided when a lifetime was expected\n   --> $DIR/issue-14303-fncall.rs:13:26\n    |\n LL |         .collect::<Vec<S<_, 'a>>>();"}, {"sha": "1b6e27fa169adb73661e306401933c1f45598e52", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -273,17 +273,6 @@ LL |     priv_parent_substs::mac!();\n    |\n    = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: type `priv_parent_substs::Priv` is private\n-  --> $DIR/associated-item-privacy-trait.rs:117:30\n-   |\n-LL |         let _: <Pub as PubTr<_>>::AssocTy;\n-   |                              ^ private type\n-...\n-LL |     priv_parent_substs::mac!();\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:17\n    |\n@@ -328,5 +317,5 @@ LL |     priv_parent_substs::mac!();\n    |\n    = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 29 previous errors\n "}, {"sha": "63737955f09b67bb1d9836093ca16a60f8b834fb", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "patch": "@@ -885,7 +885,15 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_ty(&mut self, ty: &Ty<'_>) {\n         std::mem::discriminant(&ty.kind).hash(&mut self.s);\n-        match ty.kind {\n+        self.hash_tykind(&ty.kind);\n+    }\n+\n+    pub fn hash_infer(&mut self) {\n+        \"_\".hash(&mut self.s);\n+    }\n+\n+    pub fn hash_tykind(&mut self, ty: &TyKind<'_>) {\n+        match ty {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n@@ -949,6 +957,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 GenericArg::Lifetime(l) => self.hash_lifetime(l),\n                 GenericArg::Type(ref ty) => self.hash_ty(ty),\n                 GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n+                GenericArg::Infer(ref _inf) => self.hash_infer(),\n             }\n         }\n     }"}]}