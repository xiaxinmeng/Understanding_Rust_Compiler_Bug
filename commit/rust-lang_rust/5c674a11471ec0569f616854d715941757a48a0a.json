{"sha": "5c674a11471ec0569f616854d715941757a48a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNjc0YTExNDcxZWMwNTY5ZjYxNjg1NGQ3MTU5NDE3NTdhNDhhMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-07T00:02:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-07T00:02:41Z"}, "message": "Auto merge of #34695 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 15 pull requests\n\n- Successful merges: #33250, #33265, #34277, #34327, #34521, #34558, #34615, #34619, #34621, #34625, #34626, #34636, #34664, #34667, #34685\n- Failed merges: #33951", "tree": {"sha": "e1f54d74415607572cfb6cdb34cbb026b90a74e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f54d74415607572cfb6cdb34cbb026b90a74e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c674a11471ec0569f616854d715941757a48a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c674a11471ec0569f616854d715941757a48a0a", "html_url": "https://github.com/rust-lang/rust/commit/5c674a11471ec0569f616854d715941757a48a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c674a11471ec0569f616854d715941757a48a0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801d2682df6cac505916644ebe678c9105f4c418", "url": "https://api.github.com/repos/rust-lang/rust/commits/801d2682df6cac505916644ebe678c9105f4c418", "html_url": "https://github.com/rust-lang/rust/commit/801d2682df6cac505916644ebe678c9105f4c418"}, {"sha": "2262d7383ad2ba03a61b7bbf488721d018a94b8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2262d7383ad2ba03a61b7bbf488721d018a94b8a", "html_url": "https://github.com/rust-lang/rust/commit/2262d7383ad2ba03a61b7bbf488721d018a94b8a"}], "stats": {"total": 314, "additions": 183, "deletions": 131}, "files": [{"sha": "cdf5e735adf070965e4c10a33df337e5c429347c", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -66,7 +66,7 @@ build.\n \n [MSYS2][msys2] can be used to easily build Rust on Windows:\n \n-msys2: https://msys2.github.io/\n+[msys2]: https://msys2.github.io/\n \n 1. Grab the latest [MSYS2 installer][msys2] and go through the installer.\n "}, {"sha": "4c72597f0c5c1d2a2192a24f9d2337a36ae46be9", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -13,7 +13,7 @@\n ######################################################################\n \n # The version number\n-CFG_RELEASE_NUM=1.11.0\n+CFG_RELEASE_NUM=1.12.0\n \n # An optional number to put after the label, e.g. '.2' -> '-beta.2'\n # NB Make sure it starts with a dot to conform to semver pre-release"}, {"sha": "17a7c9ca66a2664488d4187d4af588b51a847a36", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -359,7 +359,7 @@ def main():\n     parser.add_argument('--clean', action='store_true')\n     parser.add_argument('-v', '--verbose', action='store_true')\n \n-    args = [a for a in sys.argv if a != '-h']\n+    args = [a for a in sys.argv if a != '-h' and a != '--help']\n     args, _ = parser.parse_known_args(args)\n \n     # Configure initial bootstrap"}, {"sha": "e8c88b7db0699d1ebe03b1827c29c4607aac3dd2", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -339,7 +339,7 @@ fn call_with_ref<'a, F>(some_closure:F) -> i32\n     where F: Fn(&'a 32) -> i32 {\n ```\n \n-However this presents a problem with in our case. When you specify the explict\n+However this presents a problem with in our case. When you specify the explicit\n lifetime on a function it binds that lifetime to the *entire* scope of the function\n instead of just the invocation scope of our closure. This means that the borrow checker\n will see a mutable reference in the same lifetime as our immutable reference and fail\n@@ -354,7 +354,7 @@ fn call_with_ref<F>(some_closure:F) -> i32\n ```\n \n This lets the Rust compiler find the minimum lifetime to invoke our closure and\n-satisfy the borrow checker's rules. Our function then compiles and excutes as we\n+satisfy the borrow checker's rules. Our function then compiles and executes as we\n expect.\n \n ```rust"}, {"sha": "6292ba9aac40317c41e590bbc58d549e2f6df179", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -486,6 +486,17 @@ you have a module in `foo.rs`, you'll often open its code and see this:\n //! The `foo` module contains a lot of useful functionality blah blah blah\n ```\n \n+### Crate documentation\n+\n+Crates can be documented by placing an inner doc comment (`//!`) at the\n+beginning of the crate root, aka `lib.rs`:\n+\n+```rust\n+//! This is documentation for the `foo` crate.\n+//!\n+//! The foo crate is meant to be used for bar.\n+```\n+\n ### Documentation comment style\n \n Check out [RFC 505][rfc505] for full conventions around the style and format of"}, {"sha": "6ce75efd1031d83ce7d372081090542a6091bf9b", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -370,7 +370,7 @@ We could also use a range of versions.\n [Cargo\u2019s documentation][cargodoc] contains more details.\n \n [semver]: http://semver.org\n-[cargodoc]: http://doc.crates.io/crates-io.html\n+[cargodoc]: http://doc.crates.io/specifying-dependencies.html\n \n Now, without changing any of our code, let\u2019s build our project:\n "}, {"sha": "e681d1bee06184549861f1045c1b765a1c2a0f7e", "filename": "src/doc/book/loops.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Floops.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Floops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Floops.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -105,7 +105,7 @@ When you need to keep track of how many times you already looped, you can use th\n #### On ranges:\n \n ```rust\n-for (i,j) in (5..10).enumerate() {\n+for (i, j) in (5..10).enumerate() {\n     println!(\"i = {} and j = {}\", i, j);\n }\n ```"}, {"sha": "a0a49d55e105740572194aedfd870f25534b1a50", "filename": "src/doc/book/mutability.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmutability.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -62,8 +62,8 @@ Note that here, the `x` is mutable, but not the `y`.\n # Interior vs. Exterior Mutability\n \n However, when we say something is \u2018immutable\u2019 in Rust, that doesn\u2019t mean that\n-it\u2019s not able to be changed: we mean something has \u2018exterior mutability\u2019. Consider,\n-for example, [`Arc<T>`][arc]:\n+it\u2019s not able to be changed: we are referring to its \u2018exterior mutability\u2019 that\n+in this case is immutable. Consider, for example, [`Arc<T>`][arc]:\n \n ```rust\n use std::sync::Arc;"}, {"sha": "328db25b819d89d236af7e8c2d8ea82ce63a5e1b", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -163,11 +163,51 @@ struct Point(i32, i32, i32);\n let black = Color(0, 0, 0);\n let origin = Point(0, 0, 0);\n ```\n-Here, `black` and `origin` are not equal, even though they contain the same\n-values.\n \n-It is almost always better to use a `struct` than a tuple struct. We\n-would write `Color` and `Point` like this instead:\n+Here, `black` and `origin` are not the same type, even though they contain the\n+same values.\n+\n+The members of a tuple struct may be accessed by dot notation or destructuring\n+`let`, just like regular tuples:\n+\n+```rust\n+# struct Color(i32, i32, i32);\n+# struct Point(i32, i32, i32);\n+# let black = Color(0, 0, 0);\n+# let origin = Point(0, 0, 0);\n+let black_r = black.0;\n+let Point(_, origin_y, origin_z) = origin;\n+```\n+\n+Patterns like `Point(_, origin_y, origin_z)` are also used in\n+[match expressions][match].\n+\n+One case when a tuple struct is very useful is when it has only one element.\n+We call this the \u2018newtype\u2019 pattern, because it allows you to create a new type\n+that is distinct from its contained value and also expresses its own semantic\n+meaning:\n+\n+```rust\n+struct Inches(i32);\n+\n+let length = Inches(10);\n+\n+let Inches(integer_length) = length;\n+println!(\"length is {} inches\", integer_length);\n+```\n+\n+As above, you can extract the inner integer type through a destructuring `let`.\n+In this case, the `let Inches(integer_length)` assigns `10` to `integer_length`.\n+We could have used dot notation to do the same thing:\n+\n+```rust\n+# struct Inches(i32);\n+# let length = Inches(10);\n+let integer_length = length.0;\n+```\n+\n+It's always possible to use a `struct` instead of a tuple struct, and can be\n+clearer. We could write `Color` and `Point` like this instead:\n \n ```rust\n struct Color {\n@@ -187,32 +227,19 @@ Good names are important, and while values in a tuple struct can be\n referenced with dot notation as well, a `struct` gives us actual names,\n rather than positions.\n \n-There _is_ one case when a tuple struct is very useful, though, and that is when\n-it has only one element. We call this the \u2018newtype\u2019 pattern, because\n-it allows you to create a new type that is distinct from its contained value\n-and also expresses its own semantic meaning:\n-\n-```rust\n-struct Inches(i32);\n-\n-let length = Inches(10);\n-\n-let Inches(integer_length) = length;\n-println!(\"length is {} inches\", integer_length);\n-```\n-\n-As you can see here, you can extract the inner integer type through a\n-destructuring `let`, as with regular tuples. In this case, the\n-`let Inches(integer_length)` assigns `10` to `integer_length`.\n+[match]: match.html\n \n # Unit-like structs\n \n You can define a `struct` with no members at all:\n \n ```rust\n-struct Electron;\n+struct Electron {} // use empty braces...\n+struct Proton;     // ...or just a semicolon\n \n-let x = Electron;\n+// whether you declared the struct with braces or not, do the same when creating one\n+let x = Electron {};\n+let y = Proton;\n ```\n \n Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty"}, {"sha": "86729147ed0652befde62ee0834f12ec2c095d1c", "filename": "src/doc/book/testing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Fdoc%2Fbook%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftesting.md?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -431,7 +431,7 @@ one.\n \n Cargo will ignore files in subdirectories of the `tests/` directory.\n Therefore shared modules in integrations tests are possible.\n-For example `tests/common/mod.rs` is not seperatly compiled by cargo but can \n+For example `tests/common/mod.rs` is not separately compiled by cargo but can\n be imported in every test with `mod common;`\n \n That's all there is to the `tests` directory. The `tests` module isn't needed"}, {"sha": "dffe9dee022a68704fc565efa10467bc56c2725b", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -1198,17 +1198,15 @@ impl<I: ExactSizeIterator> ExactSizeIterator for Peekable<I> {}\n impl<I: Iterator> Peekable<I> {\n     /// Returns a reference to the next() value without advancing the iterator.\n     ///\n-    /// The `peek()` method will return the value that a call to [`next()`] would\n-    /// return, but does not advance the iterator. Like [`next()`], if there is\n-    /// a value, it's wrapped in a `Some(T)`, but if the iterator is over, it\n-    /// will return `None`.\n+    /// Like [`next()`], if there is a value, it is wrapped in a `Some(T)`.\n+    /// But if the iteration is over, `None` is returned.\n     ///\n     /// [`next()`]: trait.Iterator.html#tymethod.next\n     ///\n-    /// Because `peek()` returns reference, and many iterators iterate over\n-    /// references, this leads to a possibly confusing situation where the\n+    /// Because `peek()` returns a reference, and many iterators iterate over\n+    /// references, there can be a possibly confusing situation where the\n     /// return value is a double reference. You can see this effect in the\n-    /// examples below, with `&&i32`.\n+    /// examples below.\n     ///\n     /// # Examples\n     ///\n@@ -1225,13 +1223,13 @@ impl<I: Iterator> Peekable<I> {\n     ///\n     /// assert_eq!(iter.next(), Some(&2));\n     ///\n-    /// // we can peek() multiple times, the iterator won't advance\n+    /// // The iterator does not advance even if we `peek` multiple times\n     /// assert_eq!(iter.peek(), Some(&&3));\n     /// assert_eq!(iter.peek(), Some(&&3));\n     ///\n     /// assert_eq!(iter.next(), Some(&3));\n     ///\n-    /// // after the iterator is finished, so is peek()\n+    /// // After the iterator is finished, so is `peek()`\n     /// assert_eq!(iter.peek(), None);\n     /// assert_eq!(iter.next(), None);\n     /// ```\n@@ -1263,10 +1261,10 @@ impl<I: Iterator> Peekable<I> {\n     ///\n     /// let mut iter = xs.iter().peekable();\n     ///\n-    /// // there are still elements to iterate over\n+    /// // There are still elements to iterate over\n     /// assert_eq!(iter.is_empty(), false);\n     ///\n-    /// // let's consume the iterator\n+    /// // Let's consume the iterator\n     /// iter.next();\n     /// iter.next();\n     /// iter.next();"}, {"sha": "07b05f91f489f9ecfa3752b2175e5f0bc35a3251", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -20,121 +20,121 @@ use mem;\n use num::Float;\n use num::FpCategory as Fp;\n \n+/// The radix or base of the internal representation of `f32`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const RADIX: u32 = 2;\n \n+/// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MANTISSA_DIGITS: u32 = 24;\n+/// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const DIGITS: u32 = 6;\n \n+/// Difference between `1.0` and the next largest representable number.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n-/// Smallest finite f32 value\n+/// Smallest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f32 = -3.40282347e+38_f32;\n-/// Smallest positive, normalized f32 value\n+/// Smallest positive normal `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n-/// Largest finite f32 value\n+/// Largest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f32 = 3.40282347e+38_f32;\n \n+/// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_EXP: i32 = -125;\n+/// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_EXP: i32 = 128;\n \n+/// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_10_EXP: i32 = -37;\n+/// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_10_EXP: i32 = 38;\n \n+/// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NAN: f32 = 0.0_f32/0.0_f32;\n+/// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const INFINITY: f32 = 1.0_f32/0.0_f32;\n+/// Negative infinity (-\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n-    /// Archimedes' constant\n+    /// Archimedes' constant (\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const PI: f32 = 3.14159265358979323846264338327950288_f32;\n \n-    /// pi/2.0\n+    /// \u03c0/2\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_2: f32 = 1.57079632679489661923132169163975144_f32;\n \n-    /// pi/3.0\n+    /// \u03c0/3\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_3: f32 = 1.04719755119659774615421446109316763_f32;\n \n-    /// pi/4.0\n+    /// \u03c0/4\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_4: f32 = 0.785398163397448309615660845819875721_f32;\n \n-    /// pi/6.0\n+    /// \u03c0/6\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_6: f32 = 0.52359877559829887307710723054658381_f32;\n \n-    /// pi/8.0\n+    /// \u03c0/8\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_8: f32 = 0.39269908169872415480783042290993786_f32;\n \n-    /// 1.0/pi\n+    /// 1/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_PI: f32 = 0.318309886183790671537767526745028724_f32;\n \n-    /// 2.0/pi\n+    /// 2/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_PI: f32 = 0.636619772367581343075535053490057448_f32;\n \n-    /// 2.0/sqrt(pi)\n+    /// 2/sqrt(\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_SQRT_PI: f32 = 1.12837916709551257389615890312154517_f32;\n \n-    /// sqrt(2.0)\n+    /// sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const SQRT_2: f32 = 1.41421356237309504880168872420969808_f32;\n \n-    /// 1.0/sqrt(2.0)\n+    /// 1/sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_SQRT_2: f32 = 0.707106781186547524400844362104849039_f32;\n \n-    /// Euler's number\n+    /// Euler's number (e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const E: f32 = 2.71828182845904523536028747135266250_f32;\n \n-    /// log2(e)\n+    /// log<sub>2</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG2_E: f32 = 1.44269504088896340735992468100189214_f32;\n \n-    /// log10(e)\n+    /// log<sub>10</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG10_E: f32 = 0.434294481903251827651128918916605082_f32;\n \n-    /// ln(2.0)\n+    /// ln(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_2: f32 = 0.693147180559945309417232121458176568_f32;\n \n-    /// ln(10.0)\n+    /// ln(10)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }"}, {"sha": "82a09e599e027a49065a342fcaac64fd31da2a79", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -20,121 +20,121 @@ use mem;\n use num::FpCategory as Fp;\n use num::Float;\n \n+/// The radix or base of the internal representation of `f64`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const RADIX: u32 = 2;\n \n+/// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MANTISSA_DIGITS: u32 = 53;\n+/// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const DIGITS: u32 = 15;\n \n+/// Difference between `1.0` and the next largest representable number.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n-/// Smallest finite f64 value\n+/// Smallest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f64 = -1.7976931348623157e+308_f64;\n-/// Smallest positive, normalized f64 value\n+/// Smallest positive normal `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n-/// Largest finite f64 value\n+/// Largest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f64 = 1.7976931348623157e+308_f64;\n \n+/// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_EXP: i32 = -1021;\n+/// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_EXP: i32 = 1024;\n \n+/// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN_10_EXP: i32 = -307;\n+/// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX_10_EXP: i32 = 308;\n \n+/// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NAN: f64 = 0.0_f64/0.0_f64;\n+/// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const INFINITY: f64 = 1.0_f64/0.0_f64;\n+/// Negative infinity (-\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod consts {\n     // FIXME: replace with mathematical constants from cmath.\n \n-    /// Archimedes' constant\n+    /// Archimedes' constant (\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const PI: f64 = 3.14159265358979323846264338327950288_f64;\n \n-    /// pi/2.0\n+    /// \u03c0/2\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_2: f64 = 1.57079632679489661923132169163975144_f64;\n \n-    /// pi/3.0\n+    /// \u03c0/3\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_3: f64 = 1.04719755119659774615421446109316763_f64;\n \n-    /// pi/4.0\n+    /// \u03c0/4\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_4: f64 = 0.785398163397448309615660845819875721_f64;\n \n-    /// pi/6.0\n+    /// \u03c0/6\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_6: f64 = 0.52359877559829887307710723054658381_f64;\n \n-    /// pi/8.0\n+    /// \u03c0/8\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_PI_8: f64 = 0.39269908169872415480783042290993786_f64;\n \n-    /// 1.0/pi\n+    /// 1/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_PI: f64 = 0.318309886183790671537767526745028724_f64;\n \n-    /// 2.0/pi\n+    /// 2/\u03c0\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_PI: f64 = 0.636619772367581343075535053490057448_f64;\n \n-    /// 2.0/sqrt(pi)\n+    /// 2/sqrt(\u03c0)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_2_SQRT_PI: f64 = 1.12837916709551257389615890312154517_f64;\n \n-    /// sqrt(2.0)\n+    /// sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const SQRT_2: f64 = 1.41421356237309504880168872420969808_f64;\n \n-    /// 1.0/sqrt(2.0)\n+    /// 1/sqrt(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const FRAC_1_SQRT_2: f64 = 0.707106781186547524400844362104849039_f64;\n \n-    /// Euler's number\n+    /// Euler's number (e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const E: f64 = 2.71828182845904523536028747135266250_f64;\n \n-    /// log2(e)\n+    /// log<sub>2</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG2_E: f64 = 1.44269504088896340735992468100189214_f64;\n \n-    /// log10(e)\n+    /// log<sub>10</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG10_E: f64 = 0.434294481903251827651128918916605082_f64;\n \n-    /// ln(2.0)\n+    /// ln(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_2: f64 = 0.693147180559945309417232121458176568_f64;\n \n-    /// ln(10.0)\n+    /// ln(10)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }"}, {"sha": "e74c30d5e5af8db76279a044e1051269f2354bbf", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -12,11 +12,11 @@\n \n macro_rules! int_module { ($T:ident, $bits:expr) => (\n \n+/// The smallest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN: $T = $T::min_value();\n+/// The largest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX: $T = $T::max_value();\n \n ) }"}, {"sha": "b41ef7984bbab5c3131ba0bd9a84a20a307cdfb1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -11,7 +11,6 @@\n //! Numeric traits and functions for the built-in numeric types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![allow(missing_docs)]\n \n use char::CharExt;\n use cmp::PartialOrd;"}, {"sha": "cc9256ab6bf4ee34fd5e2126eb8f9e66e77461b5", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -12,11 +12,11 @@\n \n macro_rules! uint_module { ($T:ident, $bits:expr) => (\n \n+/// The smallest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MIN: $T = $T::min_value();\n+/// The largest value that can be represented by this integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n pub const MAX: $T = $T::max_value();\n \n ) }"}, {"sha": "e1e681b7aff3541e3a8fe2c2589d85aca9128ada", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -836,7 +836,7 @@ pub enum Expr_ {\n     ExprVec(HirVec<P<Expr>>),\n     /// A function call\n     ///\n-    /// The first field resolves to the function itself,\n+    /// The first field resolves to the function itself (usually an `ExprPath`),\n     /// and the second field is the list of arguments\n     ExprCall(P<Expr>, HirVec<P<Expr>>),\n     /// A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)\n@@ -845,9 +845,9 @@ pub enum Expr_ {\n     /// The vector of `Ty`s are the ascripted type parameters for the method\n     /// (within the angle brackets).\n     ///\n-    /// The first element of the vector of `Expr`s is the expression that evaluates\n-    /// to the object on which the method is being called on (the receiver),\n-    /// and the remaining elements are the rest of the arguments.\n+    /// The first element of the vector of `Expr`s is the expression that\n+    /// evaluates to the object on which the method is being called on (the\n+    /// receiver), and the remaining elements are the rest of the arguments.\n     ///\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprMethodCall(foo, [Bar, Baz], [x, a, b, c, d])`.\n@@ -919,13 +919,13 @@ pub enum Expr_ {\n     /// Inline assembly (from `asm!`), with its outputs and inputs.\n     ExprInlineAsm(InlineAsm, Vec<P<Expr>>, Vec<P<Expr>>),\n \n-    /// A struct literal expression.\n+    /// A struct or struct-like variant literal expression.\n     ///\n     /// For example, `Foo {x: 1, y: 2}`, or\n     /// `Foo {x: 1, .. base}`, where `base` is the `Option<Expr>`.\n     ExprStruct(Path, HirVec<Field>, Option<P<Expr>>),\n \n-    /// A vector literal constructed from one repeated element.\n+    /// An array literal constructed from one repeated element.\n     ///\n     /// For example, `[1; 5]`. The first expression is the element\n     /// to be repeated; the second is the number of times to repeat it.\n@@ -950,14 +950,21 @@ pub struct QSelf {\n     pub position: usize,\n }\n \n+/// Hints at the original code for a `match _ { .. }`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum MatchSource {\n+    /// A `match _ { .. }`\n     Normal,\n+    /// An `if let _ = _ { .. }` (optionally with `else { .. }`)\n     IfLetDesugar {\n         contains_else_clause: bool,\n     },\n+    /// A `while let _ = _ { .. }` (which was desugared to a\n+    /// `loop { match _ { .. } }`)\n     WhileLetDesugar,\n+    /// A desugared `for _ in _ { .. }` loop\n     ForLoopDesugar,\n+    /// A desugared `?` operator\n     TryDesugar,\n }\n \n@@ -975,8 +982,7 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-/// Represents a method's signature in a trait declaration,\n-/// or in an implementation.\n+/// Represents a method's signature in a trait declaration or implementation.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MethodSig {\n     pub unsafety: Unsafety,\n@@ -999,13 +1005,20 @@ pub struct TraitItem {\n     pub span: Span,\n }\n \n+/// Represents a trait method or associated constant or type\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum TraitItem_ {\n+    /// An associated constant with an optional value (otherwise `impl`s\n+    /// must contain a value)\n     ConstTraitItem(P<Ty>, Option<P<Expr>>),\n+    /// A method with an optional body\n     MethodTraitItem(MethodSig, Option<P<Block>>),\n+    /// An associated type with (possibly empty) bounds and optional concrete\n+    /// type\n     TypeTraitItem(TyParamBounds, Option<P<Ty>>),\n }\n \n+/// Represents anything within an `impl` block\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ImplItem {\n     pub id: NodeId,\n@@ -1017,10 +1030,15 @@ pub struct ImplItem {\n     pub span: Span,\n }\n \n+/// Represents different contents within `impl`s\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ImplItemKind {\n+    /// An associated constant of the given type, set to the constant result\n+    /// of the expression\n     Const(P<Ty>, P<Expr>),\n+    /// A method implementation with the given signature and body\n     Method(MethodSig, P<Block>),\n+    /// An associated type\n     Type(P<Ty>),\n }\n "}, {"sha": "9a3980688f3ad677090c3c9bae1e1c0071520dd7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -2880,8 +2880,7 @@ impl<'a> Resolver<'a> {\n                                 if !msg.is_empty() {\n                                     msg = format!(\". Did you mean {}?\", msg);\n                                 } else {\n-                                    // we check if this a module and if so, we display a help\n-                                    // message\n+                                    // we display a help message if this is a module\n                                     let name_path = path.segments.iter()\n                                                         .map(|seg| seg.identifier.name)\n                                                         .collect::<Vec<_>>();"}, {"sha": "4ffb5477305493e1e366a73dd125a6ffde0b85eb", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -29,6 +29,7 @@\n \n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::map::Node;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt, ImplOrTraitItem, ImplOrTraitItemContainer};\n \n@@ -1299,7 +1300,14 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n             ast::ExprKind::TupField(ref sub_ex, idx) => {\n                 self.visit_expr(&sub_ex);\n \n-                let hir_node = self.save_ctxt.tcx.map.expect_expr(sub_ex.id);\n+                let hir_node = match self.save_ctxt.tcx.map.find(sub_ex.id) {\n+                    Some(Node::NodeExpr(expr)) => expr,\n+                    _ => {\n+                        debug!(\"Missing or weird node for sub-expression {} in {:?}\",\n+                               sub_ex.id, ex);\n+                        return;\n+                    }\n+                };\n                 let ty = &self.tcx.expr_ty_adjusted(&hir_node).sty;\n                 match *ty {\n                     ty::TyStruct(def, _) => {"}, {"sha": "096e1ecc9ffb6a33a67b1dceb84a2b8837dd1d26", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -107,7 +107,7 @@ pub enum Class {\n ///\n /// The classifier will call into the `Writer` implementation as it finds spans\n /// of text to highlight. Exactly how that text should be highlighted is up to\n-/// the implemention.\n+/// the implementation.\n pub trait Writer {\n     /// Called when we start processing a span of text that should be highlighted.\n     /// The `Class` argument specifies how it should be highlighted."}, {"sha": "c263bcb04e9b6fc62b199100b5a65c6a47211598", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -2716,7 +2716,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n         let parentlen = cx.current.len() - if it.is_mod() {1} else {0};\n \n         // the sidebar is designed to display sibling functions, modules and\n-        // other miscellaneous informations. since there are lots of sibling\n+        // other miscellaneous information. since there are lots of sibling\n         // items (and that causes quadratic growth in large modules),\n         // we refactor common parts into a shared JavaScript file per module.\n         // still, we don't move everything into JS because we want to preserve"}, {"sha": "303cc671f4a230c79181cd8ad91ad8b66992b237", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -572,14 +572,6 @@ a.test-arrow {\n     right: 5px;\n }\n \n-.methods .section-header {\n-    /* Override parent class attributes. */\n-    border-bottom: none !important;\n-    font-size: 1.1em !important;\n-    margin: 0 0 -5px;\n-    padding: 0;\n-}\n-\n .section-header:hover a:after {\n     content: '\\2002\\00a7\\2002';\n }"}, {"sha": "a408b4378e19e6b14cdb0f68478adf628f527dc0", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c674a11471ec0569f616854d715941757a48a0a/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=5c674a11471ec0569f616854d715941757a48a0a", "patch": "@@ -239,7 +239,7 @@ mod fallback {\n         text[..offset].iter().rposition(|elt| *elt == x)\n     }\n \n-    // test fallback implementations on all plattforms\n+    // test fallback implementations on all platforms\n     #[test]\n     fn matches_one() {\n         assert_eq!(Some(0), memchr(b'a', b\"a\"));"}]}