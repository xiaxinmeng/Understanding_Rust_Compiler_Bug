{"sha": "bdf854701375c0692f9014db71a097520fddd41f", "node_id": "C_kwDOAAsO6NoAKGJkZjg1NDcwMTM3NWMwNjkyZjkwMTRkYjcxYTA5NzUyMGZkZGQ0MWY", "commit": {"author": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-11-07T13:51:29Z"}, "committer": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-11-07T13:51:29Z"}, "message": "Clarify the intent\n\nThanks to Lukas Wirth for a suggestion.", "tree": {"sha": "1f7edb7812a488f7575acbef6d9e299feeda3289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f7edb7812a488f7575acbef6d9e299feeda3289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf854701375c0692f9014db71a097520fddd41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf854701375c0692f9014db71a097520fddd41f", "html_url": "https://github.com/rust-lang/rust/commit/bdf854701375c0692f9014db71a097520fddd41f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf854701375c0692f9014db71a097520fddd41f/comments", "author": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "180b4cedec730d0c0127d0d41714abe4176d5365", "url": "https://api.github.com/repos/rust-lang/rust/commits/180b4cedec730d0c0127d0d41714abe4176d5365", "html_url": "https://github.com/rust-lang/rust/commit/180b4cedec730d0c0127d0d41714abe4176d5365"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "32dd2db405c89fa0b6d9d6fa5224d86922fc6122", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bdf854701375c0692f9014db71a097520fddd41f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf854701375c0692f9014db71a097520fddd41f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=bdf854701375c0692f9014db71a097520fddd41f", "patch": "@@ -209,19 +209,19 @@ impl ast::String {\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n         let mut buf = String::new();\n-        let mut prev = 0;\n+        let mut prev_end = 0;\n         let mut has_error = false;\n         unescape_literal(text, Mode::Str, &mut |char_range, unescaped_char| match (\n             unescaped_char,\n             buf.capacity() == 0,\n         ) {\n             (Ok(c), false) => buf.push(c),\n-            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev => {\n-                prev = char_range.end\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev_end => {\n+                prev_end = char_range.end\n             }\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n-                buf.push_str(&text[..prev]);\n+                buf.push_str(&text[..prev_end]);\n                 buf.push(c);\n             }\n             (Err(_), _) => has_error = true,\n@@ -254,19 +254,19 @@ impl ast::ByteString {\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n         let mut buf: Vec<u8> = Vec::new();\n-        let mut prev = 0;\n+        let mut prev_end = 0;\n         let mut has_error = false;\n         unescape_literal(text, Mode::ByteStr, &mut |char_range, unescaped_char| match (\n             unescaped_char,\n             buf.capacity() == 0,\n         ) {\n             (Ok(c), false) => buf.push(c as u8),\n-            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev => {\n-                prev = char_range.end\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev_end => {\n+                prev_end = char_range.end\n             }\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n-                buf.extend_from_slice(text[..prev].as_bytes());\n+                buf.extend_from_slice(text[..prev_end].as_bytes());\n                 buf.push(c as u8);\n             }\n             (Err(_), _) => has_error = true,\n@@ -449,11 +449,10 @@ mod tests {\n         check_string_value(r\"\\foobar\", None);\n         check_string_value(r\"\\nfoobar\", \"\\nfoobar\");\n         check_string_value(r\"C:\\\\Windows\\\\System32\\\\\", \"C:\\\\Windows\\\\System32\\\\\");\n-        check_string_value(r\"\\x61bcde\", \"a\\x62cde\");\n+        check_string_value(r\"\\x61bcde\", \"abcde\");\n         check_string_value(\n             r\"a\\\n-bcde\", \"a\\\n-bcde\",\n+bcde\", \"abcde\",\n         );\n     }\n "}]}