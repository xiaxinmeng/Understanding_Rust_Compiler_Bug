{"sha": "38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "node_id": "C_kwDOAAsO6NoAKDM4YTc2ZjMzMjIwYzRiOWQxM2RkYTFmYThmNmM2MjljOGE3YmNjNWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T15:09:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T15:09:12Z"}, "message": "Auto merge of #106984 - Dylan-DPC:rollup-xce8263, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #101698 (Constify `TypeId` ordering impls)\n - #106148 (Fix unused_parens issue for higher ranked function pointers)\n - #106922 (Avoid unsafe code in `to_ascii_[lower/upper]case()`)\n - #106951 (Remove ineffective run of SimplifyConstCondition)\n - #106962 (Fix use suggestion span)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0f11abc1cda8b67002491653948ba532ac8e5784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f11abc1cda8b67002491653948ba532ac8e5784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "html_url": "https://github.com/rust-lang/rust/commit/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34cc658eb477958e2b73e05586e7af66faefad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34cc658eb477958e2b73e05586e7af66faefad9", "html_url": "https://github.com/rust-lang/rust/commit/f34cc658eb477958e2b73e05586e7af66faefad9"}, {"sha": "e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "html_url": "https://github.com/rust-lang/rust/commit/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f"}], "stats": {"total": 416, "additions": 310, "deletions": 106}, "files": [{"sha": "337a19dd024d2fec195601c77de253036df847bf", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -248,7 +248,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n+        lint_callback!(self, enter_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n+        lint_callback!(self, exit_where_predicate, p);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {"}, {"sha": "d6be4da03286f75f1e4868e5bac454b345008a8b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -145,7 +145,7 @@ early_lint_methods!(\n     [\n         pub BuiltinCombinedEarlyLintPass,\n         [\n-            UnusedParens: UnusedParens,\n+            UnusedParens: UnusedParens::new(),\n             UnusedBraces: UnusedBraces,\n             UnusedImportBraces: UnusedImportBraces,\n             UnsafeCode: UnsafeCode,"}, {"sha": "0bf01c4e567814f1f720de66362f310cf5c0f934", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -171,6 +171,9 @@ macro_rules! early_lint_methods {\n \n             /// Counterpart to `enter_lint_attrs`.\n             fn exit_lint_attrs(a: &[ast::Attribute]);\n+\n+            fn enter_where_predicate(a: &ast::WherePredicate);\n+            fn exit_where_predicate(a: &ast::WherePredicate);\n         ]);\n     )\n }"}, {"sha": "4c9b3df2dbd33d706d04c3cc5e911ceeb9c70a2c", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -824,7 +824,17 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n-declare_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n+pub struct UnusedParens {\n+    with_self_ty_parens: bool,\n+}\n+\n+impl UnusedParens {\n+    pub fn new() -> Self {\n+        Self { with_self_ty_parens: false }\n+    }\n+}\n+\n+impl_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n \n impl UnusedDelimLint for UnusedParens {\n     const DELIM_STR: &'static str = \"parentheses\";\n@@ -999,36 +1009,58 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let ast::TyKind::Paren(r) = &ty.kind {\n-            match &r.kind {\n-                ast::TyKind::TraitObject(..) => {}\n-                ast::TyKind::BareFn(b) if b.generic_params.len() > 0 => {}\n-                ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n-                ast::TyKind::Array(_, len) => {\n-                    self.check_unused_delims_expr(\n-                        cx,\n-                        &len.value,\n-                        UnusedDelimsCtx::ArrayLenExpr,\n-                        false,\n-                        None,\n-                        None,\n-                    );\n-                }\n-                _ => {\n-                    let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n-                        Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n-                    } else {\n-                        None\n-                    };\n-                    self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n+        match &ty.kind {\n+            ast::TyKind::Array(_, len) => {\n+                self.check_unused_delims_expr(\n+                    cx,\n+                    &len.value,\n+                    UnusedDelimsCtx::ArrayLenExpr,\n+                    false,\n+                    None,\n+                    None,\n+                );\n+            }\n+            ast::TyKind::Paren(r) => {\n+                match &r.kind {\n+                    ast::TyKind::TraitObject(..) => {}\n+                    ast::TyKind::BareFn(b)\n+                        if self.with_self_ty_parens && b.generic_params.len() > 0 => {}\n+                    ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n+                    _ => {\n+                        let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n+                            Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n+                        } else {\n+                            None\n+                        };\n+                        self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n+                    }\n                 }\n+                self.with_self_ty_parens = false;\n             }\n+            _ => {}\n         }\n     }\n \n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         <Self as UnusedDelimLint>::check_item(self, cx, item)\n     }\n+\n+    fn enter_where_predicate(&mut self, _: &EarlyContext<'_>, pred: &ast::WherePredicate) {\n+        use rustc_ast::{WhereBoundPredicate, WherePredicate};\n+        if let WherePredicate::BoundPredicate(WhereBoundPredicate {\n+                bounded_ty,\n+                bound_generic_params,\n+                ..\n+            }) = pred &&\n+            let ast::TyKind::Paren(_) = &bounded_ty.kind &&\n+            bound_generic_params.is_empty() {\n+                self.with_self_ty_parens = true;\n+        }\n+    }\n+\n+    fn exit_where_predicate(&mut self, _: &EarlyContext<'_>, _: &ast::WherePredicate) {\n+        assert!(!self.with_self_ty_parens);\n+    }\n }\n \n declare_lint! {"}, {"sha": "20b7fdcfe6d4d44a5b98de025359fb1ed99b2974", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -487,7 +487,6 @@ fn run_analysis_to_runtime_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>\n fn run_analysis_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let passes: &[&dyn MirPass<'tcx>] = &[\n         &cleanup_post_borrowck::CleanupPostBorrowck,\n-        &simplify_branches::SimplifyConstCondition::new(\"initial\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &simplify::SimplifyCfg::new(\"early-opt\"),\n         &deref_separator::Derefer,"}, {"sha": "f24e405018b7474eb71b969e4fea74b8aaf56995", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -5,10 +5,10 @@ use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{self as ast, Crate, ItemKind, ModKind, NodeId, Path, CRATE_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::struct_span_err;\n use rustc_errors::{\n     pluralize, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n+use rustc_errors::{struct_span_err, SuggestionStyle};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n@@ -2418,7 +2418,7 @@ fn show_candidates(\n         }\n \n         if let Some(span) = use_placement_span {\n-            let add_use = match mode {\n+            let (add_use, trailing) = match mode {\n                 DiagnosticMode::Pattern => {\n                     err.span_suggestions(\n                         span,\n@@ -2428,21 +2428,23 @@ fn show_candidates(\n                     );\n                     return;\n                 }\n-                DiagnosticMode::Import => \"\",\n-                DiagnosticMode::Normal => \"use \",\n+                DiagnosticMode::Import => (\"\", \"\"),\n+                DiagnosticMode::Normal => (\"use \", \";\\n\"),\n             };\n             for candidate in &mut accessible_path_strings {\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n-                let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                candidate.0 = format!(\"{add_use}{}{append};\\n{additional_newline}\", &candidate.0);\n+                let additional_newline = if let FoundUse::No = found_use && let DiagnosticMode::Normal = mode { \"\\n\" } else { \"\" };\n+                candidate.0 =\n+                    format!(\"{add_use}{}{append}{trailing}{additional_newline}\", &candidate.0);\n             }\n \n-            err.span_suggestions(\n+            err.span_suggestions_with_style(\n                 span,\n                 &msg,\n                 accessible_path_strings.into_iter().map(|a| a.0),\n                 Applicability::MaybeIncorrect,\n+                SuggestionStyle::ShowAlways,\n             );\n             if let [first, .., last] = &path[..] {\n                 let sp = first.ident.span.until(last.ident.span);\n@@ -2463,7 +2465,7 @@ fn show_candidates(\n                 msg.push_str(&candidate.0);\n             }\n \n-            err.note(&msg);\n+            err.help(&msg);\n         }\n     } else if !matches!(mode, DiagnosticMode::Import) {\n         assert!(!inaccessible_path_strings.is_empty());"}, {"sha": "afbe5cfaf8ef9dbe0cbe87436cc50e249c1d7ffa", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -559,10 +559,9 @@ impl str {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> String {\n-        let mut bytes = self.as_bytes().to_vec();\n-        bytes.make_ascii_uppercase();\n-        // make_ascii_uppercase() preserves the UTF-8 invariant.\n-        unsafe { String::from_utf8_unchecked(bytes) }\n+        let mut s = self.to_owned();\n+        s.make_ascii_uppercase();\n+        s\n     }\n \n     /// Returns a copy of this string where each character is mapped to its\n@@ -592,10 +591,9 @@ impl str {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> String {\n-        let mut bytes = self.as_bytes().to_vec();\n-        bytes.make_ascii_lowercase();\n-        // make_ascii_lowercase() preserves the UTF-8 invariant.\n-        unsafe { String::from_utf8_unchecked(bytes) }\n+        let mut s = self.to_owned();\n+        s.make_ascii_lowercase();\n+        s\n     }\n }\n "}, {"sha": "c0fb0d993c3ed939ad5087a1dbb04f555463115e", "filename": "library/core/src/any.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -662,7 +662,8 @@ impl dyn Any + Send + Sync {\n /// While `TypeId` implements `Hash`, `PartialOrd`, and `Ord`, it is worth\n /// noting that the hashes and ordering will vary between Rust releases. Beware\n /// of relying on them inside of your code!\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+#[derive(Clone, Copy, Debug, Hash, Eq)]\n+#[derive_const(PartialEq, PartialOrd, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TypeId {\n     t: u64,"}, {"sha": "3581484050dd1a4e506574b46d99ce609c5ed996", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -374,10 +374,10 @@ static_assert!((TAG_MASK + 1).is_power_of_two());\n static_assert!(align_of::<SimpleMessage>() >= TAG_MASK + 1);\n static_assert!(align_of::<Custom>() >= TAG_MASK + 1);\n \n-static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE_MESSAGE), TAG_SIMPLE_MESSAGE);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_CUSTOM), TAG_CUSTOM);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_OS), TAG_OS);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE), TAG_SIMPLE);\n+static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE_MESSAGE, TAG_SIMPLE_MESSAGE);\n+static_assert!(@usize_eq: TAG_MASK & TAG_CUSTOM, TAG_CUSTOM);\n+static_assert!(@usize_eq: TAG_MASK & TAG_OS, TAG_OS);\n+static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE, TAG_SIMPLE);\n \n // This is obviously true (`TAG_CUSTOM` is `0b01`), but in `Repr::new_custom` we\n // offset a pointer by this value, and expect it to both be within the same"}, {"sha": "909997340f36efc0d35704b01eba7cf647b9220a", "filename": "tests/ui/const-generics/issues/issue-90318.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -12,14 +12,14 @@ impl True for If<true> {}\n fn consume<T: 'static>(_val: T)\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: can't compare\n+    //~^ overly complex generic constant\n {\n }\n \n fn test<T: 'static>()\n where\n     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-    //~^ ERROR: can't compare\n+    //~^ overly complex generic constant\n {\n }\n "}, {"sha": "f13fd795d7a1020c98c8788c1a4798cbcebf8152", "filename": "tests/ui/const-generics/issues/issue-90318.stderr", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90318.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -1,29 +1,24 @@\n-error[E0277]: can't compare `TypeId` with `_` in const contexts\n-  --> $DIR/issue-90318.rs:14:28\n+error: overly complex generic constant\n+  --> $DIR/issue-90318.rs:14:8\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^ no implementation for `TypeId == _`\n+   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          borrowing is not supported in generic constants\n    |\n-   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n-note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n-  --> $DIR/issue-90318.rs:14:28\n-   |\n-LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n \n-error[E0277]: can't compare `TypeId` with `_` in const contexts\n-  --> $DIR/issue-90318.rs:21:28\n+error: overly complex generic constant\n+  --> $DIR/issue-90318.rs:21:8\n    |\n LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^ no implementation for `TypeId == _`\n+   |        ^^-----------------^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          borrowing is not supported in generic constants\n    |\n-   = help: the trait `~const PartialEq<_>` is not implemented for `TypeId`\n-note: the trait `PartialEq<_>` is implemented for `TypeId`, but that implementation is not `const`\n-  --> $DIR/issue-90318.rs:21:28\n-   |\n-LL |     If<{ TypeId::of::<T>() != TypeId::of::<()>() }>: True,\n-   |                            ^^\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "f10d1c24f7dedfb1397d1286a277c759619e76cf", "filename": "tests/ui/consts/const_cmp_type_id.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+#![feature(const_type_id)]\n+#![feature(const_trait_impl)]\n+\n+use std::any::TypeId;\n+\n+const fn main() {\n+    assert!(TypeId::of::<u8>() == TypeId::of::<u8>());\n+    assert!(TypeId::of::<()>() != TypeId::of::<u8>());\n+    const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();\n+    // can't assert `_A` because it is not deterministic\n+}"}, {"sha": "addcc1eaab60bb514d472f03d09109ea267aba38", "filename": "tests/ui/consts/issue-73976-monomorphic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -7,6 +7,7 @@\n \n #![feature(const_type_id)]\n #![feature(const_type_name)]\n+#![feature(const_trait_impl)]\n \n use std::any::{self, TypeId};\n \n@@ -17,7 +18,7 @@ impl<T: 'static> GetTypeId<T> {\n }\n \n const fn check_type_id<T: 'static>() -> bool {\n-    matches!(GetTypeId::<T>::VALUE, GetTypeId::<usize>::VALUE)\n+    GetTypeId::<T>::VALUE == GetTypeId::<usize>::VALUE\n }\n \n pub struct GetTypeNameLen<T>(T);"}, {"sha": "e0b3b8685d6eb02ea62254083bbe848c6d168596", "filename": "tests/ui/empty/empty-macro-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fempty%2Fempty-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fempty%2Fempty-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty%2Fempty-macro-use.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `macro_two` in this scope\n LL |     macro_two!();\n    |     ^^^^^^^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            two_macros::macro_two\n \n error: aborting due to previous error"}, {"sha": "92e8a44b55fe570fd2fdacf0fd9f4f1aedc8c01f", "filename": "tests/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-55897.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -30,7 +30,7 @@ LL |     use env;\n help: consider importing this module instead\n    |\n LL |     use std::env;\n-   |         ~~~~~~~~~\n+   |         ~~~~~~~~\n \n error: cannot determine resolution for the macro `env`\n   --> $DIR/issue-55897.rs:6:22"}, {"sha": "c01901be5fe78d976d102700253637731c744ba0", "filename": "tests/ui/hygiene/globs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fglobs.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -51,7 +51,7 @@ LL | n!(f);\n LL |         n!(f);\n    |            ^ not found in this scope\n    |\n-   = note: consider importing this function:\n+   = help: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -64,7 +64,7 @@ LL | n!(f);\n LL |                 f\n    |                 ^ not found in this scope\n    |\n-   = note: consider importing this function:\n+   = help: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3f31b041b62038d329f16c08de10ac3cae1d36c0", "filename": "tests/ui/hygiene/no_implicit_prelude-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `print` in this scope\n LL |         print!();\n    |         ^^^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            std::print\n \n error: aborting due to previous error"}, {"sha": "b6b1bc5fccf022a3bcd278ecdf527dcb2296b5dd", "filename": "tests/ui/imports/bad-import-in-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fbad-import-in-nested.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -4,7 +4,7 @@ error[E0432]: unresolved import `super::super::C::D::AA`\n LL |         use super::{super::C::D::AA, AA as _};\n    |                     ^^^^^^^^^^^^^^^ no `AA` in `C::D`\n    |\n-   = note: consider importing this type alias instead:\n+   = help: consider importing this type alias instead:\n            crate::A::AA\n \n error[E0432]: unresolved import `crate::C::AA`\n@@ -13,7 +13,7 @@ error[E0432]: unresolved import `crate::C::AA`\n LL |     use crate::C::{self, AA};\n    |                          ^^ no `AA` in `C`\n    |\n-   = note: consider importing this type alias instead:\n+   = help: consider importing this type alias instead:\n            crate::A::AA\n \n error[E0432]: unresolved import `crate::C::BB`\n@@ -22,7 +22,7 @@ error[E0432]: unresolved import `crate::C::BB`\n LL |     use crate::{A, C::BB};\n    |                    ^^^^^ no `BB` in `C`\n    |\n-   = note: consider importing this type alias instead:\n+   = help: consider importing this type alias instead:\n            crate::A::BB\n \n error: aborting due to 3 previous errors"}, {"sha": "f9c5cf920e1f10fc25abc0ab67d36e12ad35295e", "filename": "tests/ui/imports/bad-import-with-rename.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fbad-import-with-rename.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -7,7 +7,7 @@ LL |     use crate::D::B as _;\n help: consider importing this type alias instead\n    |\n LL |     use A::B as _;\n-   |         ~~~~~~~~~~\n+   |         ~~~~~~~~~\n \n error[E0432]: unresolved import `crate::D::B2`\n   --> $DIR/bad-import-with-rename.rs:10:9\n@@ -18,7 +18,7 @@ LL |     use crate::D::B2;\n help: consider importing this type alias instead\n    |\n LL |     use A::B2;\n-   |         ~~~~~~\n+   |         ~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3448f3119778a6d4b5592297f1c56d0096d2f949", "filename": "tests/ui/imports/issue-56125.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-56125.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -7,13 +7,13 @@ LL |     use empty::issue_56125;\n help: consider importing one of these items instead\n    |\n LL |     use crate::m3::last_segment::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     use crate::m3::non_last_segment::non_last_segment::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     use issue_56125::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     use issue_56125::last_segment::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      and 1 other candidate\n \n error[E0659]: `issue_56125` is ambiguous"}, {"sha": "5374ba3dc9e6d07783f9914523118b6ea121de6a", "filename": "tests/ui/imports/issue-57015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fissue-57015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fimports%2Fissue-57015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-57015.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -7,7 +7,7 @@ LL | use single_err::something;\n help: consider importing this module instead\n    |\n LL | use glob_ok::something;\n-   |     ~~~~~~~~~~~~~~~~~~~\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "9b06a4fde04d76cdd2890a2a7f6c1e48cc2be621", "filename": "tests/ui/lint/unused/issue-105061-array-lint.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -0,0 +1,11 @@\n+#![warn(unused)]\n+#![deny(warnings)]\n+\n+fn main() {\n+    let _x: ([u32; 3]); //~ ERROR unnecessary parentheses around type\n+    let _y: [u8; (3)]; //~ ERROR unnecessary parentheses around const expression\n+    let _z: ([u8; (3)]);\n+    //~^ ERROR unnecessary parentheses around const expression\n+    //~| ERROR unnecessary parentheses around type\n+\n+}"}, {"sha": "7eb761aee431f29919371feeb0ec7904b5d28b24", "filename": "tests/ui/lint/unused/issue-105061-array-lint.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-array-lint.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -0,0 +1,56 @@\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-array-lint.rs:5:13\n+   |\n+LL |     let _x: ([u32; 3]);\n+   |             ^        ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-105061-array-lint.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(unused_parens)]` implied by `#[deny(warnings)]`\n+help: remove these parentheses\n+   |\n+LL -     let _x: ([u32; 3]);\n+LL +     let _x: [u32; 3];\n+   |\n+\n+error: unnecessary parentheses around const expression\n+  --> $DIR/issue-105061-array-lint.rs:6:18\n+   |\n+LL |     let _y: [u8; (3)];\n+   |                  ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let _y: [u8; (3)];\n+LL +     let _y: [u8; 3];\n+   |\n+\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-array-lint.rs:7:13\n+   |\n+LL |     let _z: ([u8; (3)]);\n+   |             ^         ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let _z: ([u8; (3)]);\n+LL +     let _z: [u8; (3)];\n+   |\n+\n+error: unnecessary parentheses around const expression\n+  --> $DIR/issue-105061-array-lint.rs:7:19\n+   |\n+LL |     let _z: ([u8; (3)]);\n+   |                   ^ ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     let _z: ([u8; (3)]);\n+LL +     let _z: ([u8; 3]);\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "7e4e09473493a2cff2b723c4d43ba54502d6b59a", "filename": "tests/ui/lint/unused/issue-105061-should-lint.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -0,0 +1,23 @@\n+#![warn(unused)]\n+#![deny(warnings)]\n+\n+struct Inv<'a>(&'a mut &'a ());\n+\n+trait Trait<'a> {}\n+impl<'b> Trait<'b> for for<'a> fn(Inv<'a>) {}\n+\n+fn with_bound()\n+where\n+    for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>, //~ ERROR unnecessary parentheses around type\n+{}\n+\n+trait Hello<T> {}\n+fn with_dyn_bound<T>()\n+where\n+    (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T> //~ ERROR unnecessary parentheses around type\n+{}\n+\n+fn main() {\n+    with_bound();\n+    with_dyn_bound();\n+}"}, {"sha": "e591f1ffb6b897f6e8daeff38c32376301d2505a", "filename": "tests/ui/lint/unused/issue-105061-should-lint.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061-should-lint.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -0,0 +1,32 @@\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-should-lint.rs:11:13\n+   |\n+LL |     for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>,\n+   |             ^                   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-105061-should-lint.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(unused_parens)]` implied by `#[deny(warnings)]`\n+help: remove these parentheses\n+   |\n+LL -     for<'b> (for<'a> fn(Inv<'a>)): Trait<'b>,\n+LL +     for<'b> for<'a> fn(Inv<'a>): Trait<'b>,\n+   |\n+\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061-should-lint.rs:17:16\n+   |\n+LL |     (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T>\n+   |                ^                  ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     (dyn Hello<(for<'b> fn(&'b ()))>): Hello<T>\n+LL +     (dyn Hello<for<'b> fn(&'b ())>): Hello<T>\n+   |\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "92d636d0ac62de4acbd857a8dc2a69c7af676e80", "filename": "tests/ui/lint/unused/issue-105061.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -0,0 +1,17 @@\n+#![warn(unused)]\n+#![deny(warnings)]\n+\n+struct Inv<'a>(&'a mut &'a ());\n+\n+trait Trait {}\n+impl Trait for (for<'a> fn(Inv<'a>),) {}\n+\n+\n+fn with_bound()\n+where\n+    ((for<'a> fn(Inv<'a>)),): Trait, //~ ERROR unnecessary parentheses around type\n+{}\n+\n+fn main() {\n+    with_bound();\n+}"}, {"sha": "f07aa2012df5f48d6a346eeef830f0ef01090614", "filename": "tests/ui/lint/unused/issue-105061.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Flint%2Funused%2Fissue-105061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fissue-105061.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -0,0 +1,20 @@\n+error: unnecessary parentheses around type\n+  --> $DIR/issue-105061.rs:12:6\n+   |\n+LL |     ((for<'a> fn(Inv<'a>)),): Trait,\n+   |      ^                   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-105061.rs:2:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(unused_parens)]` implied by `#[deny(warnings)]`\n+help: remove these parentheses\n+   |\n+LL -     ((for<'a> fn(Inv<'a>)),): Trait,\n+LL +     (for<'a> fn(Inv<'a>),): Trait,\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "60ba2eab7a7bfbe8dbfb6f62383a68a2842482da", "filename": "tests/ui/macros/issue-88228.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmacros%2Fissue-88228.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmacros%2Fissue-88228.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-88228.rs?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -8,7 +8,7 @@ mod hey {\n \n #[derive(Bla)]\n //~^ ERROR cannot find derive macro `Bla`\n-//~| NOTE consider importing this derive macro\n+//~| HELP consider importing this derive macro\n struct A;\n \n #[derive(println)]\n@@ -19,5 +19,5 @@ struct B;\n fn main() {\n     bla!();\n     //~^ ERROR cannot find macro `bla`\n-    //~| NOTE consider importing this macro\n+    //~| HELP consider importing this macro\n }"}, {"sha": "fe8a1deaedd77e2f2029b333344f6bc30b258697", "filename": "tests/ui/macros/issue-88228.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmacros%2Fissue-88228.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmacros%2Fissue-88228.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-88228.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `bla` in this scope\n LL |     bla!();\n    |     ^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            crate::hey::bla\n \n error: cannot find derive macro `println` in this scope\n@@ -21,7 +21,7 @@ error: cannot find derive macro `Bla` in this scope\n LL | #[derive(Bla)]\n    |          ^^^\n    |\n-   = note: consider importing this derive macro:\n+   = help: consider importing this derive macro:\n            crate::hey::Bla\n \n error: aborting due to 3 previous errors"}, {"sha": "ca5f0f190e8ba445c34214361d8b5d9ab54b762c", "filename": "tests/ui/macros/macro-use-wrong-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -9,7 +9,7 @@ LL |     macro_two!();\n LL | macro_rules! macro_one { () => (\"one\") }\n    | ---------------------- similarly named macro `macro_one` defined here\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            two_macros::macro_two\n \n error: aborting due to previous error"}, {"sha": "99e291cda0377ccb0e3b05362b0683372529a128", "filename": "tests/ui/missing/missing-macro-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `macro_two` in this scope\n LL |     macro_two!();\n    |     ^^^^^^^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            two_macros::macro_two\n \n error: aborting due to previous error"}, {"sha": "de2c27a878c678688db5b389f07658344d79de47", "filename": "tests/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -16,7 +16,7 @@ error: cannot find attribute `empty_helper` in this scope\n LL |             #[derive(GenHelperUse)]\n    |                      ^^^^^^^^^^^^\n    |\n-   = note: consider importing this attribute macro:\n+   = help: consider importing this attribute macro:\n            empty_helper\n    = note: this error originates in the derive macro `GenHelperUse` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -29,7 +29,7 @@ LL |         #[empty_helper]\n LL |             gen_helper_use!();\n    |             ----------------- in this macro invocation\n    |\n-   = note: consider importing this attribute macro:\n+   = help: consider importing this attribute macro:\n            crate::empty_helper\n    = note: this error originates in the macro `gen_helper_use` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2c55abf38c399a62b2d2430444d7fc5925a857b3", "filename": "tests/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -4,7 +4,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | generate_mod::check!();\n    | ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the macro `generate_mod::check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0412]: cannot find type `Outer` in this scope\n LL | generate_mod::check!();\n    | ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            Outer\n    = note: this error originates in the macro `generate_mod::check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -24,7 +24,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | #[generate_mod::check_attr]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -34,7 +34,7 @@ error[E0412]: cannot find type `OuterAttr` in this scope\n LL | #[generate_mod::check_attr]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterAttr\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -44,7 +44,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -54,7 +54,7 @@ error[E0412]: cannot find type `OuterDerive` in this scope\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterDerive\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -64,7 +64,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -74,7 +74,7 @@ error[E0412]: cannot find type `OuterDerive` in this scope\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterDerive\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -84,7 +84,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | #[derive(generate_mod::CheckDeriveLint)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -94,7 +94,7 @@ error[E0412]: cannot find type `OuterDeriveLint` in this scope\n LL | #[derive(generate_mod::CheckDeriveLint)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterDeriveLint\n    = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "122e8fd350cb2f4ef15abc373500f807536b0488", "filename": "tests/ui/rfc-2126-extern-absolute-paths/not-allowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -7,9 +7,9 @@ LL | use alloc;\n help: consider importing one of these items instead\n    |\n LL | use core::alloc;\n-   |     ~~~~~~~~~~~~\n-LL | use std::alloc;\n    |     ~~~~~~~~~~~\n+LL | use std::alloc;\n+   |     ~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "f8b3e6d65afb64cac3492bf2a9f27b11cd58b813", "filename": "tests/ui/simd/portable-intrinsics-arent-exposed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -15,7 +15,7 @@ LL | use std::simd::intrinsics;\n help: consider importing this module instead\n    |\n LL | use std::intrinsics;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7635f579d66b94cd9e2ce76388f132e3517d1fee", "filename": "tests/ui/test-attrs/inaccessible-test-modules.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -13,7 +13,7 @@ LL | use test as y;\n help: consider importing this module instead\n    |\n LL | use test::test as y;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea737c567b96047f01e68084dd2bc7aa215ca689", "filename": "tests/ui/unresolved/unresolved-candidates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr?ref=38a76f33220c4b9d13dda1fa8f6c629c8a7bcc5d", "patch": "@@ -7,7 +7,7 @@ LL |     use Trait;\n help: consider importing this trait instead\n    |\n LL |     use a::Trait;\n-   |         ~~~~~~~~~\n+   |         ~~~~~~~~\n \n error[E0405]: cannot find trait `Trait` in this scope\n   --> $DIR/unresolved-candidates.rs:10:10"}]}