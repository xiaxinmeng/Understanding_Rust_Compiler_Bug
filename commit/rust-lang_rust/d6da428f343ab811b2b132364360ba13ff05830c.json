{"sha": "d6da428f343ab811b2b132364360ba13ff05830c", "node_id": "C_kwDOAAsO6NoAKGQ2ZGE0MjhmMzQzYWI4MTFiMmIxMzIzNjQzNjBiYTEzZmYwNTgzMGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T17:09:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T17:09:11Z"}, "message": "Auto merge of #105381 - uweigand:s390x-ffi-vaarg, r=nikic\n\nImplement va_list and va_arg for s390x FFI\n\nFollowing the s390x ELF ABI and based on the clang implementation, provide appropriate definitions of va_list in library/core/src/ffi/mod.rs and va_arg handling in compiler/rustc_codegen_llvm/src/va_arg.rs.\n\nFixes the following test cases on s390x:\nsrc/test/run-make-fulldeps/c-link-to-rust-va-list-fn src/test/ui/abi/variadic-ffi.rs\n\nFixes https://github.com/rust-lang/rust/issues/84628.", "tree": {"sha": "c4a214b6011bc7dc2f5b583625f250c3df8284d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4a214b6011bc7dc2f5b583625f250c3df8284d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6da428f343ab811b2b132364360ba13ff05830c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6da428f343ab811b2b132364360ba13ff05830c", "html_url": "https://github.com/rust-lang/rust/commit/d6da428f343ab811b2b132364360ba13ff05830c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6da428f343ab811b2b132364360ba13ff05830c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "html_url": "https://github.com/rust-lang/rust/commit/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2"}, {"sha": "eb22d70aed39614dd9318e3fa1bf91846d74b8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb22d70aed39614dd9318e3fa1bf91846d74b8aa", "html_url": "https://github.com/rust-lang/rust/commit/eb22d70aed39614dd9318e3fa1bf91846d74b8aa"}], "stats": {"total": 139, "additions": 134, "deletions": 5}, "files": [{"sha": "b19398e68c260186ec637b8d02a1f25dba1c8385", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d6da428f343ab811b2b132364360ba13ff05830c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6da428f343ab811b2b132364360ba13ff05830c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=d6da428f343ab811b2b132364360ba13ff05830c", "patch": "@@ -175,6 +175,89 @@ fn emit_aapcs_va_arg<'ll, 'tcx>(\n     val\n }\n \n+fn emit_s390x_va_arg<'ll, 'tcx>(\n+    bx: &mut Builder<'_, 'll, 'tcx>,\n+    list: OperandRef<'tcx, &'ll Value>,\n+    target_ty: Ty<'tcx>,\n+) -> &'ll Value {\n+    // Implementation of the s390x ELF ABI calling convention for va_args see\n+    // https://github.com/IBM/s390x-abi (chapter 1.2.4)\n+    let va_list_addr = list.immediate();\n+    let va_list_layout = list.deref(bx.cx).layout;\n+    let va_list_ty = va_list_layout.llvm_type(bx);\n+    let layout = bx.cx.layout_of(target_ty);\n+\n+    let in_reg = bx.append_sibling_block(\"va_arg.in_reg\");\n+    let in_mem = bx.append_sibling_block(\"va_arg.in_mem\");\n+    let end = bx.append_sibling_block(\"va_arg.end\");\n+\n+    // FIXME: vector ABI not yet supported.\n+    let target_ty_size = bx.cx.size_of(target_ty).bytes();\n+    let indirect: bool = target_ty_size > 8 || !target_ty_size.is_power_of_two();\n+    let unpadded_size = if indirect { 8 } else { target_ty_size };\n+    let padded_size = 8;\n+    let padding = padded_size - unpadded_size;\n+\n+    let gpr_type = indirect || !layout.is_single_fp_element(bx.cx);\n+    let (max_regs, reg_count_field, reg_save_index, reg_padding) =\n+        if gpr_type { (5, 0, 2, padding) } else { (4, 1, 16, 0) };\n+\n+    // Check whether the value was passed in a register or in memory.\n+    let reg_count = bx.struct_gep(\n+        va_list_ty,\n+        va_list_addr,\n+        va_list_layout.llvm_field_index(bx.cx, reg_count_field),\n+    );\n+    let reg_count_v = bx.load(bx.type_i64(), reg_count, Align::from_bytes(8).unwrap());\n+    let use_regs = bx.icmp(IntPredicate::IntULT, reg_count_v, bx.const_u64(max_regs));\n+    bx.cond_br(use_regs, in_reg, in_mem);\n+\n+    // Emit code to load the value if it was passed in a register.\n+    bx.switch_to_block(in_reg);\n+\n+    // Work out the address of the value in the register save area.\n+    let reg_ptr =\n+        bx.struct_gep(va_list_ty, va_list_addr, va_list_layout.llvm_field_index(bx.cx, 3));\n+    let reg_ptr_v = bx.load(bx.type_i8p(), reg_ptr, bx.tcx().data_layout.pointer_align.abi);\n+    let scaled_reg_count = bx.mul(reg_count_v, bx.const_u64(8));\n+    let reg_off = bx.add(scaled_reg_count, bx.const_u64(reg_save_index * 8 + reg_padding));\n+    let reg_addr = bx.gep(bx.type_i8(), reg_ptr_v, &[reg_off]);\n+\n+    // Update the register count.\n+    let new_reg_count_v = bx.add(reg_count_v, bx.const_u64(1));\n+    bx.store(new_reg_count_v, reg_count, Align::from_bytes(8).unwrap());\n+    bx.br(end);\n+\n+    // Emit code to load the value if it was passed in memory.\n+    bx.switch_to_block(in_mem);\n+\n+    // Work out the address of the value in the argument overflow area.\n+    let arg_ptr =\n+        bx.struct_gep(va_list_ty, va_list_addr, va_list_layout.llvm_field_index(bx.cx, 2));\n+    let arg_ptr_v = bx.load(bx.type_i8p(), arg_ptr, bx.tcx().data_layout.pointer_align.abi);\n+    let arg_off = bx.const_u64(padding);\n+    let mem_addr = bx.gep(bx.type_i8(), arg_ptr_v, &[arg_off]);\n+\n+    // Update the argument overflow area pointer.\n+    let arg_size = bx.cx().const_u64(padded_size);\n+    let new_arg_ptr_v = bx.inbounds_gep(bx.type_i8(), arg_ptr_v, &[arg_size]);\n+    bx.store(new_arg_ptr_v, arg_ptr, bx.tcx().data_layout.pointer_align.abi);\n+    bx.br(end);\n+\n+    // Return the appropriate result.\n+    bx.switch_to_block(end);\n+    let val_addr = bx.phi(bx.type_i8p(), &[reg_addr, mem_addr], &[in_reg, in_mem]);\n+    let val_type = layout.llvm_type(bx);\n+    let val_addr = if indirect {\n+        let ptr_type = bx.cx.type_ptr_to(val_type);\n+        let ptr_addr = bx.bitcast(val_addr, bx.cx.type_ptr_to(ptr_type));\n+        bx.load(ptr_type, ptr_addr, bx.tcx().data_layout.pointer_align.abi)\n+    } else {\n+        bx.bitcast(val_addr, bx.cx.type_ptr_to(val_type))\n+    };\n+    bx.load(val_type, val_addr, layout.align.abi)\n+}\n+\n pub(super) fn emit_va_arg<'ll, 'tcx>(\n     bx: &mut Builder<'_, 'll, 'tcx>,\n     addr: OperandRef<'tcx, &'ll Value>,\n@@ -200,6 +283,7 @@ pub(super) fn emit_va_arg<'ll, 'tcx>(\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), true)\n         }\n         \"aarch64\" => emit_aapcs_va_arg(bx, addr, target_ty),\n+        \"s390x\" => emit_s390x_va_arg(bx, addr, target_ty),\n         // Windows x86_64\n         \"x86_64\" if target.is_like_windows => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();"}, {"sha": "76daceecd7befb3864e448fce6807bacb7a95025", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d6da428f343ab811b2b132364360ba13ff05830c/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6da428f343ab811b2b132364360ba13ff05830c/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=d6da428f343ab811b2b132364360ba13ff05830c", "patch": "@@ -227,7 +227,12 @@ impl fmt::Debug for c_void {\n /// Basic implementation of a `va_list`.\n // The name is WIP, using `VaListImpl` for now.\n #[cfg(any(\n-    all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n+    all(\n+        not(target_arch = \"aarch64\"),\n+        not(target_arch = \"powerpc\"),\n+        not(target_arch = \"s390x\"),\n+        not(target_arch = \"x86_64\")\n+    ),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_family = \"wasm\",\n     target_arch = \"asmjs\",\n@@ -251,7 +256,12 @@ pub struct VaListImpl<'f> {\n }\n \n #[cfg(any(\n-    all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n+    all(\n+        not(target_arch = \"aarch64\"),\n+        not(target_arch = \"powerpc\"),\n+        not(target_arch = \"s390x\"),\n+        not(target_arch = \"x86_64\")\n+    ),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_family = \"wasm\",\n     target_arch = \"asmjs\",\n@@ -319,6 +329,25 @@ pub struct VaListImpl<'f> {\n     _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n+/// s390x ABI implementation of a `va_list`.\n+#[cfg(target_arch = \"s390x\")]\n+#[repr(C)]\n+#[derive(Debug)]\n+#[unstable(\n+    feature = \"c_variadic\",\n+    reason = \"the `c_variadic` feature has not been properly tested on \\\n+              all supported platforms\",\n+    issue = \"44930\"\n+)]\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f> {\n+    gpr: i64,\n+    fpr: i64,\n+    overflow_arg_area: *mut c_void,\n+    reg_save_area: *mut c_void,\n+    _marker: PhantomData<&'f mut &'f c_void>,\n+}\n+\n /// x86_64 ABI implementation of a `va_list`.\n #[cfg(all(target_arch = \"x86_64\", not(target_os = \"uefi\"), not(windows)))]\n #[repr(C)]\n@@ -352,6 +381,7 @@ pub struct VaList<'a, 'f: 'a> {\n         all(\n             not(target_arch = \"aarch64\"),\n             not(target_arch = \"powerpc\"),\n+            not(target_arch = \"s390x\"),\n             not(target_arch = \"x86_64\")\n         ),\n         all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n@@ -363,7 +393,12 @@ pub struct VaList<'a, 'f: 'a> {\n     inner: VaListImpl<'f>,\n \n     #[cfg(all(\n-        any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n+        any(\n+            target_arch = \"aarch64\",\n+            target_arch = \"powerpc\",\n+            target_arch = \"s390x\",\n+            target_arch = \"x86_64\"\n+        ),\n         any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n         not(target_family = \"wasm\"),\n         not(target_arch = \"asmjs\"),\n@@ -376,7 +411,12 @@ pub struct VaList<'a, 'f: 'a> {\n }\n \n #[cfg(any(\n-    all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n+    all(\n+        not(target_arch = \"aarch64\"),\n+        not(target_arch = \"powerpc\"),\n+        not(target_arch = \"s390x\"),\n+        not(target_arch = \"x86_64\")\n+    ),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_family = \"wasm\",\n     target_arch = \"asmjs\",\n@@ -398,7 +438,12 @@ impl<'f> VaListImpl<'f> {\n }\n \n #[cfg(all(\n-    any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n+    any(\n+        target_arch = \"aarch64\",\n+        target_arch = \"powerpc\",\n+        target_arch = \"s390x\",\n+        target_arch = \"x86_64\"\n+    ),\n     any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n     not(target_family = \"wasm\"),\n     not(target_arch = \"asmjs\"),"}]}