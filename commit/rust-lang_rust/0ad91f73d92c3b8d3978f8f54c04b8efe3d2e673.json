{"sha": "0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDkxZjczZDkyYzNiOGQzOTc4ZjhmNTRjMDRiOGVmZTNkMmU2NzM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T23:50:26Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T23:50:26Z"}, "message": "Simplify u8::to_ascii_{upp,low}ercase while keeping it fast", "tree": {"sha": "806084ebc5277243acbb738fd570642947445412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806084ebc5277243acbb738fd570642947445412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673", "html_url": "https://github.com/rust-lang/rust/commit/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a3241a815e951dfa87e9be7133e8265bc945e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3241a815e951dfa87e9be7133e8265bc945e57", "html_url": "https://github.com/rust-lang/rust/commit/4a3241a815e951dfa87e9be7133e8265bc945e57"}], "stats": {"total": 70, "additions": 27, "deletions": 43}, "files": [{"sha": "89e67cca4b7545ab790e03701583ae00e5539f08", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673", "patch": "@@ -1,4 +1,26 @@\n-// See comments in `u8::to_ascii_uppercase` in `src/libcore/num/mod.rs`.\n+// Lower-case ASCII 'a' is the first byte that has its highest bit set\n+// after wrap-adding 0x1F:\n+//\n+//     b'a' + 0x1F == 0x80 == 0b1000_0000\n+//     b'z' + 0x1F == 0x98 == 0b10011000\n+//\n+// Lower-case ASCII 'z' is the last byte that has its highest bit unset\n+// after wrap-adding 0x05:\n+//\n+//     b'a' + 0x05 == 0x66 == 0b0110_0110\n+//     b'z' + 0x05 == 0x7F == 0b0111_1111\n+//\n+// \u2026 except for 0xFB to 0xFF, but those are in the range of bytes\n+// that have the highest bit unset again after adding 0x1F.\n+//\n+// So `(byte + 0x1f) & !(byte + 5)` has its highest bit set\n+// iff `byte` is a lower-case ASCII letter.\n+//\n+// Lower-case ASCII letters all have the 0x20 bit set.\n+// (Two positions right of 0x80, the highest bit.)\n+// Unsetting that bit produces the same letter, in upper-case.\n+//\n+// Therefore:\n fn branchless_to_ascii_upper_case(byte: u8) -> u8 {\n     byte &\n     !("}, {"sha": "3fcae6b94b06d855c2d9fa291e879f79b8fe3863", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0ad91f73d92c3b8d3978f8f54c04b8efe3d2e673", "patch": "@@ -3794,39 +3794,8 @@ impl u8 {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n-        // See benchmarks in src/libcore/benches/ascii_case.rs\n-\n-        // Lower-case ASCII 'a' is the first byte that has its highest bit set\n-        // after wrap-adding 0x1F:\n-        //\n-        //     b'a' + 0x1F == 0x80 == 0b1000_0000\n-        //     b'z' + 0x1F == 0x98 == 0b10011000\n-        //\n-        // Lower-case ASCII 'z' is the last byte that has its highest bit unset\n-        // after wrap-adding 0x05:\n-        //\n-        //     b'a' + 0x05 == 0x66 == 0b0110_0110\n-        //     b'z' + 0x05 == 0x7F == 0b0111_1111\n-        //\n-        // \u2026 except for 0xFB to 0xFF, but those are in the range of bytes\n-        // that have the highest bit unset again after adding 0x1F.\n-        //\n-        // So `(byte + 0x1f) & !(byte + 5)` has its highest bit set\n-        // iff `byte` is a lower-case ASCII letter.\n-        //\n-        // Lower-case ASCII letters all have the 0x20 bit set.\n-        // (Two positions right of 0x80, the highest bit.)\n-        // Unsetting that bit produces the same letter, in upper-case.\n-        //\n-        // Therefore:\n-        *self &\n-        !(\n-            (\n-                self.wrapping_add(0x1f) &\n-                !self.wrapping_add(0x05) &\n-                0x80\n-            ) >> 2\n-        )\n+        // Unset the fith bit if this is a lowercase letter\n+        *self & !((self.is_ascii_lowercase() as u8) << 5)\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -3848,15 +3817,8 @@ impl u8 {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n-        // See comments in to_ascii_uppercase above.\n-        *self |\n-        (\n-            (\n-                self.wrapping_add(0x3f) &\n-                !self.wrapping_add(0x25) &\n-                0x80\n-            ) >> 2\n-        )\n+        // Set the fith bit if this is an uppercase letter\n+        *self | ((self.is_ascii_uppercase() as u8) << 5)\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match."}]}