{"sha": "781111ef3591e4355c115593c4d75964b85555d6", "node_id": "C_kwDOAAsO6NoAKDc4MTExMWVmMzU5MWU0MzU1YzExNTU5M2M0ZDc1OTY0Yjg1NTU1ZDY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-04T00:55:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-05-28T23:23:43Z"}, "message": "Use `Cow` in `{D,Subd}iagnosticMessage`.\n\nEach of `{D,Subd}iagnosticMessage::{Str,Eager}` has a comment:\n```\n// FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n```\nThis commit answers that question in the affirmative. It's not the most\ncompelling change ever, but it might be worth merging.\n\nThis requires changing the `impl<'a> From<&'a str>` impls to `impl\nFrom<&'static str>`, which involves a bunch of knock-on changes that\nrequire/result in call sites being a little more precise about exactly\nwhat kind of string they use to create errors, and not just `&str`. This\nwill result in fewer unnecessary allocations, though this will not have\nany notable perf effects given that these are error paths.\n\nNote that I was lazy within Clippy, using `to_string` in a few places to\npreserve the existing string imprecision. I could have used `impl\nInto<{D,Subd}iagnosticMessage>` in various places as is done in the\ncompiler, but that would have required changes to *many* call sites\n(mostly changing `&format(\"...\")` to `format!(\"...\")`) which didn't seem\nworthwhile.", "tree": {"sha": "7417f5be447fb1a099678d197bddca021135fd13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7417f5be447fb1a099678d197bddca021135fd13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/781111ef3591e4355c115593c4d75964b85555d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/781111ef3591e4355c115593c4d75964b85555d6", "html_url": "https://github.com/rust-lang/rust/commit/781111ef3591e4355c115593c4d75964b85555d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/781111ef3591e4355c115593c4d75964b85555d6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c53407e8c7cc922d718bde61ca34f47b6d2120f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c53407e8c7cc922d718bde61ca34f47b6d2120f", "html_url": "https://github.com/rust-lang/rust/commit/1c53407e8c7cc922d718bde61ca34f47b6d2120f"}], "stats": {"total": 595, "additions": 308, "deletions": 287}, "files": [{"sha": "5efc5a4e3eea334ed31e12916fae1473de5993c9", "filename": "compiler/rustc_builtin_macros/src/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -18,7 +18,7 @@ pub fn expand_compile_error<'cx>(\n         reason = \"diagnostic message is specified by user\"\n     )]\n     #[expect(rustc::untranslatable_diagnostic, reason = \"diagnostic message is specified by user\")]\n-    cx.span_err(sp, var.as_str());\n+    cx.span_err(sp, var.to_string());\n \n     DummyResult::any(sp)\n }"}, {"sha": "f1ab279dababf5daf87d3eaac0fc8359cb86a0af", "filename": "compiler/rustc_builtin_macros/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ferrors.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -377,7 +377,7 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for EnvNotDefined {\n                 rustc::untranslatable_diagnostic,\n                 reason = \"cannot translate user-provided messages\"\n             )]\n-            handler.struct_diagnostic(msg.as_str())\n+            handler.struct_diagnostic(msg.to_string())\n         } else {\n             handler.struct_diagnostic(crate::fluent_generated::builtin_macros_env_not_defined)\n         };"}, {"sha": "bdbd10f8260616ba974e78021fe6edbc6a96ae44", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -893,7 +893,7 @@ fn link_natively<'a>(\n                     linker_path: &linker_path,\n                     exit_status: prog.status,\n                     command: &cmd,\n-                    escaped_output: &escaped_output,\n+                    escaped_output,\n                 };\n                 sess.diagnostic().emit_err(err);\n                 // If MSVC's `link.exe` was expected but the return code"}, {"sha": "10e9e5588f6cc6569096a69002c71f4d82d8c205", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -1800,7 +1800,7 @@ impl SharedEmitterMain {\n                     handler.emit_diagnostic(&mut d);\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)) => {\n-                    let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg);\n+                    let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg).to_string();\n \n                     let mut err = match level {\n                         Level::Error { lint: false } => sess.struct_err(msg).forget_guarantee(),"}, {"sha": "bf37ac69f2d1e9430af11b61b799d60584f95545", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -336,7 +336,7 @@ pub struct LinkingFailed<'a> {\n     pub linker_path: &'a PathBuf,\n     pub exit_status: ExitStatus,\n     pub command: &'a Command,\n-    pub escaped_output: &'a str,\n+    pub escaped_output: String,\n }\n \n impl IntoDiagnostic<'_> for LinkingFailed<'_> {\n@@ -345,11 +345,13 @@ impl IntoDiagnostic<'_> for LinkingFailed<'_> {\n         diag.set_arg(\"linker_path\", format!(\"{}\", self.linker_path.display()));\n         diag.set_arg(\"exit_status\", format!(\"{}\", self.exit_status));\n \n-        diag.note(format!(\"{:?}\", self.command)).note(self.escaped_output);\n+        let contains_undefined_ref = self.escaped_output.contains(\"undefined reference to\");\n+\n+        diag.note(format!(\"{:?}\", self.command)).note(self.escaped_output.to_string());\n \n         // Trying to match an error from OS linkers\n         // which by now we have no way to translate.\n-        if self.escaped_output.contains(\"undefined reference to\") {\n+        if contains_undefined_ref {\n             diag.note(fluent::codegen_ssa_extern_funcs_not_found)\n                 .note(fluent::codegen_ssa_specify_libraries_to_link)\n                 .note(fluent::codegen_ssa_use_cargo_directive);"}, {"sha": "14888cf4d75c05386352232109cd3c209aa0ff62", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -1258,7 +1258,7 @@ pub fn install_ice_hook(bug_report_url: &'static str, extra_info: fn(&Handler))\n         if let Some(msg) = info.payload().downcast_ref::<String>() {\n             if msg.starts_with(\"failed printing to stdout: \") && msg.ends_with(\"(os error 232)\") {\n                 // the error code is already going to be reported when the panic unwinds up the stack\n-                let _ = early_error_no_abort(ErrorOutputType::default(), msg.as_str());\n+                let _ = early_error_no_abort(ErrorOutputType::default(), msg.clone());\n                 return;\n             }\n         };"}, {"sha": "2a97c4ff7aee459fad27b1110e8cc3078eb97c80", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -263,8 +263,7 @@ type FluentId = Cow<'static, str>;\n #[rustc_diagnostic_item = \"SubdiagnosticMessage\"]\n pub enum SubdiagnosticMessage {\n     /// Non-translatable diagnostic message.\n-    // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n-    Str(String),\n+    Str(Cow<'static, str>),\n     /// Translatable message which has already been translated eagerly.\n     ///\n     /// Some diagnostics have repeated subdiagnostics where the same interpolated variables would\n@@ -275,8 +274,7 @@ pub enum SubdiagnosticMessage {\n     /// incorrect diagnostics. Eager translation results in translation for a subdiagnostic\n     /// happening immediately after the subdiagnostic derive's logic has been run. This variant\n     /// stores messages which have been translated eagerly.\n-    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n-    Eager(String),\n+    Eager(Cow<'static, str>),\n     /// Identifier of a Fluent message. Instances of this variant are generated by the\n     /// `Subdiagnostic` derive.\n     FluentIdentifier(FluentId),\n@@ -290,17 +288,17 @@ pub enum SubdiagnosticMessage {\n \n impl From<String> for SubdiagnosticMessage {\n     fn from(s: String) -> Self {\n-        SubdiagnosticMessage::Str(s)\n+        SubdiagnosticMessage::Str(Cow::Owned(s))\n     }\n }\n-impl<'a> From<&'a str> for SubdiagnosticMessage {\n-    fn from(s: &'a str) -> Self {\n-        SubdiagnosticMessage::Str(s.to_string())\n+impl From<&'static str> for SubdiagnosticMessage {\n+    fn from(s: &'static str) -> Self {\n+        SubdiagnosticMessage::Str(Cow::Borrowed(s))\n     }\n }\n impl From<Cow<'static, str>> for SubdiagnosticMessage {\n     fn from(s: Cow<'static, str>) -> Self {\n-        SubdiagnosticMessage::Str(s.to_string())\n+        SubdiagnosticMessage::Str(s)\n     }\n }\n \n@@ -312,8 +310,7 @@ impl From<Cow<'static, str>> for SubdiagnosticMessage {\n #[rustc_diagnostic_item = \"DiagnosticMessage\"]\n pub enum DiagnosticMessage {\n     /// Non-translatable diagnostic message.\n-    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n-    Str(String),\n+    Str(Cow<'static, str>),\n     /// Translatable message which has already been translated eagerly.\n     ///\n     /// Some diagnostics have repeated subdiagnostics where the same interpolated variables would\n@@ -324,8 +321,7 @@ pub enum DiagnosticMessage {\n     /// incorrect diagnostics. Eager translation results in translation for a subdiagnostic\n     /// happening immediately after the subdiagnostic derive's logic has been run. This variant\n     /// stores messages which have been translated eagerly.\n-    // FIXME(#100717): can a `Cow<'static, str>` be used here?\n-    Eager(String),\n+    Eager(Cow<'static, str>),\n     /// Identifier for a Fluent message (with optional attribute) corresponding to the diagnostic\n     /// message.\n     ///\n@@ -363,17 +359,17 @@ impl DiagnosticMessage {\n \n impl From<String> for DiagnosticMessage {\n     fn from(s: String) -> Self {\n-        DiagnosticMessage::Str(s)\n+        DiagnosticMessage::Str(Cow::Owned(s))\n     }\n }\n-impl<'a> From<&'a str> for DiagnosticMessage {\n-    fn from(s: &'a str) -> Self {\n-        DiagnosticMessage::Str(s.to_string())\n+impl From<&'static str> for DiagnosticMessage {\n+    fn from(s: &'static str) -> Self {\n+        DiagnosticMessage::Str(Cow::Borrowed(s))\n     }\n }\n impl From<Cow<'static, str>> for DiagnosticMessage {\n     fn from(s: Cow<'static, str>) -> Self {\n-        DiagnosticMessage::Str(s.to_string())\n+        DiagnosticMessage::Str(s)\n     }\n }\n "}, {"sha": "488f2d67ee59f53801178e89777a7197333f5cc3", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -352,14 +352,9 @@ impl Diagnostic {\n \n     /// Labels all the given spans with the provided label.\n     /// See [`Self::span_label()`] for more information.\n-    pub fn span_labels(\n-        &mut self,\n-        spans: impl IntoIterator<Item = Span>,\n-        label: impl AsRef<str>,\n-    ) -> &mut Self {\n-        let label = label.as_ref();\n+    pub fn span_labels(&mut self, spans: impl IntoIterator<Item = Span>, label: &str) -> &mut Self {\n         for span in spans {\n-            self.span_label(span, label);\n+            self.span_label(span, label.to_string());\n         }\n         self\n     }\n@@ -394,17 +389,18 @@ impl Diagnostic {\n         expected: DiagnosticStyledString,\n         found: DiagnosticStyledString,\n     ) -> &mut Self {\n-        let mut msg: Vec<_> = vec![(\"required when trying to coerce from type `\", Style::NoStyle)];\n+        let mut msg: Vec<_> =\n+            vec![(Cow::from(\"required when trying to coerce from type `\"), Style::NoStyle)];\n         msg.extend(expected.0.iter().map(|x| match *x {\n-            StringPart::Normal(ref s) => (s.as_str(), Style::NoStyle),\n-            StringPart::Highlighted(ref s) => (s.as_str(), Style::Highlight),\n+            StringPart::Normal(ref s) => (Cow::from(s.clone()), Style::NoStyle),\n+            StringPart::Highlighted(ref s) => (Cow::from(s.clone()), Style::Highlight),\n         }));\n-        msg.push((\"` to type '\", Style::NoStyle));\n+        msg.push((Cow::from(\"` to type '\"), Style::NoStyle));\n         msg.extend(found.0.iter().map(|x| match *x {\n-            StringPart::Normal(ref s) => (s.as_str(), Style::NoStyle),\n-            StringPart::Highlighted(ref s) => (s.as_str(), Style::Highlight),\n+            StringPart::Normal(ref s) => (Cow::from(s.clone()), Style::NoStyle),\n+            StringPart::Highlighted(ref s) => (Cow::from(s.clone()), Style::Highlight),\n         }));\n-        msg.push((\"`\", Style::NoStyle));\n+        msg.push((Cow::from(\"`\"), Style::NoStyle));\n \n         // For now, just attach these as notes\n         self.highlighted_note(msg);"}, {"sha": "7d9d0c76450d8fbb0f707889aa7f35bc683478d7", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -558,7 +558,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n         }\n \n         // Take the `Diagnostic` by replacing it with a dummy.\n-        let dummy = Diagnostic::new(Level::Allow, DiagnosticMessage::Str(\"\".to_string()));\n+        let dummy = Diagnostic::new(Level::Allow, DiagnosticMessage::from(\"\"));\n         let diagnostic = std::mem::replace(&mut *self.inner.diagnostic, dummy);\n \n         // Disable the ICE on `Drop`.\n@@ -627,7 +627,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     pub fn span_labels(\n         &mut self,\n         spans: impl IntoIterator<Item = Span>,\n-        label: impl AsRef<str>,\n+        label: &str,\n     ) -> &mut Self);\n \n     forward!(pub fn note_expected_found(\n@@ -781,8 +781,8 @@ impl Drop for DiagnosticBuilderInner<'_> {\n                 if !panicking() {\n                     handler.emit_diagnostic(&mut Diagnostic::new(\n                         Level::Bug,\n-                        DiagnosticMessage::Str(\n-                            \"the following error was constructed but not emitted\".to_string(),\n+                        DiagnosticMessage::from(\n+                            \"the following error was constructed but not emitted\",\n                         ),\n                     ));\n                     handler.emit_diagnostic(&mut self.diagnostic);"}, {"sha": "d8c997b49a16b53d15356ef6b8601c779a75ab1e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -367,7 +367,7 @@ pub trait Emitter: Translate {\n \n                 children.push(SubDiagnostic {\n                     level: Level::Note,\n-                    message: vec![(DiagnosticMessage::Str(msg), Style::NoStyle)],\n+                    message: vec![(DiagnosticMessage::from(msg), Style::NoStyle)],\n                     span: MultiSpan::new(),\n                     render_span: None,\n                 });"}, {"sha": "6c5f3e62454ab7ba9accab1bcbca35b48b8f30a3", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -628,7 +628,7 @@ impl Handler {\n         message: DiagnosticMessage,\n         args: impl Iterator<Item = DiagnosticArg<'a, 'static>>,\n     ) -> SubdiagnosticMessage {\n-        SubdiagnosticMessage::Eager(self.eagerly_translate_to_string(message, args))\n+        SubdiagnosticMessage::Eager(Cow::from(self.eagerly_translate_to_string(message, args)))\n     }\n \n     /// Translate `message` eagerly with `args` to `String`.\n@@ -1450,14 +1450,14 @@ impl HandlerInner {\n         self.emit_stashed_diagnostics();\n \n         let warnings = match self.deduplicated_warn_count {\n-            0 => String::new(),\n-            1 => \"1 warning emitted\".to_string(),\n-            count => format!(\"{count} warnings emitted\"),\n+            0 => Cow::from(\"\"),\n+            1 => Cow::from(\"1 warning emitted\"),\n+            count => Cow::from(format!(\"{count} warnings emitted\")),\n         };\n         let errors = match self.deduplicated_err_count {\n-            0 => String::new(),\n-            1 => \"aborting due to previous error\".to_string(),\n-            count => format!(\"aborting due to {count} previous errors\"),\n+            0 => Cow::from(\"\"),\n+            1 => Cow::from(\"aborting due to previous error\"),\n+            count => Cow::from(format!(\"aborting due to {count} previous errors\")),\n         };\n         if self.treat_err_as_bug() {\n             return;"}, {"sha": "0d43b30474b0651c500e3b726f7159acfdd8cbd9", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -1154,7 +1154,7 @@ impl<'a> ExtCtxt<'a> {\n         // Fixme: does this result in errors?\n         self.expansions.clear();\n     }\n-    pub fn bug(&self, msg: &str) -> ! {\n+    pub fn bug(&self, msg: &'static str) -> ! {\n         self.sess.parse_sess.span_diagnostic.bug(msg);\n     }\n     pub fn trace_macros(&self) -> bool {\n@@ -1224,7 +1224,7 @@ pub fn resolve_path(\n pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n-    err_msg: &str,\n+    err_msg: &'static str,\n ) -> Result<(Symbol, ast::StrStyle, Span), Option<(DiagnosticBuilder<'a, ErrorGuaranteed>, bool)>> {\n     // Perform eager expansion on the expression.\n     // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n@@ -1262,7 +1262,7 @@ pub fn expr_to_spanned_string<'a>(\n pub fn expr_to_string(\n     cx: &mut ExtCtxt<'_>,\n     expr: P<ast::Expr>,\n-    err_msg: &str,\n+    err_msg: &'static str,\n ) -> Option<(Symbol, ast::StrStyle)> {\n     expr_to_spanned_string(cx, expr, err_msg)\n         .map_err(|err| {"}, {"sha": "3593bed2d022ccdb9345abefd885df32a2bf0779", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -170,7 +170,7 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx,\n             }\n             Error(err_sp, msg) => {\n                 let span = err_sp.substitute_dummy(self.root_span);\n-                self.cx.struct_span_err(span, msg.as_str()).emit();\n+                self.cx.struct_span_err(span, msg.clone()).emit();\n                 self.result = Some(DummyResult::any(span));\n             }\n             ErrorReported(_) => self.result = Some(DummyResult::any(self.root_span)),\n@@ -222,7 +222,7 @@ pub(super) fn emit_frag_parse_err(\n     {\n         let msg = &e.message[0];\n         e.message[0] = (\n-            DiagnosticMessage::Str(format!(\n+            DiagnosticMessage::from(format!(\n                 \"macro expansion ends with an incomplete expression: {}\",\n                 message.replace(\", found `<eof>`\", \"\"),\n             )),\n@@ -313,9 +313,9 @@ pub(super) fn annotate_doc_comment(err: &mut Diagnostic, sm: &SourceMap, span: S\n \n /// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For\n /// other tokens, this is \"unexpected token...\".\n-pub(super) fn parse_failure_msg(tok: &Token) -> String {\n+pub(super) fn parse_failure_msg(tok: &Token) -> Cow<'static, str> {\n     match tok.kind {\n-        token::Eof => \"unexpected end of macro invocation\".to_string(),\n-        _ => format!(\"no rules expected the token `{}`\", pprust::token_to_string(tok),),\n+        token::Eof => Cow::from(\"unexpected end of macro invocation\"),\n+        _ => Cow::from(format!(\"no rules expected the token `{}`\", pprust::token_to_string(tok))),\n     }\n }"}, {"sha": "e33330e259c3b6bab183302b918cdecb4f11799b", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -25,6 +25,7 @@ use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, ObligationCtxt, Reveal,\n };\n+use std::borrow::Cow;\n use std::iter;\n \n /// Checks that a method from an impl conforms to the signature of\n@@ -684,7 +685,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                 &cause,\n                 hir.get_if_local(impl_m.def_id)\n                     .and_then(|node| node.fn_decl())\n-                    .map(|decl| (decl.output.span(), \"return type in trait\".to_owned())),\n+                    .map(|decl| (decl.output.span(), Cow::from(\"return type in trait\"))),\n                 Some(infer::ValuePairs::Terms(ExpectedFound {\n                     expected: trait_return_ty.into(),\n                     found: impl_return_ty.into(),\n@@ -963,7 +964,7 @@ fn report_trait_method_mismatch<'tcx>(\n     infcx.err_ctxt().note_type_err(\n         &mut diag,\n         &cause,\n-        trait_err_span.map(|sp| (sp, \"type in trait\".to_owned())),\n+        trait_err_span.map(|sp| (sp, Cow::from(\"type in trait\"))),\n         Some(infer::ValuePairs::Sigs(ExpectedFound { expected: trait_sig, found: impl_sig })),\n         terr,\n         false,\n@@ -1731,7 +1732,7 @@ pub(super) fn compare_impl_const_raw(\n         infcx.err_ctxt().note_type_err(\n             &mut diag,\n             &cause,\n-            trait_c_span.map(|span| (span, \"type in trait\".to_owned())),\n+            trait_c_span.map(|span| (span, Cow::from(\"type in trait\"))),\n             Some(infer::ValuePairs::Terms(ExpectedFound {\n                 expected: trait_ty.into(),\n                 found: impl_ty.into(),"}, {"sha": "fbd4a577d68ff68a3a5d8140a6d511b6f50af0f1", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -121,10 +121,11 @@ pub fn intrinsic_operation_unsafety(tcx: TyCtxt<'_>, intrinsic_id: DefId) -> hir\n     if has_safe_attr != is_in_list {\n         tcx.sess.struct_span_err(\n             tcx.def_span(intrinsic_id),\n-            DiagnosticMessage::Str(format!(\n-                    \"intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `{}`\",\n-                    tcx.item_name(intrinsic_id)\n-        ))).emit();\n+            DiagnosticMessage::from(format!(\n+                \"intrinsic safety mismatch between list of intrinsics within the compiler and core library intrinsics for intrinsic `{}`\",\n+                tcx.item_name(intrinsic_id)\n+            )\n+        )).emit();\n     }\n \n     is_in_list"}, {"sha": "427d6f8803c13c8773f57d8ad6e3cf238f1984a3", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n \n                     self.fcx\n                         .need_type_info_err_in_generator(self.kind, span, unresolved_term)\n-                        .span_note(yield_data.span, &*note)\n+                        .span_note(yield_data.span, note)\n                         .emit();\n                 }\n             } else {\n@@ -686,7 +686,7 @@ fn check_must_not_suspend_def(\n                 // Add optional reason note\n                 if let Some(note) = attr.value_str() {\n                     // FIXME(guswynn): consider formatting this better\n-                    lint.span_note(data.source_span, note.as_str());\n+                    lint.span_note(data.source_span, note.to_string());\n                 }\n \n                 // Add some quick suggestions on what to do"}, {"sha": "f8a253c894991b95e3a703248db7a4da96717638", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -76,6 +76,7 @@ use rustc_middle::ty::{\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n+use std::borrow::Cow;\n use std::ops::{ControlFlow, Deref};\n use std::path::PathBuf;\n use std::{cmp, fmt, iter};\n@@ -1470,7 +1471,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         &self,\n         diag: &mut Diagnostic,\n         cause: &ObligationCause<'tcx>,\n-        secondary_span: Option<(Span, String)>,\n+        secondary_span: Option<(Span, Cow<'static, str>)>,\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: TypeError<'tcx>,\n         swap_secondary_and_primary: bool,\n@@ -1629,7 +1630,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         };\n \n-        let mut label_or_note = |span: Span, msg: &str| {\n+        let mut label_or_note = |span: Span, msg: Cow<'static, str>| {\n             if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n                 diag.span_label(span, msg);\n             } else {\n@@ -1643,15 +1644,15 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     ..\n                 })) = values\n                 {\n-                    format!(\"expected this to be `{}`\", expected)\n+                    Cow::from(format!(\"expected this to be `{}`\", expected))\n                 } else {\n-                    terr.to_string(self.tcx).to_string()\n+                    terr.to_string(self.tcx)\n                 };\n-                label_or_note(sp, &terr);\n-                label_or_note(span, &msg);\n+                label_or_note(sp, terr);\n+                label_or_note(span, msg);\n             } else {\n-                label_or_note(span, &terr.to_string(self.tcx));\n-                label_or_note(sp, &msg);\n+                label_or_note(span, terr.to_string(self.tcx));\n+                label_or_note(sp, msg);\n             }\n         } else {\n             if let Some(values) = values\n@@ -1663,12 +1664,12 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let expected = with_forced_trimmed_paths!(e.sort_string(self.tcx));\n                 let found = with_forced_trimmed_paths!(f.sort_string(self.tcx));\n                 if expected == found {\n-                    label_or_note(span, &terr.to_string(self.tcx));\n+                    label_or_note(span, terr.to_string(self.tcx));\n                 } else {\n-                    label_or_note(span, &format!(\"expected {expected}, found {found}\"));\n+                    label_or_note(span, Cow::from(format!(\"expected {expected}, found {found}\")));\n                 }\n             } else {\n-                label_or_note(span, &terr.to_string(self.tcx));\n+                label_or_note(span, terr.to_string(self.tcx));\n             }\n         }\n "}, {"sha": "d1f110472c9278c29da58ffd35de0939208819bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -234,13 +234,13 @@ impl<T> Trait<T> for X {\n                         );\n                     }\n                     (_, ty::Alias(ty::Projection | ty::Inherent, proj_ty)) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n-                        let msg = format!(\n+                        let msg = || format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,\n                         );\n                         if !(self.suggest_constraining_opaque_associated_type(\n                             diag,\n-                            &msg,\n+                            msg,\n                             proj_ty,\n                             values.expected,\n                         ) || self.suggest_constraint(\n@@ -250,7 +250,7 @@ impl<T> Trait<T> for X {\n                             proj_ty,\n                             values.expected,\n                         )) {\n-                            diag.help(msg);\n+                            diag.help(msg());\n                             diag.note(\n                                 \"for more information, visit \\\n                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\",\n@@ -308,7 +308,7 @@ impl<T> Trait<T> for X {\n     fn suggest_constraint(\n         &self,\n         diag: &mut Diagnostic,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n         body_owner_def_id: DefId,\n         proj_ty: &ty::AliasTy<'tcx>,\n         ty: Ty<'tcx>,\n@@ -340,7 +340,7 @@ impl<T> Trait<T> for X {\n                         assoc,\n                         assoc_substs,\n                         ty,\n-                        msg,\n+                        &msg,\n                         false,\n                     ) {\n                         return true;\n@@ -374,10 +374,12 @@ impl<T> Trait<T> for X {\n     ) {\n         let tcx = self.tcx;\n \n-        let msg = format!(\n-            \"consider constraining the associated type `{}` to `{}`\",\n-            values.expected, values.found\n-        );\n+        let msg = || {\n+            format!(\n+                \"consider constraining the associated type `{}` to `{}`\",\n+                values.expected, values.found\n+            )\n+        };\n         let body_owner = tcx.hir().get_if_local(body_owner_def_id);\n         let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n \n@@ -428,10 +430,11 @@ impl<T> Trait<T> for X {\n             if callable_scope {\n                 diag.help(format!(\n                     \"{} or calling a method that returns `{}`\",\n-                    msg, values.expected\n+                    msg(),\n+                    values.expected\n                 ));\n             } else {\n-                diag.help(msg);\n+                diag.help(msg());\n             }\n             diag.note(\n                 \"for more information, visit \\\n@@ -463,7 +466,7 @@ fn foo(&self) -> Self::T { String::new() }\n     fn suggest_constraining_opaque_associated_type(\n         &self,\n         diag: &mut Diagnostic,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n         proj_ty: &ty::AliasTy<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> bool {\n@@ -635,7 +638,7 @@ fn foo(&self) -> Self::T { String::new() }\n         assoc: ty::AssocItem,\n         assoc_substs: &[ty::GenericArg<'tcx>],\n         ty: Ty<'tcx>,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n         is_bound_surely_present: bool,\n     ) -> bool {\n         // FIXME: we would want to call `resolve_vars_if_possible` on `ty` before suggesting.\n@@ -678,7 +681,7 @@ fn foo(&self) -> Self::T { String::new() }\n         assoc: ty::AssocItem,\n         assoc_substs: &[ty::GenericArg<'tcx>],\n         ty: Ty<'tcx>,\n-        msg: &str,\n+        msg: impl Fn() -> String,\n     ) -> bool {\n         let tcx = self.tcx;\n \n@@ -693,7 +696,7 @@ fn foo(&self) -> Self::T { String::new() }\n                 let item_args = self.format_generic_args(assoc_substs);\n                 (span.shrink_to_hi(), format!(\"<{}{} = {}>\", assoc.ident(tcx), item_args, ty))\n             };\n-            diag.span_suggestion_verbose(span, msg, sugg, MaybeIncorrect);\n+            diag.span_suggestion_verbose(span, msg(), sugg, MaybeIncorrect);\n             return true;\n         }\n         false"}, {"sha": "68167487a1bd48e55a17535d50e2221f723c5b86", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -39,7 +39,7 @@ impl AddToDiagnostic for OverruledAttributeSub {\n                 diag.span_label(span, fluent::lint_node_source);\n                 if let Some(rationale) = reason {\n                     #[allow(rustc::untranslatable_diagnostic)]\n-                    diag.note(rationale.as_str());\n+                    diag.note(rationale.to_string());\n                 }\n             }\n             OverruledAttributeSub::CommandLineSource => {"}, {"sha": "6b4d01551ae9b171dab608d594267a507a263684", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -1527,7 +1527,7 @@ impl<'a> DecorateLint<'a, ()> for UnusedDef<'_, '_> {\n         diag.set_arg(\"def\", self.cx.tcx.def_path_str(self.def_id));\n         // check for #[must_use = \"...\"]\n         if let Some(note) = self.note {\n-            diag.note(note.as_str());\n+            diag.note(note.to_string());\n         }\n         if let Some(sugg) = self.suggestion {\n             diag.subdiagnostic(sugg);"}, {"sha": "caf3fc26039a0186fbccc57d1b0bb77132d4b292", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -251,7 +251,7 @@ pub fn explain_lint_level_source(\n         }\n         LintLevelSource::Node { name: lint_attr_name, span, reason, .. } => {\n             if let Some(rationale) = reason {\n-                err.note(rationale.as_str());\n+                err.note(rationale.to_string());\n             }\n             err.span_note_once(span, \"the lint level is defined here\");\n             if lint_attr_name.as_str() != name {"}, {"sha": "60844c17e4718214b1905520f595b4c73972b9f5", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -104,15 +104,15 @@ pub fn report_unstable(\n     suggestion: Option<(Span, String, String, Applicability)>,\n     is_soft: bool,\n     span: Span,\n-    soft_handler: impl FnOnce(&'static Lint, Span, &str),\n+    soft_handler: impl FnOnce(&'static Lint, Span, String),\n ) {\n     let msg = match reason {\n         Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n         None => format!(\"use of unstable library feature '{}'\", &feature),\n     };\n \n     if is_soft {\n-        soft_handler(SOFT_UNSTABLE, span, &msg)\n+        soft_handler(SOFT_UNSTABLE, span, msg)\n     } else {\n         let mut err =\n             feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), msg);\n@@ -225,7 +225,7 @@ pub fn deprecation_message_and_lint(\n \n pub fn early_report_deprecation(\n     lint_buffer: &mut LintBuffer,\n-    message: &str,\n+    message: String,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n     span: Span,\n@@ -241,7 +241,7 @@ pub fn early_report_deprecation(\n \n fn late_report_deprecation(\n     tcx: TyCtxt<'_>,\n-    message: &str,\n+    message: String,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n     span: Span,\n@@ -396,7 +396,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n                         late_report_deprecation(\n                             self,\n-                            &deprecation_message(\n+                            deprecation_message(\n                                 is_in_effect,\n                                 depr_attr.since,\n                                 depr_attr.note,\n@@ -619,7 +619,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         allow_unstable: AllowUnstable,\n         unmarked: impl FnOnce(Span, DefId),\n     ) -> bool {\n-        let soft_handler = |lint, span, msg: &_| {\n+        let soft_handler = |lint, span, msg: String| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, msg, |lint| lint)\n         };\n         let eval_result ="}, {"sha": "0464336627f87b9e1af1a662e7602a756f96612c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -732,7 +732,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` with the given\n     /// `msg` to ensure it gets used.\n     #[track_caller]\n-    pub fn mk_re_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Region<'tcx> {\n+    pub fn mk_re_error_with_message<S: Into<MultiSpan>>(\n+        self,\n+        span: S,\n+        msg: &'static str,\n+    ) -> Region<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n         self.mk_re_error(reported)\n     }\n@@ -759,7 +763,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         ty: Ty<'tcx>,\n         span: S,\n-        msg: &str,\n+        msg: &'static str,\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n         self.mk_const(ty::ConstKind::Error(reported), ty)"}, {"sha": "9c91b7784032d1ba5403a72af0d5e846b6d34a34", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -1,5 +1,6 @@\n //! Diagnostics related methods for `Ty`.\n \n+use std::borrow::Cow;\n use std::ops::ControlFlow;\n \n use crate::ty::{\n@@ -384,22 +385,18 @@ pub fn suggest_constraining_type_params<'a>(\n \n     if suggestions.len() == 1 {\n         let (span, suggestion, msg) = suggestions.pop().unwrap();\n-\n-        let s;\n         let msg = match msg {\n             SuggestChangingConstraintsMessage::RestrictBoundFurther => {\n-                \"consider further restricting this bound\"\n+                Cow::from(\"consider further restricting this bound\")\n             }\n             SuggestChangingConstraintsMessage::RestrictType { ty } => {\n-                s = format!(\"consider restricting type parameter `{}`\", ty);\n-                &s\n+                Cow::from(format!(\"consider restricting type parameter `{}`\", ty))\n             }\n             SuggestChangingConstraintsMessage::RestrictTypeFurther { ty } => {\n-                s = format!(\"consider further restricting type parameter `{}`\", ty);\n-                &s\n+                Cow::from(format!(\"consider further restricting type parameter `{}`\", ty))\n             }\n             SuggestChangingConstraintsMessage::RemovingQSized => {\n-                \"consider removing the `?Sized` bound to make the type parameter `Sized`\"\n+                Cow::from(\"consider removing the `?Sized` bound to make the type parameter `Sized`\")\n             }\n         };\n "}, {"sha": "9fcf51a04ec05c2651d4e0ffdcd70fac739f7383", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -23,6 +23,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n \n+use std::borrow::Cow;\n use std::mem;\n use thin_vec::{thin_vec, ThinVec};\n \n@@ -364,7 +365,7 @@ impl<'a> Parser<'a> {\n                         // `let...else if`. Emit the same error that `parse_block()` would,\n                         // but explicitly point out that this pattern is not allowed.\n                         let msg = \"conditional `else if` is not supported for `let...else`\";\n-                        return Err(self.error_block_no_opening_brace_msg(msg));\n+                        return Err(self.error_block_no_opening_brace_msg(Cow::from(msg)));\n                     }\n                     let els = self.parse_block()?;\n                     self.check_let_else_init_bool_expr(&init);\n@@ -438,7 +439,7 @@ impl<'a> Parser<'a> {\n \n     fn error_block_no_opening_brace_msg(\n         &mut self,\n-        msg: &str,\n+        msg: Cow<'static, str>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let sp = self.token.span;\n         let mut e = self.struct_span_err(sp, msg);\n@@ -502,7 +503,7 @@ impl<'a> Parser<'a> {\n     fn error_block_no_opening_brace<T>(&mut self) -> PResult<'a, T> {\n         let tok = super::token_descr(&self.token);\n         let msg = format!(\"expected `{{`, found {}\", tok);\n-        Err(self.error_block_no_opening_brace_msg(&msg))\n+        Err(self.error_block_no_opening_brace_msg(Cow::from(msg)))\n     }\n \n     /// Parses a block. Inner attributes are allowed."}, {"sha": "377652ce71bb29560af3c65b1078b24fd33da61a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -2540,7 +2540,7 @@ fn show_candidates(\n                 err.note(msg);\n             }\n             if let Some(note) = (*note).as_deref() {\n-                err.note(note);\n+                err.note(note.to_string());\n             }\n         } else {\n             let (_, descr_first, _, _) = &inaccessible_path_strings[0];"}, {"sha": "f79f8d0c6ca4ee66c2030a3cd093dc532a7b27a2", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -29,6 +29,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n+use std::borrow::Cow;\n use std::iter;\n use std::ops::Deref;\n \n@@ -1248,7 +1249,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     }),\n                 ) if followed_by_brace => {\n                     if let Some(sp) = closing_brace {\n-                        err.span_label(span, fallback_label);\n+                        err.span_label(span, fallback_label.to_string());\n                         err.multipart_suggestion(\n                             \"surround the struct literal with parentheses\",\n                             vec![\n@@ -1320,7 +1321,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                     );\n                 }\n                 _ => {\n-                    err.span_label(span, fallback_label);\n+                    err.span_label(span, fallback_label.to_string());\n                 }\n             }\n         };\n@@ -1333,7 +1334,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }))\n                 | PathSource::Struct,\n             ) => {\n-                err.span_label(span, fallback_label);\n+                err.span_label(span, fallback_label.to_string());\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"use `!` to invoke the macro\",\n@@ -1345,7 +1346,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 }\n             }\n             (Res::Def(DefKind::Macro(MacroKind::Bang), _), _) => {\n-                err.span_label(span, fallback_label);\n+                err.span_label(span, fallback_label.to_string());\n             }\n             (Res::Def(DefKind::TyAlias, def_id), PathSource::Trait(_)) => {\n                 err.span_label(span, \"type aliases cannot be used as traits\");\n@@ -1513,7 +1514,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 );\n             }\n             (Res::SelfTyParam { .. } | Res::SelfTyAlias { .. }, _) if ns == ValueNS => {\n-                err.span_label(span, fallback_label);\n+                err.span_label(span, fallback_label.to_string());\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");\n             }\n             (Res::Def(DefKind::TyAlias | DefKind::AssocTy, _), _) if ns == ValueNS => {\n@@ -2243,7 +2244,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         name: Option<&str>,\n-        suggest: impl Fn(&mut Diagnostic, bool, Span, &str, String) -> bool,\n+        suggest: impl Fn(&mut Diagnostic, bool, Span, Cow<'static, str>, String) -> bool,\n     ) {\n         let mut suggest_note = true;\n         for rib in self.lifetime_ribs.iter().rev() {\n@@ -2288,22 +2289,23 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                         (span, sugg)\n                     };\n                     if higher_ranked {\n-                        let message = format!(\n+                        let message = Cow::from(format!(\n                             \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n                             kind.descr(),\n                             name.unwrap_or(\"'a\"),\n-                        );\n-                        should_continue = suggest(err, true, span, &message, sugg);\n+                        ));\n+                        should_continue = suggest(err, true, span, message, sugg);\n                         err.note_once(\n                             \"for more information on higher-ranked polymorphism, visit \\\n                              https://doc.rust-lang.org/nomicon/hrtb.html\",\n                         );\n                     } else if let Some(name) = name {\n-                        let message = format!(\"consider introducing lifetime `{}` here\", name);\n-                        should_continue = suggest(err, false, span, &message, sugg);\n+                        let message =\n+                            Cow::from(format!(\"consider introducing lifetime `{}` here\", name));\n+                        should_continue = suggest(err, false, span, message, sugg);\n                     } else {\n-                        let message = \"consider introducing a named lifetime parameter\";\n-                        should_continue = suggest(err, false, span, &message, sugg);\n+                        let message = Cow::from(\"consider introducing a named lifetime parameter\");\n+                        should_continue = suggest(err, false, span, message, sugg);\n                     }\n                 }\n                 LifetimeRibKind::Item => break,"}, {"sha": "d8a7bcbfff955425b78d7356c7934453a966223d", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -827,7 +827,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if !is_allowed(feature) && !allowed_by_implication {\n                     let lint_buffer = &mut self.lint_buffer;\n                     let soft_handler =\n-                        |lint, span, msg: &_| lint_buffer.buffer_lint(lint, node_id, span, msg);\n+                        |lint, span, msg: String| lint_buffer.buffer_lint(lint, node_id, span, msg);\n                     stability::report_unstable(\n                         self.tcx.sess,\n                         feature,\n@@ -846,7 +846,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             let (message, lint) = stability::deprecation_message_and_lint(depr, \"macro\", &path);\n             stability::early_report_deprecation(\n                 &mut self.lint_buffer,\n-                &message,\n+                message,\n                 depr.suggestion,\n                 lint,\n                 span,"}, {"sha": "d1e4042e8d85ba0e97fe9832b33c36c130d13516", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -123,7 +123,7 @@ pub fn feature_err_issue(\n /// Construct a future incompatibility diagnostic for a feature gate.\n ///\n /// This diagnostic is only a warning and *does not cause compilation to fail*.\n-pub fn feature_warn(sess: &ParseSess, feature: Symbol, span: Span, explain: &str) {\n+pub fn feature_warn(sess: &ParseSess, feature: Symbol, span: Span, explain: &'static str) {\n     feature_warn_issue(sess, feature, span, GateIssue::Language, explain);\n }\n \n@@ -140,7 +140,7 @@ pub fn feature_warn_issue(\n     feature: Symbol,\n     span: Span,\n     issue: GateIssue,\n-    explain: &str,\n+    explain: &'static str,\n ) {\n     let mut err = sess.span_diagnostic.struct_span_warn(span, explain);\n     add_feature_diagnostics_for_issue(&mut err, sess, feature, issue);"}, {"sha": "b245742e5337277f05e8f31ec39965c9ab3ed1e6", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -10,7 +10,6 @@\n use core::fmt::Display;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::DiagnosticMessage;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n@@ -534,10 +533,7 @@ fn encode_ty<'tcx>(\n                         tcx.sess\n                             .struct_span_err(\n                                 cfi_encoding.span,\n-                                DiagnosticMessage::Str(format!(\n-                                    \"invalid `cfi_encoding` for `{:?}`\",\n-                                    ty.kind()\n-                                )),\n+                                format!(\"invalid `cfi_encoding` for `{:?}`\", ty.kind()),\n                             )\n                             .emit();\n                     }\n@@ -589,10 +585,7 @@ fn encode_ty<'tcx>(\n                         tcx.sess\n                             .struct_span_err(\n                                 cfi_encoding.span,\n-                                DiagnosticMessage::Str(format!(\n-                                    \"invalid `cfi_encoding` for `{:?}`\",\n-                                    ty.kind()\n-                                )),\n+                                format!(\"invalid `cfi_encoding` for `{:?}`\", ty.kind()),\n                             )\n                             .emit();\n                     }"}, {"sha": "9012bda4043769141cac8fac89f012cb787f03f1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -42,6 +42,7 @@ use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::sym;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n+use std::borrow::Cow;\n use std::fmt;\n use std::iter;\n use std::ops::ControlFlow;\n@@ -1602,7 +1603,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         }),\n                     ) => Some((\n                         ty.span,\n-                        with_forced_trimmed_paths!(format!(\n+                        with_forced_trimmed_paths!(Cow::from(format!(\n                             \"type mismatch resolving `{}`\",\n                             self.resolve_vars_if_possible(predicate)\n                                 .print(FmtPrinter::new_with_limit(\n@@ -1612,7 +1613,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 ))\n                                 .unwrap()\n                                 .into_buffer()\n-                        )),\n+                        ))),\n                     )),\n                     _ => None,\n                 }"}, {"sha": "b5b8c7fe3ac5698814cdc917050b7c8021cc9215", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -38,6 +38,7 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, DesugaringKind, ExpnKind, MacroKind, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n+use std::borrow::Cow;\n use std::iter;\n use std::ops::Deref;\n \n@@ -186,7 +187,12 @@ pub trait TypeErrCtxtExt<'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool;\n \n-    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<Symbol>;\n+    fn get_closure_name(\n+        &self,\n+        def_id: DefId,\n+        err: &mut Diagnostic,\n+        msg: Cow<'static, str>,\n+    ) -> Option<Symbol>;\n \n     fn suggest_fn_call(\n         &self,\n@@ -857,7 +863,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     /// Given a closure's `DefId`, return the given name of the closure.\n     ///\n     /// This doesn't account for reassignments, but it's only used for suggestions.\n-    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<Symbol> {\n+    fn get_closure_name(\n+        &self,\n+        def_id: DefId,\n+        err: &mut Diagnostic,\n+        msg: Cow<'static, str>,\n+    ) -> Option<Symbol> {\n         let get_name = |err: &mut Diagnostic, kind: &hir::PatKind<'_>| -> Option<Symbol> {\n             // Get the local name of this closure. This can be inaccurate because\n             // of the possibility of reassignment, but this should be good enough.\n@@ -934,17 +945,17 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let msg = match def_id_or_name {\n             DefIdOrName::DefId(def_id) => match self.tcx.def_kind(def_id) {\n                 DefKind::Ctor(CtorOf::Struct, _) => {\n-                    \"use parentheses to construct this tuple struct\".to_string()\n+                    Cow::from(\"use parentheses to construct this tuple struct\")\n                 }\n                 DefKind::Ctor(CtorOf::Variant, _) => {\n-                    \"use parentheses to construct this tuple variant\".to_string()\n+                    Cow::from(\"use parentheses to construct this tuple variant\")\n                 }\n-                kind => format!(\n+                kind => Cow::from(format!(\n                     \"use parentheses to call this {}\",\n                     self.tcx.def_kind_descr(kind, def_id)\n-                ),\n+                )),\n             },\n-            DefIdOrName::Name(name) => format!(\"use parentheses to call this {name}\"),\n+            DefIdOrName::Name(name) => Cow::from(format!(\"use parentheses to call this {name}\")),\n         };\n \n         let args = inputs\n@@ -979,7 +990,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     ..\n                 })) => {\n                     err.span_label(*fn_decl_span, \"consider calling this closure\");\n-                    let Some(name) = self.get_closure_name(def_id, err, &msg) else {\n+                    let Some(name) = self.get_closure_name(def_id, err, msg.clone()) else {\n                         return false;\n                     };\n                     name.to_string()\n@@ -1341,7 +1352,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         err.note(msg);\n                     } else {\n                         err.message =\n-                            vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n+                            vec![(rustc_errors::DiagnosticMessage::from(msg), Style::NoStyle)];\n                     }\n                     err.span_label(\n                         span,\n@@ -2958,7 +2969,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 for ty in bound_tys.skip_binder() {\n                                     with_forced_trimmed_paths!(write!(msg, \"`{}`, \", ty).unwrap());\n                                 }\n-                                err.note(msg.trim_end_matches(\", \"))\n+                                err.note(msg.trim_end_matches(\", \").to_string())\n                             }\n                             ty::GeneratorWitnessMIR(def_id, substs) => {\n                                 use std::fmt::Write;\n@@ -2972,7 +2983,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                     let ty = bty.subst(tcx, substs);\n                                     write!(msg, \"`{}`, \", ty).unwrap();\n                                 }\n-                                err.note(msg.trim_end_matches(\", \"))\n+                                err.note(msg.trim_end_matches(\", \").to_string())\n                             }\n                             ty::Generator(def_id, _, _) => {\n                                 let sp = self.tcx.def_span(def_id);"}, {"sha": "e2c9c62512e7e5fc9d8a492076f774ef2f409982", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -41,7 +41,12 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n \n     /// Adds diagnostic labels to `diag` for the expansion path of a trait through all intermediate\n     /// trait aliases.\n-    pub fn label_with_exp_info(&self, diag: &mut Diagnostic, top_label: &str, use_desc: &str) {\n+    pub fn label_with_exp_info(\n+        &self,\n+        diag: &mut Diagnostic,\n+        top_label: &'static str,\n+        use_desc: &str,\n+    ) {\n         diag.span_label(self.top().1, top_label);\n         if self.path.len() > 1 {\n             for (_, sp) in self.path.iter().rev().skip(1).take(self.path.len() - 2) {"}, {"sha": "b26a5c32ec63208dba60d44d5f8855918e1551c7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -781,7 +781,7 @@ impl<'tcx> ExtraInfo<'tcx> {\n         ExtraInfo { def_id, sp, tcx }\n     }\n \n-    fn error_invalid_codeblock_attr(&self, msg: String, help: &str) {\n+    fn error_invalid_codeblock_attr(&self, msg: String, help: &'static str) {\n         if let Some(def_id) = self.def_id.as_local() {\n             self.tcx.struct_span_lint_hir(\n                 crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,"}, {"sha": "2b0fef267e9a21fa0a2ca97b5619ecacf2c33915", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -842,7 +842,7 @@ impl PreprocessingError {\n         match self {\n             PreprocessingError::MultipleAnchors => report_multiple_anchors(cx, diag_info),\n             PreprocessingError::Disambiguator(range, msg) => {\n-                disambiguator_error(cx, diag_info, range.clone(), msg.as_str())\n+                disambiguator_error(cx, diag_info, range.clone(), msg.clone())\n             }\n             PreprocessingError::MalformedGenerics(err, path_str) => {\n                 report_malformed_generics(cx, diag_info, *err, path_str)"}, {"sha": "e9cee92d22bff18d1d849769da4affce5bdb0480", "filename": "src/librustdoc/passes/lint/bare_urls.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fbare_urls.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -20,19 +20,20 @@ pub(super) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n         };\n     let dox = item.doc_value();\n     if !dox.is_empty() {\n-        let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n-            let sp = source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n-                .unwrap_or_else(|| item.attr_span(cx.tcx));\n-            cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, msg, |lint| {\n-                lint.note(\"bare URLs are not automatically turned into clickable links\")\n-                    .span_suggestion(\n-                        sp,\n-                        \"use an automatic link instead\",\n-                        format!(\"<{}>\", url),\n-                        Applicability::MachineApplicable,\n-                    )\n-            });\n-        };\n+        let report_diag =\n+            |cx: &DocContext<'_>, msg: &'static str, url: &str, range: Range<usize>| {\n+                let sp = source_span_for_markdown_range(cx.tcx, &dox, &range, &item.attrs)\n+                    .unwrap_or_else(|| item.attr_span(cx.tcx));\n+                cx.tcx.struct_span_lint_hir(crate::lint::BARE_URLS, hir_id, sp, msg, |lint| {\n+                    lint.note(\"bare URLs are not automatically turned into clickable links\")\n+                        .span_suggestion(\n+                            sp,\n+                            \"use an automatic link instead\",\n+                            format!(\"<{}>\", url),\n+                            Applicability::MachineApplicable,\n+                        )\n+                });\n+            };\n \n         let mut p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n@@ -72,7 +73,7 @@ fn find_raw_urls(\n     cx: &DocContext<'_>,\n     text: &str,\n     range: Range<usize>,\n-    f: &impl Fn(&DocContext<'_>, &str, &str, Range<usize>),\n+    f: &impl Fn(&DocContext<'_>, &'static str, &str, Range<usize>),\n ) {\n     trace!(\"looking for raw urls in {}\", text);\n     // For now, we only check \"full\" URLs (meaning, starting with \"http://\" or \"https://\")."}, {"sha": "5273f52bc6f2b65e9cca30bb0314e7f3e1cfcdbb", "filename": "src/librustdoc/passes/lint/html_tags.rs", "status": "modified", "additions": 88, "deletions": 82, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fhtml_tags.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -17,90 +17,96 @@ pub(crate) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n     else { return };\n     let dox = item.doc_value();\n     if !dox.is_empty() {\n-        let report_diag = |msg: &str, range: &Range<usize>, is_open_tag: bool| {\n+        let report_diag = |msg: String, range: &Range<usize>, is_open_tag: bool| {\n             let sp = match source_span_for_markdown_range(tcx, &dox, range, &item.attrs) {\n                 Some(sp) => sp,\n                 None => item.attr_span(tcx),\n             };\n-            tcx.struct_span_lint_hir(crate::lint::INVALID_HTML_TAGS, hir_id, sp, msg, |lint| {\n-                use rustc_lint_defs::Applicability;\n-                // If a tag looks like `<this>`, it might actually be a generic.\n-                // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n-                // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n-                let mut generics_end = range.end;\n-                if let Some(Some(mut generics_start)) = (is_open_tag\n-                    && dox[..generics_end].ends_with('>'))\n-                .then(|| extract_path_backwards(&dox, range.start))\n-                {\n-                    while generics_start != 0\n-                        && generics_end < dox.len()\n-                        && dox.as_bytes()[generics_start - 1] == b'<'\n-                        && dox.as_bytes()[generics_end] == b'>'\n+            tcx.struct_span_lint_hir(\n+                crate::lint::INVALID_HTML_TAGS,\n+                hir_id,\n+                sp,\n+                msg.to_string(),\n+                |lint| {\n+                    use rustc_lint_defs::Applicability;\n+                    // If a tag looks like `<this>`, it might actually be a generic.\n+                    // We don't try to detect stuff `<like, this>` because that's not valid HTML,\n+                    // and we don't try to detect stuff `<like this>` because that's not valid Rust.\n+                    let mut generics_end = range.end;\n+                    if let Some(Some(mut generics_start)) = (is_open_tag\n+                        && dox[..generics_end].ends_with('>'))\n+                    .then(|| extract_path_backwards(&dox, range.start))\n                     {\n-                        generics_end += 1;\n-                        generics_start -= 1;\n-                        if let Some(new_start) = extract_path_backwards(&dox, generics_start) {\n-                            generics_start = new_start;\n+                        while generics_start != 0\n+                            && generics_end < dox.len()\n+                            && dox.as_bytes()[generics_start - 1] == b'<'\n+                            && dox.as_bytes()[generics_end] == b'>'\n+                        {\n+                            generics_end += 1;\n+                            generics_start -= 1;\n+                            if let Some(new_start) = extract_path_backwards(&dox, generics_start) {\n+                                generics_start = new_start;\n+                            }\n+                            if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n+                                generics_end = new_end;\n+                            }\n                         }\n                         if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n                             generics_end = new_end;\n                         }\n+                        let generics_sp = match source_span_for_markdown_range(\n+                            tcx,\n+                            &dox,\n+                            &(generics_start..generics_end),\n+                            &item.attrs,\n+                        ) {\n+                            Some(sp) => sp,\n+                            None => item.attr_span(tcx),\n+                        };\n+                        // Sometimes, we only extract part of a path. For example, consider this:\n+                        //\n+                        //     <[u32] as IntoIter<u32>>::Item\n+                        //                       ^^^^^ unclosed HTML tag `u32`\n+                        //\n+                        // We don't have any code for parsing fully-qualified trait paths.\n+                        // In theory, we could add it, but doing it correctly would require\n+                        // parsing the entire path grammar, which is problematic because of\n+                        // overlap between the path grammar and Markdown.\n+                        //\n+                        // The example above shows that ambiguity. Is `[u32]` intended to be an\n+                        // intra-doc link to the u32 primitive, or is it intended to be a slice?\n+                        //\n+                        // If the below conditional were removed, we would suggest this, which is\n+                        // not what the user probably wants.\n+                        //\n+                        //     <[u32] as `IntoIter<u32>`>::Item\n+                        //\n+                        // We know that the user actually wants to wrap the whole thing in a code\n+                        // block, but the only reason we know that is because `u32` does not, in\n+                        // fact, implement IntoIter. If the example looks like this:\n+                        //\n+                        //     <[Vec<i32>] as IntoIter<i32>::Item\n+                        //\n+                        // The ideal fix would be significantly different.\n+                        if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n+                            || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n+                        {\n+                            return lint;\n+                        }\n+                        // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n+                        lint.multipart_suggestion(\n+                            \"try marking as source code\",\n+                            vec![\n+                                (generics_sp.shrink_to_lo(), String::from(\"`\")),\n+                                (generics_sp.shrink_to_hi(), String::from(\"`\")),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n-                    if let Some(new_end) = extract_path_forward(&dox, generics_end) {\n-                        generics_end = new_end;\n-                    }\n-                    let generics_sp = match source_span_for_markdown_range(\n-                        tcx,\n-                        &dox,\n-                        &(generics_start..generics_end),\n-                        &item.attrs,\n-                    ) {\n-                        Some(sp) => sp,\n-                        None => item.attr_span(tcx),\n-                    };\n-                    // Sometimes, we only extract part of a path. For example, consider this:\n-                    //\n-                    //     <[u32] as IntoIter<u32>>::Item\n-                    //                       ^^^^^ unclosed HTML tag `u32`\n-                    //\n-                    // We don't have any code for parsing fully-qualified trait paths.\n-                    // In theory, we could add it, but doing it correctly would require\n-                    // parsing the entire path grammar, which is problematic because of\n-                    // overlap between the path grammar and Markdown.\n-                    //\n-                    // The example above shows that ambiguity. Is `[u32]` intended to be an\n-                    // intra-doc link to the u32 primitive, or is it intended to be a slice?\n-                    //\n-                    // If the below conditional were removed, we would suggest this, which is\n-                    // not what the user probably wants.\n-                    //\n-                    //     <[u32] as `IntoIter<u32>`>::Item\n-                    //\n-                    // We know that the user actually wants to wrap the whole thing in a code\n-                    // block, but the only reason we know that is because `u32` does not, in\n-                    // fact, implement IntoIter. If the example looks like this:\n-                    //\n-                    //     <[Vec<i32>] as IntoIter<i32>::Item\n-                    //\n-                    // The ideal fix would be significantly different.\n-                    if (generics_start > 0 && dox.as_bytes()[generics_start - 1] == b'<')\n-                        || (generics_end < dox.len() && dox.as_bytes()[generics_end] == b'>')\n-                    {\n-                        return lint;\n-                    }\n-                    // multipart form is chosen here because ``Vec<i32>`` would be confusing.\n-                    lint.multipart_suggestion(\n-                        \"try marking as source code\",\n-                        vec![\n-                            (generics_sp.shrink_to_lo(), String::from(\"`\")),\n-                            (generics_sp.shrink_to_hi(), String::from(\"`\")),\n-                        ],\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n \n-                lint\n-            });\n+                    lint\n+                },\n+            );\n         };\n \n         let mut tags = Vec::new();\n@@ -147,11 +153,11 @@ pub(crate) fn visit_item(cx: &DocContext<'_>, item: &Item) {\n             let t = t.to_lowercase();\n             !ALLOWED_UNCLOSED.contains(&t.as_str())\n         }) {\n-            report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range, true);\n+            report_diag(format!(\"unclosed HTML tag `{}`\", tag), range, true);\n         }\n \n         if let Some(range) = is_in_comment {\n-            report_diag(\"Unclosed HTML comment\", &range, false);\n+            report_diag(\"Unclosed HTML comment\".to_string(), &range, false);\n         }\n     }\n }\n@@ -165,7 +171,7 @@ fn drop_tag(\n     tags: &mut Vec<(String, Range<usize>)>,\n     tag_name: String,\n     range: Range<usize>,\n-    f: &impl Fn(&str, &Range<usize>, bool),\n+    f: &impl Fn(String, &Range<usize>, bool),\n ) {\n     let tag_name_low = tag_name.to_lowercase();\n     if let Some(pos) = tags.iter().rposition(|(t, _)| t.to_lowercase() == tag_name_low) {\n@@ -186,14 +192,14 @@ fn drop_tag(\n             // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n             // So `<h2><h3></h2>` will look like `[\"h2\", \"h3\"]`. So when closing `h2`, we will still\n             // have `h3`, meaning the tag wasn't closed as it should have.\n-            f(&format!(\"unclosed HTML tag `{}`\", last_tag_name), &last_tag_span, true);\n+            f(format!(\"unclosed HTML tag `{}`\", last_tag_name), &last_tag_span, true);\n         }\n         // Remove the `tag_name` that was originally closed\n         tags.pop();\n     } else {\n         // It can happen for example in this case: `<h2></script></h2>` (the `h2` tag isn't required\n         // but it helps for the visualization).\n-        f(&format!(\"unopened HTML tag `{}`\", tag_name), &range, false);\n+        f(format!(\"unopened HTML tag `{}`\", tag_name), &range, false);\n     }\n }\n \n@@ -261,7 +267,7 @@ fn extract_html_tag(\n     range: &Range<usize>,\n     start_pos: usize,\n     iter: &mut Peekable<CharIndices<'_>>,\n-    f: &impl Fn(&str, &Range<usize>, bool),\n+    f: &impl Fn(String, &Range<usize>, bool),\n ) {\n     let mut tag_name = String::new();\n     let mut is_closing = false;\n@@ -347,7 +353,7 @@ fn extract_html_tag(\n                     if let Some(quote_pos) = quote_pos {\n                         let qr = Range { start: quote_pos, end: quote_pos };\n                         f(\n-                            &format!(\"unclosed quoted HTML attribute on tag `{}`\", tag_name),\n+                            format!(\"unclosed quoted HTML attribute on tag `{}`\", tag_name),\n                             &qr,\n                             false,\n                         );\n@@ -360,7 +366,7 @@ fn extract_html_tag(\n                                 at == \"svg\" || at == \"math\"\n                             });\n                         if !valid {\n-                            f(&format!(\"invalid self-closing HTML tag `{}`\", tag_name), &r, false);\n+                            f(format!(\"invalid self-closing HTML tag `{}`\", tag_name), &r, false);\n                         }\n                     } else {\n                         tags.push((tag_name, r));\n@@ -378,7 +384,7 @@ fn extract_tags(\n     text: &str,\n     range: Range<usize>,\n     is_in_comment: &mut Option<Range<usize>>,\n-    f: &impl Fn(&str, &Range<usize>, bool),\n+    f: &impl Fn(String, &Range<usize>, bool),\n ) {\n     let mut iter = text.char_indices().peekable();\n "}, {"sha": "256958d716015a25565d99e14f9d39ae098fa621", "filename": "src/librustdoc/passes/lint/unescaped_backticks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Funescaped_backticks.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -373,7 +373,7 @@ fn suggest_insertion(\n     lint: &mut DiagnosticBuilder<'_, ()>,\n     insert_index: usize,\n     suggestion: char,\n-    message: &str,\n+    message: &'static str,\n ) {\n     /// Maximum bytes of context to show around the insertion.\n     const CONTEXT_MAX_LEN: usize = 80;"}, {"sha": "3b7eccad79df8c710ad0f1f5b89ab18c0a117adb", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, &self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n-                cx.tcx.sess.span_err(span, err.as_ref());\n+                cx.tcx.sess.span_err(span, err);\n             }\n         } else {\n             span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");"}, {"sha": "7d53fe65658a258ba9cbc7b34863c9eed5b27a72", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -26,7 +26,6 @@ use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::type_allowed_to_implement_copy;\n-use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -240,9 +239,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\")),\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\"),\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );\n@@ -270,9 +268,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\"))\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\")\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );"}, {"sha": "5073eb02bd84a049ef2a851af54f1f7e22056e8a", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             span_lint_and_then(cx, UNNECESSARY_WRAPS, span, lint_msg.as_str(), |diag| {\n                 diag.span_suggestion(\n                     fn_decl.output.span(),\n-                    return_type_sugg_msg.as_str(),\n+                    return_type_sugg_msg,\n                     return_type_sugg,\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "edd87546a5f880349f1251fc7c36be01bd3ae683", "filename": "src/tools/clippy/clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -46,7 +46,7 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -80,11 +80,12 @@ pub fn span_lint_and_help<T: LintContext>(\n     help_span: Option<Span>,\n     help: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let help = help.to_string();\n         if let Some(help_span) = help_span {\n-            diag.span_help(help_span, help);\n+            diag.span_help(help_span, help.to_string());\n         } else {\n-            diag.help(help);\n+            diag.help(help.to_string());\n         }\n         docs_link(diag, lint);\n         diag\n@@ -122,7 +123,8 @@ pub fn span_lint_and_note<T: LintContext>(\n     note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let note = note.to_string();\n         if let Some(note_span) = note_span {\n             diag.span_note(note_span, note);\n         } else {\n@@ -143,15 +145,15 @@ where\n     S: Into<MultiSpan>,\n     F: FnOnce(&mut Diagnostic),\n {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n     });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -165,7 +167,7 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut Diagnostic),\n ) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n@@ -202,7 +204,7 @@ pub fn span_lint_and_sugg<T: LintContext>(\n     applicability: Applicability,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |diag| {\n-        diag.span_suggestion(sp, help, sugg, applicability);\n+        diag.span_suggestion(sp, help.to_string(), sugg, applicability);\n     });\n }\n \n@@ -232,5 +234,5 @@ pub fn multispan_sugg_with_applicability<I>(\n ) where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    diag.multipart_suggestion(help_msg, sugg.into_iter().collect(), applicability);\n+    diag.multipart_suggestion(help_msg.to_string(), sugg.into_iter().collect(), applicability);\n }"}, {"sha": "f477524eec5cc26890c33ef14554c564cf2900de", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -741,7 +741,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{attr}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{attr}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -762,7 +762,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{new_item}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{new_item}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -779,7 +779,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n             }\n         }\n \n-        self.span_suggestion(remove_span, msg, \"\", applicability);\n+        self.span_suggestion(remove_span, msg.to_string(), \"\", applicability);\n     }\n }\n "}, {"sha": "14931baaadf3774376c691b580af08b33b5d03ed", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -306,7 +306,7 @@ pub fn report_error<'tcx, 'mir>(\n     msg.insert(0, e.to_string());\n     report_msg(\n         DiagLevel::Error,\n-        &if let Some(title) = title { format!(\"{title}: {}\", msg[0]) } else { msg[0].clone() },\n+        if let Some(title) = title { format!(\"{title}: {}\", msg[0]) } else { msg[0].clone() },\n         msg,\n         vec![],\n         helps,\n@@ -359,7 +359,7 @@ pub fn report_leaks<'mir, 'tcx>(\n         any_pruned |= pruned;\n         report_msg(\n             DiagLevel::Error,\n-            &format!(\n+            format!(\n                 \"memory leaked: {id:?} ({}, size: {:?}, align: {:?}), allocated here:\",\n                 kind,\n                 alloc.size().bytes(),\n@@ -386,7 +386,7 @@ pub fn report_leaks<'mir, 'tcx>(\n /// additional `span_label` or `note` call.\n pub fn report_msg<'tcx>(\n     diag_level: DiagLevel,\n-    title: &str,\n+    title: String,\n     span_msg: Vec<String>,\n     notes: Vec<(Option<SpanData>, String)>,\n     helps: Vec<(Option<SpanData>, String)>,\n@@ -463,15 +463,16 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let (stacktrace, _was_pruned) = prune_stacktrace(stacktrace, self);\n \n         let (title, diag_level) = match &e {\n-            RejectedIsolatedOp(_) => (\"operation rejected by isolation\", DiagLevel::Warning),\n-            Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n+            RejectedIsolatedOp(_) =>\n+                (\"operation rejected by isolation\".to_string(), DiagLevel::Warning),\n+            Int2Ptr { .. } => (\"integer-to-pointer cast\".to_string(), DiagLevel::Warning),\n             CreatedPointerTag(..)\n             | PoppedPointerTag(..)\n             | CreatedCallId(..)\n             | CreatedAlloc(..)\n             | FreedAlloc(..)\n             | ProgressReport { .. }\n-            | WeakMemoryOutdatedLoad => (\"tracking was triggered\", DiagLevel::Note),\n+            | WeakMemoryOutdatedLoad => (\"tracking was triggered\".to_string(), DiagLevel::Note),\n         };\n \n         let msg = match &e {\n@@ -571,7 +572,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let stacktrace = this.generate_stacktrace();\n         report_msg(\n             DiagLevel::Note,\n-            \"the place in the program where the ICE was triggered\",\n+            \"the place in the program where the ICE was triggered\".to_string(),\n             vec![],\n             vec![],\n             vec![],"}, {"sha": "8c876213ae0eb6f212cac1bcbfb1c0e3e32cb498", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive-doc-comment-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/781111ef3591e4355c115593c4d75964b85555d6/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/781111ef3591e4355c115593c4d75964b85555d6/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr?ref=781111ef3591e4355c115593c4d75964b85555d6", "patch": "@@ -23,7 +23,7 @@ LL |     arg: NotIntoDiagnosticArg,\n    |\n    = help: normalized in stderr\n note: required by a bound in `Diagnostic::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic.rs:964:5\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic.rs:960:5\n \n error: aborting due to 2 previous errors\n "}]}