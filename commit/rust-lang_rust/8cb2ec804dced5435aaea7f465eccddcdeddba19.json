{"sha": "8cb2ec804dced5435aaea7f465eccddcdeddba19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYjJlYzgwNGRjZWQ1NDM1YWFlYTdmNDY1ZWNjZGRjZGVkZGJhMTk=", "commit": {"author": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-17T10:59:52Z"}, "committer": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-18T01:14:25Z"}, "message": "Support generic type", "tree": {"sha": "6375d09f54e06aa59ff10c5d6a0e8cc9536f97d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6375d09f54e06aa59ff10c5d6a0e8cc9536f97d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cb2ec804dced5435aaea7f465eccddcdeddba19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb2ec804dced5435aaea7f465eccddcdeddba19", "html_url": "https://github.com/rust-lang/rust/commit/8cb2ec804dced5435aaea7f465eccddcdeddba19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cb2ec804dced5435aaea7f465eccddcdeddba19/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e53c9868d2fe3fd8b2bd7b0f77764da689918a", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e53c9868d2fe3fd8b2bd7b0f77764da689918a", "html_url": "https://github.com/rust-lang/rust/commit/16e53c9868d2fe3fd8b2bd7b0f77764da689918a"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "ea3e29cff122fc20760afc0432a235e958dd9e19", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                             let hir::Item_::ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node,\n                                             trait_ref.path.def.def_id() == trait_id\n                                         ], { return; }}\n-                                        implements_trait($cx, $ty, trait_id, vec![$rty])\n+                                        implements_trait($cx, $ty, trait_id, &[$rty], None)\n                                     },)*\n                                     _ => false,\n                                 }"}, {"sha": "9acf4c7e973ac1f4f9e45f95f1d8ac09eabc8b87", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -724,7 +724,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n                         return false;\n                     };\n \n-                    if implements_trait(cx, arg_ty, default_trait_id, Vec::new()) {\n+                    if implements_trait(cx, arg_ty, default_trait_id, &[], None) {\n                         span_lint_and_then(cx,\n                                            OR_FUN_CALL,\n                                            span,\n@@ -1268,7 +1268,7 @@ fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n /// This checks whether a given type is known to implement Debug.\n fn has_debug_impl<'a, 'b>(ty: ty::Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n     match cx.tcx.lang_items.debug_trait() {\n-        Some(debug) => implements_trait(cx, ty, debug, Vec::new()),\n+        Some(debug) => implements_trait(cx, ty, debug, &[], None),\n         None => false,\n     }\n }"}, {"sha": "d2f794def0cf6f4b727eefc6da0bbcf5c6a8439b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -420,7 +420,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr, left: bool, op: S\n         None => return,\n     };\n \n-    if !implements_trait(cx, arg_ty, partial_eq_trait_id, vec![other_ty]) {\n+    if !implements_trait(cx, arg_ty, partial_eq_trait_id, &[other_ty], None) {\n         return;\n     }\n "}, {"sha": "ece7e130c5fbeab688638a2b452d3ad7ec877b54", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n                     same_tys(cx, self_ty, return_ty(cx, id), id),\n                     let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT),\n-                    !implements_trait(cx, self_ty, default_trait_id, Vec::new())\n+                    !implements_trait(cx, self_ty, default_trait_id, &[], None)\n                 ], {\n                     if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n                         span_lint_and_then(cx,\n@@ -156,7 +156,7 @@ fn can_derive_default<'t, 'c>(ty: ty::Ty<'t>, cx: &LateContext<'c, 't>, default_\n         ty::TyAdt(adt_def, substs) if adt_def.is_struct() => {\n             for field in adt_def.all_fields() {\n                 let f_ty = field.ty(cx.tcx, substs);\n-                if !implements_trait(cx, f_ty, default_trait_id, Vec::new()) {\n+                if !implements_trait(cx, f_ty, default_trait_id, &[], None) {\n                     return None;\n                 }\n             }"}, {"sha": "16933ea27474f081619b62dfefed064d3823a902", "filename": "clippy_lints/src/should_assert_eq.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshould_assert_eq.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -1,13 +1,13 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{paths, is_direct_expn_of, get_trait_def_id, implements_trait, span_lint};\n+use utils::{is_direct_expn_of, implements_trait, span_lint};\n \n /// **What it does:** Checks for `assert!(x == y)` which can be written better\n /// as `assert_eq!(x, y)` if `x` and `y` implement `Debug` trait.\n ///\n /// **Why is this bad?** `assert_eq` provides better assertion failure reporting.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Hopefully none.\n ///\n /// **Example:**\n /// ```rust\n@@ -45,13 +45,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ShouldAssertEq {\n                 return;\n             }\n \n-            let debug_trait = get_trait_def_id(cx, &paths::DEBUG_TRAIT)\n-                .expect(\"cannot find Debug trait\");\n+            let debug_trait = if let Some(t) = cx.tcx.lang_items.debug_trait() {\n+                t\n+            } else {\n+                return;\n+            };\n \n             let ty1 = cx.tables.expr_ty(expr1);\n             let ty2 = cx.tables.expr_ty(expr2);\n-            if implements_trait(cx, ty1, debug_trait, vec![]) &&\n-                implements_trait(cx, ty2, debug_trait, vec![]) {\n+\n+            let parent = cx.tcx.hir.get_parent(e.id);\n+\n+            if implements_trait(cx, ty1, debug_trait, &[], Some(parent)) &&\n+                implements_trait(cx, ty2, debug_trait, &[], Some(parent)) {\n                 span_lint(cx, SHOULD_ASSERT_EQ, e.span, \"use `assert_eq` for better reporting\");\n             }\n         }}"}, {"sha": "ce581febfe41a45689463c0fa25b7930a5c308ee", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -317,13 +317,19 @@ pub fn implements_trait<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     ty: ty::Ty<'tcx>,\n     trait_id: DefId,\n-    ty_params: Vec<ty::Ty<'tcx>>\n+    ty_params: &[ty::Ty<'tcx>],\n+    parent_node_id: Option<NodeId>\n ) -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n     let ty = cx.tcx.erase_regions(&ty);\n-    cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n-        let obligation = cx.tcx.predicate_for_trait_def(traits::ObligationCause::dummy(), trait_id, 0, ty, &ty_params);\n+    let mut b = if let Some(id) = parent_node_id {\n+        cx.tcx.infer_ctxt(BodyId { node_id: id }, Reveal::All)\n+    } else {\n+        cx.tcx.infer_ctxt((), Reveal::All)\n+    };\n+    b.enter(|infcx| {\n+        let obligation = cx.tcx.predicate_for_trait_def(traits::ObligationCause::dummy(), trait_id, 0, ty, ty_params);\n \n         traits::SelectionContext::new(&infcx).evaluate_obligation_conservatively(&obligation)\n     })"}, {"sha": "5edff76d9969e277fcb47e71d20be6f1a85a7b2a", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -15,7 +15,6 @@ pub const CMP_MIN: [&'static str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n pub const CSTRING_NEW: [&'static str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"new\"];\n pub const DEBUG_FMT_METHOD: [&'static str; 4] = [\"core\", \"fmt\", \"Debug\", \"fmt\"];\n-pub const DEBUG_TRAIT: [&'static str; 3] = [\"core\", \"fmt\", \"Debug\"];\n pub const DEFAULT_TRAIT: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DISPLAY_FMT_METHOD: [&'static str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DROP: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];"}, {"sha": "5abf35664259fed009d95de40a54691fbc3c7aa6", "filename": "tests/ui/should_assert_eq.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/tests%2Fui%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/tests%2Fui%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.rs?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -13,4 +13,11 @@ fn main() {\n     assert!(1 == 2);\n     assert!(Debug(1) == Debug(2));\n     assert!(NonDebug(1) == NonDebug(1)); // ok\n+\n+    test_generic(1, 2, 3, 4);\n+}\n+\n+fn test_generic<T: std::fmt::Debug + Eq, U: Eq>(x: T, y: T, z: U, w: U) {\n+    assert!(x == y);\n+    assert!(z == w); // ok\n }"}, {"sha": "68d287fda8d54f84c123105d6f58afd1c4dd6023", "filename": "tests/ui/should_assert_eq.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cb2ec804dced5435aaea7f465eccddcdeddba19/tests%2Fui%2Fshould_assert_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cb2ec804dced5435aaea7f465eccddcdeddba19/tests%2Fui%2Fshould_assert_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshould_assert_eq.stderr?ref=8cb2ec804dced5435aaea7f465eccddcdeddba19", "patch": "@@ -19,5 +19,13 @@ error: use `assert_eq` for better reporting\n    |\n    = note: this error originates in a macro outside of the current crate\n \n-error: aborting due to 2 previous errors\n+error: use `assert_eq` for better reporting\n+  --> $DIR/should_assert_eq.rs:21:5\n+   |\n+21 |     assert!(x == y);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to 3 previous errors\n "}]}