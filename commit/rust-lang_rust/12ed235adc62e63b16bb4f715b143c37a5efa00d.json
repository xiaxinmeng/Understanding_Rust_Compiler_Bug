{"sha": "12ed235adc62e63b16bb4f715b143c37a5efa00d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZWQyMzVhZGM2MmU2M2IxNmJiNGY3MTViMTQzYzM3YTVlZmEwMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-18T15:04:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-18T15:04:17Z"}, "message": "Auto merge of #52375 - oli-obk:the_early_lint_pass_gets_the_worm, r=Manishearth\n\nLint `async` identifiers in 2018 preparation mode\n\nr? @Manishearth\n\nfixes https://github.com/rust-lang/rust/issues/49716", "tree": {"sha": "4fb343d88841eb3674ce998fd3ce32dba4386dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb343d88841eb3674ce998fd3ce32dba4386dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ed235adc62e63b16bb4f715b143c37a5efa00d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ed235adc62e63b16bb4f715b143c37a5efa00d", "html_url": "https://github.com/rust-lang/rust/commit/12ed235adc62e63b16bb4f715b143c37a5efa00d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ed235adc62e63b16bb4f715b143c37a5efa00d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ee65411c46b8f701bd1f241725092cb1b347e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ee65411c46b8f701bd1f241725092cb1b347e6", "html_url": "https://github.com/rust-lang/rust/commit/29ee65411c46b8f701bd1f241725092cb1b347e6"}, {"sha": "68c93e7da08e9a264a0a09a6782a3328e72d3177", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c93e7da08e9a264a0a09a6782a3328e72d3177", "html_url": "https://github.com/rust-lang/rust/commit/68c93e7da08e9a264a0a09a6782a3328e72d3177"}], "stats": {"total": 782, "additions": 599, "deletions": 183}, "files": [{"sha": "5c1009fb31f19b840a1398c9b3d3522a5d6b4823", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 169, "deletions": 159, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -27,7 +27,7 @@\n use self::TargetLint::*;\n \n use std::slice;\n-use rustc_data_structures::sync::{RwLock, ReadGuard};\n+use rustc_data_structures::sync::ReadGuard;\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use lint::builtin::BuiltinLintDiagnostics;\n@@ -59,8 +59,8 @@ pub struct LintStore {\n     lints: Vec<(&'static Lint, bool)>,\n \n     /// Trait objects for each lint pass.\n-    /// This is only `None` while performing a lint pass. See the definition\n-    /// of `LintSession::new`.\n+    /// This is only `None` while performing a lint pass.\n+    pre_expansion_passes: Option<Vec<EarlyLintPassObject>>,\n     early_passes: Option<Vec<EarlyLintPassObject>>,\n     late_passes: Option<Vec<LateLintPassObject>>,\n \n@@ -139,6 +139,7 @@ impl LintStore {\n     pub fn new() -> LintStore {\n         LintStore {\n             lints: vec![],\n+            pre_expansion_passes: Some(vec![]),\n             early_passes: Some(vec![]),\n             late_passes: Some(vec![]),\n             by_name: FxHashMap(),\n@@ -165,6 +166,15 @@ impl LintStore {\n         self.early_passes.as_mut().unwrap().push(pass);\n     }\n \n+    pub fn register_pre_expansion_pass(\n+        &mut self,\n+        sess: Option<&Session>,\n+        pass: EarlyLintPassObject,\n+    ) {\n+        self.push_pass(sess, false, &pass);\n+        self.pre_expansion_passes.as_mut().unwrap().push(pass);\n+    }\n+\n     pub fn register_late_pass(&mut self,\n                               sess: Option<&Session>,\n                               from_plugin: bool,\n@@ -334,28 +344,6 @@ impl LintStore {\n     }\n }\n \n-impl<'a, PassObject: LintPassObject> LintSession<'a, PassObject> {\n-    /// Creates a new `LintSession`, by moving out the `LintStore`'s initial\n-    /// lint levels and pass objects. These can be restored using the `restore`\n-    /// method.\n-    fn new(store: &'a RwLock<LintStore>) -> LintSession<'a, PassObject> {\n-        let mut s = store.borrow_mut();\n-        let passes = PassObject::take_passes(&mut *s);\n-        drop(s);\n-        LintSession {\n-            lints: store.borrow(),\n-            passes,\n-        }\n-    }\n-\n-    /// Restores the levels back to the original lint store.\n-    fn restore(self, store: &RwLock<LintStore>) {\n-        drop(self.lints);\n-        let mut s = store.borrow_mut();\n-        PassObject::restore_passes(&mut *s, self.passes);\n-    }\n-}\n-\n /// Context for lint checking after type checking.\n pub struct LateContext<'a, 'tcx: 'a> {\n     /// Type context we're checking in.\n@@ -397,7 +385,7 @@ pub struct EarlyContext<'a> {\n }\n \n /// Convenience macro for calling a `LintPass` method on every pass in the context.\n-macro_rules! run_lints { ($cx:expr, $f:ident, $ps:ident, $($args:expr),*) => ({\n+macro_rules! run_lints { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     // Move the vector of passes out of `$cx` so that we can\n     // iterate over it mutably while passing `$cx` to the methods.\n     let mut passes = $cx.lint_sess_mut().passes.take().unwrap();\n@@ -407,30 +395,11 @@ macro_rules! run_lints { ($cx:expr, $f:ident, $ps:ident, $($args:expr),*) => ({\n     $cx.lint_sess_mut().passes = Some(passes);\n }) }\n \n-pub trait LintPassObject: Sized {\n-    fn take_passes(store: &mut LintStore) -> Option<Vec<Self>>;\n-    fn restore_passes(store: &mut LintStore, passes: Option<Vec<Self>>);\n-}\n-\n-impl LintPassObject for EarlyLintPassObject {\n-    fn take_passes(store: &mut LintStore) -> Option<Vec<Self>> {\n-        store.early_passes.take()\n-    }\n+pub trait LintPassObject: Sized {}\n \n-    fn restore_passes(store: &mut LintStore, passes: Option<Vec<Self>>) {\n-        store.early_passes = passes;\n-    }\n-}\n-\n-impl LintPassObject for LateLintPassObject {\n-    fn take_passes(store: &mut LintStore) -> Option<Vec<Self>> {\n-        store.late_passes.take()\n-    }\n+impl LintPassObject for EarlyLintPassObject {}\n \n-    fn restore_passes(store: &mut LintStore, passes: Option<Vec<Self>>) {\n-        store.late_passes = passes;\n-    }\n-}\n+impl LintPassObject for LateLintPassObject {}\n \n \n pub trait LintContext<'tcx>: Sized {\n@@ -517,14 +486,21 @@ pub trait LintContext<'tcx>: Sized {\n \n \n impl<'a> EarlyContext<'a> {\n-    fn new(sess: &'a Session,\n-           krate: &'a ast::Crate) -> EarlyContext<'a> {\n+    fn new(\n+        sess: &'a Session,\n+        krate: &'a ast::Crate,\n+        passes: Option<Vec<EarlyLintPassObject>>,\n+        buffered: LintBuffer,\n+    ) -> EarlyContext<'a> {\n         EarlyContext {\n             sess,\n             krate,\n-            lint_sess: LintSession::new(&sess.lint_store),\n+            lint_sess: LintSession {\n+                lints: sess.lint_store.borrow(),\n+                passes,\n+            },\n             builder: LintLevelSets::builder(sess),\n-            buffered: sess.buffered_lints.borrow_mut().take().unwrap(),\n+            buffered,\n         }\n     }\n \n@@ -560,12 +536,12 @@ impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> {\n \n     fn enter_attrs(&mut self, attrs: &'tcx [ast::Attribute]) {\n         debug!(\"late context: enter_attrs({:?})\", attrs);\n-        run_lints!(self, enter_lint_attrs, late_passes, attrs);\n+        run_lints!(self, enter_lint_attrs, attrs);\n     }\n \n     fn exit_attrs(&mut self, attrs: &'tcx [ast::Attribute]) {\n         debug!(\"late context: exit_attrs({:?})\", attrs);\n-        run_lints!(self, exit_lint_attrs, late_passes, attrs);\n+        run_lints!(self, exit_lint_attrs, attrs);\n     }\n \n     fn lookup<S: Into<MultiSpan>>(&self,\n@@ -617,12 +593,12 @@ impl<'a> LintContext<'a> for EarlyContext<'a> {\n \n     fn enter_attrs(&mut self, attrs: &'a [ast::Attribute]) {\n         debug!(\"early context: enter_attrs({:?})\", attrs);\n-        run_lints!(self, enter_lint_attrs, early_passes, attrs);\n+        run_lints!(self, enter_lint_attrs, attrs);\n     }\n \n     fn exit_attrs(&mut self, attrs: &'a [ast::Attribute]) {\n         debug!(\"early context: exit_attrs({:?})\", attrs);\n-        run_lints!(self, exit_lint_attrs, early_passes, attrs);\n+        run_lints!(self, exit_lint_attrs, attrs);\n     }\n \n     fn lookup<S: Into<MultiSpan>>(&self,\n@@ -688,19 +664,19 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body) {\n-        run_lints!(self, check_body, late_passes, body);\n+        run_lints!(self, check_body, body);\n         hir_visit::walk_body(self, body);\n-        run_lints!(self, check_body_post, late_passes, body);\n+        run_lints!(self, check_body_post, body);\n     }\n \n     fn visit_item(&mut self, it: &'tcx hir::Item) {\n         let generics = self.generics.take();\n         self.generics = it.node.generics();\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n             cx.with_param_env(it.id, |cx| {\n-                run_lints!(cx, check_item, late_passes, it);\n+                run_lints!(cx, check_item, it);\n                 hir_visit::walk_item(cx, it);\n-                run_lints!(cx, check_item_post, late_passes, it);\n+                run_lints!(cx, check_item_post, it);\n             });\n         });\n         self.generics = generics;\n@@ -709,23 +685,23 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n             cx.with_param_env(it.id, |cx| {\n-                run_lints!(cx, check_foreign_item, late_passes, it);\n+                run_lints!(cx, check_foreign_item, it);\n                 hir_visit::walk_foreign_item(cx, it);\n-                run_lints!(cx, check_foreign_item_post, late_passes, it);\n+                run_lints!(cx, check_foreign_item_post, it);\n             });\n         })\n     }\n \n     fn visit_pat(&mut self, p: &'tcx hir::Pat) {\n-        run_lints!(self, check_pat, late_passes, p);\n+        run_lints!(self, check_pat, p);\n         hir_visit::walk_pat(self, p);\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr) {\n         self.with_lint_attrs(e.id, &e.attrs, |cx| {\n-            run_lints!(cx, check_expr, late_passes, e);\n+            run_lints!(cx, check_expr, e);\n             hir_visit::walk_expr(cx, e);\n-            run_lints!(cx, check_expr_post, late_passes, e);\n+            run_lints!(cx, check_expr_post, e);\n         })\n     }\n \n@@ -735,7 +711,7 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         // - local\n         // - expression\n         // so we keep track of lint levels there\n-        run_lints!(self, check_stmt, late_passes, s);\n+        run_lints!(self, check_stmt, s);\n         hir_visit::walk_stmt(self, s);\n     }\n \n@@ -746,9 +722,9 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         let old_tables = self.tables;\n         self.tables = self.tcx.body_tables(body_id);\n         let body = self.tcx.hir.body(body_id);\n-        run_lints!(self, check_fn, late_passes, fk, decl, body, span, id);\n+        run_lints!(self, check_fn, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body_id, span, id);\n-        run_lints!(self, check_fn_post, late_passes, fk, decl, body, span, id);\n+        run_lints!(self, check_fn_post, fk, decl, body, span, id);\n         self.tables = old_tables;\n     }\n \n@@ -758,14 +734,14 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n                         g: &'tcx hir::Generics,\n                         item_id: ast::NodeId,\n                         _: Span) {\n-        run_lints!(self, check_struct_def, late_passes, s, name, g, item_id);\n+        run_lints!(self, check_struct_def, s, name, g, item_id);\n         hir_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, late_passes, s, name, g, item_id);\n+        run_lints!(self, check_struct_def_post, s, name, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_lints!(cx, check_struct_field, late_passes, s);\n+            run_lints!(cx, check_struct_field, s);\n             hir_visit::walk_struct_field(cx, s);\n         })\n     }\n@@ -775,68 +751,68 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n                      g: &'tcx hir::Generics,\n                      item_id: ast::NodeId) {\n         self.with_lint_attrs(v.node.data.id(), &v.node.attrs, |cx| {\n-            run_lints!(cx, check_variant, late_passes, v, g);\n+            run_lints!(cx, check_variant, v, g);\n             hir_visit::walk_variant(cx, v, g, item_id);\n-            run_lints!(cx, check_variant_post, late_passes, v, g);\n+            run_lints!(cx, check_variant_post, v, g);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &'tcx hir::Ty) {\n-        run_lints!(self, check_ty, late_passes, t);\n+        run_lints!(self, check_ty, t);\n         hir_visit::walk_ty(self, t);\n     }\n \n     fn visit_name(&mut self, sp: Span, name: ast::Name) {\n-        run_lints!(self, check_name, late_passes, sp, name);\n+        run_lints!(self, check_name, sp, name);\n     }\n \n     fn visit_mod(&mut self, m: &'tcx hir::Mod, s: Span, n: ast::NodeId) {\n-        run_lints!(self, check_mod, late_passes, m, s, n);\n+        run_lints!(self, check_mod, m, s, n);\n         hir_visit::walk_mod(self, m, n);\n-        run_lints!(self, check_mod_post, late_passes, m, s, n);\n+        run_lints!(self, check_mod_post, m, s, n);\n     }\n \n     fn visit_local(&mut self, l: &'tcx hir::Local) {\n         self.with_lint_attrs(l.id, &l.attrs, |cx| {\n-            run_lints!(cx, check_local, late_passes, l);\n+            run_lints!(cx, check_local, l);\n             hir_visit::walk_local(cx, l);\n         })\n     }\n \n     fn visit_block(&mut self, b: &'tcx hir::Block) {\n-        run_lints!(self, check_block, late_passes, b);\n+        run_lints!(self, check_block, b);\n         hir_visit::walk_block(self, b);\n-        run_lints!(self, check_block_post, late_passes, b);\n+        run_lints!(self, check_block_post, b);\n     }\n \n     fn visit_arm(&mut self, a: &'tcx hir::Arm) {\n-        run_lints!(self, check_arm, late_passes, a);\n+        run_lints!(self, check_arm, a);\n         hir_visit::walk_arm(self, a);\n     }\n \n     fn visit_decl(&mut self, d: &'tcx hir::Decl) {\n-        run_lints!(self, check_decl, late_passes, d);\n+        run_lints!(self, check_decl, d);\n         hir_visit::walk_decl(self, d);\n     }\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam) {\n-        run_lints!(self, check_generic_param, late_passes, p);\n+        run_lints!(self, check_generic_param, p);\n         hir_visit::walk_generic_param(self, p);\n     }\n \n     fn visit_generics(&mut self, g: &'tcx hir::Generics) {\n-        run_lints!(self, check_generics, late_passes, g);\n+        run_lints!(self, check_generics, g);\n         hir_visit::walk_generics(self, g);\n     }\n \n     fn visit_where_predicate(&mut self, p: &'tcx hir::WherePredicate) {\n-        run_lints!(self, check_where_predicate, late_passes, p);\n+        run_lints!(self, check_where_predicate, p);\n         hir_visit::walk_where_predicate(self, p);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'tcx hir::PolyTraitRef,\n                             m: hir::TraitBoundModifier) {\n-        run_lints!(self, check_poly_trait_ref, late_passes, t, m);\n+        run_lints!(self, check_poly_trait_ref, t, m);\n         hir_visit::walk_poly_trait_ref(self, t, m);\n     }\n \n@@ -845,9 +821,9 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         self.generics = Some(&trait_item.generics);\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n             cx.with_param_env(trait_item.id, |cx| {\n-                run_lints!(cx, check_trait_item, late_passes, trait_item);\n+                run_lints!(cx, check_trait_item, trait_item);\n                 hir_visit::walk_trait_item(cx, trait_item);\n-                run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n+                run_lints!(cx, check_trait_item_post, trait_item);\n             });\n         });\n         self.generics = generics;\n@@ -858,71 +834,71 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         self.generics = Some(&impl_item.generics);\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n             cx.with_param_env(impl_item.id, |cx| {\n-                run_lints!(cx, check_impl_item, late_passes, impl_item);\n+                run_lints!(cx, check_impl_item, impl_item);\n                 hir_visit::walk_impl_item(cx, impl_item);\n-                run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n+                run_lints!(cx, check_impl_item_post, impl_item);\n             });\n         });\n         self.generics = generics;\n     }\n \n     fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n-        run_lints!(self, check_lifetime, late_passes, lt);\n+        run_lints!(self, check_lifetime, lt);\n         hir_visit::walk_lifetime(self, lt);\n     }\n \n     fn visit_path(&mut self, p: &'tcx hir::Path, id: ast::NodeId) {\n-        run_lints!(self, check_path, late_passes, p, id);\n+        run_lints!(self, check_path, p, id);\n         hir_visit::walk_path(self, p);\n     }\n \n     fn visit_attribute(&mut self, attr: &'tcx ast::Attribute) {\n-        run_lints!(self, check_attribute, late_passes, attr);\n+        run_lints!(self, check_attribute, attr);\n     }\n }\n \n impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n     fn visit_item(&mut self, it: &'a ast::Item) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_lints!(cx, check_item, early_passes, it);\n+            run_lints!(cx, check_item, it);\n             ast_visit::walk_item(cx, it);\n-            run_lints!(cx, check_item_post, early_passes, it);\n+            run_lints!(cx, check_item_post, it);\n         })\n     }\n \n     fn visit_foreign_item(&mut self, it: &'a ast::ForeignItem) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_lints!(cx, check_foreign_item, early_passes, it);\n+            run_lints!(cx, check_foreign_item, it);\n             ast_visit::walk_foreign_item(cx, it);\n-            run_lints!(cx, check_foreign_item_post, early_passes, it);\n+            run_lints!(cx, check_foreign_item_post, it);\n         })\n     }\n \n     fn visit_pat(&mut self, p: &'a ast::Pat) {\n-        run_lints!(self, check_pat, early_passes, p);\n+        run_lints!(self, check_pat, p);\n         self.check_id(p.id);\n         ast_visit::walk_pat(self, p);\n     }\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         self.with_lint_attrs(e.id, &e.attrs, |cx| {\n-            run_lints!(cx, check_expr, early_passes, e);\n+            run_lints!(cx, check_expr, e);\n             ast_visit::walk_expr(cx, e);\n         })\n     }\n \n     fn visit_stmt(&mut self, s: &'a ast::Stmt) {\n-        run_lints!(self, check_stmt, early_passes, s);\n+        run_lints!(self, check_stmt, s);\n         self.check_id(s.id);\n         ast_visit::walk_stmt(self, s);\n     }\n \n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, decl: &'a ast::FnDecl,\n                 span: Span, id: ast::NodeId) {\n-        run_lints!(self, check_fn, early_passes, fk, decl, span, id);\n+        run_lints!(self, check_fn, fk, decl, span, id);\n         self.check_id(id);\n         ast_visit::walk_fn(self, fk, decl, span);\n-        run_lints!(self, check_fn_post, early_passes, fk, decl, span, id);\n+        run_lints!(self, check_fn_post, fk, decl, span, id);\n     }\n \n     fn visit_variant_data(&mut self,\n@@ -931,121 +907,126 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n                         g: &'a ast::Generics,\n                         item_id: ast::NodeId,\n                         _: Span) {\n-        run_lints!(self, check_struct_def, early_passes, s, ident, g, item_id);\n+        run_lints!(self, check_struct_def, s, ident, g, item_id);\n         self.check_id(s.id());\n         ast_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, early_passes, s, ident, g, item_id);\n+        run_lints!(self, check_struct_def_post, s, ident, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &'a ast::StructField) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_lints!(cx, check_struct_field, early_passes, s);\n+            run_lints!(cx, check_struct_field, s);\n             ast_visit::walk_struct_field(cx, s);\n         })\n     }\n \n     fn visit_variant(&mut self, v: &'a ast::Variant, g: &'a ast::Generics, item_id: ast::NodeId) {\n         self.with_lint_attrs(item_id, &v.node.attrs, |cx| {\n-            run_lints!(cx, check_variant, early_passes, v, g);\n+            run_lints!(cx, check_variant, v, g);\n             ast_visit::walk_variant(cx, v, g, item_id);\n-            run_lints!(cx, check_variant_post, early_passes, v, g);\n+            run_lints!(cx, check_variant_post, v, g);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &'a ast::Ty) {\n-        run_lints!(self, check_ty, early_passes, t);\n+        run_lints!(self, check_ty, t);\n         self.check_id(t.id);\n         ast_visit::walk_ty(self, t);\n     }\n \n     fn visit_ident(&mut self, ident: ast::Ident) {\n-        run_lints!(self, check_ident, early_passes, ident);\n+        run_lints!(self, check_ident, ident);\n     }\n \n     fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, _a: &[ast::Attribute], n: ast::NodeId) {\n-        run_lints!(self, check_mod, early_passes, m, s, n);\n+        run_lints!(self, check_mod, m, s, n);\n         self.check_id(n);\n         ast_visit::walk_mod(self, m);\n-        run_lints!(self, check_mod_post, early_passes, m, s, n);\n+        run_lints!(self, check_mod_post, m, s, n);\n     }\n \n     fn visit_local(&mut self, l: &'a ast::Local) {\n         self.with_lint_attrs(l.id, &l.attrs, |cx| {\n-            run_lints!(cx, check_local, early_passes, l);\n+            run_lints!(cx, check_local, l);\n             ast_visit::walk_local(cx, l);\n         })\n     }\n \n     fn visit_block(&mut self, b: &'a ast::Block) {\n-        run_lints!(self, check_block, early_passes, b);\n+        run_lints!(self, check_block, b);\n         self.check_id(b.id);\n         ast_visit::walk_block(self, b);\n-        run_lints!(self, check_block_post, early_passes, b);\n+        run_lints!(self, check_block_post, b);\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n-        run_lints!(self, check_arm, early_passes, a);\n+        run_lints!(self, check_arm, a);\n         ast_visit::walk_arm(self, a);\n     }\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {\n-        run_lints!(self, check_expr_post, early_passes, e);\n+        run_lints!(self, check_expr_post, e);\n     }\n \n     fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n-        run_lints!(self, check_generic_param, early_passes, param);\n+        run_lints!(self, check_generic_param, param);\n         ast_visit::walk_generic_param(self, param);\n     }\n \n     fn visit_generics(&mut self, g: &'a ast::Generics) {\n-        run_lints!(self, check_generics, early_passes, g);\n+        run_lints!(self, check_generics, g);\n         ast_visit::walk_generics(self, g);\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n-        run_lints!(self, check_where_predicate, early_passes, p);\n+        run_lints!(self, check_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef, m: &'a ast::TraitBoundModifier) {\n-        run_lints!(self, check_poly_trait_ref, early_passes, t, m);\n+        run_lints!(self, check_poly_trait_ref, t, m);\n         ast_visit::walk_poly_trait_ref(self, t, m);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'a ast::TraitItem) {\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n-            run_lints!(cx, check_trait_item, early_passes, trait_item);\n+            run_lints!(cx, check_trait_item, trait_item);\n             ast_visit::walk_trait_item(cx, trait_item);\n-            run_lints!(cx, check_trait_item_post, early_passes, trait_item);\n+            run_lints!(cx, check_trait_item_post, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'a ast::ImplItem) {\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n-            run_lints!(cx, check_impl_item, early_passes, impl_item);\n+            run_lints!(cx, check_impl_item, impl_item);\n             ast_visit::walk_impl_item(cx, impl_item);\n-            run_lints!(cx, check_impl_item_post, early_passes, impl_item);\n+            run_lints!(cx, check_impl_item_post, impl_item);\n         });\n     }\n \n     fn visit_lifetime(&mut self, lt: &'a ast::Lifetime) {\n-        run_lints!(self, check_lifetime, early_passes, lt);\n+        run_lints!(self, check_lifetime, lt);\n         self.check_id(lt.id);\n     }\n \n     fn visit_path(&mut self, p: &'a ast::Path, id: ast::NodeId) {\n-        run_lints!(self, check_path, early_passes, p, id);\n+        run_lints!(self, check_path, p, id);\n         self.check_id(id);\n         ast_visit::walk_path(self, p);\n     }\n \n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n-        run_lints!(self, check_attribute, early_passes, attr);\n+        run_lints!(self, check_attribute, attr);\n     }\n \n-    fn visit_mac_def(&mut self, _mac: &'a ast::MacroDef, id: ast::NodeId) {\n+    fn visit_mac_def(&mut self, mac: &'a ast::MacroDef, id: ast::NodeId) {\n+        run_lints!(self, check_mac_def, mac, id);\n         self.check_id(id);\n     }\n+\n+    fn visit_mac(&mut self, mac: &'ast ast::Mac) {\n+        run_lints!(self, check_mac, mac);\n+    }\n }\n \n \n@@ -1056,48 +1037,77 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let krate = tcx.hir.krate();\n+    let passes = tcx.sess.lint_store.borrow_mut().late_passes.take();\n+\n+    let passes = {\n+        let mut cx = LateContext {\n+            tcx,\n+            tables: &ty::TypeckTables::empty(None),\n+            param_env: ty::ParamEnv::empty(),\n+            access_levels,\n+            lint_sess: LintSession {\n+                passes,\n+                lints: tcx.sess.lint_store.borrow(),\n+            },\n+            last_ast_node_with_lint_attrs: ast::CRATE_NODE_ID,\n+            generics: None,\n+        };\n \n-    let mut cx = LateContext {\n-        tcx,\n-        tables: &ty::TypeckTables::empty(None),\n-        param_env: ty::ParamEnv::empty(),\n-        access_levels,\n-        lint_sess: LintSession::new(&tcx.sess.lint_store),\n-        last_ast_node_with_lint_attrs: ast::CRATE_NODE_ID,\n-        generics: None,\n-    };\n-\n-    // Visit the whole crate.\n-    cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n-        // item), warn for it here.\n-        run_lints!(cx, check_crate, late_passes, krate);\n+        // Visit the whole crate.\n+        cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n+            // since the root module isn't visited as an item (because it isn't an\n+            // item), warn for it here.\n+            run_lints!(cx, check_crate, krate);\n \n-        hir_visit::walk_crate(cx, krate);\n+            hir_visit::walk_crate(cx, krate);\n \n-        run_lints!(cx, check_crate_post, late_passes, krate);\n-    });\n+            run_lints!(cx, check_crate_post, krate);\n+        });\n+        cx.lint_sess.passes\n+    };\n \n     // Put the lint store levels and passes back in the session.\n-    cx.lint_sess.restore(&tcx.sess.lint_store);\n+    tcx.sess.lint_store.borrow_mut().late_passes = passes;\n }\n \n-pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n-    let mut cx = EarlyContext::new(sess, krate);\n+pub fn check_ast_crate(\n+    sess: &Session,\n+    krate: &ast::Crate,\n+    pre_expansion: bool,\n+) {\n+    let (passes, buffered) = if pre_expansion {\n+        (\n+            sess.lint_store.borrow_mut().pre_expansion_passes.take(),\n+            LintBuffer::new(),\n+        )\n+    } else {\n+        (\n+            sess.lint_store.borrow_mut().early_passes.take(),\n+            sess.buffered_lints.borrow_mut().take().unwrap(),\n+        )\n+    };\n+    let (passes, buffered) = {\n+        let mut cx = EarlyContext::new(sess, krate, passes, buffered);\n \n-    // Visit the whole crate.\n-    cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n-        // item), warn for it here.\n-        run_lints!(cx, check_crate, early_passes, krate);\n+        // Visit the whole crate.\n+        cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n+            // since the root module isn't visited as an item (because it isn't an\n+            // item), warn for it here.\n+            run_lints!(cx, check_crate, krate);\n \n-        ast_visit::walk_crate(cx, krate);\n+            ast_visit::walk_crate(cx, krate);\n \n-        run_lints!(cx, check_crate_post, early_passes, krate);\n-    });\n+            run_lints!(cx, check_crate_post, krate);\n+        });\n+        (cx.lint_sess.passes, cx.buffered)\n+    };\n \n     // Put the lint store levels and passes back in the session.\n-    cx.lint_sess.restore(&sess.lint_store);\n+    if pre_expansion {\n+        sess.lint_store.borrow_mut().pre_expansion_passes = passes;\n+    } else {\n+        sess.lint_store.borrow_mut().early_passes = passes;\n+    }\n \n     // All of the buffered lints should have been emitted at this point.\n     // If not, that means that we somehow buffered a lint for a node id\n@@ -1109,7 +1119,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // unused_macro lint) anymore. So we only run this check\n     // when we're not in rustdoc mode. (see issue #47639)\n     if !sess.opts.actually_rustdoc {\n-        for (_id, lints) in cx.buffered.map {\n+        for (_id, lints) in buffered.map {\n             for early_lint in lints {\n                 sess.delay_span_bug(early_lint.span, \"failed to process buffered lint here\");\n             }"}, {"sha": "e3d35a7c105eab9b792a18c1c211401b9af675a2", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -327,6 +327,8 @@ pub trait EarlyLintPass: LintPass {\n     fn check_lifetime(&mut self, _: &EarlyContext, _: &ast::Lifetime) { }\n     fn check_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }\n     fn check_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }\n+    fn check_mac_def(&mut self, _: &EarlyContext, _: &ast::MacroDef, _id: ast::NodeId) { }\n+    fn check_mac(&mut self, _: &EarlyContext, _: &ast::Mac) { }\n \n     /// Called when entering a syntax node that can have lint attributes such\n     /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n@@ -341,6 +343,8 @@ pub type EarlyLintPassObject = Box<dyn EarlyLintPass + sync::Send + sync::Sync +\n pub type LateLintPassObject = Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + sync::Send\n                                                                            + sync::Sync + 'static>;\n \n+\n+\n /// Identifies a lint known to the compiler.\n #[derive(Clone, Copy, Debug)]\n pub struct LintId {"}, {"sha": "c016a131507e82222db56be16b348d165713d9b6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -922,6 +922,10 @@ where\n         return Err(CompileIncomplete::Stopped);\n     }\n \n+    time(sess, \"pre ast expansion lint checks\", || {\n+        lint::check_ast_crate(sess, &krate, true)\n+    });\n+\n     let mut resolver = Resolver::new(\n         sess,\n         cstore,\n@@ -1134,7 +1138,7 @@ where\n     });\n \n     time(sess, \"early lint checks\", || {\n-        lint::check_ast_crate(sess, &krate)\n+        lint::check_ast_crate(sess, &krate, false)\n     });\n \n     // Discard hygiene data, which isn't required after lowering to HIR."}, {"sha": "6b5dba536b46ea0d4cae5e871c0df0cc9c679ff7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -41,6 +41,7 @@ use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use std::collections::HashSet;\n \n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Spanned;\n@@ -1784,3 +1785,70 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestFunctions {\n         };\n     }\n }\n+\n+declare_lint! {\n+    pub ASYNC_IDENTS,\n+    Allow,\n+    \"detects `async` being used as an identifier\"\n+}\n+\n+/// Checks for uses of `async` as an identifier\n+#[derive(Clone)]\n+pub struct Async2018;\n+\n+impl LintPass for Async2018 {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ASYNC_IDENTS)\n+    }\n+}\n+\n+impl Async2018 {\n+    fn check_tokens(&mut self, cx: &EarlyContext, tokens: TokenStream) {\n+        for tt in tokens.into_trees() {\n+            match tt {\n+                TokenTree::Token(span, tok) => match tok.ident() {\n+                    // only report non-raw idents\n+                    Some((ident, false)) if ident.as_str() == \"async\" => {\n+                        self.report(cx, span.substitute_dummy(ident.span))\n+                    },\n+                    _ => {},\n+                }\n+                TokenTree::Delimited(_, ref delim) => {\n+                    self.check_tokens(cx, delim.tts.clone().into())\n+                },\n+            }\n+        }\n+    }\n+    fn report(&mut self, cx: &EarlyContext, span: Span) {\n+        // don't lint `r#async`\n+        if cx.sess.parse_sess.raw_identifier_spans.borrow().contains(&span) {\n+            return;\n+        }\n+        let mut lint = cx.struct_span_lint(\n+            ASYNC_IDENTS,\n+            span,\n+            \"`async` is a keyword in the 2018 edition\",\n+        );\n+        lint.span_suggestion_with_applicability(\n+            span,\n+            \"you can use a raw identifier to stay compatible\",\n+            \"r#async\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+        lint.emit()\n+    }\n+}\n+\n+impl EarlyLintPass for Async2018 {\n+    fn check_mac_def(&mut self, cx: &EarlyContext, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n+        self.check_tokens(cx, mac_def.stream());\n+    }\n+    fn check_mac(&mut self, cx: &EarlyContext, mac: &ast::Mac) {\n+        self.check_tokens(cx, mac.node.tts.clone().into());\n+    }\n+    fn check_ident(&mut self, cx: &EarlyContext, ident: ast::Ident) {\n+        if ident.as_str() == \"async\" {\n+            self.report(cx, ident.span);\n+        }\n+    }\n+}"}, {"sha": "e875df0d22beccaf724ca5b037de5c86a7758bde", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -83,6 +83,14 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n+    macro_rules! add_pre_expansion_builtin {\n+        ($sess:ident, $($name:ident),*,) => (\n+            {$(\n+                store.register_early_pass($sess, false, box $name);\n+                )*}\n+            )\n+    }\n+\n     macro_rules! add_early_builtin_with_new {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n@@ -97,6 +105,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n+    add_pre_expansion_builtin!(sess,\n+        Async2018,\n+    );\n+\n     add_early_builtin!(sess,\n                        UnusedParens,\n                        UnusedImportBraces,\n@@ -215,6 +227,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n             edition: Some(Edition::Edition2018),\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ASYNC_IDENTS),\n+            reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n+            edition: Some(Edition::Edition2018),\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\","}, {"sha": "56d4a86096f6819a2e7b35f37fa85a3af681c17c", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -1,3 +1,12 @@\n+error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n+  --> $DIR/lint-plugin-forbid-attrs.rs:20:9\n+   |\n+LL | #![forbid(test_lint)]\n+   |           --------- `forbid` level set here\n+...\n+LL | #[allow(test_lint)]\n+   |         ^^^^^^^^^ overruled by previous forbid\n+\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-attrs.rs:18:1\n    |\n@@ -10,15 +19,6 @@ note: lint level defined here\n LL | #![forbid(test_lint)]\n    |           ^^^^^^^^^\n \n-error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n-  --> $DIR/lint-plugin-forbid-attrs.rs:20:9\n-   |\n-LL | #![forbid(test_lint)]\n-   |           --------- `forbid` level set here\n-...\n-LL | #[allow(test_lint)]\n-   |         ^^^^^^^^^ overruled by previous forbid\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "8f80e000e3caf2485cb385794e2522d7f427994c", "filename": "src/test/ui/auxiliary/edition-kw-macro-2015.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -11,6 +11,7 @@\n // edition:2015\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_export]\n macro_rules! produces_async {"}, {"sha": "d42014766ec6862a6e86ae1e974c53579ce7461e", "filename": "src/test/ui/auxiliary/edition-kw-macro-2018.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -11,6 +11,7 @@\n // edition:2018\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_export]\n macro_rules! produces_async {"}, {"sha": "3b78ce80be20820e180f74c02912f9d9e76af733", "filename": "src/test/ui/edition-keywords-2015-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -13,6 +13,7 @@\n // compile-pass\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_use]\n extern crate edition_kw_macro_2015;"}, {"sha": "be22d8b9b01057f7ff10d81895b95ebde84028b0", "filename": "src/test/ui/edition-keywords-2018-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -13,6 +13,7 @@\n // compile-pass\n \n #![feature(raw_identifiers)]\n+#![allow(async_idents)]\n \n #[macro_use]\n extern crate edition_kw_macro_2015;"}, {"sha": "2dbe9831014666f81eb9eb0ca9331b136e523a8e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -1,17 +1,3 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n-   |\n-LL | #[macro_escape]\n-   | ^^^^^^^^^^^^^^^\n-\n-warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n-   |\n-LL |     mod inner { #![macro_escape] }\n-   |                 ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider an outer attribute, #[macro_use] mod ...\n-\n warning: unknown lint: `x5400`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:33\n    |\n@@ -186,6 +172,20 @@ warning: unknown lint: `x5100`\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n+warning: macro_escape is a deprecated synonym for macro_use\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n+   |\n+LL | #[macro_escape]\n+   | ^^^^^^^^^^^^^^^\n+\n+warning: macro_escape is a deprecated synonym for macro_use\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n+   |\n+LL |     mod inner { #![macro_escape] }\n+   |                 ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider an outer attribute, #[macro_use] mod ...\n+\n warning: `repr` attribute isn't configurable with a literal\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:17\n    |"}, {"sha": "228bf911253373276201bb1ea56240ef44b90135", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(raw_identifiers)]\n+#![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n+#![deny(async_idents)]\n+\n+// edition:2015\n+// run-rustfix\n+\n+fn r#async() {} //~ ERROR async\n+//~^ WARN hard error in the 2018 edition\n+\n+macro_rules! foo {\n+    ($foo:ident) => {};\n+    ($r#async:expr, r#async) => {};\n+    //~^ ERROR async\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+foo!(async);\n+\n+mod dont_lint_raw {\n+    fn r#async() {}\n+}\n+\n+mod async_trait {\n+    trait r#async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    struct MyStruct;\n+    impl r#async for MyStruct {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_static {\n+    static r#async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_const {\n+    const r#async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+struct Foo;\n+impl Foo { fn r#async() {} }\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+\n+fn main() {\n+    struct r#async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    let r#async: r#async = r#async {};\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn r#async() {})\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (r#async) => (1)\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}"}, {"sha": "cc400c2a92e0e44d8925e5f3e6ca3cd5683299cf", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(raw_identifiers)]\n+#![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n+#![deny(async_idents)]\n+\n+// edition:2015\n+// run-rustfix\n+\n+fn async() {} //~ ERROR async\n+//~^ WARN hard error in the 2018 edition\n+\n+macro_rules! foo {\n+    ($foo:ident) => {};\n+    ($async:expr, async) => {};\n+    //~^ ERROR async\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+foo!(async);\n+\n+mod dont_lint_raw {\n+    fn r#async() {}\n+}\n+\n+mod async_trait {\n+    trait async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    struct MyStruct;\n+    impl async for MyStruct {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_static {\n+    static async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+mod async_const {\n+    const async: u32 = 0;\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+struct Foo;\n+impl Foo { fn async() {} }\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+\n+fn main() {\n+    struct async {}\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    let async: async = async {};\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+    //~| ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn async() {})\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (async) => (1)\n+    //~^ ERROR async\n+    //~| WARN hard error in the 2018 edition\n+}"}, {"sha": "94fd3e70434cbbd47225b813f31f3e9a6ee98a17", "filename": "src/test/ui/rust-2018/async-ident.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ed235adc62e63b16bb4f715b143c37a5efa00d/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr?ref=12ed235adc62e63b16bb4f715b143c37a5efa00d", "patch": "@@ -0,0 +1,133 @@\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:18:4\n+   |\n+LL | fn async() {} //~ ERROR async\n+   |    ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+note: lint level defined here\n+  --> $DIR/async-ident.rs:13:9\n+   |\n+LL | #![deny(async_idents)]\n+   |         ^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:23:7\n+   |\n+LL |     ($async:expr, async) => {};\n+   |       ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:23:19\n+   |\n+LL |     ($async:expr, async) => {};\n+   |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:37:11\n+   |\n+LL |     trait async {}\n+   |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:41:10\n+   |\n+LL |     impl async for MyStruct {}\n+   |          ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:47:12\n+   |\n+LL |     static async: u32 = 0;\n+   |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:53:11\n+   |\n+LL |     const async: u32 = 0;\n+   |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:59:15\n+   |\n+LL | impl Foo { fn async() {} }\n+   |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:64:12\n+   |\n+LL |     struct async {}\n+   |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:67:9\n+   |\n+LL |     let async: async = async {};\n+   |         ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:67:16\n+   |\n+LL |     let async: async = async {};\n+   |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:67:24\n+   |\n+LL |     let async: async = async {};\n+   |                        ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:78:19\n+   |\n+LL |     () => (pub fn async() {})\n+   |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:85:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: aborting due to 14 previous errors\n+"}]}