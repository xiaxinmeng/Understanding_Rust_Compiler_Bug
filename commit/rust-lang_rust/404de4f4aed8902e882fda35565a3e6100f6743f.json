{"sha": "404de4f4aed8902e882fda35565a3e6100f6743f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNGRlNGY0YWVkODkwMmU4ODJmZGEzNTU2NWEzZTYxMDBmNjc0M2Y=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-18T23:50:51Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-20T00:37:37Z"}, "message": "iterator: impl DoubleEndedIterator for adaptors", "tree": {"sha": "de24bc27805bc3fd20bb5887b48537149f4b3b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de24bc27805bc3fd20bb5887b48537149f4b3b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/404de4f4aed8902e882fda35565a3e6100f6743f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/404de4f4aed8902e882fda35565a3e6100f6743f", "html_url": "https://github.com/rust-lang/rust/commit/404de4f4aed8902e882fda35565a3e6100f6743f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/404de4f4aed8902e882fda35565a3e6100f6743f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d04aa78e5e8a7e3c48141028137c1a69e7e32ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d04aa78e5e8a7e3c48141028137c1a69e7e32ee", "html_url": "https://github.com/rust-lang/rust/commit/0d04aa78e5e8a7e3c48141028137c1a69e7e32ee"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "c8cde69197b237984762548dff2abf915f2b1b59", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/404de4f4aed8902e882fda35565a3e6100f6743f/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/404de4f4aed8902e882fda35565a3e6100f6743f/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=404de4f4aed8902e882fda35565a3e6100f6743f", "patch": "@@ -773,6 +773,17 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n     }\n }\n \n+impl<A, T: DoubleEndedIterator<A>, U: DoubleEndedIterator<A>> DoubleEndedIterator<A>\n+for ChainIterator<A, T, U> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> {\n+        match self.b.next_back() {\n+            Some(x) => Some(x),\n+            None => self.a.next_back()\n+        }\n+    }\n+}\n+\n /// An iterator which iterates two other iterators simultaneously\n // FIXME #6967: Dummy A & B parameters to get around type inference bug\n pub struct ZipIterator<A, T, B, U> {\n@@ -828,6 +839,17 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n     }\n }\n \n+impl<'self, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B>\n+for MapIterator<'self, A, B, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<B> {\n+        match self.iter.next_back() {\n+            Some(a) => Some((self.f)(a)),\n+            _ => None\n+        }\n+    }\n+}\n+\n /// An iterator which filters the elements of `iter` with `predicate`\n pub struct FilterIterator<'self, A, T> {\n     priv iter: T,\n@@ -854,6 +876,24 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n }\n \n+impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for FilterIterator<'self, A, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> {\n+        loop {\n+            match self.iter.next_back() {\n+                None => return None,\n+                Some(x) => {\n+                    if (self.predicate)(&x) {\n+                        return Some(x);\n+                    } else {\n+                        loop\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// An iterator which uses `f` to both filter and map elements from `iter`\n pub struct FilterMapIterator<'self, A, B, T> {\n     priv iter: T,\n@@ -879,6 +919,24 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n     }\n }\n \n+impl<'self, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B>\n+for FilterMapIterator<'self, A, B, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<B> {\n+        loop {\n+            match self.iter.next_back() {\n+                None => return None,\n+                Some(x) => {\n+                    match (self.f)(x) {\n+                        Some(y) => return Some(y),\n+                        None => ()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// An iterator which yields the current count and the element during iteration\n // FIXME #6967: Dummy A parameter to get around type inference bug\n pub struct EnumerateIterator<A, T> {\n@@ -1135,6 +1193,20 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for PeekIterator<'self, A, T> {\n     }\n }\n \n+impl<'self, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for PeekIterator<'self, A, T> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> {\n+        let next = self.iter.next_back();\n+\n+        match next {\n+            Some(ref a) => (self.f)(a),\n+            None => ()\n+        }\n+\n+        next\n+    }\n+}\n+\n /// An iterator which just modifies the contained state throughout iteration.\n pub struct UnfoldrIterator<'self, A, St> {\n     priv f: &'self fn(&mut St) -> Option<A>,\n@@ -1526,4 +1598,53 @@ mod tests {\n         it.next();\n         assert_eq!(it.invert().transform(|&x| x).collect::<~[int]>(), ~[16, 14, 12, 10, 8, 6]);\n     }\n+\n+    #[test]\n+    fn test_double_ended_map() {\n+        let xs = [1, 2, 3, 4, 5, 6];\n+        let mut it = xs.iter().transform(|&x| x * -1);\n+        assert_eq!(it.next(), Some(-1));\n+        assert_eq!(it.next(), Some(-2));\n+        assert_eq!(it.next_back(), Some(-6));\n+        assert_eq!(it.next_back(), Some(-5));\n+        assert_eq!(it.next(), Some(-3));\n+        assert_eq!(it.next_back(), Some(-4));\n+        assert_eq!(it.next(), None);\n+    }\n+\n+    #[test]\n+    fn test_double_ended_filter() {\n+        let xs = [1, 2, 3, 4, 5, 6];\n+        let mut it = xs.iter().filter(|&x| *x & 1 == 0);\n+        assert_eq!(it.next_back().unwrap(), &6);\n+        assert_eq!(it.next_back().unwrap(), &4);\n+        assert_eq!(it.next().unwrap(), &2);\n+        assert_eq!(it.next_back(), None);\n+    }\n+\n+    #[test]\n+    fn test_double_ended_filter_map() {\n+        let xs = [1, 2, 3, 4, 5, 6];\n+        let mut it = xs.iter().filter_map(|&x| if x & 1 == 0 { Some(x * 2) } else { None });\n+        assert_eq!(it.next_back().unwrap(), 12);\n+        assert_eq!(it.next_back().unwrap(), 8);\n+        assert_eq!(it.next().unwrap(), 4);\n+        assert_eq!(it.next_back(), None);\n+    }\n+\n+    #[test]\n+    fn test_double_ended_chain() {\n+        let xs = [1, 2, 3, 4, 5];\n+        let ys = ~[7, 9, 11];\n+        let mut it = xs.iter().chain_(ys.iter()).invert();\n+        assert_eq!(it.next().unwrap(), &11)\n+        assert_eq!(it.next().unwrap(), &9)\n+        assert_eq!(it.next_back().unwrap(), &1)\n+        assert_eq!(it.next_back().unwrap(), &2)\n+        assert_eq!(it.next_back().unwrap(), &3)\n+        assert_eq!(it.next_back().unwrap(), &4)\n+        assert_eq!(it.next_back().unwrap(), &5)\n+        assert_eq!(it.next_back().unwrap(), &7)\n+        assert_eq!(it.next_back(), None)\n+    }\n }"}]}