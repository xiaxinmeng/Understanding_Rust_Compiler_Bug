{"sha": "21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYWFhN2ZiMTM3OTNlN2E0Y2YwYzYyNjUzMDM1ZjZmMDlhMjBkOWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T00:07:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-07T19:08:03Z"}, "message": "rt: Eliminate the dependency on rust_kernel from rust_rng", "tree": {"sha": "861055133ad848641c4027fc0f53d3ee07057845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861055133ad848641c4027fc0f53d3ee07057845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "html_url": "https://github.com/rust-lang/rust/commit/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cd51c416b8cf1a9d89089c99b8a1e2ac2f7255a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd51c416b8cf1a9d89089c99b8a1e2ac2f7255a", "html_url": "https://github.com/rust-lang/rust/commit/4cd51c416b8cf1a9d89089c99b8a1e2ac2f7255a"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "885b40c0a50623ae1533d4cd1b6ec553a7844d23", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "patch": "@@ -88,8 +88,7 @@ rand_seed_size() {\n \n extern \"C\" CDECL void\n rand_gen_seed(uint8_t* dest, size_t size) {\n-    rust_task *task = rust_get_current_task();\n-    rng_gen_seed(task->kernel, dest, size);\n+    rng_gen_seed(dest, size);\n }\n \n extern \"C\" CDECL void *\n@@ -101,14 +100,14 @@ rand_new_seeded(uint8_t* seed, size_t seed_size) {\n         task->fail();\n         return NULL;\n     }\n-    rng_init(task->kernel, rng, seed, seed_size);\n+    char *env_seed = task->kernel->env->rust_seed;\n+    rng_init(rng, env_seed, seed, seed_size);\n     return rng;\n }\n \n extern \"C\" CDECL uint32_t\n rand_next(rust_rng *rng) {\n-    rust_task *task = rust_get_current_task();\n-    return rng_gen_u32(task->kernel, rng);\n+    return rng_gen_u32(rng);\n }\n \n extern \"C\" CDECL void"}, {"sha": "27015891feebd74ab7932347125ac31fed9fdec6", "filename": "src/rt/rust_rng.cpp", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_rng.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_rng.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.cpp?ref=21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "patch": "@@ -41,7 +41,7 @@ rng_seed_size() {\n // Initialization helpers for ISAAC RNG\n \n void\n-rng_gen_seed(rust_kernel* kernel, uint8_t* dest, size_t size) {\n+rng_gen_seed(uint8_t* dest, size_t size) {\n #ifdef __WIN32__\n     HCRYPTPROV hProv;\n     win32_require\n@@ -54,31 +54,37 @@ rng_gen_seed(rust_kernel* kernel, uint8_t* dest, size_t size) {\n         (_T(\"CryptReleaseContext\"), CryptReleaseContext(hProv, 0));\n #else\n     int fd = open(\"/dev/urandom\", O_RDONLY);\n-    if (fd == -1)\n-        kernel->fatal(\"error opening /dev/urandom: %s\", strerror(errno));\n+    if (fd == -1) {\n+        fprintf(stderr, \"error opening /dev/urandom: %s\", strerror(errno));\n+        abort();\n+    }\n     size_t amount = 0;\n     do {\n         ssize_t ret = read(fd, dest+amount, size-amount);\n-        if (ret < 0)\n-            kernel->fatal(\"error reading /dev/urandom: %s\", strerror(errno));\n-        else if (ret == 0)\n-            kernel->fatal(\"somehow hit eof reading from /dev/urandom\");\n+        if (ret < 0) {\n+            fprintf(stderr, \"error reading /dev/urandom: %s\", strerror(errno));\n+            abort();\n+        }\n+        else if (ret == 0) {\n+            fprintf(stderr, \"somehow hit eof reading from /dev/urandom\");\n+            abort();\n+        }\n         amount += (size_t)ret;\n     } while (amount < size);\n     int ret = close(fd);\n-    // FIXME #3697: Why does this fail sometimes?\n-    if (ret != 0)\n-        kernel->log(log_warn, \"error closing /dev/urandom: %s\",\n-            strerror(errno));\n+    if (ret != 0) {\n+        fprintf(stderr, \"error closing /dev/urandom: %s\", strerror(errno));\n+        // FIXME #3697: Why does this fail sometimes?\n+        // abort();\n+    }\n #endif\n }\n \n static void\n-isaac_init(rust_kernel *kernel, randctx *rctx,\n+isaac_init(randctx *rctx, char *env_seed,\n            uint8_t* user_seed, size_t seed_len) {\n     memset(rctx, 0, sizeof(randctx));\n \n-    char *env_seed = kernel->env->rust_seed;\n     if (user_seed != NULL) {\n         // ignore bytes after the required length\n         if (seed_len > sizeof(rctx->randrsl)) {\n@@ -92,40 +98,38 @@ isaac_init(rust_kernel *kernel, randctx *rctx,\n             seed = (seed + 0x7ed55d16) + (seed << 12);\n         }\n     } else {\n-        rng_gen_seed(kernel,\n-                     (uint8_t*)&rctx->randrsl,\n+        rng_gen_seed((uint8_t*)&rctx->randrsl,\n                      sizeof(rctx->randrsl));\n     }\n \n     randinit(rctx, 1);\n }\n \n void\n-rng_init(rust_kernel* kernel, rust_rng* rng,\n+rng_init(rust_rng* rng, char* env_seed,\n          uint8_t *user_seed, size_t seed_len) {\n-    isaac_init(kernel, &rng->rctx, user_seed, seed_len);\n-    rng->reseedable = !user_seed && !kernel->env->rust_seed;\n+    isaac_init(&rng->rctx, env_seed, user_seed, seed_len);\n+    rng->reseedable = !user_seed && !env_seed;\n }\n \n static void\n-rng_maybe_reseed(rust_kernel* kernel, rust_rng* rng) {\n+rng_maybe_reseed(rust_rng* rng) {\n     // If this RNG has generated more than 32KB of random data and was not\n     // seeded by the user or RUST_SEED, then we should reseed now.\n     const size_t RESEED_THRESHOLD = 32 * 1024;\n     size_t bytes_generated = rng->rctx.randc * sizeof(ub4);\n     if (bytes_generated < RESEED_THRESHOLD || !rng->reseedable) {\n         return;\n     }\n-    rng_gen_seed(kernel,\n-                 (uint8_t*)rng->rctx.randrsl,\n+    rng_gen_seed((uint8_t*)rng->rctx.randrsl,\n                  sizeof(rng->rctx.randrsl));\n     randinit(&rng->rctx, 1);\n }\n \n uint32_t\n-rng_gen_u32(rust_kernel* kernel, rust_rng* rng) {\n+rng_gen_u32(rust_rng* rng) {\n     uint32_t x = isaac_rand(&rng->rctx);\n-    rng_maybe_reseed(kernel, rng);\n+    rng_maybe_reseed(rng);\n     return x;\n }\n "}, {"sha": "a13b5acd0eff220d0ba06e3ebfd94149586ae6d7", "filename": "src/rt/rust_rng.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_rng.h", "raw_url": "https://github.com/rust-lang/rust/raw/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_rng.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.h?ref=21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "patch": "@@ -23,11 +23,10 @@ struct rust_rng {\n };\n \n size_t rng_seed_size();\n-void rng_gen_seed(rust_kernel* kernel,\n-                  uint8_t* dest, size_t size);\n-void rng_init(rust_kernel *kernel, rust_rng *rng,\n+void rng_gen_seed(uint8_t* dest, size_t size);\n+void rng_init(rust_rng *rng, char *env_seed,\n               uint8_t *user_seed, size_t seed_len);\n-uint32_t rng_gen_u32(rust_kernel *kernel, rust_rng *rng);\n+uint32_t rng_gen_u32(rust_rng *rng);\n \n //\n // Local Variables:"}, {"sha": "1f718df32aac9bebf5cbc3d71f4742d4441402f6", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21aaa7fb13793e7a4cf0c62653035f6f09a20d9e/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=21aaa7fb13793e7a4cf0c62653035f6f09a20d9e", "patch": "@@ -43,7 +43,7 @@ rust_sched_loop::rust_sched_loop(rust_scheduler *sched, int id, bool killed) :\n     name(\"main\")\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n-    rng_init(kernel, &rng, NULL, 0);\n+    rng_init(&rng, kernel->env->rust_seed, NULL, 0);\n \n     if (!tls_initialized)\n         init_tls();\n@@ -154,7 +154,7 @@ rust_sched_loop::schedule_task() {\n     lock.must_have_lock();\n     size_t tasks = running_tasks.length();\n     if (tasks > 0) {\n-        size_t i = (tasks > 1) ? (rng_gen_u32(kernel, &rng) % tasks) : 0;\n+        size_t i = (tasks > 1) ? (rng_gen_u32(&rng) % tasks) : 0;\n         return running_tasks[i];\n     }\n     return NULL;"}]}