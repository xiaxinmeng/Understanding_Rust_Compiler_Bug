{"sha": "740196987edf720ee03b7db367106a74fa446356", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDE5Njk4N2VkZjcyMGVlMDNiN2RiMzY3MTA2YTc0ZmE0NDYzNTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T00:13:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:27Z"}, "message": "Rename std::str::unsafe_from_bytes_ivec to unsafe_from_bytes", "tree": {"sha": "406a71f7192e1505b667b9e730402d7b75d331f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/406a71f7192e1505b667b9e730402d7b75d331f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/740196987edf720ee03b7db367106a74fa446356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/740196987edf720ee03b7db367106a74fa446356", "html_url": "https://github.com/rust-lang/rust/commit/740196987edf720ee03b7db367106a74fa446356", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/740196987edf720ee03b7db367106a74fa446356/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6050e1d4f6c2fdd412eabbdff864d942bce6e8d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6050e1d4f6c2fdd412eabbdff864d942bce6e8d7", "html_url": "https://github.com/rust-lang/rust/commit/6050e1d4f6c2fdd412eabbdff864d942bce6e8d7"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "03c93cbb208da1ddbc3a3928f4296e1b3fe6af76", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -105,7 +105,7 @@ fn parse_input_src(sess: session::session, cfg: &ast::crate_cfg,\n     } else {\n         ioivec::stdin()\n     }.read_whole_stream();\n-    let src = str::unsafe_from_bytes_ivec(srcbytes);\n+    let src = str::unsafe_from_bytes(srcbytes);\n     let crate = parser::parse_crate_from_source_str(infile, src, cfg,\n                                                     sess.get_parse_sess());\n     ret {crate: crate, src: src};"}, {"sha": "f39f9dc197f7b7463884f9eb8c6db6b5721dab06", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -85,7 +85,7 @@ fn item_family(item: &ebmlivec::doc) -> u8 {\n \n fn item_symbol(item: &ebmlivec::doc) -> str {\n     let sym = ebmlivec::get_doc(item, tag_items_data_item_symbol);\n-    ret str::unsafe_from_bytes_ivec(ebmlivec::doc_data(sym));\n+    ret str::unsafe_from_bytes(ebmlivec::doc_data(sym));\n }\n \n fn variant_tag_id(d: &ebmlivec::doc) -> ast::def_id {\n@@ -149,7 +149,7 @@ fn tag_variant_ids(item: &ebmlivec::doc, this_cnum: ast::crate_num) ->\n // definition the path refers to.\n fn resolve_path(path: &[ast::ident], data: @[u8]) -> [ast::def_id] {\n     fn eq_item(data: &[u8], s: str) -> bool {\n-        ret str::eq(str::unsafe_from_bytes_ivec(data), s);\n+        ret str::eq(str::unsafe_from_bytes(data), s);\n     }\n     let s = str::connect_ivec(path, \"::\");\n     let md = ebmlivec::new_doc(data);\n@@ -270,7 +270,7 @@ fn read_path(d: &ebmlivec::doc) -> {path: str, pos: uint} {\n     let desc = ebmlivec::doc_data(d);\n     let pos = ebmlivec::be_uint_from_bytes(@desc, 0u, 4u);\n     let pathbytes = ivec::slice[u8](desc, 4u, ivec::len[u8](desc));\n-    let path = str::unsafe_from_bytes_ivec(pathbytes);\n+    let path = str::unsafe_from_bytes(pathbytes);\n     ret {path: path, pos: pos};\n }\n \n@@ -299,23 +299,23 @@ fn get_meta_items(md: &ebmlivec::doc) -> [@ast::meta_item] {\n     for each meta_item_doc: ebmlivec::doc  in\n              ebmlivec::tagged_docs(md, tag_meta_item_word) {\n         let nd = ebmlivec::get_doc(meta_item_doc, tag_meta_item_name);\n-        let n = str::unsafe_from_bytes_ivec(ebmlivec::doc_data(nd));\n+        let n = str::unsafe_from_bytes(ebmlivec::doc_data(nd));\n         items += ~[attr::mk_word_item(n)];\n     }\n     for each meta_item_doc: ebmlivec::doc  in\n              ebmlivec::tagged_docs(md, tag_meta_item_name_value) {\n         let nd = ebmlivec::get_doc(meta_item_doc, tag_meta_item_name);\n         let vd = ebmlivec::get_doc(meta_item_doc, tag_meta_item_value);\n-        let n = str::unsafe_from_bytes_ivec(ebmlivec::doc_data(nd));\n-        let v = str::unsafe_from_bytes_ivec(ebmlivec::doc_data(vd));\n+        let n = str::unsafe_from_bytes(ebmlivec::doc_data(nd));\n+        let v = str::unsafe_from_bytes(ebmlivec::doc_data(vd));\n         // FIXME (#611): Should be able to decode meta_name_value variants,\n         // but currently they can't be encoded\n         items += ~[attr::mk_name_value_item_str(n, v)];\n     }\n     for each meta_item_doc: ebmlivec::doc  in\n              ebmlivec::tagged_docs(md, tag_meta_item_list) {\n         let nd = ebmlivec::get_doc(meta_item_doc, tag_meta_item_name);\n-        let n = str::unsafe_from_bytes_ivec(ebmlivec::doc_data(nd));\n+        let n = str::unsafe_from_bytes(ebmlivec::doc_data(nd));\n         let subitems = get_meta_items(meta_item_doc);\n         items += ~[attr::mk_list_item(n, subitems)];\n     }\n@@ -372,7 +372,7 @@ fn get_crate_deps(data: @[u8]) -> [crate_dep] {\n     let crate_num = 1;\n     for each depdoc: ebmlivec::doc  in\n              ebmlivec::tagged_docs(depsdoc, tag_crate_dep) {\n-        let depname = str::unsafe_from_bytes_ivec(ebmlivec::doc_data(depdoc));\n+        let depname = str::unsafe_from_bytes(ebmlivec::doc_data(depdoc));\n         deps += ~[{cnum: crate_num, ident: depname}];\n         crate_num += 1;\n     }"}, {"sha": "c8a776bf8795d34f82b86650fb1c77b7e16cf263", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -312,7 +312,7 @@ fn sanitize(s: &str) -> str {\n                            c != ' ' as u8 && c != '\\t' as u8 && c != ';' as u8\n                        {\n                         let v = ~[c];\n-                        result += str::unsafe_from_bytes_ivec(v);\n+                        result += str::unsafe_from_bytes(v);\n                     }\n                 }\n             }"}, {"sha": "15dabbb8d49750cd43569ef4a40b2ace8996ba2a", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -177,11 +177,11 @@ fn scan_exponent(rdr: &reader) -> option::t[str] {\n     let c = rdr.curr();\n     let rslt = \"\";\n     if c == 'e' || c == 'E' {\n-        rslt += str::unsafe_from_bytes_ivec(~[c as u8]);\n+        rslt += str::unsafe_from_bytes(~[c as u8]);\n         rdr.bump();\n         c = rdr.curr();\n         if c == '-' || c == '+' {\n-            rslt += str::unsafe_from_bytes_ivec(~[c as u8]);\n+            rslt += str::unsafe_from_bytes(~[c as u8]);\n             rdr.bump();\n         }\n         let exponent = scan_dec_digits(rdr);\n@@ -195,7 +195,7 @@ fn scan_dec_digits(rdr: &reader) -> str {\n     let c = rdr.curr();\n     let rslt: str = \"\";\n     while is_dec_digit(c) || c == '_' {\n-        if c != '_' { rslt += str::unsafe_from_bytes_ivec(~[c as u8]); }\n+        if c != '_' { rslt += str::unsafe_from_bytes(~[c as u8]); }\n         rdr.bump();\n         c = rdr.curr();\n     }\n@@ -711,7 +711,7 @@ type lit = {lit: str, pos: uint};\n fn gather_comments_and_literals(cm: &codemap::codemap, path: str,\n                                 srdr: ioivec::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n-    let src = str::unsafe_from_bytes_ivec(srdr.read_whole_stream());\n+    let src = str::unsafe_from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk[str](str::hash, str::eq);\n     let rdr = new_reader(cm, src, codemap::new_filemap(path, 0u, 0u), itr);\n     let comments: [cmnt] = ~[];"}, {"sha": "5c8f9c7aceda4208667b745ac15f025b60ecdee9", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -1386,7 +1386,7 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n       }\n       ast::lit_char(ch) {\n         word(s.s, \"'\" + escape_str(\n-            str::unsafe_from_bytes_ivec(~[ch as u8]), '\\'') + \"'\");\n+            str::unsafe_from_bytes(~[ch as u8]), '\\'') + \"'\");\n       }\n       ast::lit_int(val) { word(s.s, int::str(val)); }\n       ast::lit_uint(val) { word(s.s, uint::str(val) + \"u\"); }"}, {"sha": "cf63cacb86da983407625fa90f362c95b07c95e2", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -132,7 +132,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n       }\n       ty_var(v) { s += \"<T\" + int::str(v) + \">\"; }\n       ty_param(id,_) {\n-        s += \"'\" + str::unsafe_from_bytes_ivec(~[('a' as u8) + (id as u8)]);\n+        s += \"'\" + str::unsafe_from_bytes(~[('a' as u8) + (id as u8)]);\n       }\n       _ { s += ty_to_short_str(cx, typ); }\n     }"}, {"sha": "8d191fb9cc3b525ca432cbd75025e945a64c91ad", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -358,7 +358,7 @@ mod rt {\n     fn str_init_elt(c: char, n_elts: uint) -> str {\n         let svec = ivec::from_vec(vec::init_elt[u8](c as u8, n_elts));\n \n-        ret str::unsafe_from_bytes_ivec((svec));\n+        ret str::unsafe_from_bytes((svec));\n     }\n     tag pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n     fn pad(cv: &conv, s: str, mode: pad_mode) -> str {\n@@ -407,7 +407,7 @@ mod rt {\n         if signed && zero_padding && str::byte_len(s) > 0u {\n             let head = s.(0);\n             if head == '+' as u8 || head == '-' as u8 || head == ' ' as u8 {\n-                let headstr = str::unsafe_from_bytes_ivec(~[head]);\n+                let headstr = str::unsafe_from_bytes(~[head]);\n                 let bytelen = str::byte_len(s);\n                 let numpart = str::substr(s, 1u, bytelen - 1u);\n                 ret headstr + padstr + numpart;"}, {"sha": "645cc5b55f35f3bf823386d7ecc5c6e54eb080aa", "filename": "src/lib/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -120,7 +120,7 @@ obj new_reader(rdr: buf_reader) {\n                 go_on = false;\n             } else { vec::push[u8](buf, ch as u8); }\n         }\n-        ret str::unsafe_from_bytes_ivec(ivec::from_vec(buf));\n+        ret str::unsafe_from_bytes(ivec::from_vec(buf));\n     }\n     fn read_c_str() -> str {\n         let buf: vec[u8] = [];\n@@ -131,7 +131,7 @@ obj new_reader(rdr: buf_reader) {\n                 go_on = false;\n             } else { vec::push[u8](buf, ch as u8); }\n         }\n-        ret str::unsafe_from_bytes_ivec(ivec::from_vec(buf));\n+        ret str::unsafe_from_bytes(ivec::from_vec(buf));\n     }\n \n     // FIXME deal with eof?\n@@ -441,7 +441,7 @@ fn string_writer() -> str_writer {\n     obj str_writer_wrap(wr: writer, buf: mutable_byte_buf) {\n         fn get_writer() -> writer { ret wr; }\n         fn get_str() -> str {\n-            ret str::unsafe_from_bytes_ivec(ivec::from_vec(buf.buf));\n+            ret str::unsafe_from_bytes(ivec::from_vec(buf.buf));\n         }\n     }\n     ret str_writer_wrap(new_writer(byte_buf_writer(buf)), buf);"}, {"sha": "382e93479e1f8a41ad3e5b172c3b6ccccb3a079a", "filename": "src/lib/ioivec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fioivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fioivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fioivec.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -121,7 +121,7 @@ obj new_reader(rdr: buf_reader) {\n                 go_on = false;\n             } else { buf += ~[ch as u8]; }\n         }\n-        ret str::unsafe_from_bytes_ivec(buf);\n+        ret str::unsafe_from_bytes(buf);\n     }\n     fn read_c_str() -> str {\n         let buf: [u8] = ~[];\n@@ -130,7 +130,7 @@ obj new_reader(rdr: buf_reader) {\n             let ch = rdr.read_byte();\n             if ch < 1 { go_on = false; } else { buf += ~[ch as u8]; }\n         }\n-        ret str::unsafe_from_bytes_ivec(buf);\n+        ret str::unsafe_from_bytes(buf);\n     }\n \n     // FIXME deal with eof?\n@@ -435,7 +435,7 @@ fn string_writer() -> str_writer {\n     let buf: mutable_byte_buf = @{mutable buf: b, mutable pos: 0u};\n     obj str_writer_wrap(wr: writer, buf: mutable_byte_buf) {\n         fn get_writer() -> writer { ret wr; }\n-        fn get_str() -> str { ret str::unsafe_from_bytes_ivec(buf.buf); }\n+        fn get_str() -> str { ret str::unsafe_from_bytes(buf.buf); }\n     }\n     ret str_writer_wrap(new_writer(byte_buf_writer(buf)), buf);\n }\n@@ -456,7 +456,7 @@ fn seek_in_buf(offset: int, pos: uint, len: uint, whence: seek_style) ->\n }\n \n fn read_whole_file_str(file: &str) -> str {\n-    str::unsafe_from_bytes_ivec(read_whole_file(file))\n+    str::unsafe_from_bytes(read_whole_file(file))\n }\n \n fn read_whole_file(file: &str) -> [u8] {"}, {"sha": "b1cbcc2423437dda88d632729830ed74b421f8a7", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -104,7 +104,7 @@ fn read_all(rd: &io::reader) -> str {\n     let buf = \"\";\n     while !rd.eof() {\n         let bytes = ivec::from_vec(rd.read_bytes(4096u));\n-        buf += str::unsafe_from_bytes_ivec(bytes);\n+        buf += str::unsafe_from_bytes(bytes);\n     }\n     ret buf;\n }"}, {"sha": "2f695b794be321c67e35e79a829d77d30f8bc21a", "filename": "src/lib/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -48,7 +48,7 @@ export connect;\n export connect_ivec;\n export to_upper;\n export safe_slice;\n-export unsafe_from_bytes_ivec;\n+export unsafe_from_bytes;\n export is_empty;\n export is_not_empty;\n export is_whitespace;\n@@ -192,7 +192,7 @@ fn bytes(s: str) -> [u8] {\n     ret ivec::unsafe::from_buf(ptr, byte_len(s));\n }\n \n-fn unsafe_from_bytes_ivec(v: &[mutable? u8]) -> str {\n+fn unsafe_from_bytes(v: &[mutable? u8]) -> str {\n     ret rustrt::str_from_ivec(v);\n }\n "}, {"sha": "ac01d5bf0f5671c4f28fed119d3f3942a8222bf4", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -191,7 +191,7 @@ mod map_reduce {\n               }\n               find_reducer(ki, cc) {\n                 let c;\n-                let k = str::unsafe_from_bytes_ivec(ki);\n+                let k = str::unsafe_from_bytes(ki);\n                 // log_err \"finding reducer for \" + k;\n                 alt reducers.find(k) {\n                   some(_c) {"}, {"sha": "71ca937273c454ddca64dce4b37f401157bc7b76", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -88,7 +88,7 @@ fn readclose(fd: int) -> str {\n     let buf = \"\";\n     while !reader.eof() {\n         let bytes = ivec::from_vec(reader.read_bytes(4096u));\n-        buf += str::unsafe_from_bytes_ivec(bytes);\n+        buf += str::unsafe_from_bytes(bytes);\n     }\n     os::libc::fclose(file);\n     ret buf;"}, {"sha": "47e29d695794ab74252a74bd3bd822623252ff21", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -60,7 +60,7 @@ fn test_pipes() {\n         let buf = \"\";\n         while !reader.eof() {\n             let bytes = ivec::from_vec(reader.read_bytes(4096u));\n-            buf += str::unsafe_from_bytes_ivec(bytes);\n+            buf += str::unsafe_from_bytes(bytes);\n         }\n         os::libc::fclose(file);\n         ret buf;"}, {"sha": "7e230f0c79676c3953fc5bef0e4926096a74bc5f", "filename": "src/test/stdtest/vec_str_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/740196987edf720ee03b7db367106a74fa446356/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs?ref=740196987edf720ee03b7db367106a74fa446356", "patch": "@@ -10,7 +10,7 @@ fn test_simple() {\n     let s1: str = \"All mimsy were the borogoves\";\n \n     let v: [u8] = str::bytes(s1);\n-    let s2: str = str::unsafe_from_bytes_ivec(v);\n+    let s2: str = str::unsafe_from_bytes(v);\n     let i: uint = 0u;\n     let n1: uint = str::byte_len(s1);\n     let n2: uint = ivec::len[u8](v);"}]}