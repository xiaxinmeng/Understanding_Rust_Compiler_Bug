{"sha": "b1277d04db0dc8009037e872a1be7cdc2bd74a43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMjc3ZDA0ZGIwZGM4MDA5MDM3ZTg3MmExYmU3Y2RjMmJkNzRhNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-08T13:49:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-08T13:49:17Z"}, "message": "Auto merge of #78874 - m-ou-se:rollup-3jp1ijj, r=m-ou-se\n\nRollup of 19 pull requests\n\nSuccessful merges:\n\n - #76097 (Stabilize hint::spin_loop)\n - #76227 (Stabilize `Poll::is_ready` and `is_pending` as const)\n - #78065 (make concurrency helper more pleasant to read)\n - #78570 (Remove FIXME comment in print_type_sizes ui test suite)\n - #78572 (Use SOCK_CLOEXEC and accept4() on more platforms.)\n - #78658 (Add a tool to run `x.py` from any subdirectory)\n - #78706 (Fix run-make tests running when LLVM is disabled)\n - #78728 (Constantify `UnsafeCell::into_inner` and related)\n - #78775 (Bump Rustfmt and RLS)\n - #78788 (Correct unsigned equivalent of isize to be usize)\n - #78811 (Make some std::io functions `const`)\n - #78828 (use single char patterns for split() (clippy::single_char_pattern))\n - #78841 (Small cleanup in `TypeFoldable` derive macro)\n - #78842 (Honor the rustfmt setting in config.toml)\n - #78843 (Less verbose debug logging from inlining integrator)\n - #78852 (Convert a bunch of intra-doc links)\n - #78860 (rustc_resolve: Use `#![feature(format_args_capture)]`)\n - #78861 (typo and formatting)\n - #78865 (Don't fire `CONST_ITEM_MUTATION` lint when borrowing a deref)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dcd3247a160a4e05fb4d629a5b02d00966124ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcd3247a160a4e05fb4d629a5b02d00966124ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1277d04db0dc8009037e872a1be7cdc2bd74a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1277d04db0dc8009037e872a1be7cdc2bd74a43", "html_url": "https://github.com/rust-lang/rust/commit/b1277d04db0dc8009037e872a1be7cdc2bd74a43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1277d04db0dc8009037e872a1be7cdc2bd74a43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a0997ef9c0bfad0ba362741afa601d8fb285b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a0997ef9c0bfad0ba362741afa601d8fb285b8", "html_url": "https://github.com/rust-lang/rust/commit/87a0997ef9c0bfad0ba362741afa601d8fb285b8"}, {"sha": "91759b2de528f95289596e94c69b88a1927a94e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/91759b2de528f95289596e94c69b88a1927a94e0", "html_url": "https://github.com/rust-lang/rust/commit/91759b2de528f95289596e94c69b88a1927a94e0"}], "stats": {"total": 830, "additions": 516, "deletions": 314}, "files": [{"sha": "5f7135e38d11370085c8d2d18f5d2b0bb2027a78", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -31,6 +31,7 @@ __pycache__/\n /inst/\n /llvm/\n /mingw-build/\n+/src/tools/x/target\n # Created by default with `src/ci/docker/run.sh`:\n /obj/\n /unicode-downloads"}, {"sha": "30b7628120bdb65d4bd8c91e3ec09ef2479eedf7", "filename": "Cargo.lock", "status": "modified", "additions": 48, "deletions": 59, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1966,18 +1966,6 @@ dependencies = [\n  \"toml\",\n ]\n \n-[[package]]\n-name = \"measureme\"\n-version = \"0.7.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fef709d3257013bba7cff14fc504e07e80631d3fe0f6d38ce63b8f6510ccb932\"\n-dependencies = [\n- \"byteorder\",\n- \"memmap\",\n- \"parking_lot 0.9.0\",\n- \"rustc-hash\",\n-]\n-\n [[package]]\n name = \"measureme\"\n version = \"9.0.0\"\n@@ -2705,9 +2693,9 @@ dependencies = [\n \n [[package]]\n name = \"racer\"\n-version = \"2.1.39\"\n+version = \"2.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9424b4650b9c1134d0a1b34dab82319691e1c95fa8af1658fc640deb1b6823c\"\n+checksum = \"68c5fb83bc092c10e12ca863ab8922b1833382d5d248aaafca779886d3396a44\"\n dependencies = [\n  \"bitflags\",\n  \"clap\",\n@@ -3033,19 +3021,18 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_arena\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e8e941a8fc3878a111d2bbfe78e39522d884136f0b412b12592195f26f653476\"\n+checksum = \"477085eefed2f12085c68577cc3827c8c39a31a4a750978aacb9af10f7903174\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures\",\n  \"smallvec 1.4.2\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_ast\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3b58b6b035710df7f339a2bf86f6dafa876efd95439540970e24609e33598ca6\"\n+checksum = \"4d4ad5ec25f6b3d122354595be0d1b513f37fca3299d9b448b1db28f4a9e4b12\"\n dependencies = [\n  \"bitflags\",\n  \"rustc-ap-rustc_data_structures\",\n@@ -3060,9 +3047,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_ast_passes\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3d379a900d6a1f098490d92ab83e87487dcee2e4ec3f04c3ac4512b5117b64e2\"\n+checksum = \"0c6d8635298d7736decdb3c6e92e784d3eccde557462a9c10ac11a34fec3d756\"\n dependencies = [\n  \"itertools 0.9.0\",\n  \"rustc-ap-rustc_ast\",\n@@ -3079,9 +3066,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_ast_pretty\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"658d925c0da9e3c5cddc5e54f4fa8c03b41aff1fc6dc5e41837c1118ad010ac0\"\n+checksum = \"7a61bdb5252e1a95b7715038949e10f07ce770a436fcd497cdd9bc7255471de9\"\n dependencies = [\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_span\",\n@@ -3091,9 +3078,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_attr\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3f387037534f34c148aed753622677500e42d190a095670e7ac3fffc09811a59\"\n+checksum = \"84520a16cb61bd31e9c27e87eca5d933a9c94ac84f25649bddcc19989275ab2a\"\n dependencies = [\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_ast_pretty\",\n@@ -3110,18 +3097,19 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14ffd17a37e00d77926a0713f191c59ff3aeb2b551a024c7cfffce14bab79be8\"\n+checksum = \"b1cb2b6a38759cf7c0c1434c8b4cbfcab9cd24970d05f960f2ca01226ddb4d68\"\n dependencies = [\n+ \"arrayvec\",\n  \"bitflags\",\n  \"cfg-if 0.1.10\",\n  \"crossbeam-utils 0.7.2\",\n  \"ena\",\n  \"indexmap\",\n  \"jobserver\",\n  \"libc\",\n- \"measureme 0.7.1\",\n+ \"measureme\",\n  \"parking_lot 0.11.0\",\n  \"rustc-ap-rustc_graphviz\",\n  \"rustc-ap-rustc_index\",\n@@ -3140,9 +3128,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2b3263ddcfa9eb911e54a4e8088878dd9fd10e00d8b99b01033ba4a2733fe91d\"\n+checksum = \"46cfb19536426bf9252827a78552d635be207a4be74f4e92832aad82d7f2135c\"\n dependencies = [\n  \"annotate-snippets 0.8.0\",\n  \"atty\",\n@@ -3159,9 +3147,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_expand\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e1ab7e68cede8a2273fd8b8623002ce9dc832e061dfc3330e9bcc1fc2a722d73\"\n+checksum = \"6273e60042a0ef31f6cfe783c519873993eb426f055be2bc058a48b6ca3934d0\"\n dependencies = [\n  \"rustc-ap-rustc_ast\",\n  \"rustc-ap-rustc_ast_passes\",\n@@ -3182,31 +3170,31 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_feature\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eea2dc95421bc19bbd4d939399833a882c46b684283b4267ad1fcf982fc043d9\"\n+checksum = \"2936e8346157e2848305e509f38aa3ed4e97697975ef68027587f5db6a38703f\"\n dependencies = [\n  \"rustc-ap-rustc_data_structures\",\n  \"rustc-ap-rustc_span\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_fs_util\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e44c1804f09635f83f6cf1e04c2e92f8aeb7b4e850ac6c53d373dab02c13053\"\n+checksum = \"9b4c3ae17776b5a5aa441ca510a650f75805e1f5569edd231caa8378552195a4\"\n \n [[package]]\n name = \"rustc-ap-rustc_graphviz\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dc491f2b9be6e928f6df6b287549b8d50c48e8eff8638345155f40fa2cfb785d\"\n+checksum = \"5611bf0ac0ac49c2a22c959c7d8b17f85f69959293f0e8c4f753eca832fe7ad0\"\n \n [[package]]\n name = \"rustc-ap-rustc_index\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fa73f3fed413cdb6290738a10267da17b9ae8e02087334778b9a8c9491c5efc0\"\n+checksum = \"ca67cf37c427057192e451c7f912e94ae9a8ca5ad69fd481c011fad3f86982cb\"\n dependencies = [\n  \"arrayvec\",\n  \"rustc-ap-rustc_macros\",\n@@ -3215,18 +3203,18 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e993881244a92f3b44cf43c8f22ae2ca5cefe4f55a34e2b65b72ee66fe5ad077\"\n+checksum = \"a5b04cd2159495584d976d501c5394498470c2e94e4f0cebb8186562d407a678\"\n dependencies = [\n  \"unicode-xid\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4effe366556e1d75344764adf4d54cba7c2fad33dbd07588e96d0853831ddc7c\"\n+checksum = \"61ec6d623853449acd3c65050d249d3674edab5f6e4d9f074c7bac183269f9c8\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -3236,9 +3224,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_parse\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0342675835251571471d3dca9ea1576a853a8dfa1f4b0084db283c861223cb60\"\n+checksum = \"ca524bafce4b04d2b49fee2d40b4b26c3ebab9f1a4f731fdf561f00617862f02\"\n dependencies = [\n  \"bitflags\",\n  \"rustc-ap-rustc_ast\",\n@@ -3256,19 +3244,19 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_serialize\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"438255ed968d73bf6573aa18d3b8d33c0a85ecdfd14160ef09ff813938e0606c\"\n+checksum = \"c67920561e58f98c4de864407c92b2dd05ace5d5e5301e17444f10f742c005b7\"\n dependencies = [\n  \"indexmap\",\n  \"smallvec 1.4.2\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_session\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7d61ff76dede8eb827f6805754900d1097a7046f938f950231b62b448f55bf78\"\n+checksum = \"0762fd855792e06ef639327237898e4e092ad68150e6a8e19aeb7dc06276ad7a\"\n dependencies = [\n  \"bitflags\",\n  \"getopts\",\n@@ -3287,9 +3275,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_span\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1c267f15c3cfc82a8a441d2bf86bcccf299d1eb625822468e3d8ee6f7c5a1c89\"\n+checksum = \"0bf3db7b4ca5d21c14c45475df155e5e020c9a3760346945a662c9a9053b49c8\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n  \"md-5 0.8.0\",\n@@ -3306,9 +3294,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"679.0.0\"\n+version = \"686.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8b1b4b266c4d44aac0f7f83b6741d8f0545b03d1ce32f3b5254f2014225cb96c\"\n+checksum = \"3aa6560bb9742b276064d67ab9edb5766ecb303f8ae3854835ad3fad4b432188\"\n dependencies = [\n  \"bitflags\",\n  \"rustc-ap-rustc_data_structures\",\n@@ -3393,6 +3381,7 @@ dependencies = [\n name = \"rustc-workspace-hack\"\n version = \"1.0.0\"\n dependencies = [\n+ \"byteorder\",\n  \"crossbeam-utils 0.7.2\",\n  \"proc-macro2\",\n  \"quote\",\n@@ -3523,7 +3512,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"libc\",\n- \"measureme 9.0.0\",\n+ \"measureme\",\n  \"rustc-demangle\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n@@ -3589,7 +3578,7 @@ dependencies = [\n  \"indexmap\",\n  \"jobserver\",\n  \"libc\",\n- \"measureme 9.0.0\",\n+ \"measureme\",\n  \"parking_lot 0.11.0\",\n  \"rustc-hash\",\n  \"rustc-rayon\",\n@@ -3907,7 +3896,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-ir\",\n- \"measureme 9.0.0\",\n+ \"measureme\",\n  \"polonius-engine\",\n  \"rustc-rayon-core\",\n  \"rustc_apfloat\",\n@@ -4340,7 +4329,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.4.22\"\n+version = \"1.4.24\"\n dependencies = [\n  \"annotate-snippets 0.6.1\",\n  \"anyhow\",\n@@ -5263,7 +5252,7 @@ dependencies = [\n  \"chrono\",\n  \"lazy_static\",\n  \"matchers\",\n- \"parking_lot 0.11.0\",\n+ \"parking_lot 0.9.0\",\n  \"regex\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "e1a36d880867b122814d6251a2e54e4b296b73cf", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -29,11 +29,17 @@ members = [\n   \"src/tools/unicode-table-generator\",\n   \"src/tools/expand-yaml-anchors\",\n ]\n+\n exclude = [\n   \"build\",\n   \"compiler/rustc_codegen_cranelift\",\n   # HACK(eddyb) This hardcodes the fact that our CI uses `/checkout/obj`.\n   \"obj\",\n+  # The `x` binary is a thin wrapper that calls `x.py`, which initializes\n+  # submodules, before which workspace members cannot be invoked because\n+  # not all `Cargo.toml` files are available, so we exclude the `x` binary,\n+  # so it can be invoked before the current checkout is set up.\n+  \"src/tools/x\",\n ]\n \n [profile.release.package.compiler_builtins]"}, {"sha": "e413564fb3fd544fa1ed16c09eff9eb5dce9e61a", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -313,25 +313,24 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n             // Implement the proposal described in\n             // https://github.com/rust-lang/rust/issues/61733#issuecomment-509626449\n             //\n-            // The macro invocation expands to the list of statements.\n-            // If the list of statements is empty, then 'parse'\n-            // the trailing semicolon on the original invocation\n-            // as an empty statement. That is:\n+            // The macro invocation expands to the list of statements. If the\n+            // list of statements is empty, then 'parse' the trailing semicolon\n+            // on the original invocation as an empty statement. That is:\n             //\n             // `empty();` is parsed as a single `StmtKind::Empty`\n             //\n-            // If the list of statements is non-empty, see if the\n-            // final statement alreayd has a trailing semicolon.\n+            // If the list of statements is non-empty, see if the final\n+            // statement already has a trailing semicolon.\n             //\n-            // If it doesn't have a semicolon, then 'parse' the trailing semicolon\n-            // from the invocation as part of the final statement,\n+            // If it doesn't have a semicolon, then 'parse' the trailing\n+            // semicolon from the invocation as part of the final statement,\n             // using `stmt.add_trailing_semicolon()`\n             //\n             // If it does have a semicolon, then 'parse' the trailing semicolon\n             // from the invocation as a new StmtKind::Empty\n \n-            // FIXME: We will need to preserve the original\n-            // semicolon token and span as part of #15701\n+            // FIXME: We will need to preserve the original semicolon token and\n+            // span as part of #15701\n             let empty_stmt = ast::Stmt {\n                 id: ast::DUMMY_NODE_ID,\n                 kind: ast::StmtKind::Empty,"}, {"sha": "8fa6e6a7101081123aad325b6a4f295627813868", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -16,9 +16,8 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n         })\n     });\n \n-    let body_visit = s.fold(quote!(), |acc, bind| {\n+    let body_visit = s.each(|bind| {\n         quote! {\n-            #acc\n             ::rustc_middle::ty::fold::TypeFoldable::visit_with(#bind, __folder)?;\n         }\n     });"}, {"sha": "a84570432786e7a8a5912ca8092162bbd9643989", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -61,22 +61,35 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n \n     fn lint_const_item_usage(\n         &self,\n+        place: &Place<'tcx>,\n         const_item: DefId,\n         location: Location,\n         decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b>,\n     ) {\n-        let source_info = self.body.source_info(location);\n-        let lint_root = self.body.source_scopes[source_info.scope]\n-            .local_data\n-            .as_ref()\n-            .assert_crate_local()\n-            .lint_root;\n+        // Don't lint on borrowing/assigning to a dereference\n+        // e.g:\n+        //\n+        // `unsafe { *FOO = 0; *BAR.field = 1; }`\n+        // `unsafe { &mut *FOO }`\n+        if !matches!(place.projection.last(), Some(PlaceElem::Deref)) {\n+            let source_info = self.body.source_info(location);\n+            let lint_root = self.body.source_scopes[source_info.scope]\n+                .local_data\n+                .as_ref()\n+                .assert_crate_local()\n+                .lint_root;\n \n-        self.tcx.struct_span_lint_hir(CONST_ITEM_MUTATION, lint_root, source_info.span, |lint| {\n-            decorate(lint)\n-                .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n-                .emit()\n-        });\n+            self.tcx.struct_span_lint_hir(\n+                CONST_ITEM_MUTATION,\n+                lint_root,\n+                source_info.span,\n+                |lint| {\n+                    decorate(lint)\n+                        .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n+                        .emit()\n+                },\n+            );\n+        }\n     }\n }\n \n@@ -88,15 +101,11 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n             // so emitting a lint would be redundant.\n             if !lhs.projection.is_empty() {\n                 if let Some(def_id) = self.is_const_item_without_destructor(lhs.local) {\n-                    // Don't lint on writes through a pointer\n-                    // (e.g. `unsafe { *FOO = 0; *BAR.field = 1; }`)\n-                    if !matches!(lhs.projection.last(), Some(PlaceElem::Deref)) {\n-                        self.lint_const_item_usage(def_id, loc, |lint| {\n-                            let mut lint = lint.build(\"attempting to modify a `const` item\");\n-                            lint.note(\"each usage of a `const` item creates a new temporary - the original `const` item will not be modified\");\n-                            lint\n-                        })\n-                    }\n+                    self.lint_const_item_usage(&lhs, def_id, loc, |lint| {\n+                        let mut lint = lint.build(\"attempting to modify a `const` item\");\n+                        lint.note(\"each usage of a `const` item creates a new temporary; the original `const` item will not be modified\");\n+                        lint\n+                    })\n                 }\n             }\n             // We are looking for MIR of the form:\n@@ -127,7 +136,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n                 });\n                 let lint_loc =\n                     if method_did.is_some() { self.body.terminator_loc(loc.block) } else { loc };\n-                self.lint_const_item_usage(def_id, lint_loc, |lint| {\n+                self.lint_const_item_usage(place, def_id, lint_loc, |lint| {\n                     let mut lint = lint.build(\"taking a mutable reference to a `const` item\");\n                     lint\n                         .note(\"each usage of a `const` item creates a new temporary\")"}, {"sha": "ffa795134e2576efc6c1a84eca0baca8ec02582c", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -147,8 +147,8 @@ impl DebugOptions {\n         let mut counter_format = ExpressionFormat::default();\n \n         if let Ok(env_debug_options) = std::env::var(RUSTC_COVERAGE_DEBUG_OPTIONS) {\n-            for setting_str in env_debug_options.replace(\" \", \"\").replace(\"-\", \"_\").split(\",\") {\n-                let mut setting = setting_str.splitn(2, \"=\");\n+            for setting_str in env_debug_options.replace(\" \", \"\").replace(\"-\", \"_\").split(',') {\n+                let mut setting = setting_str.splitn(2, '=');\n                 match setting.next() {\n                     Some(option) if option == \"allow_unused_expressions\" => {\n                         allow_unused_expressions = bool_option_val(option, setting.next());\n@@ -210,7 +210,7 @@ fn bool_option_val(option: &str, some_strval: Option<&str>) -> bool {\n \n fn counter_format_option_val(strval: &str) -> ExpressionFormat {\n     let mut counter_format = ExpressionFormat { id: false, block: false, operation: false };\n-    let components = strval.splitn(3, \"+\");\n+    let components = strval.splitn(3, '+');\n     for component in components {\n         match component {\n             \"id\" => counter_format.id = true,\n@@ -695,7 +695,7 @@ pub(crate) fn dump_coverage_graphviz(\n         let from_bcb_data = &basic_coverage_blocks[from_bcb];\n         let from_terminator = from_bcb_data.terminator(mir_body);\n         let mut edge_labels = from_terminator.kind.fmt_successor_labels();\n-        edge_labels.retain(|label| label.to_string() != \"unreachable\");\n+        edge_labels.retain(|label| label != \"unreachable\");\n         let edge_counters = from_terminator\n             .successors()\n             .map(|&successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));"}, {"sha": "f3d2ab9590e9b9dc0ff56585dca80531c5f45934", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -425,7 +425,7 @@ impl Inliner<'tcx> {\n                 }\n \n                 let dest = if dest_needs_borrow(destination.0) {\n-                    debug!(\"creating temp for return destination\");\n+                    trace!(\"creating temp for return destination\");\n                     let dest = Rvalue::Ref(\n                         self.tcx.lifetimes.re_erased,\n                         BorrowKind::Mut { allow_two_phase_borrow: false },\n@@ -633,7 +633,7 @@ impl Inliner<'tcx> {\n             }\n         }\n \n-        debug!(\"creating temp for argument {:?}\", arg);\n+        trace!(\"creating temp for argument {:?}\", arg);\n         // Otherwise, create a temporary for the arg\n         let arg = Rvalue::Use(arg);\n \n@@ -703,19 +703,19 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n                 Local::new(self.new_locals.start.index() + (idx - self.args.len()))\n             }\n         };\n-        debug!(\"mapping local `{:?}` to `{:?}`\", local, new);\n+        trace!(\"mapping local `{:?}` to `{:?}`\", local, new);\n         new\n     }\n \n     fn map_scope(&self, scope: SourceScope) -> SourceScope {\n         let new = SourceScope::new(self.new_scopes.start.index() + scope.index());\n-        debug!(\"mapping scope `{:?}` to `{:?}`\", scope, new);\n+        trace!(\"mapping scope `{:?}` to `{:?}`\", scope, new);\n         new\n     }\n \n     fn map_block(&self, block: BasicBlock) -> BasicBlock {\n         let new = BasicBlock::new(self.new_blocks.start.index() + block.index());\n-        debug!(\"mapping block `{:?}` to `{:?}`\", block, new);\n+        trace!(\"mapping block `{:?}` to `{:?}`\", block, new);\n         new\n     }\n }"}, {"sha": "8bd4a512bbb0587e443396aef671c0a7bfe2bd0b", "filename": "compiler/rustc_mir/src/util/generic_graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -174,7 +174,7 @@ impl<\n     where\n         W: Write,\n     {\n-        let lines = label.split(\"\\n\").map(|s| dot::escape_html(s)).collect::<Vec<_>>();\n+        let lines = label.split('\\n').map(|s| dot::escape_html(s)).collect::<Vec<_>>();\n         let escaped_label = lines.join(r#\"<br align=\"left\"/>\"#);\n         writeln!(w, r#\"    label=<<br/><br/>{}<br align=\"left\"/><br/><br/><br/>>;\"#, escaped_label)\n     }"}, {"sha": "5c7a7c1d0ae3156f4171811ffd9e4e9be3fddd07", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1021,17 +1021,11 @@ impl<'a> Resolver<'a> {\n                 (\"\", \"\")\n             };\n \n-            let article = if built_in.is_empty() { res.article() } else { \"a\" };\n-            format!(\n-                \"{a}{built_in} {thing}{from}\",\n-                a = article,\n-                thing = res.descr(),\n-                built_in = built_in,\n-                from = from\n-            )\n+            let a = if built_in.is_empty() { res.article() } else { \"a\" };\n+            format!(\"{a}{built_in} {thing}{from}\", thing = res.descr())\n         } else {\n             let introduced = if b.is_import() { \"imported\" } else { \"defined\" };\n-            format!(\"the {thing} {introduced} here\", thing = res.descr(), introduced = introduced)\n+            format!(\"the {thing} {introduced} here\", thing = res.descr())\n         }\n     }\n \n@@ -1049,19 +1043,13 @@ impl<'a> Resolver<'a> {\n             ident.span,\n             E0659,\n             \"`{ident}` is ambiguous ({why})\",\n-            ident = ident,\n             why = kind.descr()\n         );\n         err.span_label(ident.span, \"ambiguous name\");\n \n         let mut could_refer_to = |b: &NameBinding<'_>, misc: AmbiguityErrorMisc, also: &str| {\n             let what = self.binding_description(b, ident, misc == AmbiguityErrorMisc::FromPrelude);\n-            let note_msg = format!(\n-                \"`{ident}` could{also} refer to {what}\",\n-                ident = ident,\n-                also = also,\n-                what = what\n-            );\n+            let note_msg = format!(\"`{ident}` could{also} refer to {what}\");\n \n             let thing = b.res().descr();\n             let mut help_msgs = Vec::new();\n@@ -1071,30 +1059,18 @@ impl<'a> Resolver<'a> {\n                     || kind == AmbiguityKind::GlobVsOuter && swapped != also.is_empty())\n             {\n                 help_msgs.push(format!(\n-                    \"consider adding an explicit import of \\\n-                     `{ident}` to disambiguate\",\n-                    ident = ident\n+                    \"consider adding an explicit import of `{ident}` to disambiguate\"\n                 ))\n             }\n             if b.is_extern_crate() && ident.span.rust_2018() {\n-                help_msgs.push(format!(\n-                    \"use `::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident,\n-                    thing = thing,\n-                ))\n+                help_msgs.push(format!(\"use `::{ident}` to refer to this {thing} unambiguously\"))\n             }\n             if misc == AmbiguityErrorMisc::SuggestCrate {\n-                help_msgs.push(format!(\n-                    \"use `crate::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident,\n-                    thing = thing,\n-                ))\n+                help_msgs\n+                    .push(format!(\"use `crate::{ident}` to refer to this {thing} unambiguously\"))\n             } else if misc == AmbiguityErrorMisc::SuggestSelf {\n-                help_msgs.push(format!(\n-                    \"use `self::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident,\n-                    thing = thing,\n-                ))\n+                help_msgs\n+                    .push(format!(\"use `self::{ident}` to refer to this {thing} unambiguously\"))\n             }\n \n             err.span_note(b.span, &note_msg);\n@@ -1167,12 +1143,10 @@ impl<'a> Resolver<'a> {\n             };\n \n             let first = ptr::eq(binding, first_binding);\n-            let descr = get_descr(binding);\n             let msg = format!(\n                 \"{and_refers_to}the {item} `{name}`{which} is defined here{dots}\",\n                 and_refers_to = if first { \"\" } else { \"...and refers to \" },\n-                item = descr,\n-                name = name,\n+                item = get_descr(binding),\n                 which = if first { \"\" } else { \" which\" },\n                 dots = if next_binding.is_some() { \"...\" } else { \"\" },\n             );"}, {"sha": "00e6d5ca381893252511a77370313bb1c22eb9db", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -865,7 +865,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     err.span_suggestion(\n                         span,\n                         &format!(\"use struct {} syntax instead\", descr),\n-                        format!(\"{} {{{pad}{}{pad}}}\", path_str, fields, pad = pad),\n+                        format!(\"{path_str} {{{pad}{fields}{pad}}}\"),\n                         applicability,\n                     );\n                 }"}, {"sha": "f1e30470f8ea078dd6f0719163eba77ce8ac1224", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -11,6 +11,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n+#![feature(format_args_capture)]\n #![feature(nll)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "5ebc4d6c4c14aa6a9dc403c4fab00991b9ae9c53", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -309,13 +309,13 @@\n //! * `?` \u21d2 [`Debug`]\n //! * `x?` \u21d2 [`Debug`] with lower-case hexadecimal integers\n //! * `X?` \u21d2 [`Debug`] with upper-case hexadecimal integers\n-//! * `o` \u21d2 [`Octal`](trait.Octal.html)\n-//! * `x` \u21d2 [`LowerHex`](trait.LowerHex.html)\n-//! * `X` \u21d2 [`UpperHex`](trait.UpperHex.html)\n-//! * `p` \u21d2 [`Pointer`](trait.Pointer.html)\n+//! * `o` \u21d2 [`Octal`]\n+//! * `x` \u21d2 [`LowerHex`]\n+//! * `X` \u21d2 [`UpperHex`]\n+//! * `p` \u21d2 [`Pointer`]\n //! * `b` \u21d2 [`Binary`]\n-//! * `e` \u21d2 [`LowerExp`](trait.LowerExp.html)\n-//! * `E` \u21d2 [`UpperExp`](trait.UpperExp.html)\n+//! * `e` \u21d2 [`LowerExp`]\n+//! * `E` \u21d2 [`UpperExp`]\n //!\n //! What this means is that any type of argument which implements the\n //! [`fmt::Binary`][`Binary`] trait can then be formatted with `{:b}`. Implementations"}, {"sha": "15092d463ec448c496ef38560ca6056ff84e8d35", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -119,7 +119,6 @@\n #![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n-#![feature(renamed_spin_loop)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]"}, {"sha": "b2afb702eeb86f65e242a5d8426691fc8528edf3", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -406,7 +406,8 @@ impl<T> Cell<T> {\n     /// assert_eq!(five, 5);\n     /// ```\n     #[stable(feature = \"move_cell\", since = \"1.17.0\")]\n-    pub fn into_inner(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> T {\n         self.value.into_inner()\n     }\n }\n@@ -573,7 +574,7 @@ pub struct RefCell<T: ?Sized> {\n     value: UnsafeCell<T>,\n }\n \n-/// An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n+/// An error returned by [`RefCell::try_borrow`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n pub struct BorrowError {\n     _private: (),\n@@ -593,7 +594,7 @@ impl Display for BorrowError {\n     }\n }\n \n-/// An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n+/// An error returned by [`RefCell::try_borrow_mut`].\n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n pub struct BorrowMutError {\n     _private: (),\n@@ -668,12 +669,11 @@ impl<T> RefCell<T> {\n     /// let five = c.into_inner();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     #[inline]\n-    pub fn into_inner(self) -> T {\n+    pub const fn into_inner(self) -> T {\n         // Since this function takes `self` (the `RefCell`) by value, the\n         // compiler statically verifies that it is not currently borrowed.\n-        // Therefore the following assertion is just a `debug_assert!`.\n-        debug_assert!(self.borrow.get() == UNUSED);\n         self.value.into_inner()\n     }\n \n@@ -1682,7 +1682,8 @@ impl<T> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_inner(self) -> T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> T {\n         self.value\n     }\n }"}, {"sha": "bbb3a3dea435ec67e15c969622974bc8c9650787", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -29,7 +29,7 @@ use self::Ordering::*;\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n-/// so floating point types implement `PartialEq` but not [`Eq`](Eq).\n+/// so floating point types implement `PartialEq` but not [`Eq`].\n ///\n /// Formally, the equality must be (for all `a`, `b` and `c`):\n ///"}, {"sha": "d95d43f0854489a5b9b75ec53daa1b216b672600", "filename": "library/core/src/fmt/builders.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fbuilders.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,4 +1,6 @@\n-use crate::fmt;\n+#![allow(unused_imports)]\n+\n+use crate::fmt::{self, Debug, Formatter};\n \n struct PadAdapter<'buf, 'state> {\n     buf: &'buf mut (dyn fmt::Write + 'buf),\n@@ -53,14 +55,12 @@ impl fmt::Write for PadAdapter<'_, '_> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted struct as a part of your\n-/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_struct`](struct.Formatter.html#method.debug_struct)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_struct`] method.\n ///\n /// # Examples\n ///\n@@ -257,14 +257,12 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted tuple as a part of your\n-/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_tuple`](struct.Formatter.html#method.debug_tuple)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_tuple`] method.\n ///\n /// # Examples\n ///\n@@ -428,14 +426,12 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted set of items as a part\n-/// of your [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// of your [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_set`](struct.Formatter.html#method.debug_set)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_set`] method.\n ///\n /// # Examples\n ///\n@@ -560,14 +556,12 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted list of items as a part\n-/// of your [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// of your [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_list`](struct.Formatter.html#method.debug_list)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_list`] method.\n ///\n /// # Examples\n ///\n@@ -692,14 +686,12 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     }\n }\n \n-/// A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.\n+/// A struct to help with [`fmt::Debug`](Debug) implementations.\n ///\n /// This is useful when you wish to output a formatted map as a part of your\n-/// [`Debug::fmt`](trait.Debug.html#tymethod.fmt) implementation.\n+/// [`Debug::fmt`] implementation.\n ///\n-/// This can be constructed by the\n-/// [`Formatter::debug_map`](struct.Formatter.html#method.debug_map)\n-/// method.\n+/// This can be constructed by the [`Formatter::debug_map`] method.\n ///\n /// # Examples\n ///"}, {"sha": "979a5f8cf507534aaa2ede05bea73df603f4fd3b", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,6 +1,7 @@\n #![stable(feature = \"core_hint\", since = \"1.27.0\")]\n \n //! Hints to compiler that affects how code should be emitted or optimized.\n+//! Hints may be compile time or runtime.\n \n use crate::intrinsics;\n \n@@ -24,7 +25,6 @@ use crate::intrinsics;\n /// Otherwise, consider using the [`unreachable!`] macro, which does not allow\n /// optimizations but will panic when executed.\n ///\n-///\n /// # Example\n ///\n /// ```\n@@ -51,18 +51,62 @@ pub const unsafe fn unreachable_unchecked() -> ! {\n     unsafe { intrinsics::unreachable() }\n }\n \n-/// Emits a machine instruction hinting to the processor that it is running in busy-wait\n-/// spin-loop (\"spin lock\").\n+/// Emits a machine instruction to signal the processor that it is running in\n+/// a busy-wait spin-loop (\"spin lock\").\n+///\n+/// Upon receiving the spin-loop signal the processor can optimize its behavior by,\n+/// for example, saving power or switching hyper-threads.\n+///\n+/// This function is different from [`thread::yield_now`] which directly\n+/// yields to the system's scheduler, whereas `spin_loop` does not interact\n+/// with the operating system.\n+///\n+/// A common use case for `spin_loop` is implementing bounded optimistic\n+/// spinning in a CAS loop in synchronization primitives. To avoid problems\n+/// like priority inversion, it is strongly recommended that the spin loop is\n+/// terminated after a finite amount of iterations and an appropriate blocking\n+/// syscall is made.\n+///\n+/// **Note**: On platforms that do not support receiving spin-loop hints this\n+/// function does not do anything at all.\n+///\n+/// # Examples\n ///\n-/// For a discussion of different locking strategies and their trade-offs, see\n-/// [`core::sync::atomic::spin_loop_hint`].\n+/// ```\n+/// use std::sync::atomic::{AtomicBool, Ordering};\n+/// use std::sync::Arc;\n+/// use std::{hint, thread};\n+///\n+/// // A shared atomic value that threads will use to coordinate\n+/// let live = Arc::new(AtomicBool::new(false));\n+///\n+/// // In a background thread we'll eventually set the value\n+/// let bg_work = {\n+///     let live = live.clone();\n+///     thread::spawn(move || {\n+///         // Do some work, then make the value live\n+///         do_some_work();\n+///         live.store(true, Ordering::Release);\n+///     })\n+/// };\n ///\n-/// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n-/// do anything at all.\n+/// // Back on our current thread, we wait for the value to be set\n+/// while live.load(Ordering::Acquire) {\n+///     // The spin loop is a hint to the CPU that we're waiting, but probably\n+///     // not for very long\n+///     hint::spin_loop();\n+/// }\n+///\n+/// // The value is now set\n+/// # fn do_some_work() {}\n+/// do_some_work();\n+/// bg_work.join()?;\n+/// # Ok::<(), Box<dyn core::any::Any + Send + 'static>>(())\n+/// ```\n ///\n-/// [`core::sync::atomic::spin_loop_hint`]: crate::sync::atomic::spin_loop_hint\n+/// [`thread::yield_now`]: ../../std/thread/fn.yield_now.html\n #[inline]\n-#[unstable(feature = \"renamed_spin_loop\", issue = \"55002\")]\n+#[stable(feature = \"renamed_spin_loop\", since = \"1.49.0\")]\n pub fn spin_loop() {\n     #[cfg(all(any(target_arch = \"x86\", target_arch = \"x86_64\"), target_feature = \"sse2\"))]\n     {"}, {"sha": "96d0a60a32768c9ca623fb21452013dc05de012b", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -121,7 +121,7 @@ where\n /// This `struct` is created by the [`flatten`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`flatten`]: trait.Iterator.html#method.flatten\n+/// [`flatten`]: Iterator::flatten\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]"}, {"sha": "9586284e1d706f288137cb2083de81b35ddcd27d", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -85,7 +85,7 @@ pub unsafe trait SourceIter {\n     /// * whatever remains in the source after iteration has stopped\n     /// * the memory that has become unused by advancing a consuming iterator\n     ///\n-    /// [`next()`]: trait.Iterator.html#method.next\n+    /// [`next()`]: Iterator::next\n     unsafe fn as_inner(&mut self) -> &mut Self::Source;\n }\n \n@@ -94,7 +94,7 @@ pub unsafe trait SourceIter {\n /// This `struct` is created by the [`rev`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`rev`]: trait.Iterator.html#method.rev\n+/// [`rev`]: Iterator::rev\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -228,7 +228,7 @@ unsafe impl<I> TrustedLen for Rev<I> where I: TrustedLen + DoubleEndedIterator {\n /// This `struct` is created by the [`copied`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`copied`]: trait.Iterator.html#method.copied\n+/// [`copied`]: Iterator::copied\n /// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -380,7 +380,7 @@ where\n /// This `struct` is created by the [`cloned`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`cloned`]: trait.Iterator.html#method.cloned\n+/// [`cloned`]: Iterator::cloned\n /// [`Iterator`]: trait.Iterator.html\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -515,7 +515,7 @@ where\n /// This `struct` is created by the [`cycle`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`cycle`]: trait.Iterator.html#method.cycle\n+/// [`cycle`]: Iterator::cycle\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -600,7 +600,7 @@ impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n /// This `struct` is created by the [`step_by`] method on [`Iterator`]. See\n /// its documentation for more.\n ///\n-/// [`step_by`]: trait.Iterator.html#method.step_by\n+/// [`step_by`]: Iterator::step_by\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n@@ -833,7 +833,7 @@ impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}\n /// This `struct` is created by the [`map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`map`]: trait.Iterator.html#method.map\n+/// [`map`]: Iterator::map\n /// [`Iterator`]: trait.Iterator.html\n ///\n /// # Notes about side effects\n@@ -1042,7 +1042,7 @@ unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for Map<I, F> where F: FnM\n /// This `struct` is created by the [`filter`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`filter`]: trait.Iterator.html#method.filter\n+/// [`filter`]: Iterator::filter\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1191,7 +1191,7 @@ unsafe impl<I: InPlaceIterable, P> InPlaceIterable for Filter<I, P> where P: FnM\n /// This `struct` is created by the [`filter_map`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`filter_map`]: trait.Iterator.html#method.filter_map\n+/// [`filter_map`]: Iterator::filter_map\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1338,7 +1338,7 @@ unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for FilterMap<I, F> where\n /// This `struct` is created by the [`enumerate`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`enumerate`]: trait.Iterator.html#method.enumerate\n+/// [`enumerate`]: Iterator::enumerate\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -1574,7 +1574,7 @@ unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n /// This `struct` is created by the [`peekable`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`peekable`]: trait.Iterator.html#method.peekable\n+/// [`peekable`]: Iterator::peekable\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -1743,7 +1743,7 @@ impl<I: Iterator> Peekable<I> {\n     /// Like [`next`], if there is a value, it is wrapped in a `Some(T)`.\n     /// But if the iteration is over, `None` is returned.\n     ///\n-    /// [`next`]: trait.Iterator.html#tymethod.next\n+    /// [`next`]: Iterator::next\n     ///\n     /// Because `peek()` returns a reference, and many iterators iterate over\n     /// references, there can be a possibly confusing situation where the\n@@ -1871,7 +1871,7 @@ unsafe impl<I: InPlaceIterable> InPlaceIterable for Peekable<I> {}\n /// This `struct` is created by the [`skip_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`skip_while`]: trait.Iterator.html#method.skip_while\n+/// [`skip_while`]: Iterator::skip_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1993,7 +1993,7 @@ unsafe impl<I: InPlaceIterable, F> InPlaceIterable for SkipWhile<I, F> where\n /// This `struct` is created by the [`take_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`take_while`]: trait.Iterator.html#method.take_while\n+/// [`take_while`]: Iterator::take_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2128,7 +2128,7 @@ unsafe impl<I: InPlaceIterable, F> InPlaceIterable for TakeWhile<I, F> where\n /// This `struct` is created by the [`map_while`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`map_while`]: trait.Iterator.html#method.map_while\n+/// [`map_while`]: Iterator::map_while\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n@@ -2226,7 +2226,7 @@ unsafe impl<B, I: InPlaceIterable, P> InPlaceIterable for MapWhile<I, P> where\n /// This `struct` is created by the [`skip`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`skip`]: trait.Iterator.html#method.skip\n+/// [`skip`]: Iterator::skip\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -2422,7 +2422,7 @@ unsafe impl<I: InPlaceIterable> InPlaceIterable for Skip<I> {}\n /// This `struct` is created by the [`take`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`take`]: trait.Iterator.html#method.take\n+/// [`take`]: Iterator::take\n /// [`Iterator`]: trait.Iterator.html\n #[derive(Clone, Debug)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n@@ -2627,7 +2627,7 @@ unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n /// This `struct` is created by the [`scan`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`scan`]: trait.Iterator.html#method.scan\n+/// [`scan`]: Iterator::scan\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2735,7 +2735,7 @@ unsafe impl<St, F, B, I: InPlaceIterable> InPlaceIterable for Scan<I, St, F> whe\n /// This `struct` is created by the [`inspect`] method on [`Iterator`]. See its\n /// documentation for more.\n ///\n-/// [`inspect`]: trait.Iterator.html#method.inspect\n+/// [`inspect`]: Iterator::inspect\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ea560288c28bdcf0069ae86a546c79276ac5c589", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -70,6 +70,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n+#![feature(const_cell_into_inner)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_float_classify)]"}, {"sha": "c90887b89d02e7acf0f111a924fc8c780a216e35", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -130,15 +130,15 @@ impl i128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n+    int_impl! { isize, i16, usize, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n+    int_impl! { isize, i32, usize, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n@@ -147,7 +147,7 @@ impl isize {\n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n+    int_impl! { isize, i64, usize, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n      \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n      \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\","}, {"sha": "d48c02bf59c6463cffd8e29a68b3322a4c31b393", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -115,23 +115,13 @@ use crate::hint::spin_loop;\n \n /// Signals the processor that it is inside a busy-wait spin-loop (\"spin lock\").\n ///\n-/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n-/// power or switching hyper-threads.\n-///\n-/// This function is different from [`std::thread::yield_now`] which directly yields to the\n-/// system's scheduler, whereas `spin_loop_hint` does not interact with the operating system.\n-///\n-/// A common use case for `spin_loop_hint` is implementing bounded optimistic spinning in a CAS\n-/// loop in synchronization primitives. To avoid problems like priority inversion, it is strongly\n-/// recommended that the spin loop is terminated after a finite amount of iterations and an\n-/// appropriate blocking syscall is made.\n+/// This function is expected to be deprecated in favor of\n+/// [`hint::spin_loop`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all.\n ///\n-/// [`std::thread::yield_now`]: ../../../std/thread/fn.yield_now.html\n-/// [`std::thread::sleep`]: ../../../std/thread/fn.sleep.html\n-/// [`std::sync::Mutex`]: ../../../std/sync/struct.Mutex.html\n+/// [`hint::spin_loop`]: crate::hint::spin_loop\n #[inline]\n #[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n pub fn spin_loop_hint() {\n@@ -365,7 +355,8 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    pub fn into_inner(self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> bool {\n         self.v.into_inner() != 0\n     }\n \n@@ -941,7 +932,8 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"atomic_access\", since = \"1.15.0\")]\n-    pub fn into_inner(self) -> *mut T {\n+    #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+    pub const fn into_inner(self) -> *mut T {\n         self.p.into_inner()\n     }\n \n@@ -1462,7 +1454,8 @@ assert_eq!(some_var.into_inner(), 5);\n ```\"),\n                 #[inline]\n                 #[$stable_access]\n-                pub fn into_inner(self) -> $int_type {\n+                #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n+                pub const fn into_inner(self) -> $int_type {\n                     self.v.into_inner()\n                 }\n             }"}, {"sha": "6851f3fcd2fc753710b1225a7d4af4c3b89d53fe", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -39,15 +39,17 @@ impl<T> Poll<T> {\n \n     /// Returns `true` if this is `Poll::Ready`\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_poll\", since = \"1.49.0\")]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    pub fn is_ready(&self) -> bool {\n+    pub const fn is_ready(&self) -> bool {\n         matches!(*self, Poll::Ready(_))\n     }\n \n     /// Returns `true` if this is `Poll::Pending`\n     #[inline]\n+    #[rustc_const_stable(feature = \"const_poll\", since = \"1.49.0\")]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    pub fn is_pending(&self) -> bool {\n+    pub const fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n }"}, {"sha": "77517879dd2507f20df999d24caf294e5599042d", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -422,3 +422,15 @@ fn refcell_format() {\n     let msg = format!(\"{name} {}\", &*what.borrow(), name = &*name.borrow());\n     assert_eq!(msg, \"rust rocks\".to_string());\n }\n+\n+#[allow(dead_code)]\n+fn const_cells() {\n+    const UNSAFE_CELL: UnsafeCell<i32> = UnsafeCell::new(3);\n+    const _: i32 = UNSAFE_CELL.into_inner();\n+\n+    const REF_CELL: RefCell<i32> = RefCell::new(3);\n+    const _: i32 = REF_CELL.into_inner();\n+\n+    const CELL: Cell<i32> = Cell::new(3);\n+    const _: i32 = CELL.into_inner();\n+}"}, {"sha": "c9f9b890c39386538327f242a42712b8dac7d79a", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -9,6 +9,7 @@\n #![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n+#![feature(const_cell_into_inner)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -91,5 +92,6 @@ mod result;\n mod slice;\n mod str;\n mod str_lossy;\n+mod task;\n mod time;\n mod tuple;"}, {"sha": "d71fef9e5c87db5996bd6aafc4ec90bec4c788df", "filename": "library/core/tests/task.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Ftests%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fcore%2Ftests%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftask.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -0,0 +1,14 @@\n+use core::task::Poll;\n+\n+#[test]\n+fn poll_const() {\n+    // test that the methods of `Poll` are usable in a const context\n+\n+    const POLL: Poll<usize> = Poll::Pending;\n+\n+    const IS_READY: bool = POLL.is_ready();\n+    assert!(!IS_READY);\n+\n+    const IS_PENDING: bool = POLL.is_pending();\n+    assert!(IS_PENDING);\n+}"}, {"sha": "fa229251703a55cba6ea69218a8b687167ea50b8", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1390,8 +1390,6 @@ pub struct IntoValues<K, V> {\n /// A builder for computing where in a HashMap a key-value pair would be stored.\n ///\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n-///\n-/// [`HashMap::raw_entry_mut`]: HashMap::raw_entry_mut\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a mut HashMap<K, V, S>,\n@@ -1430,8 +1428,6 @@ pub struct RawVacantEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n /// A builder for computing where in a HashMap a key-value pair would be stored.\n ///\n /// See the [`HashMap::raw_entry`] docs for usage examples.\n-///\n-/// [`HashMap::raw_entry`]: HashMap::raw_entry\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilder<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a HashMap<K, V, S>,"}, {"sha": "bbee2cc98425ef852c62d1dc909b127f7e47699f", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -94,7 +94,8 @@ impl<T> Cursor<T> {\n     /// # force_inference(&buff);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new(inner: T) -> Cursor<T> {\n+    #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n+    pub const fn new(inner: T) -> Cursor<T> {\n         Cursor { pos: 0, inner }\n     }\n \n@@ -130,7 +131,8 @@ impl<T> Cursor<T> {\n     /// let reference = buff.get_ref();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get_ref(&self) -> &T {\n+    #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n+    pub const fn get_ref(&self) -> &T {\n         &self.inner\n     }\n \n@@ -175,7 +177,8 @@ impl<T> Cursor<T> {\n     /// assert_eq!(buff.position(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn position(&self) -> u64 {\n+    #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n+    pub const fn position(&self) -> u64 {\n         self.pos\n     }\n "}, {"sha": "5da31ce0ba7612b5a852d056b3cfc0d4893bebde", "filename": "library/std/src/io/cursor/tests.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Fcursor%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Fcursor%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor%2Ftests.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -514,3 +514,10 @@ fn test_eq() {\n \n     let _: AssertEq<Cursor<Vec<u8>>> = AssertEq(Cursor::new(Vec::new()));\n }\n+\n+#[allow(dead_code)]\n+fn const_cursor() {\n+    const CURSOR: Cursor<&[u8]> = Cursor::new(&[0]);\n+    const _: &&[u8] = CURSOR.get_ref();\n+    const _: u64 = CURSOR.position();\n+}"}, {"sha": "2b1f371129eaf5a405b6f32834800042af12629e", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -102,7 +102,8 @@ pub struct Empty {\n /// assert!(buffer.is_empty());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn empty() -> Empty {\n+#[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n+pub const fn empty() -> Empty {\n     Empty { _priv: () }\n }\n \n@@ -159,7 +160,8 @@ pub struct Repeat {\n /// assert_eq!(buffer, [0b101, 0b101, 0b101]);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn repeat(byte: u8) -> Repeat {\n+#[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n+pub const fn repeat(byte: u8) -> Repeat {\n     Repeat { byte }\n }\n \n@@ -226,7 +228,8 @@ pub struct Sink {\n /// assert_eq!(num_bytes, 5);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn sink() -> Sink {\n+#[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n+pub const fn sink() -> Sink {\n     Sink { _priv: () }\n }\n "}, {"sha": "9450b1ee1240c48c775590429dc74de195206c96", "filename": "library/std/src/io/util/tests.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil%2Ftests.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n use crate::io::prelude::*;\n-use crate::io::{copy, empty, repeat, sink};\n+use crate::io::{copy, empty, repeat, sink, Empty, Repeat, Sink};\n \n #[test]\n fn copy_copies() {\n@@ -43,3 +43,10 @@ fn take_some_bytes() {\n     assert_eq!(repeat(4).take(100).bytes().next().unwrap().unwrap(), 4);\n     assert_eq!(repeat(1).take(10).chain(repeat(2).take(10)).bytes().count(), 20);\n }\n+\n+#[allow(dead_code)]\n+fn const_utils() {\n+    const _: Empty = empty();\n+    const _: Repeat = repeat(b'c');\n+    const _: Sink = sink();\n+}"}, {"sha": "bc218b77c878f5fddbfcde760ec9c0d3970678a1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -242,6 +242,7 @@\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n #![feature(const_fn_fn_ptr_basics)]\n+#![feature(const_io_structs)]\n #![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n@@ -296,7 +297,6 @@\n #![feature(raw)]\n #![feature(raw_ref_macros)]\n #![feature(ready_macro)]\n-#![feature(renamed_spin_loop)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]\n #![feature(shrink_to)]"}, {"sha": "db0777ee9f080b88d2fae091e789bfd2c3bd6d41", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -535,9 +535,6 @@ unsafe impl<T: Send> Send for SyncSender<T> {}\n /// A **send** operation can only fail if the receiving end of a channel is\n /// disconnected, implying that the data could never be received. The error\n /// contains the data being sent as a payload so it can be recovered.\n-///\n-/// [`Sender::send`]: Sender::send\n-/// [`SyncSender::send`]: SyncSender::send\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, Clone, Copy)]\n pub struct SendError<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);"}, {"sha": "d67f0f81a9fb00cb985ad451232420fc049217f2", "filename": "library/std/src/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -143,7 +143,7 @@ pub enum advice {\n     WILLNEED = 6,\n }\n \n-/// Enumeration describing the kind of value stored in [`auxv`](struct.auxv.html).\n+/// Enumeration describing the kind of value stored in [`auxv`].\n #[repr(u32)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n #[non_exhaustive]\n@@ -246,7 +246,7 @@ pub struct condvar(pub u32);\n pub const CONDVAR_HAS_NO_WAITERS: condvar = condvar(0);\n \n /// Identifier for a device containing a file system. Can be used\n-/// in combination with [`inode`](struct.inode.html) to uniquely identify a file on the\n+/// in combination with [`inode`] to uniquely identify a file on the\n /// local system.\n #[repr(C)]\n #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n@@ -808,7 +808,7 @@ bitflags! {\n     const FILE_SYMLINK          = 0x0000000001000000;\n     /// The right to invoke [`file_unlink()`](fn.file_unlink.html).\n     const FILE_UNLINK           = 0x0000000002000000;\n-    /// The right to invoke [`mem_map()`](fn.mem_map.html) with [`mprot`](struct.mprot.html) set to\n+    /// The right to invoke [`mem_map()`](fn.mem_map.html) with [`mprot`] set to\n     /// zero.\n     const MEM_MAP               = 0x0000000004000000;\n     /// If [`MEM_MAP`](struct.rights.html#associatedconstant.MEM_MAP) is set, the right to invoke\n@@ -1020,7 +1020,7 @@ bitflags! {\n /// written it into locks when acquiring them for writing. It is\n /// not advised to use these identifiers for any other purpose.\n ///\n-/// As the thread identifier is also stored in [`lock`](struct.lock.html) when\n+/// As the thread identifier is also stored in [`lock`] when\n /// [`LOCK_WRLOCKED`](constant.LOCK_WRLOCKED.html) is set, the top two bits of the thread\n /// must always be set to zero.\n #[repr(C)]\n@@ -1373,7 +1373,7 @@ fn lookup_layout_test() {\n /// Entry point for a process (`_start`).\n ///\n /// **auxv**:\n-/// The auxiliary vector. See [`auxv`](struct.auxv.html).\n+/// The auxiliary vector. See [`auxv`].\n pub type processentry = unsafe extern \"C\" fn(auxv: *const auxv) -> ();\n \n /// Arguments of [`sock_recv()`](fn.sock_recv.html).\n@@ -2372,7 +2372,7 @@ pub unsafe fn file_open(\n ///\n /// When successful, the contents of the output buffer consist of\n /// a sequence of directory entries. Each directory entry consists\n-/// of a [`dirent`](struct.dirent.html) object, followed by [`dirent.d_namlen`](struct.dirent.html#structfield.d_namlen) bytes\n+/// of a [`dirent`] object, followed by [`dirent.d_namlen`](struct.dirent.html#structfield.d_namlen) bytes\n /// holding the name of the directory entry.\n ///\n /// This system call fills the output buffer as much as possible,"}, {"sha": "f79874a4aec9724b6432b029ba356710ce668ed5", "filename": "library/std/src/sys/sgx/ext/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,7 +1,7 @@\n //! SGX-specific extensions to general I/O primitives\n //!\n //! SGX file descriptors behave differently from Unix file descriptors. See the\n-//! description of [`TryIntoRawFd`](trait.TryIntoRawFd.html) for more details.\n+//! description of [`TryIntoRawFd`] for more details.\n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n use crate::net;"}, {"sha": "378d690f8bfd7d5cfa42a5550a6f182ae85cfed6", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -55,9 +55,18 @@ impl Socket {\n     pub fn new_raw(fam: c_int, ty: c_int) -> io::Result<Socket> {\n         unsafe {\n             cfg_if::cfg_if! {\n-                if #[cfg(target_os = \"linux\")] {\n-                    // On Linux we pass the SOCK_CLOEXEC flag to atomically create\n-                    // the socket and set it as CLOEXEC, added in 2.6.27.\n+                if #[cfg(any(\n+                    target_os = \"android\",\n+                    target_os = \"dragonfly\",\n+                    target_os = \"freebsd\",\n+                    target_os = \"illumos\",\n+                    target_os = \"linux\",\n+                    target_os = \"netbsd\",\n+                    target_os = \"opensbd\",\n+                ))] {\n+                    // On platforms that support it we pass the SOCK_CLOEXEC\n+                    // flag to atomically create the socket and set it as\n+                    // CLOEXEC. On Linux this was added in 2.6.27.\n                     let fd = cvt(libc::socket(fam, ty | libc::SOCK_CLOEXEC, 0))?;\n                     Ok(Socket(FileDesc::new(fd)))\n                 } else {\n@@ -83,7 +92,15 @@ impl Socket {\n             let mut fds = [0, 0];\n \n             cfg_if::cfg_if! {\n-                if #[cfg(target_os = \"linux\")] {\n+                if #[cfg(any(\n+                    target_os = \"android\",\n+                    target_os = \"dragonfly\",\n+                    target_os = \"freebsd\",\n+                    target_os = \"illumos\",\n+                    target_os = \"linux\",\n+                    target_os = \"netbsd\",\n+                    target_os = \"opensbd\",\n+                ))] {\n                     // Like above, set cloexec atomically\n                     cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr()))?;\n                     Ok((Socket(FileDesc::new(fds[0])), Socket(FileDesc::new(fds[1]))))\n@@ -174,13 +191,28 @@ impl Socket {\n     pub fn accept(&self, storage: *mut sockaddr, len: *mut socklen_t) -> io::Result<Socket> {\n         // Unfortunately the only known way right now to accept a socket and\n         // atomically set the CLOEXEC flag is to use the `accept4` syscall on\n-        // Linux. This was added in 2.6.28, glibc 2.10 and musl 0.9.5.\n+        // platforms that support it. On Linux, this was added in 2.6.28,\n+        // glibc 2.10 and musl 0.9.5.\n         cfg_if::cfg_if! {\n-            if #[cfg(target_os = \"linux\")] {\n+            if #[cfg(any(\n+                target_os = \"dragonfly\",\n+                target_os = \"freebsd\",\n+                target_os = \"illumos\",\n+                target_os = \"linux\",\n+                target_os = \"netbsd\",\n+                target_os = \"opensbd\",\n+            ))] {\n                 let fd = cvt_r(|| unsafe {\n                     libc::accept4(self.0.raw(), storage, len, libc::SOCK_CLOEXEC)\n                 })?;\n                 Ok(Socket(FileDesc::new(fd)))\n+            // While the Android kernel supports the syscall,\n+            // it is not included in all versions of Android's libc.\n+            } else if #[cfg(target_os = \"android\")] {\n+                let fd = cvt_r(|| unsafe {\n+                    libc::syscall(libc::SYS_accept4, self.0.raw(), storage, len, libc::SOCK_CLOEXEC)\n+                })?;\n+                Ok(Socket(FileDesc::new(fd as c_int)))\n             } else {\n                 let fd = cvt_r(|| unsafe { libc::accept(self.0.raw(), storage, len) })?;\n                 let fd = FileDesc::new(fd);"}, {"sha": "dd438858c37cd4c234ac48fe3a971445da9370fe", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -255,7 +255,7 @@ impl<T: 'static> LocalKey<T> {\n     ///\n     /// This will lazily initialize the value if this thread has not referenced\n     /// this key yet. If the key has been destroyed (which may happen if this is called\n-    /// in a destructor), this function will return an [`AccessError`](struct.AccessError.html).\n+    /// in a destructor), this function will return an [`AccessError`].\n     ///\n     /// # Panics\n     ///"}, {"sha": "fefaa77a2a104f9e6c60629d7368576d62886240", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -137,7 +137,6 @@\n //! [`thread::current`]: current\n //! [`thread::Result`]: Result\n //! [`unpark`]: Thread::unpark\n-//! [`Thread::name`]: Thread::name\n //! [`thread::park_timeout`]: park_timeout\n //! [`Cell`]: crate::cell::Cell\n //! [`RefCell`]: crate::cell::RefCell"}, {"sha": "c39a9b0ec02335ca450974b9c225d7a387a50d5a", "filename": "library/test/src/helpers/concurrency.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fconcurrency.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,18 +1,14 @@\n //! Helper module which helps to determine amount of threads to be used\n //! during tests execution.\n-use std::env;\n-use std::thread;\n+use std::{env, num::NonZeroUsize, thread};\n \n-#[allow(deprecated)]\n pub fn get_concurrency() -> usize {\n-    match env::var(\"RUST_TEST_THREADS\") {\n-        Ok(s) => {\n-            let opt_n: Option<usize> = s.parse().ok();\n-            match opt_n {\n-                Some(n) if n > 0 => n,\n-                _ => panic!(\"RUST_TEST_THREADS is `{}`, should be a positive integer.\", s),\n-            }\n+    if let Ok(value) = env::var(\"RUST_TEST_THREADS\") {\n+        match value.parse::<NonZeroUsize>().ok() {\n+            Some(n) => n.get(),\n+            _ => panic!(\"RUST_TEST_THREADS is `{}`, should be a positive integer.\", value),\n         }\n-        Err(..) => thread::available_concurrency().map(|n| n.get()).unwrap_or(1),\n+    } else {\n+        thread::available_concurrency().map(|n| n.get()).unwrap_or(1)\n     }\n }"}, {"sha": "40ea9afb6f695a3aed96ed3b158ba86b99c12465", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -913,11 +913,18 @@ impl Config {\n             set(&mut config.missing_tools, t.missing_tools);\n         }\n \n-        // Cargo does not provide a RUSTFMT environment variable, so we\n-        // synthesize it manually. Note that we also later check the config.toml\n-        // and set this to that path if necessary.\n-        let rustfmt = config.initial_rustc.with_file_name(exe(\"rustfmt\", config.build));\n-        config.initial_rustfmt = if rustfmt.exists() { Some(rustfmt) } else { None };\n+        config.initial_rustfmt = config.initial_rustfmt.or_else({\n+            let build = config.build;\n+            let initial_rustc = &config.initial_rustc;\n+\n+            move || {\n+                // Cargo does not provide a RUSTFMT environment variable, so we\n+                // synthesize it manually.\n+                let rustfmt = initial_rustc.with_file_name(exe(\"rustfmt\", build));\n+\n+                if rustfmt.exists() { Some(rustfmt) } else { None }\n+            }\n+        });\n \n         // Now that we've reached the end of our configuration, infer the\n         // default values for all options that we haven't otherwise stored yet."}, {"sha": "2b87c4b91af83d5add01015b886aaf62e50f95d0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1205,17 +1205,6 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n             if !builder.config.dry_run && matches!(suite, \"run-make\" | \"run-make-fulldeps\") {\n-                cmd.arg(\"--cc\")\n-                    .arg(builder.cc(target))\n-                    .arg(\"--cxx\")\n-                    .arg(builder.cxx(target).unwrap())\n-                    .arg(\"--cflags\")\n-                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"));\n-                copts_passed = true;\n-                if let Some(ar) = builder.ar(target) {\n-                    cmd.arg(\"--ar\").arg(ar);\n-                }\n-\n                 // The llvm/bin directory contains many useful cross-platform\n                 // tools. Pass the path to run-make tests so they can use them.\n                 let llvm_bin_path = llvm_config\n@@ -1241,6 +1230,21 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             }\n         }\n \n+        // Only pass correct values for these flags for the `run-make` suite as it\n+        // requires that a C++ compiler was configured which isn't always the case.\n+        if !builder.config.dry_run && matches!(suite, \"run-make\" | \"run-make-fulldeps\") {\n+            cmd.arg(\"--cc\")\n+                .arg(builder.cc(target))\n+                .arg(\"--cxx\")\n+                .arg(builder.cxx(target).unwrap())\n+                .arg(\"--cflags\")\n+                .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"));\n+            copts_passed = true;\n+            if let Some(ar) = builder.ar(target) {\n+                cmd.arg(\"--ar\").arg(ar);\n+            }\n+        }\n+\n         if !llvm_components_passed {\n             cmd.arg(\"--llvm-components\").arg(\"\");\n         }"}, {"sha": "ef55f31593b63150ac65cbef8dbbccd83e4bb9b0", "filename": "src/test/ui/lint/lint-const-item-mutation.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -29,6 +29,7 @@ const RAW_PTR: *mut u8 = 1 as *mut u8;\n const MUTABLE: Mutable = Mutable { msg: \"\" };\n const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n const VEC: Vec<i32> = Vec::new();\n+const PTR: *mut () = 1 as *mut _;\n \n fn main() {\n     ARRAY[0] = 5; //~ WARN attempting to modify\n@@ -50,4 +51,8 @@ fn main() {\n     MUTABLE.msg = \"wow\"; // no warning, because Drop observes the mutation\n     MUTABLE2.msg = \"wow\"; //~ WARN attempting to modify\n     VEC.push(0); //~ WARN taking a mutable reference to a `const` item\n+\n+    // Test that we don't warn when converting a raw pointer\n+    // into a mutable reference\n+    unsafe { &mut *PTR };\n }"}, {"sha": "ae95abc72f39acddb389bfe1f93cf2884e487ec2", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,45 +1,45 @@\n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:34:5\n+  --> $DIR/lint-const-item-mutation.rs:35:5\n    |\n LL |     ARRAY[0] = 5;\n    |     ^^^^^^^^^^^^\n    |\n    = note: `#[warn(const_item_mutation)]` on by default\n-   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+   = note: each usage of a `const` item creates a new temporary; the original `const` item will not be modified\n note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:26:1\n    |\n LL | const ARRAY: [u8; 1] = [25];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:35:5\n+  --> $DIR/lint-const-item-mutation.rs:36:5\n    |\n LL |     MY_STRUCT.field = false;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+   = note: each usage of a `const` item creates a new temporary; the original `const` item will not be modified\n note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:36:5\n+  --> $DIR/lint-const-item-mutation.rs:37:5\n    |\n LL |     MY_STRUCT.inner_array[0] = 'b';\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+   = note: each usage of a `const` item creates a new temporary; the original `const` item will not be modified\n note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:27:1\n    |\n LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:37:5\n+  --> $DIR/lint-const-item-mutation.rs:38:5\n    |\n LL |     MY_STRUCT.use_mut();\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -58,7 +58,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:38:5\n+  --> $DIR/lint-const-item-mutation.rs:39:5\n    |\n LL |     &mut MY_STRUCT;\n    |     ^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:39:5\n+  --> $DIR/lint-const-item-mutation.rs:40:5\n    |\n LL |     (&mut MY_STRUCT).use_mut();\n    |     ^^^^^^^^^^^^^^^^\n@@ -86,20 +86,20 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:51:5\n+  --> $DIR/lint-const-item-mutation.rs:52:5\n    |\n LL |     MUTABLE2.msg = \"wow\";\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n+   = note: each usage of a `const` item creates a new temporary; the original `const` item will not be modified\n note: `const` item defined here\n   --> $DIR/lint-const-item-mutation.rs:30:1\n    |\n LL | const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:52:5\n+  --> $DIR/lint-const-item-mutation.rs:53:5\n    |\n LL |     VEC.push(0);\n    |     ^^^^^^^^^^^"}, {"sha": "2b008ca3b3a9ab25a063b45beaffcce43efba356", "filename": "src/test/ui/print_type_sizes/anonymous.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n \n // All of the types that occur in this function are uninteresting, in\n // that one cannot control the sizes of these types with the same sort"}, {"sha": "3ef7b60db2caee840885f4631d0b169f90fc3757", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects."}, {"sha": "f1ad27ec131371988f2e0810fc4c709646dfb28b", "filename": "src/test/ui/print_type_sizes/multiple_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n \n // This file illustrates that when multiple structural types occur in\n // a function, every one of them is included in the output."}, {"sha": "37ac45f7e053ce5a059d49b464391fa30b1cc1ba", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects."}, {"sha": "e45e4794a3526a754357c88511c647a8d5637677", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects."}, {"sha": "269cc3cc2825fccc97c3991c15f7c61f43ba6705", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects."}, {"sha": "d1acad16d7e1d3a60a13b290408b751f2f1ae406", "filename": "src/test/ui/print_type_sizes/padding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n \n // This file illustrates how padding is handled: alignment\n // requirements can lead to the introduction of padding, either before"}, {"sha": "07544935b2f828480eafeceff869d76898ff001b", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects."}, {"sha": "b8067c112eef13c974e2d8f12afeba90feb80c40", "filename": "src/test/ui/print_type_sizes/repr_int_c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr_int_c.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n \n // This test makes sure that the tag is not grown for `repr(C)` or `repr(u8)`\n // variants (see https://github.com/rust-lang/rust/issues/50098 for the original bug)."}, {"sha": "c234547bd14b1219b7bde73342982b34af163215", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n //     FIXME: consider using an attribute instead of side-effects."}, {"sha": "6c8553cc23ded83bffdef6a0a643b9bd099970df", "filename": "src/test/ui/print_type_sizes/variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n \n // This file illustrates two things:\n //"}, {"sha": "e02a33109e56af728bd6776cf7b576290a0e27df", "filename": "src/test/ui/print_type_sizes/zero-sized-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z print-type-sizes\n-// build-pass (FIXME(62277): could be check-pass?)\n+// build-pass\n // ignore-pass\n \n // At one point, zero-sized fields such as those in this file were causing"}, {"sha": "dab1468d6aeed0e49f7d0569c1d2128b5a7751e0", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1 +1 @@\n-Subproject commit 1f686d5f707269b1086f6afcdced36225c0c5ff7\n+Subproject commit dab1468d6aeed0e49f7d0569c1d2128b5a7751e0"}, {"sha": "337d65e4da4947e9493da11968a0c1ea612edd4b", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -61,6 +61,7 @@ features = [\n ]\n \n [dependencies]\n+byteorder = { version = \"1\", features = ['default', 'std'] }\n curl-sys = { version = \"0.4.13\", features = [\"http2\", \"libnghttp2-sys\"], optional = true }\n crossbeam-utils = { version = \"0.7.2\", features = [\"nightly\"] }\n proc-macro2 = { version = \"1\", features = [\"default\"] }"}, {"sha": "eb894d53708122a67762de9489881c11aa8ce257", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -1 +1 @@\n-Subproject commit 97d0301011533e1c131c0edd660d77b4bd476c8b\n+Subproject commit eb894d53708122a67762de9489881c11aa8ce257"}, {"sha": "723d6cb25ed6a9726637ef7b871ce6a6068a7c71", "filename": "src/tools/x/Cargo.lock", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FCargo.lock?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -0,0 +1,5 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+[[package]]\n+name = \"x\"\n+version = \"0.1.0\""}, {"sha": "72c4948c617fa21bf006957a4f0d81e428cad86a", "filename": "src/tools/x/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FCargo.toml?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"x\"\n+version = \"0.1.0\"\n+description = \"Run x.py slightly more conveniently\"\n+authors = [\"Casey Rodarmor <casey@rodarmor.com>\"]\n+edition = \"2018\"\n+publish = false"}, {"sha": "3b3cf2847c2005af1235bc0da562c3ac82c2f303", "filename": "src/tools/x/README.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FREADME.md?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -0,0 +1,3 @@\n+# x\n+\n+`x` invokes `x.py` from any subdirectory."}, {"sha": "6c0311433d676a98a9771ae55011bdde04452c78", "filename": "src/tools/x/src/main.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1277d04db0dc8009037e872a1be7cdc2bd74a43/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=b1277d04db0dc8009037e872a1be7cdc2bd74a43", "patch": "@@ -0,0 +1,92 @@\n+//! Run `x.py` from any subdirectory of a rust compiler checkout.\n+//!\n+//! We prefer `exec`, to avoid adding an extra process in the process tree.\n+//! However, since `exec` isn't available on Windows, we indirect through\n+//! `exec_or_status`, which will call `exec` on unix and `status` on Windows.\n+//!\n+//! We use `python`, `python3`, or `python2` as the python interpreter to run\n+//! `x.py`, in that order of preference.\n+\n+use std::{\n+    env, io,\n+    process::{self, Command, ExitStatus},\n+};\n+\n+const PYTHON: &str = \"python\";\n+const PYTHON2: &str = \"python2\";\n+const PYTHON3: &str = \"python3\";\n+\n+fn python() -> &'static str {\n+    let val = match env::var_os(\"PATH\") {\n+        Some(val) => val,\n+        None => return PYTHON,\n+    };\n+\n+    let mut python2 = false;\n+    let mut python3 = false;\n+\n+    for dir in env::split_paths(&val) {\n+        if dir.join(PYTHON).exists() {\n+            return PYTHON;\n+        }\n+\n+        python2 |= dir.join(PYTHON2).exists();\n+        python3 |= dir.join(PYTHON3).exists();\n+    }\n+\n+    if python3 {\n+        PYTHON3\n+    } else if python2 {\n+        PYTHON2\n+    } else {\n+        PYTHON\n+    }\n+}\n+\n+#[cfg(unix)]\n+fn exec_or_status(command: &mut Command) -> io::Result<ExitStatus> {\n+    use std::os::unix::process::CommandExt;\n+    Err(command.exec())\n+}\n+\n+#[cfg(not(unix))]\n+fn exec_or_status(command: &mut Command) -> io::Result<ExitStatus> {\n+    command.status()\n+}\n+\n+fn main() {\n+    let current = match env::current_dir() {\n+        Ok(dir) => dir,\n+        Err(err) => {\n+            eprintln!(\"Failed to get current directory: {}\", err);\n+            process::exit(1);\n+        }\n+    };\n+\n+    for dir in current.ancestors() {\n+        let candidate = dir.join(\"x.py\");\n+\n+        if candidate.exists() {\n+            let mut python = Command::new(python());\n+\n+            python.arg(&candidate).args(env::args().skip(1)).current_dir(dir);\n+\n+            let result = exec_or_status(&mut python);\n+\n+            match result {\n+                Err(error) => {\n+                    eprintln!(\"Failed to invoke `{}`: {}\", candidate.display(), error);\n+                }\n+                Ok(status) => {\n+                    process::exit(status.code().unwrap_or(1));\n+                }\n+            }\n+        }\n+    }\n+\n+    eprintln!(\n+        \"x.py not found. Please run inside of a checkout of `https://github.com/rust-lang/rust`.\"\n+    );\n+\n+    process::exit(1);\n+}"}]}