{"sha": "464fb9f0d45d0b5226936222727ca9b76f5b8424", "node_id": "C_kwDOAAsO6NoAKDQ2NGZiOWYwZDQ1ZDBiNTIyNjkzNjIyMjcyN2NhOWI3NmY1Yjg0MjQ", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T10:56:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T10:56:41Z"}, "message": "add directory for regression tests", "tree": {"sha": "8839dbfbc24a646016eac2ae0e684d965b010519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8839dbfbc24a646016eac2ae0e684d965b010519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/464fb9f0d45d0b5226936222727ca9b76f5b8424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/464fb9f0d45d0b5226936222727ca9b76f5b8424", "html_url": "https://github.com/rust-lang/rust/commit/464fb9f0d45d0b5226936222727ca9b76f5b8424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/464fb9f0d45d0b5226936222727ca9b76f5b8424/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ad502dbdb0bb51149ac62ec6227b6a717da05dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad502dbdb0bb51149ac62ec6227b6a717da05dd", "html_url": "https://github.com/rust-lang/rust/commit/5ad502dbdb0bb51149ac62ec6227b6a717da05dd"}], "stats": {"total": 343, "additions": 176, "deletions": 167}, "files": [{"sha": "956a6466ccc8361924faabc64f94836b44e09f14", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 1, "deletions": 167, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/464fb9f0d45d0b5226936222727ca9b76f5b8424/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464fb9f0d45d0b5226936222727ca9b76f5b8424/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=464fb9f0d45d0b5226936222727ca9b76f5b8424", "patch": "@@ -4,6 +4,7 @@\n mod tt_conversion;\n mod matching;\n mod meta_syntax;\n+mod regression;\n \n use expect_test::expect;\n \n@@ -1427,170 +1428,3 @@ macro_rules! foo {\n \"#]],\n     );\n }\n-\n-// The following tests are based on real world situations\n-#[test]\n-fn test_vec() {\n-    check(\n-        r#\"\n-macro_rules! vec {\n-   ($($item:expr),*) => {{\n-           let mut v = Vec::new();\n-           $( v.push($item); )*\n-           v\n-    }};\n-}\n-fn main() {\n-    vec!();\n-    vec![1u32,2];\n-}\n-\"#,\n-        expect![[r#\"\n-macro_rules! vec {\n-   ($($item:expr),*) => {{\n-           let mut v = Vec::new();\n-           $( v.push($item); )*\n-           v\n-    }};\n-}\n-fn main() {\n-     {\n-        let mut v = Vec::new();\n-        v\n-    };\n-     {\n-        let mut v = Vec::new();\n-        v.push(1u32);\n-        v.push(2);\n-        v\n-    };\n-}\n-\"#]],\n-    );\n-}\n-\n-#[test]\n-fn test_winapi_struct() {\n-    // from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/macros.rs#L366\n-\n-    check(\n-        r#\"\n-macro_rules! STRUCT {\n-    ($(#[$attrs:meta])* struct $name:ident {\n-        $($field:ident: $ftype:ty,)+\n-    }) => (\n-        #[repr(C)] #[derive(Copy)] $(#[$attrs])*\n-        pub struct $name {\n-            $(pub $field: $ftype,)+\n-        }\n-        impl Clone for $name {\n-            #[inline]\n-            fn clone(&self) -> $name { *self }\n-        }\n-        #[cfg(feature = \"impl-default\")]\n-        impl Default for $name {\n-            #[inline]\n-            fn default() -> $name { unsafe { $crate::_core::mem::zeroed() } }\n-        }\n-    );\n-}\n-\n-// from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/shared/d3d9caps.rs\n-STRUCT!{struct D3DVSHADERCAPS2_0 {Caps: u8,}}\n-\n-STRUCT!{#[cfg_attr(target_arch = \"x86\", repr(packed))] struct D3DCONTENTPROTECTIONCAPS {Caps : u8 ,}}\n-\"#,\n-        expect![[r##\"\n-macro_rules! STRUCT {\n-    ($(#[$attrs:meta])* struct $name:ident {\n-        $($field:ident: $ftype:ty,)+\n-    }) => (\n-        #[repr(C)] #[derive(Copy)] $(#[$attrs])*\n-        pub struct $name {\n-            $(pub $field: $ftype,)+\n-        }\n-        impl Clone for $name {\n-            #[inline]\n-            fn clone(&self) -> $name { *self }\n-        }\n-        #[cfg(feature = \"impl-default\")]\n-        impl Default for $name {\n-            #[inline]\n-            fn default() -> $name { unsafe { $crate::_core::mem::zeroed() } }\n-        }\n-    );\n-}\n-\n-#[repr(C)]\n-#[derive(Copy)] pub struct D3DVSHADERCAPS2_0 {\n-    pub Caps: u8,\n-}\n-impl Clone for D3DVSHADERCAPS2_0 {\n-    #[inline] fn clone(&self ) -> D3DVSHADERCAPS2_0 {\n-        *self\n-    }\n-}\n-#[cfg(feature = \"impl-default\")] impl Default for D3DVSHADERCAPS2_0 {\n-    #[inline] fn default() -> D3DVSHADERCAPS2_0 {\n-        unsafe {\n-            $crate::_core::mem::zeroed()\n-        }\n-    }\n-}\n-\n-#[repr(C)]\n-#[derive(Copy)]\n-#[cfg_attr(target_arch = \"x86\", repr(packed))] pub struct D3DCONTENTPROTECTIONCAPS {\n-    pub Caps: u8,\n-}\n-impl Clone for D3DCONTENTPROTECTIONCAPS {\n-    #[inline] fn clone(&self ) -> D3DCONTENTPROTECTIONCAPS {\n-        *self\n-    }\n-}\n-#[cfg(feature = \"impl-default\")] impl Default for D3DCONTENTPROTECTIONCAPS {\n-    #[inline] fn default() -> D3DCONTENTPROTECTIONCAPS {\n-        unsafe {\n-            $crate::_core::mem::zeroed()\n-        }\n-    }\n-}\n-\"##]],\n-    );\n-}\n-\n-#[test]\n-fn test_int_base() {\n-    check(\n-        r#\"\n-macro_rules! int_base {\n-    ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl fmt::$Trait for $T {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                $Radix.fmt_int(*self as $U, f)\n-            }\n-        }\n-    }\n-}\n-int_base!{Binary for isize as usize -> Binary}\n-\"#,\n-        expect![[r##\"\n-macro_rules! int_base {\n-    ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl fmt::$Trait for $T {\n-            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                $Radix.fmt_int(*self as $U, f)\n-            }\n-        }\n-    }\n-}\n-#[stable(feature = \"rust1\", since = \"1.0.0\")] impl fmt::Binary for isize {\n-    fn fmt(&self , f: &mut fmt::Formatter< '_>) -> fmt::Result {\n-        Binary.fmt_int(*self as usize, f)\n-    }\n-}\n-\"##]],\n-    );\n-}"}, {"sha": "0a2c733468cdca458182cb931d45b6c7855203e2", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/regression.rs", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/464fb9f0d45d0b5226936222727ca9b76f5b8424/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/464fb9f0d45d0b5226936222727ca9b76f5b8424/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=464fb9f0d45d0b5226936222727ca9b76f5b8424", "patch": "@@ -0,0 +1,175 @@\n+//! Real world regressions and issues, not particularly minimized.\n+//!\n+//! While it's OK to just dump large macros here, it's preferable to come up\n+//! with a minimal example for the program and put a specific test to the parent\n+//! directory.\n+\n+use expect_test::expect;\n+\n+use crate::macro_expansion_tests::check;\n+\n+#[test]\n+fn test_vec() {\n+    check(\n+        r#\"\n+macro_rules! vec {\n+   ($($item:expr),*) => {{\n+           let mut v = Vec::new();\n+           $( v.push($item); )*\n+           v\n+    }};\n+}\n+fn main() {\n+    vec!();\n+    vec![1u32,2];\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! vec {\n+   ($($item:expr),*) => {{\n+           let mut v = Vec::new();\n+           $( v.push($item); )*\n+           v\n+    }};\n+}\n+fn main() {\n+     {\n+        let mut v = Vec::new();\n+        v\n+    };\n+     {\n+        let mut v = Vec::new();\n+        v.push(1u32);\n+        v.push(2);\n+        v\n+    };\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_winapi_struct() {\n+    // from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/macros.rs#L366\n+\n+    check(\n+        r#\"\n+macro_rules! STRUCT {\n+    ($(#[$attrs:meta])* struct $name:ident {\n+        $($field:ident: $ftype:ty,)+\n+    }) => (\n+        #[repr(C)] #[derive(Copy)] $(#[$attrs])*\n+        pub struct $name {\n+            $(pub $field: $ftype,)+\n+        }\n+        impl Clone for $name {\n+            #[inline]\n+            fn clone(&self) -> $name { *self }\n+        }\n+        #[cfg(feature = \"impl-default\")]\n+        impl Default for $name {\n+            #[inline]\n+            fn default() -> $name { unsafe { $crate::_core::mem::zeroed() } }\n+        }\n+    );\n+}\n+\n+// from https://github.com/retep998/winapi-rs/blob/a7ef2bca086aae76cf6c4ce4c2552988ed9798ad/src/shared/d3d9caps.rs\n+STRUCT!{struct D3DVSHADERCAPS2_0 {Caps: u8,}}\n+\n+STRUCT!{#[cfg_attr(target_arch = \"x86\", repr(packed))] struct D3DCONTENTPROTECTIONCAPS {Caps : u8 ,}}\n+\"#,\n+        expect![[r##\"\n+macro_rules! STRUCT {\n+    ($(#[$attrs:meta])* struct $name:ident {\n+        $($field:ident: $ftype:ty,)+\n+    }) => (\n+        #[repr(C)] #[derive(Copy)] $(#[$attrs])*\n+        pub struct $name {\n+            $(pub $field: $ftype,)+\n+        }\n+        impl Clone for $name {\n+            #[inline]\n+            fn clone(&self) -> $name { *self }\n+        }\n+        #[cfg(feature = \"impl-default\")]\n+        impl Default for $name {\n+            #[inline]\n+            fn default() -> $name { unsafe { $crate::_core::mem::zeroed() } }\n+        }\n+    );\n+}\n+\n+#[repr(C)]\n+#[derive(Copy)] pub struct D3DVSHADERCAPS2_0 {\n+    pub Caps: u8,\n+}\n+impl Clone for D3DVSHADERCAPS2_0 {\n+    #[inline] fn clone(&self ) -> D3DVSHADERCAPS2_0 {\n+        *self\n+    }\n+}\n+#[cfg(feature = \"impl-default\")] impl Default for D3DVSHADERCAPS2_0 {\n+    #[inline] fn default() -> D3DVSHADERCAPS2_0 {\n+        unsafe {\n+            $crate::_core::mem::zeroed()\n+        }\n+    }\n+}\n+\n+#[repr(C)]\n+#[derive(Copy)]\n+#[cfg_attr(target_arch = \"x86\", repr(packed))] pub struct D3DCONTENTPROTECTIONCAPS {\n+    pub Caps: u8,\n+}\n+impl Clone for D3DCONTENTPROTECTIONCAPS {\n+    #[inline] fn clone(&self ) -> D3DCONTENTPROTECTIONCAPS {\n+        *self\n+    }\n+}\n+#[cfg(feature = \"impl-default\")] impl Default for D3DCONTENTPROTECTIONCAPS {\n+    #[inline] fn default() -> D3DCONTENTPROTECTIONCAPS {\n+        unsafe {\n+            $crate::_core::mem::zeroed()\n+        }\n+    }\n+}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_int_base() {\n+    check(\n+        r#\"\n+macro_rules! int_base {\n+    ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl fmt::$Trait for $T {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                $Radix.fmt_int(*self as $U, f)\n+            }\n+        }\n+    }\n+}\n+int_base!{Binary for isize as usize -> Binary}\n+\"#,\n+        expect![[r##\"\n+macro_rules! int_base {\n+    ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl fmt::$Trait for $T {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                $Radix.fmt_int(*self as $U, f)\n+            }\n+        }\n+    }\n+}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")] impl fmt::Binary for isize {\n+    fn fmt(&self , f: &mut fmt::Formatter< '_>) -> fmt::Result {\n+        Binary.fmt_int(*self as usize, f)\n+    }\n+}\n+\"##]],\n+    );\n+}"}]}