{"sha": "c78bfbae286174f3a07b0d0c77b702845a691931", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OGJmYmFlMjg2MTc0ZjNhMDdiMGQwYzc3YjcwMjg0NWE2OTE5MzE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-18T22:58:10Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-18T23:05:14Z"}, "message": "Use consistent punctuation for 'Prelude contents' docs", "tree": {"sha": "1ab952abb069aa8e03fd5ac026b148e17b7c69fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab952abb069aa8e03fd5ac026b148e17b7c69fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c78bfbae286174f3a07b0d0c77b702845a691931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c78bfbae286174f3a07b0d0c77b702845a691931", "html_url": "https://github.com/rust-lang/rust/commit/c78bfbae286174f3a07b0d0c77b702845a691931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c78bfbae286174f3a07b0d0c77b702845a691931/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f74583445702e2e27ec4415376f2c540a83d7ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/f74583445702e2e27ec4415376f2c540a83d7ded", "html_url": "https://github.com/rust-lang/rust/commit/f74583445702e2e27ec4415376f2c540a83d7ded"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "a83c280adcb2d838313dd907a32686e621192add", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c78bfbae286174f3a07b0d0c77b702845a691931/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78bfbae286174f3a07b0d0c77b702845a691931/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=c78bfbae286174f3a07b0d0c77b702845a691931", "patch": "@@ -28,35 +28,35 @@\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]},\n-//!   marker traits that indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}, various\n+//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}:\n+//!   Marker traits that indicate fundamental properties of types.\n+//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: Various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`][`mem::drop`], a convenience function for explicitly\n+//! * [`std::mem`]::[`drop`][`mem::drop`]: A convenience function for explicitly\n //!   dropping a value.\n-//! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`], the conversion trait that defines\n+//! * [`std::boxed`]::[`Box`]: A way to allocate values on the heap.\n+//! * [`std::borrow`]::[`ToOwned`]: The conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines\n+//! * [`std::clone`]::[`Clone`]: The ubiquitous trait that defines\n //!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }, the\n+//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: The\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}, generic\n+//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: Generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n //! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`]\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}, iterators of various\n+//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n+//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: Iterators of various\n //!   kinds.\n //! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}, a type\n+//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: A type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n-//! * [`std::string`]::{[`String`], [`ToString`]}, heap allocated strings.\n-//! * [`std::vec`]::[`Vec`], a growable, heap-allocated vector.\n+//! * [`std::string`]::{[`String`], [`ToString`]}: Heap-allocated strings.\n+//! * [`std::vec`]::[`Vec`]: A growable, heap-allocated vector.\n //!\n //! [`mem::drop`]: crate::mem::drop\n //! [`std::borrow`]: crate::borrow"}]}