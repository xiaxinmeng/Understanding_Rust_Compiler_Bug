{"sha": "194dd9eb0d44284f7e952a1e84296fcda4d90f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NGRkOWViMGQ0NDI4NGY3ZTk1MmExZTg0Mjk2ZmNkYTRkOTBmNWU=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-05-22T17:13:17Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-22T19:05:28Z"}, "message": "Use Chalk's Ty::Function for function pointer types\n\nFunction pointers can be 'higher-ranked' over lifetimes, which is why they're\nnot an application type in Chalk, but since we don't model lifetimes it doesn't\nmatter for us yet.", "tree": {"sha": "0a8f9cd65553cd6cae0a4cf3598adfcf61ac9688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8f9cd65553cd6cae0a4cf3598adfcf61ac9688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194dd9eb0d44284f7e952a1e84296fcda4d90f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194dd9eb0d44284f7e952a1e84296fcda4d90f5e", "html_url": "https://github.com/rust-lang/rust/commit/194dd9eb0d44284f7e952a1e84296fcda4d90f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194dd9eb0d44284f7e952a1e84296fcda4d90f5e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbc210bc1216b79e355eb70449caf08dc67d5ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbc210bc1216b79e355eb70449caf08dc67d5ad", "html_url": "https://github.com/rust-lang/rust/commit/bfbc210bc1216b79e355eb70449caf08dc67d5ad"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "0419bc751b20a49f1095ff32e919521dfee6aee8", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/194dd9eb0d44284f7e952a1e84296fcda4d90f5e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194dd9eb0d44284f7e952a1e84296fcda4d90f5e/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=194dd9eb0d44284f7e952a1e84296fcda4d90f5e", "patch": "@@ -2685,6 +2685,38 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn builtin_fn_ptr_copy() {\n+    assert_snapshot!(\n+        infer_with_mismatches(r#\"\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+trait Test { fn test(&self) -> bool; }\n+impl<T: Copy> Test for T {}\n+\n+fn test(f1: fn(), f2: fn(usize) -> u8, f3: fn(u8, u8) -> &u8) {\n+    f1.test();\n+    f2.test();\n+    f3.test();\n+}\n+\"#, true),\n+        @r###\"\n+    55..59 'self': &Self\n+    109..111 'f1': fn()\n+    119..121 'f2': fn(usize) -> u8\n+    140..142 'f3': fn(u8, u8) -> &u8\n+    163..211 '{     ...t(); }': ()\n+    169..171 'f1': fn()\n+    169..178 'f1.test()': bool\n+    184..186 'f2': fn(usize) -> u8\n+    184..193 'f2.test()': bool\n+    199..201 'f3': fn(u8, u8) -> &u8\n+    199..208 'f3.test()': bool\n+    \"###\n+    );\n+}\n+\n #[test]\n fn builtin_sized() {\n     assert_snapshot!("}, {"sha": "7082cb09573a2a9ad7871260364c02aca98f3164", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/194dd9eb0d44284f7e952a1e84296fcda4d90f5e/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194dd9eb0d44284f7e952a1e84296fcda4d90f5e/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=194dd9eb0d44284f7e952a1e84296fcda4d90f5e", "patch": "@@ -26,14 +26,19 @@ impl ToChalk for Ty {\n     type Chalk = chalk_ir::Ty<Interner>;\n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::Ty<Interner> {\n         match self {\n-            Ty::Apply(apply_ty) => {\n-                if let TypeCtor::Ref(m) = apply_ty.ctor {\n-                    return ref_to_chalk(db, m, apply_ty.parameters);\n+            Ty::Apply(apply_ty) => match apply_ty.ctor {\n+                TypeCtor::Ref(m) => ref_to_chalk(db, m, apply_ty.parameters),\n+                TypeCtor::FnPtr { num_args: _ } => {\n+                    let substitution = apply_ty.parameters.to_chalk(db).shifted_in(&Interner);\n+                    chalk_ir::TyData::Function(chalk_ir::Fn { num_binders: 0, substitution })\n+                        .intern(&Interner)\n                 }\n-                let name = apply_ty.ctor.to_chalk(db);\n-                let substitution = apply_ty.parameters.to_chalk(db);\n-                chalk_ir::ApplicationTy { name, substitution }.cast(&Interner).intern(&Interner)\n-            }\n+                _ => {\n+                    let name = apply_ty.ctor.to_chalk(db);\n+                    let substitution = apply_ty.parameters.to_chalk(db);\n+                    chalk_ir::ApplicationTy { name, substitution }.cast(&Interner).intern(&Interner)\n+                }\n+            },\n             Ty::Projection(proj_ty) => {\n                 let associated_ty_id = proj_ty.associated_ty.to_chalk(db);\n                 let substitution = proj_ty.parameters.to_chalk(db);\n@@ -93,7 +98,13 @@ impl ToChalk for Ty {\n                 Ty::Projection(ProjectionTy { associated_ty, parameters })\n             }\n             chalk_ir::TyData::Alias(chalk_ir::AliasTy::Opaque(_)) => unimplemented!(),\n-            chalk_ir::TyData::Function(_) => unimplemented!(),\n+            chalk_ir::TyData::Function(chalk_ir::Fn { num_binders: _, substitution }) => {\n+                let parameters: Substs = from_chalk(db, substitution);\n+                Ty::Apply(ApplicationTy {\n+                    ctor: TypeCtor::FnPtr { num_args: (parameters.len() - 1) as u16 },\n+                    parameters,\n+                })\n+            }\n             chalk_ir::TyData::BoundVar(idx) => Ty::Bound(idx),\n             chalk_ir::TyData::InferenceVar(_iv) => Ty::Unknown,\n             chalk_ir::TyData::Dyn(where_clauses) => {"}]}