{"sha": "8a572a540af53bee712bc50a9d882a1c1376174c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTcyYTU0MGFmNTNiZWU3MTJiYzUwYTlkODgyYTFjMTM3NjE3NGM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-01-07T16:53:33Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-21T10:02:25Z"}, "message": "Add tests for wildcard_imports lint", "tree": {"sha": "003d6194aaf1e9861fe87d08b4bcf2de8f19fd30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/003d6194aaf1e9861fe87d08b4bcf2de8f19fd30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a572a540af53bee712bc50a9d882a1c1376174c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl5PqrEACgkQaTCGhp1Q\nZjeM7Q/9Gh8XLccCYxL7LoZNHHhSGRi5U18ScYoMZ74HFaWBm4aU5Nq8C+PVHFCL\n111iJTOsdo2VzDr000C/3XYgOrGOc2x/wyobXl0EmjG8/6+eZmddlDI0cE0t3s3L\n+YCf6XD/IialElpT4nOMwCW6qXlM1KbFjdwBY4iQjeM05MeE7E8vupQsfSKAm94Z\nvOl9T49Hp+Kg3tQJPuWONccvJFqd4P7LOg2reGgTlr+4T1/uWRiLJKeBFN6w8jc7\nzpZIB7OSJjkk1pBy8HsN+FxohPDasPUadSQbPCJjmOMoxAKdpNP3hXgZ8HsRSboc\nHx8SSjVNbNKLu47CmCaMXusDzvnmJlVbbu9+uuJd44cDul7NeB/uDD4Qev5sk7E8\ngv2Q1DHdtEKXy1FxWF1Sa0ubYhG3M6GAvnw97J7YonT9pIdPMZ+w8DqhrlBBtzCU\nuv2RDuTbUq4BuMBgz2Z1Jwz56vZt0dBNrE+VK39cdldUeXkcC9bnqnzi2N01qQ8s\nDKehOo+1LaBhxyUSXeZeauwwO/y577OwLJyya55jHAnKDnGNuJ0+JjEXshpRI2mi\ndxVL6mbE4cbF0f8jpRcrMGV6eMjn4W2IlnWMd+aWXtOOBFzQuB1J+S7lsg8MIxV/\nrFDW441y2EshDhFLW1XpIrMc8lvl4DgJ+vXCmbh4pfM3CPc8xsw=\n=lvTt\n-----END PGP SIGNATURE-----", "payload": "tree 003d6194aaf1e9861fe87d08b4bcf2de8f19fd30\nparent acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70\nauthor flip1995 <hello@philkrones.com> 1578416013 +0100\ncommitter flip1995 <hello@philkrones.com> 1582279345 +0100\n\nAdd tests for wildcard_imports lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a572a540af53bee712bc50a9d882a1c1376174c", "html_url": "https://github.com/rust-lang/rust/commit/8a572a540af53bee712bc50a9d882a1c1376174c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a572a540af53bee712bc50a9d882a1c1376174c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "html_url": "https://github.com/rust-lang/rust/commit/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70"}], "stats": {"total": 377, "additions": 377, "deletions": 0}, "files": [{"sha": "414477aedd78323ccb46ebe0eea1be00f3d7b841", "filename": "tests/ui/auxiliary/wildcard_imports_helper.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fauxiliary%2Fwildcard_imports_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fauxiliary%2Fwildcard_imports_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fwildcard_imports_helper.rs?ref=8a572a540af53bee712bc50a9d882a1c1376174c", "patch": "@@ -0,0 +1,21 @@\n+pub use crate::extern_exports::*;\n+\n+pub fn extern_foo() {}\n+pub fn extern_bar() {}\n+\n+pub struct ExternA;\n+\n+pub mod inner {\n+    pub mod inner_for_self_import {\n+        pub fn inner_extern_foo() {}\n+        pub fn inner_extern_bar() {}\n+    }\n+}\n+\n+mod extern_exports {\n+    pub fn extern_exported() {}\n+    pub struct ExternExportedStruct;\n+    pub enum ExternExportedEnum {\n+        A,\n+    }\n+}"}, {"sha": "97c8c6068e55ea24771a90f9b102b817f3428465", "filename": "tests/ui/wildcard_imports.fixed", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=8a572a540af53bee712bc50a9d882a1c1376174c", "patch": "@@ -0,0 +1,137 @@\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::foo;\n+use crate::mod_mod::inner_mod;\n+use crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod};\n+#[macro_use]\n+use crate::struct_mod::{A, inner_struct_mod};\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import;\n+use wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar;\n+use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::foo;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, inner_extern_foo};\n+        use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::inner_foo, inner2::inner_bar};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported};\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::{ExportedEnum, ExportedStruct, exported};\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}"}, {"sha": "045356672e3afbdf19b1261565c5229ee8233a84", "filename": "tests/ui/wildcard_imports.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=8a572a540af53bee712bc50a9d882a1c1376174c", "patch": "@@ -0,0 +1,137 @@\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::*;\n+use crate::mod_mod::*;\n+use crate::multi_fn_mod::*;\n+#[macro_use]\n+use crate::struct_mod::*;\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import;\n+use wildcard_imports_helper::inner::inner_for_self_import::*;\n+use wildcard_imports_helper::*;\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::*;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+        use wildcard_imports_helper::*;\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::*, inner2::*};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::*;\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::*;\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}"}, {"sha": "111481e52d030dac9de93c40d615630a093b2224", "filename": "tests/ui/wildcard_imports.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a572a540af53bee712bc50a9d882a1c1376174c/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=8a572a540af53bee712bc50a9d882a1c1376174c", "patch": "@@ -0,0 +1,82 @@\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:10:5\n+   |\n+LL | use crate::fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+   |\n+   = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:11:5\n+   |\n+LL | use crate::mod_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:12:5\n+   |\n+LL | use crate::multi_fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:14:5\n+   |\n+LL | use crate::struct_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:18:5\n+   |\n+LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:19:5\n+   |\n+LL | use wildcard_imports_helper::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:78:13\n+   |\n+LL |         use crate::fn_mod::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:84:75\n+   |\n+LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+   |                                                                           ^ help: try: `inner_extern_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:85:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:96:20\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                    ^^^^^^^^ help: try: `inner::inner_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:96:30\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:103:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:132:9\n+   |\n+LL |     use crate::in_fn_test::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n+\n+error: aborting due to 13 previous errors\n+"}]}