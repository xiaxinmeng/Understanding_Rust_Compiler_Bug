{"sha": "c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Y2NkMGI2YTFkYmY1MmE5OGZhM2UwODY5MTkzNDYyMTNmODdmNmU=", "commit": {"author": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-07T19:10:01Z"}, "committer": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-13T11:04:58Z"}, "message": "Fix nits\n\nCo-authored-by: bjorn3 <bjorn3@users.noreply.github.com>", "tree": {"sha": "02a0a0b07d1ee01c016b3b0d473ff259fab0889a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a0a0b07d1ee01c016b3b0d473ff259fab0889a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "html_url": "https://github.com/rust-lang/rust/commit/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4bcef11136922e17eb7d202ebe76d28e6b4e7d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bcef11136922e17eb7d202ebe76d28e6b4e7d4", "html_url": "https://github.com/rust-lang/rust/commit/f4bcef11136922e17eb7d202ebe76d28e6b4e7d4"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "052b9245308292433a743eb3702962841930aa4d", "filename": "src/data_race.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -240,7 +240,6 @@ struct MemoryCellClocks {\n }\n \n impl MemoryCellClocks {\n-\n     /// Create a new set of clocks representing memory allocated\n     ///  at a given vector timestamp and index.\n     fn new(alloc: VTimestamp, alloc_index: VectorIdx) -> Self {\n@@ -676,7 +675,6 @@ pub struct VClockAlloc {\n }\n \n impl VClockAlloc {\n-\n     /// Create a new data-race detector for newly allocated memory.\n     pub fn new_allocation(global: &MemoryExtra, len: Size, track_alloc: bool) -> VClockAlloc {\n         let (alloc_timestamp, alloc_index) = if track_alloc {"}, {"sha": "9ebb793c71ba97689f9510d16b42f88292eeee94", "filename": "tests/compile-fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Falloc_read_race.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -24,9 +24,9 @@ pub fn main() {\n     //  2. write\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n             pointer.store(Box::into_raw(Box::new(0usize)), Ordering::Relaxed);\n         });"}, {"sha": "229d3cea2c93478d0285d8d34835fe29992e4c78", "filename": "tests/compile-fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Falloc_write_race.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -24,9 +24,9 @@ pub fn main() {\n     //  2. write\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n             pointer.store(Box::into_raw(Box::new(0usize)), Ordering::Relaxed);\n         });"}, {"sha": "275d1d1cccf0c509d95575d2c77da8fb6ce0ecdc", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -27,9 +27,9 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;"}, {"sha": "d5131687d78b3ce00a4881a5468e4c2b9a8a8bfe", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack_drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -27,9 +27,9 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n \n             let mut stack_var = 0usize;"}, {"sha": "3fcbe7661ff4a7041400c3af32946c7518400e98", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -27,9 +27,9 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;"}, {"sha": "5483be9f788fdaed983ce0df7866461c34815c58", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack_drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -27,9 +27,9 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n \n             let mut stack_var = 0usize;"}, {"sha": "7f2dbcc6ed5df947242e4359963b1ded1a9a9284", "filename": "tests/compile-fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fread_write_race_stack.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -29,9 +29,9 @@ pub fn main() {\n     //  5. read-value\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n \n             let mut stack_var = 0usize;"}, {"sha": "51bf0120d69fd78335a7e9ca1b167d0f7ec815b8", "filename": "tests/compile-fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ccd0b6a1dbf52a98fa3e086919346213f87f6e/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=c4ccd0b6a1dbf52a98fa3e086919346213f87f6e", "patch": "@@ -29,9 +29,9 @@ pub fn main() {\n     //  5. write-value\n     unsafe {\n         let j1 = spawn(move || {\n-            //Concurrent allocate the memory.\n-            //Uses relaxed semantics to not generate\n-            //a release sequence.\n+            // Concurrent allocate the memory.\n+            // Uses relaxed semantics to not generate\n+            // a release sequence.\n             let pointer = &*ptr.0;\n \n             let mut stack_var = 0usize;"}]}