{"sha": "2d652d9d735f10402803318351f7a8ee91fc4c47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNjUyZDlkNzM1ZjEwNDAyODAzMzE4MzUxZjdhOGVlOTFmYzRjNDc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-23T23:23:01Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-24T22:08:59Z"}, "message": "Add generator-debug test for MSVC\n\n..which doesn't use variant types.", "tree": {"sha": "b735f452cb92d3e5d437601790c66c8360c96b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b735f452cb92d3e5d437601790c66c8360c96b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d652d9d735f10402803318351f7a8ee91fc4c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d652d9d735f10402803318351f7a8ee91fc4c47", "html_url": "https://github.com/rust-lang/rust/commit/2d652d9d735f10402803318351f7a8ee91fc4c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d652d9d735f10402803318351f7a8ee91fc4c47/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "477ecc51caea03c22eb6c7dedcf5656593b71fb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/477ecc51caea03c22eb6c7dedcf5656593b71fb0", "html_url": "https://github.com/rust-lang/rust/commit/477ecc51caea03c22eb6c7dedcf5656593b71fb0"}], "stats": {"total": 106, "additions": 98, "deletions": 8}, "files": [{"sha": "33351c06d27ee0cb253ed9f57d7c6820c5802ef3", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d652d9d735f10402803318351f7a8ee91fc4c47/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d652d9d735f10402803318351f7a8ee91fc4c47/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=2d652d9d735f10402803318351f7a8ee91fc4c47", "patch": "@@ -1652,23 +1652,25 @@ impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n             .iter()\n             .enumerate()\n             .map(|(i, &(ref name, ty))| {\n+                // Discriminant is always the first field of our variant\n+                // when using the enum fallback.\n+                let is_artificial_discr = use_enum_fallback(cx) && i == 0;\n                 let (size, align) = cx.size_and_align_of(ty);\n                 MemberDescription {\n                     name: name.to_string(),\n-                    type_metadata: if use_enum_fallback(cx) {\n-                        match self.tag_type_metadata {\n-                            // Discriminant is always the first field of our variant\n-                            // when using the enum fallback.\n-                            Some(metadata) if i == 0 => metadata,\n-                            _ => type_metadata(cx, ty, self.span),\n-                        }\n+                    type_metadata: if is_artificial_discr {\n+                        self.tag_type_metadata.unwrap_or_else(|| type_metadata(cx, ty, self.span))\n                     } else {\n                         type_metadata(cx, ty, self.span)\n                     },\n                     offset: self.offsets[i],\n                     size,\n                     align,\n-                    flags: DIFlags::FlagZero,\n+                    flags: if is_artificial_discr {\n+                        DIFlags::FlagArtificial\n+                    } else {\n+                        DIFlags::FlagZero\n+                    },\n                     discriminant: None,\n                     source_info: None,\n                 }"}, {"sha": "ebd0c7ba544b0ffe971a27c2d3c19ec42f8d6465", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2d652d9d735f10402803318351f7a8ee91fc4c47/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d652d9d735f10402803318351f7a8ee91fc4c47/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=2d652d9d735f10402803318351f7a8ee91fc4c47", "patch": "@@ -0,0 +1,88 @@\n+// Verify debuginfo for generators:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+// only-msvc\n+\n+#![feature(generators, generator_trait)]\n+use std::ops::Generator;\n+\n+fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n+    || {\n+        yield 0;\n+        let s = String::from(\"foo\");\n+        yield 1;\n+    }\n+}\n+\n+async fn foo() {}\n+async fn async_fn_test() {\n+    foo().await;\n+    let s = String::from(\"foo\");\n+    foo().await;\n+}\n+\n+// FIXME: We need \"checksum\" to prevent matching with the wrong (duplicate) file\n+//        metadata, even when -C codegen-units=1.\n+// CHECK-DAG:  [[FILE:!.*]] = !DIFile(filename: \"{{.*}}generator-debug-msvc.rs\", {{.*}}, checksum:\n+\n+// CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]],\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// For brevity, we just check the struct name and members of the last variant.\n+// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 18,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 18,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 17,\n+// CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN:![0-9]*]], {{.*}}flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// For brevity, we just check the struct name and members of the last variant.\n+// CHECK-SAME: file: [[FILE]], line: 22,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 26,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 26,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 23,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 25,\n+// CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[ASYNC_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+\n+fn main() {\n+    let _dummy = generator_test();\n+    let _dummy = async_fn_test();\n+}"}]}