{"sha": "661b7ce830c1d3313f0fd4456c0f55583711730c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MWI3Y2U4MzBjMWQzMzEzZjBmZDQ0NTZjMGY1NTU4MzcxMTczMGM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-07T19:29:51Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-08T02:21:36Z"}, "message": "Make resolve_name_in_module solely responsible for tracking used crates in lib.rs", "tree": {"sha": "0b3decac531e7f69dd297553ef3d14a52d2a625c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b3decac531e7f69dd297553ef3d14a52d2a625c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/661b7ce830c1d3313f0fd4456c0f55583711730c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/661b7ce830c1d3313f0fd4456c0f55583711730c", "html_url": "https://github.com/rust-lang/rust/commit/661b7ce830c1d3313f0fd4456c0f55583711730c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/661b7ce830c1d3313f0fd4456c0f55583711730c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34af2de4096b3b1c5d3a5b70171c6e27822aaefb", "url": "https://api.github.com/repos/rust-lang/rust/commits/34af2de4096b3b1c5d3a5b70171c6e27822aaefb", "html_url": "https://github.com/rust-lang/rust/commit/34af2de4096b3b1c5d3a5b70171c6e27822aaefb"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "3fcf14bbbcd7fa38e693c8e88b5c334615274f31", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/661b7ce830c1d3313f0fd4456c0f55583711730c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661b7ce830c1d3313f0fd4456c0f55583711730c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=661b7ce830c1d3313f0fd4456c0f55583711730c", "patch": "@@ -1202,10 +1202,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn record_import_use(&mut self, name: Name, ns: Namespace, resolution: &ImportResolution<'a>) {\n         let import_id = resolution.id;\n         self.used_imports.insert((import_id, ns));\n-        match resolution.target.as_ref().and_then(|target| target.target_module.def_id()) {\n-            Some(DefId { krate, .. }) => { self.used_crates.insert(krate); }\n-            _ => {}\n-        };\n \n         if !self.make_glob_map {\n             return;\n@@ -1299,11 +1295,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     // Check to see whether there are type bindings, and, if\n                     // so, whether there is a module within.\n                     if let Some(module_def) = target.binding.module() {\n-                        // track extern crates for unused_extern_crate lint\n-                        if let Some(did) = module_def.def_id() {\n-                            self.used_crates.insert(did.krate);\n-                        }\n-\n                         search_module = module_def;\n \n                         // Keep track of the closest private module used\n@@ -1573,6 +1564,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         if let Some(binding) = module_.get_child(name, namespace) {\n             debug!(\"(resolving name in module) found node as child\");\n+            if binding.is_extern_crate() {\n+                // track the extern crate as used.\n+                if let Some(DefId { krate, .. }) = binding.module().unwrap().def_id() {\n+                    self.used_crates.insert(krate);\n+                }\n+            }\n             return Success((Target::new(module_, binding, Shadowable::Never), false));\n         }\n \n@@ -2923,9 +2920,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n             _ => return None,\n         };\n-        if let Some(DefId{krate: kid, ..}) = containing_module.def_id() {\n-            self.used_crates.insert(kid);\n-        }\n         return Some(def);\n     }\n "}]}