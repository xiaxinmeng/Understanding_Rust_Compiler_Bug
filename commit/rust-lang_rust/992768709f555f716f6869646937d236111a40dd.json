{"sha": "992768709f555f716f6869646937d236111a40dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Mjc2ODcwOWY1NTVmNzE2ZjY4Njk2NDY5MzdkMjM2MTExYTQwZGQ=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-26T01:45:09Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-26T01:45:09Z"}, "message": "Remove pointer vectors", "tree": {"sha": "6c940c3ed8e05bd083744dc1f568d75e22bceb2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c940c3ed8e05bd083744dc1f568d75e22bceb2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992768709f555f716f6869646937d236111a40dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992768709f555f716f6869646937d236111a40dd", "html_url": "https://github.com/rust-lang/rust/commit/992768709f555f716f6869646937d236111a40dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992768709f555f716f6869646937d236111a40dd/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2178409df574aa83c5e9e6e7bff62b66c32acf63", "url": "https://api.github.com/repos/rust-lang/rust/commits/2178409df574aa83c5e9e6e7bff62b66c32acf63", "html_url": "https://github.com/rust-lang/rust/commit/2178409df574aa83c5e9e6e7bff62b66c32acf63"}], "stats": {"total": 120, "additions": 0, "deletions": 120}, "files": [{"sha": "e505947e1e658f24fe6d217e4243be85da110946", "filename": "crates/core_simd/src/fmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/992768709f555f716f6869646937d236111a40dd/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992768709f555f716f6869646937d236111a40dd/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=992768709f555f716f6869646937d236111a40dd", "patch": "@@ -27,7 +27,6 @@ debug_wrapper! {\n     Octal => format_octal,\n     LowerHex => format_lower_hex,\n     UpperHex => format_upper_hex,\n-    Pointer => format_pointer,\n }\n \n macro_rules! impl_fmt_trait {"}, {"sha": "d88f5b1eac45dce75f0555bdb1030c2f9bd502a9", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/992768709f555f716f6869646937d236111a40dd/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992768709f555f716f6869646937d236111a40dd/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=992768709f555f716f6869646937d236111a40dd", "patch": "@@ -11,9 +11,6 @@ mod fmt;\n mod masks;\n pub use masks::*;\n \n-mod pointers;\n-pub use pointers::*;\n-\n mod vectors_u8;\n pub use vectors_u8::*;\n mod vectors_u16;"}, {"sha": "4c20eab99209d63759577933ba321756069a638a", "filename": "crates/core_simd/src/pointers.rs", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/2178409df574aa83c5e9e6e7bff62b66c32acf63/crates%2Fcore_simd%2Fsrc%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2178409df574aa83c5e9e6e7bff62b66c32acf63/crates%2Fcore_simd%2Fsrc%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpointers.rs?ref=2178409df574aa83c5e9e6e7bff62b66c32acf63", "patch": "@@ -1,116 +0,0 @@\n-use core::marker::PhantomData;\n-\n-use crate::vectors_isize::*;\n-\n-macro_rules! define_pointer_vector {\n-    { $(#[$attr:meta])* $name:ident => $underlying:ty => $lanes:tt, $mut:ident } => {\n-        $(#[$attr])*\n-        #[allow(non_camel_case_types)]\n-        #[repr(C)]\n-        pub struct $name<T>($underlying, PhantomData<T>);\n-\n-        impl<T> core::fmt::Debug for $name<T> {\n-            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n-                crate::fmt::format(self.as_ref(), f)\n-            }\n-        }\n-        impl<T> core::fmt::Pointer for $name<T> {\n-            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n-                crate::fmt::format_pointer(self.as_ref(), f)\n-            }\n-        }\n-\n-        impl<T> Copy for $name<T> {}\n-\n-        impl<T> Clone for $name<T> {\n-            #[inline]\n-            fn clone(&self) -> Self {\n-                *self\n-            }\n-        }\n-\n-        impl<T> core::cmp::PartialEq for $name<T> {\n-            #[inline]\n-            fn eq(&self, other: &Self) -> bool {\n-                self.0.eq(&other.0)\n-            }\n-        }\n-\n-        impl<T> core::cmp::Eq for $name<T> {}\n-\n-        impl<T> core::cmp::PartialOrd for $name<T> {\n-            #[inline]\n-            fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-                self.0.partial_cmp(&other.0)\n-            }\n-        }\n-\n-        impl<T> core::cmp::Ord for $name<T> {\n-            fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n-                self.0.cmp(&other.0)\n-            }\n-        }\n-\n-        impl<T> $name<T> {\n-            /// Construct a vector by setting all lanes to the given value.\n-            #[inline]\n-            pub fn splat(value: *$mut T) -> Self {\n-                Self(<$underlying>::splat(value as isize), PhantomData)\n-            }\n-            call_counting_args! { $lanes => define_pointer_vector => new $underlying | *$mut T | }\n-        }\n-\n-        // array references\n-        impl<T> AsRef<[*$mut T; $lanes]> for $name<T> {\n-            #[inline]\n-            fn as_ref(&self) -> &[*$mut T; $lanes] {\n-                unsafe { &*(self as *const _ as *const _) }\n-            }\n-        }\n-\n-        impl<T> AsMut<[*$mut T; $lanes]> for $name<T> {\n-            #[inline]\n-            fn as_mut(&mut self) -> &mut [*$mut T; $lanes] {\n-                unsafe { &mut *(self as *mut _ as *mut _) }\n-            }\n-        }\n-\n-        // slice references\n-        impl<T> AsRef<[*$mut T]> for $name<T> {\n-            #[inline]\n-            fn as_ref(&self) -> &[*$mut T] {\n-                AsRef::<[*$mut T; $lanes]>::as_ref(self)\n-            }\n-        }\n-\n-        impl<T> AsMut<[*$mut T]> for $name<T> {\n-            #[inline]\n-            fn as_mut(&mut self) -> &mut [*$mut T] {\n-                AsMut::<[*$mut T; $lanes]>::as_mut(self)\n-            }\n-        }\n-\n-        // splat\n-        impl<T> From<*$mut T> for $name<T> {\n-            #[inline]\n-            fn from(value: *$mut T) -> Self {\n-                Self::splat(value)\n-            }\n-        }\n-    };\n-    { new $underlying:ty | $type:ty | $($var:ident)* } => {\n-        /// Construct a vector by setting each lane to the given values.\n-        #[allow(clippy::too_many_arguments)]\n-        #[inline]\n-        pub fn new($($var: $type),*) -> Self {\n-            Self(<$underlying>::new($($var as isize),*), PhantomData)\n-        }\n-    };\n-}\n-\n-define_pointer_vector! { #[doc = \"Vector of two mutable pointers\"] mptrx2 => isizex2 => 2, mut }\n-define_pointer_vector! { #[doc = \"Vector of four mutable pointers\"] mptrx4 => isizex4 => 4, mut }\n-define_pointer_vector! { #[doc = \"Vector of eight mutable pointers\"] mptrx8 => isizex8 => 8, mut }\n-define_pointer_vector! { #[doc = \"Vector of two const pointers\"] cptrx2 => isizex2 => 2, const }\n-define_pointer_vector! { #[doc = \"Vector of four const pointers\"] cptrx4 => isizex4 => 4, const }\n-define_pointer_vector! { #[doc = \"Vector of eight const pointers\"] cptrx8 => isizex8 => 8, const }"}]}