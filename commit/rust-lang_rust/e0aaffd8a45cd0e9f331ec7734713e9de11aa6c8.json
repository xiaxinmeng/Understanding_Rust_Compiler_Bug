{"sha": "e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "node_id": "C_kwDOAAsO6NoAKGUwYWFmZmQ4YTQ1Y2QwZTlmMzMxZWM3NzM0NzEzZTlkZTExYWE2Yzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T11:44:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T11:44:45Z"}, "message": "Auto merge of #89576 - tom7980:issue-89275-fix, r=estebank\n\nPrevent error reporting from outputting a recursion error if it finds an ambiguous trait impl during suggestions\n\nCloses #89275\n\nThis fixes the compiler reporting a recursion error during another already in progress error by trying to make a conversion method suggestion and encounters ambiguous trait implementations that can convert a the original type into a type that can then be recursively converted into itself via another method in the trait.\n\nUpdated OverflowError struct to be an enum so I could differentiate between passes - it's no longer a ZST but I don't think that should be a problem as they only generate when there's an error in compiling code anyway", "tree": {"sha": "11385f103f96e0bcc09ccf85b4b77e7351fd87d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11385f103f96e0bcc09ccf85b4b77e7351fd87d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "html_url": "https://github.com/rust-lang/rust/commit/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44995f7afb18775913618ae50601be31b9f9dead", "url": "https://api.github.com/repos/rust-lang/rust/commits/44995f7afb18775913618ae50601be31b9f9dead", "html_url": "https://github.com/rust-lang/rust/commit/44995f7afb18775913618ae50601be31b9f9dead"}, {"sha": "0950d5afe227c7097e59bf797a85267d3a659744", "url": "https://api.github.com/repos/rust-lang/rust/commits/0950d5afe227c7097e59bf797a85267d3a659744", "html_url": "https://github.com/rust-lang/rust/commit/0950d5afe227c7097e59bf797a85267d3a659744"}], "stats": {"total": 100, "additions": 82, "deletions": 18}, "files": [{"sha": "b089ae22d6d9855de6004fa256e91bc86410b3c3", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -449,6 +449,7 @@ pub enum SelectionError<'tcx> {\n     TraitNotObjectSafe(DefId),\n     NotConstEvaluatable(NotConstEvaluatable),\n     Overflow,\n+    ErrorReporting,\n }\n \n /// When performing resolution, it is typically the case that there"}, {"sha": "87495a2d5b3ec6cf66663d615c62707f214534e7", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -261,12 +261,18 @@ impl EvaluationResult {\n     }\n }\n \n-/// Indicates that trait evaluation caused overflow.\n+/// Indicates that trait evaluation caused overflow and in which pass.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n-pub struct OverflowError;\n+pub enum OverflowError {\n+    Cannonical,\n+    ErrorReporting,\n+}\n \n impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n-    fn from(OverflowError: OverflowError) -> SelectionError<'tcx> {\n-        SelectionError::Overflow\n+    fn from(overflow_error: OverflowError) -> SelectionError<'tcx> {\n+        match overflow_error {\n+            OverflowError::Cannonical => SelectionError::Overflow,\n+            OverflowError::ErrorReporting => SelectionError::ErrorReporting,\n+        }\n     }\n }"}, {"sha": "225ff5e597ed03a097d6f94fb584a41488261a83", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -842,6 +842,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Overflow => {\n                 bug!(\"overflow should be handled before the `report_selection_error` path\");\n             }\n+            SelectionError::ErrorReporting => {\n+                bug!(\"ErrorReporting Overflow should not reach `report_selection_err` call\")\n+            }\n         };\n \n         self.note_obligation_cause(&mut err, &obligation);"}, {"sha": "31254a0534d76a720236495e69d893b7613a26b4", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -83,17 +83,21 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     ) -> EvaluationResult {\n         match self.evaluate_obligation(obligation) {\n             Ok(result) => result,\n-            Err(OverflowError) => {\n+            Err(OverflowError::Cannonical) => {\n                 let mut selcx = SelectionContext::with_query_mode(&self, TraitQueryMode::Standard);\n-                selcx.evaluate_root_obligation(obligation).unwrap_or_else(|r| {\n-                    span_bug!(\n-                        obligation.cause.span,\n-                        \"Overflow should be caught earlier in standard query mode: {:?}, {:?}\",\n-                        obligation,\n-                        r,\n-                    )\n+                selcx.evaluate_root_obligation(obligation).unwrap_or_else(|r| match r {\n+                    OverflowError::Cannonical => {\n+                        span_bug!(\n+                            obligation.cause.span,\n+                            \"Overflow should be caught earlier in standard query mode: {:?}, {:?}\",\n+                            obligation,\n+                            r,\n+                        )\n+                    }\n+                    OverflowError::ErrorReporting => EvaluationResult::EvaluatedToErr,\n                 })\n             }\n+            Err(OverflowError::ErrorReporting) => EvaluationResult::EvaluatedToErr,\n         }\n     }\n }"}, {"sha": "d68ae07907734e805d93916efc77c4a569e2a4ae", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -18,7 +18,7 @@ use crate::traits;\n use crate::traits::coherence::Conflict;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{util, SelectionResult};\n-use crate::traits::{Overflow, Unimplemented};\n+use crate::traits::{ErrorReporting, Overflow, Unimplemented};\n \n use super::BuiltinImplConditions;\n use super::IntercrateAmbiguityCause;\n@@ -161,7 +161,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))\n                 }\n                 Ok(_) => Ok(None),\n-                Err(OverflowError) => Err(Overflow),\n+                Err(OverflowError::Cannonical) => Err(Overflow),\n+                Err(OverflowError::ErrorReporting) => Err(ErrorReporting),\n             })\n             .flat_map(Result::transpose)\n             .collect::<Result<Vec<_>, _>>()?;"}, {"sha": "3818e75a1de04217874ddf7b6b2fcada3c4add85", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -20,8 +20,8 @@ use super::ObligationCauseCode;\n use super::Selection;\n use super::SelectionResult;\n use super::TraitQueryMode;\n+use super::{ErrorReporting, Overflow, SelectionError, Unimplemented};\n use super::{ObligationCause, PredicateObligation, TraitObligation};\n-use super::{Overflow, SelectionError, Unimplemented};\n \n use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n use crate::traits::error_reporting::InferCtxtExt;\n@@ -900,7 +900,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         match self.candidate_from_obligation(stack) {\n             Ok(Some(c)) => self.evaluate_candidate(stack, &c),\n             Ok(None) => Ok(EvaluatedToAmbig),\n-            Err(Overflow) => Err(OverflowError),\n+            Err(Overflow) => Err(OverflowError::Cannonical),\n+            Err(ErrorReporting) => Err(OverflowError::ErrorReporting),\n             Err(..) => Ok(EvaluatedToErr),\n         }\n     }\n@@ -1057,10 +1058,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n+                    if self.infcx.is_tainted_by_errors() {\n+                        return Err(OverflowError::ErrorReporting);\n+                    }\n                     self.infcx.report_overflow_error(error_obligation, true);\n                 }\n                 TraitQueryMode::Canonical => {\n-                    return Err(OverflowError);\n+                    return Err(OverflowError::Cannonical);\n                 }\n             }\n         }"}, {"sha": "540365956a8fb793ef5bc39380463c2f9eaf25c6", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -140,6 +140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Err(e) => e,\n         };\n \n+        self.set_tainted_by_errors();\n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);"}, {"sha": "c2c1d369d6e8af8483eb83142bf9c6b4373a6b1f", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -78,7 +78,8 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             );\n                             match infcx.evaluate_obligation(&obligation) {\n                                 Ok(eval_result) if eval_result.may_apply() => {}\n-                                Err(traits::OverflowError) => {}\n+                                Err(traits::OverflowError::Cannonical) => {}\n+                                Err(traits::OverflowError::ErrorReporting) => {}\n                                 _ => {\n                                     return false;\n                                 }"}, {"sha": "b91c0017548725bf1bae9ca78332df41fe0bd12d", "filename": "src/test/ui/typeck/issue-89275.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/src%2Ftest%2Fui%2Ftypeck%2Fissue-89275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/src%2Ftest%2Fui%2Ftypeck%2Fissue-89275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89275.rs?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -0,0 +1,29 @@\n+#![recursion_limit = \"5\"] // To reduce noise\n+\n+//expect mutability error when ambiguous traits are in scope\n+//and not an overflow error on the span in the main function.\n+\n+struct Ratio<T>(T);\n+\n+pub trait Pow {\n+    fn pow(self) -> Self;\n+}\n+\n+impl<'a, T> Pow for &'a Ratio<T>\n+where\n+    &'a T: Pow,\n+{\n+    fn pow(self) -> Self {\n+        self\n+    }\n+}\n+\n+fn downcast<'a, W: ?Sized>() -> &'a W {\n+    todo!()\n+}\n+\n+struct Other;\n+\n+fn main() {\n+    let other: &mut Other = downcast();//~ERROR 28:29: 28:39: mismatched types [E0308]\n+}"}, {"sha": "d73e647d21f6be0b2de2e645a2ff2852e4bf785f", "filename": "src/test/ui/typeck/issue-89275.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/src%2Ftest%2Fui%2Ftypeck%2Fissue-89275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/src%2Ftest%2Fui%2Ftypeck%2Fissue-89275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89275.stderr?ref=e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-89275.rs:28:29\n+   |\n+LL |     let other: &mut Other = downcast();\n+   |                ----------   ^^^^^^^^^^ types differ in mutability\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected mutable reference `&mut Other`\n+                      found reference `&_`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}