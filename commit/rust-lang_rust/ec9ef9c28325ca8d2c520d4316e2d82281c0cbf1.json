{"sha": "ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjOWVmOWMyODMyNWNhOGQyYzUyMGQ0MzE2ZTJkODIyODFjMGNiZjE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-11T21:12:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-11T21:12:30Z"}, "message": "Complete associated types in dyn and impl trait", "tree": {"sha": "00e1de1f943ed17b5f5d9ae08afe1348ef92c610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00e1de1f943ed17b5f5d9ae08afe1348ef92c610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "html_url": "https://github.com/rust-lang/rust/commit/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "863e23f00f90c0ddd408e906618586a98273a14c", "url": "https://api.github.com/repos/rust-lang/rust/commits/863e23f00f90c0ddd408e906618586a98273a14c", "html_url": "https://github.com/rust-lang/rust/commit/863e23f00f90c0ddd408e906618586a98273a14c"}], "stats": {"total": 74, "additions": 64, "deletions": 10}, "files": [{"sha": "bd90cefb2a8bd52b1fd141b69859dad84f607418", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "patch": "@@ -29,7 +29,7 @@ use crate::{\n         macro_::render_macro,\n         pattern::{render_struct_pat, render_variant_pat},\n         render_field, render_resolution, render_tuple_field,\n-        type_alias::render_type_alias,\n+        type_alias::{render_type_alias, render_type_alias_with_eq},\n         RenderContext,\n     },\n     CompletionContext, CompletionItem, CompletionItemKind,\n@@ -188,6 +188,14 @@ impl Completions {\n         self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n     }\n \n+    pub(crate) fn add_type_alias_with_eq(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        type_alias: hir::TypeAlias,\n+    ) {\n+        self.add_opt(render_type_alias_with_eq(RenderContext::new(ctx), type_alias));\n+    }\n+\n     pub(crate) fn add_qualified_enum_variant(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "952f052a18acee00a867dcbf193ab83e025c9df1", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "patch": "@@ -1,8 +1,9 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use hir::ScopeDef;\n+use syntax::{ast, AstNode};\n \n-use crate::{CompletionContext, Completions};\n+use crate::{patterns::ImmediateLocation, CompletionContext, Completions};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     if ctx.is_path_disallowed() || !ctx.is_trivial_path() {\n@@ -43,6 +44,20 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         });\n     }\n \n+    if let Some(ImmediateLocation::GenericArgList(arg_list)) = &ctx.completion_location {\n+        if let Some(path_seg) = arg_list.syntax().parent().and_then(ast::PathSegment::cast) {\n+            if let Some(hir::PathResolution::Def(hir::ModuleDef::Trait(trait_))) =\n+                ctx.sema.resolve_path(&path_seg.parent_path())\n+            {\n+                trait_.items(ctx.sema.db).into_iter().for_each(|it| {\n+                    if let hir::AssocItem::TypeAlias(alias) = it {\n+                        acc.add_type_alias_with_eq(ctx, alias)\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n             cov_mark::hit!(skip_lifetime_completion);\n@@ -777,4 +792,21 @@ $0\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn completes_assoc_types_in_dynimpl_trait() {\n+        check(\n+            r#\"\n+trait Foo {\n+    type Bar;\n+}\n+\n+fn foo(_: impl Foo<B$0>) {}\n+\"#,\n+            expect![[r#\"\n+                ta Bar =  type Bar;\n+                tt Foo\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "81d7a1a1d471b61a9c1ecb1d360a981025958caa", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "patch": "@@ -47,6 +47,9 @@ pub(crate) enum ImmediateLocation {\n         receiver_is_ambiguous_float_literal: bool,\n     },\n     // Original file ast node\n+    // Only set from a type arg\n+    GenericArgList(ast::GenericArgList),\n+    // Original file ast node\n     /// The record expr of the field name we are completing\n     RecordExpr(ast::RecordExpr),\n     // Original file ast node\n@@ -159,7 +162,6 @@ pub(crate) fn determine_location(\n             }\n         }\n     };\n-\n     let res = match_ast! {\n         match parent {\n             ast::IdentPat(_it) => ImmediateLocation::IdentPat,\n@@ -174,6 +176,9 @@ pub(crate) fn determine_location(\n                 Some(TRAIT) => ImmediateLocation::Trait,\n                 _ => return None,\n             },\n+            ast::GenericArgList(_it) => sema\n+                .find_node_at_offset_with_macros(original_file, offset)\n+                .map(ImmediateLocation::GenericArgList)?,\n             ast::Module(it) => {\n                 if it.item_list().is_none() {\n                     ImmediateLocation::ModDeclaration(it)"}, {"sha": "e0234171ac19f489732636681f621111db7a44ff", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=ec9ef9c28325ca8d2c520d4316e2d82281c0cbf1", "patch": "@@ -16,7 +16,14 @@ pub(crate) fn render_type_alias<'a>(\n     ctx: RenderContext<'a>,\n     type_alias: hir::TypeAlias,\n ) -> Option<CompletionItem> {\n-    TypeAliasRender::new(ctx, type_alias)?.render()\n+    TypeAliasRender::new(ctx, type_alias)?.render(false)\n+}\n+\n+pub(crate) fn render_type_alias_with_eq<'a>(\n+    ctx: RenderContext<'a>,\n+    type_alias: hir::TypeAlias,\n+) -> Option<CompletionItem> {\n+    TypeAliasRender::new(ctx, type_alias)?.render(true)\n }\n \n #[derive(Debug)]\n@@ -32,8 +39,14 @@ impl<'a> TypeAliasRender<'a> {\n         Some(TypeAliasRender { ctx, type_alias, ast_node })\n     }\n \n-    fn render(self) -> Option<CompletionItem> {\n-        let name = self.name()?;\n+    fn render(self, with_eq: bool) -> Option<CompletionItem> {\n+        let name = self.ast_node.name().map(|name| {\n+            if with_eq {\n+                format!(\"{} = \", name.text())\n+            } else {\n+                name.text().to_string()\n+            }\n+        })?;\n         let detail = self.detail();\n \n         let mut item =\n@@ -49,10 +62,6 @@ impl<'a> TypeAliasRender<'a> {\n         Some(item.build())\n     }\n \n-    fn name(&self) -> Option<String> {\n-        self.ast_node.name().map(|name| name.text().to_string())\n-    }\n-\n     fn detail(&self) -> String {\n         type_label(&self.ast_node)\n     }"}]}