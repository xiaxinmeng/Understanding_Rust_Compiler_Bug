{"sha": "8dff0ac143a689b7a1e04e55273d3f006b8369d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZmYwYWMxNDNhNjg5YjdhMWUwNGU1NTI3M2QzZjAwNmI4MzY5ZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T01:59:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T07:36:26Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "d8c010a3bf50657f6ffe46410948f7e53d81f72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c010a3bf50657f6ffe46410948f7e53d81f72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dff0ac143a689b7a1e04e55273d3f006b8369d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dff0ac143a689b7a1e04e55273d3f006b8369d1", "html_url": "https://github.com/rust-lang/rust/commit/8dff0ac143a689b7a1e04e55273d3f006b8369d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dff0ac143a689b7a1e04e55273d3f006b8369d1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ebb6e60b978ae3b27a0861d6d8eace03c7fce93", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb6e60b978ae3b27a0861d6d8eace03c7fce93", "html_url": "https://github.com/rust-lang/rust/commit/6ebb6e60b978ae3b27a0861d6d8eace03c7fce93"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "6e81d14d73cad02e32612d191c9500fab324b0a7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -74,7 +74,6 @@ use std::fmt;\n use std::hash::{Hash, SipHasher, Hasher};\n use std::mem;\n use std::num::ToPrimitive;\n-use std::num::wrapping::WrappingOps;\n use std::ops;\n use std::rc::Rc;\n use std::vec::IntoIter;"}, {"sha": "73973d0db282d26c92c8adc059d46bb0f1c5dc96", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -519,7 +519,7 @@ mod bench {\n         ({\n             use super::u64_from_be_bytes;\n \n-            let len = $stride.wrapping_mul(100).wrapping_add($start_index);\n+            let len = ($stride as u8).wrapping_mul(100).wrapping_add($start_index);\n             let data = (0..len).collect::<Vec<_>>();\n             let mut sum = 0;\n             $b.iter(|| {"}, {"sha": "0bbb1a9e92752c09c39f81adbcb6b53335b23baf", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -135,6 +135,13 @@ impl FileDesc {\n             _ => Err(super::last_error()),\n         }\n     }\n+\n+    #[allow(dead_code)]\n+    pub fn unwrap(self) -> fd_t {\n+        let fd = self.fd;\n+        unsafe { mem::forget(self) };\n+        fd\n+    }\n }\n \n impl Drop for FileDesc {"}, {"sha": "b10042090ddc8d634a89d875cb10334ea07cf52e", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -487,9 +487,9 @@ mod tests {\n     #[test]\n     fn test_make_command_line() {\n         fn test_wrapper(prog: &str, args: &[&str]) -> String {\n-            make_command_line(&CString::new(prog),\n+            make_command_line(&CString::new(prog).unwrap(),\n                               &args.iter()\n-                                   .map(|a| CString::new(a))\n+                                   .map(|a| CString::new(*a).unwrap())\n                                    .collect::<Vec<CString>>())\n         }\n "}, {"sha": "7e832b6384dee46ce09686ccd483c7c4008928b3", "filename": "src/libstd/sys/windows/process2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -445,10 +445,9 @@ mod tests {\n         fn test_wrapper(prog: &str, args: &[&str]) -> String {\n             String::from_utf16(\n                 &make_command_line(OsStr::from_str(prog),\n-                                   args.iter()\n-                                       .map(|a| OsString::from_str(a))\n-                                       .collect::<Vec<OsString>>()\n-                                       .as_slice())).unwrap()\n+                                   &args.iter()\n+                                        .map(|a| OsString::from(a))\n+                                        .collect::<Vec<OsString>>())).unwrap()\n         }\n \n         assert_eq!("}, {"sha": "e4fb7c199094722d2987568c42f5fcbe08c8528e", "filename": "src/test/run-pass-fulldeps/create-dir-all-bare.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcreate-dir-all-bare.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-android\n+\n #![feature(rustc_private)]\n \n extern crate rustc_back;"}, {"sha": "a1e016bf2eabaa5be1f1d0e0971c87a06af423b3", "filename": "src/test/run-pass-fulldeps/rename-directory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -11,6 +11,7 @@\n // This test can't be a unit test in std,\n // because it needs TempDir, which is in extra\n \n+// ignore-android\n // pretty-expanded FIXME #23616\n \n #![feature(rustc_private, path_ext)]"}, {"sha": "b73eac0c7140fa230f64ee7d40296cf6065a75df", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     assert_eq!(0xffffffffffffffff, (-1 as u64));\n     assert_eq!(18446744073709551615, (-1 as u64));\n \n-    assert_eq!((-2147483648).wrapping_sub(1), 2147483647);\n+    assert_eq!((-2147483648i32).wrapping_sub(1), 2147483647);\n }"}, {"sha": "4209d5986ba506c8fc3d1a69180273bfa94ca4c5", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dff0ac143a689b7a1e04e55273d3f006b8369d1/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=8dff0ac143a689b7a1e04e55273d3f006b8369d1", "patch": "@@ -23,20 +23,20 @@ extern crate libc;\n use std::sync::mpsc::channel;\n use std::old_io::net::tcp::{TcpListener, TcpStream};\n use std::old_io::{Acceptor, Listener, Reader, Writer};\n-use std::thread::{Builder, Thread};\n+use std::thread::{self, Builder};\n use std::time::Duration;\n \n fn main() {\n     // This test has a chance to time out, try to not let it time out\n-    Thread::spawn(move|| -> () {\n+    thread::spawn(move|| -> () {\n         use std::old_io::timer;\n         timer::sleep(Duration::milliseconds(30 * 1000));\n         println!(\"timed out!\");\n         unsafe { libc::exit(1) }\n     });\n \n     let (tx, rx) = channel();\n-    Thread::spawn(move || -> () {\n+    thread::spawn(move || -> () {\n         let mut listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n         tx.send(listener.socket_name().unwrap()).unwrap();\n         let mut acceptor = listener.listen();"}]}