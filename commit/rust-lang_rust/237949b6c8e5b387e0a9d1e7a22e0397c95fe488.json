{"sha": "237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "node_id": "C_kwDOAAsO6NoAKDIzNzk0OWI2YzhlNWIzODdlMGE5ZDFlN2EyMmUwMzk3Yzk1ZmU0ODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-19T22:34:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-19T22:34:55Z"}, "message": "Auto merge of #93085 - matthiaskrgr:rollup-mgpu2ju, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #92316 (mangling_v0: Skip extern blocks during mangling)\n - #92630 (Change PhantomData type for `BuildHasherDefault` (and more))\n - #92800 (Add manifest docs fallback.)\n - #93005 (Move back templates into html folder)\n - #93065 (Pretty printer algorithm revamp step 2)\n - #93077 (remove `List::is_noop`)\n\nFailed merges:\n\n - #93068 (Fix spacing for `\u00b7` between stability and source)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1168aa85483d612694f08c3023b53a2e4e78a82c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1168aa85483d612694f08c3023b53a2e4e78a82c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "html_url": "https://github.com/rust-lang/rust/commit/237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e57faa78aa7661c6000204591558f6665f11abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e57faa78aa7661c6000204591558f6665f11abc", "html_url": "https://github.com/rust-lang/rust/commit/5e57faa78aa7661c6000204591558f6665f11abc"}, {"sha": "43d508bb78e906bf742b6cd1bd921cb5d78059ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d508bb78e906bf742b6cd1bd921cb5d78059ad", "html_url": "https://github.com/rust-lang/rust/commit/43d508bb78e906bf742b6cd1bd921cb5d78059ad"}], "stats": {"total": 444, "additions": 247, "deletions": 197}, "files": [{"sha": "fe5dedb6ba4b73be4d4c8c3de58cf85d683e6c12", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -320,7 +320,7 @@ jobs:\n           - name: dist-aarch64-apple\n             env:\n               SCRIPT: \"./x.py dist --stage 2\"\n-              RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-full-tools --enable-sanitizers --enable-profiler --disable-docs --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               USE_XCODE_CLANG: 1\n               MACOSX_DEPLOYMENT_TARGET: 11.0"}, {"sha": "a7496e61b8bebf6360cbde303dfdb889234e623d", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -152,7 +152,9 @@ dependencies = [\n  \"nom\",\n  \"proc-macro2\",\n  \"quote\",\n+ \"serde\",\n  \"syn\",\n+ \"toml\",\n ]\n \n [[package]]"}, {"sha": "bdd70148d85a0d483f638aa7184a0a9c1530aaf4", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 61, "deletions": 97, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -167,14 +167,9 @@ pub enum Token {\n     Break(BreakToken),\n     Begin(BeginToken),\n     End,\n-    Eof,\n }\n \n impl Token {\n-    crate fn is_eof(&self) -> bool {\n-        matches!(self, Token::Eof)\n-    }\n-\n     pub fn is_hardbreak_tok(&self) -> bool {\n         matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n     }\n@@ -187,7 +182,6 @@ impl fmt::Display for Token {\n             Token::Break(_) => f.write_str(\"BREAK\"),\n             Token::Begin(_) => f.write_str(\"BEGIN\"),\n             Token::End => f.write_str(\"END\"),\n-            Token::Eof => f.write_str(\"EOF\"),\n         }\n     }\n }\n@@ -212,10 +206,6 @@ pub struct Printer {\n     margin: isize,\n     /// Number of spaces left on line\n     space: isize,\n-    /// Index of left side of input stream\n-    left: usize,\n-    /// Index of right side of input stream\n-    right: usize,\n     /// Ring-buffer of tokens and calculated sizes\n     buf: RingBuffer<BufEntry>,\n     /// Running size of stream \"...left\"\n@@ -233,6 +223,9 @@ pub struct Printer {\n     print_stack: Vec<PrintStackElem>,\n     /// Buffered indentation to avoid writing trailing whitespace\n     pending_indentation: isize,\n+    /// The token most recently popped from the left boundary of the\n+    /// ring-buffer for printing\n+    last_printed: Option<Token>,\n }\n \n #[derive(Clone)]\n@@ -241,39 +234,34 @@ struct BufEntry {\n     size: isize,\n }\n \n-impl Default for BufEntry {\n-    fn default() -> Self {\n-        BufEntry { token: Token::Eof, size: 0 }\n-    }\n-}\n-\n impl Printer {\n     pub fn new() -> Self {\n         let linewidth = 78;\n-        let mut buf = RingBuffer::new();\n-        buf.advance_right();\n         Printer {\n             out: String::new(),\n             margin: linewidth as isize,\n             space: linewidth as isize,\n-            left: 0,\n-            right: 0,\n-            buf,\n+            buf: RingBuffer::new(),\n             left_total: 0,\n             right_total: 0,\n             scan_stack: VecDeque::new(),\n             print_stack: Vec::new(),\n             pending_indentation: 0,\n+            last_printed: None,\n         }\n     }\n \n-    pub fn last_token(&self) -> Token {\n-        self.buf[self.right].token.clone()\n+    pub fn last_token(&self) -> Option<&Token> {\n+        self.last_token_still_buffered().or_else(|| self.last_printed.as_ref())\n+    }\n+\n+    pub fn last_token_still_buffered(&self) -> Option<&Token> {\n+        self.buf.last().map(|last| &last.token)\n     }\n \n     /// Be very careful with this!\n-    pub fn replace_last_token(&mut self, t: Token) {\n-        self.buf[self.right].token = t;\n+    pub fn replace_last_token_still_buffered(&mut self, t: Token) {\n+        self.buf.last_mut().unwrap().token = t;\n     }\n \n     fn scan_eof(&mut self) {\n@@ -287,89 +275,63 @@ impl Printer {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.right = self.left;\n-            self.buf.truncate(1);\n-        } else {\n-            self.advance_right();\n+            self.buf.clear();\n         }\n-        self.scan_push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n+        let right = self.buf.push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n+        self.scan_stack.push_front(right);\n     }\n \n     fn scan_end(&mut self) {\n         if self.scan_stack.is_empty() {\n             self.print_end();\n         } else {\n-            self.advance_right();\n-            self.scan_push(BufEntry { token: Token::End, size: -1 });\n+            let right = self.buf.push(BufEntry { token: Token::End, size: -1 });\n+            self.scan_stack.push_front(right);\n         }\n     }\n \n     fn scan_break(&mut self, b: BreakToken) {\n         if self.scan_stack.is_empty() {\n             self.left_total = 1;\n             self.right_total = 1;\n-            self.right = self.left;\n-            self.buf.truncate(1);\n+            self.buf.clear();\n         } else {\n-            self.advance_right();\n+            self.check_stack(0);\n         }\n-        self.check_stack(0);\n-        self.scan_push(BufEntry { token: Token::Break(b), size: -self.right_total });\n+        let right = self.buf.push(BufEntry { token: Token::Break(b), size: -self.right_total });\n+        self.scan_stack.push_front(right);\n         self.right_total += b.blank_space;\n     }\n \n     fn scan_string(&mut self, s: Cow<'static, str>) {\n         if self.scan_stack.is_empty() {\n-            self.print_string(s);\n+            self.print_string(&s);\n         } else {\n-            self.advance_right();\n             let len = s.len() as isize;\n-            self.buf[self.right] = BufEntry { token: Token::String(s), size: len };\n+            self.buf.push(BufEntry { token: Token::String(s), size: len });\n             self.right_total += len;\n             self.check_stream();\n         }\n     }\n \n     fn check_stream(&mut self) {\n-        if self.right_total - self.left_total > self.space {\n-            if Some(&self.left) == self.scan_stack.back() {\n-                let scanned = self.scan_pop_bottom();\n-                self.buf[scanned].size = SIZE_INFINITY;\n+        while self.right_total - self.left_total > self.space {\n+            if *self.scan_stack.back().unwrap() == self.buf.index_of_first() {\n+                self.scan_stack.pop_back().unwrap();\n+                self.buf.first_mut().unwrap().size = SIZE_INFINITY;\n             }\n             self.advance_left();\n-            if self.left != self.right {\n-                self.check_stream();\n+            if self.buf.is_empty() {\n+                break;\n             }\n         }\n     }\n \n-    fn scan_push(&mut self, entry: BufEntry) {\n-        self.buf[self.right] = entry;\n-        self.scan_stack.push_front(self.right);\n-    }\n-\n-    fn scan_pop(&mut self) -> usize {\n-        self.scan_stack.pop_front().unwrap()\n-    }\n-\n-    fn scan_top(&self) -> usize {\n-        *self.scan_stack.front().unwrap()\n-    }\n-\n-    fn scan_pop_bottom(&mut self) -> usize {\n-        self.scan_stack.pop_back().unwrap()\n-    }\n-\n-    fn advance_right(&mut self) {\n-        self.right += 1;\n-        self.buf.advance_right();\n-    }\n-\n     fn advance_left(&mut self) {\n-        let mut left_size = self.buf[self.left].size;\n+        let mut left_size = self.buf.first().unwrap().size;\n \n         while left_size >= 0 {\n-            let left = self.buf[self.left].token.clone();\n+            let left = self.buf.first().unwrap().token.clone();\n \n             let len = match left {\n                 Token::Break(b) => b.blank_space,\n@@ -385,39 +347,38 @@ impl Printer {\n \n             self.left_total += len;\n \n-            if self.left == self.right {\n+            self.buf.advance_left();\n+            if self.buf.is_empty() {\n                 break;\n             }\n \n-            self.buf.advance_left();\n-            self.left += 1;\n-\n-            left_size = self.buf[self.left].size;\n+            left_size = self.buf.first().unwrap().size;\n         }\n     }\n \n-    fn check_stack(&mut self, k: usize) {\n-        if !self.scan_stack.is_empty() {\n-            let x = self.scan_top();\n-            match self.buf[x].token {\n+    fn check_stack(&mut self, mut k: usize) {\n+        while let Some(&x) = self.scan_stack.front() {\n+            let mut entry = &mut self.buf[x];\n+            match entry.token {\n                 Token::Begin(_) => {\n-                    if k > 0 {\n-                        self.scan_pop();\n-                        self.buf[x].size += self.right_total;\n-                        self.check_stack(k - 1);\n+                    if k == 0 {\n+                        break;\n                     }\n+                    self.scan_stack.pop_front().unwrap();\n+                    entry.size += self.right_total;\n+                    k -= 1;\n                 }\n                 Token::End => {\n                     // paper says + not =, but that makes no sense.\n-                    self.scan_pop();\n-                    self.buf[x].size = 1;\n-                    self.check_stack(k + 1);\n+                    self.scan_stack.pop_front().unwrap();\n+                    entry.size = 1;\n+                    k += 1;\n                 }\n                 _ => {\n-                    self.scan_pop();\n-                    self.buf[x].size += self.right_total;\n-                    if k > 0 {\n-                        self.check_stack(k);\n+                    self.scan_stack.pop_front().unwrap();\n+                    entry.size += self.right_total;\n+                    if k == 0 {\n+                        break;\n                     }\n                 }\n             }\n@@ -477,7 +438,7 @@ impl Printer {\n         }\n     }\n \n-    fn print_string(&mut self, s: Cow<'static, str>) {\n+    fn print_string(&mut self, s: &str) {\n         let len = s.len() as isize;\n         // assert!(len <= space);\n         self.space -= len;\n@@ -491,21 +452,21 @@ impl Printer {\n         self.out.reserve(self.pending_indentation as usize);\n         self.out.extend(std::iter::repeat(' ').take(self.pending_indentation as usize));\n         self.pending_indentation = 0;\n-        self.out.push_str(&s);\n+        self.out.push_str(s);\n     }\n \n     fn print(&mut self, token: Token, l: isize) {\n-        match token {\n-            Token::Begin(b) => self.print_begin(b, l),\n+        match &token {\n+            Token::Begin(b) => self.print_begin(*b, l),\n             Token::End => self.print_end(),\n-            Token::Break(b) => self.print_break(b, l),\n+            Token::Break(b) => self.print_break(*b, l),\n             Token::String(s) => {\n                 let len = s.len() as isize;\n                 assert_eq!(len, l);\n                 self.print_string(s);\n             }\n-            Token::Eof => panic!(), // Eof should never get here.\n         }\n+        self.last_printed = Some(token);\n     }\n \n     // Convenience functions to talk to the printer.\n@@ -560,7 +521,10 @@ impl Printer {\n     }\n \n     pub fn is_beginning_of_line(&self) -> bool {\n-        self.last_token().is_eof() || self.last_token().is_hardbreak_tok()\n+        match self.last_token() {\n+            Some(last_token) => last_token.is_hardbreak_tok(),\n+            None => true,\n+        }\n     }\n \n     pub fn hardbreak_tok_offset(off: isize) -> Token {"}, {"sha": "d20142eb591fe65e3b24c731eb7467bf8d80b1ff", "filename": "compiler/rustc_ast_pretty/src/pp/ring.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fring.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -22,20 +22,43 @@ impl<T> RingBuffer<T> {\n         RingBuffer { data: VecDeque::new(), offset: 0 }\n     }\n \n-    pub fn advance_right(&mut self)\n-    where\n-        T: Default,\n-    {\n-        self.data.push_back(T::default());\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    pub fn push(&mut self, value: T) -> usize {\n+        let index = self.offset + self.data.len();\n+        self.data.push_back(value);\n+        index\n     }\n \n     pub fn advance_left(&mut self) {\n         self.data.pop_front().unwrap();\n         self.offset += 1;\n     }\n \n-    pub fn truncate(&mut self, len: usize) {\n-        self.data.truncate(len);\n+    pub fn clear(&mut self) {\n+        self.data.clear();\n+    }\n+\n+    pub fn index_of_first(&self) -> usize {\n+        self.offset\n+    }\n+\n+    pub fn first(&self) -> Option<&T> {\n+        self.data.front()\n+    }\n+\n+    pub fn first_mut(&mut self) -> Option<&mut T> {\n+        self.data.front_mut()\n+    }\n+\n+    pub fn last(&self) -> Option<&T> {\n+        self.data.back()\n+    }\n+\n+    pub fn last_mut(&mut self) -> Option<&mut T> {\n+        self.data.back_mut()\n     }\n }\n "}, {"sha": "1cbc3162d432645a8bb9260fd4c280bc2d62222c", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -328,9 +328,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             CommentStyle::BlankLine => {\n                 // We need to do at least one, possibly two hardbreaks.\n                 let twice = match self.last_token() {\n-                    pp::Token::String(s) => \";\" == s,\n-                    pp::Token::Begin(_) => true,\n-                    pp::Token::End => true,\n+                    Some(pp::Token::String(s)) => \";\" == s,\n+                    Some(pp::Token::Begin(_)) => true,\n+                    Some(pp::Token::End) => true,\n                     _ => false,\n                 };\n                 if twice {\n@@ -686,11 +686,15 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn break_offset_if_not_bol(&mut self, n: usize, off: isize) {\n         if !self.is_beginning_of_line() {\n             self.break_offset(n, off)\n-        } else if off != 0 && self.last_token().is_hardbreak_tok() {\n-            // We do something pretty sketchy here: tuck the nonzero\n-            // offset-adjustment we were going to deposit along with the\n-            // break into the previous hardbreak.\n-            self.replace_last_token(pp::Printer::hardbreak_tok_offset(off));\n+        } else if off != 0 {\n+            if let Some(last_token) = self.last_token_still_buffered() {\n+                if last_token.is_hardbreak_tok() {\n+                    // We do something pretty sketchy here: tuck the nonzero\n+                    // offset-adjustment we were going to deposit along with the\n+                    // break into the previous hardbreak.\n+                    self.replace_last_token_still_buffered(pp::Printer::hardbreak_tok_offset(off));\n+                }\n+            }\n         }\n     }\n "}, {"sha": "55c9b4d9ba12d7ded09ce5c00410b529f37aef4f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -90,7 +90,7 @@ macro call_intrinsic_match {\n         match $intrinsic {\n             $(\n                 sym::$name => {\n-                    assert!($substs.is_noop());\n+                    assert!($substs.is_empty());\n                     if let [$(ref $arg),*] = *$args {\n                         let ($($arg,)*) = (\n                             $(codegen_operand($fx, $arg),)*"}, {"sha": "63e9b58584c5f3f1c60ca399f6aac5de055bb830", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -275,10 +275,6 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         }\n     }\n \n-    pub fn is_noop(&self) -> bool {\n-        self.is_empty()\n-    }\n-\n     #[inline]\n     pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {\n         self.iter()"}, {"sha": "0d51f7779e18f8844a284007f1a278b7709c69f2", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -772,9 +772,9 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n         disambiguated_data: &DisambiguatedDefPathData,\n     ) -> Result<Self::Path, Self::Error> {\n         let ns = match disambiguated_data.data {\n-            // FIXME: It shouldn't be necessary to add anything for extern block segments,\n-            // but we add 't' for backward compatibility.\n-            DefPathData::ForeignMod => 't',\n+            // Extern block segments can be skipped, names from extern blocks\n+            // are effectively living in their parent modules.\n+            DefPathData::ForeignMod => return print_prefix(self),\n \n             // Uppercase categories are more stable than lowercase ones.\n             DefPathData::TypeNs(_) => 't',"}, {"sha": "195a4a4a653e182a20b9e86187064080d11393f2", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -484,7 +484,7 @@ crate fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<St\n     let mut types_without_default_bounds = FxHashSet::default();\n     let sized_trait = tcx.lang_items().sized_trait();\n \n-    if !substs.is_noop() {\n+    if !substs.is_empty() {\n         types_without_default_bounds.extend(substs.types());\n         w.push('<');\n         w.push_str("}, {"sha": "f01b8267817483bc86473d63d053a04c0c44b88e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // `foo.bar::<u32>(...)` -- the `Self` type here will be the\n         // type of `foo` (possibly adjusted), but we don't want to\n         // include that. We want just the `[_, u32]` part.\n-        if !method.substs.is_noop() {\n+        if !method.substs.is_empty() {\n             let method_generics = self.tcx.generics_of(method.def_id);\n             if !method_generics.params.is_empty() {\n                 let user_type_annotation = self.infcx.probe(|_| {\n@@ -211,7 +211,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn write_substs(&self, node_id: hir::HirId, substs: SubstsRef<'tcx>) {\n-        if !substs.is_noop() {\n+        if !substs.is_empty() {\n             debug!(\"write_substs({:?}, {:?}) in fcx {}\", node_id, substs, self.tag());\n \n             self.typeck_results.borrow_mut().node_substs_mut().insert(node_id, substs);"}, {"sha": "2877e66eca8850949df0f832ac8873dc2c4b2ad2", "filename": "library/core/src/future/pending.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -12,7 +12,7 @@ use crate::task::{Context, Poll};\n #[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n #[must_use = \"futures do nothing unless you `.await` or poll them\"]\n pub struct Pending<T> {\n-    _data: marker::PhantomData<T>,\n+    _data: marker::PhantomData<fn() -> T>,\n }\n \n /// Creates a future which never resolves, representing a computation that never\n@@ -43,9 +43,6 @@ impl<T> Future for Pending<T> {\n     }\n }\n \n-#[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n-impl<T> Unpin for Pending<T> {}\n-\n #[stable(feature = \"future_readiness_fns\", since = \"1.48.0\")]\n impl<T> Debug for Pending<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "53de8b42c059f219b586be1a9a6daf0a906db6c5", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -602,7 +602,7 @@ pub trait BuildHasher {\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [zero-sized]: https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts\n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n-pub struct BuildHasherDefault<H>(marker::PhantomData<H>);\n+pub struct BuildHasherDefault<H>(marker::PhantomData<fn() -> H>);\n \n #[stable(since = \"1.9.0\", feature = \"core_impl_debug\")]\n impl<H> fmt::Debug for BuildHasherDefault<H> {"}, {"sha": "98734c527f2b9c35874027386cb9c1008276a7e3", "filename": "library/core/src/iter/sources/empty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -22,17 +22,17 @@ pub const fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n }\n \n+// Newtype for use in `PhantomData` to avoid\n+// > error: const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n+// in `const fn empty<T>()` above.\n+struct FnReturning<T>(fn() -> T);\n+\n /// An iterator that yields nothing.\n ///\n /// This `struct` is created by the [`empty()`] function. See its documentation for more.\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n-pub struct Empty<T>(marker::PhantomData<T>);\n-\n-#[stable(feature = \"iter_empty_send_sync\", since = \"1.42.0\")]\n-unsafe impl<T> Send for Empty<T> {}\n-#[stable(feature = \"iter_empty_send_sync\", since = \"1.42.0\")]\n-unsafe impl<T> Sync for Empty<T> {}\n+pub struct Empty<T>(marker::PhantomData<FnReturning<T>>);\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T> fmt::Debug for Empty<T> {"}, {"sha": "a46a4e63714c2fe8be4a4a726a08eed119de76ca", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -1483,11 +1483,10 @@ impl Step for Extended {\n             };\n             prepare(\"rustc\");\n             prepare(\"cargo\");\n-            prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n             prepare(\"clippy\");\n-            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n+            for tool in &[\"rust-docs\", \"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n                 if built_tools.contains(tool) {\n                     prepare(tool);\n                 }"}, {"sha": "a70cdc4b519e664e9a50fbca8fc3b6cc8649931d", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -496,6 +496,7 @@ jobs:\n                 --enable-full-tools\n                 --enable-sanitizers\n                 --enable-profiler\n+                --disable-docs\n                 --set rust.jemalloc\n                 --set llvm.ninja=false\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1"}, {"sha": "67d167e86df7f66e3749137e13fe465d673d9943", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -8,7 +8,7 @@ path = \"lib.rs\"\n \n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n-askama = { version = \"0.11\", default-features = false }\n+askama = { version = \"0.11\", default-features = false, features = [\"config\"] }\n atty = \"0.2\"\n pulldown-cmark = { version = \"0.9\", default-features = false }\n minifier = \"0.0.41\""}, {"sha": "0c984f637ba29c3ece6774fcc137f62645690260", "filename": "src/librustdoc/askama.toml", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Faskama.toml", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Faskama.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Faskama.toml?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -0,0 +1,2 @@\n+[general]\n+dirs = [\"html/templates\"]"}, {"sha": "fff65e3b5ff24fb6d46e539bf4cb14f41e906874", "filename": "src/librustdoc/html/templates/STYLE.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "previous_filename": "src/librustdoc/templates/STYLE.md"}, {"sha": "1322b854b7fc77298fa6390f3fb080d133439134", "filename": "src/librustdoc/html/templates/page.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "previous_filename": "src/librustdoc/templates/page.html"}, {"sha": "459b01a9960d20b18ff4e005cb16740b5bf3c3ec", "filename": "src/librustdoc/html/templates/print_item.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "previous_filename": "src/librustdoc/templates/print_item.html"}, {"sha": "8f5b07769caff860f7b25d69278f101ef957ac8d", "filename": "src/test/ui/symbol-names/foreign-types.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -0,0 +1,19 @@\n+// build-fail\n+// compile-flags: -C symbol-mangling-version=v0\n+\n+#![feature(extern_types)]\n+#![feature(rustc_attrs)]\n+\n+extern \"C\" {\n+    type ForeignType;\n+}\n+\n+struct Check<T: ?Sized>(T);\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMCs\n+//~| ERROR demangling(<foreign_types[\n+//~| ERROR demangling-alt(<foreign_types::Check<foreign_types::ForeignType>>)\n+impl Check<ForeignType> {}\n+\n+fn main() {}"}, {"sha": "fcffdd2a8ec15f148e496e4ae0a2cbc754929492", "filename": "src/test/ui/symbol-names/foreign-types.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fforeign-types.stderr?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -0,0 +1,20 @@\n+error: symbol-name(_RMCsCRATE_HASH_13foreign_typesINtB<REF>_5CheckNvB<REF>_11ForeignTypeE)\n+  --> $DIR/foreign-types.rs:13:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<foreign_types[HASH]::Check<foreign_types[HASH]::ForeignType>>)\n+  --> $DIR/foreign-types.rs:13:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<foreign_types::Check<foreign_types::ForeignType>>)\n+  --> $DIR/foreign-types.rs:13:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "44c96f31d0ba8ca5d71a8aee1e49da371f5cbf28", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -20,8 +20,7 @@ Then, you can generate the manifest and all the packages from `path/to/dist` to\n `path/to/output` with:\n \n ```\n-$ cargo +nightly run path/to/dist path/to/output 1970-01-01 http://example.com \\\n-    CHANNEL VERSION\n+$ cargo +nightly run path/to/dist path/to/output 1970-01-01 http://example.com CHANNEL\n ```\n \n Remember to replace `CHANNEL` with the channel you produced dist artifacts of"}, {"sha": "6b56d6bc4adf068391105254d9e00539619fb004", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 63, "deletions": 35, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -155,17 +155,19 @@ static TARGETS: &[&str] = &[\n     \"x86_64-unknown-hermit\",\n ];\n \n-static DOCS_TARGETS: &[&str] = &[\n-    \"aarch64-unknown-linux-gnu\",\n-    \"i686-apple-darwin\",\n-    \"i686-pc-windows-gnu\",\n-    \"i686-pc-windows-msvc\",\n-    \"i686-unknown-linux-gnu\",\n-    \"x86_64-apple-darwin\",\n-    \"x86_64-pc-windows-gnu\",\n-    \"x86_64-pc-windows-msvc\",\n-    \"x86_64-unknown-linux-gnu\",\n-    \"x86_64-unknown-linux-musl\",\n+/// This allows the manifest to contain rust-docs for hosts that don't build\n+/// docs.\n+///\n+/// Tuples of `(host_partial, host_instead)`. If the host does not have the\n+/// rust-docs component available, then if the host name contains\n+/// `host_partial`, it will use the docs from `host_instead` instead.\n+///\n+/// The order here matters, more specific entries should be first.\n+static DOCS_FALLBACK: &[(&str, &str)] = &[\n+    (\"-apple-\", \"x86_64-apple-darwin\"),\n+    (\"aarch64\", \"aarch64-unknown-linux-gnu\"),\n+    (\"arm-\", \"aarch64-unknown-linux-gnu\"),\n+    (\"\", \"x86_64-unknown-linux-gnu\"),\n ];\n \n static MSI_INSTALLERS: &[&str] = &[\n@@ -301,23 +303,27 @@ impl Builder {\n     }\n \n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n-        let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n-        package(\"rustc\", HOSTS);\n-        package(\"rustc-dev\", HOSTS);\n-        package(\"reproducible-artifacts\", HOSTS);\n-        package(\"rustc-docs\", HOSTS);\n-        package(\"cargo\", HOSTS);\n-        package(\"rust-mingw\", MINGW);\n-        package(\"rust-std\", TARGETS);\n-        package(\"rust-docs\", DOCS_TARGETS);\n-        package(\"rust-src\", &[\"*\"]);\n-        package(\"rls-preview\", HOSTS);\n-        package(\"rust-analyzer-preview\", HOSTS);\n-        package(\"clippy-preview\", HOSTS);\n-        package(\"miri-preview\", HOSTS);\n-        package(\"rustfmt-preview\", HOSTS);\n-        package(\"rust-analysis\", TARGETS);\n-        package(\"llvm-tools-preview\", TARGETS);\n+        macro_rules! package {\n+            ($name:expr, $targets:expr) => {\n+                self.package($name, &mut manifest.pkg, $targets, &[])\n+            };\n+        }\n+        package!(\"rustc\", HOSTS);\n+        package!(\"rustc-dev\", HOSTS);\n+        package!(\"reproducible-artifacts\", HOSTS);\n+        package!(\"rustc-docs\", HOSTS);\n+        package!(\"cargo\", HOSTS);\n+        package!(\"rust-mingw\", MINGW);\n+        package!(\"rust-std\", TARGETS);\n+        self.package(\"rust-docs\", &mut manifest.pkg, HOSTS, DOCS_FALLBACK);\n+        package!(\"rust-src\", &[\"*\"]);\n+        package!(\"rls-preview\", HOSTS);\n+        package!(\"rust-analyzer-preview\", HOSTS);\n+        package!(\"clippy-preview\", HOSTS);\n+        package!(\"miri-preview\", HOSTS);\n+        package!(\"rustfmt-preview\", HOSTS);\n+        package!(\"rust-analysis\", TARGETS);\n+        package!(\"llvm-tools-preview\", TARGETS);\n     }\n \n     fn add_artifacts_to(&mut self, manifest: &mut Manifest) {\n@@ -500,7 +506,13 @@ impl Builder {\n             .extend(pkgs.iter().map(|s| (*s).to_owned()));\n     }\n \n-    fn package(&mut self, pkgname: &str, dst: &mut BTreeMap<String, Package>, targets: &[&str]) {\n+    fn package(\n+        &mut self,\n+        pkgname: &str,\n+        dst: &mut BTreeMap<String, Package>,\n+        targets: &[&str],\n+        fallback: &[(&str, &str)],\n+    ) {\n         let version_info = self\n             .versions\n             .version(&PkgType::from_component(pkgname))\n@@ -512,16 +524,32 @@ impl Builder {\n             is_present = false; // Pretend the component is entirely missing.\n         }\n \n+        macro_rules! tarball_name {\n+            ($target_name:expr) => {\n+                self.versions.tarball_name(&PkgType::from_component(pkgname), $target_name).unwrap()\n+            };\n+        }\n+        let mut target_from_compressed_tar = |target_name| {\n+            let target = Target::from_compressed_tar(self, &tarball_name!(target_name));\n+            if target.available {\n+                return target;\n+            }\n+            for (substr, fallback_target) in fallback {\n+                if target_name.contains(substr) {\n+                    let t = Target::from_compressed_tar(self, &tarball_name!(fallback_target));\n+                    // Fallbacks must always be available.\n+                    assert!(t.available);\n+                    return t;\n+                }\n+            }\n+            Target::unavailable()\n+        };\n+\n         let targets = targets\n             .iter()\n             .map(|name| {\n                 let target = if is_present {\n-                    let filename = self\n-                        .versions\n-                        .tarball_name(&PkgType::from_component(pkgname), name)\n-                        .unwrap();\n-\n-                    Target::from_compressed_tar(self, &filename)\n+                    target_from_compressed_tar(name)\n                 } else {\n                     // If the component is not present for this build add it anyway but mark it as\n                     // unavailable -- this way rustup won't allow upgrades without --force"}, {"sha": "95c2297de264b7d76cb868b88f631b99fe4823a4", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -169,7 +169,7 @@ impl Versions {\n     }\n \n     pub(crate) fn archive_name(\n-        &mut self,\n+        &self,\n         package: &PkgType,\n         target: &str,\n         extension: &str,\n@@ -189,11 +189,7 @@ impl Versions {\n         }\n     }\n \n-    pub(crate) fn tarball_name(\n-        &mut self,\n-        package: &PkgType,\n-        target: &str,\n-    ) -> Result<String, Error> {\n+    pub(crate) fn tarball_name(&self, package: &PkgType, target: &str) -> Result<String, Error> {\n         self.archive_name(package, target, \"tar.gz\")\n     }\n "}, {"sha": "85019df7867dd429b056a0de325afa6e4d9b344d", "filename": "src/tools/rust-demangler/tests/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237949b6c8e5b387e0a9d1e7a22e0397c95fe488/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2Ftests%2Flib.rs?ref=237949b6c8e5b387e0a9d1e7a22e0397c95fe488", "patch": "@@ -29,14 +29,14 @@ cc[4d6468d6c9fd4bb3]::spawn::{closure#0}::{closure#0}\n <core[846817f741e54dfd]::slice::Iter<u8> as core[846817f741e54dfd]::iter::iterator::Iterator>::rposition::<core[846817f741e54dfd]::slice::memchr::memrchr::{closure#1}>::{closure#0}\n alloc[f15a878b47eb696b]::alloc::box_free::<dyn alloc[f15a878b47eb696b]::boxed::FnBox<(), Output = ()>>\n INtC8arrayvec8ArrayVechKj7b_E\n-<const_generic[317d481089b8c8fe]::Unsigned<11: u8>>\n-<const_generic[317d481089b8c8fe]::Signed<152: i16>>\n-<const_generic[317d481089b8c8fe]::Signed<-11: i8>>\n-<const_generic[317d481089b8c8fe]::Bool<false: bool>>\n-<const_generic[317d481089b8c8fe]::Bool<true: bool>>\n-<const_generic[317d481089b8c8fe]::Char<'v': char>>\n-<const_generic[317d481089b8c8fe]::Char<'\\n': char>>\n-<const_generic[317d481089b8c8fe]::Char<'\u2202': char>>\n+<const_generic[317d481089b8c8fe]::Unsigned<11u8>>\n+<const_generic[317d481089b8c8fe]::Signed<152i16>>\n+<const_generic[317d481089b8c8fe]::Signed<-11i8>>\n+<const_generic[317d481089b8c8fe]::Bool<false>>\n+<const_generic[317d481089b8c8fe]::Bool<true>>\n+<const_generic[317d481089b8c8fe]::Char<'v'>>\n+<const_generic[317d481089b8c8fe]::Char<'\\n'>>\n+<const_generic[317d481089b8c8fe]::Char<'\u2202'>>\n <const_generic[317d481089b8c8fe]::Foo<_>>::foo::FOO\n foo[0]\n foo[0]\n@@ -51,14 +51,14 @@ cc::spawn::{closure#0}::{closure#0}\n <core::slice::Iter<u8> as core::iter::iterator::Iterator>::rposition::<core::slice::memchr::memrchr::{closure#1}>::{closure#0}\n alloc::alloc::box_free::<dyn alloc::boxed::FnBox<(), Output = ()>>\n INtC8arrayvec8ArrayVechKj7b_E\n-<const_generic::Unsigned<11: u8>>\n-<const_generic::Signed<152: i16>>\n-<const_generic::Signed<-11: i8>>\n-<const_generic::Bool<false: bool>>\n-<const_generic::Bool<true: bool>>\n-<const_generic::Char<'v': char>>\n-<const_generic::Char<'\\n': char>>\n-<const_generic::Char<'\u2202': char>>\n+<const_generic::Unsigned<11u8>>\n+<const_generic::Signed<152i16>>\n+<const_generic::Signed<-11i8>>\n+<const_generic::Bool<false>>\n+<const_generic::Bool<true>>\n+<const_generic::Char<'v'>>\n+<const_generic::Char<'\\n'>>\n+<const_generic::Char<'\u2202'>>\n <const_generic::Foo<_>>::foo::FOO\n foo[0]\n foo[0]"}]}