{"sha": "fceec03da005edc82c90f1cbe1d102e8f365bad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZWVjMDNkYTAwNWVkYzgyYzkwZjFjYmUxZDEwMmU4ZjM2NWJhZDA=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-01T11:45:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T05:56:53Z"}, "message": "Propagating unsafe::slice 3", "tree": {"sha": "947e5b433fe4a7b44860697c6d7bc17e54af3647", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947e5b433fe4a7b44860697c6d7bc17e54af3647"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fceec03da005edc82c90f1cbe1d102e8f365bad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fceec03da005edc82c90f1cbe1d102e8f365bad0", "html_url": "https://github.com/rust-lang/rust/commit/fceec03da005edc82c90f1cbe1d102e8f365bad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fceec03da005edc82c90f1cbe1d102e8f365bad0/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "html_url": "https://github.com/rust-lang/rust/commit/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "fee4356cadb7c4ea73ccd01a6a4f7929690c28d4", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=fceec03da005edc82c90f1cbe1d102e8f365bad0", "patch": "@@ -562,9 +562,9 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n fn link_binary(sess: session,\n                obj_filename: str,\n                out_filename: str,\n-               lm: link_meta) unsafe {\n+               lm: link_meta) {\n     // Converts a library file name into a gcc -l argument\n-    fn unlib(config: @session::config, filename: str) -> str {\n+    fn unlib(config: @session::config, filename: str) -> str unsafe {\n         let rmlib = fn@(filename: str) -> str {\n             if config.os == session::os_macos ||\n                 (config.os == session::os_linux ||"}, {"sha": "eab92ab6ae9ec12f07b7e63cc0de89ab65edcddc", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=fceec03da005edc82c90f1cbe1d102e8f365bad0", "patch": "@@ -108,7 +108,7 @@ fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n     ret @{name: lo.filename, lines: lines};\n }\n \n-fn get_line(fm: filemap, line: int) -> str {\n+fn get_line(fm: filemap, line: int) -> str unsafe {\n     let begin: uint = fm.lines[line].byte - fm.start_pos.byte;\n     let end: uint;\n     if line as uint < vec::len(fm.lines) - 1u {\n@@ -118,11 +118,11 @@ fn get_line(fm: filemap, line: int) -> str {\n         // parsed. If we just slice the rest of the string, we'll print out\n         // the remainder of the file, which is undesirable.\n         end = str::byte_len(*fm.src);\n-        let rest = str::slice(*fm.src, begin, end);\n+        let rest = str::unsafe::slice(*fm.src, begin, end);\n         let newline = str::index(rest, '\\n' as u8);\n         if newline != -1 { end = begin + (newline as uint); }\n     }\n-    ret str::slice(*fm.src, begin, end);\n+    ret str::unsafe::slice(*fm.src, begin, end);\n }\n \n fn get_filemap(cm: codemap, filename: str) -> filemap {"}, {"sha": "30dacd27d4eb3506bdb37d7d7eaa2553d93f93cc", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=fceec03da005edc82c90f1cbe1d102e8f365bad0", "patch": "@@ -579,7 +579,8 @@ fn all_whitespace(s: str, begin: uint, end: uint) -> bool {\n     ret true;\n }\n \n-fn trim_whitespace_prefix_and_push_line(&lines: [str], s: str, col: uint) unsafe {\n+fn trim_whitespace_prefix_and_push_line(&lines: [str],\n+                                        s: str, col: uint) unsafe {\n     let s1;\n     if all_whitespace(s, 0u, col) {\n         if col < str::byte_len(s) {"}, {"sha": "014419a2aeb4232f8df44cc63b78da31c774442c", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=fceec03da005edc82c90f1cbe1d102e8f365bad0", "patch": "@@ -22,7 +22,7 @@ fn load_errors(testfile: str) -> [expected_error] {\n     ret error_patterns;\n }\n \n-fn parse_expected(line_num: uint, line: str) -> [expected_error] {\n+fn parse_expected(line_num: uint, line: str) -> [expected_error] unsafe {\n     let error_tag = \"//!\";\n     let idx0 = str::find(line, error_tag);\n     if idx0 < 0 { ret []; }\n@@ -41,11 +41,11 @@ fn parse_expected(line_num: uint, line: str) -> [expected_error] {\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n     let start_kind = idx;\n     while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n-    let kind = str::to_lower(str::slice(line, start_kind, idx));\n+    let kind = str::to_lower(str::unsafe::slice(line, start_kind, idx));\n \n     // Extract msg:\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n-    let msg = str::slice(line, idx, len);\n+    let msg = str::unsafe::slice(line, idx, len);\n \n     #debug(\"line=%u kind=%s msg=%s\", line_num - adjust_line, kind, msg);\n "}, {"sha": "0f6665282102f3002a10a6dc869aa56407d8ac5c", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fceec03da005edc82c90f1cbe1d102e8f365bad0/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=fceec03da005edc82c90f1cbe1d102e8f365bad0", "patch": "@@ -104,12 +104,12 @@ fn parse_name_directive(line: str, directive: str) -> bool {\n }\n \n fn parse_name_value_directive(line: str,\n-                              directive: str) -> option<str> {\n+                              directive: str) -> option<str> unsafe {\n     let keycolon = directive + \":\";\n     if str::find(line, keycolon) >= 0 {\n         let colon = str::find(line, keycolon) as uint;\n         let value =\n-            str::slice(line, colon + str::byte_len(keycolon),\n+            str::unsafe::slice(line, colon + str::byte_len(keycolon),\n                        str::byte_len(line));\n         #debug(\"%s: %s\", directive,  value);\n         option::some(value)"}]}