{"sha": "aba665da32708017c2fcbe7f922eb087a8dbe3b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYTY2NWRhMzI3MDgwMTdjMmZjYmU3ZjkyMmViMDg3YThkYmUzYjE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-12T17:47:37Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-13T01:16:00Z"}, "message": "Fix the signature on vec::view.\n\nDue to limitations in region inference, this has the effect of making vec::view pretty much entirely unusable.", "tree": {"sha": "246042659a7c4c3d9a901a8ec84d0b96a9923569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/246042659a7c4c3d9a901a8ec84d0b96a9923569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aba665da32708017c2fcbe7f922eb087a8dbe3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aba665da32708017c2fcbe7f922eb087a8dbe3b1", "html_url": "https://github.com/rust-lang/rust/commit/aba665da32708017c2fcbe7f922eb087a8dbe3b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aba665da32708017c2fcbe7f922eb087a8dbe3b1/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a276dba52b5e717d12ab410832bdc13c28e9a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a276dba52b5e717d12ab410832bdc13c28e9a67", "html_url": "https://github.com/rust-lang/rust/commit/1a276dba52b5e717d12ab410832bdc13c28e9a67"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "5f450ec8e34d7aa7887e2150d2e11b9f2864fe7e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=aba665da32708017c2fcbe7f922eb087a8dbe3b1", "patch": "@@ -258,13 +258,13 @@ pure fn slice<T: copy>(v: &[const T], start: uint, end: uint) -> ~[T] {\n     assert (end <= len(v));\n     let mut result = ~[];\n     unchecked {\n-        push_all(result, view(v, start, end));\n+        for uint::range(start, end) |i| { vec::push(result, v[i]) }\n     }\n     ret result;\n }\n \n #[doc = \"Return a slice that points into another slice.\"]\n-pure fn view<T>(v: &[const T], start: uint, end: uint) -> &a.[T] {\n+pure fn view<T>(v: &a.[T], start: uint, end: uint) -> &a.[T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     do unpack_slice(v) |p, _len| {"}, {"sha": "69a4920a4ae1a72b8f50e12f93ce9e32d1cad462", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=aba665da32708017c2fcbe7f922eb087a8dbe3b1", "patch": "@@ -122,8 +122,9 @@ fn tagged_docs(d: doc, tg: uint, it: fn(doc)) {\n \n fn doc_data(d: doc) -> ~[u8] { vec::slice::<u8>(*d.data, d.start, d.end) }\n \n-fn with_doc_data<T>(d: doc, f: fn(x:&[u8]) -> T) -> T {\n-    ret f(vec::view::<u8>(*d.data, d.start, d.end));\n+fn with_doc_data<T>(d: doc, f: fn(x: &[u8]) -> T) -> T {\n+    // FIXME (#2880): use vec::view once the region inferencer can handle it.\n+    ret f(vec::slice::<u8>(*d.data, d.start, d.end));\n }\n \n fn doc_as_str(d: doc) -> str { ret str::from_bytes(doc_data(d)); }"}, {"sha": "f29dc26ed390956c291bd9193cfe26a91985b0c8", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=aba665da32708017c2fcbe7f922eb087a8dbe3b1", "patch": "@@ -144,7 +144,8 @@ fn get_relative_to(abs1: path::path, abs2: path::path) -> path::path {\n     let mut path = ~[];\n     for uint::range(start_idx, len1 - 1u) |_i| { vec::push(path, \"..\"); };\n \n-    vec::push_all(path, vec::view(split2, start_idx, len2 - 1u));\n+    // FIXME (#2880): use view here.\n+    vec::push_all(path, vec::slice(split2, start_idx, len2 - 1u));\n \n     if check vec::is_not_empty(path) {\n         ret path::connect_many(path);"}, {"sha": "a1c42ebc26382eb7b95735f2790f01990f380f8d", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=aba665da32708017c2fcbe7f922eb087a8dbe3b1", "patch": "@@ -73,7 +73,8 @@ fn lookup_hash(d: ebml::doc, eq_fn: fn@(x:&[u8]) -> bool, hash: uint) ->\n     let belt = tag_index_buckets_bucket_elt;\n     do ebml::tagged_docs(bucket, belt) |elt| {\n         let pos = io::u64_from_be_bytes(*elt.data, elt.start, 4u) as uint;\n-        if eq_fn(vec::view::<u8>(*elt.data, elt.start + 4u, elt.end)) {\n+        // FIXME (#2880): use view here.\n+        if eq_fn(vec::slice::<u8>(*elt.data, elt.start + 4u, elt.end)) {\n             vec::push(result, ebml::doc_at(d.data, pos).doc);\n         }\n     };"}, {"sha": "2fdf8c3ff7f3689438c47a24710d9175f597ba42", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=aba665da32708017c2fcbe7f922eb087a8dbe3b1", "patch": "@@ -114,7 +114,8 @@ fn expand_nested_bindings(m: match, col: uint, val: ValueRef) -> match {\n             let pats = vec::append(\n                 vec::slice(br.pats, 0u, col),\n                 vec::append(~[inner],\n-                            vec::view(br.pats, col + 1u, br.pats.len())));\n+                            // FIXME (#2880): use view here.\n+                            vec::slice(br.pats, col + 1u, br.pats.len())));\n             vec::push(result,\n                       @{pats: pats,\n                         bound: vec::append(\n@@ -137,8 +138,10 @@ fn enter_match(dm: def_map, m: match, col: uint, val: ValueRef,\n         alt e(br.pats[col]) {\n           some(sub) {\n             let pats = vec::append(\n-                vec::append(sub, vec::view(br.pats, 0u, col)),\n-                vec::view(br.pats, col + 1u, br.pats.len()));\n+                // FIXME (#2880): use view here.\n+                vec::append(sub, vec::slice(br.pats, 0u, col)),\n+                // FIXME (#2880): use view here.\n+                vec::slice(br.pats, col + 1u, br.pats.len()));\n             let self = br.pats[col];\n             let bound = alt self.node {\n               ast::pat_ident(name, none) if !pat_is_variant(dm, self) {\n@@ -427,7 +430,8 @@ fn compile_submatch(bcx: block, m: match, vals: ~[ValueRef],\n             } else { m };\n \n     let vals_left = vec::append(vec::slice(vals, 0u, col),\n-                                vec::view(vals, col + 1u, vals.len()));\n+                                // FIXME (#2880): use view here.\n+                                vec::slice(vals, col + 1u, vals.len()));\n     let ccx = bcx.fcx.ccx;\n     let mut pat_id = 0;\n     for vec::each(m) |br| {"}, {"sha": "4995713fbdb9511633f4e52f0bcfe3336eb96ebd", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aba665da32708017c2fcbe7f922eb087a8dbe3b1/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=aba665da32708017c2fcbe7f922eb087a8dbe3b1", "patch": "@@ -313,7 +313,8 @@ fn revoke_clean(cx: block, val: ValueRef) {\n         })) |i| {\n             info.cleanups =\n                 vec::append(vec::slice(info.cleanups, 0u, i),\n-                            vec::view(info.cleanups,\n+                            // FIXME (#2880): use view here.\n+                            vec::slice(info.cleanups,\n                                       i + 1u,\n                                       info.cleanups.len()));\n             scope_clean_changed(info);"}]}