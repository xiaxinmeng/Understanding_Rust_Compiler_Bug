{"sha": "3433851a37f04621e0c091ec2180aeddbdd5ada5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzM4NTFhMzdmMDQ2MjFlMGMwOTFlYzIxODBhZWRkYmRkNWFkYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-26T16:47:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-26T16:47:16Z"}, "message": "auto merge of #7345 : blake2-ppc/rust/iterator-flat-map, r=thestinger\n\nflat_map_ produces an iterator that maps each element to an iterator,\r\nand yields the elements of the produced iterators.\r\n\r\nThis is the monadic bind :: M a -> (a -> M b) -> M b  for iterators.\r\n\r\nNamed just like the vec method, but with a trailing underline until the\r\nmethod resolution bug is resolved.\r\n\r\nWe discussed the name chain_map, but I decided to go with flat_map_ for consistency with vec.\r\n\r\nSince it.map(f).flatten()  would be the same as it.flat_map(f), we could choose\r\nto just implement a flatten method instead. Either way the possibilities are the same but flat_map is more convenient.", "tree": {"sha": "521ab48bddd3bc26043cfcaa23db5b85cf8ab8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/521ab48bddd3bc26043cfcaa23db5b85cf8ab8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3433851a37f04621e0c091ec2180aeddbdd5ada5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3433851a37f04621e0c091ec2180aeddbdd5ada5", "html_url": "https://github.com/rust-lang/rust/commit/3433851a37f04621e0c091ec2180aeddbdd5ada5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3433851a37f04621e0c091ec2180aeddbdd5ada5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b4807a5b620627cf6e782524fbe6fc1463c2d", "html_url": "https://github.com/rust-lang/rust/commit/4e5b4807a5b620627cf6e782524fbe6fc1463c2d"}, {"sha": "6291702cf334f4b1fe41662bc3b0d996ca7ced19", "url": "https://api.github.com/repos/rust-lang/rust/commits/6291702cf334f4b1fe41662bc3b0d996ca7ced19", "html_url": "https://github.com/rust-lang/rust/commit/6291702cf334f4b1fe41662bc3b0d996ca7ced19"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "ab433a9a79d0ca4325950c7df7aca18e628db7ef", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3433851a37f04621e0c091ec2180aeddbdd5ada5/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3433851a37f04621e0c091ec2180aeddbdd5ada5/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=3433851a37f04621e0c091ec2180aeddbdd5ada5", "patch": "@@ -225,6 +225,26 @@ pub trait IteratorUtil<A> {\n     fn scan<'r, St, B>(self, initial_state: St, f: &'r fn(&mut St, A) -> Option<B>)\n         -> ScanIterator<'r, A, B, Self, St>;\n \n+    /// Creates an iterator that maps each element to an iterator,\n+    /// and yields the elements of the produced iterators\n+    ///\n+    /// # Example\n+    ///\n+    /// ~~~ {.rust}\n+    /// let xs = [2u, 3];\n+    /// let ys = [0u, 1, 0, 1, 2];\n+    /// let mut it = xs.iter().flat_map_(|&x| Counter::new(0u, 1).take_(x));\n+    /// // Check that `it` has the same elements as `ys`\n+    /// let mut i = 0;\n+    /// for it.advance |x: uint| {\n+    ///     assert_eq!(x, ys[i]);\n+    ///     i += 1;\n+    /// }\n+    /// ~~~\n+    // FIXME: #5898: should be called `flat_map`\n+    fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n+        -> FlatMapIterator<'r, A, B, Self, U>;\n+\n     /// An adaptation of an external iterator to the for-loop protocol of rust.\n     ///\n     /// # Example\n@@ -396,6 +416,12 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         ScanIterator{iter: self, f: f, state: initial_state}\n     }\n \n+    #[inline]\n+    fn flat_map_<'r, B, U: Iterator<B>>(self, f: &'r fn(A) -> U)\n+        -> FlatMapIterator<'r, A, B, T, U> {\n+        FlatMapIterator{iter: self, f: f, subiter: None }\n+    }\n+\n     /// A shim implementing the `for` loop iteration protocol for iterator objects\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool {\n@@ -868,6 +894,34 @@ impl<'self, A, B, T: Iterator<A>, St> Iterator<B> for ScanIterator<'self, A, B,\n     }\n }\n \n+/// An iterator that maps each element to an iterator,\n+/// and yields the elements of the produced iterators\n+///\n+// FIXME #6967: Dummy B parameter to get around type inference bug\n+pub struct FlatMapIterator<'self, A, B, T, U> {\n+    priv iter: T,\n+    priv f: &'self fn(A) -> U,\n+    priv subiter: Option<U>,\n+}\n+\n+impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n+    FlatMapIterator<'self, A, B, T, U> {\n+    #[inline]\n+    fn next(&mut self) -> Option<B> {\n+        loop {\n+            for self.subiter.mut_iter().advance |inner| {\n+                for inner.advance |x| {\n+                    return Some(x)\n+                }\n+            }\n+            match self.iter.next().map_consume(self.f) {\n+                None => return None,\n+                next => self.subiter = next,\n+            }\n+        }\n+    }\n+}\n+\n /// An iterator which just modifies the contained state throughout iteration.\n pub struct UnfoldrIterator<'self, A, St> {\n     priv f: &'self fn(&mut St) -> Option<A>,\n@@ -1046,6 +1100,19 @@ mod tests {\n         assert_eq!(i, ys.len());\n     }\n \n+    #[test]\n+    fn test_iterator_flat_map() {\n+        let xs = [0u, 3, 6];\n+        let ys = [0u, 1, 2, 3, 4, 5, 6, 7, 8];\n+        let mut it = xs.iter().flat_map_(|&x| Counter::new(x, 1).take_(3));\n+        let mut i = 0;\n+        for it.advance |x: uint| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, ys.len());\n+    }\n+\n     #[test]\n     fn test_unfoldr() {\n         fn count(st: &mut uint) -> Option<uint> {"}]}