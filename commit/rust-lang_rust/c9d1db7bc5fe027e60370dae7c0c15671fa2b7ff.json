{"sha": "c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDFkYjdiYzVmZTAyN2U2MDM3MGRhZTdjMGMxNTY3MWZhMmI3ZmY=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2017-11-16T23:32:13Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2017-11-17T22:16:37Z"}, "message": "Do not registor borrows for unsafe lvalues", "tree": {"sha": "f599306baf070097e227fb9e4de2e37bf95214ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f599306baf070097e227fb9e4de2e37bf95214ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff", "html_url": "https://github.com/rust-lang/rust/commit/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3be597acf3a0cac1939c4d9f0789510221667c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/3be597acf3a0cac1939c4d9f0789510221667c96", "html_url": "https://github.com/rust-lang/rust/commit/3be597acf3a0cac1939c4d9f0789510221667c96"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "1e9d916def04491b88eded238f0f1fb6bf105ca0", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::mir::{self, Location, Mir};\n use rustc::mir::visit::Visitor;\n-use rustc::ty::{Region, TyCtxt};\n+use rustc::ty::{self, Region, TyCtxt};\n use rustc::ty::RegionKind;\n use rustc::ty::RegionKind::ReScope;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -71,10 +71,14 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                mir: &'a Mir<'tcx>,\n                nonlexical_regioncx: Option<&'a RegionInferenceContext<'tcx>>)\n                -> Self {\n-        let mut visitor = GatherBorrows { idx_vec: IndexVec::new(),\n-                                          location_map: FxHashMap(),\n-                                          region_map: FxHashMap(),\n-                                          region_span_map: FxHashMap()};\n+        let mut visitor = GatherBorrows {\n+            tcx,\n+            mir,\n+            idx_vec: IndexVec::new(),\n+            location_map: FxHashMap(),\n+            region_map: FxHashMap(),\n+            region_span_map: FxHashMap()\n+        };\n         visitor.visit_mir(mir);\n         return Borrows { tcx: tcx,\n                          mir: mir,\n@@ -84,17 +88,22 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                          region_span_map: visitor.region_span_map,\n                          nonlexical_regioncx };\n \n-        struct GatherBorrows<'tcx> {\n+        struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n+            tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+            mir: &'a Mir<'tcx>,\n             idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n             location_map: FxHashMap<Location, BorrowIndex>,\n             region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n             region_span_map: FxHashMap<RegionKind, Span>,\n         }\n-        impl<'tcx> Visitor<'tcx> for GatherBorrows<'tcx> {\n+\n+        impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n             fn visit_rvalue(&mut self,\n                             rvalue: &mir::Rvalue<'tcx>,\n                             location: mir::Location) {\n                 if let mir::Rvalue::Ref(region, kind, ref lvalue) = *rvalue {\n+                    if is_unsafe_lvalue(self.tcx, self.mir, lvalue) { return; }\n+\n                     let borrow = BorrowData {\n                         location: location, kind: kind, region: region, lvalue: lvalue.clone(),\n                     };\n@@ -197,7 +206,8 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             }\n \n             mir::StatementKind::Assign(_, ref rhs) => {\n-                if let mir::Rvalue::Ref(region, _, _) = *rhs {\n+                if let mir::Rvalue::Ref(region, _, ref lvalue) = *rhs {\n+                    if is_unsafe_lvalue(self.tcx, self.mir, lvalue) { return; }\n                     let index = self.location_map.get(&location).unwrap_or_else(|| {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });\n@@ -248,3 +258,35 @@ impl<'a, 'gcx, 'tcx> DataflowOperator for Borrows<'a, 'gcx, 'tcx> {\n         false // bottom = no Rvalue::Refs are active by default\n     }\n }\n+\n+fn is_unsafe_lvalue<'a, 'gcx: 'tcx, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    lvalue: &mir::Lvalue<'tcx>\n+) -> bool {\n+    use self::mir::Lvalue::*;\n+    use self::mir::ProjectionElem;\n+\n+    match *lvalue {\n+        Local(_) => false,\n+        Static(ref static_) => tcx.is_static_mut(static_.def_id),\n+        Projection(ref proj) => {\n+            match proj.elem {\n+                ProjectionElem::Field(..) |\n+                ProjectionElem::Downcast(..) |\n+                ProjectionElem::Subslice { .. } |\n+                ProjectionElem::ConstantIndex { .. } |\n+                ProjectionElem::Index(_) => {\n+                    is_unsafe_lvalue(tcx, mir, &proj.base)\n+                }\n+                ProjectionElem::Deref => {\n+                    let ty = proj.base.ty(mir, tcx).to_ty(tcx);\n+                    match ty.sty {\n+                        ty::TyRawPtr(..) => true,\n+                        _ => is_unsafe_lvalue(tcx, mir, &proj.base),\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "d1cf08ac75463e0329cf78361f2e91c64ff22d95", "filename": "src/test/compile-fail/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=c9d1db7bc5fe027e60370dae7c0c15671fa2b7ff", "patch": "@@ -46,12 +46,6 @@ impl Baz {\n     }\n }\n \n-static mut sfoo : Foo = Foo{x: 23 };\n-static mut sbar : Bar = Bar(23);\n-static mut stuple : (i32, i32) = (24, 25);\n-static mut senum : Baz = Baz::X(26);\n-static mut sunion : U = U { a: 0 };\n-\n fn main() {\n     // Local and field from struct\n     {\n@@ -96,34 +90,6 @@ fn main() {\n              //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n              //[mir]~| ERROR cannot use `u.a` because it was mutably borrowed (Mir)\n     }\n-    // Static and field from struct\n-    unsafe {\n-        let _x = sfoo.x();\n-        sfoo.x; //[mir]~ ERROR cannot use `sfoo.x` because it was mutably borrowed (Mir)\n-    }\n-    // Static and field from tuple-struct\n-    unsafe {\n-        let _0 = sbar.x();\n-        sbar.0; //[mir]~ ERROR cannot use `sbar.0` because it was mutably borrowed (Mir)\n-    }\n-    // Static and field from tuple\n-    unsafe {\n-        let _0 = &mut stuple.0;\n-        stuple.0; //[mir]~ ERROR cannot use `stuple.0` because it was mutably borrowed (Mir)\n-    }\n-    // Static and field from enum\n-    unsafe {\n-        let _e0 = senum.x();\n-        match senum {\n-            Baz::X(value) => value\n-            //[mir]~^ ERROR cannot use `senum.0` because it was mutably borrowed (Mir)\n-        };\n-    }\n-    // Static and field from union\n-    unsafe {\n-        let _ra = &mut sunion.a;\n-        sunion.a; //[mir]~ ERROR cannot use `sunion.a` because it was mutably borrowed (Mir)\n-    }\n     // Deref and field from struct\n     {\n         let mut f = Box::new(Foo { x: 22 });"}]}