{"sha": "3f95303db6237b24dd4be097f5436fb14eb8ae6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOTUzMDNkYjYyMzdiMjRkZDRiZTA5N2Y1NDM2ZmIxNGViOGFlNmU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-16T04:48:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-16T04:48:13Z"}, "message": "Rollup merge of #39793 - RalfJung:cell, r=alexcrichton\n\nAllow more Cell methods for non-Copy types\n\nClearly, `get_mut` is safe for any `T`. The other two only provide unsafe pointers anyway.\n\nThe only remaining inherent method with `Copy` bound is `get`, which sounds about right to me.\n\nI found the order if `impl` blocks in the file a little weird (first inherent impl, then some trait impls, then another inherent impl), but didn't change it to keep the diff small.\n\nContributes to #39264", "tree": {"sha": "dd42de441ddcdda0110f67ff906beff6de08929d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd42de441ddcdda0110f67ff906beff6de08929d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f95303db6237b24dd4be097f5436fb14eb8ae6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f95303db6237b24dd4be097f5436fb14eb8ae6e", "html_url": "https://github.com/rust-lang/rust/commit/3f95303db6237b24dd4be097f5436fb14eb8ae6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f95303db6237b24dd4be097f5436fb14eb8ae6e/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef45eca8a5208d99560f56159adbe349246d7a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef45eca8a5208d99560f56159adbe349246d7a3c", "html_url": "https://github.com/rust-lang/rust/commit/ef45eca8a5208d99560f56159adbe349246d7a3c"}, {"sha": "044ed10fee3351da2315d5d8e26949929ad918ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/044ed10fee3351da2315d5d8e26949929ad918ce", "html_url": "https://github.com/rust-lang/rust/commit/044ed10fee3351da2315d5d8e26949929ad918ce"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "736797d162b1d1585361a76f4016e6cb780d9372", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/3f95303db6237b24dd4be097f5436fb14eb8ae6e/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f95303db6237b24dd4be097f5436fb14eb8ae6e/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=3f95303db6237b24dd4be097f5436fb14eb8ae6e", "patch": "@@ -213,66 +213,6 @@ impl<T:Copy> Cell<T> {\n     pub fn get(&self) -> T {\n         unsafe{ *self.value.get() }\n     }\n-\n-    /// Returns a reference to the underlying `UnsafeCell`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(as_unsafe_cell)]\n-    ///\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let uc = c.as_unsafe_cell();\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n-    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n-    pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n-        &self.value\n-    }\n-\n-    /// Returns a raw pointer to the underlying data in this cell.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let ptr = c.as_ptr();\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n-    pub fn as_ptr(&self) -> *mut T {\n-        self.value.get()\n-    }\n-\n-    /// Returns a mutable reference to the underlying data.\n-    ///\n-    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n-    /// that we possess the only reference.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let mut c = Cell::new(5);\n-    /// *c.get_mut() += 1;\n-    ///\n-    /// assert_eq!(c.get(), 6);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n-    pub fn get_mut(&mut self) -> &mut T {\n-        unsafe {\n-            &mut *self.value.get()\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -290,7 +230,7 @@ impl<T:Copy> Clone for Cell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:Default + Copy> Default for Cell<T> {\n+impl<T:Default> Default for Cell<T> {\n     /// Creates a `Cell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> Cell<T> {\n@@ -346,7 +286,7 @@ impl<T:Ord + Copy> Ord for Cell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T: Copy> From<T> for Cell<T> {\n+impl<T> From<T> for Cell<T> {\n     fn from(t: T) -> Cell<T> {\n         Cell::new(t)\n     }\n@@ -370,6 +310,66 @@ impl<T> Cell<T> {\n         }\n     }\n \n+    /// Returns a reference to the underlying `UnsafeCell`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_unsafe_cell)]\n+    ///\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let uc = c.as_unsafe_cell();\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n+    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n+    pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n+        &self.value\n+    }\n+\n+    /// Returns a raw pointer to the underlying data in this cell.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let ptr = c.as_ptr();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n+    pub fn as_ptr(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n+    /// that we possess the only reference.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut c = Cell::new(5);\n+    /// *c.get_mut() += 1;\n+    ///\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n+\n     /// Sets the contained value.\n     ///\n     /// # Examples"}]}