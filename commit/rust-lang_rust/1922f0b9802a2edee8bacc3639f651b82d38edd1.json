{"sha": "1922f0b9802a2edee8bacc3639f651b82d38edd1", "node_id": "C_kwDOAAsO6NoAKDE5MjJmMGI5ODAyYTJlZGVlOGJhY2MzNjM5ZjY1MWI4MmQzOGVkZDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-08T20:32:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T20:32:18Z"}, "message": "Rollup merge of #97557 - compiler-errors:arg-mismatch-mini, r=jackh726\n\nFix indices and remove some unwraps in arg mismatch algorithm\n\nThis is a more conservative fix than #97542, addressing some indices which were used incorectly and unwraps which are bound to panic (e.g. when the provided and expected arg counts differ). Beta nominating this as it's quite easy to cause ICEs -- I wrote a fuzzer and found hundreds of examples of ICEs.\n\ncc `@jackh726` as author of #92364, and `@estebank` as reviewer of that PR.\nfixes #97484\nr? `@jackh726` this should be _much_ easier to review than the other PR :sweat_smile:", "tree": {"sha": "c630950a8cfa9f85c0648f074b1395dd34462081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c630950a8cfa9f85c0648f074b1395dd34462081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1922f0b9802a2edee8bacc3639f651b82d38edd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioQdTCRBK7hj4Ov3rIwAAPmoIAKR/bD3JDPokHXqU24lrMZmW\n7DjUUu4/dv/JvlrGzaYJI7v8IbDBUC6B6wOA4eeEvZsNEzSNVqKTCYZE4Lwpg4OX\nHJwqmktTUTeRZa0be7qt0ut+9UkCKLeNWu2E+j2Zjc9gSXmR2eGSR3gW4D3+p/az\nl3ycaWMnnKrd/J3uulUW+9rrD9hQ+hbm8Eetls7drY4A8GBTw2neU3iCG+waYQ+X\nKU+FIzA8sUYzlzJhCsbDLUc/JuB3fbh+UWMJoDM0TJV0ZkJ/ZW8VzLnDNgN7FtKc\nnxbR1gfGnkdrYf70plaAzvsvc5h03bhkM/QEIQ4rDaDUiJccQzVJvLoVsZZtQKM=\n=nAp3\n-----END PGP SIGNATURE-----\n", "payload": "tree c630950a8cfa9f85c0648f074b1395dd34462081\nparent 263d8682d6e01bb02727b15b1c72ffabc0e7396b\nparent 4b26d410880fc06a8035ae3efa7b01a243ed7e75\nauthor Michael Goulet <michael@errs.io> 1654720338 -0700\ncommitter GitHub <noreply@github.com> 1654720338 -0700\n\nRollup merge of #97557 - compiler-errors:arg-mismatch-mini, r=jackh726\n\nFix indices and remove some unwraps in arg mismatch algorithm\n\nThis is a more conservative fix than #97542, addressing some indices which were used incorectly and unwraps which are bound to panic (e.g. when the provided and expected arg counts differ). Beta nominating this as it's quite easy to cause ICEs -- I wrote a fuzzer and found hundreds of examples of ICEs.\n\ncc `@jackh726` as author of #92364, and `@estebank` as reviewer of that PR.\nfixes #97484\nr? `@jackh726` this should be _much_ easier to review than the other PR :sweat_smile:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1922f0b9802a2edee8bacc3639f651b82d38edd1", "html_url": "https://github.com/rust-lang/rust/commit/1922f0b9802a2edee8bacc3639f651b82d38edd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1922f0b9802a2edee8bacc3639f651b82d38edd1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "263d8682d6e01bb02727b15b1c72ffabc0e7396b", "url": "https://api.github.com/repos/rust-lang/rust/commits/263d8682d6e01bb02727b15b1c72ffabc0e7396b", "html_url": "https://github.com/rust-lang/rust/commit/263d8682d6e01bb02727b15b1c72ffabc0e7396b"}, {"sha": "4b26d410880fc06a8035ae3efa7b01a243ed7e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b26d410880fc06a8035ae3efa7b01a243ed7e75", "html_url": "https://github.com/rust-lang/rust/commit/4b26d410880fc06a8035ae3efa7b01a243ed7e75"}], "stats": {"total": 142, "additions": 95, "deletions": 47}, "files": [{"sha": "0d0cc9298394e851906d4d8b5941a02296f681ef", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1922f0b9802a2edee8bacc3639f651b82d38edd1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922f0b9802a2edee8bacc3639f651b82d38edd1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=1922f0b9802a2edee8bacc3639f651b82d38edd1", "patch": "@@ -445,16 +445,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let found_errors = !errors.is_empty();\n \n             errors.drain_filter(|error| {\n-                let Error::Invalid(input_idx, arg_idx, Compatibility::Incompatible(error)) = error else { return false };\n+                let Error::Invalid(input_idx, arg_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n                 let expected_ty = expected_input_tys[*arg_idx];\n-                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap_or_else(|| tcx.ty_error());\n                 let cause = &self.misc(provided_args[*input_idx].span);\n                 let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n-                if let Some(e) = error {\n-                    if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n-                        self.report_and_explain_type_error(trace, e).emit();\n-                        return true;\n-                    }\n+                if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n+                    self.report_and_explain_type_error(trace, e).emit();\n+                    return true;\n                 }\n                 false\n             });\n@@ -585,7 +583,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 )) = errors.iter().next()\n                 {\n                     let expected_ty = expected_input_tys[*arg_idx];\n-                    let provided_ty = final_arg_types[*arg_idx].map(|ty| ty.0).unwrap();\n+                    let provided_ty = final_arg_types[*input_idx]\n+                        .map(|ty| ty.0)\n+                        .unwrap_or_else(|| tcx.ty_error());\n                     let expected_ty = self.resolve_vars_if_possible(expected_ty);\n                     let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                     let cause = &self.misc(provided_args[*input_idx].span);\n@@ -595,7 +595,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &mut err,\n                         &provided_args[*input_idx],\n                         provided_ty,\n-                        final_arg_types[*input_idx].map(|ty| ty.1).unwrap(),\n+                        final_arg_types[*input_idx]\n+                            .map(|ty| ty.1)\n+                            .unwrap_or_else(|| tcx.ty_error()),\n                         None,\n                         None,\n                     );\n@@ -652,7 +654,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 match error {\n                     Error::Invalid(input_idx, arg_idx, compatibility) => {\n                         let expected_ty = expected_input_tys[arg_idx];\n-                        let provided_ty = final_arg_types[input_idx].map(|ty| ty.0).unwrap();\n+                        let provided_ty = final_arg_types[input_idx]\n+                            .map(|ty| ty.0)\n+                            .unwrap_or_else(|| tcx.ty_error());\n                         let expected_ty = self.resolve_vars_if_possible(expected_ty);\n                         let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                         if let Compatibility::Incompatible(error) = &compatibility {\n@@ -674,8 +678,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.emit_coerce_suggestions(\n                             &mut err,\n                             &provided_args[input_idx],\n-                            final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n-                            final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n+                            provided_ty,\n+                            // FIXME(compiler-errors): expected_ty?\n+                            final_arg_types[input_idx]\n+                                .map(|ty| ty.1)\n+                                .unwrap_or_else(|| tcx.ty_error()),\n                             None,\n                             None,\n                         );\n@@ -860,7 +867,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let first_expected_ty =\n                             self.resolve_vars_if_possible(expected_input_tys[arg_idx]);\n                         let first_provided_ty = if let Some((ty, _)) = final_arg_types[input_idx] {\n-                            format!(\",found `{}`\", ty)\n+                            format!(\", found `{}`\", ty)\n                         } else {\n                             String::new()\n                         };\n@@ -872,7 +879,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.resolve_vars_if_possible(expected_input_tys[other_arg_idx]);\n                         let other_provided_ty =\n                             if let Some((ty, _)) = final_arg_types[other_input_idx] {\n-                                format!(\",found `{}`\", ty)\n+                                format!(\", found `{}`\", ty)\n                             } else {\n                                 String::new()\n                             };\n@@ -888,14 +895,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Error::Permutation(args) => {\n                         for (dst_arg, dest_input) in args {\n                             let expected_ty =\n-                                self.resolve_vars_if_possible(expected_input_tys[dest_input]);\n-                            let provided_ty = if let Some((ty, _)) = final_arg_types[dst_arg] {\n-                                format!(\",found `{}`\", ty)\n+                                self.resolve_vars_if_possible(expected_input_tys[dst_arg]);\n+                            let provided_ty = if let Some((ty, _)) = final_arg_types[dest_input] {\n+                                format!(\", found `{}`\", ty)\n                             } else {\n                                 String::new()\n                             };\n                             labels.push((\n-                                provided_args[dst_arg].span,\n+                                provided_args[dest_input].span,\n                                 format!(\"expected `{}`{}\", expected_ty, provided_ty),\n                             ));\n                         }"}, {"sha": "b44e77b43f8bfb747f15526546abd805a346fa3c", "filename": "src/test/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=1922f0b9802a2edee8bacc3639f651b82d38edd1", "patch": "@@ -48,9 +48,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/basic.rs:23:5\n    |\n LL |     swapped(\"\", 1);\n-   |     ^^^^^^^ --  - expected `&str`,found `{integer}`\n+   |     ^^^^^^^ --  - expected `&str`, found `{integer}`\n    |             |\n-   |             expected `u32`,found `&'static str`\n+   |             expected `u32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/basic.rs:16:4\n@@ -66,10 +66,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/basic.rs:24:5\n    |\n LL |     permuted(Y {}, Z {}, X {});\n-   |     ^^^^^^^^ ----  ----  ---- expected `Z`,found `X`\n+   |     ^^^^^^^^ ----  ----  ---- expected `Z`, found `X`\n    |              |     |\n-   |              |     expected `Y`,found `Z`\n-   |              expected `X`,found `Y`\n+   |              |     expected `Y`, found `Z`\n+   |              expected `X`, found `Y`\n    |\n note: function defined here\n   --> $DIR/basic.rs:17:4"}, {"sha": "bb383ab1f8b9ebe066676e5c7526ff875d5ec737", "filename": "src/test/ui/argument-suggestions/issue-97484.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs?ref=1922f0b9802a2edee8bacc3639f651b82d38edd1", "patch": "@@ -0,0 +1,14 @@\n+struct A;\n+struct B;\n+struct C;\n+struct D;\n+struct E;\n+struct F;\n+struct G;\n+\n+fn foo(a: &A, d: D, e: &E, g: G) {}\n+\n+fn main() {\n+    foo(&&A, B, C, D, E, F, G);\n+    //~^ ERROR this function takes 4 arguments but 7 arguments were supplied\n+}"}, {"sha": "4c461633121bf5603afdcbb63431554169fa8408", "filename": "src/test/ui/argument-suggestions/issue-97484.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=1922f0b9802a2edee8bacc3639f651b82d38edd1", "patch": "@@ -0,0 +1,27 @@\n+error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n+  --> $DIR/issue-97484.rs:12:5\n+   |\n+LL |     foo(&&A, B, C, D, E, F, G);\n+   |     ^^^      -  -        - argument unexpected\n+   |              |  |\n+   |              |  argument of type `&E` unexpected\n+   |              argument of type `D` unexpected\n+   |\n+note: function defined here\n+  --> $DIR/issue-97484.rs:9:4\n+   |\n+LL | fn foo(a: &A, d: D, e: &E, g: G) {}\n+   |    ^^^ -----  ----  -----  ----\n+help: consider removing the ``\n+   |\n+LL -     foo(&&A, B, C, D, E, F, G);\n+LL +     foo(&&A, B, C, D, E, F, G);\n+   | \n+help: remove the extra arguments\n+   |\n+LL |     foo(&&A, D, {&E}, G);\n+   |     ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "78765335c02181ec3e8cd14c55b67704e7f6125b", "filename": "src/test/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=1922f0b9802a2edee8bacc3639f651b82d38edd1", "patch": "@@ -76,10 +76,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/mixed_cases.rs:20:3\n    |\n LL |   three_args(\"\", X {}, 1);\n-   |   ^^^^^^^^^^ --  ----  - expected `&str`,found `{integer}`\n+   |   ^^^^^^^^^^ --  ----  - expected `&str`, found `{integer}`\n    |              |   |\n    |              |   expected `f32`, found struct `X`\n-   |              expected `i32`,found `&'static str`\n+   |              expected `i32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/mixed_cases.rs:6:4\n@@ -98,8 +98,8 @@ LL |   three_args(\"\", 1);\n    |   ^^^^^^^^^^ --  -\n    |              |   |\n    |              |   an argument of type `f32` is missing\n-   |              |   expected `&str`,found `{integer}`\n-   |              expected `i32`,found `&'static str`\n+   |              |   expected `&str`, found `{integer}`\n+   |              expected `i32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/mixed_cases.rs:6:4"}, {"sha": "f16d22860d807c4aebc8c0a43fc86a630c2a015c", "filename": "src/test/ui/argument-suggestions/permuted_arguments.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fpermuted_arguments.stderr?ref=1922f0b9802a2edee8bacc3639f651b82d38edd1", "patch": "@@ -2,10 +2,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/permuted_arguments.rs:10:3\n    |\n LL |   three_args(1.0, \"\", 1);\n-   |   ^^^^^^^^^^ ---  --  - expected `&str`,found `{integer}`\n+   |   ^^^^^^^^^^ ---  --  - expected `&str`, found `{integer}`\n    |              |    |\n-   |              |    expected `f32`,found `&'static str`\n-   |              expected `i32`,found `{float}`\n+   |              |    expected `f32`, found `&'static str`\n+   |              expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/permuted_arguments.rs:5:4\n@@ -21,12 +21,12 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/permuted_arguments.rs:12:3\n    |\n LL |   many_args(X {}, Y {}, 1, 1.0, \"\");\n-   |   ^^^^^^^^^ ----  ----  -  ---  -- expected `Y`,found `&'static str`\n+   |   ^^^^^^^^^ ----  ----  -  ---  -- expected `Y`, found `&'static str`\n    |             |     |     |  |\n-   |             |     |     |  expected `X`,found `{float}`\n-   |             |     |     expected `&str`,found `{integer}`\n-   |             |     expected `f32`,found `Y`\n-   |             expected `i32`,found `X`\n+   |             |     |     |  expected `X`, found `{float}`\n+   |             |     |     expected `&str`, found `{integer}`\n+   |             |     expected `f32`, found `Y`\n+   |             expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/permuted_arguments.rs:6:4"}, {"sha": "a90792d0c5340296c316d01b03782567bdab9a02", "filename": "src/test/ui/argument-suggestions/swapped_arguments.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1922f0b9802a2edee8bacc3639f651b82d38edd1/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fswapped_arguments.stderr?ref=1922f0b9802a2edee8bacc3639f651b82d38edd1", "patch": "@@ -2,9 +2,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:8:3\n    |\n LL |   two_args(1.0, 1);\n-   |   ^^^^^^^^ ---  - expected `f32`,found `{integer}`\n+   |   ^^^^^^^^ ---  - expected `f32`, found `{integer}`\n    |            |\n-   |            expected `i32`,found `{float}`\n+   |            expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:3:4\n@@ -20,9 +20,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:9:3\n    |\n LL |   three_args(1.0,   1,  \"\");\n-   |   ^^^^^^^^^^ ---    - expected `f32`,found `{integer}`\n+   |   ^^^^^^^^^^ ---    - expected `f32`, found `{integer}`\n    |              |\n-   |              expected `i32`,found `{float}`\n+   |              expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:4:4\n@@ -38,9 +38,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:10:3\n    |\n LL |   three_args(  1,  \"\", 1.0);\n-   |   ^^^^^^^^^^       --  --- expected `&str`,found `{float}`\n+   |   ^^^^^^^^^^       --  --- expected `&str`, found `{float}`\n    |                    |\n-   |                    expected `f32`,found `&'static str`\n+   |                    expected `f32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:4:4\n@@ -56,9 +56,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:11:3\n    |\n LL |   three_args( \"\", 1.0,   1);\n-   |   ^^^^^^^^^^  --         - expected `&str`,found `{integer}`\n+   |   ^^^^^^^^^^  --         - expected `&str`, found `{integer}`\n    |               |\n-   |               expected `i32`,found `&'static str`\n+   |               expected `i32`, found `&'static str`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:4:4\n@@ -74,11 +74,11 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/swapped_arguments.rs:13:3\n    |\n LL |   four_args(1.0, 1, X {}, \"\");\n-   |   ^^^^^^^^^ ---  -  ----  -- expected `X`,found `&'static str`\n+   |   ^^^^^^^^^ ---  -  ----  -- expected `X`, found `&'static str`\n    |             |    |  |\n-   |             |    |  expected `&str`,found `X`\n-   |             |    expected `f32`,found `{integer}`\n-   |             expected `i32`,found `{float}`\n+   |             |    |  expected `&str`, found `X`\n+   |             |    expected `f32`, found `{integer}`\n+   |             expected `i32`, found `{float}`\n    |\n note: function defined here\n   --> $DIR/swapped_arguments.rs:5:4"}]}