{"sha": "6a52ca3fb465544f62cee70bec9499b967939cc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTJjYTNmYjQ2NTU0NGY2MmNlZTcwYmVjOTQ5OWI5Njc5MzljYzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-28T11:37:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-28T11:37:29Z"}, "message": "rename first_mut_ptr -> first_ptr_mut", "tree": {"sha": "f980af4f5756900f54f387d0122297baed3006d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f980af4f5756900f54f387d0122297baed3006d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a52ca3fb465544f62cee70bec9499b967939cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a52ca3fb465544f62cee70bec9499b967939cc9", "html_url": "https://github.com/rust-lang/rust/commit/6a52ca3fb465544f62cee70bec9499b967939cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a52ca3fb465544f62cee70bec9499b967939cc9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a969d9faa6d935895a82cbe6e96ee83ba36b88", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a969d9faa6d935895a82cbe6e96ee83ba36b88", "html_url": "https://github.com/rust-lang/rust/commit/33a969d9faa6d935895a82cbe6e96ee83ba36b88"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "e969e119dbe880c5abcd15512b3be9b4901af0e6", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=6a52ca3fb465544f62cee70bec9499b967939cc9", "patch": "@@ -650,7 +650,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         } else {\n             unsafe {\n                 slice::from_raw_parts_mut(\n-                    MaybeUninit::first_mut_ptr(&mut (*self.as_leaf_mut()).keys),\n+                    MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).keys),\n                     self.len()\n                 )\n             }\n@@ -661,7 +661,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts_mut(\n-                MaybeUninit::first_mut_ptr(&mut (*self.as_leaf_mut()).vals),\n+                MaybeUninit::first_ptr_mut(&mut (*self.as_leaf_mut()).vals),\n                 self.len()\n             )\n         }\n@@ -749,7 +749,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             slice_insert(self.vals_mut(), 0, val);\n             slice_insert(\n                 slice::from_raw_parts_mut(\n-                    MaybeUninit::first_mut_ptr(&mut self.as_internal_mut().edges),\n+                    MaybeUninit::first_ptr_mut(&mut self.as_internal_mut().edges),\n                     self.len()+1\n                 ),\n                 0,\n@@ -808,7 +808,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                 ForceResult::Internal(mut internal) => {\n                     let edge = slice_remove(\n                         slice::from_raw_parts_mut(\n-                            MaybeUninit::first_mut_ptr(&mut internal.as_internal_mut().edges),\n+                            MaybeUninit::first_ptr_mut(&mut internal.as_internal_mut().edges),\n                             old_len+1\n                         ),\n                         0\n@@ -1087,7 +1087,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n \n             slice_insert(\n                 slice::from_raw_parts_mut(\n-                    MaybeUninit::first_mut_ptr(&mut self.node.as_internal_mut().edges),\n+                    MaybeUninit::first_ptr_mut(&mut self.node.as_internal_mut().edges),\n                     self.node.len()\n                 ),\n                 self.idx + 1,"}, {"sha": "3a812337bb111e855f6053cb8c0088ae89f5f528", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=6a52ca3fb465544f62cee70bec9499b967939cc9", "patch": "@@ -200,7 +200,7 @@ macro_rules! impl_Display {\n             };\n             let mut buf = uninitialized_array![u8; 39];\n             let mut curr = buf.len() as isize;\n-            let buf_ptr = MaybeUninit::first_mut_ptr(&mut buf);\n+            let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n \n             unsafe {"}, {"sha": "8b6d9d882b5ad6d31c113c85535ab6cafbe9f06a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=6a52ca3fb465544f62cee70bec9499b967939cc9", "patch": "@@ -1159,7 +1159,7 @@ impl<T> MaybeUninit<T> {\n     /// Get a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub fn first_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n+    pub fn first_ptr_mut(this: &mut [MaybeUninit<T>]) -> *mut T {\n         this as *mut [MaybeUninit<T>] as *mut T\n     }\n }"}, {"sha": "3f84faa04993915091367dea8caff8b596e5767b", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a52ca3fb465544f62cee70bec9499b967939cc9/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=6a52ca3fb465544f62cee70bec9499b967939cc9", "patch": "@@ -262,8 +262,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n-            start_l = MaybeUninit::first_mut_ptr(&mut offsets_l);\n-            end_l = MaybeUninit::first_mut_ptr(&mut offsets_l);\n+            start_l = MaybeUninit::first_ptr_mut(&mut offsets_l);\n+            end_l = MaybeUninit::first_ptr_mut(&mut offsets_l);\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -278,8 +278,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n-            start_r = MaybeUninit::first_mut_ptr(&mut offsets_r);\n-            end_r = MaybeUninit::first_mut_ptr(&mut offsets_r);\n+            start_r = MaybeUninit::first_ptr_mut(&mut offsets_r);\n+            end_r = MaybeUninit::first_ptr_mut(&mut offsets_r);\n             let mut elem = r;\n \n             for i in 0..block_r {"}]}