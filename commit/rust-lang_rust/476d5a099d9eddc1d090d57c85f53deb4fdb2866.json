{"sha": "476d5a099d9eddc1d090d57c85f53deb4fdb2866", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NmQ1YTA5OWQ5ZWRkYzFkMDkwZDU3Yzg1ZjUzZGViNGZkYjI4NjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-18T03:41:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-18T17:50:50Z"}, "message": "syntax: Extract prec mod from parser mod", "tree": {"sha": "88d610898f413a227bf98e3f59f01efa4bc1a35d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88d610898f413a227bf98e3f59f01efa4bc1a35d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/476d5a099d9eddc1d090d57c85f53deb4fdb2866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/476d5a099d9eddc1d090d57c85f53deb4fdb2866", "html_url": "https://github.com/rust-lang/rust/commit/476d5a099d9eddc1d090d57c85f53deb4fdb2866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/476d5a099d9eddc1d090d57c85f53deb4fdb2866/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4278a3f5f3e999459ce5784c7158c5933daade", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4278a3f5f3e999459ce5784c7158c5933daade", "html_url": "https://github.com/rust-lang/rust/commit/aa4278a3f5f3e999459ce5784c7158c5933daade"}], "stats": {"total": 92, "additions": 52, "deletions": 40}, "files": [{"sha": "858289faaea239364d5b6989f1f9719d3d8129db", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=476d5a099d9eddc1d090d57c85f53deb4fdb2866", "patch": "@@ -7,8 +7,8 @@ import util::interner;\n import ast::{node_id, spanned};\n import ast_util::{mk_sp, ident_to_path};\n import lexer::reader;\n+import prec::{op_spec, binop_prec_table, as_prec};\n \n-export as_prec;\n export expr_requires_semi_to_be_stmt;\n export file_type;\n export mk_item;\n@@ -31,9 +31,7 @@ export parse_pat;\n export parse_sess;\n export parse_stmt;\n export parse_ty;\n-export prec_table;\n export stmt_ends_with_semi;\n-export unop_prec;\n \n enum restriction {\n     UNRESTRICTED,\n@@ -71,7 +69,7 @@ type parser = @{\n     mut buffer: [{tok: token::token, span: span}],\n     mut restriction: restriction,\n     reader: reader,\n-    precs: @[op_spec],\n+    binop_precs: @[op_spec],\n     bad_expr_words: hashmap<str, ()>\n };\n \n@@ -161,7 +159,7 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n       mut buffer: [],\n       mut restriction: UNRESTRICTED,\n       reader: rdr,\n-      precs: prec_table(),\n+      binop_precs: binop_prec_table(),\n       bad_expr_words: bad_expr_word_table()}\n }\n \n@@ -1301,49 +1299,19 @@ fn parse_prefix_expr(p: parser) -> pexpr {\n     ret mk_pexpr(p, lo, hi, ex);\n }\n \n-type op_spec = {tok: token::token, op: ast::binop, prec: int};\n-\n-\n-// FIXME make this a const, don't store it in parser state\n-fn prec_table() -> @[op_spec] {\n-    ret @[{tok: token::BINOP(token::STAR), op: ast::mul, prec: 12},\n-          {tok: token::BINOP(token::SLASH), op: ast::div, prec: 12},\n-          {tok: token::BINOP(token::PERCENT), op: ast::rem, prec: 12},\n-          // 'as' sits between here with 11\n-          {tok: token::BINOP(token::PLUS), op: ast::add, prec: 10},\n-          {tok: token::BINOP(token::MINUS), op: ast::subtract, prec: 10},\n-          {tok: token::BINOP(token::LSL), op: ast::lsl, prec: 9},\n-          {tok: token::BINOP(token::LSR), op: ast::lsr, prec: 9},\n-          {tok: token::BINOP(token::ASR), op: ast::asr, prec: 9},\n-          {tok: token::BINOP(token::AND), op: ast::bitand, prec: 8},\n-          {tok: token::BINOP(token::CARET), op: ast::bitxor, prec: 7},\n-          {tok: token::BINOP(token::OR), op: ast::bitor, prec: 6},\n-          {tok: token::LT, op: ast::lt, prec: 4},\n-          {tok: token::LE, op: ast::le, prec: 4},\n-          {tok: token::GE, op: ast::ge, prec: 4},\n-          {tok: token::GT, op: ast::gt, prec: 4},\n-          {tok: token::EQEQ, op: ast::eq, prec: 3},\n-          {tok: token::NE, op: ast::ne, prec: 3},\n-          {tok: token::ANDAND, op: ast::and, prec: 2},\n-          {tok: token::OROR, op: ast::or, prec: 1}];\n-}\n \n fn parse_binops(p: parser) -> @ast::expr {\n     ret parse_more_binops(p, parse_prefix_expr(p), 0);\n }\n \n-const unop_prec: int = 100;\n-\n-const as_prec: int = 11;\n-\n fn parse_more_binops(p: parser, plhs: pexpr, min_prec: int) ->\n    @ast::expr {\n     let lhs = to_expr(plhs);\n     if expr_is_complete(p, plhs) { ret lhs; }\n     let peeked = p.token;\n     if peeked == token::BINOP(token::OR) &&\n        p.restriction == RESTRICT_NO_BAR_OP { ret lhs; }\n-    for vec::each(*p.precs) {|cur|\n+    for vec::each(*p.binop_precs) {|cur|\n         if cur.prec > min_prec && cur.tok == peeked {\n             p.bump();\n             let expr = parse_prefix_expr(p);"}, {"sha": "47f4c52b1508a83bc5997ce72de45f53da8c8f9d", "filename": "src/librustsyntax/parse/prec.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fprec.rs?ref=476d5a099d9eddc1d090d57c85f53deb4fdb2866", "patch": "@@ -0,0 +1,40 @@\n+export as_prec;\n+export unop_prec;\n+export binop_prec_table;\n+export op_spec;\n+\n+#[doc = \"Unary operators have higher precedence than binary\"]\n+const unop_prec: int = 100;\n+\n+#[doc = \"\n+Precedence of the `as` operator, which is a binary operator\n+but is not represented in the precedence table.\n+\"]\n+const as_prec: int = 11;\n+\n+type op_spec = {tok: token::token, op: ast::binop, prec: int};\n+\n+// FIXME make this a const, don't store it in parser state\n+#[doc = \"The precedence of binary operators\"]\n+fn binop_prec_table() -> @[op_spec] {\n+    ret @[{tok: token::BINOP(token::STAR), op: ast::mul, prec: 12},\n+          {tok: token::BINOP(token::SLASH), op: ast::div, prec: 12},\n+          {tok: token::BINOP(token::PERCENT), op: ast::rem, prec: 12},\n+          // 'as' sits between here with 11\n+          {tok: token::BINOP(token::PLUS), op: ast::add, prec: 10},\n+          {tok: token::BINOP(token::MINUS), op: ast::subtract, prec: 10},\n+          {tok: token::BINOP(token::LSL), op: ast::lsl, prec: 9},\n+          {tok: token::BINOP(token::LSR), op: ast::lsr, prec: 9},\n+          {tok: token::BINOP(token::ASR), op: ast::asr, prec: 9},\n+          {tok: token::BINOP(token::AND), op: ast::bitand, prec: 8},\n+          {tok: token::BINOP(token::CARET), op: ast::bitxor, prec: 7},\n+          {tok: token::BINOP(token::OR), op: ast::bitor, prec: 6},\n+          {tok: token::LT, op: ast::lt, prec: 4},\n+          {tok: token::LE, op: ast::le, prec: 4},\n+          {tok: token::GE, op: ast::ge, prec: 4},\n+          {tok: token::GT, op: ast::gt, prec: 4},\n+          {tok: token::EQEQ, op: ast::eq, prec: 3},\n+          {tok: token::NE, op: ast::ne, prec: 3},\n+          {tok: token::ANDAND, op: ast::and, prec: 2},\n+          {tok: token::OROR, op: ast::or, prec: 1}];\n+}"}, {"sha": "c27976a314aefa02c28c1cc85cf9e19b40a3f8a8", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=476d5a099d9eddc1d090d57c85f53deb4fdb2866", "patch": "@@ -934,7 +934,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       }\n       ast::expr_unary(op, expr) {\n         word(s.s, ast_util::unop_to_str(op));\n-        print_op_maybe_parens(s, expr, parse::parser::unop_prec);\n+        print_op_maybe_parens(s, expr, parse::prec::unop_prec);\n       }\n       ast::expr_addr_of(m, expr) {\n         word(s.s, \"&\");\n@@ -943,7 +943,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       }\n       ast::expr_lit(lit) { print_literal(s, lit); }\n       ast::expr_cast(expr, ty) {\n-        print_op_maybe_parens(s, expr, parse::parser::as_prec);\n+        print_op_maybe_parens(s, expr, parse::prec::as_prec);\n         space(s.s);\n         word_space(s, \"as\");\n         print_type(s, ty);\n@@ -1488,7 +1488,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n // FIXME: The fact that this builds up the table anew for every call is\n // not good. Eventually, table should be a const.\n fn operator_prec(op: ast::binop) -> int {\n-    for vec::each(*parse::parser::prec_table()) {|spec|\n+    for vec::each(*parse::prec::binop_prec_table()) {|spec|\n         if spec.op == op { ret spec.prec; }\n     }\n     core::unreachable();\n@@ -1497,7 +1497,7 @@ fn operator_prec(op: ast::binop) -> int {\n fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {\n     alt expr.node {\n       ast::expr_binary(op, _, _) { operator_prec(op) < outer_prec }\n-      ast::expr_cast(_, _) { parse::parser::as_prec < outer_prec }\n+      ast::expr_cast(_, _) { parse::prec::as_prec < outer_prec }\n       // This may be too conservative in some cases\n       ast::expr_assign(_, _) { true }\n       ast::expr_move(_, _) { true }"}, {"sha": "d481670b8b3392ea99edb1679acd306180b490bf", "filename": "src/librustsyntax/rustsyntax.rc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Frustsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/476d5a099d9eddc1d090d57c85f53deb4fdb2866/src%2Flibrustsyntax%2Frustsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Frustsyntax.rc?ref=476d5a099d9eddc1d090d57c85f53deb4fdb2866", "patch": "@@ -26,12 +26,16 @@ mod parse {\n     export parser;\n     export lexer;\n     export comments;\n+    export prec;\n \n     mod eval;\n     mod lexer;\n     mod parser;\n     mod token;\n     mod comments;\n+\n+    #[doc = \"Functions dealing with operator precedence\"]\n+    mod prec;\n }\n \n mod print {"}]}