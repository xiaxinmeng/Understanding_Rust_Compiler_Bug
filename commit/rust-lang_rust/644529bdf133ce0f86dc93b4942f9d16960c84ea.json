{"sha": "644529bdf133ce0f86dc93b4942f9d16960c84ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NDUyOWJkZjEzM2NlMGY4NmRjOTNiNDk0MmY5ZDE2OTYwYzg0ZWE=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-30T16:06:11Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-30T16:06:11Z"}, "message": "Bless `src/test/ui/drop-bounds/drop-bounds.rs`", "tree": {"sha": "56d3a6a02e8cca6f5629ad5ed80f3c6d3b853b4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d3a6a02e8cca6f5629ad5ed80f3c6d3b853b4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644529bdf133ce0f86dc93b4942f9d16960c84ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644529bdf133ce0f86dc93b4942f9d16960c84ea", "html_url": "https://github.com/rust-lang/rust/commit/644529bdf133ce0f86dc93b4942f9d16960c84ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644529bdf133ce0f86dc93b4942f9d16960c84ea/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1deef26324a91fdf09e586a8982b0d4ce45ec864", "url": "https://api.github.com/repos/rust-lang/rust/commits/1deef26324a91fdf09e586a8982b0d4ce45ec864", "html_url": "https://github.com/rust-lang/rust/commit/1deef26324a91fdf09e586a8982b0d4ce45ec864"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3ffb855a55dc854c69252ee1925fc24c9228f752", "filename": "src/test/ui/drop-bounds/drop-bounds.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/644529bdf133ce0f86dc93b4942f9d16960c84ea/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/644529bdf133ce0f86dc93b4942f9d16960c84ea/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr?ref=644529bdf133ce0f86dc93b4942f9d16960c84ea", "patch": "@@ -1,4 +1,4 @@\n-error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `T: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:2:11\n    |\n LL | fn foo<T: Drop>() {}\n@@ -10,37 +10,37 @@ note: the lint level is defined here\n LL | #![deny(drop_bounds)]\n    |         ^^^^^^^^^^^\n \n-error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `U: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:5:8\n    |\n LL |     U: Drop,\n    |        ^^^^\n \n-error: bounds on `impl Drop: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `impl Drop: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:8:17\n    |\n LL | fn baz(_x: impl Drop) {}\n    |                 ^^^^\n \n-error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `T: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:9:15\n    |\n LL | struct Foo<T: Drop> {\n    |               ^^^^\n \n-error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `U: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:12:24\n    |\n LL | struct Bar<U> where U: Drop {\n    |                        ^^^^\n \n-error: bounds on `Self: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `Self: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:15:12\n    |\n LL | trait Baz: Drop {\n    |            ^^^^\n \n-error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+error: bounds on `T: Drop` are most likely incorrect, consider instead using `std::mem::needs_drop` to detect whether a type can be trivially dropped\n   --> $DIR/drop-bounds.rs:17:9\n    |\n LL | impl<T: Drop> Baz for T {"}]}