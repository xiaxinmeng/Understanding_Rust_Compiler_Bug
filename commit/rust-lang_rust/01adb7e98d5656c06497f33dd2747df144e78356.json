{"sha": "01adb7e98d5656c06497f33dd2747df144e78356", "node_id": "C_kwDOAAsO6NoAKDAxYWRiN2U5OGQ1NjU2YzA2NDk3ZjMzZGQyNzQ3ZGYxNDRlNzgzNTY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T16:25:37Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-08T09:14:33Z"}, "message": "stop evaluating constants in `Relate`", "tree": {"sha": "ef1405f60f65b38bac6fbdef774c2cbd556f59a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef1405f60f65b38bac6fbdef774c2cbd556f59a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01adb7e98d5656c06497f33dd2747df144e78356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01adb7e98d5656c06497f33dd2747df144e78356", "html_url": "https://github.com/rust-lang/rust/commit/01adb7e98d5656c06497f33dd2747df144e78356", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01adb7e98d5656c06497f33dd2747df144e78356/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060f3e0c657d7556e51a19a6290cca050b29dc57", "url": "https://api.github.com/repos/rust-lang/rust/commits/060f3e0c657d7556e51a19a6290cca050b29dc57", "html_url": "https://github.com/rust-lang/rust/commit/060f3e0c657d7556e51a19a6290cca050b29dc57"}], "stats": {"total": 67, "additions": 11, "deletions": 56}, "files": [{"sha": "81476195d29958009beeb9f8b0512d8ada8ae0ab", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01adb7e98d5656c06497f33dd2747df144e78356/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01adb7e98d5656c06497f33dd2747df144e78356/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=01adb7e98d5656c06497f33dd2747df144e78356", "patch": "@@ -594,10 +594,6 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         );\n     }\n \n-    let eagerly_eval = |x: ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n-    let a = eagerly_eval(a);\n-    let b = eagerly_eval(b);\n-\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types."}, {"sha": "1d9468a96b649a4eef813097cb8fc89b1e3678cc", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01adb7e98d5656c06497f33dd2747df144e78356/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01adb7e98d5656c06497f33dd2747df144e78356/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=01adb7e98d5656c06497f33dd2747df144e78356", "patch": "@@ -635,7 +635,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if self.selcx.tcx().lazy_normalization() || !self.eager_inference_replacement {\n+        if self.selcx.tcx().lazy_normalization() {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);"}, {"sha": "b07edd43c0716e430cc408a537648d98e5d3ebdc", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01adb7e98d5656c06497f33dd2747df144e78356/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01adb7e98d5656c06497f33dd2747df144e78356/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=01adb7e98d5656c06497f33dd2747df144e78356", "patch": "@@ -495,13 +495,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn to_const(&self, ast_c: &hir::AnonConst) -> ty::Const<'tcx> {\n         let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n+        let span = self.tcx.hir().span(ast_c.hir_id);\n         let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n-        self.register_wf_obligation(\n-            c.into(),\n-            self.tcx.hir().span(ast_c.hir_id),\n-            ObligationCauseCode::WellFormed(None),\n-        );\n-        c\n+        self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n+        self.normalize_associated_types_in(span, c)\n     }\n \n     pub fn const_arg_to_const("}, {"sha": "6ac5380a5aa23b0dcd7161a40741f9c639b29902", "filename": "src/test/ui/closures/issue-52437.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs?ref=01adb7e98d5656c06497f33dd2747df144e78356", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n     //~^ ERROR: invalid label name `'static`\n     //~| ERROR: type annotations needed\n-    //~| ERROR mismatched types\n }"}, {"sha": "4c24a54bbbe014ddc03ee083e274aa58d97110de", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=01adb7e98d5656c06497f33dd2747df144e78356", "patch": "@@ -15,15 +15,6 @@ help: consider giving this closure parameter an explicit type\n LL |     [(); &(&'static: loop { |x: _| {}; }) as *const _ as usize]\n    |                               +++\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-52437.rs:2:5\n-   |\n-LL | fn main() {\n-   |           - expected `()` because of default return type\n-LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[(); _]`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "835fdfae86c033790b72681ddb11d7454b35d3de", "filename": "src/test/ui/issues/issue-66706.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs?ref=01adb7e98d5656c06497f33dd2747df144e78356", "patch": "@@ -2,7 +2,6 @@ fn a() {\n     [0; [|_: _ &_| ()].len()]\n     //~^ ERROR expected `,`, found `&`\n     //~| ERROR type annotations needed\n-    //~| ERROR mismatched types\n }\n \n fn b() {\n@@ -13,13 +12,11 @@ fn b() {\n fn c() {\n     [0; [|&_: _ &_| {}; 0 ].len()]\n     //~^ ERROR expected `,`, found `&`\n-    //~| ERROR mismatched types\n }\n \n fn d() {\n     [0; match [|f @ &ref _| () ] {} ]\n     //~^ ERROR expected identifier, found reserved identifier `_`\n-    //~| ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "8a30c0cad39c5167ee855721d865d2c0169370ba", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01adb7e98d5656c06497f33dd2747df144e78356/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=01adb7e98d5656c06497f33dd2747df144e78356", "patch": "@@ -7,21 +7,21 @@ LL |     [0; [|_: _ &_| ()].len()]\n    |               help: missing `,`\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/issue-66706.rs:9:20\n+  --> $DIR/issue-66706.rs:8:20\n    |\n LL |     [0; [|f @ &ref _| {} ; 0 ].len() ];\n    |                    ^ expected identifier, found reserved identifier\n \n error: expected `,`, found `&`\n-  --> $DIR/issue-66706.rs:14:17\n+  --> $DIR/issue-66706.rs:13:17\n    |\n LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n    |                -^ expected `,`\n    |                |\n    |                help: missing `,`\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/issue-66706.rs:20:26\n+  --> $DIR/issue-66706.rs:18:26\n    |\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |                          ^ expected identifier, found reserved identifier\n@@ -32,31 +32,6 @@ error[E0282]: type annotations needed\n LL |     [0; [|_: _ &_| ()].len()]\n    |           ^ cannot infer type\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-66706.rs:2:5\n-   |\n-LL | fn a() {\n-   |        - help: try adding a return type: `-> [i32; _]`\n-LL |     [0; [|_: _ &_| ()].len()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-66706.rs:14:5\n-   |\n-LL | fn c() {\n-   |        - help: try adding a return type: `-> [i32; _]`\n-LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-66706.rs:20:5\n-   |\n-LL | fn d() {\n-   |        - help: try adding a return type: `-> [i32; _]`\n-LL |     [0; match [|f @ &ref _| () ] {} ]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0282`."}]}