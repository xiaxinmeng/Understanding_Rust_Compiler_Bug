{"sha": "f17556966c3a30b14254ead7d1447a2ed949f151", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzU1Njk2NmMzYTMwYjE0MjU0ZWFkN2QxNDQ3YTJlZDk0OWYxNTE=", "commit": {"author": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-21T06:36:36Z"}, "committer": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-21T06:36:36Z"}, "message": "Reusing status-handling function", "tree": {"sha": "6f4472246e4a39f724192d5814b98e50cea4e60a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f4472246e4a39f724192d5814b98e50cea4e60a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17556966c3a30b14254ead7d1447a2ed949f151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17556966c3a30b14254ead7d1447a2ed949f151", "html_url": "https://github.com/rust-lang/rust/commit/f17556966c3a30b14254ead7d1447a2ed949f151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17556966c3a30b14254ead7d1447a2ed949f151/comments", "author": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "655022c42b267b1337ac12c4b7776087dfdeaac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/655022c42b267b1337ac12c4b7776087dfdeaac7", "html_url": "https://github.com/rust-lang/rust/commit/655022c42b267b1337ac12c4b7776087dfdeaac7"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "efcdc3973077770bd26ae1f6fd60b09e1df85076", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f17556966c3a30b14254ead7d1447a2ed949f151/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17556966c3a30b14254ead7d1447a2ed949f151/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=f17556966c3a30b14254ead7d1447a2ed949f151", "patch": "@@ -93,20 +93,7 @@ fn execute() -> i32 {\n     }\n \n     let strategy = CargoFmtStrategy::from_matches(&matches);\n-\n-    match format_crate(verbosity, &strategy) {\n-        Err(e) => {\n-            print_usage_to_stderr(&opts, &e.to_string());\n-            FAILURE\n-        }\n-        Ok(status) => {\n-            if status.success() {\n-                SUCCESS\n-            } else {\n-                status.code().unwrap_or(FAILURE)\n-            }\n-        }\n-    }\n+    handle_command_status(format_crate(verbosity, &strategy), &opts)\n }\n \n macro_rules! print_usage {"}]}