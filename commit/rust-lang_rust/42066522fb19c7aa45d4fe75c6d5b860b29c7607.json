{"sha": "42066522fb19c7aa45d4fe75c6d5b860b29c7607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMDY2NTIyZmIxOWM3YWE0NWQ0ZmU3NWM2ZDViODYwYjI5Yzc2MDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-31T17:50:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-02T11:36:45Z"}, "message": "Perform some optimizations", "tree": {"sha": "0bf21c56142faa40e487a5ab9f1b24ea65035974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bf21c56142faa40e487a5ab9f1b24ea65035974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42066522fb19c7aa45d4fe75c6d5b860b29c7607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42066522fb19c7aa45d4fe75c6d5b860b29c7607", "html_url": "https://github.com/rust-lang/rust/commit/42066522fb19c7aa45d4fe75c6d5b860b29c7607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42066522fb19c7aa45d4fe75c6d5b860b29c7607/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cfe31403aa656b37911113cb916c042d168c7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfe31403aa656b37911113cb916c042d168c7cc", "html_url": "https://github.com/rust-lang/rust/commit/0cfe31403aa656b37911113cb916c042d168c7cc"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "e4b53d201ac0869be93d832786baec2e827520d2", "filename": ".gitignore", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42066522fb19c7aa45d4fe75c6d5b860b29c7607/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/42066522fb19c7aa45d4fe75c6d5b860b29c7607/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=42066522fb19c7aa45d4fe75c6d5b860b29c7607", "patch": "@@ -2,3 +2,5 @@\n **/*.rs.bk\n *.rlib\n *.o\n+perf.data\n+perf.data.old"}, {"sha": "1045275728165fe31eb3bfcc3679c17edba4767e", "filename": "src/base.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/42066522fb19c7aa45d4fe75c6d5b860b29c7607/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42066522fb19c7aa45d4fe75c6d5b860b29c7607/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=42066522fb19c7aa45d4fe75c6d5b860b29c7607", "patch": "@@ -1,10 +1,10 @@\n use crate::prelude::*;\n \n-struct PrintOnPanic(String);\n-impl Drop for PrintOnPanic {\n+struct PrintOnPanic<F: Fn() -> String>(F);\n+impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n     fn drop(&mut self) {\n         if ::std::thread::panicking() {\n-            println!(\"{}\", self.0);\n+            println!(\"{}\", (self.0)());\n         }\n     }\n }\n@@ -18,25 +18,26 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n ) {\n     match mono_item {\n         MonoItem::Fn(inst) => {\n-            let _print_guard = PrintOnPanic(format!(\"{:?}\", inst));\n-            let mir = match inst.def {\n-                InstanceDef::Item(_) | InstanceDef::DropGlue(_, _) | InstanceDef::Virtual(_, _) => {\n-                    let mut mir = ::std::io::Cursor::new(Vec::new());\n-                    ::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir)\n-                        .unwrap();\n-                    mir.into_inner()\n-                }\n-                InstanceDef::FnPtrShim(_, _)\n-                | InstanceDef::ClosureOnceShim { .. }\n-                | InstanceDef::CloneShim(_, _) => {\n-                    // FIXME fix write_mir_pretty for these instances\n-                    format!(\"{:#?}\", tcx.instance_mir(inst.def)).into_bytes()\n+            let _inst_guard = PrintOnPanic(|| format!(\"{:?}\", inst));\n+            let _mir_guard = PrintOnPanic(|| {\n+                match inst.def {\n+                    InstanceDef::Item(_)\n+                    | InstanceDef::DropGlue(_, _)\n+                    | InstanceDef::Virtual(_, _) => {\n+                        let mut mir = ::std::io::Cursor::new(Vec::new());\n+                        ::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir)\n+                            .unwrap();\n+                        String::from_utf8(mir.into_inner()).unwrap()\n+                    }\n+                    InstanceDef::FnPtrShim(_, _)\n+                    | InstanceDef::ClosureOnceShim { .. }\n+                    | InstanceDef::CloneShim(_, _) => {\n+                        // FIXME fix write_mir_pretty for these instances\n+                        format!(\"{:#?}\", tcx.instance_mir(inst.def))\n+                    }\n+                    InstanceDef::Intrinsic(_) => bug!(\"tried to codegen intrinsic\"),\n                 }\n-                InstanceDef::Intrinsic(_) => bug!(\"tried to codegen intrinsic\"),\n-            };\n-            let mir_file_name =\n-                \"target/out/mir/\".to_string() + &format!(\"{:?}\", inst.def_id()).replace('/', \"@\");\n-            ::std::fs::write(mir_file_name, mir).unwrap();\n+            });\n \n             trans_fn(tcx, module, ccx, caches, inst);\n         }\n@@ -103,12 +104,16 @@ fn trans_fn<'a, 'tcx: 'a>(\n     fx.bcx.seal_all_blocks();\n     fx.bcx.finalize();\n \n-    // Step 7. Print function to terminal for debugging\n+    // Step 7. Write function to file for debugging\n     let mut writer = crate::pretty_clif::CommentWriter(fx.comments);\n+\n     let mut cton = String::new();\n-    ::cranelift::codegen::write::decorate_function(&mut writer, &mut cton, &func, None).unwrap();\n-    let clif_file_name = \"target/out/clif/\".to_string() + &tcx.symbol_name(instance).as_str();\n-    ::std::fs::write(clif_file_name, cton.as_bytes()).unwrap();\n+    if cfg!(debug_assertions) {\n+        ::cranelift::codegen::write::decorate_function(&mut writer, &mut cton, &func, None)\n+            .unwrap();\n+        let clif_file_name = \"target/out/clif/\".to_string() + &tcx.symbol_name(instance).as_str();\n+        ::std::fs::write(clif_file_name, cton.as_bytes()).unwrap();\n+    }\n \n     // Step 8. Verify function\n     verify_func(tcx, writer, &func);\n@@ -247,7 +252,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n     cur_ebb: Ebb,\n     stmt: &Statement<'tcx>,\n ) {\n-    let _print_guard = PrintOnPanic(format!(\"stmt {:?}\", stmt));\n+    let _print_guard = PrintOnPanic(|| format!(\"stmt {:?}\", stmt));\n \n     let inst = fx.bcx.func.layout.last_inst(cur_ebb).unwrap();\n     fx.add_comment(inst, format!(\"{:?}\", stmt));"}, {"sha": "3c7afe774af53830180eaa5a93efb928bf5e830d", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42066522fb19c7aa45d4fe75c6d5b860b29c7607/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42066522fb19c7aa45d4fe75c6d5b860b29c7607/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=42066522fb19c7aa45d4fe75c6d5b860b29c7607", "patch": "@@ -246,7 +246,6 @@ impl<'tcx> CValue<'tcx> {\n                         dest.layout().ty\n                     ),\n                 };\n-                println!(\"ty {:?}\", self.layout().ty);\n                 dest.write_cvalue(fx, CValue::ByValPair(ptr, extra, dest.layout()));\n             }\n             ty => unimpl!(\"unsize of non ptr {:?}\", ty),\n@@ -471,10 +470,6 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                         addr,\n                         a.value.size(fx.tcx).bytes() as u32 as i32,\n                     );\n-                    println!(\n-                        \"unsized deref: ptr: {:?} extra: {:?} self: {:?}\",\n-                        ptr, extra, self\n-                    );\n                     CPlace::Addr(ptr, Some(extra), inner_layout)\n                 }\n                 _ => bug!("}, {"sha": "4d04b7761fd29d53d447653846465253bcadbf47", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42066522fb19c7aa45d4fe75c6d5b860b29c7607/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42066522fb19c7aa45d4fe75c6d5b860b29c7607/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=42066522fb19c7aa45d4fe75c6d5b860b29c7607", "patch": "@@ -361,6 +361,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     let mut log = ::std::fs::File::create(\"target/out/log.txt\").unwrap();\n \n     let before = ::std::time::Instant::now();\n+    println!(\"[codegen mono items] start\");\n \n     for mono_item in mono_items {\n         let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| {\n@@ -383,7 +384,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     ccx.finalize(tcx, module);\n \n     let after = ::std::time::Instant::now();\n-    println!(\"time: {:?}\", after - before);\n+    println!(\"[codegen mono items] end time: {:?}\", after - before);\n }\n \n fn save_incremental<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}]}