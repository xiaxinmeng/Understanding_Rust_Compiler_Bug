{"sha": "b402e343e4976d0993d8735e8b1c678f7da11f75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MDJlMzQzZTQ5NzZkMDk5M2Q4NzM1ZThiMWM2NzhmN2RhMTFmNzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:58:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T18:01:23Z"}, "message": "tests: Add new tests for borrowck/objects and update some existing tests", "tree": {"sha": "b1457702e557ca1acfeda3b1f373b729b4b0031c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1457702e557ca1acfeda3b1f373b729b4b0031c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b402e343e4976d0993d8735e8b1c678f7da11f75", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b402e343e4976d0993d8735e8b1c678f7da11f75", "html_url": "https://github.com/rust-lang/rust/commit/b402e343e4976d0993d8735e8b1c678f7da11f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b402e343e4976d0993d8735e8b1c678f7da11f75/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/df016dc4bf2efd3f4e0f9d67dda1875453c705b2", "html_url": "https://github.com/rust-lang/rust/commit/df016dc4bf2efd3f4e0f9d67dda1875453c705b2"}], "stats": {"total": 287, "additions": 265, "deletions": 22}, "files": [{"sha": "502d7e017b5b10b132886e43576e73654eed9e3e", "filename": "src/test/compile-fail/borrowck-borrow-mut-object-twice.rs", "status": "renamed", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-object-twice.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -8,22 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {\n-    fn f(&self) -> int;\n-}\n+// Check that `&mut` objects cannot be borrowed twice, just like\n+// other `&mut` pointers.\n \n-struct Bar {\n-    x: int\n+trait Foo {\n+    fn f1<'a>(&'a mut self) -> &'a ();\n+    fn f2(&mut self);\n }\n \n-impl Foo for Bar {\n-    fn f(&self) -> int {\n-        self.x\n-    }\n+fn test(x: &mut Foo) {\n+    let _y = x.f1();\n+    x.f2(); //~ ERROR cannot borrow `*x` as mutable more than once at a time\n }\n \n-pub fn main() {\n-    let x = ~Bar { x: 10 };\n-    let y = x as ~Foo;\n-    assert_eq!(y.f(), 10);\n-}\n+fn main() {}", "previous_filename": "src/test/run-pass/unique-object.rs"}, {"sha": "25d5be7ed55d38e416224ec6ec00ff57fd77df4e", "filename": "src/test/compile-fail/borrowck-object-lifetime.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-object-lifetime.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn borrowed<'a>(&'a self) -> &'a ();\n+}\n+\n+fn borrowed_receiver<'a>(x: &'a Foo) -> &'a () {\n+    x.borrowed()\n+}\n+\n+fn managed_receiver(x: @Foo) -> &() {\n+    x.borrowed() //~ ERROR cannot root managed value long enough\n+}\n+\n+fn managed_receiver_1(x: @Foo) {\n+    *x.borrowed()\n+}\n+\n+fn owned_receiver(x: ~Foo) -> &() {\n+    x.borrowed() //~ ERROR borrowed value does not live long enough\n+}\n+\n+fn mut_owned_receiver(mut x: ~Foo) {\n+    let _y = x.borrowed();\n+    let _z = &mut x; //~ ERROR cannot borrow\n+}\n+\n+fn imm_owned_receiver(mut x: ~Foo) {\n+    let _y = x.borrowed();\n+    let _z = &x;\n+}\n+\n+fn main() {}\n+"}, {"sha": "1ea9e3c8815a89d172fa52380d0dca060d12fc07", "filename": "src/test/compile-fail/borrowck-object-mutability.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fborrowck-object-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fborrowck-object-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-object-mutability.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn borrowed(&self);\n+    fn borrowed_mut(&mut self);\n+}\n+\n+fn borrowed_receiver(x: &Foo) {\n+    x.borrowed();\n+    x.borrowed_mut(); //~ ERROR cannot borrow\n+}\n+\n+fn borrowed_mut_receiver(x: &mut Foo) {\n+    x.borrowed();\n+    x.borrowed_mut();\n+}\n+\n+fn managed_receiver(x: @Foo) {\n+    x.borrowed();\n+    x.borrowed_mut(); //~ ERROR cannot borrow\n+}\n+\n+fn managed_mut_receiver(x: @mut Foo) {\n+    x.borrowed();\n+    x.borrowed_mut();\n+}\n+\n+fn owned_receiver(x: ~Foo) {\n+    x.borrowed();\n+    x.borrowed_mut(); //~ ERROR cannot borrow\n+}\n+\n+fn mut_owned_receiver(mut x: ~Foo) {\n+    x.borrowed();\n+    x.borrowed_mut();\n+}\n+\n+fn main() {}\n+"}, {"sha": "cf047674cd6c8d5007f70a1a24933e1af3f20d10", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -31,5 +31,4 @@ fn main() {\n     //~^ ERROR dereference of reference outside its lifetime\n     //~^^ ERROR automatically borrowed pointer is not valid at the time of borrow\n     //~^^^ ERROR lifetime of return value does not outlive the function call\n-    //~^^^^ ERROR cannot infer an appropriate lifetime\n }"}, {"sha": "b7d320fbab0ca9a139c03908c84dd442ea8c45fd", "filename": "src/test/compile-fail/object-pointer-types.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-pointer-types.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn borrowed(&self);\n+    fn borrowed_mut(&mut self);\n+\n+    fn managed(@self);\n+    fn managed_mut(@mut self);\n+\n+    fn owned(~self);\n+}\n+\n+fn borrowed_receiver(x: &Foo) {\n+    x.borrowed();\n+    x.borrowed_mut(); // See [1]\n+    x.managed(); //~ ERROR does not implement any method\n+    x.managed_mut(); //~ ERROR does not implement any method\n+    x.owned(); //~ ERROR does not implement any method\n+}\n+\n+fn borrowed_mut_receiver(x: &mut Foo) {\n+    x.borrowed();\n+    x.borrowed_mut();\n+    x.managed(); //~ ERROR does not implement any method\n+    x.managed_mut(); //~ ERROR does not implement any method\n+    x.owned(); //~ ERROR does not implement any method\n+}\n+\n+fn managed_receiver(x: @Foo) {\n+    x.borrowed();\n+    x.borrowed_mut(); // See [1]\n+    x.managed();\n+    x.managed_mut();  //~ ERROR does not implement any method\n+    x.owned(); //~ ERROR does not implement any method\n+}\n+\n+fn managed_mut_receiver(x: @mut Foo) {\n+    x.borrowed();\n+    x.borrowed_mut();\n+    x.managed();  //~ ERROR does not implement any method\n+    x.managed_mut();\n+    x.owned(); //~ ERROR does not implement any method\n+}\n+\n+fn owned_receiver(x: ~Foo) {\n+    x.borrowed();\n+    x.borrowed_mut(); // See [1]\n+    x.managed();  //~ ERROR does not implement any method\n+    x.managed_mut();  //~ ERROR does not implement any method\n+    x.owned();\n+}\n+\n+fn main() {}\n+\n+// [1]: These cases are illegal, but the error is not detected\n+// until borrowck, so see the test borrowck-object-mutability.rs"}, {"sha": "b5484b786a022e549127031ef7c7a7a7f05ed605", "filename": "src/test/compile-fail/selftype-traittype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -13,7 +13,7 @@ trait add {\n }\n \n fn do_add(x: @add, y: @add) -> @add {\n-    x.plus(y) //~ ERROR cannot call a method whose type contains a self-type through a boxed trait\n+    x.plus(y) //~ ERROR cannot call a method whose type contains a self-type through an object\n }\n \n fn main() {}"}, {"sha": "73f2cf095522849cdcb49769ae54f2fe4f7d1309", "filename": "src/test/run-fail/borrowck-wg-fail-object.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -0,0 +1,21 @@\n+// error-pattern:borrowed\n+\n+trait Foo {\n+    fn foo(&self, @mut int);\n+}\n+\n+impl Foo for int {\n+    fn foo(&self, x: @mut int) {\n+        *x += *self;\n+    }\n+}\n+\n+fn main() {\n+    let x = @mut 3_i;\n+    let y = x as @mut Foo;\n+\n+    // The call to `y.foo(...)` should freeze `y` (and thus also `x`,\n+    // since `x === y`). It is thus an error when `foo` tries to\n+    // mutate `x`.\n+    y.foo(x);\n+}"}, {"sha": "737253a956fc02f9fc19e53961d60754ae35970f", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -56,6 +56,6 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n \n pub fn main() {\n-  let mut nyan: @noisy = @cat(0u, 2, ~\"nyan\") as @noisy;\n+  let nyan: @mut noisy = @mut cat(0u, 2, ~\"nyan\") as @mut noisy;\n   nyan.speak();\n }"}, {"sha": "23c271f53cac8866e2dede7ff7388345dd01f4f7", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test invoked `&self` methods on owned objects where the values\n+// closed over contain managed values. This implies that the ~ boxes\n+// will have headers that must be skipped over.\n+\n+trait FooTrait {\n+    fn foo(&self) -> uint;\n+}\n+\n+struct BarStruct {\n+    x: @uint\n+}\n+\n+impl FooTrait for BarStruct {\n+    fn foo(&self) -> uint {\n+        *self.x\n+    }\n+}\n+\n+pub fn main() {\n+    let foos: ~[ ~FooTrait: ] = ~[\n+        ~BarStruct{ x: @0 } as ~FooTrait:,\n+        ~BarStruct{ x: @1 } as ~FooTrait:,\n+        ~BarStruct{ x: @2 } as ~FooTrait:\n+    ];\n+\n+    for i in range(0u, foos.len()) {\n+        assert_eq!(i, foos[i].foo());\n+    }\n+}"}, {"sha": "72ae7cf9bb9932c029344c01a9ee4c5c1671fa11", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test invoked `&self` methods on owned objects where the values\n+// closed over do not contain managed values, and thus the ~ boxes do\n+// not have headers.\n+\n trait FooTrait {\n     fn foo(&self) -> uint;\n }", "previous_filename": "src/test/run-pass/owned-trait-objects.rs"}, {"sha": "0d675c16d1aad119c6731ee717c338e9e0b610f2", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test invoked `&self` methods on owned objects where the values\n+// closed over contain managed values. This implies that the ~ boxes\n+// will have headers that must be skipped over.\n+\n+trait FooTrait {\n+    fn foo(~self) -> uint;\n+}\n+\n+struct BarStruct {\n+    x: uint\n+}\n+\n+impl FooTrait for BarStruct {\n+    fn foo(~self) -> uint {\n+        self.x\n+    }\n+}\n+\n+pub fn main() {\n+    let foo = ~BarStruct{ x: 22 } as ~FooTrait;\n+    assert_eq!(22, foo.foo());\n+}"}, {"sha": "8ab1bef286c0ca10dc8f0fcf29ec05af34d656ef", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -502,7 +502,7 @@ impl my_visitor {\n         unsafe {\n             let u = my_visitor(**self);\n             let v = ptr_visit_adaptor::<my_visitor>(Inner {inner: u});\n-            visit_tydesc(inner, @v as @TyVisitor);\n+            visit_tydesc(inner, &v as &TyVisitor);\n             true\n         }\n     }\n@@ -662,7 +662,7 @@ pub fn main() {\n         let td = get_tydesc_for(r);\n         error!(\"tydesc sz: %u, align: %u\",\n                (*td).size, (*td).align);\n-        let v = @v as @TyVisitor;\n+        let v = &v as &TyVisitor;\n         visit_tydesc(td, v);\n \n         let r = u.vals.clone();"}, {"sha": "544f42eb69f5eeffe5d0ba83add01ed21b7ae0dd", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402e343e4976d0993d8735e8b1c678f7da11f75/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=b402e343e4976d0993d8735e8b1c678f7da11f75", "patch": "@@ -79,15 +79,15 @@ impl TyVisitor for MyVisitor {\n     fn visit_evec_uniq(&self, _mtbl: uint, inner: *TyDesc) -> bool {\n         self.types.push(~\"[\");\n         unsafe {\n-            visit_tydesc(inner, (@*self) as @TyVisitor);\n+            visit_tydesc(inner, (&*self) as &TyVisitor);\n         }\n         self.types.push(~\"]\");\n         true\n     }\n     fn visit_evec_uniq_managed(&self, _mtbl: uint, inner: *TyDesc) -> bool {\n         self.types.push(~\"[\");\n         unsafe {\n-            visit_tydesc(inner, (@*self) as @TyVisitor);\n+            visit_tydesc(inner, (&*self) as &TyVisitor);\n         }\n         self.types.push(~\"]\");\n         true\n@@ -154,7 +154,7 @@ impl TyVisitor for MyVisitor {\n     fn visit_closure_ptr(&self, _ck: uint) -> bool { true }\n }\n \n-fn visit_ty<T>(v: @TyVisitor) {\n+fn visit_ty<T>(v: &TyVisitor) {\n     unsafe {\n         visit_tydesc(get_tydesc::<T>(), v);\n     }"}]}