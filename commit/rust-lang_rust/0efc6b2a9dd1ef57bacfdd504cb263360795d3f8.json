{"sha": "0efc6b2a9dd1ef57bacfdd504cb263360795d3f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZmM2YjJhOWRkMWVmNTdiYWNmZGQ1MDRjYjI2MzM2MDc5NWQzZjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-14T08:15:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-14T08:15:55Z"}, "message": "Merge pull request #429 from RalfJung/cargo-miri-test\n\nCargo miri test", "tree": {"sha": "3ed66a85117890806d2f03692a1a58e5cb5a1f3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed66a85117890806d2f03692a1a58e5cb5a1f3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbco+7CRBK7hj4Ov3rIwAAdHIIAHuui9wu/sGRGIl7gzFTtmH8\nJu5YSartSkTXxiBdlvg9+/ST5OARXehC9B4+Cb8D+cZ/aNJva7JcAKRQUpm4Q6lQ\nAgeCvBW8Ul4VLnPFs1l18rNca2y9xM1GI8dyTTNZ9wSkNQTMcC3d+HDuZQVB/4Va\n/lf7Udz3UKJLgqKANIJ9M2whbmqQkkvmPgIC9cJwXIgnj+9edYMcFwGfOGcWo0+r\nPUcnqBDBcmEL2xWiYmwU00tidTYsRiBtXyFYgkqLzdxuNkf5kUc/kxBqiZGPReJI\nCN3eg2qVKXZNGC1VjMkQk4TNCT4ymV4D0WYUxtXjodSVX7GiG9WbmYHva+FPaHA=\n=wedX\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ed66a85117890806d2f03692a1a58e5cb5a1f3b\nparent ff0f856e18ea1ebc708c3d506cc4b980e5bac2da\nparent c4c8c60279aa58616412289c0d832251b62d7ad3\nauthor Ralf Jung <post@ralfj.de> 1534234555 +0200\ncommitter GitHub <noreply@github.com> 1534234555 +0200\n\nMerge pull request #429 from RalfJung/cargo-miri-test\n\nCargo miri test"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8", "html_url": "https://github.com/rust-lang/rust/commit/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0f856e18ea1ebc708c3d506cc4b980e5bac2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f856e18ea1ebc708c3d506cc4b980e5bac2da", "html_url": "https://github.com/rust-lang/rust/commit/ff0f856e18ea1ebc708c3d506cc4b980e5bac2da"}, {"sha": "c4c8c60279aa58616412289c0d832251b62d7ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c8c60279aa58616412289c0d832251b62d7ad3", "html_url": "https://github.com/rust-lang/rust/commit/c4c8c60279aa58616412289c0d832251b62d7ad3"}], "stats": {"total": 74, "additions": 40, "deletions": 34}, "files": [{"sha": "1be324cba35e873f86c42e213fbfb1e124072b42", "filename": ".travis.yml", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=0efc6b2a9dd1ef57bacfdd504cb263360795d3f8", "patch": "@@ -24,37 +24,38 @@ before_script:\n script:\n - set -e\n - |\n-  # get ourselves a MIR-ful libstd\n-  xargo/build.sh\n-- |\n-  # Test plain miri\n+  # Test and install plain miri\n   cargo build --release --all-features &&\n   RUST_BACKTRACE=1 cargo test --release --all-features --all &&\n   cargo install --all-features --force\n+- |\n+  # test that the rustc_tests binary compiles\n+  cd rustc_tests &&\n+  cargo build --release &&\n+  cd ..\n+- |\n+  # get ourselves a MIR-full libstd\n+  xargo/build.sh &&\n+  export MIRI_SYSROOT=~/.xargo/HOST\n - |\n   # Test `cargo miri`\n   cd cargo-miri-test &&\n   if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n-    MIRI_SYSROOT=~/.xargo/HOST cargo miri -q -- -Zmiri-start-fn\n+    cargo miri -q -- -Zmiri-start-fn\n   else\n-    MIRI_SYSROOT=~/.xargo/HOST cargo miri -q -- -Zmiri-start-fn >stdout.real 2>stderr.real &&\n+    cargo miri -q -- -Zmiri-start-fn >stdout.real 2>stderr.real &&\n     cat stdout.real stderr.real &&\n     # Test `cargo miri` output. Not on mac because output redirecting doesn't\n     # work. There is no error. It just stops CI.\n     diff -u stdout.ref stdout.real &&\n     diff -u stderr.ref stderr.real\n   fi &&\n   # Test `cargo miri test`\n-  #cargo miri test &&\n+  cargo miri test &&\n   cd ..\n - |\n   # and run all tests with full mir\n-  MIRI_SYSROOT=~/.xargo/HOST cargo test --release\n-- |\n-  # test that the rustc_tests binary compiles\n-  cd rustc_tests &&\n-  cargo build --release &&\n-  cd ..\n+  cargo test --release\n notifications:\n   email:\n     on_success: never"}, {"sha": "314e27de0aa23635f4d72836c23f429b069716ef", "filename": "README.md", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0efc6b2a9dd1ef57bacfdd504cb263360795d3f8", "patch": "@@ -7,41 +7,33 @@ undergraduate research course at the [University of Saskatchewan][usask].\n \n ## Building Miri\n \n-I recommend that you install [rustup][rustup] to obtain Rust.  miri comes with a\n+I recommend that you install [rustup][rustup] to obtain Rust.  Miri comes with a\n `rust-toolchain` file so rustup will automatically pick a suitable nightly\n version.  Then all you have to do is:\n \n ```sh\n cargo build\n ```\n \n-## Running tests\n+## Running Miri\n \n ```sh\n cargo run tests/run-pass/vecs.rs # Or whatever test you like.\n ```\n \n-## Running miri on your own project('s test suite)\n-\n-Install miri as a cargo subcommand with `cargo install --debug`.\n-Then, inside your own project, use `cargo +nightly miri` to run your project, if it is\n-a bin project, or run `cargo +nightly miri test` to run all tests in your project\n-through miri.\n-\n-## Running miri with full libstd\n+## Running Miri with full libstd\n \n Per default libstd does not contain the MIR of non-polymorphic functions. When\n-miri hits a call to such a function, execution terminates. To fix this, it is\n+Miri hits a call to such a function, execution terminates. To fix this, it is\n possible to compile libstd with full MIR:\n \n ```sh\n rustup component add rust-src\n cargo install xargo\n-cd xargo/\n-RUSTFLAGS='-Zalways-encode-mir' xargo build\n+xargo/build.sh\n ```\n \n-Now you can run miri against the libstd compiled by xargo:\n+Now you can run Miri against the libstd compiled by xargo:\n \n ```sh\n MIRI_SYSROOT=~/.xargo/HOST cargo run tests/run-pass-fullmir/hashmap.rs\n@@ -50,13 +42,23 @@ MIRI_SYSROOT=~/.xargo/HOST cargo run tests/run-pass-fullmir/hashmap.rs\n Notice that you will have to re-run the last step of the preparations above when\n your toolchain changes (e.g., when you update the nightly).\n \n-You can also set `-Zmiri-start-fn` to make miri start evaluation with the\n+You can also set `-Zmiri-start-fn` to make Miri start evaluation with the\n `start_fn` lang item, instead of starting at the `main` function.\n \n+## Running Miri on your own project('s test suite)\n+\n+Install Miri as a cargo subcommand with `cargo install --all-features`, and install\n+a full libstd as described above.\n+\n+Then, inside your own project, use `MIRI_SYSROOT=~/.xargo/HOST cargo +nightly\n+miri` to run your project, if it is a bin project, or run\n+`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test` to run all tests in your\n+project through Miri.\n+\n ## Development and Debugging\n \n-Since the heart of miri (the main interpreter engine) lives in rustc, working on\n-miri will often require using a locally built rustc. This includes getting a\n+Since the heart of Miri (the main interpreter engine) lives in rustc, working on\n+Miri will often require using a locally built rustc. This includes getting a\n trace of the execution, as distributed rustc has `trace!` disabled.\n \n The first-time setup for a local rustc looks as follows:\n@@ -68,12 +70,12 @@ cp config.toml.example config.toml\n ./x.py build src/rustc\n # You may have to change the architecture in the next command\n rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n-# Now cd to your miri directory\n+# Now cd to your Miri directory\n rustup override set custom\n ```\n The `build` step can take 30 minutes and more.\n \n-Now you can `cargo build` miri, and you can `cargo test --tests`.  (`--tests`\n+Now you can `cargo build` Miri, and you can `cargo test --tests`.  (`--tests`\n is needed to skip doctests because we have not built rustdoc for your custom\n toolchain.) You can also set `RUST_LOG=rustc_mir::interpret=trace` as\n environment variable to get a step-by-step trace."}, {"sha": "c022837a5e61cb853941e12fdc39e0a065956d59", "filename": "xargo/Xargo.toml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8/xargo%2FXargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6b2a9dd1ef57bacfdd504cb263360795d3f8/xargo%2FXargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2FXargo.toml?ref=0efc6b2a9dd1ef57bacfdd504cb263360795d3f8", "patch": "@@ -1,2 +1,5 @@\n-[dependencies]\n-std = {features = [\"panic_unwind\", \"jemalloc\", \"backtrace\"]}\n+[dependencies.std]\n+features = [\"panic_unwind\", \"jemalloc\", \"backtrace\"]\n+\n+[dependencies.test]\n+stage = 1"}]}