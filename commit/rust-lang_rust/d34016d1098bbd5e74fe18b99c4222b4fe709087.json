{"sha": "d34016d1098bbd5e74fe18b99c4222b4fe709087", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDAxNmQxMDk4YmJkNWU3NGZlMThiOTljNDIyMmI0ZmU3MDkwODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T21:01:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-29T21:01:24Z"}, "message": "auto merge of #8109 : blake2-ppc/rust/extern-fn-clone, r=thestinger\n\nImplement Clone and DeepClone for functions with 0 to 8 arguments.  `extern fn()` is implicitly copyable so it's simple, except there is no way to implement it generically over #n function arguments.\r\n\r\nAllows deriving of Clone on structs containing `extern \"Rust\" fn`.", "tree": {"sha": "dbd2700988d03b0781e3f381a4c5a98c9eac78fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd2700988d03b0781e3f381a4c5a98c9eac78fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d34016d1098bbd5e74fe18b99c4222b4fe709087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d34016d1098bbd5e74fe18b99c4222b4fe709087", "html_url": "https://github.com/rust-lang/rust/commit/d34016d1098bbd5e74fe18b99c4222b4fe709087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d34016d1098bbd5e74fe18b99c4222b4fe709087/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2830d7d0135f188260f1762e6a47c347e9a603e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2830d7d0135f188260f1762e6a47c347e9a603e2", "html_url": "https://github.com/rust-lang/rust/commit/2830d7d0135f188260f1762e6a47c347e9a603e2"}, {"sha": "11aad20cf879f508a339c2af2bad901446f4fb3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/11aad20cf879f508a339c2af2bad901446f4fb3a", "html_url": "https://github.com/rust-lang/rust/commit/11aad20cf879f508a339c2af2bad901446f4fb3a"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "bd5bfb197b2d1f23e29a60955c9a68418d5031d6", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d34016d1098bbd5e74fe18b99c4222b4fe709087/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34016d1098bbd5e74fe18b99c4222b4fe709087/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=d34016d1098bbd5e74fe18b99c4222b4fe709087", "patch": "@@ -97,6 +97,26 @@ clone_impl!(())\n clone_impl!(bool)\n clone_impl!(char)\n \n+macro_rules! extern_fn_clone(\n+    ($($A:ident),*) => (\n+        impl<$($A,)* ReturnType> Clone for extern \"Rust\" fn($($A),*) -> ReturnType {\n+            /// Return a copy of a function pointer\n+            #[inline]\n+            fn clone(&self) -> extern \"Rust\" fn($($A),*) -> ReturnType { *self }\n+        }\n+    )\n+)\n+\n+extern_fn_clone!()\n+extern_fn_clone!(A)\n+extern_fn_clone!(A, B)\n+extern_fn_clone!(A, B, C)\n+extern_fn_clone!(A, B, C, D)\n+extern_fn_clone!(A, B, C, D, E)\n+extern_fn_clone!(A, B, C, D, E, F)\n+extern_fn_clone!(A, B, C, D, E, F, G)\n+extern_fn_clone!(A, B, C, D, E, F, G, H)\n+\n /// A trait distinct from `Clone` which represents \"deep copies\" of things like\n /// managed boxes which would otherwise not be copied.\n pub trait DeepClone {\n@@ -157,6 +177,26 @@ deep_clone_impl!(())\n deep_clone_impl!(bool)\n deep_clone_impl!(char)\n \n+macro_rules! extern_fn_deep_clone(\n+    ($($A:ident),*) => (\n+        impl<$($A,)* ReturnType> DeepClone for extern \"Rust\" fn($($A),*) -> ReturnType {\n+            /// Return a copy of a function pointer\n+            #[inline]\n+            fn deep_clone(&self) -> extern \"Rust\" fn($($A),*) -> ReturnType { *self }\n+        }\n+    )\n+)\n+\n+extern_fn_deep_clone!()\n+extern_fn_deep_clone!(A)\n+extern_fn_deep_clone!(A, B)\n+extern_fn_deep_clone!(A, B, C)\n+extern_fn_deep_clone!(A, B, C, D)\n+extern_fn_deep_clone!(A, B, C, D, E)\n+extern_fn_deep_clone!(A, B, C, D, E, F)\n+extern_fn_deep_clone!(A, B, C, D, E, F, G)\n+extern_fn_deep_clone!(A, B, C, D, E, F, G, H)\n+\n #[test]\n fn test_owned_clone() {\n     let a = ~5i;\n@@ -195,3 +235,21 @@ fn test_borrowed_clone() {\n     let z: &int = (&y).clone();\n     assert_eq!(*z, 5);\n }\n+\n+#[test]\n+fn test_extern_fn_clone() {\n+    trait Empty {}\n+    impl Empty for int {}\n+\n+    fn test_fn_a() -> float { 1.0 }\n+    fn test_fn_b<T: Empty>(x: T) -> T { x }\n+    fn test_fn_c(_: int, _: float, _: ~[int], _: int, _: int, _: int) {}\n+\n+    let _ = test_fn_a.clone();\n+    let _ = test_fn_b::<int>.clone();\n+    let _ = test_fn_c.clone();\n+\n+    let _ = test_fn_a.deep_clone();\n+    let _ = test_fn_b::<int>.deep_clone();\n+    let _ = test_fn_c.deep_clone();\n+}"}]}