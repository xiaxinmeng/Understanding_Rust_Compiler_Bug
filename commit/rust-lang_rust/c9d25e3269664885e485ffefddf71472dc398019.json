{"sha": "c9d25e3269664885e485ffefddf71472dc398019", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDI1ZTMyNjk2NjQ4ODVlNDg1ZmZlZmRkZjcxNDcyZGMzOTgwMTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2018-01-02T11:36:12Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-08T13:15:17Z"}, "message": "Use different DefIndex representation that is better suited for variable length integer encodings.", "tree": {"sha": "7ec518cbe806353ce89c6591272cb4456db8669a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec518cbe806353ce89c6591272cb4456db8669a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d25e3269664885e485ffefddf71472dc398019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d25e3269664885e485ffefddf71472dc398019", "html_url": "https://github.com/rust-lang/rust/commit/c9d25e3269664885e485ffefddf71472dc398019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d25e3269664885e485ffefddf71472dc398019/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f24d86b84882a02c15f27768e831d0342a3f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f24d86b84882a02c15f27768e831d0342a3f5d", "html_url": "https://github.com/rust-lang/rust/commit/78f24d86b84882a02c15f27768e831d0342a3f5d"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "637b156ceef5d998ddedb5969a52b4bb4e2988ac", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -71,27 +71,23 @@ impl serialize::UseSpecializedDecodable for CrateNum {}\n /// particular definition. It should really be considered an interned\n /// shorthand for a particular DefPath.\n ///\n-/// At the moment we are allocating the numerical values of DefIndexes into two\n-/// ranges: the \"low\" range (starting at zero) and the \"high\" range (starting at\n-/// DEF_INDEX_HI_START). This allows us to allocate the DefIndexes of all\n-/// item-likes (Items, TraitItems, and ImplItems) into one of these ranges and\n+/// At the moment we are allocating the numerical values of DefIndexes from two\n+/// address spaces: DefIndexAddressSpace::Low and DefIndexAddressSpace::High.\n+/// This allows us to allocate the DefIndexes of all item-likes\n+/// (Items, TraitItems, and ImplItems) into one of these spaces and\n /// consequently use a simple array for lookup tables keyed by DefIndex and\n /// known to be densely populated. This is especially important for the HIR map.\n ///\n /// Since the DefIndex is mostly treated as an opaque ID, you probably\n-/// don't have to care about these ranges.\n-newtype_index!(DefIndex\n-    {\n-        ENCODABLE = custom\n-        DEBUG_FORMAT = custom,\n+/// don't have to care about these address spaces.\n \n-        /// The start of the \"high\" range of DefIndexes.\n-        const DEF_INDEX_HI_START = 1 << 31,\n+#[derive(Clone, Eq, Ord, PartialOrd, PartialEq, Hash, Copy)]\n+pub struct DefIndex(u32);\n+\n+/// The crate root is always assigned index 0 by the AST Map code,\n+/// thanks to `NodeCollector::new`.\n+pub const CRATE_DEF_INDEX: DefIndex = DefIndex(0);\n \n-        /// The crate root is always assigned index 0 by the AST Map code,\n-        /// thanks to `NodeCollector::new`.\n-        const CRATE_DEF_INDEX = 0,\n-    });\n \n impl fmt::Debug for DefIndex {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -104,40 +100,50 @@ impl fmt::Debug for DefIndex {\n \n impl DefIndex {\n     #[inline]\n-    pub fn from_u32(x: u32) -> DefIndex {\n-        DefIndex(x)\n+    pub fn address_space(&self) -> DefIndexAddressSpace {\n+        match self.0 & 1 {\n+            0 => DefIndexAddressSpace::Low,\n+            1 => DefIndexAddressSpace::High,\n+            _ => unreachable!()\n+        }\n     }\n \n+    /// Converts this DefIndex into a zero-based array index.\n+    /// This index is the offset within the given DefIndexAddressSpace.\n     #[inline]\n-    pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+    pub fn as_array_index(&self) -> usize {\n+        (self.0 >> 1) as usize\n     }\n \n     #[inline]\n-    pub fn as_u32(&self) -> u32 {\n-        self.0\n+    pub fn from_array_index(i: usize, address_space: DefIndexAddressSpace) -> DefIndex {\n+        DefIndex::from_raw_u32(((i << 1) | (address_space as usize)) as u32)\n     }\n \n-    #[inline]\n-    pub fn address_space(&self) -> DefIndexAddressSpace {\n-        if self.0 < DEF_INDEX_HI_START.0 {\n-            DefIndexAddressSpace::Low\n-        } else {\n-            DefIndexAddressSpace::High\n-        }\n+    // Proc macros from a proc-macro crate have a kind of virtual DefIndex. This\n+    // function maps the index of the macro within the crate (which is also the\n+    // index of the macro in the CrateMetadata::proc_macros array) to the\n+    // corresponding DefIndex.\n+    pub fn from_proc_macro_index(proc_macro_index: usize) -> DefIndex {\n+        let def_index = DefIndex::from_array_index(proc_macro_index,\n+                                                   DefIndexAddressSpace::High);\n+        assert!(def_index != CRATE_DEF_INDEX);\n+        def_index\n     }\n \n-    /// Converts this DefIndex into a zero-based array index.\n-    /// This index is the offset within the given \"range\" of the DefIndex,\n-    /// that is, if the DefIndex is part of the \"high\" range, the resulting\n-    /// index will be (DefIndex - DEF_INDEX_HI_START).\n-    #[inline]\n-    pub fn as_array_index(&self) -> usize {\n-        (self.0 & !DEF_INDEX_HI_START.0) as usize\n+    // This function is the reverse of from_proc_macro_index() above.\n+    pub fn to_proc_macro_index(self: DefIndex) -> usize {\n+        self.as_array_index()\n     }\n \n-    pub fn from_array_index(i: usize, address_space: DefIndexAddressSpace) -> DefIndex {\n-        DefIndex::new(address_space.start() + i)\n+    // Don't use this if you don't know about the DefIndex encoding.\n+    pub fn from_raw_u32(x: u32) -> DefIndex {\n+        DefIndex(x)\n+    }\n+\n+    // Don't use this if you don't know about the DefIndex encoding.\n+    pub fn as_raw_u32(&self) -> u32 {\n+        self.0\n     }\n }\n \n@@ -155,11 +161,6 @@ impl DefIndexAddressSpace {\n     pub fn index(&self) -> usize {\n         *self as usize\n     }\n-\n-    #[inline]\n-    pub fn start(&self) -> usize {\n-        self.index() * DEF_INDEX_HI_START.as_usize()\n-    }\n }\n \n /// A DefId identifies a particular *definition*, by combining a crate"}, {"sha": "43cc437e1e7e32dd65b91548490e67e126a1064f", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -19,7 +19,7 @@ use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n                   CRATE_DEF_INDEX};\n use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::indexed_vec::{IndexVec};\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use session::CrateDisambiguator;\n@@ -61,7 +61,7 @@ impl DefPathTable {\n                 -> DefIndex {\n         let index = {\n             let index_to_key = &mut self.index_to_key[address_space.index()];\n-            let index = DefIndex::new(index_to_key.len() + address_space.start());\n+            let index = DefIndex::from_array_index(index_to_key.len(), address_space);\n             debug!(\"DefPathTable::insert() - {:?} <-> {:?}\", key, index);\n             index_to_key.push(key);\n             index\n@@ -89,16 +89,15 @@ impl DefPathTable {\n     pub fn add_def_path_hashes_to(&self,\n                                   cnum: CrateNum,\n                                   out: &mut FxHashMap<DefPathHash, DefId>) {\n-        for address_space in &[DefIndexAddressSpace::Low, DefIndexAddressSpace::High] {\n-            let start_index = address_space.start();\n+        for &address_space in &[DefIndexAddressSpace::Low, DefIndexAddressSpace::High] {\n             out.extend(\n                 (&self.def_path_hashes[address_space.index()])\n                     .iter()\n                     .enumerate()\n                     .map(|(index, &hash)| {\n                         let def_id = DefId {\n                             krate: cnum,\n-                            index: DefIndex::new(index + start_index),\n+                            index: DefIndex::from_array_index(index, address_space),\n                         };\n                         (hash, def_id)\n                     })"}, {"sha": "d9d08294334db91eca4661e8eb4efdb40773149c", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -19,7 +19,6 @@\n use graphviz as dot;\n \n use hir::def_id::DefIndex;\n-use rustc_data_structures::indexed_vec::Idx;\n use ty;\n use middle::free_region::RegionRelations;\n use middle::region;\n@@ -68,7 +67,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n     }\n \n     let requested_node = env::var(\"RUST_REGION_GRAPH_NODE\")\n-        .ok().and_then(|s| s.parse().map(DefIndex::new).ok());\n+        .ok().and_then(|s| s.parse().map(DefIndex::from_raw_u32).ok());\n \n     if requested_node.is_some() && requested_node != Some(context.index) {\n         return;\n@@ -102,7 +101,7 @@ pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(\n             let mut new_str = String::new();\n             for c in output_template.chars() {\n                 if c == '%' {\n-                    new_str.push_str(&context.index.as_usize().to_string());\n+                    new_str.push_str(&context.index.as_raw_u32().to_string());\n                 } else {\n                     new_str.push(c);\n                 }"}, {"sha": "8f5832b2483edc55ea94c1fabe989e772e8f219a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -555,14 +555,14 @@ impl Session {\n                                             index: DefIndex)\n                                             -> String {\n         format!(\"__rustc_plugin_registrar__{}_{}\", disambiguator.to_fingerprint().to_hex(),\n-                                                   index.as_usize())\n+                                                   index.to_proc_macro_index())\n     }\n \n     pub fn generate_derive_registrar_symbol(&self, disambiguator: CrateDisambiguator,\n                                             index: DefIndex)\n                                             -> String {\n         format!(\"__rustc_derive_registrar__{}_{}\", disambiguator.to_fingerprint().to_hex(),\n-                                                   index.as_usize())\n+                                                   index.to_proc_macro_index())\n     }\n \n     pub fn sysroot<'a>(&'a self) -> &'a Path {"}, {"sha": "436ddc32a743b818cdf11e203c8ec486fee02ea3", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -463,7 +463,7 @@ impl CrateStore for cstore::CStore {\n     fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {\n         let data = self.get_crate_data(id.krate);\n         if let Some(ref proc_macros) = data.proc_macros {\n-            return LoadedMacro::ProcMacro(proc_macros[id.index.as_usize() - 1].1.clone());\n+            return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n         } else if data.name == \"proc_macro\" &&\n                   self.get_crate_data(id.krate).item_name(id.index) == \"quote\" {\n             let ext = SyntaxExtension::ProcMacro(Box::new(::proc_macro::__internal::Quoter));"}, {"sha": "a11e3b69ab168910138126a9b860435bf732e373", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -18,7 +18,8 @@ use rustc::hir;\n use rustc::middle::cstore::{LinkagePreference, ExternConstBody,\n                             ExternBodyNestedBodies};\n use rustc::hir::def::{self, Def, CtorKind};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIndex,\n+                         CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -36,7 +37,6 @@ use std::rc::Rc;\n use std::u32;\n \n use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n-use rustc_data_structures::indexed_vec::Idx;\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::codemap;\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefId> for DecodeContext<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<DefIndex, Self::Error> {\n-        Ok(DefIndex::from_u32(self.read_u32()?))\n+        Ok(DefIndex::from_raw_u32(self.read_u32()?))\n     }\n }\n \n@@ -453,7 +453,7 @@ impl<'a, 'tcx> CrateMetadata {\n         if !self.is_proc_macro(index) {\n             self.entry(index).kind.to_def(self.local_def_id(index))\n         } else {\n-            let kind = self.proc_macros.as_ref().unwrap()[index.as_usize() - 1].1.kind();\n+            let kind = self.proc_macros.as_ref().unwrap()[index.to_proc_macro_index()].1.kind();\n             Some(Def::Macro(self.local_def_id(index), kind))\n         }\n     }\n@@ -634,7 +634,7 @@ impl<'a, 'tcx> CrateMetadata {\n                     let def = Def::Macro(\n                         DefId {\n                             krate: self.cnum,\n-                            index: DefIndex::new(id + 1)\n+                            index: DefIndex::from_proc_macro_index(id),\n                         },\n                         ext.kind()\n                     );"}, {"sha": "c6691f5fbf9d15a7e9f8536add64778601ac9982", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> SpecializedEncoder<DefId> for EncodeContext<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedEncoder<DefIndex> for EncodeContext<'a, 'tcx> {\n     #[inline]\n     fn specialized_encode(&mut self, def_index: &DefIndex) -> Result<(), Self::Error> {\n-        self.emit_u32(def_index.as_u32())\n+        self.emit_u32(def_index.as_raw_u32())\n     }\n }\n "}, {"sha": "157b8385a6922e9d3e77e44b4bf0ab238ea89f24", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -74,10 +74,9 @@ impl<'tcx> LazySeq<Index> {\n     #[inline(never)]\n     pub fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         let words = &bytes_to_words(&bytes[self.position..])[..self.len];\n-        let index = def_index.as_usize();\n \n         debug!(\"Index::lookup: index={:?} words.len={:?}\",\n-               index,\n+               def_index,\n                words.len());\n \n         let positions = match def_index.address_space() {"}, {"sha": "3cf47abddf03d672a324a5d70e8d11756e3e2c32", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -13,8 +13,8 @@ use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult};\n use Namespace::{self, MacroNS};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use resolve_imports::ImportResolver;\n-use rustc_data_structures::indexed_vec::Idx;\n-use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex};\n+use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex,\n+                         DefIndexAddressSpace};\n use rustc::hir::def::{Def, Export};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n@@ -188,7 +188,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Rc<SyntaxExtension>) {\n         let def_id = DefId {\n             krate: BUILTIN_MACROS_CRATE,\n-            index: DefIndex::new(self.macro_map.len()),\n+            index: DefIndex::from_array_index(self.macro_map.len(),\n+                                              DefIndexAddressSpace::Low),\n         };\n         let kind = ext.kind();\n         self.macro_map.insert(def_id, ext);"}, {"sha": "425b09a045d9cf29110e1bf9789bc5320827b997", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d25e3269664885e485ffefddf71472dc398019/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=c9d25e3269664885e485ffefddf71472dc398019", "patch": "@@ -1123,7 +1123,7 @@ fn generated_code(span: Span) -> bool {\n fn id_from_def_id(id: DefId) -> rls_data::Id {\n     rls_data::Id {\n         krate: id.krate.as_u32(),\n-        index: id.index.as_u32(),\n+        index: id.index.as_raw_u32(),\n     }\n }\n "}]}