{"sha": "0eb293ddb72ce080b3d0a6bdf643bd645849fa9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYjI5M2RkYjcyY2UwODBiM2QwYTZiZGY2NDNiZDY0NTg0OWZhOWU=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-07T03:31:12Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-15T16:57:10Z"}, "message": "Use an allow-list of platforms that support std.\n\nUse a fall-through for no_std targets.", "tree": {"sha": "04f7024267632bc85abb802b6f4f27d7700df085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f7024267632bc85abb802b6f4f27d7700df085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e", "html_url": "https://github.com/rust-lang/rust/commit/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cee9f05c2d369cda1d8487fe6e475a2ae990b9f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cee9f05c2d369cda1d8487fe6e475a2ae990b9f8", "html_url": "https://github.com/rust-lang/rust/commit/cee9f05c2d369cda1d8487fe6e475a2ae990b9f8"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "430062d4ac44eb7ec576c0b1fc51d8d70b723c5f", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=0eb293ddb72ce080b3d0a6bdf643bd645849fa9e", "patch": "@@ -41,21 +41,33 @@ cfg_if::cfg_if! {\n     if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n         mod real_imp;\n-    } else if #[cfg(any(target_arch = \"wasm32\", target_os = \"none\"))] {\n-        #[path = \"dummy.rs\"]\n-        mod real_imp;\n     } else if #[cfg(target_os = \"hermit\")] {\n         #[path = \"hermit.rs\"]\n         mod real_imp;\n     } else if #[cfg(target_env = \"msvc\")] {\n         #[path = \"seh.rs\"]\n         mod real_imp;\n-    } else {\n+    } else if #[cfg(any(\n+        all(target_family = \"windows\", target_env = \"gnu\"),\n+        target_os = \"cloudabi\",\n+        target_family = \"unix\",\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n+    ))] {\n         // Rust runtime's startup objects depend on these symbols, so make them public.\n         #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n         pub use real_imp::eh_frame_registry::*;\n         #[path = \"gcc.rs\"]\n         mod real_imp;\n+    } else {\n+        // Targets that don't support unwinding.\n+        // - arch=wasm32\n+        // - os=none (\"bare metal\" targets)\n+        // - os=uefi\n+        // - nvptx64-nvidia-cuda\n+        // - avr-unknown-unknown\n+        // - mipsel-sony-psp\n+        #[path = \"dummy.rs\"]\n+        mod real_imp;\n     }\n }\n "}, {"sha": "eb2753d62457a6fab85f31ec5e9337240387fd98", "filename": "src/libstd/build.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=0eb293ddb72ce080b3d0a6bdf643bd645849fa9e", "patch": "@@ -62,9 +62,29 @@ fn main() {\n         }\n         println!(\"cargo:rustc-link-lib=c\");\n         println!(\"cargo:rustc-link-lib=compiler_rt\");\n-    }\n-    println!(\"cargo:rustc-env=STD_ENV_ARCH={}\", env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap());\n-    if target.contains(\"-none\") || target.contains(\"nvptx\") {\n+    } else if (target.contains(\"sgx\") && target.contains(\"fortanix\"))\n+        || target.contains(\"hermit\")\n+        || target.contains(\"l4re\")\n+        || target.contains(\"redox\")\n+        || target.contains(\"haiku\")\n+        || target.contains(\"vxworks\")\n+        || target.contains(\"wasm32\")\n+        || target.contains(\"asmjs\")\n+    {\n+        // These platforms don't have any special requirements.\n+    } else {\n+        // This is for Cargo's build-std support, to mark std as unstable for\n+        // typically no_std platforms.\n+        // This covers:\n+        // - os=none (\"bare metal\" targets)\n+        // - mipsel-sony-psp\n+        // - nvptx64-nvidia-cuda\n+        // - avr-unknown-unknown\n+        // - tvos (aarch64-apple-tvos, x86_64-apple-tvos)\n+        // - uefi (x86_64-unknown-uefi, i686-unknown-uefi)\n+        // - JSON targets\n+        // - Any new targets that have not been explicitly added above.\n         println!(\"cargo:rustc-cfg=feature=\\\"restricted-std\\\"\");\n     }\n+    println!(\"cargo:rustc-env=STD_ENV_ARCH={}\", env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap());\n }"}, {"sha": "c4d10ab177be9534659df7ae4b69fe9355f47c07", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb293ddb72ce080b3d0a6bdf643bd645849fa9e/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=0eb293ddb72ce080b3d0a6bdf643bd645849fa9e", "patch": "@@ -9,21 +9,31 @@\n \n cfg_if::cfg_if! {\n     if #[cfg(target_env = \"msvc\")] {\n-        // no extra unwinder support needed\n-    } else if #[cfg(\n-        any(\n-            all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-            target_os = \"none\",\n-            target_os = \"hermit\",\n-            target_os = \"uefi\",\n-            target_os = \"cuda\",\n-            target_os = \"l4re\",\n-        ))]\n-    {\n-        // no unwinder on the system!\n-    } else {\n+        // Windows MSVC no extra unwinder support needed\n+    } else if #[cfg(any(\n+        target_os = \"l4re\",\n+        target_os = \"none\",\n+    ))] {\n+        // These \"unix\" family members do not have unwinder.\n+        // Note this also matches x86_64-linux-kernel.\n+    } else if #[cfg(any(\n+        unix,\n+        windows,\n+        target_os = \"cloudabi\",\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n+    ))] {\n         mod libunwind;\n         pub use libunwind::*;\n+    } else {\n+        // no unwinder on the system!\n+        // - wasm32 (not emscripten, which is \"unix\" family)\n+        // - os=none (\"bare metal\" targets)\n+        // - os=hermit\n+        // - os=uefi\n+        // - os=cuda\n+        // - nvptx64-nvidia-cuda\n+        // - mipsel-sony-psp\n+        // - Any new targets not listed above.\n     }\n }\n "}]}