{"sha": "59f6b8338e866b022941ff78ccc82ccef73a52fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjZiODMzOGU4NjZiMDIyOTQxZmY3OGNjYzgyY2NlZjczYTUyZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-12T09:34:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-12T09:34:13Z"}, "message": "Auto merge of #43812 - steveklabnik:rustdoc-doc-tests, r=QuietMisdreavus\n\nrustdoc doc tests\n\nThis is mostly adapted from the book v1's chapter.\n\ncc https://github.com/rust-lang/rust/issues/42322\n\nr? @rust-lang/docs", "tree": {"sha": "5a794ea8e04082b05ba1e10f3f5dd46aaadae4d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a794ea8e04082b05ba1e10f3f5dd46aaadae4d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f6b8338e866b022941ff78ccc82ccef73a52fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f6b8338e866b022941ff78ccc82ccef73a52fd", "html_url": "https://github.com/rust-lang/rust/commit/59f6b8338e866b022941ff78ccc82ccef73a52fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f6b8338e866b022941ff78ccc82ccef73a52fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bffc973da8a7045d6ad5c678eab6fd57ab49ed54", "url": "https://api.github.com/repos/rust-lang/rust/commits/bffc973da8a7045d6ad5c678eab6fd57ab49ed54", "html_url": "https://github.com/rust-lang/rust/commit/bffc973da8a7045d6ad5c678eab6fd57ab49ed54"}, {"sha": "035d4ea2cabb029ce64e7e1bb0cceb0f4b0ad80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/035d4ea2cabb029ce64e7e1bb0cceb0f4b0ad80d", "html_url": "https://github.com/rust-lang/rust/commit/035d4ea2cabb029ce64e7e1bb0cceb0f4b0ad80d"}], "stats": {"total": 238, "additions": 237, "deletions": 1}, "files": [{"sha": "4f7736d8df6bb6cd79fc8448c0b7de1a5a7e0152", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 237, "deletions": 1, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/59f6b8338e866b022941ff78ccc82ccef73a52fd/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/59f6b8338e866b022941ff78ccc82ccef73a52fd/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=59f6b8338e866b022941ff78ccc82ccef73a52fd", "patch": "@@ -1,3 +1,239 @@\n # Documentation tests\n \n-Coming soon!\n\\ No newline at end of file\n+`rustdoc` supports executing your documentation examples as tests. This makes sure\n+that your tests are up to date and working.\n+\n+The basic idea is this:\n+\n+```rust,ignore\n+/// # Examples\n+///\n+/// ```\n+/// let x = 5;\n+/// ```\n+```\n+\n+The triple backticks start and end code blocks. If this were in a file named `foo.rs`,\n+running `rustdoc --test foo.rs` will extract this example, and then run it as a test.\n+\n+There's some subtlety though! Read on for more details.\n+\n+## Pre-processing examples\n+\n+In the example above, you'll note something strange: there's no `main`\n+function! Forcing you to write `main` for every example, no matter how small,\n+adds friction. So `rustdoc` processes your examples slightly before\n+running them. Here's the full algorithm rustdoc uses to preprocess examples:\n+\n+1. Any leading `#![foo]` attributes are left intact as crate attributes.\n+2. Some common `allow` attributes are inserted, including\n+   `unused_variables`, `unused_assignments`, `unused_mut`,\n+   `unused_attributes`, and `dead_code`. Small examples often trigger\n+   these lints.\n+3. If the example does not contain `extern crate`, then `extern crate\n+   <mycrate>;` is inserted (note the lack of `#[macro_use]`).\n+4. Finally, if the example does not contain `fn main`, the remainder of the\n+   text is wrapped in `fn main() { your_code }`.\n+\n+For more about that caveat in rule 3, see \"Documeting Macros\" below.\n+\n+## Hiding portions of the example\n+\n+Sometimes, you need some setup code, or other things that would distract\n+from your example, but are important to make the tests work. Consider\n+an example block that looks like this:\n+\n+```text\n+/// Some documentation.\n+# fn foo() {}\n+```\n+\n+It will render like this:\n+\n+```rust\n+/// Some documentation.\n+# fn foo() {}\n+```\n+\n+Yes, that's right: you can add lines that start with `# `, and they will\n+be hidden from the output, but will be used when compiling your code. You\n+can use this to your advantage. In this case, documentation comments need\n+to apply to some kind of function, so if I want to show you just a\n+documentation comment, I need to add a little function definition below\n+it. At the same time, it's only there to satisfy the compiler, so hiding\n+it makes the example more clear. You can use this technique to explain\n+longer examples in detail, while still preserving the testability of your\n+documentation.\n+\n+For example, imagine that we wanted to document this code:\n+\n+```rust\n+let x = 5;\n+let y = 6;\n+println!(\"{}\", x + y);\n+```\n+\n+We might want the documentation to end up looking like this:\n+\n+> First, we set `x` to five:\n+>\n+> ```rust\n+> let x = 5;\n+> # let y = 6;\n+> # println!(\"{}\", x + y);\n+> ```\n+>\n+> Next, we set `y` to six:\n+>\n+> ```rust\n+> # let x = 5;\n+> let y = 6;\n+> # println!(\"{}\", x + y);\n+> ```\n+>\n+> Finally, we print the sum of `x` and `y`:\n+>\n+> ```rust\n+> # let x = 5;\n+> # let y = 6;\n+> println!(\"{}\", x + y);\n+> ```\n+\n+To keep each code block testable, we want the whole program in each block, but\n+we don't want the reader to see every line every time.  Here's what we put in\n+our source code:\n+\n+```text\n+    First, we set `x` to five:\n+\n+    ```rust\n+    let x = 5;\n+    # let y = 6;\n+    # println!(\"{}\", x + y);\n+    ```\n+\n+    Next, we set `y` to six:\n+\n+    ```rust\n+    # let x = 5;\n+    let y = 6;\n+    # println!(\"{}\", x + y);\n+    ```\n+\n+    Finally, we print the sum of `x` and `y`:\n+\n+    ```rust\n+    # let x = 5;\n+    # let y = 6;\n+    println!(\"{}\", x + y);\n+    ```\n+```\n+\n+By repeating all parts of the example, you can ensure that your example still\n+compiles, while only showing the parts that are relevant to that part of your\n+explanation.\n+\n+Another case where the use of `#` is handy is when you want to ignore\n+error handling. Lets say you want the following,\n+\n+```rust,ignore\n+/// use std::io;\n+/// let mut input = String::new();\n+/// io::stdin().read_line(&mut input)?;\n+```\n+\n+The problem is that `?` returns a `Result<T, E>` and test functions\n+don't return anything so this will give a mismatched types error.\n+\n+```rust,ignore\n+/// A doc test using ?\n+///\n+/// ```\n+/// use std::io;\n+/// # fn foo() -> io::Result<()> {\n+/// let mut input = String::new();\n+/// io::stdin().read_line(&mut input)?;\n+/// # Ok(())\n+/// # }\n+/// ```\n+# fn foo() {}\n+```\n+\n+You can get around this by wrapping the code in a function. This catches\n+and swallows the `Result<T, E>` when running tests on the docs. This\n+pattern appears regularly in the standard library.\n+\n+### Documenting macros\n+\n+Here\u2019s an example of documenting a macro:\n+\n+```rust\n+/// Panic with a given message unless an expression evaluates to true.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// # #[macro_use] extern crate foo;\n+/// # fn main() {\n+/// panic_unless!(1 + 1 == 2, \u201cMath is broken.\u201d);\n+/// # }\n+/// ```\n+///\n+/// ```rust,should_panic\n+/// # #[macro_use] extern crate foo;\n+/// # fn main() {\n+/// panic_unless!(true == false, \u201cI\u2019m broken.\u201d);\n+/// # }\n+/// ```\n+#[macro_export]\n+macro_rules! panic_unless {\n+    ($condition:expr, $($rest:expr),+) => ({ if ! $condition { panic!($($rest),+); } });\n+}\n+# fn main() {}\n+```\n+\n+You\u2019ll note three things: we need to add our own `extern crate` line, so that\n+we can add the `#[macro_use]` attribute. Second, we\u2019ll need to add our own\n+`main()` as well (for reasons discussed above). Finally, a judicious use of\n+`#` to comment out those two things, so they don\u2019t show up in the output.\n+\n+## Attributes\n+\n+There are a few annotations that are useful to help `rustdoc` do the right\n+thing when testing your code:\n+\n+```rust\n+/// ```ignore\n+/// fn foo() {\n+/// ```\n+# fn foo() {}\n+```\n+\n+The `ignore` directive tells Rust to ignore your code. This is almost never\n+what you want, as it's the most generic. Instead, consider annotating it\n+with `text` if it's not code, or using `#`s to get a working example that\n+only shows the part you care about.\n+\n+```rust\n+/// ```should_panic\n+/// assert!(false);\n+/// ```\n+# fn foo() {}\n+```\n+\n+`should_panic` tells `rustdoc` that the code should compile correctly, but\n+not actually pass as a test.\n+\n+```rust\n+/// ```no_run\n+/// loop {\n+///     println!(\"Hello, world\");\n+/// }\n+/// ```\n+# fn foo() {}\n+```\n+\n+The `no_run` attribute will compile your code, but not run it. This is\n+important for examples such as \"Here's how to retrieve a web page,\"\n+which you would want to ensure compiles, but might be run in a test\n+environment that has no network access.\n\\ No newline at end of file"}]}