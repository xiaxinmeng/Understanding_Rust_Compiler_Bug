{"sha": "10a7204af93271c248dfbe52dba1e1f668dfc1e0", "node_id": "C_kwDOAAsO6NoAKDEwYTcyMDRhZjkzMjcxYzI0OGRmYmU1MmRiYTFlMWY2NjhkZmMxZTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-20T22:37:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-20T22:37:30Z"}, "message": "Rollup merge of #92856 - GuillaumeGomez:exclude-test-doc_auto_cfg, r=Nemo157\n\nExclude \"test\" from doc_auto_cfg\n\nFixes #91740.\n\ncc `@Nemo157` (you were the one suggesting this iirc)\nr? `@camelid`", "tree": {"sha": "6cfe4d8ec9530f995fde1488ae7ee8a90f4df215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cfe4d8ec9530f995fde1488ae7ee8a90f4df215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a7204af93271c248dfbe52dba1e1f668dfc1e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6eQqCRBK7hj4Ov3rIwAA/Q8IAISK54Qam+gOA5kgHiIfK0P1\npHeLkJ+FdrZpn5Aya0j8xXW8LgOSmobH1Pyzf4Pn5GLyKjxeguZZZglwGogitpov\nMGwdmv9SMQiEtXy9HrwF0pmbB9+Kup6+gUuq3jdt/+VRDh8+KO4vmAaqeSjv63yA\nEQDMr1wvM0rVT1A5cdqxEd/zGJWeC8hpH1+nUPyXyucBO3zXW/Ncf2Xr3ZBw/Dgq\nvoOPTVhUP3uNWufPpYfRcHRkbGNGBaXwlMP3zi75FCi3OcX2TcpBSNkmx056+xHE\nV5H0Wmy0j4A+uNdovQjq53CGeAVR1kcEzbpDaMQw457/Ps9FTBYQkFnokvX9j9I=\n=vOC3\n-----END PGP SIGNATURE-----\n", "payload": "tree 6cfe4d8ec9530f995fde1488ae7ee8a90f4df215\nparent 3d10c64b26936a5b597bffc983220058a9a250b9\nparent b0df7653d0cc7256e9bb34a0bc3c7e00f3afaea7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642718250 +0100\ncommitter GitHub <noreply@github.com> 1642718250 +0100\n\nRollup merge of #92856 - GuillaumeGomez:exclude-test-doc_auto_cfg, r=Nemo157\n\nExclude \"test\" from doc_auto_cfg\n\nFixes #91740.\n\ncc `@Nemo157` (you were the one suggesting this iirc)\nr? `@camelid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a7204af93271c248dfbe52dba1e1f668dfc1e0", "html_url": "https://github.com/rust-lang/rust/commit/10a7204af93271c248dfbe52dba1e1f668dfc1e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a7204af93271c248dfbe52dba1e1f668dfc1e0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d10c64b26936a5b597bffc983220058a9a250b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d10c64b26936a5b597bffc983220058a9a250b9", "html_url": "https://github.com/rust-lang/rust/commit/3d10c64b26936a5b597bffc983220058a9a250b9"}, {"sha": "b0df7653d0cc7256e9bb34a0bc3c7e00f3afaea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0df7653d0cc7256e9bb34a0bc3c7e00f3afaea7", "html_url": "https://github.com/rust-lang/rust/commit/b0df7653d0cc7256e9bb34a0bc3c7e00f3afaea7"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "b72d2624177552907a01c2d70a1909e5170cb4e9", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=10a7204af93271c248dfbe52dba1e1f668dfc1e0", "patch": "@@ -8,6 +8,7 @@ use std::mem;\n use std::ops;\n \n use rustc_ast::{LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n@@ -43,23 +44,22 @@ crate struct InvalidCfgError {\n \n impl Cfg {\n     /// Parses a `NestedMetaItem` into a `Cfg`.\n-    fn parse_nested(nested_cfg: &NestedMetaItem) -> Result<Cfg, InvalidCfgError> {\n+    fn parse_nested(\n+        nested_cfg: &NestedMetaItem,\n+        exclude: &FxHashSet<Cfg>,\n+    ) -> Result<Option<Cfg>, InvalidCfgError> {\n         match nested_cfg {\n-            NestedMetaItem::MetaItem(ref cfg) => Cfg::parse(cfg),\n+            NestedMetaItem::MetaItem(ref cfg) => Cfg::parse_without(cfg, exclude),\n             NestedMetaItem::Literal(ref lit) => {\n                 Err(InvalidCfgError { msg: \"unexpected literal\", span: lit.span })\n             }\n         }\n     }\n \n-    /// Parses a `MetaItem` into a `Cfg`.\n-    ///\n-    /// The `MetaItem` should be the content of the `#[cfg(...)]`, e.g., `unix` or\n-    /// `target_os = \"redox\"`.\n-    ///\n-    /// If the content is not properly formatted, it will return an error indicating what and where\n-    /// the error is.\n-    crate fn parse(cfg: &MetaItem) -> Result<Cfg, InvalidCfgError> {\n+    crate fn parse_without(\n+        cfg: &MetaItem,\n+        exclude: &FxHashSet<Cfg>,\n+    ) -> Result<Option<Cfg>, InvalidCfgError> {\n         let name = match cfg.ident() {\n             Some(ident) => ident.name,\n             None => {\n@@ -70,9 +70,15 @@ impl Cfg {\n             }\n         };\n         match cfg.kind {\n-            MetaItemKind::Word => Ok(Cfg::Cfg(name, None)),\n+            MetaItemKind::Word => {\n+                let cfg = Cfg::Cfg(name, None);\n+                if exclude.contains(&cfg) { Ok(None) } else { Ok(Some(cfg)) }\n+            }\n             MetaItemKind::NameValue(ref lit) => match lit.kind {\n-                LitKind::Str(value, _) => Ok(Cfg::Cfg(name, Some(value))),\n+                LitKind::Str(value, _) => {\n+                    let cfg = Cfg::Cfg(name, Some(value));\n+                    if exclude.contains(&cfg) { Ok(None) } else { Ok(Some(cfg)) }\n+                }\n                 _ => Err(InvalidCfgError {\n                     // FIXME: if the main #[cfg] syntax decided to support non-string literals,\n                     // this should be changed as well.\n@@ -81,23 +87,40 @@ impl Cfg {\n                 }),\n             },\n             MetaItemKind::List(ref items) => {\n-                let mut sub_cfgs = items.iter().map(Cfg::parse_nested);\n-                match name {\n+                let sub_cfgs =\n+                    items.iter().filter_map(|i| Cfg::parse_nested(i, exclude).transpose());\n+                let ret = match name {\n                     sym::all => sub_cfgs.fold(Ok(Cfg::True), |x, y| Ok(x? & y?)),\n                     sym::any => sub_cfgs.fold(Ok(Cfg::False), |x, y| Ok(x? | y?)),\n                     sym::not => {\n+                        let mut sub_cfgs = sub_cfgs.collect::<Vec<_>>();\n                         if sub_cfgs.len() == 1 {\n-                            Ok(!sub_cfgs.next().unwrap()?)\n+                            Ok(!sub_cfgs.pop().unwrap()?)\n                         } else {\n                             Err(InvalidCfgError { msg: \"expected 1 cfg-pattern\", span: cfg.span })\n                         }\n                     }\n                     _ => Err(InvalidCfgError { msg: \"invalid predicate\", span: cfg.span }),\n+                };\n+                match ret {\n+                    Ok(c) => Ok(Some(c)),\n+                    Err(e) => Err(e),\n                 }\n             }\n         }\n     }\n \n+    /// Parses a `MetaItem` into a `Cfg`.\n+    ///\n+    /// The `MetaItem` should be the content of the `#[cfg(...)]`, e.g., `unix` or\n+    /// `target_os = \"redox\"`.\n+    ///\n+    /// If the content is not properly formatted, it will return an error indicating what and where\n+    /// the error is.\n+    crate fn parse(cfg: &MetaItem) -> Result<Cfg, InvalidCfgError> {\n+        Self::parse_without(cfg, &FxHashSet::default()).map(|ret| ret.unwrap())\n+    }\n+\n     /// Checks whether the given configuration can be matched in the current session.\n     ///\n     /// Equivalent to `attr::cfg_matches`."}, {"sha": "7ae7b940f26b84a0edf797c6b3327c5e9df7c36b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=10a7204af93271c248dfbe52dba1e1f668dfc1e0", "patch": "@@ -831,8 +831,9 @@ impl AttributesExt for [ast::Attribute] {\n                 self.iter()\n                     .filter(|attr| attr.has_name(sym::cfg))\n                     .filter_map(|attr| single(attr.meta_item_list()?))\n-                    .filter_map(|attr| Cfg::parse(attr.meta_item()?).ok())\n-                    .filter(|cfg| !hidden_cfg.contains(cfg))\n+                    .filter_map(|attr| {\n+                        Cfg::parse_without(attr.meta_item()?, hidden_cfg).ok().flatten()\n+                    })\n                     .fold(Cfg::True, |cfg, new_cfg| cfg & new_cfg)\n             } else {\n                 Cfg::True"}, {"sha": "2cbb3324a5e0499051584b0e1281f6e86061f26b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=10a7204af93271c248dfbe52dba1e1f668dfc1e0", "patch": "@@ -141,6 +141,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     })\n                     .collect::<Vec<_>>()\n             })\n+            .chain([Cfg::Cfg(sym::test, None)].into_iter())\n             .collect();\n \n         self.cx.cache.exact_paths = self.exact_paths;"}, {"sha": "57dd0529535f6ce0b421cc7c763a0f29dacfc3ec", "filename": "src/test/rustdoc/doc-auto-cfg.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Ftest%2Frustdoc%2Fdoc-auto-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Ftest%2Frustdoc%2Fdoc-auto-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-auto-cfg.rs?ref=10a7204af93271c248dfbe52dba1e1f668dfc1e0", "patch": "@@ -3,6 +3,12 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//*[@class=\"item-info\"]/*[@class=\"stab portability\"]' 'non-test'\n-#[cfg(not(test))]\n+// @has - '//*[@class=\"item-info\"]/*[@class=\"stab portability\"]' 'non-doctest'\n+#[cfg(not(doctest))]\n pub fn foo() {}\n+\n+// @has foo/fn.bar.html\n+// @has - '//*[@class=\"item-info\"]/*[@class=\"stab portability\"]' 'doc'\n+// @!has - '//*[@class=\"item-info\"]/*[@class=\"stab portability\"]' 'test'\n+#[cfg(any(test, doc))]\n+pub fn bar() {}"}, {"sha": "636957fe9980d51df43f2fcc587461a0e2601e63", "filename": "src/test/rustdoc/doc-cfg-hide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a7204af93271c248dfbe52dba1e1f668dfc1e0/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs?ref=10a7204af93271c248dfbe52dba1e1f668dfc1e0", "patch": "@@ -26,7 +26,7 @@ pub struct Hyperdulia;\n \n // @has 'oud/struct.Oystercatcher.html'\n // @count   - '//*[@class=\"stab portability\"]' 1\n-// @matches - '//*[@class=\"stab portability\"]' 'crate features solecism and oystercatcher'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature oystercatcher only'\n // compile-flags:--cfg feature=\"oystercatcher\"\n #[cfg(all(feature = \"solecism\", feature = \"oystercatcher\"))]\n pub struct Oystercatcher;"}]}