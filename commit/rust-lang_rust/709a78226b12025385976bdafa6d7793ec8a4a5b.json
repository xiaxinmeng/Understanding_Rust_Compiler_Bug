{"sha": "709a78226b12025385976bdafa6d7793ec8a4a5b", "node_id": "C_kwDOAAsO6NoAKDcwOWE3ODIyNmIxMjAyNTM4NTk3NmJkYWZhNmQ3NzkzZWM4YTRhNWI", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-04-24T10:34:35Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:48:16Z"}, "message": "move emit_metadata to rustc_metadata::fs", "tree": {"sha": "bc5a056c5d07b1b105b3b417aa290cb92cde292f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5a056c5d07b1b105b3b417aa290cb92cde292f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709a78226b12025385976bdafa6d7793ec8a4a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709a78226b12025385976bdafa6d7793ec8a4a5b", "html_url": "https://github.com/rust-lang/rust/commit/709a78226b12025385976bdafa6d7793ec8a4a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709a78226b12025385976bdafa6d7793ec8a4a5b/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedf78e56b2279cc869962feac5153b6ba7001ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedf78e56b2279cc869962feac5153b6ba7001ed", "html_url": "https://github.com/rust-lang/rust/commit/aedf78e56b2279cc869962feac5153b6ba7001ed"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "ab794fd4d274fef453efe7969b94f0319045bd3f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=709a78226b12025385976bdafa6d7793ec8a4a5b", "patch": "@@ -28,10 +28,7 @@ use super::command::Command;\n use super::linker::{self, Linker};\n use super::metadata::{create_rmeta_file, MetadataPosition};\n use super::rpath::{self, RPathConfig};\n-use crate::{\n-    looks_like_rust_object_file, CodegenResults, CompiledModule, CrateInfo, NativeLib,\n-    METADATA_FILENAME,\n-};\n+use crate::{looks_like_rust_object_file, CodegenResults, CompiledModule, CrateInfo, NativeLib};\n \n use cc::windows_registry;\n use regex::Regex;\n@@ -237,23 +234,7 @@ pub fn each_linked_rlib(\n     Ok(())\n }\n \n-/// We use a temp directory here to avoid races between concurrent rustc processes,\n-/// such as builds in the same directory using the same filename for metadata while\n-/// building an `.rlib` (stomping over one another), or writing an `.rmeta` into a\n-/// directory being searched for `extern crate` (observing an incomplete file).\n-/// The returned path is the temporary file containing the complete metadata.\n-pub fn emit_metadata(sess: &Session, metadata: &[u8], tmpdir: &MaybeTempDir) -> PathBuf {\n-    let out_filename = tmpdir.as_ref().join(METADATA_FILENAME);\n-    let result = fs::write(&out_filename, metadata);\n-\n-    if let Err(e) = result {\n-        sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n-    }\n-\n-    out_filename\n-}\n-\n-/// Create an 'rlib'.\n+/// Create an 'arlib'.\n ///\n /// An rlib in its current incarnation is essentially a renamed .a file. The rlib primarily contains\n /// the object file of the crate, but it also contains all of the object files from native\n@@ -276,7 +257,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n         RlibFlavor::Normal => {\n             let (metadata, metadata_position) =\n                 create_rmeta_file(sess, codegen_results.metadata.raw_data());\n-            let metadata = emit_metadata(sess, &metadata, tmpdir);\n+            let metadata = rustc_metadata::fs::emit_metadata(sess, &metadata, tmpdir);\n             match metadata_position {\n                 MetadataPosition::First => {\n                     // Most of the time metadata in rlib files is wrapped in a \"dummy\" object\n@@ -502,7 +483,7 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n \n         ab.add_archive(path, move |fname: &str| {\n             // Ignore metadata files, no matter the name.\n-            if fname == METADATA_FILENAME {\n+            if fname == rustc_metadata::fs::METADATA_FILENAME {\n                 return true;\n             }\n \n@@ -2474,7 +2455,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n \n             let mut archive = <B as ArchiveBuilder>::new(sess, &dst);\n             if let Err(e) = archive.add_archive(cratepath, move |f| {\n-                if f == METADATA_FILENAME {\n+                if f == rustc_metadata::fs::METADATA_FILENAME {\n                     return true;\n                 }\n "}, {"sha": "0302c28815ab81a701da7c588b6669c96ddbed25", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=709a78226b12025385976bdafa6d7793ec8a4a5b", "patch": "@@ -16,14 +16,13 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::rustc_erase_owner;\n use rustc_data_structures::sync::MetadataRef;\n+use rustc_metadata::fs::METADATA_FILENAME;\n use rustc_metadata::EncodedMetadata;\n use rustc_session::cstore::MetadataLoader;\n use rustc_session::Session;\n use rustc_target::abi::Endian;\n use rustc_target::spec::{RelocModel, Target};\n \n-use crate::METADATA_FILENAME;\n-\n /// The default metadata loader. This is used by cg_llvm and cg_clif.\n ///\n /// # Metadata location"}, {"sha": "1802eedf193aa321a7c22b9690becc90349d3b2d", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=709a78226b12025385976bdafa6d7793ec8a4a5b", "patch": "@@ -64,9 +64,6 @@ pub struct ModuleCodegen<M> {\n     pub kind: ModuleKind,\n }\n \n-// FIXME(eddyb) maybe include the crate name in this?\n-pub const METADATA_FILENAME: &str = \"lib.rmeta\";\n-\n impl<M> ModuleCodegen<M> {\n     pub fn into_compiled_module(\n         self,"}, {"sha": "6d00ce33d8f4690849cf3b1f900e851fc806c412", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=709a78226b12025385976bdafa6d7793ec8a4a5b", "patch": "@@ -5,7 +5,6 @@ use crate::util;\n use ast::CRATE_NODE_ID;\n use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n-use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n@@ -17,6 +16,7 @@ use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n use rustc_lint::{EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n+use rustc_metadata::fs::emit_metadata;\n use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;"}, {"sha": "f57ace6f28a81e90792afb8fb5c3eb7b37d5fadb", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=709a78226b12025385976bdafa6d7793ec8a4a5b", "patch": "@@ -0,0 +1,24 @@\n+use rustc_data_structures::temp_dir::MaybeTempDir;\n+use rustc_session::Session;\n+\n+use std::fs;\n+use std::path::PathBuf;\n+\n+// FIXME(eddyb) maybe include the crate name in this?\n+pub const METADATA_FILENAME: &str = \"lib.rmeta\";\n+\n+/// We use a temp directory here to avoid races between concurrent rustc processes,\n+/// such as builds in the same directory using the same filename for metadata while\n+/// building an `.rlib` (stomping over one another), or writing an `.rmeta` into a\n+/// directory being searched for `extern crate` (observing an incomplete file).\n+/// The returned path is the temporary file containing the complete metadata.\n+pub fn emit_metadata(sess: &Session, metadata: &[u8], tmpdir: &MaybeTempDir) -> PathBuf {\n+    let out_filename = tmpdir.as_ref().join(METADATA_FILENAME);\n+    let result = fs::write(&out_filename, metadata);\n+\n+    if let Err(e) = result {\n+        sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n+    }\n+\n+    out_filename\n+}"}, {"sha": "6440f3e390cf1fde772fe34a0b50f79eef8faf20", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709a78226b12025385976bdafa6d7793ec8a4a5b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=709a78226b12025385976bdafa6d7793ec8a4a5b", "patch": "@@ -34,6 +34,8 @@ mod native_libs;\n mod rmeta;\n \n pub mod creader;\n+pub mod fs;\n pub mod locator;\n \n+pub use fs::{emit_metadata, METADATA_FILENAME};\n pub use rmeta::{encode_metadata, EncodedMetadata, METADATA_HEADER};"}]}