{"sha": "df126589b91c7b60e2426b46c5a8b14d7d04f667", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMTI2NTg5YjkxYzdiNjBlMjQyNmI0NmM1YThiMTRkN2QwNGY2Njc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-27T00:43:55Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-03-01T12:03:44Z"}, "message": "Remove int/uint from libstd/lib.rs", "tree": {"sha": "2e06274ef3e2e1e81caef4de5666242698199fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e06274ef3e2e1e81caef4de5666242698199fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df126589b91c7b60e2426b46c5a8b14d7d04f667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df126589b91c7b60e2426b46c5a8b14d7d04f667", "html_url": "https://github.com/rust-lang/rust/commit/df126589b91c7b60e2426b46c5a8b14d7d04f667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df126589b91c7b60e2426b46c5a8b14d7d04f667/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74d49c804c3c75172ea06efb83e1a863929da52", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74d49c804c3c75172ea06efb83e1a863929da52", "html_url": "https://github.com/rust-lang/rust/commit/c74d49c804c3c75172ea06efb83e1a863929da52"}], "stats": {"total": 104, "additions": 39, "deletions": 65}, "files": [{"sha": "abf88583c03ffac03f1a6a40a0c9c51a86e20060", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -12,7 +12,7 @@ use core::iter::*;\n use core::iter::order::*;\n use core::iter::MinMaxResult::*;\n use core::num::SignedInt;\n-use core::uint;\n+use core::usize;\n use core::cmp;\n \n use test::Bencher;\n@@ -292,7 +292,7 @@ fn test_unfoldr() {\n fn test_cycle() {\n     let cycle_len = 3;\n     let it = count(0, 1).take(cycle_len).cycle();\n-    assert_eq!(it.size_hint(), (uint::MAX, None));\n+    assert_eq!(it.size_hint(), (usize::MAX, None));\n     for (i, x) in it.take(100).enumerate() {\n         assert_eq!(i % cycle_len, x);\n     }\n@@ -365,19 +365,19 @@ fn test_iterator_size_hint() {\n     let v2 = &[10, 11, 12];\n     let vi = v.iter();\n \n-    assert_eq!(c.size_hint(), (uint::MAX, None));\n+    assert_eq!(c.size_hint(), (usize::MAX, None));\n     assert_eq!(vi.clone().size_hint(), (10, Some(10)));\n \n     assert_eq!(c.clone().take(5).size_hint(), (5, Some(5)));\n     assert_eq!(c.clone().skip(5).size_hint().1, None);\n     assert_eq!(c.clone().take_while(|_| false).size_hint(), (0, None));\n     assert_eq!(c.clone().skip_while(|_| false).size_hint(), (0, None));\n-    assert_eq!(c.clone().enumerate().size_hint(), (uint::MAX, None));\n-    assert_eq!(c.clone().chain(vi.clone().cloned()).size_hint(), (uint::MAX, None));\n+    assert_eq!(c.clone().enumerate().size_hint(), (usize::MAX, None));\n+    assert_eq!(c.clone().chain(vi.clone().cloned()).size_hint(), (usize::MAX, None));\n     assert_eq!(c.clone().zip(vi.clone()).size_hint(), (10, Some(10)));\n     assert_eq!(c.clone().scan(0, |_,_| Some(0)).size_hint(), (0, None));\n     assert_eq!(c.clone().filter(|_| false).size_hint(), (0, None));\n-    assert_eq!(c.clone().map(|_| 0).size_hint(), (uint::MAX, None));\n+    assert_eq!(c.clone().map(|_| 0).size_hint(), (usize::MAX, None));\n     assert_eq!(c.filter_map(|_| Some(0)).size_hint(), (0, None));\n \n     assert_eq!(vi.clone().take(5).size_hint(), (5, Some(5)));\n@@ -753,7 +753,7 @@ fn test_range() {\n \n     assert_eq!((0..100).size_hint(), (100, Some(100)));\n     // this test is only meaningful when sizeof uint < sizeof u64\n-    assert_eq!((uint::MAX - 1..uint::MAX).size_hint(), (1, Some(1)));\n+    assert_eq!((usize::MAX - 1..usize::MAX).size_hint(), (1, Some(1)));\n     assert_eq!((-10..-1).size_hint(), (9, Some(9)));\n     assert_eq!((-1..-10).size_hint(), (0, Some(0)));\n }"}, {"sha": "be8dfd02ee196bf25ea73f4603e49fc1e0b4ad01", "filename": "src/libcoretest/num/int.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c74d49c804c3c75172ea06efb83e1a863929da52/src%2Flibcoretest%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74d49c804c3c75172ea06efb83e1a863929da52/src%2Flibcoretest%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint.rs?ref=c74d49c804c3c75172ea06efb83e1a863929da52", "patch": "@@ -1,11 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-int_module!(int, int);"}, {"sha": "5ff5cf428ab1c2691340be00fcc8f18c5b31ee06", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -12,7 +12,7 @@ macro_rules! int_module { ($T:ty, $T_i:ident) => (\n #[cfg(test)]\n mod tests {\n     use core::$T_i::*;\n-    use core::int;\n+    use core::isize;\n     use core::num::{FromStrRadix, Int, SignedInt};\n     use core::ops::{Shl, Shr, Not, BitXor, BitAnd, BitOr};\n     use num;\n@@ -153,7 +153,7 @@ mod tests {\n     fn test_signed_checked_div() {\n         assert!(10.checked_div(2) == Some(5));\n         assert!(5.checked_div(0) == None);\n-        assert!(int::MIN.checked_div(-1) == None);\n+        assert!(isize::MIN.checked_div(-1) == None);\n     }\n \n     #[test]"}, {"sha": "1cd1989c11dc3e5088cf210b06ff74965677d0e0", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -21,7 +21,6 @@ mod i8;\n mod i16;\n mod i32;\n mod i64;\n-mod int;\n \n #[macro_use]\n mod uint_macros;\n@@ -30,7 +29,6 @@ mod u8;\n mod u16;\n mod u32;\n mod u64;\n-mod uint;\n \n /// Helper function for testing numeric operations\n pub fn test_num<T>(ten: T, two: T) where"}, {"sha": "395e55cf255d248bce8a47b2f69ee2a132d94657", "filename": "src/libcoretest/num/uint.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c74d49c804c3c75172ea06efb83e1a863929da52/src%2Flibcoretest%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74d49c804c3c75172ea06efb83e1a863929da52/src%2Flibcoretest%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint.rs?ref=c74d49c804c3c75172ea06efb83e1a863929da52", "patch": "@@ -1,11 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-uint_module!(uint, uint);"}, {"sha": "6240b0e6afdd50861f59ced7b8a752cd8dd626b9", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -963,7 +963,7 @@ fn test_split_within() {\n         \"little lamb\".to_string(),\n         \"Little lamb\".to_string()\n     ]);\n-    t(\"\\nMary had a little lamb\\nLittle lamb\\n\", ::std::uint::MAX,\n+    t(\"\\nMary had a little lamb\\nLittle lamb\\n\", ::std::usize::MAX,\n         &[\"Mary had a little lamb\\nLittle lamb\".to_string()]);\n }\n "}, {"sha": "5cb034667cc64ad9ffa982e4f753f37f63b8edc2", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -51,8 +51,8 @@\n //! enclosing function.  On the way down the tree, it identifies those AST\n //! nodes and variable IDs that will be needed for the liveness analysis\n //! and assigns them contiguous IDs.  The liveness id for an AST node is\n-//! called a `live_node` (it's a newtype'd uint) and the id for a variable\n-//! is called a `variable` (another newtype'd uint).\n+//! called a `live_node` (it's a newtype'd usize) and the id for a variable\n+//! is called a `variable` (another newtype'd usize).\n //!\n //! On the way back up the tree, as we are about to exit from a function\n //! declaration we allocate a `liveness` instance.  Now that we know\n@@ -118,7 +118,7 @@ use middle::ty::ClosureTyper;\n use lint;\n use util::nodemap::NodeMap;\n \n-use std::{fmt, old_io, uint};\n+use std::{fmt, old_io, usize};\n use std::rc::Rc;\n use std::iter::repeat;\n use syntax::ast::{self, NodeId, Expr};\n@@ -138,17 +138,17 @@ enum LoopKind<'a> {\n }\n \n #[derive(Copy, PartialEq)]\n-struct Variable(uint);\n+struct Variable(usize);\n \n #[derive(Copy, PartialEq)]\n-struct LiveNode(uint);\n+struct LiveNode(usize);\n \n impl Variable {\n-    fn get(&self) -> uint { let Variable(v) = *self; v }\n+    fn get(&self) -> usize { let Variable(v) = *self; v }\n }\n \n impl LiveNode {\n-    fn get(&self) -> uint { let LiveNode(v) = *self; v }\n+    fn get(&self) -> usize { let LiveNode(v) = *self; v }\n }\n \n impl Clone for LiveNode {\n@@ -232,11 +232,11 @@ impl fmt::Debug for Variable {\n \n impl LiveNode {\n     fn is_valid(&self) -> bool {\n-        self.get() != uint::MAX\n+        self.get() != usize::MAX\n     }\n }\n \n-fn invalid_node() -> LiveNode { LiveNode(uint::MAX) }\n+fn invalid_node() -> LiveNode { LiveNode(usize::MAX) }\n \n struct CaptureInfo {\n     ln: LiveNode,\n@@ -260,8 +260,8 @@ enum VarKind {\n struct IrMaps<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n \n-    num_live_nodes: uint,\n-    num_vars: uint,\n+    num_live_nodes: usize,\n+    num_vars: usize,\n     live_node_map: NodeMap<LiveNode>,\n     variable_map: NodeMap<Variable>,\n     capture_info_map: NodeMap<Rc<Vec<CaptureInfo>>>,\n@@ -540,9 +540,9 @@ struct Specials {\n     clean_exit_var: Variable\n }\n \n-static ACC_READ: uint = 1;\n-static ACC_WRITE: uint = 2;\n-static ACC_USE: uint = 4;\n+static ACC_READ: u32 = 1;\n+static ACC_WRITE: u32 = 2;\n+static ACC_USE: u32 = 4;\n \n struct Liveness<'a, 'tcx: 'a> {\n     ir: &'a mut IrMaps<'a, 'tcx>,\n@@ -631,7 +631,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         succ\n     }\n \n-    fn idx(&self, ln: LiveNode, var: Variable) -> uint {\n+    fn idx(&self, ln: LiveNode, var: Variable) -> usize {\n         ln.get() * self.ir.num_vars + var.get()\n     }\n \n@@ -670,7 +670,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn indices2<F>(&mut self, ln: LiveNode, succ_ln: LiveNode, mut op: F) where\n-        F: FnMut(&mut Liveness<'a, 'tcx>, uint, uint),\n+        F: FnMut(&mut Liveness<'a, 'tcx>, usize, usize),\n     {\n         let node_base_idx = self.idx(ln, Variable(0));\n         let succ_base_idx = self.idx(succ_ln, Variable(0));\n@@ -684,7 +684,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                      ln: LiveNode,\n                      mut test: F)\n                      -> old_io::IoResult<()> where\n-        F: FnMut(uint) -> LiveNode,\n+        F: FnMut(usize) -> LiveNode,\n     {\n         let node_base_idx = self.idx(ln, Variable(0));\n         for var_idx in 0..self.ir.num_vars {\n@@ -807,7 +807,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     // Either read, write, or both depending on the acc bitset\n-    fn acc(&mut self, ln: LiveNode, var: Variable, acc: uint) {\n+    fn acc(&mut self, ln: LiveNode, var: Variable, acc: u32) {\n         debug!(\"{:?} accesses[{:x}] {:?}: {}\",\n                ln, acc, var, self.ln_str(ln));\n \n@@ -1283,7 +1283,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     // see comment on propagate_through_lvalue()\n-    fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: uint)\n+    fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: u32)\n                     -> LiveNode {\n         match expr.node {\n           ast::ExprPath(..) => {\n@@ -1298,7 +1298,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         }\n     }\n \n-    fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: uint)\n+    fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: u32)\n                    -> LiveNode {\n         match self.ir.tcx.def_map.borrow()[expr.id].full_def() {\n           DefLocal(nid) => {"}, {"sha": "2ab6f5b0f952178b3637b9998fdb3d290b207c55", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -789,7 +789,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<uint> {\n \n         // Irrefutable columns always go first, they'd only be duplicated in the branches.\n         if total_score == 0 {\n-            std::uint::MAX\n+            std::usize::MAX\n         } else {\n             total_score\n         }"}, {"sha": "7957bc35b76b5c3e90507df79c6b624e9b2c6326", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -221,14 +221,12 @@ mod int_macros;\n mod uint_macros;\n \n #[path = \"num/isize.rs\"]  pub mod isize;\n-pub use isize as int;\n #[path = \"num/i8.rs\"]   pub mod i8;\n #[path = \"num/i16.rs\"]  pub mod i16;\n #[path = \"num/i32.rs\"]  pub mod i32;\n #[path = \"num/i64.rs\"]  pub mod i64;\n \n #[path = \"num/usize.rs\"] pub mod usize;\n-pub use usize as uint;\n #[path = \"num/u8.rs\"]   pub mod u8;\n #[path = \"num/u16.rs\"]  pub mod u16;\n #[path = \"num/u32.rs\"]  pub mod u32;"}, {"sha": "9c2e8d278ab0b8310db1190bd21c2ee27c824730", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::{int, i8, i16, i32, i64};\n+use std::{isize, i8, i16, i32, i64};\n use std::thread;\n \n fn main() {\n-    assert!(thread::spawn(move|| { int::MIN / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n@@ -32,7 +32,7 @@ fn main() {\n     //~^ ERROR attempted to divide by zero in a constant expression\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n-    assert!(thread::spawn(move|| { int::MIN % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression"}, {"sha": "5f3744712ccb4c2b5b2049b70533ec4bdfe8e9c7", "filename": "src/test/compile-fail/unnecessary-private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    pub use std::uint; //~ ERROR: visibility has no effect\n+    pub use std::usize; //~ ERROR: visibility has no effect\n     pub struct A; //~ ERROR: visibility has no effect\n     pub enum B {} //~ ERROR: visibility has no effect\n     pub trait C { //~ ERROR: visibility has no effect"}, {"sha": "c15c4b83828a34bff88dde7f2c43eea5a36535b8", "filename": "src/test/run-fail/bounds-check-no-overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbounds-check-no-overflow.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -10,10 +10,10 @@\n \n // error-pattern:index out of bounds: the len is 3 but the index is\n \n-use std::uint;\n+use std::usize;\n use std::mem::size_of;\n \n fn main() {\n     let xs = [1, 2, 3];\n-    xs[uint::MAX / size_of::<int>() + 1];\n+    xs[usize::MAX / size_of::<isize>() + 1];\n }"}, {"sha": "2c7c0875227d9baeddb83028f6bf45cf2c6290d8", "filename": "src/test/run-fail/hashmap-capacity-overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Frun-fail%2Fhashmap-capacity-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df126589b91c7b60e2426b46c5a8b14d7d04f667/src%2Ftest%2Frun-fail%2Fhashmap-capacity-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fhashmap-capacity-overflow.rs?ref=df126589b91c7b60e2426b46c5a8b14d7d04f667", "patch": "@@ -11,11 +11,11 @@\n // error-pattern:capacity overflow\n \n use std::collections::hash_map::HashMap;\n-use std::uint;\n+use std::usize;\n use std::mem::size_of;\n \n fn main() {\n-    let threshold = uint::MAX / size_of::<(u64, u64, u64)>();\n+    let threshold = usize::MAX / size_of::<(u64, u64, u64)>();\n     let mut h = HashMap::<u64, u64>::with_capacity(threshold + 100);\n     h.insert(0, 0);\n }"}]}