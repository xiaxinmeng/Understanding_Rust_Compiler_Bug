{"sha": "63625b03974bdb41f7629045ebfa239328fdcf02", "node_id": "C_kwDOAAsO6NoAKDYzNjI1YjAzOTc0YmRiNDFmNzYyOTA0NWViZmEyMzkzMjhmZGNmMDI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-03T12:46:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-06T15:43:25Z"}, "message": "adjust for better provenance control", "tree": {"sha": "f68db0f776b1b3c8aa8062273a8fb56250d0a2f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f68db0f776b1b3c8aa8062273a8fb56250d0a2f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63625b03974bdb41f7629045ebfa239328fdcf02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63625b03974bdb41f7629045ebfa239328fdcf02", "html_url": "https://github.com/rust-lang/rust/commit/63625b03974bdb41f7629045ebfa239328fdcf02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63625b03974bdb41f7629045ebfa239328fdcf02/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8631a737e37c26210485bfb838becd79b99268", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8631a737e37c26210485bfb838becd79b99268", "html_url": "https://github.com/rust-lang/rust/commit/fc8631a737e37c26210485bfb838becd79b99268"}], "stats": {"total": 169, "additions": 103, "deletions": 66}, "files": [{"sha": "52f93a6cea9d9e3e5ac9dd79f22cfa75612ba984", "filename": "src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -229,9 +229,16 @@ pub fn report_error<'tcx, 'mir>(\n             };\n             #[rustfmt::skip]\n             let helps = match e.kind() {\n-                Unsupported(UnsupportedOpInfo::ThreadLocalStatic(_) | UnsupportedOpInfo::ReadExternStatic(_)) =>\n+                Unsupported(\n+                    UnsupportedOpInfo::ThreadLocalStatic(_) |\n+                    UnsupportedOpInfo::ReadExternStatic(_)\n+                ) =>\n                     panic!(\"Error should never be raised by Miri: {:?}\", e.kind()),\n-                Unsupported(_) =>\n+                Unsupported(\n+                    UnsupportedOpInfo::Unsupported(_) |\n+                    UnsupportedOpInfo::PartialPointerOverwrite(_) |\n+                    UnsupportedOpInfo::ReadPointerAsBytes\n+                ) =>\n                     vec![(None, format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"))],\n                 UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })\n                     if ecx.machine.check_alignment == AlignmentCheck::Symbolic\n@@ -245,7 +252,8 @@ pub fn report_error<'tcx, 'mir>(\n                         (None, format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\")),\n                         (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n                     ],\n-                _ => vec![],\n+                InvalidProgram(_) | ResourceExhaustion(_) | MachineStop(_) =>\n+                    vec![],\n             };\n             (Some(title), helps)\n         }"}, {"sha": "4c79633c72deac3821f0faa3350e7c83dc433022", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -681,7 +681,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n             let alloc = this.get_ptr_alloc(ptr.offset(len, this)?, size1, Align::ONE)?.unwrap(); // not a ZST, so we will get a result\n-            let byte = alloc.read_scalar(alloc_range(Size::ZERO, size1))?.to_u8()?;\n+            let byte = alloc.read_integer(Size::ZERO, size1)?.to_u8()?;\n             if byte == 0 {\n                 break;\n             } else {\n@@ -703,7 +703,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n             let alloc = this.get_ptr_alloc(ptr, size2, align2)?.unwrap(); // not a ZST, so we will get a result\n-            let wchar = alloc.read_scalar(alloc_range(Size::ZERO, size2))?.to_u16()?;\n+            let wchar = alloc.read_integer(Size::ZERO, size2)?.to_u16()?;\n             if wchar == 0 {\n                 break;\n             } else {"}, {"sha": "20fbcd1de78a84371c57d272fd406641b7f30a9d", "filename": "tests/fail/branchless-select-i128-pointer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -9,10 +9,10 @@ fn main() {\n     for &my_bool in &[true, false] {\n         let mask = -(my_bool as TwoPtrs); // false -> 0, true -> -1 aka !0\n         // This is branchless code to select one or the other pointer.\n-        // For now, Miri brafs on it, but if this code ever passes we better make sure it behaves correctly.\n+        // However, it drops provenance when transmuting to TwoPtrs, so this is UB.\n         let val = unsafe {\n-            transmute::<_, &str>(\n-                !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"), //~ERROR encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+            transmute::<_, &str>( //~ERROR type validation failed: encountered a dangling reference\n+                !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"),\n             )\n         };\n         println!(\"{}\", val);"}, {"sha": "f37dcf955e331afdd1b6b0e02b62dad65adb72f9", "filename": "tests/fail/branchless-select-i128-pointer.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -1,8 +1,10 @@\n-error: Undefined Behavior: type validation failed: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+error: Undefined Behavior: type validation failed: encountered a dangling reference (address $HEX is unallocated)\n   --> $DIR/branchless-select-i128-pointer.rs:LL:CC\n    |\n-LL |                 !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+LL | /             transmute::<_, &str>(\n+LL | |                 !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"),\n+LL | |             )\n+   | |_____________^ type validation failed: encountered a dangling reference (address $HEX is unallocated)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "1bbb33aa2bbd785db7177057aa5617108d90a810", "filename": "tests/fail/pointer_partial_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fpointer_partial_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fpointer_partial_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_overwrite.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n // Test what happens when we overwrite parts of a pointer.\n-// Also see <https://github.com/rust-lang/rust/issues/87184>.\n+// Also see <https://github.com/rust-lang/miri/issues/2181>.\n \n fn main() {\n     let mut p = &42;"}, {"sha": "a4a5071f5da09a8ae784449baee700062e902b15", "filename": "tests/fail/pointer_partial_read.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fpointer_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fpointer_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_read.rs?ref=fc8631a737e37c26210485bfb838becd79b99268", "patch": "@@ -1,9 +0,0 @@\n-// Test what happens when we read parts of a pointer.\n-// Related to <https://github.com/rust-lang/rust/issues/69488>.\n-fn main() {\n-    let x = 13;\n-    let y = &x;\n-    let z = &y as *const &i32 as *const u8;\n-    // the deref fails, because we are reading only a part of the pointer\n-    let _val = unsafe { *z }; //~ ERROR unable to turn pointer into raw bytes\n-}"}, {"sha": "dc35f7e109a54b9b8cb65620ca8cef2d0d3732a9", "filename": "tests/fail/pointer_partial_read.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fpointer_partial_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fpointer_partial_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_read.stderr?ref=fc8631a737e37c26210485bfb838becd79b99268", "patch": "@@ -1,14 +0,0 @@\n-error: unsupported operation: unable to turn pointer into raw bytes\n-  --> $DIR/pointer_partial_read.rs:LL:CC\n-   |\n-LL |     let _val = unsafe { *z };\n-   |                         ^^ unable to turn pointer into raw bytes\n-   |\n-   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n-   = note: inside `main` at $DIR/pointer_partial_read.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "dbfc5732ed3b72857d14efbb701072af27e52626", "filename": "tests/fail/provenance/permissive_provenance_transmute.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Zmiri-permissive-provenance -Zmiri-disable-stacked-borrows\n+#![feature(strict_provenance)]\n+\n+use std::mem;\n+\n+// This is the example from\n+// <https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431>.\n+\n+unsafe fn deref(left: *const u8, right: *const u8) {\n+    let left_int: usize = mem::transmute(left);\n+    let right_int: usize = mem::transmute(right);\n+    if left_int == right_int {\n+        // The compiler is allowed to replace `left_int` by `right_int` here...\n+        let left_ptr: *const u8 = mem::transmute(left_int);\n+        // ...which however means here it could be dereferencing the wrong pointer.\n+        let _val = *left_ptr; //~ERROR dereferencing pointer failed\n+    }\n+}\n+\n+fn main() {\n+    let ptr1 = &0u8 as *const u8;\n+    let ptr2 = &1u8 as *const u8;\n+    unsafe {\n+        // Two pointers with the same address but different provenance.\n+        deref(ptr1, ptr2.with_addr(ptr1.addr()));\n+    }\n+}"}, {"sha": "12f3562011a81db708631f5defe29c86f9397968", "filename": "tests/fail/provenance/permissive_provenance_transmute.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n+  --> $DIR/permissive_provenance_transmute.rs:LL:CC\n+   |\n+LL |         let _val = *left_ptr;\n+   |                    ^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `deref` at $DIR/permissive_provenance_transmute.rs:LL:CC\n+note: inside `main` at $DIR/permissive_provenance_transmute.rs:LL:CC\n+  --> $DIR/permissive_provenance_transmute.rs:LL:CC\n+   |\n+LL |         deref(ptr1, ptr2.with_addr(ptr1.addr()));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "12a141e9ddfee5027093f931927e3da9c0308700", "filename": "tests/fail/provenance/strict_provenance_transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -7,13 +7,13 @@ use std::mem;\n // <https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431>.\n \n unsafe fn deref(left: *const u8, right: *const u8) {\n-    let left_int: usize = mem::transmute(left); //~ERROR expected plain (non-pointer) bytes\n+    let left_int: usize = mem::transmute(left);\n     let right_int: usize = mem::transmute(right);\n     if left_int == right_int {\n         // The compiler is allowed to replace `left_int` by `right_int` here...\n         let left_ptr: *const u8 = mem::transmute(left_int);\n         // ...which however means here it could be dereferencing the wrong pointer.\n-        let _val = *left_ptr;\n+        let _val = *left_ptr; //~ERROR dereferencing pointer failed\n     }\n }\n "}, {"sha": "8df94d50bbac14b7174bec2bc5d2832db58233c6", "filename": "tests/fail/provenance/strict_provenance_transmute.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.stderr?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n+error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n   --> $DIR/strict_provenance_transmute.rs:LL:CC\n    |\n-LL |     let left_int: usize = mem::transmute(left);\n-   |                           ^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n+LL |         let _val = *left_ptr;\n+   |                    ^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "22fb4c6fdcc938ad0f72c45bef3635e3417cc1b7", "filename": "tests/fail/transmute_fat1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -1,5 +1,4 @@\n-// This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+// error-pattern: type validation failed: encountered a pointer\n \n fn main() {\n     #[cfg(target_pointer_width=\"64\")]\n@@ -10,5 +9,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], [u8; 8]>(&[1u8])\n     };\n-    let _val = bad[0] + bad[bad.len()-1]; //~ ERROR unable to turn pointer into raw bytes\n+    let _val = bad[0] + bad[bad.len()-1];\n }"}, {"sha": "ea83dd442d2b38d225ad3ee5eca45d6a2b0ac242", "filename": "tests/fail/transmute_fat1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -1,10 +1,11 @@\n-error: unsupported operation: unable to turn pointer into raw bytes\n+error: Undefined Behavior: type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n   --> $DIR/transmute_fat1.rs:LL:CC\n    |\n-LL |     let _val = bad[0] + bad[bad.len()-1];\n-   |                ^^^^^^ unable to turn pointer into raw bytes\n+LL |         std::mem::transmute::<&[u8], [u8; 16]>(&[1u8])\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n-   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n    = note: inside `main` at $DIR/transmute_fat1.rs:LL:CC\n "}, {"sha": "b23ccbbb1b033938d157b50a97672f34ff493910", "filename": "tests/fail/validity/ptr_integer_transmute.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.rs?ref=fc8631a737e37c26210485bfb838becd79b99268", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let r = &mut 42;\n-    let _i: usize = unsafe { std::mem::transmute(r) }; //~ ERROR expected plain (non-pointer) bytes\n-}"}, {"sha": "cad53d71f4d9d377d8aedee9bdf121718abec0f6", "filename": "tests/fail/validity/ptr_integer_transmute.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc8631a737e37c26210485bfb838becd79b99268/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.stderr?ref=fc8631a737e37c26210485bfb838becd79b99268", "patch": "@@ -1,15 +0,0 @@\n-error: Undefined Behavior: type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n-  --> $DIR/ptr_integer_transmute.rs:LL:CC\n-   |\n-LL |     let _i: usize = unsafe { std::mem::transmute(r) };\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n-   |\n-   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n-   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n-   = note: inside `main` at $DIR/ptr_integer_transmute.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "e025cf921313adb9a7ad0440122b0a1aa9891687", "filename": "tests/pass/ptr_int_from_exposed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Fpass%2Fptr_int_from_exposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Fpass%2Fptr_int_from_exposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_int_from_exposed.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "previous_filename": "tests/pass/ptr_int_permissive_provenance.rs"}, {"sha": "ba50480c5399ac1355490b2976f48c15e91a710f", "filename": "tests/pass/ptr_int_transmute.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Fpass%2Fptr_int_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63625b03974bdb41f7629045ebfa239328fdcf02/tests%2Fpass%2Fptr_int_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_int_transmute.rs?ref=63625b03974bdb41f7629045ebfa239328fdcf02", "patch": "@@ -0,0 +1,22 @@\n+// Test what happens when we read parts of a pointer.\n+// Related to <https://github.com/rust-lang/rust/issues/69488>.\n+fn ptr_partial_read() {\n+    let x = 13;\n+    let y = &x;\n+    let z = &y as *const &i32 as *const u8;\n+\n+    // This just strips provenance, but should work fine otherwise.\n+    let _val = unsafe { *z };\n+}\n+\n+fn transmute_strip_provenance() {\n+    let r = &mut 42;\n+    let addr = r as *mut _ as usize;\n+    let i: usize = unsafe { std::mem::transmute(r) };\n+    assert_eq!(i, addr);\n+}\n+\n+fn main() {\n+    ptr_partial_read();\n+    transmute_strip_provenance();\n+}"}]}