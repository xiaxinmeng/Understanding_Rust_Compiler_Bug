{"sha": "bf85572f59f5b70d73869c3902964c5ca47668df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODU1NzJmNTlmNWI3MGQ3Mzg2OWMzOTAyOTY0YzVjYTQ3NjY4ZGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-18T08:58:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-18T08:58:42Z"}, "message": "Extend Termination::report return value as necessary", "tree": {"sha": "4df5a1a65d3984ca17e39c0a5420cf76ba2f80f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df5a1a65d3984ca17e39c0a5420cf76ba2f80f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf85572f59f5b70d73869c3902964c5ca47668df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf85572f59f5b70d73869c3902964c5ca47668df", "html_url": "https://github.com/rust-lang/rust/commit/bf85572f59f5b70d73869c3902964c5ca47668df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf85572f59f5b70d73869c3902964c5ca47668df/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e01de0f58df96c09d6b9da53e913af6bdb0142c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01de0f58df96c09d6b9da53e913af6bdb0142c0", "html_url": "https://github.com/rust-lang/rust/commit/e01de0f58df96c09d6b9da53e913af6bdb0142c0"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "713cf4ebdc00f66051c42b0d5d07c799326344ee", "filename": "src/main_shim.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bf85572f59f5b70d73869c3902964c5ca47668df/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf85572f59f5b70d73869c3902964c5ca47668df/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=bf85572f59f5b70d73869c3902964c5ca47668df", "patch": "@@ -113,7 +113,12 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 // FIXME do proper abi handling instead of expecting the pass mode to be identical\n                 // for returns and arguments.\n                 let report_call_inst = bcx.ins().call(report_func_ref, &call_results);\n-                bcx.func.dfg.inst_results(report_call_inst)[0]\n+                let res = bcx.func.dfg.inst_results(report_call_inst)[0];\n+                match m.target_config().pointer_type() {\n+                    types::I32 => res,\n+                    types::I64 => bcx.ins().sextend(types::I64, res),\n+                    _ => unimplemented!(\"16bit systems are not yet supported\"),\n+                }\n             } else if is_main_fn {\n                 let start_def_id = tcx.require_lang_item(LangItem::Start, None);\n                 let start_instance = Instance::resolve("}]}