{"sha": "da6070dbef81c1028ce3e87fd0102b2abbbc181e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNjA3MGRiZWY4MWMxMDI4Y2UzZTg3ZmQwMTAyYjJhYmJiYzE4MWU=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-07-26T01:58:48Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-07-29T10:32:32Z"}, "message": "Add a few more derivings to AST types", "tree": {"sha": "c1791018cd8af26b3df00b11e0b0db6b44cbb06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1791018cd8af26b3df00b11e0b0db6b44cbb06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da6070dbef81c1028ce3e87fd0102b2abbbc181e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da6070dbef81c1028ce3e87fd0102b2abbbc181e", "html_url": "https://github.com/rust-lang/rust/commit/da6070dbef81c1028ce3e87fd0102b2abbbc181e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da6070dbef81c1028ce3e87fd0102b2abbbc181e/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26a39f23ce09b64c9718f3ee6535f7ca4e84c7e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a39f23ce09b64c9718f3ee6535f7ca4e84c7e7", "html_url": "https://github.com/rust-lang/rust/commit/26a39f23ce09b64c9718f3ee6535f7ca4e84c7e7"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "8159aee99d12c5bee1008f62b6aeefb67f6ddcea", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da6070dbef81c1028ce3e87fd0102b2abbbc181e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6070dbef81c1028ce3e87fd0102b2abbbc181e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=da6070dbef81c1028ce3e87fd0102b2abbbc181e", "patch": "@@ -261,7 +261,7 @@ pub struct Crate {\n \n pub type MetaItem = Spanned<MetaItem_>;\n \n-#[deriving(Clone, Encodable, Decodable, Eq, Hash, Show)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MetaItem_ {\n     MetaWord(InternedString),\n     MetaList(InternedString, Vec<Gc<MetaItem>>),\n@@ -423,7 +423,7 @@ pub enum LocalSource {\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Local {\n     pub ty: P<Ty>,\n     pub pat: Gc<Pat>,\n@@ -435,7 +435,7 @@ pub struct Local {\n \n pub type Decl = Spanned<Decl_>;\n \n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Decl_ {\n     /// A local (let) binding:\n     DeclLocal(Gc<Local>),\n@@ -677,7 +677,7 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct TypeField {\n     pub ident: Ident,\n     pub mt: MutTy,\n@@ -1048,7 +1048,7 @@ pub type PathListItem = Spanned<PathListItem_>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n \n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum ViewPath_ {\n \n     /// `quux = foo::bar::baz`\n@@ -1113,7 +1113,7 @@ pub struct Attribute_ {\n /// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n /// If this impl is an ItemImpl, the impl_id is redundant (it could be the\n /// same as the impl's node id).\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash,   Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n@@ -1169,7 +1169,7 @@ impl StructFieldKind {\n     }\n }\n \n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct StructDef {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n@@ -1219,7 +1219,7 @@ pub enum Item_ {\n     ItemMac(Mac),\n }\n \n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1229,7 +1229,7 @@ pub struct ForeignItem {\n     pub vis: Visibility,\n }\n \n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum ForeignItem_ {\n     ForeignItemFn(P<FnDecl>, Generics),\n     ForeignItemStatic(P<Ty>, /* is_mutbl */ bool),\n@@ -1238,7 +1238,7 @@ pub enum ForeignItem_ {\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans.\n-#[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum InlinedItem {\n     IIItem(Gc<Item>),\n     IIMethod(DefId /* impl id */, bool /* is provided */, Gc<Method>),"}]}