{"sha": "10fd19580ed1f2caed28e90893f2f4889760265d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZmQxOTU4MGVkMWYyY2FlZDI4ZTkwODkzZjJmNDg4OTc2MDI2NWQ=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2012-07-04T15:36:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-04T21:23:22Z"}, "message": "When getopts encounters an option that takes an argument, it should treat the remainder of the current option string as the argument if it is non-empty. Fix #2791.", "tree": {"sha": "c4ac948d9d7a043edd616c939e206d7f8f89c0e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ac948d9d7a043edd616c939e206d7f8f89c0e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10fd19580ed1f2caed28e90893f2f4889760265d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10fd19580ed1f2caed28e90893f2f4889760265d", "html_url": "https://github.com/rust-lang/rust/commit/10fd19580ed1f2caed28e90893f2f4889760265d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10fd19580ed1f2caed28e90893f2f4889760265d/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195dd54d61c32ca983b1f81237570e9b0e70abbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/195dd54d61c32ca983b1f81237570e9b0e70abbd", "html_url": "https://github.com/rust-lang/rust/commit/195dd54d61c32ca983b1f81237570e9b0e70abbd"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "6ce9ca6072a545851ebc369588e81b26f90c0574", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/10fd19580ed1f2caed28e90893f2f4889760265d/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fd19580ed1f2caed28e90893f2f4889760265d/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=10fd19580ed1f2caed28e90893f2f4889760265d", "patch": "@@ -220,10 +220,36 @@ fn getopts(args: ~[str], opts: ~[opt]) -> result unsafe {\n                 }\n             } else {\n                 let mut j = 1u;\n+                let mut last_valid_opt_id = option::none;\n                 names = ~[];\n                 while j < curlen {\n                     let range = str::char_range_at(cur, j);\n-                    vec::push(names, short(range.ch));\n+                    let opt = short(range.ch);\n+\n+                    /* In a series of potential options (eg. -aheJ), if we see\n+                       one which takes an argument, we assume all subsequent\n+                       characters make up the argument. This allows options\n+                       such as -L/usr/local/lib/foo to be interpreted correctly\n+                    */\n+                    alt find_opt(opts, opt) {\n+                      some(id) {\n+                        last_valid_opt_id = option::some(id);\n+                      }\n+                      none {\n+                        let arg_follows = option::is_some(last_valid_opt_id) &&\n+                            alt opts[option::get(last_valid_opt_id)].hasarg {\n+                              yes | maybe { true }\n+                              no { false }\n+                            };\n+                        if arg_follows && j + 1 < curlen {\n+                            i_arg = option::some(str::slice(cur, j, curlen));\n+                            break;\n+                        } else {\n+                            last_valid_opt_id = option::none;\n+                        }\n+                      }\n+                    }\n+                    vec::push(names, opt);\n                     j = range.next;\n                 }\n             }\n@@ -857,6 +883,18 @@ mod tests {\n         assert opts_str(match, ~[\"e\", \"encrypt\"]) == \"foo\";\n         assert opts_str(match, ~[\"encrypt\", \"e\"]) == \"foo\";\n     }\n+\n+    #[test]\n+    fn test_nospace() {\n+        let args = ~[\"-Lfoo\"];\n+        let opts = ~[optmulti(\"L\")];\n+        let match = alt getopts(args, opts) {\n+          result::ok(m) { m }\n+          result::err(f) { fail; }\n+        };\n+        assert opts_present(match, ~[\"L\"]);\n+        assert opts_str(match, ~[\"L\"]) == \"foo\";\n+    }\n }\n \n // Local Variables:"}]}