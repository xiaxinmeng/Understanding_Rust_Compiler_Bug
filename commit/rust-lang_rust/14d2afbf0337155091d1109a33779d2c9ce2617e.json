{"sha": "14d2afbf0337155091d1109a33779d2c9ce2617e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDJhZmJmMDMzNzE1NTA5MWQxMTA5YTMzNzc5ZDJjOWNlMjYxN2U=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-02-26T11:54:31Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-02-26T11:54:31Z"}, "message": "Merge pull request #711 from mcarton/hashmap\n\nFix false positive in `FOR_KV_MAP` and `&mut` refs", "tree": {"sha": "d7dde22af5796a4a37fb76f2bcc8b0d49b172562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7dde22af5796a4a37fb76f2bcc8b0d49b172562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d2afbf0337155091d1109a33779d2c9ce2617e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d2afbf0337155091d1109a33779d2c9ce2617e", "html_url": "https://github.com/rust-lang/rust/commit/14d2afbf0337155091d1109a33779d2c9ce2617e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d2afbf0337155091d1109a33779d2c9ce2617e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ffc1868f689d26d24fe48f553f4cd9c84a1415", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ffc1868f689d26d24fe48f553f4cd9c84a1415", "html_url": "https://github.com/rust-lang/rust/commit/b3ffc1868f689d26d24fe48f553f4cd9c84a1415"}, {"sha": "62cbd877281a9d8dd8b4948dd73799319eb16846", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cbd877281a9d8dd8b4948dd73799319eb16846", "html_url": "https://github.com/rust-lang/rust/commit/62cbd877281a9d8dd8b4948dd73799319eb16846"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "3eb013da6d9411093d83ce5cce2cb9df228ee0ac", "filename": "src/loops.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14d2afbf0337155091d1109a33779d2c9ce2617e/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2afbf0337155091d1109a33779d2c9ce2617e/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=14d2afbf0337155091d1109a33779d2c9ce2617e", "patch": "@@ -588,24 +588,23 @@ fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, ex\n     }\n }\n \n-// Check for the FOR_KV_MAP lint.\n+/// Check for the FOR_KV_MAP lint.\n fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n     if let PatKind::Tup(ref pat) = pat.node {\n         if pat.len() == 2 {\n-\n             let (pat_span, kind) = match (&pat[0].node, &pat[1].node) {\n                 (key, _) if pat_is_wild(key, body) => (&pat[1].span, \"values\"),\n                 (_, value) if pat_is_wild(value, body) => (&pat[0].span, \"keys\"),\n                 _ => return,\n             };\n \n-            let ty = walk_ptrs_ty(cx.tcx.expr_ty(arg));\n-            let arg_span = if let ExprAddrOf(_, ref expr) = arg.node {\n-                expr.span\n-            } else {\n-                arg.span\n+            let arg_span = match arg.node {\n+                ExprAddrOf(MutImmutable, ref expr) => expr.span,\n+                ExprAddrOf(MutMutable, _) => return, // for _ in &mut _, there is no {values,keys}_mut method\n+                _ => arg.span,\n             };\n \n+            let ty = walk_ptrs_ty(cx.tcx.expr_ty(arg));\n             if match_type(cx, ty, &HASHMAP_PATH) || match_type(cx, ty, &BTREEMAP_PATH) {\n                 span_lint_and_then(cx,\n                                    FOR_KV_MAP,\n@@ -625,7 +624,7 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Ex\n \n }\n \n-// Return true if the pattern is a `PatWild` or an ident prefixed with '_'.\n+/// Return true if the pattern is a `PatWild` or an ident prefixed with '_'.\n fn pat_is_wild(pat: &PatKind, body: &Expr) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n@@ -845,7 +844,7 @@ enum VarState {\n     DontWarn,\n }\n \n-// Scan a for loop for variables that are incremented exactly once.\n+/// Scan a for loop for variables that are incremented exactly once.\n struct IncrementVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>, // context reference\n     states: HashMap<NodeId, VarState>, // incremented variables\n@@ -897,7 +896,7 @@ impl<'v, 't> Visitor<'v> for IncrementVisitor<'v, 't> {\n     }\n }\n \n-// Check whether a variable is initialized to zero at the start of a loop.\n+/// Check whether a variable is initialized to zero at the start of a loop.\n struct InitializeVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>, // context reference\n     end_expr: &'v Expr, // the for loop. Stop scanning here."}, {"sha": "69ce68b17dbb21869531d889e8dc3dd61eaac887", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14d2afbf0337155091d1109a33779d2c9ce2617e/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d2afbf0337155091d1109a33779d2c9ce2617e/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=14d2afbf0337155091d1109a33779d2c9ce2617e", "patch": "@@ -311,6 +311,13 @@ fn main() {\n         let _v = v;\n     }\n \n+    let mut m : HashMap<u64, u64> = HashMap::new();\n+    for (_, v) in &mut m {\n+        // Ok, there is no values_mut method or equivalent\n+        let _v = v;\n+    }\n+\n+\n     let rm = &m;\n     for (k, _value) in rm {\n         //~^ you seem to want to iterate on a map's keys"}]}