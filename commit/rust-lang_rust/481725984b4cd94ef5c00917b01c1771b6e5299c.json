{"sha": "481725984b4cd94ef5c00917b01c1771b6e5299c", "node_id": "C_kwDOAAsO6NoAKDQ4MTcyNTk4NGI0Y2Q5NGVmNWMwMDkxN2IwMWMxNzcxYjZlNTI5OWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T15:11:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-16T15:11:28Z"}, "message": "Auto merge of #106853 - TimNN:undo-remap, r=oli-obk\n\nHeuristically undo path prefix mappings.\n\nBecause the compiler produces better diagnostics if it can find the source of (potentially remapped) dependencies.\n\nThe new test fails without the other changes in this PR. Let me know if you have better suggestions for the test directory. I moved the existing remapping test to be in the same location as the new one.\n\nSome more context: I'm exploring running UI tests with remapped paths by default in https://github.com/rust-lang/rust/pull/105924 and this was one of the issues discovered.\n\nThis may also be useful in the context of https://github.com/rust-lang/rfcs/pull/3127 (\"New rustc and Cargo options to allow path sanitisation by default\").", "tree": {"sha": "db0f90dcce1c936b799d9d88ca8ef45335dc5d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0f90dcce1c936b799d9d88ca8ef45335dc5d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/481725984b4cd94ef5c00917b01c1771b6e5299c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/481725984b4cd94ef5c00917b01c1771b6e5299c", "html_url": "https://github.com/rust-lang/rust/commit/481725984b4cd94ef5c00917b01c1771b6e5299c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/481725984b4cd94ef5c00917b01c1771b6e5299c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af669c26846f85fd15e34a6f03d5d2f237444c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/af669c26846f85fd15e34a6f03d5d2f237444c17", "html_url": "https://github.com/rust-lang/rust/commit/af669c26846f85fd15e34a6f03d5d2f237444c17"}, {"sha": "869df76764d867818ca9e96f665f8645e38f9ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/869df76764d867818ca9e96f665f8645e38f9ce9", "html_url": "https://github.com/rust-lang/rust/commit/869df76764d867818ca9e96f665f8645e38f9ce9"}], "stats": {"total": 169, "additions": 162, "deletions": 7}, "files": [{"sha": "58857730e41b6f308fd7fb92b196b7618f2ae83a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -17,7 +17,7 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n use std::cmp;\n use std::hash::Hash;\n-use std::path::{Path, PathBuf};\n+use std::path::{self, Path, PathBuf};\n use std::sync::atomic::Ordering;\n \n use std::fs;\n@@ -1071,12 +1071,24 @@ impl SourceMap {\n \n     pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {\n         source_file.add_external_src(|| {\n-            match source_file.name {\n-                FileName::Real(ref name) if let Some(local_path) = name.local_path() => {\n-                    self.file_loader.read_file(local_path).ok()\n+            let FileName::Real(ref name) = source_file.name else {\n+                return None;\n+            };\n+\n+            let local_path: Cow<'_, Path> = match name {\n+                RealFileName::LocalPath(local_path) => local_path.into(),\n+                RealFileName::Remapped { local_path: Some(local_path), .. } => local_path.into(),\n+                RealFileName::Remapped { local_path: None, virtual_name } => {\n+                    // The compiler produces better error messages if the sources of dependencies\n+                    // are available. Attempt to undo any path mapping so we can find remapped\n+                    // dependencies.\n+                    // We can only use the heuristic because `add_external_src` checks the file\n+                    // content hash.\n+                    self.path_mapping.reverse_map_prefix_heuristically(virtual_name)?.into()\n                 }\n-                _ => None,\n-            }\n+            };\n+\n+            self.file_loader.read_file(&local_path).ok()\n         })\n     }\n \n@@ -1277,4 +1289,43 @@ impl FilePathMapping {\n             }\n         }\n     }\n+\n+    /// Attempts to (heuristically) reverse a prefix mapping.\n+    ///\n+    /// Returns [`Some`] if there is exactly one mapping where the \"to\" part is\n+    /// a prefix of `path` and has at least one non-empty\n+    /// [`Normal`](path::Component::Normal) component. The component\n+    /// restriction exists to avoid reverse mapping overly generic paths like\n+    /// `/` or `.`).\n+    ///\n+    /// This is a heuristic and not guaranteed to return the actual original\n+    /// path! Do not rely on the result unless you have other means to verify\n+    /// that the mapping is correct (e.g. by checking the file content hash).\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn reverse_map_prefix_heuristically(&self, path: &Path) -> Option<PathBuf> {\n+        let mut found = None;\n+\n+        for (from, to) in self.mapping.iter() {\n+            let has_normal_component = to.components().any(|c| match c {\n+                path::Component::Normal(s) => !s.is_empty(),\n+                _ => false,\n+            });\n+\n+            if !has_normal_component {\n+                continue;\n+            }\n+\n+            let Ok(rest) = path.strip_prefix(to) else {\n+                continue;\n+            };\n+\n+            if found.is_some() {\n+                return None;\n+            }\n+\n+            found = Some(from.join(rest));\n+        }\n+\n+        found\n+    }\n }"}, {"sha": "b4919af65fd0b2fdd04ba1160a514b2ea043e350", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -344,6 +344,10 @@ fn map_path_prefix(mapping: &FilePathMapping, p: &str) -> String {\n     mapping.map_prefix(path(p)).0.to_string_lossy().to_string()\n }\n \n+fn reverse_map_prefix(mapping: &FilePathMapping, p: &str) -> Option<String> {\n+    mapping.reverse_map_prefix_heuristically(&path(p)).map(|q| q.to_string_lossy().to_string())\n+}\n+\n #[test]\n fn path_prefix_remapping() {\n     // Relative to relative\n@@ -480,6 +484,45 @@ fn path_prefix_remapping_expand_to_absolute() {\n     );\n }\n \n+#[test]\n+fn path_prefix_remapping_reverse() {\n+    // Ignores options without alphanumeric chars.\n+    {\n+        let mapping =\n+            &FilePathMapping::new(vec![(path(\"abc\"), path(\"/\")), (path(\"def\"), path(\".\"))]);\n+\n+        assert_eq!(reverse_map_prefix(mapping, \"/hello.rs\"), None);\n+        assert_eq!(reverse_map_prefix(mapping, \"./hello.rs\"), None);\n+    }\n+\n+    // Returns `None` if multiple options match.\n+    {\n+        let mapping = &FilePathMapping::new(vec![\n+            (path(\"abc\"), path(\"/redacted\")),\n+            (path(\"def\"), path(\"/redacted\")),\n+        ]);\n+\n+        assert_eq!(reverse_map_prefix(mapping, \"/redacted/hello.rs\"), None);\n+    }\n+\n+    // Distinct reverse mappings.\n+    {\n+        let mapping = &FilePathMapping::new(vec![\n+            (path(\"abc\"), path(\"/redacted\")),\n+            (path(\"def/ghi\"), path(\"/fake/dir\")),\n+        ]);\n+\n+        assert_eq!(\n+            reverse_map_prefix(mapping, \"/redacted/path/hello.rs\"),\n+            Some(path_str(\"abc/path/hello.rs\"))\n+        );\n+        assert_eq!(\n+            reverse_map_prefix(mapping, \"/fake/dir/hello.rs\"),\n+            Some(path_str(\"def/ghi/hello.rs\"))\n+        );\n+    }\n+}\n+\n #[test]\n fn test_next_point() {\n     let sm = SourceMap::new(FilePathMapping::empty());"}, {"sha": "ef26f1cd883fbfa199819ddf600ad8c9f36adc33", "filename": "tests/ui/errors/auxiliary/remapped_dep.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --remap-path-prefix={{src-base}}/errors/auxiliary=remapped-aux\n+\n+pub struct SomeStruct {} // This line should be show as part of the error."}, {"sha": "2584e3e88a6e5485ffbb5af6662dd52283cf9eeb", "filename": "tests/ui/errors/remap-path-prefix-reverse.local-self.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -0,0 +1,14 @@\n+error[E0423]: expected value, found struct `remapped_dep::SomeStruct`\n+  --> $DIR/remap-path-prefix-reverse.rs:22:13\n+   |\n+LL |     let _ = remapped_dep::SomeStruct;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `remapped_dep::SomeStruct {}`\n+   |\n+  ::: remapped-aux/remapped_dep.rs:3:1\n+   |\n+LL | pub struct SomeStruct {} // This line should be show as part of the error.\n+   | --------------------- `remapped_dep::SomeStruct` defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "e710183322accc08bd061090f7ca1a8d679f299c", "filename": "tests/ui/errors/remap-path-prefix-reverse.remapped-self.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -0,0 +1,14 @@\n+error[E0423]: expected value, found struct `remapped_dep::SomeStruct`\n+  --> remapped/errors/remap-path-prefix-reverse.rs:22:13\n+   |\n+LL |     let _ = remapped_dep::SomeStruct;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `remapped_dep::SomeStruct {}`\n+   |\n+  ::: remapped-aux/remapped_dep.rs:3:1\n+   |\n+LL | pub struct SomeStruct {} // This line should be show as part of the error.\n+   | --------------------- `remapped_dep::SomeStruct` defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "635c4164e0f8e81dec0b137e80126a5975533465", "filename": "tests/ui/errors/remap-path-prefix-reverse.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -0,0 +1,23 @@\n+// aux-build:remapped_dep.rs\n+// compile-flags: --remap-path-prefix={{src-base}}/errors/auxiliary=remapped-aux\n+\n+// The remapped paths are not normalized by compiletest.\n+// normalize-stderr-test: \"\\\\(errors)\" -> \"/$1\"\n+\n+// revisions: local-self remapped-self\n+// [remapped-self]compile-flags: --remap-path-prefix={{src-base}}=remapped\n+\n+// The paths from `remapped-self` aren't recognized by compiletest, so we\n+// cannot use line-specific patterns for the actual error.\n+// error-pattern: E0423\n+\n+// Verify that the expected source code is shown.\n+// error-pattern: pub struct SomeStruct {} // This line should be show\n+\n+extern crate remapped_dep;\n+\n+fn main() {\n+    // The actual error is irrelevant. The important part it that is should show\n+    // a snippet of the dependency's source.\n+    let _ = remapped_dep::SomeStruct;\n+}"}, {"sha": "29b9c7be301224bf7adee7e7757d8b17af68dc24", "filename": "tests/ui/errors/remap-path-prefix.rs", "status": "renamed", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -1,5 +1,12 @@\n // compile-flags: --remap-path-prefix={{src-base}}=remapped\n \n+// The remapped paths are not normalized by compiletest.\n+// normalize-stderr-test: \"\\\\(errors)\" -> \"/$1\"\n+\n+// The remapped paths aren't recognized by compiletest, so we\n+// cannot use line-specific patterns.\n+// error-pattern: E0425\n+\n fn main() {\n     // We cannot actually put an ERROR marker here because\n     // the file name in the error message is not what the", "previous_filename": "tests/ui/remap-path-prefix.rs"}, {"sha": "2f421283e69954a5f7bfbea88c868d902cca31bd", "filename": "tests/ui/errors/remap-path-prefix.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481725984b4cd94ef5c00917b01c1771b6e5299c/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr?ref=481725984b4cd94ef5c00917b01c1771b6e5299c", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `ferris` in this scope\n-  --> remapped/remap-path-prefix.rs:8:5\n+  --> remapped/errors/remap-path-prefix.rs:15:5\n    |\n LL |     ferris\n    |     ^^^^^^ not found in this scope", "previous_filename": "tests/ui/remap-path-prefix.stderr"}]}