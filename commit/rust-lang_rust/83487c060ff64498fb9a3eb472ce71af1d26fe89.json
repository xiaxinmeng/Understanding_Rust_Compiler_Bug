{"sha": "83487c060ff64498fb9a3eb472ce71af1d26fe89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNDg3YzA2MGZmNjQ0OThmYjlhM2ViNDcyY2U3MWFmMWQyNmZlODk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-12T11:14:14Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-13T17:48:33Z"}, "message": "Add trim_multiline utility (fixes #139)", "tree": {"sha": "38aed366e6cca0438e1b55f3638aec482774d7f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38aed366e6cca0438e1b55f3638aec482774d7f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83487c060ff64498fb9a3eb472ce71af1d26fe89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83487c060ff64498fb9a3eb472ce71af1d26fe89", "html_url": "https://github.com/rust-lang/rust/commit/83487c060ff64498fb9a3eb472ce71af1d26fe89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83487c060ff64498fb9a3eb472ce71af1d26fe89/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847070e19db3a63c96bba4033cf6acb44ac33957", "url": "https://api.github.com/repos/rust-lang/rust/commits/847070e19db3a63c96bba4033cf6acb44ac33957", "html_url": "https://github.com/rust-lang/rust/commit/847070e19db3a63c96bba4033cf6acb44ac33957"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "8a41f208938b1271bc5e39ada5e9a55a8ecf9d7c", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=83487c060ff64498fb9a3eb472ce71af1d26fe89", "patch": "@@ -18,7 +18,7 @@ use rustc::middle::def::*;\n use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::codemap::{Span, Spanned, ExpnInfo};\n-use utils::{in_macro, span_help_and_lint, snippet};\n+use utils::{in_macro, span_help_and_lint, snippet, snippet_block};\n \n declare_lint! {\n     pub COLLAPSIBLE_IF,\n@@ -55,7 +55,7 @@ fn check_expr_expd(cx: &Context, e: &Expr, info: Option<&ExpnInfo>) {\n                     \"this if statement can be collapsed\",\n                     &format!(\"try\\nif {} && {} {}\",\n                              check_to_string(cx, check), check_to_string(cx, check_inner),\n-                             snippet(cx, content.span, \"..\")));\n+                             snippet_block(cx, content.span, \"..\")));\n             }\n     }\n }"}, {"sha": "01a2d65606c2262527311cb47620988337cb54e2", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=83487c060ff64498fb9a3eb472ce71af1d26fe89", "patch": "@@ -1,5 +1,6 @@\n #![feature(plugin_registrar, box_syntax)]\n #![feature(rustc_private, collections)]\n+#![feature(str_split_at)]\n #![allow(unused_imports, unknown_lints)]\n \n #[macro_use]"}, {"sha": "861e4a73dd243b8de3756aca1eec30af6c76faec", "filename": "src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=83487c060ff64498fb9a3eb472ce71af1d26fe89", "patch": "@@ -7,7 +7,7 @@ use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use rustc::middle::ty;\n use syntax::codemap::{Span, Spanned};\n \n-use utils::{match_path, snippet, span_lint, span_help_and_lint, walk_ptrs_ty};\n+use utils::{match_path, snippet, snippet_block, span_lint, span_help_and_lint, walk_ptrs_ty};\n \n /// Handles uncategorized lints\n /// Currently handles linting of if-let-able matches\n@@ -37,7 +37,7 @@ impl LintPass for MiscPass {\n                     // an enum is extended. So we only consider cases where a `_` wildcard is used\n                     if arms[1].pats[0].node == PatWild(PatWildSingle) &&\n                             arms[0].pats.len() == 1 {\n-                        let body_code = snippet(cx, arms[0].body.span, \"..\");\n+                        let body_code = snippet_block(cx, arms[0].body.span, \"..\");\n                         let suggestion = if let ExprBlock(_) = arms[0].body.node {\n                             body_code.into_owned()\n                         } else {"}, {"sha": "5b9c995589b78b56872f839326710e0695845216", "filename": "src/utils.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83487c060ff64498fb9a3eb472ce71af1d26fe89/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=83487c060ff64498fb9a3eb472ce71af1d26fe89", "patch": "@@ -51,6 +51,35 @@ pub fn snippet<'a>(cx: &Context, span: Span, default: &'a str) -> Cow<'a, str> {\n     cx.sess().codemap().span_to_snippet(span).map(From::from).unwrap_or(Cow::Borrowed(default))\n }\n \n+/// convert a span (from a block) to a code snippet if available, otherwise use default, e.g.\n+/// `snippet(cx, expr.span, \"..\")`\n+/// This trims the code of indentation, except for the first line\n+/// Use it for blocks or block-like things which need to be printed as such\n+pub fn snippet_block<'a>(cx: &Context, span: Span, default: &'a str) -> Cow<'a, str> {\n+    let snip = snippet(cx, span, default);\n+    trim_multiline(snip, true)\n+}\n+\n+/// Trim indentation from a multiline string\n+/// with possibility of ignoring the first line\n+pub fn trim_multiline<'a>(s: Cow<'a, str>, ignore_first: bool) -> Cow<'a, str> {\n+    let x = s.lines().skip(ignore_first as usize)\n+             .map(|l| l.char_indices()\n+                       .find(|&(_,x)| x != ' ')\n+                       .unwrap_or((l.len(),' ')).0)\n+             .min().unwrap_or(0);\n+    if x > 0 {\n+        Cow::Owned(s.lines().enumerate().map(|(i,l)| if ignore_first && i==0 {\n+                                                        l\n+                                                     } else {\n+                                                        l.split_at(x).1\n+                                                     }).collect::<Vec<_>>()\n+                                       .join(\"\\n\"))\n+    } else {\n+        s\n+    }\n+}\n+\n /// get a parent expr if any \u2013 this is useful to constrain a lint\n pub fn get_parent_expr<'c>(cx: &'c Context, e: &Expr) -> Option<&'c Expr> {\n     let map = &cx.tcx.map;"}]}