{"sha": "e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MGQzMDM0N2FiOWRjMmU0ZjczYTlmM2M4Y2MzYmYwOTkxNGE1OTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-20T16:07:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-20T16:07:07Z"}, "message": "Rollup merge of #71270 - Rustin-Liu:rustin-patch-has-self, r=estebank\n\nFix `has_no_input_arg` check and rename it to `has_only_self_parameter`\n\nSigned-off-by: Rustin-Liu <rustin.liu@gmail.com>\n\nFixes https://github.com/rust-lang/rust/pull/70643#discussion_r401571789.", "tree": {"sha": "5ac2cf2ec79073dc9695011eb6adfbc4a83cfa90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac2cf2ec79073dc9695011eb6adfbc4a83cfa90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJencirCRBK7hj4Ov3rIwAAdHIIAAsQP5iptC/imeCl9curCoxx\n2ZgMYfzMkwR6OIYTmnSJHz3c9zlzEkXWPUyNNoTaCz8o0a8+BkWN2ELCmD/VKDl0\nFzi0WtvCgVYc3ih12odhDQs1IGsgHuNYPvy4O1qONm+PycO24JCGZWgBg47jIYKd\nBoURrXrUvSU/dnh8Ks6HJ0v8bYJIj/44Wu+34UiC49JhyxbK1iKB13cELbkmekxj\nSoy5qhgHs9lwppZjVCXrRbwg9Vr/+grirHyj4UnfUkcWJFku1f5OJJCZvPwOUeNr\na3AiWNoDw69mS8FWbPiUHe56h2QYAouL/UozsygHrA/fnzTk5FJox/ye/NmRP88=\n=6LWh\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ac2cf2ec79073dc9695011eb6adfbc4a83cfa90\nparent 2f06ac08e923a146134199cdb72c08b85a800203\nparent 7c28dfe113649663c1871bbbe9ad5d4f227ecf45\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587398827 +0200\ncommitter GitHub <noreply@github.com> 1587398827 +0200\n\nRollup merge of #71270 - Rustin-Liu:rustin-patch-has-self, r=estebank\n\nFix `has_no_input_arg` check and rename it to `has_only_self_parameter`\n\nSigned-off-by: Rustin-Liu <rustin.liu@gmail.com>\n\nFixes https://github.com/rust-lang/rust/pull/70643#discussion_r401571789.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597", "html_url": "https://github.com/rust-lang/rust/commit/e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f06ac08e923a146134199cdb72c08b85a800203", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f06ac08e923a146134199cdb72c08b85a800203", "html_url": "https://github.com/rust-lang/rust/commit/2f06ac08e923a146134199cdb72c08b85a800203"}, {"sha": "7c28dfe113649663c1871bbbe9ad5d4f227ecf45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c28dfe113649663c1871bbbe9ad5d4f227ecf45", "html_url": "https://github.com/rust-lang/rust/commit/7c28dfe113649663c1871bbbe9ad5d4f227ecf45"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "7db376b20aaa8136673b4ac19cb901be4397bdcd", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e80d30347ab9dc2e4f73a9f3c8cc3bf09914a597", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut methods =\n             self.probe_for_return_type(span, probe::Mode::MethodCall, expected, checked_ty, hir_id);\n         methods.retain(|m| {\n-            self.has_no_input_arg(m)\n+            self.has_only_self_parameter(m)\n                 && self\n                     .tcx\n                     .get_attrs(m.def_id)\n@@ -243,10 +243,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         methods\n     }\n \n-    // This function checks if the method isn't static and takes other arguments than `self`.\n-    fn has_no_input_arg(&self, method: &AssocItem) -> bool {\n+    /// This function checks whether the method is not static and does not accept other parameters than `self`.\n+    fn has_only_self_parameter(&self, method: &AssocItem) -> bool {\n         match method.kind {\n-            ty::AssocKind::Fn => self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1,\n+            ty::AssocKind::Fn => {\n+                method.fn_has_self_parameter\n+                    && self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1\n+            }\n             _ => false,\n         }\n     }"}]}