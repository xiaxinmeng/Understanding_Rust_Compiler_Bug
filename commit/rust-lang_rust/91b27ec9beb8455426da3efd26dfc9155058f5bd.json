{"sha": "91b27ec9beb8455426da3efd26dfc9155058f5bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjI3ZWM5YmViODQ1NTQyNmRhM2VmZDI2ZGZjOTE1NTA1OGY1YmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-07T06:32:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-07T06:32:56Z"}, "message": "Auto merge of #30724 - nikomatsakis:feature-gate-defaulted-type-parameters, r=pnkfelix\n\nIt was recently realized that we accept defaulted type parameters everywhere, without feature gate, even though the only place that we really *intended* to accept them were on types. This PR adds a lint warning unless the \"type-parameter-defaults\" feature is enabled. This should eventually become a hard error.\n\nThis is a [breaking-change] in that new feature gates are required (or simply removing the defaults, which is probably a better choice as they have little effect at this time). Results of a [crater run][crater] suggest that approximately 5-15 crates are affected. I didn't do the measurement quite right so that run cannot distinguish \"true\" regressions from \"non-root\" regressions, but even the upper bound of 15 affected crates seems relatively minimal.\n\n[crater]: https://gist.github.com/nikomatsakis/760c6a67698bd24253bf\n\ncc @rust-lang/lang\nr? @pnkfelix", "tree": {"sha": "07d71c78a97c65aeda0f6ad440c9b966b1472150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07d71c78a97c65aeda0f6ad440c9b966b1472150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b27ec9beb8455426da3efd26dfc9155058f5bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b27ec9beb8455426da3efd26dfc9155058f5bd", "html_url": "https://github.com/rust-lang/rust/commit/91b27ec9beb8455426da3efd26dfc9155058f5bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b27ec9beb8455426da3efd26dfc9155058f5bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "440671751e818dfb20525a16a00011b8227eeaa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/440671751e818dfb20525a16a00011b8227eeaa7", "html_url": "https://github.com/rust-lang/rust/commit/440671751e818dfb20525a16a00011b8227eeaa7"}, {"sha": "6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "html_url": "https://github.com/rust-lang/rust/commit/6dd3f6143e384927a15b165b1c64e1d7c06faa0a"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "f87f5e6c2e6b74f7769d238b2542c7cbb473b8f0", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -1591,10 +1591,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&self,\n-                                                               min: Bound<&Min>,\n-                                                               max: Bound<&Max>)\n-                                                               -> Range<K, V>\n+    pub fn range<Min: ?Sized + Ord, Max: ?Sized + Ord>(&self,\n+                                                       min: Bound<&Min>,\n+                                                       max: Bound<&Max>)\n+                                                       -> Range<K, V>\n         where K: Borrow<Min> + Borrow<Max>\n     {\n         range_impl!(&self.root,\n@@ -1633,10 +1633,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range_mut<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&mut self,\n-                                                                   min: Bound<&Min>,\n-                                                                   max: Bound<&Max>)\n-                                                                   -> RangeMut<K, V>\n+    pub fn range_mut<Min: ?Sized + Ord, Max: ?Sized + Ord>(&mut self,\n+                                                           min: Bound<&Min>,\n+                                                           max: Bound<&Max>)\n+                                                           -> RangeMut<K, V>\n         where K: Borrow<Min> + Borrow<Max>\n     {\n         range_impl!(&mut self.root,"}, {"sha": "55e9e3a1c34bb15644e9f8d0ec4f88e5b7b6ed0b", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -154,10 +154,10 @@ impl<T: Ord> BTreeSet<T> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range<'a, Min: ?Sized + Ord = T, Max: ?Sized + Ord = T>(&'a self,\n-                                                                   min: Bound<&Min>,\n-                                                                   max: Bound<&Max>)\n-                                                                   -> Range<'a, T>\n+    pub fn range<'a, Min: ?Sized + Ord, Max: ?Sized + Ord>(&'a self,\n+                                                           min: Bound<&Min>,\n+                                                           max: Bound<&Max>)\n+                                                           -> Range<'a, T>\n         where T: Borrow<Min> + Borrow<Max>\n     {\n         fn first<A, B>((a, _): (A, B)) -> A {"}, {"sha": "a30e5b1372af98daf081ea88d524c177e1d0b533", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -2132,7 +2132,7 @@ pub trait Iterator {\n     /// ```\n     #[unstable(feature = \"iter_arith\", reason = \"bounds recently changed\",\n                issue = \"27739\")]\n-    fn sum<S=<Self as Iterator>::Item>(self) -> S where\n+    fn sum<S>(self) -> S where\n         S: Add<Self::Item, Output=S> + Zero,\n         Self: Sized,\n     {\n@@ -2157,7 +2157,7 @@ pub trait Iterator {\n     /// ```\n     #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\",\n                issue = \"27739\")]\n-    fn product<P=<Self as Iterator>::Item>(self) -> P where\n+    fn product<P>(self) -> P where\n         P: Mul<Self::Item, Output=P> + One,\n         Self: Sized,\n     {"}, {"sha": "aff925d108272cb40f96dad30552e4911013300a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -16,6 +16,9 @@\n \n use lint::{LintPass, LateLintPass, LintArray};\n \n+// name of the future-incompatible group\n+pub const FUTURE_INCOMPATIBLE: &'static str = \"future_incompatible\";\n+\n declare_lint! {\n     pub CONST_ERR,\n     Warn,\n@@ -124,6 +127,12 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n \n+declare_lint! {\n+    pub INVALID_TYPE_PARAM_DEFAULT,\n+    Warn,\n+    \"type parameter default erroneously allowed in invalid location\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -149,6 +158,7 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_CASTS,\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n+            INVALID_TYPE_PARAM_DEFAULT,\n             CONST_ERR\n         )\n     }"}, {"sha": "08fba2dc56feefdbc5009d1234a9e95d7fa68265", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -365,14 +365,16 @@ pub fn gather_attrs(attrs: &[ast::Attribute])\n /// lints elsewhere in the compiler should call\n /// `Session::add_lint()` instead.\n pub fn raw_emit_lint(sess: &Session,\n+                     lints: &LintStore,\n                      lint: &'static Lint,\n                      lvlsrc: LevelSource,\n                      span: Option<Span>,\n                      msg: &str) {\n-    raw_struct_lint(sess, lint, lvlsrc, span, msg).emit();\n+    raw_struct_lint(sess, lints, lint, lvlsrc, span, msg).emit();\n }\n \n pub fn raw_struct_lint<'a>(sess: &'a Session,\n+                           lints: &LintStore,\n                            lint: &'static Lint,\n                            lvlsrc: LevelSource,\n                            span: Option<Span>,\n@@ -414,6 +416,18 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n         _ => sess.bug(\"impossible level in raw_emit_lint\"),\n     };\n \n+    // Check for future incompatibility lints and issue a stronger warning.\n+    let future_incompat_lints = &lints.lint_groups[builtin::FUTURE_INCOMPATIBLE];\n+    let this_id = LintId::of(lint);\n+    if future_incompat_lints.0.iter().any(|&id| id == this_id) {\n+        let msg = \"this lint will become a HARD ERROR in a future release!\";\n+        if let Some(sp) = span {\n+            err.span_note(sp, msg);\n+        } else {\n+            err.note(msg);\n+        }\n+    }\n+\n     if let Some(span) = def {\n         err.span_note(span, \"lint level defined here\");\n     }\n@@ -451,7 +465,7 @@ pub trait LintContext: Sized {\n             Some(pair) => pair,\n         };\n \n-        raw_emit_lint(&self.sess(), lint, (level, src), span, msg);\n+        raw_emit_lint(&self.sess(), self.lints(), lint, (level, src), span, msg);\n     }\n \n     fn lookup(&self,\n@@ -464,7 +478,7 @@ pub trait LintContext: Sized {\n             Some(pair) => pair,\n         };\n \n-        raw_struct_lint(&self.sess(), lint, (level, src), span, msg)\n+        raw_struct_lint(&self.sess(), self.lints(), lint, (level, src), span, msg)\n     }\n \n     /// Emit a lint at the appropriate level, for a particular span."}, {"sha": "f2e75960406f188e5e10309212f7c85b3a82053a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -143,8 +143,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUT, UNREACHABLE_CODE, UNUSED_MUST_USE,\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n-    add_lint_group!(sess, \"future_incompatible\",\n-                    PRIVATE_IN_PUBLIC);\n+    add_lint_group!(sess, FUTURE_INCOMPATIBLE,\n+                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT);\n \n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);"}, {"sha": "1c3732d3ce4cafd2ef8ef987e705ee27b50ee367", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -2216,6 +2216,7 @@ fn enum_variant_size_lint(ccx: &CrateContext, enum_def: &hir::EnumDef, sp: Span,\n         // Use lint::raw_emit_lint rather than sess.add_lint because the lint-printing\n         // pass for the latter already ran.\n         lint::raw_struct_lint(&ccx.tcx().sess,\n+                              &ccx.tcx().sess.lint_store.borrow(),\n                               lint::builtin::VARIANT_SIZE_DIFFERENCES,\n                               *lvlsrc.unwrap(),\n                               Some(sp),"}, {"sha": "fbbd2f02908f10b14e360a7cd9c81b97c7dafd30", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -59,6 +59,7 @@ There are some shortcomings in this design:\n */\n \n use astconv::{self, AstConv, ty_of_arg, ast_ty_to_ty, ast_region_to_region};\n+use lint;\n use middle::def;\n use middle::def_id::DefId;\n use constrained_type_params as ctp;\n@@ -1910,6 +1911,17 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     let parent = tcx.map.get_parent(param.id);\n \n+    if space != TypeSpace && default.is_some() {\n+        if !tcx.sess.features.borrow().default_type_parameter_fallback {\n+            tcx.sess.add_lint(\n+                lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n+                param.id,\n+                param.span,\n+                format!(\"defaults for type parameters are only allowed \\\n+                         on `struct` or `enum` definitions (see issue #27336)\"));\n+        }\n+    }\n+\n     let def = ty::TypeParameterDef {\n         space: space,\n         index: index,"}, {"sha": "4bd8ecacb96b3ddcb5e86e42654dd18cfe6c0fa9", "filename": "src/test/auxiliary/default_ty_param_cross_crate_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Ftest%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Ftest%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_type = \"lib\"]\n #![crate_name = \"default_param_test\"]\n+#![feature(default_type_parameter_fallback)]\n \n use std::marker::PhantomData;\n "}, {"sha": "060a66846d36f7afcaba4e4a38ac03f7d95c9fe3", "filename": "src/test/compile-fail/issue-26812.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n fn avg<T=T::Item>(_: T) {} //~ ERROR associated type `Item` not found for `T`\n fn main() {}"}, {"sha": "a3ecbfa84f0a86650ea79343aa1c56a40f40d3bf", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b27ec9beb8455426da3efd26dfc9155058f5bd/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=91b27ec9beb8455426da3efd26dfc9155058f5bd", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(future_incompatible)]\n+#![allow(dead_code)]\n+\n+fn avg<T=i32>(_: T) {}\n+//~^ ERROR defaults for type parameters are only allowed\n+//~| NOTE HARD ERROR\n+fn main() {}"}]}