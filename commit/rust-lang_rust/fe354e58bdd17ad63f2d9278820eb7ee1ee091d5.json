{"sha": "fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMzU0ZTU4YmRkMTdhZDYzZjJkOTI3ODgyMGViN2VlMWVlMDkxZDU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-30T10:41:13Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-04T03:21:00Z"}, "message": "rustc: remove unused MethodStaticClosure variant of MethodOrigin.", "tree": {"sha": "793615f6c5e9bebb68131247bf5ee229040f089e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/793615f6c5e9bebb68131247bf5ee229040f089e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "html_url": "https://github.com/rust-lang/rust/commit/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c952b5b796828a9a774c2249e7d08056393464", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c952b5b796828a9a774c2249e7d08056393464", "html_url": "https://github.com/rust-lang/rust/commit/50c952b5b796828a9a774c2249e7d08056393464"}], "stats": {"total": 59, "additions": 8, "deletions": 51}, "files": [{"sha": "90ef8e2ad3655a75b62676e2960dfdadf4a1c6d0", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -755,14 +755,8 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                     })\n                 }\n \n-                ty::MethodStaticClosure(def_id) => {\n-                    this.emit_enum_variant(\"MethodStaticClosure\", 1, 1, |this| {\n-                        Ok(this.emit_def_id(def_id))\n-                    })\n-                }\n-\n                 ty::MethodTypeParam(ref p) => {\n-                    this.emit_enum_variant(\"MethodTypeParam\", 2, 1, |this| {\n+                    this.emit_enum_variant(\"MethodTypeParam\", 1, 1, |this| {\n                         this.emit_struct(\"MethodParam\", 2, |this| {\n                             try!(this.emit_struct_field(\"trait_ref\", 0, |this| {\n                                 Ok(this.emit_trait_ref(ecx, &p.trait_ref))\n@@ -786,7 +780,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                 }\n \n                 ty::MethodTraitObject(ref o) => {\n-                    this.emit_enum_variant(\"MethodTraitObject\", 3, 1, |this| {\n+                    this.emit_enum_variant(\"MethodTraitObject\", 2, 1, |this| {\n                         this.emit_struct(\"MethodObject\", 2, |this| {\n                             try!(this.emit_struct_field(\"trait_ref\", 0, |this| {\n                                 Ok(this.emit_trait_ref(ecx, &o.trait_ref))\n@@ -1239,8 +1233,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                                   -> ty::MethodOrigin<'tcx>\n     {\n         self.read_enum(\"MethodOrigin\", |this| {\n-            let variants = &[\"MethodStatic\", \"MethodStaticClosure\",\n-                             \"MethodTypeParam\", \"MethodTraitObject\"];\n+            let variants = &[\"MethodStatic\", \"MethodTypeParam\", \"MethodTraitObject\"];\n             this.read_enum_variant(variants, |this, i| {\n                 Ok(match i {\n                     0 => {\n@@ -1249,11 +1242,6 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                     }\n \n                     1 => {\n-                        let def_id = this.read_def_id(dcx);\n-                        ty::MethodStaticClosure(def_id)\n-                    }\n-\n-                    2 => {\n                         this.read_struct(\"MethodTypeParam\", 2, |this| {\n                             Ok(ty::MethodTypeParam(\n                                 ty::MethodParam {\n@@ -1282,7 +1270,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                         }).unwrap()\n                     }\n \n-                    3 => {\n+                    2 => {\n                         this.read_struct(\"MethodTraitObject\", 2, |this| {\n                             Ok(ty::MethodTraitObject(\n                                 ty::MethodObject {"}, {"sha": "ad1bc1c52506ca78cadb4afe7d554c41a2abbf7e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -105,7 +105,6 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                             None => self.check_def_id(def_id)\n                         }\n                     }\n-                    ty::MethodStaticClosure(_) => {}\n                     ty::MethodTypeParam(ty::MethodParam {\n                         ref trait_ref,\n                         method_num: index,"}, {"sha": "8c919d7db527d9f4e04f8f5ccdf8052f53d7a671", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -254,27 +254,12 @@ impl OverloadedCallType {\n         OverloadedCallType::from_trait_id(tcx, trait_ref.def_id)\n     }\n \n-    fn from_closure(tcx: &ty::ctxt, closure_did: ast::DefId)\n-                    -> OverloadedCallType {\n-        let trait_did =\n-            tcx.tables\n-               .borrow()\n-               .closure_kinds\n-               .get(&closure_did)\n-               .expect(\"OverloadedCallType::from_closure: didn't find closure id\")\n-               .trait_did(tcx);\n-        OverloadedCallType::from_trait_id(tcx, trait_did)\n-    }\n-\n     fn from_method_origin(tcx: &ty::ctxt, origin: &MethodOrigin)\n                           -> OverloadedCallType {\n         match *origin {\n             MethodStatic(def_id) => {\n                 OverloadedCallType::from_method_id(tcx, def_id)\n             }\n-            MethodStaticClosure(def_id) => {\n-                OverloadedCallType::from_closure(tcx, def_id)\n-            }\n             MethodTypeParam(MethodParam { ref trait_ref, .. }) |\n             MethodTraitObject(MethodObject { ref trait_ref, .. }) => {\n                 OverloadedCallType::from_trait_id(tcx, trait_ref.def_id)"}, {"sha": "2cb3a7337a447727146ce7c0e2565b353b5aa0bf", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -412,9 +412,6 @@ pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,\n                         ty::MethodStatic(def_id) => {\n                             def_id\n                         }\n-                        ty::MethodStaticClosure(def_id) => {\n-                            def_id\n-                        }\n                         ty::MethodTypeParam(ty::MethodParam {\n                             ref trait_ref,\n                             method_num: index,"}, {"sha": "5bdf9205d07056daea998e5b1e961ddf887db8c4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -631,9 +631,6 @@ pub enum MethodOrigin<'tcx> {\n     // fully statically resolved method\n     MethodStatic(ast::DefId),\n \n-    // fully statically resolved closure invocation\n-    MethodStaticClosure(ast::DefId),\n-\n     // method invoked on a type parameter with a bounded trait\n     MethodTypeParam(MethodParam<'tcx>),\n "}, {"sha": "34bbb921601420f94ff04110a5714f1afa70f57c", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -316,9 +316,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::MethodOrigin<'tcx> {\n             ty::MethodStatic(def_id) => {\n                 ty::MethodStatic(def_id)\n             }\n-            ty::MethodStaticClosure(def_id) => {\n-                ty::MethodStaticClosure(def_id)\n-            }\n             ty::MethodTypeParam(ref param) => {\n                 ty::MethodTypeParam(ty::MethodParam {\n                     trait_ref: param.trait_ref.fold_with(folder),"}, {"sha": "33a93e03ad3a97fc8c09107d5cf927e222cab356", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -500,9 +500,6 @@ impl<'tcx> fmt::Debug for ty::MethodOrigin<'tcx> {\n             ty::MethodStatic(def_id) => {\n                 write!(f, \"MethodStatic({:?})\", def_id)\n             }\n-            ty::MethodStaticClosure(def_id) => {\n-                write!(f, \"MethodStaticClosure({:?})\", def_id)\n-            }\n             ty::MethodTypeParam(ref p) => write!(f, \"{:?}\", p),\n             ty::MethodTraitObject(ref p) => write!(f, \"{:?}\", p)\n         }"}, {"sha": "e3b696286e51e6f91b80cedf167c74e994c24013", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -2003,7 +2003,7 @@ impl LintPass for UnconditionalRecursion {\n                     ty::MethodTraitObject(_) => return false,\n \n                     // This `did` refers directly to the method definition.\n-                    ty::MethodStatic(did) | ty::MethodStaticClosure(did) => did,\n+                    ty::MethodStatic(did) => did,\n \n                     // MethodTypeParam are methods from traits:\n "}, {"sha": "abdae9e215f0010d44abc0cb9cae3fcc4f3c6511", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -854,7 +854,6 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             MethodStatic(method_id) => {\n                 self.check_static_method(span, method_id, name)\n             }\n-            MethodStaticClosure(_) => {}\n             // Trait methods are always all public. The only controlling factor\n             // is whether the trait itself is accessible or not.\n             MethodTypeParam(MethodParam { ref trait_ref, .. }) |"}, {"sha": "e07ce230b6ce52a0cd94ad7b18bda7a69badff99", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -889,8 +889,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         let method_map = &self.tcx.tables.borrow().method_map;\n         let method_callee = method_map.get(&ty::MethodCall::expr(ex.id)).unwrap();\n         let (def_id, decl_id) = match method_callee.origin {\n-            ty::MethodStatic(def_id) |\n-            ty::MethodStaticClosure(def_id) => {\n+            ty::MethodStatic(def_id) => {\n                 // method invoked on an object with a concrete type (not a static method)\n                 let decl_id =\n                     match self.tcx.trait_item_of_item(def_id) {\n@@ -907,7 +906,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                     _ => self.sess\n                              .span_bug(ex.span,\n                                        \"save::process_method_call: non-method \\\n-                                        DefId in MethodStatic or MethodStaticClosure\"),\n+                                        DefId in MethodStatic\"),\n                 };\n                 (Some(def_id), decl_id)\n             }"}, {"sha": "c18786c1f348a98229e3bde2342b140606531520", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe354e58bdd17ad63f2d9278820eb7ee1ee091d5/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=fe354e58bdd17ad63f2d9278820eb7ee1ee091d5", "patch": "@@ -117,8 +117,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            .unwrap();\n \n     match origin {\n-        ty::MethodStatic(did) |\n-        ty::MethodStaticClosure(did) => {\n+        ty::MethodStatic(did) => {\n             debug!(\"trans_method_callee: static, {:?}\", did);\n             Callee {\n                 bcx: bcx,"}]}