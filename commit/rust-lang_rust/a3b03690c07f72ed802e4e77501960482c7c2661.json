{"sha": "a3b03690c07f72ed802e4e77501960482c7c2661", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjAzNjkwYzA3ZjcyZWQ4MDJlNGU3NzUwMTk2MDQ4MmM3YzI2NjE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-06T23:00:29Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-08T23:00:20Z"}, "message": "Clean up dead code in `qualify_consts`\n\nWe don't do promotion here anymore, so `Checker` will never even visit\nthe body of a non-const `fn`.", "tree": {"sha": "a6481ece89829c4d63317ae9795e4c06dff8ef38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6481ece89829c4d63317ae9795e4c06dff8ef38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b03690c07f72ed802e4e77501960482c7c2661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b03690c07f72ed802e4e77501960482c7c2661", "html_url": "https://github.com/rust-lang/rust/commit/a3b03690c07f72ed802e4e77501960482c7c2661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b03690c07f72ed802e4e77501960482c7c2661/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13c2c330d623d1254a0c02e6447e3717470728c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13c2c330d623d1254a0c02e6447e3717470728c", "html_url": "https://github.com/rust-lang/rust/commit/b13c2c330d623d1254a0c02e6447e3717470728c"}], "stats": {"total": 21, "additions": 0, "deletions": 21}, "files": [{"sha": "5ad5363768d34a3142480b24f514020470b14e97", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3b03690c07f72ed802e4e77501960482c7c2661/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b03690c07f72ed802e4e77501960482c7c2661/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a3b03690c07f72ed802e4e77501960482c7c2661", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::cast::CastTy;\n use rustc::ty::query::Providers;\n use rustc::mir::*;\n use rustc::mir::interpret::ConstValue;\n-use rustc::mir::traversal::ReversePostorder;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUseContext};\n use rustc::middle::lang_items;\n use rustc::session::config::nightly_options;\n@@ -31,7 +30,6 @@ use std::usize;\n \n use rustc::hir::HirId;\n use crate::transform::{MirPass, MirSource};\n-use super::promote_consts::{self, Candidate, TempState};\n use crate::transform::check_consts::ops::{self, NonConstOp};\n \n /// What kind of item we are in.\n@@ -477,10 +475,6 @@ struct Checker<'a, 'tcx> {\n \n     span: Span,\n     def_id: DefId,\n-    rpo: ReversePostorder<'a, 'tcx>,\n-\n-    temp_promotion_state: IndexVec<Local, TempState>,\n-    unchecked_promotion_candidates: Vec<Candidate>,\n \n     /// If `true`, do not emit errors to the user, merely collect them in `errors`.\n     suppress_errors: bool,\n@@ -509,10 +503,6 @@ impl Deref for Checker<'a, 'tcx> {\n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>, mode: Mode) -> Self {\n         assert!(def_id.is_local());\n-        let mut rpo = traversal::reverse_postorder(body);\n-        let (temps, unchecked_promotion_candidates) =\n-            promote_consts::collect_temps_and_candidates(tcx, body, &mut rpo);\n-        rpo.reset();\n \n         let param_env = tcx.param_env(def_id);\n \n@@ -539,9 +529,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             cx,\n             span: body.span,\n             def_id,\n-            rpo,\n-            temp_promotion_state: temps,\n-            unchecked_promotion_candidates,\n             errors: vec![],\n             suppress_errors: false,\n         }\n@@ -662,14 +649,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         let kind = self.body.local_kind(index);\n         debug!(\"store to {:?} {:?}\", kind, index);\n \n-        // Only handle promotable temps in non-const functions.\n-        if self.mode == Mode::NonConstFn {\n-            if kind != LocalKind::Temp ||\n-               !self.temp_promotion_state[index].is_promotable() {\n-                return;\n-            }\n-        }\n-\n         // this is overly restrictive, because even full assignments do not clear the qualif\n         // While we could special case full assignments, this would be inconsistent with\n         // aggregates where we overwrite all fields via assignments, which would not get"}]}