{"sha": "9fb11fe9f21051f4f03da55f949de402e78a95d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYjExZmU5ZjIxMDUxZjRmMDNkYTU1Zjk0OWRlNDAyZTc4YTk1ZDU=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-26T04:54:19Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:05:06Z"}, "message": "Extend macro machinery to expand macros in types\n\nReapplied the changes from https://github.com/freebroccolo/rust/commit/7aafe24139abc2d1f302bbb166bcaa006f12cf4d\nto a clean branch of master", "tree": {"sha": "d9ae7e953684d3d6558fb45c4f85211481dd208a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9ae7e953684d3d6558fb45c4f85211481dd208a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb11fe9f21051f4f03da55f949de402e78a95d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb11fe9f21051f4f03da55f949de402e78a95d5", "html_url": "https://github.com/rust-lang/rust/commit/9fb11fe9f21051f4f03da55f949de402e78a95d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb11fe9f21051f4f03da55f949de402e78a95d5/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edca562c87362c80e409f53d28e19617ca44646a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edca562c87362c80e409f53d28e19617ca44646a", "html_url": "https://github.com/rust-lang/rust/commit/edca562c87362c80e409f53d28e19617ca44646a"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "28c7ead20bcaef7adac840bf867980e5a3c84d7f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9fb11fe9f21051f4f03da55f949de402e78a95d5/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb11fe9f21051f4f03da55f949de402e78a95d5/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9fb11fe9f21051f4f03da55f949de402e78a95d5", "patch": "@@ -290,6 +290,10 @@ pub trait MacResult {\n     fn make_stmts(self: Box<Self>) -> Option<SmallVector<P<ast::Stmt>>> {\n         make_stmts_default!(self)\n     }\n+\n+    fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> {\n+        None\n+    }\n }\n \n macro_rules! make_MacEager {\n@@ -322,6 +326,7 @@ make_MacEager! {\n     items: SmallVector<P<ast::Item>>,\n     impl_items: SmallVector<P<ast::ImplItem>>,\n     stmts: SmallVector<P<ast::Stmt>>,\n+    ty: P<ast::Ty>,\n }\n \n impl MacResult for MacEager {\n@@ -359,6 +364,10 @@ impl MacResult for MacEager {\n         }\n         None\n     }\n+\n+    fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> {\n+        self.ty\n+    }\n }\n \n /// Fill-in macro expansion result, to allow compilation to continue\n@@ -405,6 +414,12 @@ impl DummyResult {\n         }\n     }\n \n+    pub fn raw_ty(sp: Span) -> P<ast::Ty> {\n+        P(ast::Ty {\n+            id: ast:DUMMY_NODE_ID,\n+            node: ast::TyInfer,\n+            span: sp\n+        })\n }\n \n impl MacResult for DummyResult {"}, {"sha": "cd340fc91891f6aa206a51378cc4f2b68730ffa0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9fb11fe9f21051f4f03da55f949de402e78a95d5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb11fe9f21051f4f03da55f949de402e78a95d5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9fb11fe9f21051f4f03da55f949de402e78a95d5", "patch": "@@ -1552,6 +1552,35 @@ fn expand_and_rename_method(sig: ast::MethodSig, body: P<ast::Block>,\n     }, rewritten_body)\n }\n \n+pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n+    let t = match t.node.clone() {\n+        ast::Ty_::TyMac(mac) => {\n+            let expanded_ty = match expand_mac_invoc(mac, t.span,\n+                                                     |r| r.make_ty(),\n+                                                     mark_ty,\n+                                                     fld) {\n+                Some(ty) => ty,\n+                None => {\n+                    return DummyResult::raw_ty(t.span);\n+                }\n+            };\n+\n+            // Keep going, outside-in.\n+            //\n+            let fully_expanded = fld.fold_ty(expanded_ty);\n+            fld.cx.bt_pop();\n+\n+            fully_expanded.map(|t| ast::Ty {\n+                id: ast::DUMMY_NODE_ID,\n+                node: t.node,\n+                span: t.span,\n+            })\n+        }\n+        _ => t\n+    };\n+    fold::noop_fold_ty(t, fld)\n+}\n+\n /// A tree-folder that performs macro expansion\n pub struct MacroExpander<'a, 'b:'a> {\n     pub cx: &'a mut ExtCtxt<'b>,\n@@ -1602,6 +1631,10 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n             .into_iter().map(|i| i.expect_impl_item()).collect()\n     }\n \n+    fn fold_ty(&mut self, ty: P<ast::Ty>) -> P<ast::Ty> {\n+        expand_type(ty, self)\n+    }\n+\n     fn new_span(&mut self, span: Span) -> Span {\n         new_span(self.cx, span)\n     }\n@@ -1748,6 +1781,10 @@ fn mark_impl_item(ii: P<ast::ImplItem>, m: Mrk) -> P<ast::ImplItem> {\n         .expect_one(\"marking an impl item didn't return exactly one impl item\")\n }\n \n+fn mark_ty(ty: P<ast::Ty>, m: Mrk) -> P<ast::Ty> {\n+    Marker { mark: m }.fold_ty(ty)\n+}\n+\n /// Check that there are no macro invocations left in the AST:\n pub fn check_for_macros(sess: &parse::ParseSess, krate: &ast::Crate) {\n     visit::walk_crate(&mut MacroExterminator{sess:sess}, krate);"}, {"sha": "d16fde7bc394e44dc5ded3ca9a1dd2a2fbffb639", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fb11fe9f21051f4f03da55f949de402e78a95d5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb11fe9f21051f4f03da55f949de402e78a95d5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=9fb11fe9f21051f4f03da55f949de402e78a95d5", "patch": "@@ -117,6 +117,12 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n         self.ensure_complete_parse(false);\n         Some(ret)\n     }\n+\n+    fn make_ty(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Ty>> {\n+        let ret = self.parser.borrow_mut().parse_ty();\n+        self.ensure_complete_parse(true);\n+        Some(ret)\n+    }\n }\n \n struct MacroRulesMacroExpander {"}]}