{"sha": "ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjYxZjY4NTJjOTI4ZDNjZTBhNmRkMzRlYzZjM2EzODc5MmU0ZGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-19T15:23:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-19T15:23:47Z"}, "message": "avoid uninit_array! macro where it is not needed", "tree": {"sha": "d9b96b6ec6dc4b21b9dd0a97b7ccb07630a7e592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9b96b6ec6dc4b21b9dd0a97b7ccb07630a7e592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "html_url": "https://github.com/rust-lang/rust/commit/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e074db764a0f25af073cb3f472d39a86e6fa7f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/e074db764a0f25af073cb3f472d39a86e6fa7f39", "html_url": "https://github.com/rust-lang/rust/commit/e074db764a0f25af073cb3f472d39a86e6fa7f39"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "3b5c9fbff250ae1e654e156e38b36950f489e69d", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "patch": "@@ -51,7 +51,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = T::zero();\n         let is_nonnegative = x >= zero;\n-        let mut buf = uninit_array![u8; 128];\n+        let mut buf = [MaybeUninit::<u8>::uninit(); 128];\n         let mut curr = buf.len();\n         let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n@@ -189,7 +189,7 @@ static DEC_DIGITS_LUT: &[u8; 200] =\n macro_rules! impl_Display {\n     ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n         fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let mut buf = uninit_array![u8; 39];\n+            let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();"}, {"sha": "fe149d634e2233f1a5687ae3ed763978f7ee266e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "patch": "@@ -75,7 +75,6 @@\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n #![cfg_attr(not(bootstrap), feature(const_generics))]\n-#![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "2f2170f7ff14ce7860d3b219f7e55ce0e2a7365b", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad261f6852c928d3ce0a6dd34ec6c3a38792e4de/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=ad261f6852c928d3ce0a6dd34ec6c3a38792e4de", "patch": "@@ -216,14 +216,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = uninit_array![u8; BLOCK];\n+    let mut offsets_l = [MaybeUninit::<u8>::uninit(); BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = uninit_array![u8; BLOCK];\n+    let mut offsets_r = [MaybeUninit::<u8>::uninit(); BLOCK];\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient."}]}