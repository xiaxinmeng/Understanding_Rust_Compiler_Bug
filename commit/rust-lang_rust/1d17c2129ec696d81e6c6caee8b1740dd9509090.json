{"sha": "1d17c2129ec696d81e6c6caee8b1740dd9509090", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTdjMjEyOWVjNjk2ZDgxZTZjNmNhZWU4YjE3NDBkZDk1MDkwOTA=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-08T03:45:48Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-08T06:31:52Z"}, "message": "Rewrite path::Display to reduce unnecessary allocation", "tree": {"sha": "82db5e94279972bd3d12d4fa5fc765b7c0bc891e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82db5e94279972bd3d12d4fa5fc765b7c0bc891e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d17c2129ec696d81e6c6caee8b1740dd9509090", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d17c2129ec696d81e6c6caee8b1740dd9509090", "html_url": "https://github.com/rust-lang/rust/commit/1d17c2129ec696d81e6c6caee8b1740dd9509090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d17c2129ec696d81e6c6caee8b1740dd9509090/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086c0dd33febb752b036fba62dcfb8aa22a51642", "url": "https://api.github.com/repos/rust-lang/rust/commits/086c0dd33febb752b036fba62dcfb8aa22a51642", "html_url": "https://github.com/rust-lang/rust/commit/086c0dd33febb752b036fba62dcfb8aa22a51642"}], "stats": {"total": 74, "additions": 24, "deletions": 50}, "files": [{"sha": "8edd923390af4fed74c542de94885ecd1d303c2c", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=1d17c2129ec696d81e6c6caee8b1740dd9509090", "patch": "@@ -442,9 +442,7 @@ fn check_error_patterns(props: &TestProps,\n                         testfile: &Path,\n                         ProcRes: &ProcRes) {\n     if props.error_patterns.is_empty() {\n-        testfile.display().with_str(|s| {\n-            fatal(~\"no error pattern specified in \" + s);\n-        })\n+        fatal(~\"no error pattern specified in \" + testfile.display().as_maybe_owned().as_slice());\n     }\n \n     if ProcRes.status.success() {"}, {"sha": "606cb445262e9997cb602d1a63270af185d094f3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1d17c2129ec696d81e6c6caee8b1740dd9509090", "patch": "@@ -436,7 +436,7 @@ impl<'a> SourceCollector<'a> {\n         cur.push(p.filename().expect(\"source has no filename\") + bytes!(\".html\"));\n         let mut w = BufferedWriter::new(if_ok!(File::create(&cur)));\n \n-        let title = cur.filename_display().with_str(|s| format!(\"{} -- source\", s));\n+        let title = format!(\"{} -- source\", cur.filename_display());\n         let page = layout::Page {\n             title: title,\n             ty: \"source\","}, {"sha": "ed0ce20175086028e921520fc944b5b47ae0208e", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=1d17c2129ec696d81e6c6caee8b1740dd9509090", "patch": "@@ -70,7 +70,7 @@ use fmt;\n use iter::Iterator;\n use option::{Option, None, Some};\n use str;\n-use str::{OwnedStr, Str, StrSlice};\n+use str::{MaybeOwned, OwnedStr, Str, StrSlice, from_utf8_lossy};\n use to_str::ToStr;\n use vec;\n use vec::{CloneableVector, OwnedCloneableVector, OwnedVector, Vector};\n@@ -495,7 +495,7 @@ pub struct Display<'a, P> {\n \n impl<'a, P: GenericPath> fmt::Show for Display<'a, P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.with_str(|s| f.pad(s))\n+        self.as_maybe_owned().as_slice().fmt(f)\n     }\n }\n \n@@ -505,33 +505,25 @@ impl<'a, P: GenericPath> ToStr for Display<'a, P> {\n     /// If the path is not UTF-8, invalid sequences with be replaced with the\n     /// unicode replacement char. This involves allocation.\n     fn to_str(&self) -> ~str {\n-        if self.filename {\n-            match self.path.filename() {\n-                None => ~\"\",\n-                Some(v) => str::from_utf8_lossy(v).into_owned()\n-            }\n-        } else {\n-            str::from_utf8_lossy(self.path.as_vec()).into_owned()\n-        }\n+        self.as_maybe_owned().into_owned()\n     }\n }\n \n impl<'a, P: GenericPath> Display<'a, P> {\n-    /// Provides the path as a string to a closure\n+    /// Returns the path as a possibly-owned string.\n     ///\n     /// If the path is not UTF-8, invalid sequences will be replaced with the\n     /// unicode replacement char. This involves allocation.\n     #[inline]\n-    pub fn with_str<T>(&self, f: |&str| -> T) -> T {\n-        let opt = if self.filename { self.path.filename_str() }\n-                  else { self.path.as_str() };\n-        match opt {\n-            Some(s) => f(s),\n-            None => {\n-                let s = self.to_str();\n-                f(s.as_slice())\n+    pub fn as_maybe_owned(&self) -> MaybeOwned<'a> {\n+        from_utf8_lossy(if self.filename {\n+            match self.path.filename() {\n+                None => &[],\n+                Some(v) => v\n             }\n-        }\n+        } else {\n+            self.path.as_vec()\n+        })\n     }\n }\n "}, {"sha": "f8e9d0ae344047304060d44552ce82066f41b7fc", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=1d17c2129ec696d81e6c6caee8b1740dd9509090", "patch": "@@ -564,24 +564,16 @@ mod tests {\n         macro_rules! t(\n             ($path:expr, $exp:expr) => (\n                 {\n-                    let mut called = false;\n                     let path = Path::new($path);\n-                    path.display().with_str(|s| {\n-                        assert_eq!(s, $exp);\n-                        called = true;\n-                    });\n-                    assert!(called);\n+                    let mo = path.display().as_maybe_owned();\n+                    assert_eq!(mo.as_slice(), $exp);\n                 }\n             );\n             ($path:expr, $exp:expr, filename) => (\n                 {\n-                    let mut called = false;\n                     let path = Path::new($path);\n-                    path.filename_display().with_str(|s| {\n-                        assert_eq!(s, $exp);\n-                        called = true;\n-                    });\n-                    assert!(called);\n+                    let mo = path.filename_display().as_maybe_owned();\n+                    assert_eq!(mo.as_slice(), $exp);\n                 }\n             )\n         )"}, {"sha": "972b7d178a111f5a83be46559a6206ba75376eac", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=1d17c2129ec696d81e6c6caee8b1740dd9509090", "patch": "@@ -1278,20 +1278,12 @@ mod tests {\n         let path = Path::new(b!(\"\\\\\"));\n         assert_eq!(path.filename_display().to_str(), ~\"\");\n \n-        let mut called = false;\n         let path = Path::new(\"foo\");\n-        path.display().with_str(|s| {\n-            assert_eq!(s, \"foo\");\n-            called = true;\n-        });\n-        assert!(called);\n-        called = false;\n+        let mo = path.display().as_maybe_owned();\n+        assert_eq!(mo.as_slice(), \"foo\");\n         let path = Path::new(b!(\"\\\\\"));\n-        path.filename_display().with_str(|s| {\n-            assert_eq!(s, \"\");\n-            called = true;\n-        });\n-        assert!(called);\n+        let mo = path.filename_display().as_maybe_owned();\n+        assert_eq!(mo.as_slice(), \"\");\n     }\n \n     #[test]"}, {"sha": "93574f4d858506727526ac38ad7e5a9928c1dd91", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d17c2129ec696d81e6c6caee8b1740dd9509090/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1d17c2129ec696d81e6c6caee8b1740dd9509090", "patch": "@@ -4200,10 +4200,10 @@ impl Parser {\n                     let mut err = ~\"circular modules: \";\n                     let len = included_mod_stack.get().len();\n                     for p in included_mod_stack.get().slice(i, len).iter() {\n-                        p.display().with_str(|s| err.push_str(s));\n+                        err.push_str(p.display().as_maybe_owned().as_slice());\n                         err.push_str(\" -> \");\n                     }\n-                    path.display().with_str(|s| err.push_str(s));\n+                    err.push_str(path.display().as_maybe_owned().as_slice());\n                     self.span_fatal(id_sp, err);\n                 }\n                 None => ()"}]}