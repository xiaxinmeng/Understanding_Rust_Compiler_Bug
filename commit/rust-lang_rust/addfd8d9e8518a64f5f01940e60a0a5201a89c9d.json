{"sha": "addfd8d9e8518a64f5f01940e60a0a5201a89c9d", "node_id": "C_kwDOAAsO6NoAKGFkZGZkOGQ5ZTg1MThhNjRmNWYwMTk0MGU2MGEwYTUyMDFhODljOWQ", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-11-14T13:47:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-12T13:54:09Z"}, "message": "start SOA parser interface", "tree": {"sha": "fcbab73c553fcd7ed1790fe4ba503da52cb919aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcbab73c553fcd7ed1790fe4ba503da52cb919aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/addfd8d9e8518a64f5f01940e60a0a5201a89c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/addfd8d9e8518a64f5f01940e60a0a5201a89c9d", "html_url": "https://github.com/rust-lang/rust/commit/addfd8d9e8518a64f5f01940e60a0a5201a89c9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/addfd8d9e8518a64f5f01940e60a0a5201a89c9d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc628cfc8952faa370e650d055c06205e923e7e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc628cfc8952faa370e650d055c06205e923e7e6", "html_url": "https://github.com/rust-lang/rust/commit/fc628cfc8952faa370e650d055c06205e923e7e6"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "720ecf6fb62598613880c238e17b68b454bb6695", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/addfd8d9e8518a64f5f01940e60a0a5201a89c9d/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addfd8d9e8518a64f5f01940e60a0a5201a89c9d/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=addfd8d9e8518a64f5f01940e60a0a5201a89c9d", "patch": "@@ -20,6 +20,7 @@ mod syntax_kind;\n mod event;\n mod parser;\n mod grammar;\n+mod tokens;\n \n pub(crate) use token_set::TokenSet;\n "}, {"sha": "053d90a1724806dbb8400209f3c7b7af5f304933", "filename": "crates/parser/src/tokens.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/addfd8d9e8518a64f5f01940e60a0a5201a89c9d/crates%2Fparser%2Fsrc%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addfd8d9e8518a64f5f01940e60a0a5201a89c9d/crates%2Fparser%2Fsrc%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftokens.rs?ref=addfd8d9e8518a64f5f01940e60a0a5201a89c9d", "patch": "@@ -0,0 +1,58 @@\n+use crate::SyntaxKind;\n+\n+type bits = u64;\n+\n+pub type IdentKind = u8;\n+\n+/// Main input to the parser.\n+///\n+/// A sequence of tokens represented internally as a struct of arrays.\n+#[derive(Default)]\n+pub struct Tokens {\n+    kind: Vec<SyntaxKind>,\n+    joint: Vec<bits>,\n+    ident_kind: Vec<IdentKind>,\n+}\n+\n+impl Tokens {\n+    pub fn push(&mut self, was_joint: bool, kind: SyntaxKind) {\n+        self.push_impl(was_joint, kind, 0)\n+    }\n+    pub fn push_ident(&mut self, ident_kind: IdentKind) {\n+        self.push_impl(false, SyntaxKind::IDENT, ident_kind)\n+    }\n+    fn push_impl(&mut self, was_joint: bool, kind: SyntaxKind, ctx: IdentKind) {\n+        let idx = self.len();\n+        if idx % (bits::BITS as usize) == 0 {\n+            self.joint.push(0);\n+        }\n+        if was_joint && idx > 0 {\n+            self.set_joint(idx - 1);\n+        }\n+        self.kind.push(kind);\n+        self.ident_kind.push(ctx);\n+    }\n+    fn set_joint(&mut self, n: usize) {\n+        let (idx, b_idx) = self.bit_index(n);\n+        self.joint[idx] |= 1 << b_idx;\n+    }\n+    fn get_joint(&self, n: usize) -> bool {\n+        let (idx, b_idx) = self.bit_index(n);\n+        self.joint[idx] & 1 << b_idx != 0\n+    }\n+    fn bit_index(&self, n: usize) -> (usize, usize) {\n+        let idx = n / (bits::BITS as usize);\n+        let b_idx = n % (bits::BITS as usize);\n+        (idx, b_idx)\n+    }\n+\n+    pub fn len(&self) -> usize {\n+        self.kind.len()\n+    }\n+    pub(crate) fn get(&self, idx: usize) -> Option<(SyntaxKind, bool, IdentKind)> {\n+        let kind = *self.kind.get(idx)?;\n+        let joint = self.get_joint(idx);\n+        let ident_kind = *self.ident_kind.get(idx)?;\n+        Some((kind, joint, ident_kind))\n+    }\n+}"}]}