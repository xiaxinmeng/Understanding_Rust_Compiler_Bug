{"sha": "3f826a89740d6437f9ebd57d70f591a3ba8bbb1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODI2YTg5NzQwZDY0MzdmOWViZDU3ZDcwZjU5MWEzYmE4YmJiMWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-28T15:30:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-28T15:30:25Z"}, "message": "Rollup merge of #73774 - ecstatic-morse:liveness-of-projections, r=oli-obk\n\nMake liveness more precise for assignments to fields\n\nPreviously, we were too conservative and `x.field = 4` was treated as a \"use\" of `x`. Now it neither kills `x` (since other fields of `x` may still be live) nor marks it as live.\n\ncc @jonas-schievink, who ran into this problem.", "tree": {"sha": "1d1064d4f66464b0af6be73f14e44dc39fa808ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d1064d4f66464b0af6be73f14e44dc39fa808ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+LeSCRBK7hj4Ov3rIwAAdHIIAFZixI+KB0AojXzdFWc09qQe\nC2Wx+s1eAdBOBkfMC55kg8JOfrq+Lk0zDEU0I91Yu9Oqgj1dHmR57Va08pEDlRM+\nRWxfdcRDfodQHr/Ulm1adj3CR+X8AQO1+QnZ/2C7XL4miBmnEMcfzYBad26Ah0Ij\nprUmtBX7CP7JGtCbbfxvSoV4+l7gULPfrF+mi6AMalcsUsr12FJfnZXs6THs0Zl9\n07k16Sc5VznSHntPd3ZrrmXGdZcMhQx5/prhRyzMlQdxnBkBY/RinqgOTeBR/5cQ\nO5dwiTM9M7I0NI5WSIii34TPHiu38AnwOK9GXY70Y8QNY2Hhaf/7UBpMaZ3C1Do=\n=7ZEf\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d1064d4f66464b0af6be73f14e44dc39fa808ac\nparent ccc1bf79c8be0b4be549f6f82141104a34efec80\nparent ffcfaa11055a2ec65d326003da41da24d7a7d66c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593358225 -0700\ncommitter GitHub <noreply@github.com> 1593358225 -0700\n\nRollup merge of #73774 - ecstatic-morse:liveness-of-projections, r=oli-obk\n\nMake liveness more precise for assignments to fields\n\nPreviously, we were too conservative and `x.field = 4` was treated as a \"use\" of `x`. Now it neither kills `x` (since other fields of `x` may still be live) nor marks it as live.\n\ncc @jonas-schievink, who ran into this problem.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b", "html_url": "https://github.com/rust-lang/rust/commit/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc1bf79c8be0b4be549f6f82141104a34efec80", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc1bf79c8be0b4be549f6f82141104a34efec80", "html_url": "https://github.com/rust-lang/rust/commit/ccc1bf79c8be0b4be549f6f82141104a34efec80"}, {"sha": "ffcfaa11055a2ec65d326003da41da24d7a7d66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcfaa11055a2ec65d326003da41da24d7a7d66c", "html_url": "https://github.com/rust-lang/rust/commit/ffcfaa11055a2ec65d326003da41da24d7a7d66c"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "784b0bd9293e25f8b65072d726059ce503fa9f99", "filename": "src/librustc_mir/dataflow/impls/liveness.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fliveness.rs?ref=3f826a89740d6437f9ebd57d70f591a3ba8bbb1b", "patch": "@@ -92,7 +92,27 @@ impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {\n+    fn visit_place(&mut self, place: &mir::Place<'tcx>, context: PlaceContext, location: Location) {\n+        let mir::Place { projection, local } = *place;\n+\n+        // We purposefully do not call `super_place` here to avoid calling `visit_local` for this\n+        // place with one of the `Projection` variants of `PlaceContext`.\n+        self.visit_projection(local, projection, context, location);\n+\n+        match DefUse::for_place(context) {\n+            // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a use.\n+            Some(_) if place.is_indirect() => self.0.gen(local),\n+\n+            Some(DefUse::Def) if projection.is_empty() => self.0.kill(local),\n+            Some(DefUse::Use) => self.0.gen(local),\n+            _ => {}\n+        }\n+    }\n+\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+        // Because we do not call `super_place` above, `visit_local` is only called for locals that\n+        // do not appear as part of  a `Place` in the MIR. This handles cases like the implicit use\n+        // of the return place in a `Return` terminator or the index in an `Index` projection.\n         match DefUse::for_place(context) {\n             Some(DefUse::Def) => self.0.kill(local),\n             Some(DefUse::Use) => self.0.gen(local),\n@@ -126,19 +146,22 @@ impl DefUse {\n                 | MutatingUseContext::AsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::Drop\n-                | MutatingUseContext::Projection\n                 | MutatingUseContext::Retag,\n             )\n             | PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::AddressOf\n                 | NonMutatingUseContext::Copy\n                 | NonMutatingUseContext::Inspect\n                 | NonMutatingUseContext::Move\n-                | NonMutatingUseContext::Projection\n                 | NonMutatingUseContext::ShallowBorrow\n                 | NonMutatingUseContext::SharedBorrow\n                 | NonMutatingUseContext::UniqueBorrow,\n             ) => Some(DefUse::Use),\n+\n+            PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => {\n+                unreachable!(\"A projection could be a def or a use and must be handled separately\")\n+            }\n         }\n     }\n }"}, {"sha": "486f31b635dca079dd45cf862dec5aa00607b843", "filename": "src/test/ui/mir-dataflow/liveness-projection.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.rs?ref=3f826a89740d6437f9ebd57d70f591a3ba8bbb1b", "patch": "@@ -0,0 +1,32 @@\n+#![feature(core_intrinsics, rustc_attrs)]\n+\n+use std::intrinsics::rustc_peek;\n+\n+#[rustc_mir(rustc_peek_liveness, stop_after_dataflow)]\n+fn foo() {\n+    {\n+        let mut x: (i32, i32) = (42, 0);\n+\n+        // Assignment to a projection does not cause `x` to become live\n+        unsafe { rustc_peek(x); } //~ ERROR bit not set\n+        x.1 = 42;\n+\n+        x = (0, 42);\n+\n+        // ...but a read from a projection does.\n+        unsafe { rustc_peek(x); }\n+        println!(\"{}\", x.1);\n+    }\n+\n+    {\n+        let mut x = 42;\n+\n+        // Derefs are treated like a read of a local even if they are on the LHS of an assignment.\n+        let p = &mut x;\n+        unsafe { rustc_peek(&p); }\n+        *p = 24;\n+        unsafe { rustc_peek(&p); } //~ ERROR bit not set\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f9480c880908adeddfe3945cc96e563ae03b4c1e", "filename": "src/test/ui/mir-dataflow/liveness-projection.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f826a89740d6437f9ebd57d70f591a3ba8bbb1b/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Fliveness-projection.stderr?ref=3f826a89740d6437f9ebd57d70f591a3ba8bbb1b", "patch": "@@ -0,0 +1,16 @@\n+error: rustc_peek: bit not set\n+  --> $DIR/liveness-projection.rs:11:18\n+   |\n+LL |         unsafe { rustc_peek(x); }\n+   |                  ^^^^^^^^^^^^^\n+\n+error: rustc_peek: bit not set\n+  --> $DIR/liveness-projection.rs:28:18\n+   |\n+LL |         unsafe { rustc_peek(&p); }\n+   |                  ^^^^^^^^^^^^^^\n+\n+error: stop_after_dataflow ended compilation\n+\n+error: aborting due to 3 previous errors\n+"}]}