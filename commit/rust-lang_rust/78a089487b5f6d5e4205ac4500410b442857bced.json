{"sha": "78a089487b5f6d5e4205ac4500410b442857bced", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YTA4OTQ4N2I1ZjZkNWU0MjA1YWM0NTAwNDEwYjQ0Mjg1N2JjZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T03:42:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T03:42:53Z"}, "message": "Auto merge of #74430 - Manishearth:stabilize-intra-doc, r=Manishearth\n\nStabilize intra-doc links\n\nFixes https://github.com/rust-lang/rust/issues/43466\n\nThanks to the great work of `@jyn514` in getting the [cross-crate reexport issue](https://github.com/rust-lang/rust/issues/65983) in intra-rustdoc links fixed, I think we're now in a position to stabilize this feature.\n\nThe tracking issue currently has two unresolved issues:\n\n - <s>behavior around doc(hidden): This is fixed in https://github.com/rust-lang/rust/pull/73365, which is just waiting for CI and should land tomorrow. It's also a pretty niche bug so while I expect it to land soon I don't think we need to block stabilization on it anyway.</s>\n - Non-identifier primitive types like slices: This was not a part of the original RFC anyway, and is a pretty niche use case\n\nThe feature itself, sans https://github.com/rust-lang/rust/issues/65983, has been shipped on nightly for three years now, with people using it on docs.rs. https://github.com/rust-lang/rust/issues/65983 itself is not an overwhelmingly central bit of functionality; the reason we elected to block stabilization on it was that back in 2017 it was not possible to fix the issue without some major refactorings of resolve, and we did not want to stabilize something that had such a potentially unfixable bug.\n\nGiven that we've fixed it, I see no reason to delay stabilization on this long awaited feature. It's possible that the latest patches have problems, however we _have_ done crater runs of some of the crucial parts. Furthermore, that's what the release trains are for, we will have a solid three months to let it ride the trains before it actually hits the stable compiler.\n\nr? `@rust-lang/rustdoc`", "tree": {"sha": "61d23e0cadbeae450abd01c3408d0c6d23cc3f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61d23e0cadbeae450abd01c3408d0c6d23cc3f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a089487b5f6d5e4205ac4500410b442857bced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a089487b5f6d5e4205ac4500410b442857bced", "html_url": "https://github.com/rust-lang/rust/commit/78a089487b5f6d5e4205ac4500410b442857bced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a089487b5f6d5e4205ac4500410b442857bced/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "html_url": "https://github.com/rust-lang/rust/commit/7b240a1262c467a5a0f9d5dcad9a500a56b67d34"}, {"sha": "6928041c0a992093a7752ae3c04090caebcd4515", "url": "https://api.github.com/repos/rust-lang/rust/commits/6928041c0a992093a7752ae3c04090caebcd4515", "html_url": "https://github.com/rust-lang/rust/commit/6928041c0a992093a7752ae3c04090caebcd4515"}], "stats": {"total": 176, "additions": 107, "deletions": 69}, "files": [{"sha": "93454b4f9097a34e5bfd8fed5fa3382a5da917df", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=78a089487b5f6d5e4205ac4500410b442857bced", "patch": "@@ -5,6 +5,7 @@\n - [Command-line arguments](command-line-arguments.md)\n - [The `#[doc]` attribute](the-doc-attribute.md)\n - [Documentation tests](documentation-tests.md)\n+- [Linking to items by name](linking-to-items-by-name.md)\n - [Lints](lints.md)\n - [Passes](passes.md)\n - [Advanced Features](advanced-features.md)"}, {"sha": "5e46ef583f60c6d5e6101956fc34e4e29e08fa2d", "filename": "src/doc/rustdoc/src/linking-to-items-by-name.md", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md?ref=78a089487b5f6d5e4205ac4500410b442857bced", "patch": "@@ -0,0 +1,65 @@\n+# Linking to items by name\n+\n+Rustdoc is capable of directly linking to other rustdoc pages in Markdown documentation using the path of item as a link.\n+\n+For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n+\n+```rust\n+/// This struct is not [Bar]\n+pub struct Foo1;\n+\n+/// This struct is also not [bar](Bar)\n+pub struct Foo2;\n+\n+/// This struct is also not [bar][b]\n+///\n+/// [b]: Bar\n+pub struct Foo3;\n+\n+/// This struct is also not [`Bar`]\n+pub struct Foo4;\n+\n+pub struct Bar;\n+```\n+\n+You can refer to anything in scope, and use paths, including `Self`, `self`, `super`, and `crate`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros respectively. Backticks around the link will be stripped.\n+\n+```rust,edition2018\n+use std::sync::mpsc::Receiver;\n+\n+/// This is an version of [`Receiver`], with support for [`std::future`].\n+///\n+/// You can obtain a [`std::future::Future`] by calling [`Self::recv()`].\n+pub struct AsyncReceiver<T> {\n+    sender: Receiver<T>\n+}\n+\n+impl<T> AsyncReceiver<T> {\n+    pub async fn recv() -> T {\n+        unimplemented!()\n+    }\n+}\n+```\n+\n+You can also link to sections using URL fragment specifiers:\n+\n+```rust\n+/// This is a special implementation of [positional parameters]\n+///\n+/// [positional parameters]: std::fmt#formatting-parameters\n+struct MySpecialFormatter;\n+```\n+\n+Paths in Rust have three namespaces: type, value, and macro. Items from these namespaces are allowed to overlap. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like  `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `function@`, `mod@`, `fn@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n+\n+```rust\n+/// See also: [`Foo`](struct@Foo)\n+struct Bar;\n+\n+/// This is different from [`Foo`](fn@Foo)\n+struct Foo {}\n+\n+fn Foo() {}\n+```\n+\n+Note: Because of how `macro_rules` macros are scoped in Rust, the intra-doc links of a `macro_rules` macro will be resolved relative to the crate root, as opposed to the module it is defined in."}, {"sha": "9ff897710f6501e0d18e4e21a14a44c71e007587", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=78a089487b5f6d5e4205ac4500410b442857bced", "patch": "@@ -13,18 +13,53 @@ Here is the list of the lints provided by `rustdoc`:\n \n ## broken_intra_doc_links\n \n-This lint **warns by default** and is **nightly-only**. This lint detects when\n-an intra-doc link fails to get resolved. For example:\n+This lint **warns by default**. This lint detects when an [intra-doc link] fails to get resolved. For example:\n+\n+ [intra-doc link]: linking-to-items-by-name.html\n \n ```rust\n-/// I want to link to [`Inexistent`] but it doesn't exist!\n+/// I want to link to [`Nonexistent`] but it doesn't exist!\n pub fn foo() {}\n ```\n \n You'll get a warning saying:\n \n ```text\n-error: `[`Inexistent`]` cannot be resolved, ignoring it...\n+warning: unresolved link to `Nonexistent`\n+ --> test.rs:1:24\n+  |\n+1 | /// I want to link to [`Nonexistent`] but it doesn't exist!\n+  |                        ^^^^^^^^^^^^^ no item named `Nonexistent` in `test`\n+```\n+\n+It will also warn when there is an ambiguity and suggest how to disambiguate:\n+\n+```rust\n+/// [`Foo`]\n+pub fn function() {}\n+\n+pub enum Foo {}\n+\n+pub fn Foo(){}\n+```\n+\n+```text\n+warning: `Foo` is both an enum and a function\n+ --> test.rs:1:6\n+  |\n+1 | /// [`Foo`]\n+  |      ^^^^^ ambiguous link\n+  |\n+  = note: `#[warn(broken_intra_doc_links)]` on by default\n+help: to link to the enum, prefix with the item type\n+  |\n+1 | /// [`enum@Foo`]\n+  |      ^^^^^^^^^^\n+help: to link to the function, add parentheses\n+  |\n+1 | /// [`Foo()`]\n+  |      ^^^^^^^\n+\n ```\n \n ## missing_docs"}, {"sha": "e4d8818b56cadbca022f8e43fbb8d4863db11af5", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/78a089487b5f6d5e4205ac4500410b442857bced/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=78a089487b5f6d5e4205ac4500410b442857bced", "patch": "@@ -38,63 +38,6 @@ future.\n Attempting to use these error numbers on stable will result in the code sample being interpreted as\n plain text.\n \n-### Linking to items by name\n-\n-Rustdoc is capable of directly linking to other rustdoc pages in Markdown documentation using the path of item as a link.\n-\n-For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n-\n-```rust\n-/// This struct is not [Bar]\n-pub struct Foo1;\n-\n-/// This struct is also not [bar](Bar)\n-pub struct Foo2;\n-\n-/// This struct is also not [bar][b]\n-///\n-/// [b]: Bar\n-pub struct Foo3;\n-\n-/// This struct is also not [`Bar`]\n-pub struct Foo4;\n-\n-pub struct Bar;\n-```\n-\n-You can refer to anything in scope, and use paths, including `Self`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros respectively.\n-\n-```rust,edition2018\n-use std::sync::mpsc::Receiver;\n-\n-/// This is an version of [`Receiver`], with support for [`std::future`].\n-///\n-/// You can obtain a [`std::future::Future`] by calling [`Self::recv()`].\n-pub struct AsyncReceiver<T> {\n-    sender: Receiver<T>\n-}\n-\n-impl<T> AsyncReceiver<T> {\n-    pub async fn recv() -> T {\n-        unimplemented!()\n-    }\n-}\n-```\n-\n-Paths in Rust have three namespaces: type, value, and macro. Items from these namespaces are allowed to overlap. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `function@`, `mod@`, `fn@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n-\n-```rust\n-/// See also: [`Foo`](struct@Foo)\n-struct Bar;\n-\n-/// This is different from [`Foo`](fn@Foo)\n-struct Foo {}\n-\n-fn Foo() {}\n-```\n-\n-Note: Because of how `macro_rules` macros are scoped in Rust, the intra-doc links of a `macro_rules` macro will be resolved relative to the crate root, as opposed to the module it is defined in.\n-\n ## Extensions to the `#[doc]` attribute\n \n These features operate by extending the `#[doc]` attribute, and thus can be caught by the compiler"}, {"sha": "93016c401def1f00f7d82bc128eda36abc0ee68f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78a089487b5f6d5e4205ac4500410b442857bced/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a089487b5f6d5e4205ac4500410b442857bced/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=78a089487b5f6d5e4205ac4500410b442857bced", "patch": "@@ -2,7 +2,6 @@ use rustc_ast as ast;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtensionKind;\n-use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n use rustc_hir::def::{\n     DefKind,\n@@ -38,13 +37,8 @@ pub const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n };\n \n pub fn collect_intra_doc_links(krate: Crate, cx: &DocContext<'_>) -> Crate {\n-    if !UnstableFeatures::from_environment().is_nightly_build() {\n-        krate\n-    } else {\n-        let mut coll = LinkCollector::new(cx);\n-\n-        coll.fold_crate(krate)\n-    }\n+    let mut coll = LinkCollector::new(cx);\n+    coll.fold_crate(krate)\n }\n \n enum ErrorKind<'a> {"}]}