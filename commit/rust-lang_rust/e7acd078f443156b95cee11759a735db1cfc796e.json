{"sha": "e7acd078f443156b95cee11759a735db1cfc796e", "node_id": "C_kwDOAAsO6NoAKGU3YWNkMDc4ZjQ0MzE1NmI5NWNlZTExNzU5YTczNWRiMWNmYzc5NmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-09T04:03:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-09T04:03:20Z"}, "message": "Auto merge of #107828 - compiler-errors:rollup-gyj6dgj, r=compiler-errors\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #107317 (Implement `AsFd` and `AsRawFd` for `Rc`)\n - #107429 (Stabilize feature `cstr_from_bytes_until_nul`)\n - #107713 (Extend `BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE`.)\n - #107761 (Replace a command line flag with an env var to allow tools to initialize the tracing loggers at their own discretion)\n - #107790 ( x.py fails all downloads that use a tempdir with snap curl #107722)\n - #107799 (correctly update goals in the cache)\n - #107813 (Do not eagerly recover for bad `impl Trait` types in macros)\n - #107817 (rustdoc: use svgo to shrink `wheel.svg`)\n - #107819 (Set `rust-analyzer.check.invocationLocation` to `root`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dd40e9d754e085d07687fcfaf62a031dac9177c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd40e9d754e085d07687fcfaf62a031dac9177c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7acd078f443156b95cee11759a735db1cfc796e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7acd078f443156b95cee11759a735db1cfc796e", "html_url": "https://github.com/rust-lang/rust/commit/e7acd078f443156b95cee11759a735db1cfc796e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7acd078f443156b95cee11759a735db1cfc796e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "575d424c94e0d4feea8cf4fcf04d47b83f28eaef", "url": "https://api.github.com/repos/rust-lang/rust/commits/575d424c94e0d4feea8cf4fcf04d47b83f28eaef", "html_url": "https://github.com/rust-lang/rust/commit/575d424c94e0d4feea8cf4fcf04d47b83f28eaef"}, {"sha": "3e07554fd73079a38a7d659676c2ada99db47d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e07554fd73079a38a7d659676c2ada99db47d93", "html_url": "https://github.com/rust-lang/rust/commit/3e07554fd73079a38a7d659676c2ada99db47d93"}], "stats": {"total": 321, "additions": 227, "deletions": 94}, "files": [{"sha": "970b9115d8d79639aa232db382c0936dbad366e9", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -1557,31 +1557,46 @@ impl<'a> TraitDef<'a> {\n                             }),\n                         ),\n                     );\n-                    // In general, fields in packed structs are copied via a\n-                    // block, e.g. `&{self.0}`. The one exception is `[u8]`\n-                    // fields, which cannot be copied and also never cause\n-                    // unaligned references. This exception is allowed to\n-                    // handle the `FlexZeroSlice` type in the `zerovec` crate\n-                    // within `icu4x-0.9.0`.\n-                    //\n-                    // Once use of `icu4x-0.9.0` has dropped sufficiently, this\n-                    // exception should be removed.\n-                    let is_u8_slice = if let TyKind::Slice(ty) = &struct_field.ty.kind &&\n-                        let TyKind::Path(None, rustc_ast::Path { segments, .. }) = &ty.kind &&\n-                        let [seg] = segments.as_slice() &&\n-                        seg.ident.name == sym::u8 && seg.args.is_none()\n-                    {\n-                        true\n-                    } else {\n-                        false\n-                    };\n                     if is_packed {\n-                        if is_u8_slice {\n+                        // In general, fields in packed structs are copied via a\n+                        // block, e.g. `&{self.0}`. The two exceptions are `[u8]`\n+                        // and `str` fields, which cannot be copied and also never\n+                        // cause unaligned references. These exceptions are allowed\n+                        // to handle the `FlexZeroSlice` type in the `zerovec`\n+                        // crate within `icu4x-0.9.0`.\n+                        //\n+                        // Once use of `icu4x-0.9.0` has dropped sufficiently, this\n+                        // exception should be removed.\n+                        let is_simple_path = |ty: &P<ast::Ty>, sym| {\n+                            if let TyKind::Path(None, ast::Path { segments, .. }) = &ty.kind &&\n+                                let [seg] = segments.as_slice() &&\n+                                seg.ident.name == sym && seg.args.is_none()\n+                            {\n+                                true\n+                            } else {\n+                                false\n+                            }\n+                        };\n+\n+                        let exception = if let TyKind::Slice(ty) = &struct_field.ty.kind &&\n+                            is_simple_path(ty, sym::u8)\n+                        {\n+                            Some(\"byte\")\n+                        } else if is_simple_path(&struct_field.ty, sym::str) {\n+                            Some(\"string\")\n+                        } else {\n+                            None\n+                        };\n+\n+                        if let Some(ty) = exception {\n                             cx.sess.parse_sess.buffer_lint_with_diagnostic(\n                                 BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE,\n                                 sp,\n                                 ast::CRATE_NODE_ID,\n-                                \"byte slice in a packed struct that derives a built-in trait\",\n+                                &format!(\n+                                    \"{} slice in a packed struct that derives a built-in trait\",\n+                                    ty\n+                                ),\n                                 rustc_lint_defs::BuiltinLintDiagnostics::ByteSliceInPackedStructWithDerive\n                             );\n                         } else {"}, {"sha": "bdf2978cee2587f90fd93661ca1d6151965293cd", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -229,10 +229,6 @@ fn run_compiler(\n         registry: diagnostics_registry(),\n     };\n \n-    if !tracing::dispatcher::has_been_set() {\n-        init_rustc_env_logger_with_backtrace_option(&config.opts.unstable_opts.log_backtrace);\n-    }\n-\n     match make_input(config.opts.error_format, &matches.free) {\n         Err(reported) => return Err(reported),\n         Ok(Some(input)) => {\n@@ -1251,16 +1247,7 @@ pub fn install_ice_hook() {\n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version.\n pub fn init_rustc_env_logger() {\n-    init_rustc_env_logger_with_backtrace_option(&None);\n-}\n-\n-/// This allows tools to enable rust logging without having to magically match rustc's\n-/// tracing crate version. In contrast to `init_rustc_env_logger` it allows you to\n-/// choose a target module you wish to show backtraces along with its logging.\n-pub fn init_rustc_env_logger_with_backtrace_option(backtrace_target: &Option<String>) {\n-    if let Err(error) = rustc_log::init_rustc_env_logger_with_backtrace_option(backtrace_target) {\n-        early_error(ErrorOutputType::default(), &error.to_string());\n-    }\n+    init_env_logger(\"RUSTC_LOG\");\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's\n@@ -1324,6 +1311,7 @@ mod signal_handler {\n pub fn main() -> ! {\n     let start_time = Instant::now();\n     let start_rss = get_resident_set_size();\n+    init_rustc_env_logger();\n     signal_handler::install();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();"}, {"sha": "5165ee424e31ba8ad5d9906fa8300ebad0214aa0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -758,7 +758,6 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n-    tracked!(log_backtrace, Some(\"filter\".to_string()));\n     tracked!(maximal_hir_to_mir_coverage, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);"}, {"sha": "9d8ad9d9ed9f6f5c7d2fa66b7e0d656ba2393581", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -4073,7 +4073,8 @@ declare_lint! {\n \n declare_lint! {\n     /// The `byte_slice_in_packed_struct_with_derive` lint detects cases where a byte slice field\n-    /// (`[u8]`) is used in a `packed` struct that derives one or more built-in traits.\n+    /// (`[u8]`) or string slice field (`str`) is used in a `packed` struct that derives one or\n+    /// more built-in traits.\n     ///\n     /// ### Example\n     ///\n@@ -4091,11 +4092,11 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// This was previously accepted but is being phased out, because fields in packed structs are\n-    /// now required to implement `Copy` for `derive` to work. Byte slices are a temporary\n-    /// exception because certain crates depended on them.\n+    /// now required to implement `Copy` for `derive` to work. Byte slices and string slices are a\n+    /// temporary exception because certain crates depended on them.\n     pub BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE,\n     Warn,\n-    \"`[u8]` slice used in a packed struct with `derive`\",\n+    \"`[u8]` or `str` used in a packed struct with `derive`\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #107457 <https://github.com/rust-lang/rust/issues/107457>\",\n         reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,"}, {"sha": "019fdc30dcec5606fb4d8e0f9a9f045480c19dce", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -54,25 +54,12 @@ use tracing_subscriber::fmt::{\n use tracing_subscriber::layer::SubscriberExt;\n \n pub fn init_rustc_env_logger() -> Result<(), Error> {\n-    init_rustc_env_logger_with_backtrace_option(&None)\n-}\n-\n-pub fn init_rustc_env_logger_with_backtrace_option(\n-    backtrace_target: &Option<String>,\n-) -> Result<(), Error> {\n-    init_env_logger_with_backtrace_option(\"RUSTC_LOG\", backtrace_target)\n+    init_env_logger(\"RUSTC_LOG\")\n }\n \n /// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) -> Result<(), Error> {\n-    init_env_logger_with_backtrace_option(env, &None)\n-}\n-\n-pub fn init_env_logger_with_backtrace_option(\n-    env: &str,\n-    backtrace_target: &Option<String>,\n-) -> Result<(), Error> {\n     let filter = match env::var(env) {\n         Ok(env) => EnvFilter::new(env),\n         _ => EnvFilter::default().add_directive(Directive::from(LevelFilter::WARN)),\n@@ -106,16 +93,16 @@ pub fn init_env_logger_with_backtrace_option(\n     let layer = layer.with_thread_ids(true).with_thread_names(true);\n \n     let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n-    match backtrace_target {\n-        Some(str) => {\n+    match env::var(format!(\"{env}_BACKTRACE\")) {\n+        Ok(str) => {\n             let fmt_layer = tracing_subscriber::fmt::layer()\n                 .with_writer(io::stderr)\n                 .without_time()\n                 .event_format(BacktraceFormatter { backtrace_target: str.to_string() });\n             let subscriber = subscriber.with(fmt_layer);\n             tracing::subscriber::set_global_default(subscriber).unwrap();\n         }\n-        None => {\n+        Err(_) => {\n             tracing::subscriber::set_global_default(subscriber).unwrap();\n         }\n     };"}, {"sha": "5b92563fc358b68b1bbf824feacef2d9542e4a09", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -694,8 +694,9 @@ impl<'a> Parser<'a> {\n         // `where`, so stop if it's it.\n         // We also continue if we find types (not traits), again for error recovery.\n         while self.can_begin_bound()\n-            || self.token.can_begin_type()\n-            || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))\n+            || (self.may_recover()\n+                && (self.token.can_begin_type()\n+                    || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))))\n         {\n             if self.token.is_keyword(kw::Dyn) {\n                 // Account for `&dyn Trait + dyn Other`."}, {"sha": "61cb81aec3de07d583251348574cbc3cfeac54ec", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -1413,8 +1413,6 @@ options! {\n         \"what location details should be tracked when using caller_location, either \\\n         `none`, or a comma separated list of location details, for which \\\n         valid options are `file`, `line`, and `column` (default: `file,line,column`)\"),\n-    log_backtrace: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"add a backtrace along with logging\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "a2ca4bc189c87faae28f66fa694633ab1ade0125", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -7,7 +7,7 @@ use cache::ProvisionalCache;\n use overflow::OverflowData;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::TyCtxt;\n-use std::collections::hash_map::Entry;\n+use std::{collections::hash_map::Entry, mem};\n \n rustc_index::newtype_index! {\n     pub struct StackDepth {}\n@@ -134,12 +134,15 @@ impl<'tcx> SearchGraph<'tcx> {\n         let provisional_entry_index = *cache.lookup_table.get(&goal).unwrap();\n         let provisional_entry = &mut cache.entries[provisional_entry_index];\n         let depth = provisional_entry.depth;\n+        // We eagerly update the response in the cache here. If we have to reevaluate\n+        // this goal we use the new response when hitting a cycle, and we definitely\n+        // want to access the final response whenever we look at the cache.\n+        let prev_response = mem::replace(&mut provisional_entry.response, response);\n+\n         // Was the current goal the root of a cycle and was the provisional response\n         // different from the final one.\n-        if has_been_used && provisional_entry.response != response {\n-            // If so, update the provisional reponse for this goal...\n-            provisional_entry.response = response;\n-            // ...remove all entries whose result depends on this goal\n+        if has_been_used && prev_response != response {\n+            // If so, remove all entries whose result depends on this goal\n             // from the provisional cache...\n             //\n             // That's not completely correct, as a nested goal can also"}, {"sha": "e9cc3875f683b1cf09c301775eb249ce87734920", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -116,7 +116,6 @@\n #![feature(const_eval_select)]\n #![feature(const_pin)]\n #![feature(const_waker)]\n-#![feature(cstr_from_bytes_until_nul)]\n #![feature(dispatch_from_dyn)]\n #![feature(error_generic_member_access)]\n #![feature(error_in_core)]"}, {"sha": "e11a5e99184cb47bdee8bdc8a9d9c92ee2319268", "filename": "library/core/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -505,7 +505,7 @@ impl Error for crate::ffi::FromBytesWithNulError {\n     }\n }\n \n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n impl Error for crate::ffi::FromBytesUntilNulError {}\n \n #[unstable(feature = \"get_many_mut\", issue = \"104642\")]"}, {"sha": "82e5fa75ded841e0299b63574cf4a658066020ec", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -150,10 +150,10 @@ impl FromBytesWithNulError {\n /// This error is created by the [`CStr::from_bytes_until_nul`] method.\n ///\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n pub struct FromBytesUntilNulError(());\n \n-#[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n impl fmt::Display for FromBytesUntilNulError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"data provided does not contain a nul\")\n@@ -306,8 +306,6 @@ impl CStr {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(cstr_from_bytes_until_nul)]\n-    ///\n     /// use std::ffi::CStr;\n     ///\n     /// let mut buffer = [0u8; 16];\n@@ -322,8 +320,9 @@ impl CStr {\n     /// assert_eq!(c_str.to_str().unwrap(), \"AAAAAAAA\");\n     /// ```\n     ///\n-    #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n-    #[rustc_const_unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    #[rustc_allow_const_fn_unstable(const_slice_index)]\n+    #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {"}, {"sha": "98c8349eb602484c795f9514f697616558086b53", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -16,25 +16,29 @@ const USIZE_BYTES: usize = mem::size_of::<usize>();\n /// bytes where the borrow propagated all the way to the most significant\n /// bit.\"\n #[inline]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn contains_zero_byte(x: usize) -> bool {\n     x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0\n }\n \n-#[cfg(target_pointer_width = \"16\")]\n #[inline]\n+#[cfg(target_pointer_width = \"16\")]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn repeat_byte(b: u8) -> usize {\n     (b as usize) << 8 | b as usize\n }\n \n-#[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n+#[cfg(not(target_pointer_width = \"16\"))]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn repeat_byte(b: u8) -> usize {\n     (b as usize) * (usize::MAX / 255)\n }\n \n /// Returns the first index matching the byte `x` in `text`.\n-#[must_use]\n #[inline]\n+#[must_use]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Fast path for small slices.\n     if text.len() < 2 * USIZE_BYTES {\n@@ -45,6 +49,7 @@ pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n }\n \n #[inline]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn memchr_naive(x: u8, text: &[u8]) -> Option<usize> {\n     let mut i = 0;\n \n@@ -60,6 +65,10 @@ const fn memchr_naive(x: u8, text: &[u8]) -> Option<usize> {\n     None\n }\n \n+#[rustc_allow_const_fn_unstable(const_cmp)]\n+#[rustc_allow_const_fn_unstable(const_slice_index)]\n+#[rustc_allow_const_fn_unstable(const_align_offset)]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn memchr_aligned(x: u8, text: &[u8]) -> Option<usize> {\n     // Scan for a single byte value by reading two `usize` words at a time.\n     //"}, {"sha": "cd9f74820ae9b576fbe529b0b6995ba23fcbd90f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -278,7 +278,6 @@\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n #![feature(core_intrinsics)]\n-#![feature(cstr_from_bytes_until_nul)]\n #![feature(cstr_internals)]\n #![feature(duration_constants)]\n #![feature(error_generic_member_access)]"}, {"sha": "439b8d52a2d8673b62486a2c75da854f65ef2386", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -396,6 +396,14 @@ impl<T: AsFd> AsFd for crate::sync::Arc<T> {\n     }\n }\n \n+#[stable(feature = \"asfd_rc\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T: AsFd> AsFd for crate::rc::Rc<T> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        (**self).as_fd()\n+    }\n+}\n+\n #[stable(feature = \"asfd_ptrs\", since = \"1.64.0\")]\n impl<T: AsFd> AsFd for Box<T> {\n     #[inline]"}, {"sha": "c138162f1ab08b5cad949162ec687a9eb1ea4467", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -244,6 +244,14 @@ impl<T: AsRawFd> AsRawFd for crate::sync::Arc<T> {\n     }\n }\n \n+#[stable(feature = \"asfd_rc\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T: AsRawFd> AsRawFd for crate::rc::Rc<T> {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        (**self).as_raw_fd()\n+    }\n+}\n+\n #[stable(feature = \"asrawfd_ptrs\", since = \"1.63.0\")]\n impl<T: AsRawFd> AsRawFd for Box<T> {\n     #[inline]"}, {"sha": "c298817895cd17c00cfdea87d99b01f5c4a4946e", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -87,14 +87,16 @@ def _download(path, url, probably_big, verbose, exception):\n         # If curl is not present on Win32, we should not sys.exit\n         #   but raise `CalledProcessError` or `OSError` instead\n         require([\"curl\", \"--version\"], exception=platform_is_win32)\n-        run([\"curl\", option,\n-             \"-L\", # Follow redirect.\n-             \"-y\", \"30\", \"-Y\", \"10\",    # timeout if speed is < 10 bytes/sec for > 30 seconds\n-             \"--connect-timeout\", \"30\",  # timeout if cannot connect within 30 seconds\n-             \"--retry\", \"3\", \"-Sf\", \"-o\", path, url],\n-            verbose=verbose,\n-            exception=True, # Will raise RuntimeError on failure\n-        )\n+        with open(path, \"wb\") as outfile:\n+            run([\"curl\", option,\n+                \"-L\", # Follow redirect.\n+                \"-y\", \"30\", \"-Y\", \"10\",    # timeout if speed is < 10 bytes/sec for > 30 seconds\n+                \"--connect-timeout\", \"30\",  # timeout if cannot connect within 30 seconds\n+                \"--retry\", \"3\", \"-Sf\", url],\n+                stdout=outfile,    #Implements cli redirect operator '>'\n+                verbose=verbose,\n+                exception=True, # Will raise RuntimeError on failure\n+            )\n     except (subprocess.CalledProcessError, OSError, RuntimeError):\n         # see http://serverfault.com/questions/301128/how-to-download\n         if platform_is_win32:"}, {"sha": "2b613ad50ee482f9011748d46554b6ead681a80f", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -24,10 +24,12 @@ pub enum Profile {\n }\n \n /// A list of historical hashes of `src/etc/vscode_settings.json`.\n-/// New entries should be appended whenever this is updated so we can detected\n+/// New entries should be appended whenever this is updated so we can detect\n /// outdated vs. user-modified settings files.\n-static SETTINGS_HASHES: &[&str] =\n-    &[\"ea67e259dedf60d4429b6c349a564ffcd1563cf41c920a856d1f5b16b4701ac8\"];\n+static SETTINGS_HASHES: &[&str] = &[\n+    \"ea67e259dedf60d4429b6c349a564ffcd1563cf41c920a856d1f5b16b4701ac8\",\n+    \"56e7bf011c71c5d81e0bf42e84938111847a810eee69d906bba494ea90b51922\",\n+];\n static VSCODE_SETTINGS: &str = include_str!(\"../etc/vscode_settings.json\");\n \n impl Profile {"}, {"sha": "04c34ce91c0b7aa72d05371e94e4a0d08f789cad", "filename": "src/etc/vscode_settings.json", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/src%2Fetc%2Fvscode_settings.json", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/src%2Fetc%2Fvscode_settings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvscode_settings.json?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -1,4 +1,6 @@\n {\n+    \"rust-analyzer.check.invocationLocation\": \"root\",\n+    \"rust-analyzer.check.invocationStrategy\": \"once\",\n     \"rust-analyzer.checkOnSave.overrideCommand\": [\n         \"python3\",\n         \"x.py\","}, {"sha": "83c07f63d10ab22413adc3b12d2ed4bc43394cf3", "filename": "src/librustdoc/html/static/images/wheel.svg", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fwheel.svg", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fwheel.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fimages%2Fwheel.svg?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -1 +1 @@\n-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"Capa_1\" width=\"27.434\" height=\"29.5\" enable-background=\"new 0 0 27.434 29.5\" version=\"1.1\" viewBox=\"0 0 27.434 29.5\" xml:space=\"preserve\"><g><path d=\"M27.315,18.389c-0.165-0.604-0.509-1.113-0.981-1.459c-0.042-0.144-0.083-0.429-0.015-0.761l0.037-0.177v-0.182V14.8 c0-1.247-0.006-1.277-0.048-1.472c-0.076-0.354-0.035-0.653,0.007-0.803c0.477-0.346,0.828-0.861,0.996-1.476 c0.261-0.956,0.076-2.091-0.508-3.114l-0.591-1.032c-0.746-1.307-1.965-2.119-3.182-2.119c-0.378,0-0.75,0.081-1.085,0.235 c-0.198-0.025-0.554-0.15-0.855-0.389l-0.103-0.082l-0.114-0.065l-1.857-1.067L18.92,3.36l-0.105-0.044 c-0.376-0.154-0.658-0.41-0.768-0.556C17.918,1.172,16.349,0,14.296,0H13.14c-2.043,0-3.608,1.154-3.749,2.721 C9.277,2.862,8.999,3.104,8.633,3.25l-0.1,0.039L8.439,3.341L6.495,4.406L6.363,4.479L6.245,4.573 C5.936,4.82,5.596,4.944,5.416,4.977c-0.314-0.139-0.66-0.21-1.011-0.21c-1.198,0-2.411,0.819-3.165,2.139L0.65,7.938 c-0.412,0.72-0.642,1.521-0.644,2.258c-0.003,0.952,0.362,1.756,1.013,2.256c0.034,0.155,0.061,0.448-0.016,0.786 c-0.038,0.168-0.062,0.28-0.062,1.563c0,1.148,0,1.148,0.015,1.262l0.009,0.073l0.017,0.073c0.073,0.346,0.045,0.643,0.011,0.802 C0.348,17.512-0.01,18.314,0,19.268c0.008,0.729,0.238,1.523,0.648,2.242l0.589,1.031c0.761,1.331,1.967,2.159,3.15,2.159 c0.324,0,0.645-0.064,0.938-0.187c0.167,0.038,0.492,0.156,0.813,0.416l0.11,0.088l0.124,0.07l2.045,1.156l0.102,0.057l0.107,0.043 c0.364,0.147,0.646,0.381,0.766,0.521c0.164,1.52,1.719,2.634,3.745,2.634h1.155c2.037,0,3.598-1.134,3.747-2.675 c0.117-0.145,0.401-0.393,0.774-0.549l0.111-0.047l0.105-0.062l1.96-1.159l0.105-0.062l0.097-0.075 c0.309-0.246,0.651-0.371,0.832-0.402c0.313,0.138,0.662,0.212,1.016,0.212c1.199,0,2.412-0.82,3.166-2.139l0.59-1.032 C27.387,20.48,27.575,19.342,27.315,18.389z M25.274,20.635l-0.59,1.032c-0.438,0.765-1.104,1.251-1.639,1.251 c-0.133,0-0.258-0.029-0.369-0.094c-0.15-0.086-0.346-0.127-0.566-0.127c-0.596,0-1.383,0.295-2.01,0.796l-1.96,1.157 c-1.016,0.425-1.846,1.291-1.846,1.929s-0.898,1.159-1.998,1.159H13.14c-1.1,0-1.998-0.514-1.998-1.141s-0.834-1.477-1.854-1.888 l-2.046-1.157c-0.636-0.511-1.425-0.814-2.006-0.814c-0.202,0-0.379,0.037-0.516,0.115c-0.101,0.057-0.214,0.084-0.333,0.084 c-0.518,0-1.179-0.498-1.62-1.271l-0.591-1.032c-0.545-0.954-0.556-1.983-0.024-2.286c0.532-0.305,0.78-1.432,0.551-2.506 c0,0,0-0.003,0-1.042c0-1.088,0.021-1.18,0.021-1.18c0.238-1.072-0.01-2.203-0.552-2.513C1.631,10.8,1.634,9.765,2.18,8.812 L2.769,7.78c0.438-0.766,1.103-1.251,1.636-1.251c0.131,0,0.255,0.029,0.365,0.092C4.92,6.707,5.114,6.747,5.334,6.747 c0.596,0,1.38-0.296,2.007-0.795l1.944-1.065c1.021-0.407,1.856-1.277,1.856-1.933c0-0.656,0.898-1.192,1.998-1.192h1.156V1.761 c1.1,0,1.998,0.545,1.998,1.211c0,0.667,0.832,1.554,1.849,1.973L20,6.013c0.618,0.489,1.401,0.775,2.012,0.775 c0.24,0,0.454-0.045,0.62-0.139c0.122-0.069,0.259-0.102,0.403-0.102c0.551,0,1.221,0.476,1.653,1.231l0.59,1.032 c0.544,0.953,0.518,2.004-0.062,2.334c-0.577,0.331-0.859,1.48-0.627,2.554c0,0,0.01,0.042,0.01,1.103c0,1.012,0,1.012,0,1.012 c-0.218,1.049,0.068,2.174,0.636,2.498C25.802,18.635,25.819,19.68,25.274,20.635z\"/><path d=\"M13.61,7.611c-3.913,0-7.084,3.173-7.084,7.085c0,3.914,3.171,7.085,7.084,7.085s7.085-3.172,7.085-7.085 C20.695,10.784,17.523,7.611,13.61,7.611z M13.61,20.02c-2.936,0-5.323-2.388-5.323-5.323c0-2.935,2.388-5.323,5.323-5.323 s5.324,2.388,5.324,5.323C18.934,17.632,16.546,20.02,13.61,20.02z\"/><path d=\"M13.682,9.908c-2.602,0-4.718,2.116-4.718,4.718c0,2.601,2.116,4.716,4.718,4.716c2.601,0,4.717-2.115,4.717-4.716 C18.399,12.024,16.283,9.908,13.682,9.908z M13.682,17.581c-1.633,0-2.956-1.323-2.956-2.955s1.323-2.956,2.956-2.956 c1.632,0,2.956,1.324,2.956,2.956S15.314,17.581,13.682,17.581z\"/></g></svg>\n\\ No newline at end of file\n+<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"27.434\" height=\"29.5\" enable-background=\"new 0 0 27.434 29.5\" viewBox=\"0 0 27.434 29.5\"><path d=\"M27.316 18.39a2.696 2.696 0 0 0-.98-1.46 1.62 1.62 0 0 1-.016-.762l.035-.176v-1.191c0-1.246-.003-1.278-.046-1.473a1.717 1.717 0 0 1 .007-.805c.477-.343.829-.859.997-1.472.257-.957.074-2.094-.508-3.117l-.594-1.032c-.746-1.304-1.965-2.117-3.18-2.117-.379 0-.75.078-1.086.235a1.958 1.958 0 0 1-.855-.391l-.102-.082-.117-.063-1.855-1.07-.094-.055-.106-.043c-.378-.156-.66-.41-.77-.554C17.919 1.172 16.349 0 14.297 0h-1.155c-2.043 0-3.61 1.152-3.75 2.723-.114.14-.391.382-.758.527l-.102.04-.094.05-1.94 1.066-.134.074-.117.094a2.019 2.019 0 0 1-.832.403 2.518 2.518 0 0 0-1.008-.211c-1.199 0-2.414.82-3.168 2.14l-.59 1.032c-.41.718-.64 1.523-.64 2.257-.004.953.36 1.758 1.012 2.258.035.152.058.445-.016.785-.04.168-.063.282-.063 1.563 0 1.148 0 1.148.016 1.261l.008.075.015.074c.075.344.047.64.012.8-.644.5-1.004 1.302-.992 2.259.008.726.238 1.52.648 2.242l.59 1.027c.758 1.332 1.965 2.16 3.149 2.16.324 0 .644-.062.937-.187.168.039.492.156.813.418l.11.086.124.07 2.047 1.156.102.059.105.043c.363.144.648.379.766.52.164 1.519 1.718 2.632 3.746 2.632h1.156c2.035 0 3.598-1.133 3.746-2.672.117-.144.402-.394.773-.55l.114-.047.101-.063 1.961-1.156.106-.063.097-.078c.309-.246.653-.37.832-.398.313.136.66.21 1.016.21 1.2 0 2.41-.82 3.164-2.14l.594-1.031c.59-1.028.777-2.164.52-3.117Zm-2.043 2.247-.59 1.031c-.437.766-1.105 1.25-1.636 1.25a.7.7 0 0 1-.371-.094 1.146 1.146 0 0 0-.567-.129c-.593 0-1.382.297-2.007.797l-1.961 1.156c-1.016.426-1.848 1.293-1.848 1.93 0 .64-.898 1.16-1.996 1.16H13.14c-1.102 0-2-.515-2-1.14 0-.63-.832-1.477-1.852-1.887l-2.047-1.16c-.637-.512-1.426-.813-2.008-.813-.199 0-.379.035-.515.114a.648.648 0 0 1-.332.085c-.52 0-1.18-.5-1.621-1.273l-.59-1.031c-.543-.953-.555-1.98-.024-2.285.532-.305.782-1.434.551-2.504V14.8c0-1.09.02-1.18.02-1.18.238-1.074-.008-2.203-.551-2.516-.54-.304-.54-1.34.008-2.293l.59-1.03c.437-.766 1.101-1.255 1.636-1.255a.73.73 0 0 1 .364.094c.152.086.343.125.566.125.594 0 1.379-.297 2.004-.793l1.945-1.066c1.02-.407 1.856-1.278 1.856-1.934 0-.656.898-1.191 2-1.191h1.156c1.098 0 1.996.543 1.996 1.21 0 .669.832 1.555 1.848 1.973L20 6.012c.617.492 1.402.777 2.012.777.242 0 .453-.047.62-.14a.79.79 0 0 1 .403-.102c.55 0 1.223.476 1.652 1.23l.59 1.032c.543.953.52 2.004-.062 2.336-.574.332-.86 1.48-.625 2.554 0 0 .008.04.008 1.102v1.011c-.215 1.051.07 2.176.636 2.5.567.325.586 1.368.04 2.325Zm0 0\"/><path d=\"M13.61 7.61a7.084 7.084 0 0 0-7.083 7.085 7.085 7.085 0 1 0 14.168 0A7.088 7.088 0 0 0 13.61 7.61Zm0 12.41a5.33 5.33 0 0 1-5.325-5.325 5.33 5.33 0 0 1 5.324-5.32 5.327 5.327 0 0 1 5.325 5.32 5.328 5.328 0 0 1-5.325 5.325Zm0 0\"/><path d=\"M13.684 9.906a4.722 4.722 0 0 0-4.72 4.719 4.722 4.722 0 0 0 4.72 4.719 4.724 4.724 0 0 0 4.714-4.719 4.724 4.724 0 0 0-4.714-4.719Zm0 7.676a2.954 2.954 0 1 1 0-5.91 2.953 2.953 0 0 1 2.953 2.953 2.957 2.957 0 0 1-2.953 2.957Zm0 0\"/></svg>\n\\ No newline at end of file"}, {"sha": "80b8d67401ad143086b69363c11e86e51f1dae2b", "filename": "src/tools/miri/tests/pass-dep/shims/pthreads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -1,5 +1,4 @@\n //@ignore-target-windows: No libc on Windows\n-#![feature(cstr_from_bytes_until_nul)]\n use std::ffi::{CStr, CString};\n use std::thread;\n "}, {"sha": "706db892cb30d528759fcf9de517b68a2627e429", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -77,7 +77,6 @@\n     -Z                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n     -Z                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n     -Z                         location-detail=val -- what location details should be tracked when using caller_location, either `none`, or a comma separated list of location details, for which valid options are `file`, `line`, and `column` (default: `file,line,column`)\n-    -Z                           log-backtrace=val -- add a backtrace along with logging\n     -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n     -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n     -Z             maximal-hir-to-mir-coverage=val -- save as much information as possible about the correspondence between MIR and HIR as source scopes (default: no)"}, {"sha": "e42edf1d4af51ad13062ae292a9ed19a510401b1", "filename": "tests/ui/attributes/log-backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fattributes%2Flog-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fattributes%2Flog-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattributes%2Flog-backtrace.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -1,9 +1,9 @@\n // run-pass\n //\n-// This test makes sure that log-backtrace option doesn't give a compilation error.\n+// This test makes sure that log-backtrace option at least parses correctly\n //\n // dont-check-compiler-stdout\n // dont-check-compiler-stderr\n // rustc-env:RUSTC_LOG=info\n-// compile-flags: -Zlog-backtrace=rustc_metadata::creader\n+// rustc-env:RUSTC_LOG_BACKTRACE=rustc_metadata::creader\n fn main() {}"}, {"sha": "58be4519720178b8fab1f5504fc43607bc8e05a9", "filename": "tests/ui/derives/deriving-with-repr-packed.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -33,4 +33,14 @@ struct FlexZeroSlice {\n     //~^^ this was previously accepted\n }\n \n+// Again, currently allowed, but will be phased out.\n+#[derive(Debug)]\n+#[repr(packed)]\n+struct WithStr {\n+    width: u8,\n+    data: str,\n+    //~^ WARNING string slice in a packed struct that derives a built-in trait\n+    //~^^ this was previously accepted\n+}\n+\n fn main() {}"}, {"sha": "0cfe03869af1bd6846e3e836dca9d12ee5f37fd0", "filename": "tests/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -13,6 +13,20 @@ LL |     data: [u8],\n    = note: `#[warn(byte_slice_in_packed_struct_with_derive)]` on by default\n    = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+warning: string slice in a packed struct that derives a built-in trait\n+  --> $DIR/deriving-with-repr-packed.rs:41:5\n+   |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+...\n+LL |     data: str,\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #107457 <https://github.com/rust-lang/rust/issues/107457>\n+   = help: consider implementing the trait by hand, or remove the `packed` attribute\n+   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0507]: cannot move out of `self` which is behind a shared reference\n   --> $DIR/deriving-with-repr-packed.rs:22:10\n    |\n@@ -24,7 +38,7 @@ LL | struct X(Y);\n    |\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0507`.\n Future incompatibility report: Future breakage diagnostic:\n@@ -43,3 +57,19 @@ LL |     data: [u8],\n    = note: `#[warn(byte_slice_in_packed_struct_with_derive)]` on by default\n    = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+Future breakage diagnostic:\n+warning: string slice in a packed struct that derives a built-in trait\n+  --> $DIR/deriving-with-repr-packed.rs:41:5\n+   |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+...\n+LL |     data: str,\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #107457 <https://github.com/rust-lang/rust/issues/107457>\n+   = help: consider implementing the trait by hand, or remove the `packed` attribute\n+   = note: `#[warn(byte_slice_in_packed_struct_with_derive)]` on by default\n+   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "218cd7678594fd072dff910ad52dc5b670ffd4eb", "filename": "tests/ui/parser/bad-recover-kw-after-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fparser%2Fbad-recover-kw-after-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fparser%2Fbad-recover-kw-after-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbad-recover-kw-after-impl.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+// edition:2021\n+// for the `impl` + keyword test\n+\n+macro_rules! impl_primitive {\n+    ($ty:ty) => {\n+        compile_error!(\"whoops\");\n+    };\n+    (impl async) => {};\n+}\n+\n+impl_primitive!(impl async);\n+\n+fn main() {}"}, {"sha": "510e08ba091a4058f3e76fb08280e42a1c44c607", "filename": "tests/ui/parser/bad-recover-ty-after-impl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fparser%2Fbad-recover-ty-after-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Fparser%2Fbad-recover-ty-after-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbad-recover-ty-after-impl.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+macro_rules! impl_primitive {\n+    ($ty:ty) => { impl_primitive!(impl $ty); };\n+    (impl $ty:ty) => { fn a(_: $ty) {} }\n+}\n+\n+impl_primitive! { u8 }\n+\n+macro_rules! test {\n+    ($ty:ty) => { compile_error!(\"oh no\"); };\n+    (impl &) => {};\n+}\n+\n+test!(impl &);\n+\n+fn main() {}"}, {"sha": "a3d97927bad2222037e19e1b5baa705e897a2278", "filename": "tests/ui/traits/new-solver/provisional-result-done.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -0,0 +1,37 @@\n+// known-bug: unknown\n+// compile-flags: -Ztrait-solver=next\n+// failure-status: 101\n+// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// This tests checks that we update results in the provisional cache when\n+// we pop a goal from the stack.\n+#![feature(auto_traits)]\n+auto trait Coinductive {}\n+struct Foo<T>(T);\n+struct Bar<T>(T);\n+\n+impl<T> Coinductive for Foo<T>\n+where\n+    Bar<T>: Coinductive\n+{}\n+\n+impl<T> Coinductive for Bar<T>\n+where\n+    Foo<T>: Coinductive,\n+    Bar<T>: ConstrainInfer,\n+{}\n+\n+trait ConstrainInfer {}\n+impl ConstrainInfer for Bar<u8> {}\n+impl ConstrainInfer for Foo<u16> {}\n+\n+fn impls<T: Coinductive>() -> T { todo!() }\n+\n+fn constrain<T: ConstrainInfer>(_: T) {}\n+\n+fn main() {\n+    // This should constrain `_` to `u8`.\n+    impls::<Foo<_>>();\n+}"}, {"sha": "ffc92b81f089e7d3b0c83443b62fb5a9d745d49e", "filename": "tests/ui/traits/new-solver/provisional-result-done.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7acd078f443156b95cee11759a735db1cfc796e/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr?ref=e7acd078f443156b95cee11759a735db1cfc796e", "patch": "@@ -0,0 +1,6 @@\n+error: the compiler unexpectedly panicked. this is a bug.\n+\n+query stack during panic:\n+#0 [check_well_formed] checking that `<impl at $DIR/provisional-result-done.rs:20:1: 20:31>` is well-formed\n+#1 [check_mod_type_wf] checking that types are well-formed in top-level module\n+end of query stack"}]}