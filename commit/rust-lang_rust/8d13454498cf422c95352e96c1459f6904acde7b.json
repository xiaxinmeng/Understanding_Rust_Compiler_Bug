{"sha": "8d13454498cf422c95352e96c1459f6904acde7b", "node_id": "C_kwDOAAsO6NoAKDhkMTM0NTQ0OThjZjQyMmM5NTM1MmU5NmMxNDU5ZjY5MDRhY2RlN2I", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T04:17:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T17:11:35Z"}, "message": "Canonicalize the ROOT VAR", "tree": {"sha": "deb11f86479bd637f52d2d7a748250be35ea69c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb11f86479bd637f52d2d7a748250be35ea69c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d13454498cf422c95352e96c1459f6904acde7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d13454498cf422c95352e96c1459f6904acde7b", "html_url": "https://github.com/rust-lang/rust/commit/8d13454498cf422c95352e96c1459f6904acde7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d13454498cf422c95352e96c1459f6904acde7b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "160c2ebeca7b4e616962134f230de754fa5433b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/160c2ebeca7b4e616962134f230de754fa5433b1", "html_url": "https://github.com/rust-lang/rust/commit/160c2ebeca7b4e616962134f230de754fa5433b1"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "92037f89c6922b35a151754606e4e1e742f0a01f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d13454498cf422c95352e96c1459f6904acde7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d13454498cf422c95352e96c1459f6904acde7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8d13454498cf422c95352e96c1459f6904acde7b", "patch": "@@ -1356,6 +1356,10 @@ impl<'tcx> InferCtxt<'tcx> {\n         self.inner.borrow_mut().type_variables().root_var(var)\n     }\n \n+    pub fn root_const_var(&self, var: ty::ConstVid<'tcx>) -> ty::ConstVid<'tcx> {\n+        self.inner.borrow_mut().const_unification_table().find(var)\n+    }\n+\n     /// Where possible, replaces type/const variables in\n     /// `value` with their final value. Note that region variables\n     /// are unaffected. If a type/const variable has not been unified, it"}, {"sha": "48d78f685eef4054c60680d06bc0fcf7b6319eb9", "filename": "compiler/rustc_trait_selection/src/solve/canonical/canonicalize.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8d13454498cf422c95352e96c1459f6904acde7b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d13454498cf422c95352e96c1459f6904acde7b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs?ref=8d13454498cf422c95352e96c1459f6904acde7b", "patch": "@@ -261,12 +261,24 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+    fn fold_ty(&mut self, mut t: Ty<'tcx>) -> Ty<'tcx> {\n         let kind = match *t.kind() {\n-            ty::Infer(ty::TyVar(vid)) => match self.infcx.probe_ty_var(vid) {\n-                Ok(t) => return self.fold_ty(t),\n-                Err(ui) => CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n-            },\n+            ty::Infer(ty::TyVar(mut vid)) => {\n+                // We need to canonicalize the *root* of our ty var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+\n+                let root_vid = self.infcx.root_var(vid);\n+                if root_vid != vid {\n+                    t = self.infcx.tcx.mk_ty_var(root_vid);\n+                    vid = root_vid;\n+                }\n+\n+                match self.infcx.probe_ty_var(vid) {\n+                    Ok(t) => return self.fold_ty(t),\n+                    Err(ui) => CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n+                }\n+            }\n             ty::Infer(ty::IntVar(_)) => {\n                 let nt = self.infcx.shallow_resolve(t);\n                 if nt != t {\n@@ -338,13 +350,23 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n         self.interner().mk_bound(self.binder_index, bt)\n     }\n \n-    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+    fn fold_const(&mut self, mut c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         let kind = match c.kind() {\n-            ty::ConstKind::Infer(ty::InferConst::Var(vid)) => match self.infcx.probe_const_var(vid)\n-            {\n-                Ok(c) => return self.fold_const(c),\n-                Err(universe) => CanonicalVarKind::Const(universe, c.ty()),\n-            },\n+            ty::ConstKind::Infer(ty::InferConst::Var(mut vid)) => {\n+                // We need to canonicalize the *root* of our const var.\n+                // This is so that our canonical response correctly reflects\n+                // any equated inference vars correctly!\n+                let root_vid = self.infcx.root_const_var(vid);\n+                if root_vid != vid {\n+                    c = self.infcx.tcx.mk_const(ty::InferConst::Var(root_vid), c.ty());\n+                    vid = root_vid;\n+                }\n+\n+                match self.infcx.probe_const_var(vid) {\n+                    Ok(c) => return self.fold_const(c),\n+                    Err(universe) => CanonicalVarKind::Const(universe, c.ty()),\n+                }\n+            }\n             ty::ConstKind::Infer(ty::InferConst::Fresh(_)) => {\n                 bug!(\"fresh var during canonicalization: {c:?}\")\n             }"}, {"sha": "43fd415e871e18dcdd2ba31c647bb27d66596323", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d13454498cf422c95352e96c1459f6904acde7b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d13454498cf422c95352e96c1459f6904acde7b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=8d13454498cf422c95352e96c1459f6904acde7b", "patch": "@@ -238,6 +238,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             && has_changed\n             && !self.in_projection_eq_hack\n             && !self.search_graph.in_cycle()\n+            && false\n         {\n             let (_orig_values, canonical_goal) = self.canonicalize_goal(goal);\n             let canonical_response ="}, {"sha": "d1c6b1077e8efd0d2d35cb3b1c60abd8c75b7b00", "filename": "tests/ui/traits/new-solver/canonical-ty-var-eq-in-response.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8d13454498cf422c95352e96c1459f6904acde7b/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-ty-var-eq-in-response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d13454498cf422c95352e96c1459f6904acde7b/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-ty-var-eq-in-response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-ty-var-eq-in-response.rs?ref=8d13454498cf422c95352e96c1459f6904acde7b", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+trait Mirror {\n+    type Item;\n+}\n+\n+struct Wrapper<T>(T);\n+impl<T> Mirror for Wrapper<T> {\n+    type Item = T;\n+}\n+\n+fn mirror<T>()\n+where\n+    Wrapper<T>: Mirror<Item = i32>,\n+{\n+}\n+\n+fn main() {\n+    mirror::<_ /* ?0 */>();\n+\n+    // Solving `<Wrapper<?0> as Mirror>::Item = i32`\n+\n+    // First, we replace the term with a fresh infer var:\n+    // `<Wrapper<?0> as Mirror>::Item = ?1`\n+\n+    // We select the impl candidate on line #6, which leads us to learn that\n+    // `?0 == ?1`.\n+\n+    // That should be reflected in our canonical response, which should have\n+    // `^0 = ^0, ^1 = ^0`\n+    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n+    // !! We used to return a totally unconstrained response here :< !!\n+    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n+\n+    // Then, during the \"equate term\" part of the projection solving, we\n+    // instantiate the response from the unconstrained projection predicate,\n+    // and equate `?0 == i32`.\n+}"}, {"sha": "7398bce7b61cfbd0792dce2ef8020faf67dc8e47", "filename": "tests/ui/traits/new-solver/deduce-ty-from-object.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d13454498cf422c95352e96c1459f6904acde7b/tests%2Fui%2Ftraits%2Fnew-solver%2Fdeduce-ty-from-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d13454498cf422c95352e96c1459f6904acde7b/tests%2Fui%2Ftraits%2Fnew-solver%2Fdeduce-ty-from-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fdeduce-ty-from-object.rs?ref=8d13454498cf422c95352e96c1459f6904acde7b", "patch": "@@ -0,0 +1,6 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+fn main() {\n+    let x: Box<dyn Iterator<Item = ()>> = Box::new(std::iter::empty());\n+}"}]}