{"sha": "e8cbb533096206c3f084712fe7b9ca74758f3178", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2JiNTMzMDk2MjA2YzNmMDg0NzEyZmU3YjljYTc0NzU4ZjMxNzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-12T19:45:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-15T08:14:29Z"}, "message": "Add E0613", "tree": {"sha": "cee32d22da9786f33a790d91092b749f75181c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee32d22da9786f33a790d91092b749f75181c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cbb533096206c3f084712fe7b9ca74758f3178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cbb533096206c3f084712fe7b9ca74758f3178", "html_url": "https://github.com/rust-lang/rust/commit/e8cbb533096206c3f084712fe7b9ca74758f3178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cbb533096206c3f084712fe7b9ca74758f3178/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae", "html_url": "https://github.com/rust-lang/rust/commit/a42f8160edd63a2cd2dad5a1b1d42c2ec67c60ae"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "5df4f3af1323cde7d9d397ab582d0747f33387e9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8cbb533096206c3f084712fe7b9ca74758f3178", "patch": "@@ -3063,8 +3063,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                idx.node, expr_t).emit();\n         } else {\n             type_error_struct!(self.tcx().sess, expr.span, expr_t, E0613,\n-                               \"attempted tuple index `{}` on type `{}`, but the type was not a \\\n-                                tuple or tuple struct\",\n+                               \"attempted to access tuple index `{}` on type `{}`, but the type \\\n+                                was not a tuple or tuple struct\",\n                                idx.node, expr_t).emit();\n         }\n "}, {"sha": "308cc3b32cab4a2ac3804d3b3d1dacf1076443d1", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e8cbb533096206c3f084712fe7b9ca74758f3178", "patch": "@@ -4238,7 +4238,51 @@ Attempted tuple index on a type which isn't a tuple nor a tuple-struct.\n Erroneous code example:\n \n ```compile_fail,E0613\n+struct Foo;\n+\n+let y = Foo;\n+println!(\"{}\", y.1); // error: attempted to access tuple index `1` on type\n+                     //        `Foo`, but the type was not a tuple or tuple\n+                     //        struct\n+```\n+\n+Only tuple and tuple-struct types can be indexed this way. Example:\n+\n+```\n+// Let's create a tuple first:\n+let x: (u32, u32, u32, u32) = (0, 1, 1, 2);\n+// You can index its fields this way:\n+println!(\"({}, {}, {}, {})\", x.0, x.1, x.2, x.3);\n+\n+// Now let's declare a tuple-struct:\n+struct TupleStruct(u32, u32, u32, u32);\n+// Let's instantiate it:\n+let x = TupleStruct(0, 1, 1, 2);\n+// And just like the tuple:\n+println!(\"({}, {}, {}, {})\", x.0, x.1, x.2, x.3);\n+```\n+\n+If you want to index into an array, use `[]` instead:\n+\n+```\n+let x = &[0, 1, 1, 2];\n+println!(\"[{}, {}, {}, {}]\", x[0], x[1], x[2], x[3]);\n+```\n+\n+If you want to access a field of a struct, check the field's name wasn't\n+misspelled:\n+\n+```\n+struct SomeStruct {\n+    x: u32,\n+    y: i32,\n+}\n \n+let s = SomeStruct {\n+    x: 0,\n+    y: -1,\n+};\n+println!(\"x: {} y: {}\", s.x, s.y);\n ```\n \"##,\n "}, {"sha": "189d1b1d3bad6108a3bead21591d573b93d03831", "filename": "src/test/compile-fail/E0613.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Ftest%2Fcompile-fail%2FE0613.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Ftest%2Fcompile-fail%2FE0613.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0613.rs?ref=e8cbb533096206c3f084712fe7b9ca74758f3178", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+\n+fn main() {\n+   let y = Foo;\n+   y.1; //~ ERROR E0613\n+}"}, {"sha": "26decccdcd8af454e9ed7b82da851c75c8a44441", "filename": "src/test/compile-fail/tuple-index-not-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-not-tuple.rs?ref=e8cbb533096206c3f084712fe7b9ca74758f3178", "patch": "@@ -14,7 +14,7 @@ struct Empty;\n fn main() {\n     let origin = Point { x: 0, y: 0 };\n     origin.0;\n-    //~^ ERROR attempted tuple index `0` on type `Point`, but the type was not\n+    //~^ ERROR attempted to access tuple index `0` on type `Point`, but the type was not\n     Empty.0;\n-    //~^ ERROR attempted tuple index `0` on type `Empty`, but the type was not\n+    //~^ ERROR attempted to access tuple index `0` on type `Empty`, but the type was not\n }"}, {"sha": "5ed4ab4552a66e010beee95eca3198a17721d6e3", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8cbb533096206c3f084712fe7b9ca74758f3178/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=e8cbb533096206c3f084712fe7b9ca74758f3178", "patch": "@@ -16,7 +16,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 51 |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n \n-error[E0613]: attempted tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n+error[E0613]: attempted to access tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n   --> $DIR/macro-backtrace-invalid-internals.rs:27:11\n    |\n 27 |           (1).0\n@@ -43,7 +43,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 55 |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n \n-error[E0613]: attempted tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n+error[E0613]: attempted to access tuple index `0` on type `{integer}`, but the type was not a tuple or tuple struct\n   --> $DIR/macro-backtrace-invalid-internals.rs:45:11\n    |\n 45 |           (1).0"}]}