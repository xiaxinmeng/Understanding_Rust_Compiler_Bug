{"sha": "49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZWIyYzY3NjNlNjhlZTQ2MmI1ODA4YWI1NThiNGZhOWY4NGZjYzA=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-09T19:15:48Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:58Z"}, "message": "Remove defaults table and attach defaults directly to tyvars", "tree": {"sha": "d9659647981a30da8f74123ab51bfa818908ea27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9659647981a30da8f74123ab51bfa818908ea27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "html_url": "https://github.com/rust-lang/rust/commit/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdca2c8aded0497c289536ee5ead694ca2d8fc0", "html_url": "https://github.com/rust-lang/rust/commit/bbdca2c8aded0497c289536ee5ead694ca2d8fc0"}], "stats": {"total": 184, "additions": 143, "deletions": 41}, "files": [{"sha": "db6e0ad1d4a83bc7b05c55072dc82e6352cc292d", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "patch": "@@ -95,9 +95,6 @@ pub struct InferCtxt<'a, 'tcx: 'a> {\n     normalize: bool,\n \n     err_count_on_creation: usize,\n-\n-    // Default Type Parameter fallbacks\n-    pub defaults: RefCell<FnvHashMap<Ty<'tcx>, Ty<'tcx>>>,\n }\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n@@ -353,8 +350,7 @@ pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n         parameter_environment: param_env.unwrap_or(tcx.empty_parameter_environment()),\n         fulfillment_cx: RefCell::new(traits::FulfillmentContext::new(errors_will_be_reported)),\n         normalize: false,\n-        err_count_on_creation: tcx.sess.err_count(),\n-        defaults: RefCell::new(FnvHashMap()),\n+        err_count_on_creation: tcx.sess.err_count()\n     }\n }\n \n@@ -657,27 +653,44 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Returns a type variable's default fallback if any exists. A default\n+    /// must be attached to the variable when created, if it is created\n+    /// without a default, this will return None.\n+    ///\n+    /// See `new_ty_var_with_default` to create a type variable with a default.\n+    /// See `type_variable::Default` for details about what a default entails.\n+    pub fn default(&self, ty: Ty<'tcx>) -> Option<type_variable::Default<'tcx>> {\n+        match ty.sty {\n+            ty::TyInfer(ty::TyVar(vid)) => self.type_variables.borrow().default(vid),\n+            _ => None\n+        }\n+    }\n+\n     pub fn unsolved_variables(&self) -> Vec<ty::Ty<'tcx>> {\n         let mut variables = Vec::new();\n \n         let unbound_ty_vars = self.type_variables\n                                   .borrow()\n                                   .unsolved_variables()\n-                                  .into_iter().map(|t| self.tcx.mk_var(t));\n+                                  .into_iter()\n+                                  .map(|t| self.tcx.mk_var(t));\n \n         let unbound_int_vars = self.int_unification_table\n                                    .borrow_mut()\n                                    .unsolved_variables()\n-                                   .into_iter().map(|v| self.tcx.mk_int_var(v));\n+                                   .into_iter()\n+                                   .map(|v| self.tcx.mk_int_var(v));\n \n         let unbound_float_vars = self.float_unification_table\n                                      .borrow_mut()\n                                      .unsolved_variables()\n-                                     .into_iter().map(|v| self.tcx.mk_float_var(v));\n+                                     .into_iter()\n+                                     .map(|v| self.tcx.mk_float_var(v));\n \n         variables.extend(unbound_ty_vars);\n         variables.extend(unbound_int_vars);\n         variables.extend(unbound_float_vars);\n+        \n         return variables;\n     }\n \n@@ -984,13 +997,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn next_ty_var_id(&self, diverging: bool) -> TyVid {\n         self.type_variables\n             .borrow_mut()\n-            .new_var(diverging)\n+            .new_var(diverging, None)\n     }\n \n     pub fn next_ty_var(&self) -> Ty<'tcx> {\n         self.tcx.mk_var(self.next_ty_var_id(false))\n     }\n \n+    pub fn next_ty_var_with_default(&self,\n+                                    default: Option<type_variable::Default<'tcx>>) -> Ty<'tcx> {\n+        let ty_var_id = self.type_variables\n+                            .borrow_mut()\n+                            .new_var(false, default);\n+\n+        self.tcx.mk_var(ty_var_id)\n+    }\n+\n     pub fn next_diverging_ty_var(&self) -> Ty<'tcx> {\n         self.tcx.mk_var(self.next_ty_var_id(true))\n     }\n@@ -1027,14 +1049,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn type_vars_for_defs(&self,\n                               defs: &[ty::TypeParameterDef<'tcx>])\n                               -> Vec<ty::Ty<'tcx>> {\n+        let mut substs = Substs::empty();\n         let mut vars = Vec::with_capacity(defs.len());\n \n         for def in defs.iter() {\n-            let ty_var = self.next_ty_var();\n-            match def.default {\n-                None => {},\n-                Some(default) => { self.defaults.borrow_mut().insert(ty_var, default); }\n-            }\n+            let default = def.default.map(|default| {\n+                type_variable::Default {\n+                    ty: default\n+                }\n+            });\n+            //.subst(self.tcx, &substs)\n+            let ty_var = self.next_ty_var_with_default(default);\n+            substs.types.push(subst::ParamSpace::SelfSpace, ty_var);\n             vars.push(ty_var)\n         }\n "}, {"sha": "6ba289d3665aa7d870145117a72128839591462b", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "patch": "@@ -30,7 +30,17 @@ struct TypeVariableData<'tcx> {\n \n enum TypeVariableValue<'tcx> {\n     Known(Ty<'tcx>),\n-    Bounded(Vec<Relation>),\n+    Bounded {\n+        relations: Vec<Relation>,\n+        default: Option<Default<'tcx>>\n+    }\n+}\n+\n+// We will use this to store the required information to recapitulate what happened when\n+// an error occurs.\n+#[derive(Clone)]\n+pub struct Default<'tcx> {\n+    pub ty: Ty<'tcx>\n }\n \n pub struct Snapshot {\n@@ -72,6 +82,13 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         relations(self.values.get_mut(a.index as usize))\n     }\n \n+    pub fn default(&self, vid: ty::TyVid) -> Option<Default<'tcx>> {\n+        match &self.values.get(vid.index as usize).value {\n+            &Known(_) => None,\n+            &Bounded { ref default, .. } => default.clone()\n+        }\n+    }\n+\n     pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool {\n         self.values.get(vid.index as usize).diverging\n     }\n@@ -102,7 +119,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         };\n \n         let relations = match old_value {\n-            Bounded(b) => b,\n+            Bounded { relations, .. } => relations,\n             Known(_) => panic!(\"Asked to instantiate variable that is \\\n                                already instantiated\")\n         };\n@@ -114,17 +131,19 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         self.values.record(SpecifyVar(vid, relations));\n     }\n \n-    pub fn new_var(&mut self, diverging: bool) -> ty::TyVid {\n+    pub fn new_var(&mut self,\n+                   diverging: bool,\n+                   default: Option<Default<'tcx>>) -> ty::TyVid {\n         let index = self.values.push(TypeVariableData {\n-            value: Bounded(vec![]),\n+            value: Bounded { relations: vec![], default: default },\n             diverging: diverging\n         });\n         ty::TyVid { index: index as u32 }\n     }\n \n     pub fn probe(&self, vid: ty::TyVid) -> Option<Ty<'tcx>> {\n         match self.values.get(vid.index as usize).value {\n-            Bounded(..) => None,\n+            Bounded { .. } => None,\n             Known(t) => Some(t)\n         }\n     }\n@@ -197,12 +216,14 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     }\n \n     pub fn unsolved_variables(&self) -> Vec<ty::TyVid> {\n-        self.values.iter().enumerate().filter_map(|(i, value)|\n-            match &value.value {\n+        self.values\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(i, value)| match &value.value {\n                 &TypeVariableValue::Known(_) => None,\n-                &TypeVariableValue::Bounded(_) => Some(ty::TyVid { index: i as u32 })\n-            }\n-        ).collect()\n+                &TypeVariableValue::Bounded { .. } => Some(ty::TyVid { index: i as u32 })\n+            })\n+            .collect()\n     }\n }\n \n@@ -213,7 +234,7 @@ impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n     fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: UndoEntry) {\n         match action {\n             SpecifyVar(vid, relations) => {\n-                values[vid.index as usize].value = Bounded(relations);\n+                values[vid.index as usize].value = Bounded { relations: relations, default: None };\n             }\n \n             Relate(a, b) => {\n@@ -227,6 +248,6 @@ impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n fn relations<'a>(v: &'a mut TypeVariableData) -> &'a mut Vec<Relation> {\n     match v.value {\n         Known(_) => panic!(\"var_sub_var: variable is known\"),\n-        Bounded(ref mut relations) => relations\n+        Bounded { ref mut relations, .. } => relations\n     }\n }"}, {"sha": "f6a4dbca291bb759f3aa416b6477a0a39eee98e0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "patch": "@@ -87,6 +87,7 @@ use fmt_macros::{Parser, Piece, Position};\n use middle::astconv_util::{check_path_args, NO_TPS, NO_REGIONS};\n use middle::def;\n use middle::infer;\n+use middle::infer::type_variable;\n use middle::pat_util::{self, pat_id_map};\n use middle::privacy::{AllPublic, LastMod};\n use middle::region::{self, CodeExtent};\n@@ -1139,12 +1140,8 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n \n     fn ty_infer(&self, default: Option<Ty<'tcx>>, _span: Span) -> Ty<'tcx> {\n-        let ty_var = self.infcx().next_ty_var();\n-        match default {\n-            Some(default) => { self.infcx().defaults.borrow_mut().insert(ty_var, default); }\n-            None => {}\n-        }\n-        ty_var\n+        let default = default.map(|t| type_variable::Default { ty: t });\n+        self.infcx().next_ty_var_with_default(default)\n     }\n \n     fn projected_ty_from_poly_trait_ref(&self,\n@@ -1697,7 +1694,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn select_all_obligations_and_apply_defaults(&self) {\n         use middle::ty::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat, Neither};\n \n-        debug!(\"select_all_obligations_and_apply_defaults: defaults={:?}\", self.infcx().defaults);\n+        // debug!(\"select_all_obligations_and_apply_defaults: defaults={:?}\", self.infcx().defaults);\n \n         for _ in (0..self.tcx().sess.recursion_limit.get()) {\n             self.select_obligations_where_possible();\n@@ -1725,11 +1722,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Collect the set of variables that need fallback applied\n             for ty in &unsolved_variables {\n-                if self.inh.infcx.defaults.borrow().contains_key(ty) {\n+                if let Some(_) = self.inh.infcx.default(ty) {\n                     let resolved = self.infcx().resolve_type_vars_if_possible(ty);\n \n-                    debug!(\"select_all_obligations_and_apply_defaults: ty: {:?} with default: {:?}\",\n-                            ty, self.inh.infcx.defaults.borrow().get(ty));\n+                    // debug!(\"select_all_obligations_and_apply_defaults: ty: {:?} with default: {:?}\",\n+                    //         ty, self.inh.infcx.defaults.borrow().get(ty));\n \n                     match resolved.sty {\n                         ty::TyInfer(ty::TyVar(_)) => {\n@@ -1754,7 +1751,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Go through the unbound variables and unify them with the proper fallbacks\n             for ty in &unbound_tyvars {\n-                // let resolved = self.infcx().resolve_type_vars_if_possible(ty);\n                 if self.infcx().type_var_diverges(ty) {\n                     demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().mk_nil());\n                 } else {\n@@ -1766,17 +1762,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.f64)\n                         }\n                         Neither => {\n-                            let default_map = self.inh.infcx.defaults.borrow();\n-                            if let Some(default) = default_map.get(ty) {\n+                            if let Some(default) = self.inh.infcx.default(ty) {\n                                 match infer::mk_eqty(self.infcx(), false,\n                                                      infer::Misc(codemap::DUMMY_SP),\n-                                                     ty, default) {\n+                                                     ty, default.ty) {\n                                     Ok(()) => { /* ok */ }\n                                     Err(_) => {\n                                         self.infcx().report_conflicting_default_types(\n                                             codemap::DUMMY_SP,\n                                             ty,\n-                                            default)\n+                                            default.ty)\n                                     }\n                                 }\n                             }"}, {"sha": "402399f14b9363034a9f2773e2dd2f1ed6fa9ab9", "filename": "src/test/run-pass/default_type_parameter_default_dependent_associated_type.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_default_dependent_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_default_dependent_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_default_dependent_associated_type.rs?ref=49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "patch": "@@ -0,0 +1,23 @@\n+use std::marker::PhantomData;\n+\n+trait Id {\n+    type This;\n+}\n+\n+impl<A> Id for A {\n+    type This = A;\n+}\n+\n+struct Foo<X: Default = usize, Y = <X as Id>::This> {\n+    data: PhantomData<(X, Y)>\n+}\n+\n+impl<X: Default, Y> Foo<X, Y> {\n+    fn new() -> Foo<X, Y> {\n+        Foo { data: PhantomData }\n+    }\n+}\n+\n+fn main() {\n+    let foo = Foo::new();\n+}"}, {"sha": "4f492bed9d4f2b1cdeba9806df6cd84265c80f0d", "filename": "src/test/run-pass/default_type_parameter_dependent_defaults.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_dependent_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_dependent_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_dependent_defaults.rs?ref=49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "patch": "@@ -0,0 +1,7 @@\n+use std::marker::PhantomData;\n+\n+struct Foo<T,U=T> { data: PhantomData<(T, U)> }\n+\n+fn main() {\n+    let foo = Foo { data: PhantomData };\n+}"}, {"sha": "d42e65d90fee2fae00b0a824baea7f38e4880de8", "filename": "src/test/run-pass/default_type_parameter_struct_and_type_alias.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_struct_and_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49eb2c6763e68ee462b5808ab558b4fa9f84fcc0/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_struct_and_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_type_parameter_struct_and_type_alias.rs?ref=49eb2c6763e68ee462b5808ab558b4fa9f84fcc0", "patch": "@@ -0,0 +1,30 @@\n+use std::marker::PhantomData;\n+\n+trait TypeEq<A> {}\n+impl<A> TypeEq<A> for A {}\n+\n+struct DeterministicHasher;\n+struct RandomHasher;\n+\n+\n+struct MyHashMap<K, V, H=DeterministicHasher> {\n+    data: PhantomData<(K, V, H)>\n+}\n+\n+impl<K, V, H> MyHashMap<K, V, H> {\n+    fn new() -> MyHashMap<K, V, H> {\n+        MyHashMap { data: PhantomData }\n+    }\n+}\n+\n+mod mystd {\n+    use super::{MyHashMap, RandomHasher};\n+    pub type HashMap<K, V, H=RandomHasher> = MyHashMap<K, V, H>;\n+}\n+\n+fn try_me<H>(hash_map: mystd::HashMap<i32, i32, H>) {}\n+\n+fn main() {\n+    let hash_map = mystd::HashMap::new();\n+    try_me(hash_map);\n+}"}]}