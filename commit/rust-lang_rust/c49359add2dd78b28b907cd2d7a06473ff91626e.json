{"sha": "c49359add2dd78b28b907cd2d7a06473ff91626e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OTM1OWFkZDJkZDc4YjI4YjkwN2NkMmQ3YTA2NDczZmY5MTYyNmU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-27T08:41:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:23:08Z"}, "message": "Remove hir::TraitItem::attrs.", "tree": {"sha": "4ef96374dcdbacc922a88bb324d7bb9c1777551b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef96374dcdbacc922a88bb324d7bb9c1777551b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c49359add2dd78b28b907cd2d7a06473ff91626e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c49359add2dd78b28b907cd2d7a06473ff91626e", "html_url": "https://github.com/rust-lang/rust/commit/c49359add2dd78b28b907cd2d7a06473ff91626e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c49359add2dd78b28b907cd2d7a06473ff91626e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bab93a03924c4044f20e7aee6e0036f6a96d586", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bab93a03924c4044f20e7aee6e0036f6a96d586", "html_url": "https://github.com/rust-lang/rust/commit/4bab93a03924c4044f20e7aee6e0036f6a96d586"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "50db57eedb24e2547bb0683051f0d9b5781c351a", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -851,14 +851,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::MacCall(..) => panic!(\"macro item shouldn't exist at this point\"),\n         };\n \n-        hir::TraitItem {\n-            def_id: trait_item_def_id,\n-            ident: i.ident,\n-            attrs: self.lower_attrs(hir_id, &i.attrs),\n-            generics,\n-            kind,\n-            span: i.span,\n-        }\n+        self.lower_attrs(hir_id, &i.attrs);\n+        hir::TraitItem { def_id: trait_item_def_id, ident: i.ident, generics, kind, span: i.span }\n     }\n \n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {"}, {"sha": "d72de243a00e0301cb2ba28b5e81d8550231377e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -2028,7 +2028,6 @@ impl TraitItemId {\n pub struct TraitItem<'hir> {\n     pub ident: Ident,\n     pub def_id: LocalDefId,\n-    pub attrs: &'hir [Attribute],\n     pub generics: Generics<'hir>,\n     pub kind: TraitItemKind<'hir>,\n     pub span: Span,\n@@ -3080,7 +3079,7 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);\n \n     rustc_data_structures::static_assert_size!(super::Item<'static>, 200);\n-    rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 144);\n+    rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);\n     rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 168);\n     rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 136);\n }"}, {"sha": "d47482b88288fd21da28ad14951878ca565641c5", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -139,11 +139,10 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for VisibilityKind<'_>\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItem<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        let TraitItem { def_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n+        let TraitItem { def_id: _, ident, ref generics, ref kind, span } = *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n             ident.name.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n             generics.hash_stable(hcx, hasher);\n             kind.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);"}, {"sha": "fefade557b24a1861b8e8ab249f63a0272c6871c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -949,7 +949,7 @@ impl<'a> State<'a> {\n         self.ann.pre(self, AnnNode::SubItem(ti.hir_id()));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ti.span.lo());\n-        self.print_outer_attributes(&ti.attrs);\n+        self.print_outer_attributes(self.attrs(ti.hir_id()));\n         match ti.kind {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 let vis ="}, {"sha": "494c2b246bad32b5dcb6a1407982ffbc8ba6bfd4", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -994,14 +994,15 @@ impl<'tcx> DumpVisitor<'tcx> {\n             hir::TraitItemKind::Const(ref ty, body) => {\n                 let body = body.map(|b| &self.tcx.hir().body(b).value);\n                 let respan = respan(vis_span, hir::VisibilityKind::Public);\n+                let attrs = self.tcx.hir().attrs(trait_item.hir_id());\n                 self.process_assoc_const(\n                     trait_item.hir_id(),\n                     trait_item.ident,\n                     &ty,\n                     body,\n                     trait_id,\n                     &respan,\n-                    &trait_item.attrs,\n+                    attrs,\n                 );\n             }\n             hir::TraitItemKind::Fn(ref sig, ref trait_fn) => {\n@@ -1027,6 +1028,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 if !self.span.filter_generated(trait_item.ident.span) {\n                     let span = self.span_from_span(trait_item.ident.span);\n                     let id = id_from_def_id(trait_item.def_id.to_def_id());\n+                    let attrs = self.tcx.hir().attrs(trait_item.hir_id());\n \n                     self.dumper.dump_def(\n                         &Access { public: true, reachable: true },\n@@ -1040,18 +1042,15 @@ impl<'tcx> DumpVisitor<'tcx> {\n                             parent: Some(id_from_def_id(trait_id)),\n                             children: vec![],\n                             decl_id: None,\n-                            docs: self.save_ctxt.docs_for_attrs(&trait_item.attrs),\n+                            docs: self.save_ctxt.docs_for_attrs(attrs),\n                             sig: sig::assoc_type_signature(\n                                 trait_item.hir_id(),\n                                 trait_item.ident,\n                                 Some(bounds),\n                                 default_ty.as_ref().map(|ty| &**ty),\n                                 &self.save_ctxt,\n                             ),\n-                            attributes: lower_attributes(\n-                                trait_item.attrs.to_vec(),\n-                                &self.save_ctxt,\n-                            ),\n+                            attributes: lower_attributes(attrs.to_vec(), &self.save_ctxt),\n                         },\n                     );\n                 }"}, {"sha": "8a188e8d05f33b80a2e4e6746a308da1d5617c42", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -472,9 +472,9 @@ impl<'tcx> SaveContext<'tcx> {\n                         let mut docs = String::new();\n                         let mut attrs = vec![];\n \n-                        if let Some(Node::TraitItem(item)) = self.tcx.hir().find(hir_id) {\n-                            docs = self.docs_for_attrs(&item.attrs);\n-                            attrs = item.attrs.to_vec();\n+                        if let Some(Node::TraitItem(_)) = self.tcx.hir().find(hir_id) {\n+                            attrs = self.tcx.hir().attrs(hir_id).to_vec();\n+                            docs = self.docs_for_attrs(&attrs);\n                         }\n \n                         ("}, {"sha": "5ca67507a3d47635d9d0ab3b7282066b09f5703f", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -359,7 +359,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if is_relevant_trait(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n         }\n     }\n }"}, {"sha": "5299b192f501e736ab8e48a61a623894038fddae", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -250,7 +250,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n                 lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, None, None);"}, {"sha": "4a10f9abce4b724b485f5efc0c8de9f7fef11c89", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -344,15 +344,16 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n \n-            let attr = must_use_attr(&item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let attr = must_use_attr(attrs);\n             if let Some(attr) = attr {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             }\n             if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id());\n \n-                if attr.is_none() && is_public && !is_proc_macro(cx.sess(), &item.attrs) {\n+                if attr.is_none() && is_public && !is_proc_macro(cx.sess(), attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,"}, {"sha": "00acbd6cc3f7694525ebba2802f5883207b8a5bc", "filename": "src/tools/clippy/clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -34,7 +34,8 @@ declare_lint_pass!(InlineFnWithoutBody => [INLINE_FN_WITHOUT_BODY]);\n impl<'tcx> LateLintPass<'tcx> for InlineFnWithoutBody {\n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Fn(_, TraitFn::Required(_)) = item.kind {\n-            check_attrs(cx, item.ident.name, &item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            check_attrs(cx, item.ident.name, attrs);\n         }\n     }\n }"}, {"sha": "0a75b47e2c65f73f4c2f14bcb6a304ae72d19fd3", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -167,7 +167,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n         let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {"}, {"sha": "74afc292f018126bb9076d514f948bfd84d05c9a", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49359add2dd78b28b907cd2d7a06473ff91626e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=c49359add2dd78b28b907cd2d7a06473ff91626e", "patch": "@@ -108,7 +108,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n                                 let item = cx.tcx.hir().trait_item(tit.id);\n-                                check_missing_inline_attrs(cx, &item.attrs, item.span, desc);\n+                                let attrs = cx.tcx.hir().attrs(item.hir_id());\n+                                check_missing_inline_attrs(cx, attrs, item.span, desc);\n                             }\n                         },\n                     }"}]}