{"sha": "6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94", "node_id": "C_kwDOAAsO6NoAKDZlM2IwZGY4YjhmMjFjM2I4MzNjMzg2YzdiOGM2NTU0ZjBiZTJiOTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-28T08:31:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-28T08:31:43Z"}, "message": "pthread_setname_np returns an int on macOS", "tree": {"sha": "6137c378b6a6126d92c056269298e9d1ba7bee66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6137c378b6a6126d92c056269298e9d1ba7bee66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94", "html_url": "https://github.com/rust-lang/rust/commit/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d795f7e479d1988215912b65f6a9256b399028da", "url": "https://api.github.com/repos/rust-lang/rust/commits/d795f7e479d1988215912b65f6a9256b399028da", "html_url": "https://github.com/rust-lang/rust/commit/d795f7e479d1988215912b65f6a9256b399028da"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "221dc39697f9028147057f75318992c044be74a2", "filename": "src/tools/miri/src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94", "patch": "@@ -177,11 +177,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let thread = this.pthread_self()?;\n                 let max_len = this.eval_libc(\"MAXTHREADNAMESIZE\")?.to_machine_usize(this)?;\n-                this.pthread_setname_np(\n+                let res = this.pthread_setname_np(\n                     thread,\n                     this.read_scalar(name)?,\n                     max_len.try_into().unwrap(),\n                 )?;\n+                // Contrary to the manpage, `pthread_setname_np` on macOS still\n+                // returns an integer indicating success.\n+                this.write_scalar(res, dest)?;\n             }\n             \"pthread_getname_np\" => {\n                 let [thread, name, len] ="}, {"sha": "ae02a8e3c980a2f1e26ee8eba0039251df41b8c0", "filename": "src/tools/miri/tests/pass-dep/shims/pthreads.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs?ref=6e3b0df8b8f21c3b833c386c7b8c6554f0be2b94", "patch": "@@ -1,6 +1,6 @@\n //@ignore-target-windows: No libc on Windows\n #![feature(cstr_from_bytes_until_nul)]\n-use std::ffi::CStr;\n+use std::ffi::{CStr, CString};\n use std::thread;\n \n fn main() {\n@@ -135,18 +135,30 @@ fn test_named_thread_truncation() {\n         .chain(std::iter::repeat(\" yada\").take(100))\n         .collect::<String>();\n \n+    fn set_thread_name(name: &CStr) -> i32 {\n+        #[cfg(target_os = \"linux\")]\n+        return unsafe { libc::pthread_setname_np(libc::pthread_self(), name.as_ptr().cast()) };\n+        #[cfg(target_os = \"macos\")]\n+        return unsafe { libc::pthread_setname_np(name.as_ptr().cast()) };\n+    }\n+\n     let result = thread::Builder::new().name(long_name.clone()).spawn(move || {\n         // Rust remembers the full thread name itself.\n         assert_eq!(thread::current().name(), Some(long_name.as_str()));\n \n         // But the system is limited -- make sure we successfully set a truncation.\n         let mut buf = vec![0u8; long_name.len() + 1];\n         unsafe {\n-            libc::pthread_getname_np(libc::pthread_self(), buf.as_mut_ptr().cast(), buf.len());\n-        }\n+            libc::pthread_getname_np(libc::pthread_self(), buf.as_mut_ptr().cast(), buf.len())\n+        };\n         let cstr = CStr::from_bytes_until_nul(&buf).unwrap();\n         assert!(cstr.to_bytes().len() >= 15); // POSIX seems to promise at least 15 chars\n         assert!(long_name.as_bytes().starts_with(cstr.to_bytes()));\n+\n+        // Also test directly calling pthread_setname to check its return value.\n+        assert_eq!(set_thread_name(&cstr), 0);\n+        // But with a too long name it should fail.\n+        assert_ne!(set_thread_name(&CString::new(long_name).unwrap()), 0);\n     });\n     result.unwrap().join().unwrap();\n }"}]}