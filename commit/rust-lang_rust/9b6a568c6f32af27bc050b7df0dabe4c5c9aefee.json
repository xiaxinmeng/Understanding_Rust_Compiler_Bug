{"sha": "9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNmE1NjhjNmYzMmFmMjdiYzA1MGI3ZGYwZGFiZTRjNWM5YWVmZWU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-08T23:26:28Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-08T23:26:28Z"}, "message": "Fix the expected error annotations.\n\n(The commit prior to this actual passes our test suite, \"thanks\"\nto #55695. But since I am aware of that bug, I took advantage of it\nin choosing how to order my commit series...)", "tree": {"sha": "90925b1e8ca39ccb66851b5aebf50206930803d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90925b1e8ca39ccb66851b5aebf50206930803d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "html_url": "https://github.com/rust-lang/rust/commit/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0151cac17cab1f88f4c3d27ac8cbb8e53f3fab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0151cac17cab1f88f4c3d27ac8cbb8e53f3fab6", "html_url": "https://github.com/rust-lang/rust/commit/d0151cac17cab1f88f4c3d27ac8cbb8e53f3fab6"}], "stats": {"total": 130, "additions": 65, "deletions": 65}, "files": [{"sha": "95b26a5724a412da7024ec1f88ecd1a4f59ce61f", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.ast.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr?ref=9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "patch": "@@ -3,8 +3,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -14,8 +14,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -25,8 +25,8 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = &a.y; //~ ERROR use of moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = &a.y; //[ast]~ ERROR use of moved\n    |               ^^^ value used here after move\n    |\n    = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -44,7 +44,7 @@ error[E0503]: cannot use `a.y` because it was mutably borrowed\n    |\n LL |     let _x = &mut a.x;\n    |                   --- borrow of `a.x` occurs here\n-LL |     let _y = a.y; //~ ERROR cannot use\n+LL |     let _y = a.y; //[ast]~ ERROR cannot use\n    |         ^^ use of borrowed `a.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n@@ -60,7 +60,7 @@ error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also bor\n    |\n LL |     let _x = &mut a.x;\n    |                   --- mutable borrow occurs here (via `a.x`)\n-LL |     let _y = &a.y; //~ ERROR cannot borrow\n+LL |     let _y = &a.y; //[ast]~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here (via `a.y`)\n ...\n LL | }\n@@ -71,7 +71,7 @@ error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borro\n    |\n LL |     let _x = &a.x;\n    |               --- immutable borrow occurs here (via `a.x`)\n-LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n+LL |     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n    |                   ^^^ mutable borrow occurs here (via `a.y`)\n ...\n LL | }\n@@ -82,8 +82,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of collaterally moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of collaterally moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -93,8 +93,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = a.y; //~ ERROR use of collaterally moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = a.y; //[ast]~ ERROR use of collaterally moved\n    |         ^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -104,8 +104,8 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-LL |     //~^ value moved here\n-LL |     let _y = &a.y; //~ ERROR use of collaterally moved\n+LL |     //[ast]~^ value moved here\n+LL |     let _y = &a.y; //[ast]~ ERROR use of collaterally moved\n    |               ^^^ value used here after move\n    |\n    = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -115,7 +115,7 @@ error[E0505]: cannot move out of `a.y` because it is borrowed\n    |\n LL |     let _x = &a.x.x;\n    |               ----- borrow of `a.x.x` occurs here\n-LL |     //~^ borrow of `a.x.x` occurs here\n+LL |     //[ast]~^ borrow of `a.x.x` occurs here\n LL |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n@@ -124,7 +124,7 @@ error[E0503]: cannot use `a.y` because it was mutably borrowed\n    |\n LL |     let _x = &mut a.x.x;\n    |                   ----- borrow of `a.x.x` occurs here\n-LL |     let _y = a.y; //~ ERROR cannot use\n+LL |     let _y = a.y; //[ast]~ ERROR cannot use\n    |         ^^ use of borrowed `a.x.x`\n \n error[E0505]: cannot move out of `a.y` because it is borrowed\n@@ -140,8 +140,8 @@ error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed\n    |\n LL |     let _x = &mut a.x.x;\n    |                   ----- mutable borrow occurs here\n-LL |     //~^ mutable borrow occurs here\n-LL |     let _y = &a.y; //~ ERROR cannot borrow\n+LL |     //[ast]~^ mutable borrow occurs here\n+LL |     let _y = &a.y; //[ast]~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -152,8 +152,8 @@ error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as\n    |\n LL |     let _x = &a.x.x;\n    |               ----- immutable borrow occurs here\n-LL |     //~^ immutable borrow occurs here\n-LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n+LL |     //[ast]~^ immutable borrow occurs here\n+LL |     let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n    |                   ^^^ mutable borrow occurs here\n ...\n LL | }"}, {"sha": "171e992e8a628e7aa1b072991509860f9f293e51", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr?ref=9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/borrowck-box-insensitivity.rs:160:1\n    |\n-LL | / fn main() {\n+LL | / fn main() { //[mir]~ ERROR compilation successful\n LL | |     copy_after_move();\n LL | |     move_after_move();\n LL | |     borrow_after_move();"}, {"sha": "2af97a9fc1d58718ed3e92eefa80f0549adbe68e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b6a568c6f32af27bc050b7df0dabe4c5c9aefee/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=9b6a568c6f32af27bc050b7df0dabe4c5c9aefee", "patch": "@@ -33,131 +33,131 @@ struct D {\n fn copy_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of moved\n+    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //[ast]~| value used here after move\n }\n \n fn move_after_move() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of moved\n+    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //[ast]~| value used here after move\n }\n \n fn borrow_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ value moved here\n-    let _y = &a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = &a.y; //[ast]~ ERROR use of moved\n+    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //[ast]~| value used here after move\n }\n \n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n     use_imm(_x);\n }\n fn copy_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    let _y = a.y; //~ ERROR cannot use\n+    let _y = a.y; //[ast]~ ERROR cannot use\n     use_mut(_x);\n }\n fn move_after_mut_borrow() {\n     let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n     use_mut(_x);\n }\n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ immutable borrow occurs here (via `a.y`)\n+    let _y = &a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ immutable borrow occurs here (via `a.y`)\n     use_mut(_x);\n }\n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n-    let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ mutable borrow occurs here (via `a.y`)\n+    let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ mutable borrow occurs here (via `a.y`)\n     use_imm(_x);\n }\n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of collaterally moved\n+    //[ast]~| value used here after move\n }\n \n fn move_after_move_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n-    let _y = a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = a.y; //[ast]~ ERROR use of collaterally moved\n+    //[ast]~| value used here after move\n }\n \n fn borrow_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ value moved here\n-    let _y = &a.y; //~ ERROR use of collaterally moved\n-    //~| value used here after move\n+    //[ast]~^ value moved here\n+    let _y = &a.y; //[ast]~ ERROR use of collaterally moved\n+    //[ast]~| value used here after move\n }\n \n fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n-    //~^ borrow of `a.x.x` occurs here\n+    //[ast]~^ borrow of `a.x.x` occurs here\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n     use_imm(_x);\n }\n fn copy_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    let _y = a.y; //~ ERROR cannot use\n+    let _y = a.y; //[ast]~ ERROR cannot use\n     use_mut(_x);\n }\n fn move_after_mut_borrow_nested() {\n     let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n     let _y = a.y;\n-    //~^ ERROR cannot move\n-    //~| move out of\n+    //[ast]~^ ERROR cannot move\n+    //[ast]~| move out of\n     use_mut(_x);\n }\n fn borrow_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //~^ mutable borrow occurs here\n-    let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ immutable borrow occurs here\n+    //[ast]~^ mutable borrow occurs here\n+    let _y = &a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ immutable borrow occurs here\n     use_mut(_x);\n }\n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n-    //~^ immutable borrow occurs here\n-    let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ mutable borrow occurs here\n+    //[ast]~^ immutable borrow occurs here\n+    let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n+    //[ast]~^ mutable borrow occurs here\n     use_imm(_x);\n }\n #[rustc_error]\n-fn main() {\n+fn main() { //[mir]~ ERROR compilation successful\n     copy_after_move();\n     move_after_move();\n     borrow_after_move();"}]}