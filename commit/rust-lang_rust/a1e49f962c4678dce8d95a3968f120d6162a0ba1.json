{"sha": "a1e49f962c4678dce8d95a3968f120d6162a0ba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZTQ5Zjk2MmM0Njc4ZGNlOGQ5NWEzOTY4ZjEyMGQ2MTYyYTBiYTE=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-08T13:50:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-08T13:50:20Z"}, "message": "Rollup merge of #5415 - nickrtorres:master, r=flip1995\n\nAdd new lint for `Result<T, E>.map_or(None, Some(T))`\n\nFixes #5414\n\nPR Checklist\n---\n- [x] Followed lint naming conventions (the name is a bit awkward, but it seems to conform)\n- [x] Added passing UI tests (including committed .stderr file)\n- [x] cargo test passes locally\n- [x] Executed cargo dev update_lints\n- [x] Added lint documentation\n- [x] Run cargo dev fmt\n\n`Result<T, E>` has an [`ok()`](https://doc.rust-lang.org/std/result/enum.Result.html#method.ok) method that adapts a `Result<T,E>` into an `Option<T>`.\nIt's possible to get around this adapter by writing `Result<T,E>.map_or(None, Some)`.\n\nThis lint is implemented as a new variant of the existing [`option_map_none` lint](https://github.com/rust-lang/rust-clippy/pull/2128)", "tree": {"sha": "6baf009b22a55c4f41e5d49e4c327e664e53190b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6baf009b22a55c4f41e5d49e4c327e664e53190b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e49f962c4678dce8d95a3968f120d6162a0ba1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejdacCRBK7hj4Ov3rIwAAdHIIAI5cCQWcdBaF2K45V7qWIDtt\nN20vBPABD/YSzMiSMzWNJZrPmoE73fh+FpYTXvBN+r5y22rEatVoQKRIUGXKihWJ\nYdq9n7Vppse+Jfv4gc3Bz5lrHsaQSbUhFsWqDViByyykNxuo/HKRdj0o0ln2J4/E\nCwM5lx1IMlCnFPq/FqzYmKpvpssH6RLOfloRxRPDMzkvNikbeju0n4WroCxcE/iy\nUuyqQnbIdDbK1sL6IoHlTMFkoYMhpTGAyjQcstobrpZ6HQh05iv1iKNMWQNZUUbl\nAGzK9gQLro3fEsV5FAtLNxeyArrT5DRu9LyG8V667nfhUeW5uzfmZ9ey3qO6RgA=\n=K9VA\n-----END PGP SIGNATURE-----\n", "payload": "tree 6baf009b22a55c4f41e5d49e4c327e664e53190b\nparent 5ea477143318468460acde5495f69fe8855c456e\nparent 5d54fbb7914cc1ea5b3bd8cdfd6f24dbacd8f649\nauthor Philipp Krones <hello@philkrones.com> 1586353820 +0200\ncommitter GitHub <noreply@github.com> 1586353820 +0200\n\nRollup merge of #5415 - nickrtorres:master, r=flip1995\n\nAdd new lint for `Result<T, E>.map_or(None, Some(T))`\n\nFixes #5414\n\nPR Checklist\n---\n- [x] Followed lint naming conventions (the name is a bit awkward, but it seems to conform)\n- [x] Added passing UI tests (including committed .stderr file)\n- [x] cargo test passes locally\n- [x] Executed cargo dev update_lints\n- [x] Added lint documentation\n- [x] Run cargo dev fmt\n\n`Result<T, E>` has an [`ok()`](https://doc.rust-lang.org/std/result/enum.Result.html#method.ok) method that adapts a `Result<T,E>` into an `Option<T>`.\nIt's possible to get around this adapter by writing `Result<T,E>.map_or(None, Some)`.\n\nThis lint is implemented as a new variant of the existing [`option_map_none` lint](https://github.com/rust-lang/rust-clippy/pull/2128)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e49f962c4678dce8d95a3968f120d6162a0ba1", "html_url": "https://github.com/rust-lang/rust/commit/a1e49f962c4678dce8d95a3968f120d6162a0ba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e49f962c4678dce8d95a3968f120d6162a0ba1/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea477143318468460acde5495f69fe8855c456e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea477143318468460acde5495f69fe8855c456e", "html_url": "https://github.com/rust-lang/rust/commit/5ea477143318468460acde5495f69fe8855c456e"}, {"sha": "5d54fbb7914cc1ea5b3bd8cdfd6f24dbacd8f649", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d54fbb7914cc1ea5b3bd8cdfd6f24dbacd8f649", "html_url": "https://github.com/rust-lang/rust/commit/5d54fbb7914cc1ea5b3bd8cdfd6f24dbacd8f649"}], "stats": {"total": 158, "additions": 142, "deletions": 16}, "files": [{"sha": "b7ac3cace2048a7684cc55d20af461770b361f2c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1e49f962c4678dce8d95a3968f120d6162a0ba1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a1e49f962c4678dce8d95a3968f120d6162a0ba1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a1e49f962c4678dce8d95a3968f120d6162a0ba1", "patch": "@@ -1448,6 +1448,7 @@ Released 2018-09-13\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n+[`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used"}, {"sha": "2dc98f9658305019b9e8c0a6e04bcff2c7892fef", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1e49f962c4678dce8d95a3968f120d6162a0ba1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e49f962c4678dce8d95a3968f120d6162a0ba1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a1e49f962c4678dce8d95a3968f120d6162a0ba1", "patch": "@@ -666,6 +666,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::OPTION_UNWRAP_USED,\n         &methods::OR_FUN_CALL,\n         &methods::RESULT_EXPECT_USED,\n+        &methods::RESULT_MAP_OR_INTO_OPTION,\n         &methods::RESULT_MAP_UNWRAP_OR_ELSE,\n         &methods::RESULT_UNWRAP_USED,\n         &methods::SEARCH_IS_SOME,\n@@ -1281,6 +1282,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::OR_FUN_CALL),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n@@ -1459,6 +1461,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),"}, {"sha": "07423111549e330ab34482eeb93a3fb011397517", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 83, "deletions": 16, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a1e49f962c4678dce8d95a3968f120d6162a0ba1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e49f962c4678dce8d95a3968f120d6162a0ba1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a1e49f962c4678dce8d95a3968f120d6162a0ba1", "patch": "@@ -331,6 +331,32 @@ declare_clippy_lint! {\n     \"using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.map_or(None, Some)`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// `_.ok()`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust\n+    /// # let r: Result<u32, &str> = Ok(1);\n+    /// assert_eq!(Some(1), r.map_or(None, Some));\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// # let r: Result<u32, &str> = Ok(1);\n+    /// assert_eq!(Some(1), r.ok());\n+    /// ```\n+    pub RESULT_MAP_OR_INTO_OPTION,\n+    style,\n+    \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.and_then(|x| Some(y))`.\n     ///\n@@ -1249,6 +1275,7 @@ declare_lint_pass!(Methods => [\n     OPTION_MAP_UNWRAP_OR,\n     OPTION_MAP_UNWRAP_OR_ELSE,\n     RESULT_MAP_UNWRAP_OR_ELSE,\n+    RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n     OPTION_AND_THEN_SOME,\n     OR_FUN_CALL,\n@@ -2524,38 +2551,78 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n     }\n }\n \n-/// lint use of `_.map_or(None, _)` for `Option`s\n+/// lint use of `_.map_or(None, _)` for `Option`s and `Result`s\n fn lint_map_or_none<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     map_or_args: &'tcx [hir::Expr<'_>],\n ) {\n-    if match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION) {\n-        // check if the first non-self argument to map_or() is None\n-        let map_or_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n+    let is_option = match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION);\n+    let is_result = match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::RESULT);\n+\n+    // There are two variants of this `map_or` lint:\n+    // (1) using `map_or` as an adapter from `Result<T,E>` to `Option<T>`\n+    // (2) using `map_or` as a combinator instead of `and_then`\n+    //\n+    // (For this lint) we don't care if any other type calls `map_or`\n+    if !is_option && !is_result {\n+        return;\n+    }\n+\n+    let (lint_name, msg, instead, hint) = {\n+        let default_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n             match_qpath(qpath, &paths::OPTION_NONE)\n+        } else {\n+            return;\n+        };\n+\n+        if !default_arg_is_none {\n+            // nothing to lint!\n+            return;\n+        }\n+\n+        let f_arg_is_some = if let hir::ExprKind::Path(ref qpath) = map_or_args[2].kind {\n+            match_qpath(qpath, &paths::OPTION_SOME)\n         } else {\n             false\n         };\n \n-        if map_or_arg_is_none {\n-            // lint message\n+        if is_option {\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n                        `and_then(f)` instead\";\n-            let map_or_self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-            let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-            let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n-            span_lint_and_sugg(\n-                cx,\n+            (\n                 OPTION_MAP_OR_NONE,\n-                expr.span,\n                 msg,\n                 \"try using `and_then` instead\",\n-                hint,\n-                Applicability::MachineApplicable,\n-            );\n+                format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+            )\n+        } else if f_arg_is_some {\n+            let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n+                       `ok()` instead\";\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            (\n+                RESULT_MAP_OR_INTO_OPTION,\n+                msg,\n+                \"try using `ok` instead\",\n+                format!(\"{0}.ok()\", self_snippet),\n+            )\n+        } else {\n+            // nothing to lint!\n+            return;\n         }\n-    }\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        lint_name,\n+        expr.span,\n+        msg,\n+        instead,\n+        hint,\n+        Applicability::MachineApplicable,\n+    );\n }\n \n /// Lint use of `_.and_then(|x| Some(y))` for `Option`s"}, {"sha": "6ececc8da047317f3a3600aeba3d1e9d4d103c64", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1e49f962c4678dce8d95a3968f120d6162a0ba1/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e49f962c4678dce8d95a3968f120d6162a0ba1/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=a1e49f962c4678dce8d95a3968f120d6162a0ba1", "patch": "@@ -1823,6 +1823,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"result_map_or_into_option\",\n+        group: \"style\",\n+        desc: \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\","}, {"sha": "331531b5165f61dce075c4d800d9d806a7dba3e3", "filename": "tests/ui/result_map_or_into_option.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1e49f962c4678dce8d95a3968f120d6162a0ba1/tests%2Fui%2Fresult_map_or_into_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a1e49f962c4678dce8d95a3968f120d6162a0ba1/tests%2Fui%2Fresult_map_or_into_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.fixed?ref=a1e49f962c4678dce8d95a3968f120d6162a0ba1", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.ok();\n+\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+\n+    // A non-Some `f` closure where the argument is not used as the\n+    // return should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    opt.map_or(None, |_x| Some(1));\n+}"}, {"sha": "3058480e2ad3d935c114a144ea504e495d033f7f", "filename": "tests/ui/result_map_or_into_option.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1e49f962c4678dce8d95a3968f120d6162a0ba1/tests%2Fui%2Fresult_map_or_into_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e49f962c4678dce8d95a3968f120d6162a0ba1/tests%2Fui%2Fresult_map_or_into_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.rs?ref=a1e49f962c4678dce8d95a3968f120d6162a0ba1", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, Some);\n+\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+\n+    // A non-Some `f` closure where the argument is not used as the\n+    // return should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    opt.map_or(None, |_x| Some(1));\n+}"}, {"sha": "febf32147d132d3e163e13080e025ccd31d30263", "filename": "tests/ui/result_map_or_into_option.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1e49f962c4678dce8d95a3968f120d6162a0ba1/tests%2Fui%2Fresult_map_or_into_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1e49f962c4678dce8d95a3968f120d6162a0ba1/tests%2Fui%2Fresult_map_or_into_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.stderr?ref=a1e49f962c4678dce8d95a3968f120d6162a0ba1", "patch": "@@ -0,0 +1,10 @@\n+error: called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling `ok()` instead\n+  --> $DIR/result_map_or_into_option.rs:7:13\n+   |\n+LL |     let _ = opt.map_or(None, Some);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try using `ok` instead: `opt.ok()`\n+   |\n+   = note: `-D clippy::result-map-or-into-option` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}