{"sha": "274bb24efdbeed0ab1a91f3c02f86551ef16eac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NGJiMjRlZmRiZWVkMGFiMWE5MWYzYzAyZjg2NTUxZWYxNmVhYzc=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-24T14:22:09Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-24T14:22:09Z"}, "message": "StrSearcher: Explicitly separate the long and short cases\n\nThis is needed to not drop performance, after the trait-based changes.\nForce separate versions of the next method to be generated for the short\nand long period cases.", "tree": {"sha": "274c90722829f1cb0b81aee5b176465737ec362d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274c90722829f1cb0b81aee5b176465737ec362d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/274bb24efdbeed0ab1a91f3c02f86551ef16eac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/274bb24efdbeed0ab1a91f3c02f86551ef16eac7", "html_url": "https://github.com/rust-lang/rust/commit/274bb24efdbeed0ab1a91f3c02f86551ef16eac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/274bb24efdbeed0ab1a91f3c02f86551ef16eac7/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71006bd6545015d7ae8e4c18589812bc1f6373dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/71006bd6545015d7ae8e4c18589812bc1f6373dd", "html_url": "https://github.com/rust-lang/rust/commit/71006bd6545015d7ae8e4c18589812bc1f6373dd"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "dccdaa9120d10146c8171e999e9b4e81e932c656", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/274bb24efdbeed0ab1a91f3c02f86551ef16eac7/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274bb24efdbeed0ab1a91f3c02f86551ef16eac7/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=274bb24efdbeed0ab1a91f3c02f86551ef16eac7", "patch": "@@ -628,7 +628,7 @@ unsafe impl<'a, 'b> Searcher<'a> for StrSearcher<'a, 'b> {\n         }\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     fn next_match(&mut self) -> Option<(usize, usize)> {\n         match self.searcher {\n             StrSearcherImpl::Empty(..) => {\n@@ -642,9 +642,15 @@ unsafe impl<'a, 'b> Searcher<'a> for StrSearcher<'a, 'b> {\n             }\n             StrSearcherImpl::TwoWay(ref mut searcher) => {\n                 let is_long = searcher.memory == usize::MAX;\n-                searcher.next::<MatchOnly>(self.haystack.as_bytes(),\n-                                           self.needle.as_bytes(),\n-                                           is_long)\n+                if is_long {\n+                    searcher.next::<MatchOnly>(self.haystack.as_bytes(),\n+                                               self.needle.as_bytes(),\n+                                               true)\n+                } else {\n+                    searcher.next::<MatchOnly>(self.haystack.as_bytes(),\n+                                               self.needle.as_bytes(),\n+                                               false)\n+                }\n             }\n         }\n     }\n@@ -854,7 +860,7 @@ impl TwoWaySearcher {\n     // left to right. If v matches, we try to match u by scanning right to left.\n     // How far we can jump when we encounter a mismatch is all based on the fact\n     // that (u, v) is a critical factorization for the needle.\n-    #[inline]\n+    #[inline(always)]\n     fn next<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool)\n         -> S::Output\n         where S: TwoWayStrategy"}]}