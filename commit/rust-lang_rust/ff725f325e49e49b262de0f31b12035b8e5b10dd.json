{"sha": "ff725f325e49e49b262de0f31b12035b8e5b10dd", "node_id": "C_kwDOAAsO6NoAKGZmNzI1ZjMyNWU0OWU0OWIyNjJkZTBmMzFiMTIwMzViOGU1YjEwZGQ", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-10-22T02:35:40Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-11-03T05:47:28Z"}, "message": "fix change clobbered by rebase", "tree": {"sha": "bdec35262b9610888b99d15820d095b9f5295e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdec35262b9610888b99d15820d095b9f5295e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff725f325e49e49b262de0f31b12035b8e5b10dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff725f325e49e49b262de0f31b12035b8e5b10dd", "html_url": "https://github.com/rust-lang/rust/commit/ff725f325e49e49b262de0f31b12035b8e5b10dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff725f325e49e49b262de0f31b12035b8e5b10dd/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8fd23a31c66d6c412b57262c9e0974f1af3197", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8fd23a31c66d6c412b57262c9e0974f1af3197", "html_url": "https://github.com/rust-lang/rust/commit/0d8fd23a31c66d6c412b57262c9e0974f1af3197"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "f75cc9c3b171c10b1439d968e0031d7269a18354", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ff725f325e49e49b262de0f31b12035b8e5b10dd/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff725f325e49e49b262de0f31b12035b8e5b10dd/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=ff725f325e49e49b262de0f31b12035b8e5b10dd", "patch": "@@ -358,11 +358,9 @@ where\n // of data to return. Simply tacking on an extra DEFAULT_BUF_SIZE space every\n // time is 4,500 times (!) slower than a default reservation size of 32 if the\n // reader has a very small amount of data to return.\n-//\n-// Because we're extending the buffer with uninitialized data for trusted\n-// readers, we need to make sure to truncate that if any of this panics.\n pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n-    let initial_len = buf.len(); // need to know so we can return how many bytes we read\n+    let start_len = buf.len();\n+    let start_cap = buf.capacity();\n \n     let mut initialized = 0; // Extra initalized bytes from previous loop iteration\n     loop {\n@@ -384,7 +382,7 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n         }\n \n         if read_buf.filled_len() == 0 {\n-            break;\n+            return Ok(buf.len() - start_len) \n         }\n \n         // store how much was initialized but not filled\n@@ -395,9 +393,27 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n         unsafe {\n             buf.set_len(new_len);\n         }\n-    }\n \n-    Ok(buf.len() - initial_len)\n+        if buf.len() == buf.capacity() && buf.capacity() == start_cap {\n+            // The buffer might be an exact fit. Let's read into a probe buffer\n+            // and see if it returns `Ok(0)`. If so, we've avoided an\n+            // unnecessary doubling of the capacity. But if not, append the\n+            // probe buffer to the primary buffer and let its capacity grow.\n+            let mut probe = [0u8; 32];\n+\n+            loop {\n+                match r.read(&mut probe) {\n+                    Ok(0) => return Ok(buf.len() - start_len),\n+                    Ok(n) => {\n+                        buf.extend_from_slice(&probe[..n]);\n+                        break;\n+                    }\n+                    Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n+                    Err(e) => return Err(e),\n+                }\n+            }\n+        }\n+    }\n }\n \n pub(crate) fn default_read_to_string<R: Read + ?Sized>("}]}