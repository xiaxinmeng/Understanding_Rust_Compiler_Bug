{"sha": "cb748a27d28df86cfe036709dc8092896abde31a", "node_id": "C_kwDOAAsO6NoAKGNiNzQ4YTI3ZDI4ZGY4NmNmZTAzNjcwOWRjODA5Mjg5NmFiZGUzMWE", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2022-01-04T16:44:15Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-01-19T14:59:23Z"}, "message": "Fix CVE-2022-21658 for WASI", "tree": {"sha": "5d2ef9fcaaf5c5d53fbe94f931486dae82f65c1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d2ef9fcaaf5c5d53fbe94f931486dae82f65c1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb748a27d28df86cfe036709dc8092896abde31a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmHoJ0sACgkQzXazX3c0\ndp6tcxAAgq2t8zC49gOczTGVnZ7g1oUFojRw9BVnMSh9hkH+tw8C0+dmnvvV9Im7\ntxHWhnvTSftNYYC5YEHD5OKdwC1pmLyvBu3+kzeamHrAQ5HYZoEJFXVHZSfrxrAI\nYYlnnwKwOxTXKvLc97i34mGb4Rxb8/YdJTm6yfnij4QNHW8jXxuUCwREGQdH2Nhm\nIHYWYcjn5PzBrPVKTnxZU+UptEKm8l2O/OuPlic9BXBylNSHZ0QoGxPBXozWkzrd\nZRC8fGFmr+liP99qI8mI+fkh8yCbLA9mo8iX5+tcx7qkf3kk6RBL2VARXixgXqeM\nhnNOn3Ylt/UkQvSOr4qbpW8h2XLXd6mRjnMYm7glDmAJkFypnQDTMb58YxrocV0X\n7oeb6YtbF2KZpbNlr6T903zK0fJahkuUp+OGT8M3UFnlSHOG9RnEoZl5c0UHphuo\nOeBog2oGkG62UstkbWN2NCpQDkkQ7UaX/04ctzHinWSIaHC2deLPOiiXt+xO+fUI\nLV0ul1WfAEacJ3QJAYt9s0LvIp6yhh/BeZjsGGqsfufiau8qdp+7u34z0c8Hejwa\nItyDF4yIU88pnBJ6twd+Gh6rYSNG3M/iLA8BhUlj4j7svfBRWFxKTt8V3CAofP/v\nvcIeOx5lAPKmqnX5vPC3heIEjfVgPLEOJm4pdlxMlTtI1z3UUuQ=\n=X/wy\n-----END PGP SIGNATURE-----", "payload": "tree 5d2ef9fcaaf5c5d53fbe94f931486dae82f65c1e\nparent 54e22eb7dbb615bd44355028d3fd867aa93c0972\nauthor Alex Crichton <alex@alexcrichton.com> 1641314655 -0800\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1642604363 +0100\n\nFix CVE-2022-21658 for WASI\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb748a27d28df86cfe036709dc8092896abde31a", "html_url": "https://github.com/rust-lang/rust/commit/cb748a27d28df86cfe036709dc8092896abde31a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb748a27d28df86cfe036709dc8092896abde31a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e22eb7dbb615bd44355028d3fd867aa93c0972", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e22eb7dbb615bd44355028d3fd867aa93c0972", "html_url": "https://github.com/rust-lang/rust/commit/54e22eb7dbb615bd44355028d3fd867aa93c0972"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "5924789d12ba40bb75ef46e06d0efd187b380712", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/cb748a27d28df86cfe036709dc8092896abde31a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb748a27d28df86cfe036709dc8092896abde31a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=cb748a27d28df86cfe036709dc8092896abde31a", "patch": "@@ -16,7 +16,7 @@ use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n-pub use crate::sys_common::fs::{remove_dir_all, try_exists};\n+pub use crate::sys_common::fs::try_exists;\n \n pub struct File {\n     fd: WasiFd,\n@@ -130,6 +130,18 @@ impl FileType {\n     }\n }\n \n+impl ReadDir {\n+    fn new(dir: File, root: PathBuf) -> ReadDir {\n+        ReadDir {\n+            cookie: Some(0),\n+            buf: vec![0; 128],\n+            offset: 0,\n+            cap: 0,\n+            inner: Arc::new(ReadDirInner { dir, root }),\n+        }\n+    }\n+}\n+\n impl fmt::Debug for ReadDir {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"ReadDir\").finish_non_exhaustive()\n@@ -516,13 +528,7 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n     opts.directory(true);\n     opts.read(true);\n     let dir = File::open(p, &opts)?;\n-    Ok(ReadDir {\n-        cookie: Some(0),\n-        buf: vec![0; 128],\n-        offset: 0,\n-        cap: 0,\n-        inner: Arc::new(ReadDirInner { dir, root: p.to_path_buf() }),\n-    })\n+    Ok(ReadDir::new(dir, p.to_path_buf()))\n }\n \n pub fn unlink(p: &Path) -> io::Result<()> {\n@@ -716,3 +722,52 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n \n     io::copy(&mut reader, &mut writer)\n }\n+\n+pub fn remove_dir_all(path: &Path) -> io::Result<()> {\n+    let (parent, path) = open_parent(path)?;\n+    remove_dir_all_recursive(&parent, &path)\n+}\n+\n+fn remove_dir_all_recursive(parent: &WasiFd, path: &Path) -> io::Result<()> {\n+    // Open up a file descriptor for the directory itself. Note that we don't\n+    // follow symlinks here and we specifically open directories.\n+    //\n+    // At the root invocation of this function this will correctly handle\n+    // symlinks passed to the top-level `remove_dir_all`. At the recursive\n+    // level this will double-check that after the `readdir` call deduced this\n+    // was a directory it's still a directory by the time we open it up.\n+    //\n+    // If the opened file was actually a symlink then the symlink is deleted,\n+    // not the directory recursively.\n+    let mut opts = OpenOptions::new();\n+    opts.lookup_flags(0);\n+    opts.directory(true);\n+    opts.read(true);\n+    let fd = open_at(parent, path, &opts)?;\n+    if fd.file_attr()?.file_type().is_symlink() {\n+        return parent.unlink_file(osstr2str(path.as_ref())?);\n+    }\n+\n+    // this \"root\" is only used by `DirEntry::path` which we don't use below so\n+    // it's ok for this to be a bogus value\n+    let dummy_root = PathBuf::new();\n+\n+    // Iterate over all the entries in this directory, and travel recursively if\n+    // necessary\n+    for entry in ReadDir::new(fd, dummy_root) {\n+        let entry = entry?;\n+        let path = crate::str::from_utf8(&entry.name).map_err(|_| {\n+            io::Error::new_const(io::ErrorKind::Uncategorized, &\"invalid utf-8 file name found\")\n+        })?;\n+\n+        if entry.file_type()?.is_dir() {\n+            remove_dir_all_recursive(&entry.inner.dir.fd, path.as_ref())?;\n+        } else {\n+            entry.inner.dir.fd.unlink_file(path)?;\n+        }\n+    }\n+\n+    // Once all this directory's contents are deleted it should be safe to\n+    // delete the directory tiself.\n+    parent.remove_directory(osstr2str(path.as_ref())?)\n+}"}]}