{"sha": "7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmM2JmN2NjNzM4ZDAyZmRlODBkNGZkZTlmMzJjYmJlNzI4OTZiODc=", "commit": {"author": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-03-30T10:50:00Z"}, "committer": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-03-30T10:50:00Z"}, "message": "Added defWithBody", "tree": {"sha": "e4a3e7121fd4dd8971f0028177b777a77cdcc6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a3e7121fd4dd8971f0028177b777a77cdcc6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "html_url": "https://github.com/rust-lang/rust/commit/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/comments", "author": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a770190b07ee43364a66a65b886f7efa822ec6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a770190b07ee43364a66a65b886f7efa822ec6f", "html_url": "https://github.com/rust-lang/rust/commit/2a770190b07ee43364a66a65b886f7efa822ec6f"}], "stats": {"total": 144, "additions": 120, "deletions": 24}, "files": [{"sha": "db6e67d7fbee48d89ba68b86db392f6eee416529", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 78, "deletions": 6, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "patch": "@@ -433,6 +433,78 @@ impl Docs for EnumVariant {\n     }\n }\n \n+/// The defs which have a body.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum DefWithBody {\n+    Func(Function),\n+    Const(Const),\n+    Static(Static),\n+}\n+\n+impl DefWithBody {\n+    pub fn get_funct(&self) -> &Function {\n+        match *self {\n+            DefWithBody::Func(ref f) => f,\n+            _ => unreachable!()\n+        }\n+    }\n+\n+    pub fn const_source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::ConstDef>) {\n+       match *self {\n+           DefWithBody::Const(ref c) => c.source(db),\n+           _ => unreachable!()\n+       }\n+    }\n+\n+    pub fn func_source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::FnDef>) {\n+       match *self {\n+           DefWithBody::Func(ref f) => f.source(db),\n+           _ => unreachable!()\n+       }\n+    }\n+\n+    pub fn static_source(&self, db: &impl DefDatabase) -> (HirFileId, TreeArc<ast::StaticDef>) {\n+       match *self {\n+           DefWithBody::Static(ref s) => s.source(db),\n+           _ => unreachable!()\n+       }\n+    }\n+\n+    pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer(*self)\n+    }\n+\n+    pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n+        db.body_hir(*self)\n+    }\n+    \n+    /// Builds a resolver for code inside this item.\n+    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        // // take the outer scope...\n+        // let r = self\n+        //     .impl_block(db)\n+        //     .map(|ib| ib.resolver(db))\n+        //     .unwrap_or_else(|| self.module(db).resolver(db));\n+        // // ...and add generic params, if present\n+        // let p = self.generic_params(db);\n+        // let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n+        // r\n+        unimplemented!()\n+    }\n+\n+    pub fn signature(&self, db: &impl HirDatabase) -> Arc<FnSignature> {\n+        // db.fn_signature(*self)\n+        unimplemented!()\n+    }\n+\n+    pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSourceMap {\n+        let scopes = db.expr_scopes(*self);\n+        let source_map = db.body_with_source_map(*self).1;\n+        ScopesWithSourceMap { scopes, source_map }\n+    }\n+    \n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) id: FunctionId,\n@@ -483,20 +555,20 @@ impl Function {\n     }\n \n     pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(*self).1\n+        db.body_with_source_map(DefWithBody::Func(*self)).1\n     }\n \n     pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(*self)\n+        db.body_hir(DefWithBody::Func(*self))\n     }\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def((*self).into(), Namespace::Values)\n     }\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSourceMap {\n-        let scopes = db.expr_scopes(*self);\n-        let source_map = db.body_with_source_map(*self).1;\n+        let scopes = db.expr_scopes( DefWithBody::Func(*self));\n+        let source_map = db.body_with_source_map(DefWithBody::Func(*self)).1;\n         ScopesWithSourceMap { scopes, source_map }\n     }\n \n@@ -505,7 +577,7 @@ impl Function {\n     }\n \n     pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(*self)\n+        db.infer(DefWithBody::Func(*self))\n     }\n \n     pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n@@ -716,4 +788,4 @@ impl Docs for TypeAlias {\n     fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n         docs_from_ast(&*self.source(db).1)\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "a2aff241ce78e1071162930ff319be3425feb3d0", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     Function, FnSignature, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n     Const, ConstSignature, Static,\n+    DefWithBody,\n     nameres::{Namespace, ImportSourceMap, RawItems, CrateDefMap},\n     ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig},\n     adt::{StructData, EnumData},\n@@ -83,10 +84,10 @@ pub trait DefDatabase: SourceDatabase + AsRef<HirInterner> {\n #[salsa::query_group(HirDatabaseStorage)]\n pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(ExprScopes::expr_scopes_query)]\n-    fn expr_scopes(&self, func: Function) -> Arc<ExprScopes>;\n+    fn expr_scopes(&self, def: DefWithBody) -> Arc<ExprScopes>;\n \n     #[salsa::invoke(crate::ty::infer)]\n-    fn infer(&self, func: Function) -> Arc<InferenceResult>;\n+    fn infer(&self, def:DefWithBody) -> Arc<InferenceResult>;\n \n     #[salsa::invoke(crate::ty::type_for_def)]\n     fn type_for_def(&self, def: TypableDef, ns: Namespace) -> Ty;\n@@ -100,11 +101,11 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::expr::body_with_source_map_query)]\n     fn body_with_source_map(\n         &self,\n-        func: Function,\n+        def: DefWithBody,\n     ) -> (Arc<crate::expr::Body>, Arc<crate::expr::BodySourceMap>);\n \n     #[salsa::invoke(crate::expr::body_hir_query)]\n-    fn body_hir(&self, func: Function) -> Arc<crate::expr::Body>;\n+    fn body_hir(&self, def: DefWithBody) -> Arc<crate::expr::Body>;\n \n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;"}, {"sha": "280746761fc478c7ac9e057092e00c011f2cd8d4", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Path, Name, HirDatabase, Function, Resolver,\n+    Path, Name, HirDatabase, Function, Resolver,DefWithBody,\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n@@ -29,7 +29,7 @@ impl_arena_id!(ExprId);\n pub struct Body {\n     // FIXME: this should be more general, consts & statics also have bodies\n     /// The Function of the item this body belongs to\n-    owner: Function,\n+    owner: DefWithBody,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n     /// The patterns for the function's parameters. While the parameter types are\n@@ -66,7 +66,7 @@ impl Body {\n         self.body_expr\n     }\n \n-    pub fn owner(&self) -> Function {\n+    pub fn owner(&self) -> DefWithBody {\n         self.owner\n     }\n \n@@ -464,7 +464,7 @@ impl Pat {\n // Queries\n \n struct ExprCollector {\n-    owner: Function,\n+    owner: DefWithBody,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n     source_map: BodySourceMap,\n@@ -473,7 +473,7 @@ struct ExprCollector {\n }\n \n impl ExprCollector {\n-    fn new(owner: Function) -> Self {\n+    fn new(owner: DefWithBody) -> Self {\n         ExprCollector {\n             owner,\n             exprs: Arena::default(),\n@@ -503,6 +503,9 @@ impl ExprCollector {\n         self.exprs.alloc(block)\n     }\n \n+\n+    \n+\n     fn collect_expr(&mut self, expr: &ast::Expr) -> ExprId {\n         let syntax_ptr = SyntaxNodePtr::new(expr.syntax());\n         match expr.kind() {\n@@ -871,6 +874,15 @@ impl ExprCollector {\n         }\n     }\n \n+\n+    fn collect_const_body(&mut self,node:&ast::ConstDef)  {\n+        \n+    }\n+\n+    fn collect_static_body(&mut self,node:&ast::StaticDef) {\n+\n+    }\n+\n     fn collect_fn_body(&mut self, node: &ast::FnDef) {\n         if let Some(param_list) = node.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n@@ -917,19 +929,25 @@ impl ExprCollector {\n \n pub(crate) fn body_with_source_map_query(\n     db: &impl HirDatabase,\n-    func: Function,\n+    def: DefWithBody,\n ) -> (Arc<Body>, Arc<BodySourceMap>) {\n-    let mut collector = ExprCollector::new(func);\n \n-    // FIXME: consts, etc.\n-    collector.collect_fn_body(&func.source(db).1);\n+    let mut collector = ExprCollector::new(def);\n \n+    // FIXME: do can this be turned into a method\n+    \n+    match def {\n+        DefWithBody::Const(ref c) => collector.collect_const_body(&def.const_source(db).1),\n+        DefWithBody::Func(ref f) => collector.collect_fn_body(&def.func_source(db).1),\n+        DefWithBody::Static(ref s) => collector.collect_static_body(&def.static_source(db).1)\n+    }\n+    \n     let (body, source_map) = collector.finish();\n     (Arc::new(body), Arc::new(source_map))\n }\n \n-pub(crate) fn body_hir_query(db: &impl HirDatabase, func: Function) -> Arc<Body> {\n-    db.body_with_source_map(func).0\n+pub(crate) fn body_hir_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<Body> {\n+    db.body_with_source_map(def).0   \n }\n \n #[cfg(test)]"}, {"sha": "539da06c31573e19023dbccaadae1d21571d474f", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n-    Name, AsName, Function,\n+    Name, AsName, Function,DefWithBody,\n     expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySourceMap},\n     HirDatabase,\n };\n@@ -40,8 +40,8 @@ pub struct ScopeData {\n \n impl ExprScopes {\n     // FIXME: This should take something more general than Function\n-    pub(crate) fn expr_scopes_query(db: &impl HirDatabase, function: Function) -> Arc<ExprScopes> {\n-        let body = db.body_hir(function);\n+    pub(crate) fn expr_scopes_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<ExprScopes> {\n+        let body = db.body_hir(def);\n         let res = ExprScopes::new(body);\n         Arc::new(res)\n     }"}, {"sha": "62cec72d9df471b2b5b439bc40fd849ff02c2c65", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "patch": "@@ -67,10 +67,12 @@ pub use self::{\n \n pub use self::code_model_api::{\n     Crate, CrateDependency,\n+    DefWithBody,\n     Module, ModuleDef, ModuleSource,\n     Struct, Enum, EnumVariant,\n     Function, FnSignature,\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n     Trait, TypeAlias,\n+    \n };"}, {"sha": "31b4e73fb73d84ad88e69e8287ba66e2317fcb07", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "patch": "@@ -657,6 +657,7 @@ impl ToOwned for ContinueExpr {\n }\n \n \n+\n impl ContinueExpr {}\n \n // DynTraitType"}, {"sha": "19e50c9b84c30d48b6b53350c737669ddfbeffba", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7f3bf7cc738d02fde80d4fde9f32cbbe72896b87/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=7f3bf7cc738d02fde80d4fde9f32cbbe72896b87", "patch": "@@ -313,6 +313,7 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n+            options: [\"body\",\"Block\"],\n         ),\n         \"StaticDef\": (\n             traits: [\n@@ -323,6 +324,7 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n+            options: [\"body\",\"Block\"],\n         ),\n         \"TypeAliasDef\": (\n             traits: ["}]}