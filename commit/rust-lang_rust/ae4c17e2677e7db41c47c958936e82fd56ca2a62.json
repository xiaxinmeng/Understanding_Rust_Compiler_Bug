{"sha": "ae4c17e2677e7db41c47c958936e82fd56ca2a62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNGMxN2UyNjc3ZTdkYjQxYzQ3Yzk1ODkzNmU4MmZkNTZjYTJhNjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T04:00:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:10:25Z"}, "message": "Add some of stdtest::vec into stdtest::ivec\n\nAdd missing functions to std::ivec as needed", "tree": {"sha": "3686e65051a52b72d65d8b29abcbdfad1c3ca9a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3686e65051a52b72d65d8b29abcbdfad1c3ca9a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae4c17e2677e7db41c47c958936e82fd56ca2a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4c17e2677e7db41c47c958936e82fd56ca2a62", "html_url": "https://github.com/rust-lang/rust/commit/ae4c17e2677e7db41c47c958936e82fd56ca2a62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae4c17e2677e7db41c47c958936e82fd56ca2a62/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9638f522bda78220beac63c9142a4b02dc807141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9638f522bda78220beac63c9142a4b02dc807141", "html_url": "https://github.com/rust-lang/rust/commit/9638f522bda78220beac63c9142a4b02dc807141"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "0343c98676aabd6fa93ac3d0d93a8945868a9a0f", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ae4c17e2677e7db41c47c958936e82fd56ca2a62/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4c17e2677e7db41c47c958936e82fd56ca2a62/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=ae4c17e2677e7db41c47c958936e82fd56ca2a62", "patch": "@@ -208,6 +208,16 @@ fn map[@T, @U](f: &block(&T) -> U , v: &[mutable? T]) -> [U] {\n     ret result;\n }\n \n+fn map2[@T, @U, @V](f: &block(&T, &U) -> V, v0: &[T], v1: &[U])\n+    -> [V] {\n+    let v0_len = len[T](v0);\n+    if v0_len != len[U](v1) { fail; }\n+    let u: [V] = ~[];\n+    let i = 0u;\n+    while i < v0_len { u += ~[f({ v0.(i) }, { v1.(i) })]; i += 1u; }\n+    ret u;\n+}\n+\n fn filter_map[@T, @U](f: &block(&T) -> option::t[U],\n                       v: &[mutable? T]) -> [U] {\n     let result = ~[];\n@@ -255,6 +265,18 @@ fn find[@T](f: &block(&T) -> bool , v: &[T]) -> option::t[T] {\n     ret none;\n }\n \n+fn position[@T](x: &T, v: &[T]) -> option::t[uint] {\n+    let i: uint = 0u;\n+    while i < len(v) { if x == v.(i) { ret some[uint](i); } i += 1u; }\n+    ret none[uint];\n+}\n+\n+fn position_pred[T](f: fn(&T) -> bool , v: &[T]) -> option::t[uint] {\n+    let i: uint = 0u;\n+    while i < len(v) { if f(v.(i)) { ret some[uint](i); } i += 1u; }\n+    ret none[uint];\n+}\n+\n fn unzip[@T, @U](v: &[{_0: T, _1: U}]) -> {_0: [T], _1: [U]} {\n     let sz = len(v);\n     if sz == 0u {"}, {"sha": "420d096070b24b8cdeb82c96016a9f34daefad3c", "filename": "src/test/stdtest/ivec.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ae4c17e2677e7db41c47c958936e82fd56ca2a62/src%2Ftest%2Fstdtest%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4c17e2677e7db41c47c958936e82fd56ca2a62/src%2Ftest%2Fstdtest%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fivec.rs?ref=ae4c17e2677e7db41c47c958936e82fd56ca2a62", "patch": "@@ -1,6 +1,7 @@\n \n use std;\n import std::ivec;\n+import std::ivec::*;\n import std::option;\n import std::option::none;\n import std::option::some;\n@@ -235,6 +236,17 @@ fn test_map() {\n     assert (w.(4) == 25u);\n }\n \n+#[test]\n+fn test_map2() {\n+    fn times(x: &int, y: &int) -> int { ret x * y; }\n+    let f = times;\n+    let v0 = ~[1, 2, 3, 4, 5];\n+    let v1 = ~[5, 4, 3, 2, 1];\n+    let u = ivec::map2[int, int, int](f, v0, v1);\n+    let i = 0;\n+    while i < 5 { assert (v0.(i) * v1.(i) == u.(i)); i += 1; }\n+}\n+\n #[test]\n fn test_filter_map() {\n     // Test on-stack filter-map.\n@@ -251,6 +263,23 @@ fn test_filter_map() {\n     assert (w.(0) == 1u);\n     assert (w.(1) == 9u);\n     assert (w.(2) == 25u);\n+\n+    fn halve(i: &int) -> option::t[int] {\n+        if i % 2 == 0 {\n+            ret option::some[int](i / 2);\n+        } else { ret option::none[int]; }\n+    }\n+    fn halve_for_sure(i: &int) -> int { ret i / 2; }\n+    let all_even: [int] = ~[0, 2, 8, 6];\n+    let all_odd1: [int] = ~[1, 7, 3];\n+    let all_odd2: [int] = ~[];\n+    let mix: [int] = ~[9, 2, 6, 7, 1, 0, 0, 3];\n+    let mix_dest: [int] = ~[1, 3, 0, 0];\n+    assert (filter_map(halve, all_even) == map(halve_for_sure, all_even));\n+    assert (filter_map(halve, all_odd1) == ~[]);\n+    assert (filter_map(halve, all_odd2) == ~[]);\n+    assert (filter_map(halve, mix) == mix_dest);\n+\n }\n \n #[test]\n@@ -296,6 +325,24 @@ fn test_zip_unzip() {\n     assert ({_0: 3, _1: 6} == {_0: u1._0.(2), _1: u1._1.(2)});\n }\n \n+#[test]\n+fn test_position() {\n+    let v1: [int] = ~[1, 2, 3, 3, 2, 5];\n+    assert (position(1, v1) == option::some[uint](0u));\n+    assert (position(2, v1) == option::some[uint](1u));\n+    assert (position(5, v1) == option::some[uint](5u));\n+    assert (position(4, v1) == option::none[uint]);\n+}\n+\n+#[test]\n+fn test_position_pred() {\n+    fn less_than_three(i: &int) -> bool { ret i < 3; }\n+    fn is_eighteen(i: &int) -> bool { ret i == 18; }\n+    let v1: [int] = ~[5, 4, 3, 2, 1];\n+    assert (position_pred(less_than_three, v1) == option::some[uint](3u));\n+    assert (position_pred(is_eighteen, v1) == option::none[uint]);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}]}