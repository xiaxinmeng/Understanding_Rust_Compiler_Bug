{"sha": "4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjUyNjFjNDM5NmVkM2Q2NjExZmY5OTBjNzFlOGI5ZTRjZjRmMTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-26T15:22:26Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:12Z"}, "message": "Remove unused error variants and const eval types", "tree": {"sha": "9c1f1826cafbacb774709d46a0a081df5502381a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1f1826cafbacb774709d46a0a081df5502381a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53QACgkQpp+NIls6\n19kC0BAAt7bxqnSHovlgYeJsC8pYMtHiD7Fdp40kRRpNp+Th21m2QSHtan9kxGPm\nRKZ3DcrYsKYOw8bV5owzWk4yG8LYz620VwPfuLzhkmC5qyEoMcLFp2pXrppVslTJ\n00uXq0YLjA4Kj3nayBpH8qK2JwbA+bsuZKhLL9ITbl+7pxgtqPGMF/vHy2mIBn98\nNpvMU1AOrXj2t2Y3JiriKClxA5nHX0UVz9BWgxyQ04vxnpE+jDUx2hmvQk7IDFrH\nEXWup6XwSk6OB8CO6L2x0gAlIm2/yCSqzKKVPllol6SjP3qDZ3LMsCVgEQyEldwt\nmgi4BcZkAqG4P88Nr7QsvEfi0TNjARFZsCZLyDa1KYnTD+QHEd9Q9OraWL4XCRQy\nnr927vlGWngK7VhEnyhDvOdkzT7umUyuK6av+H/W9nHgMoOWGbJKOI5FGWmgeVZl\nK1ivLTlkOYz2btiAbmTDTc5cqpCsA9gOgKkGbP/j5D/a+Qj/NSX8Yll+QEEF2ufG\ng9tkuQMaipgUdEIrvfcyNNHx3+XBG/FLg/ON7iJSODchj6gmyy+Uo5Vf7O20HROJ\nHCl9YtEKB3OXJv5jY59GTr2cWbYKH9Y4DzGQOPb3/sSGc1Dwn1nocJRMqhRo7/5s\nWwWh6ca4FumaghOle7IU9X3J3V5bmXexvMfmv7xgLh4SpldlQwM=\n=JvH3\n-----END PGP SIGNATURE-----", "payload": "tree 9c1f1826cafbacb774709d46a0a081df5502381a\nparent ef995bde504b388f31dc0a5e1be7a001cbfbe0ed\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1516980146 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494452 +0100\n\nRemove unused error variants and const eval types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "html_url": "https://github.com/rust-lang/rust/commit/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef995bde504b388f31dc0a5e1be7a001cbfbe0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef995bde504b388f31dc0a5e1be7a001cbfbe0ed", "html_url": "https://github.com/rust-lang/rust/commit/ef995bde504b388f31dc0a5e1be7a001cbfbe0ed"}], "stats": {"total": 90, "additions": 2, "deletions": 88}, "files": [{"sha": "72bc5af3b7e2d6b9364ea43993e0694db5b2d145", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "patch": "@@ -353,10 +353,6 @@ for ::middle::const_val::ConstVal<'gcx> {\n     }\n }\n \n-impl_stable_hash_for!(struct ::middle::const_val::ByteArray<'tcx> {\n-    data\n-});\n-\n impl_stable_hash_for!(enum mir::interpret::Value {\n     ByVal(v),\n     ByValPair(a, b),\n@@ -454,16 +450,7 @@ for ::middle::const_val::ErrKind<'gcx> {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n-            CannotCast |\n-            MissingStructField |\n             NonConstPath |\n-            ExpectedConstTuple |\n-            ExpectedConstStruct |\n-            IndexedNonVec |\n-            IndexNotUsize |\n-            MiscBinaryOp |\n-            MiscCatchAll |\n-            IndexOpFeatureGated |\n             TypeckError |\n             CheckMatchError => {\n                 // nothing to do\n@@ -481,9 +468,6 @@ for ::middle::const_val::ErrKind<'gcx> {\n             LayoutError(ref layout_error) => {\n                 layout_error.hash_stable(hcx, hasher);\n             }\n-            ErroneousReferencedConstant(ref const_val) => {\n-                const_val.hash_stable(hcx, hasher);\n-            }\n             Miri(ref err) => err.hash_stable(hcx, hasher),\n         }\n     }"}, {"sha": "c987ed0ea5d3fb8b80f9d485a4b9fa6fd568a589", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "patch": "@@ -16,7 +16,6 @@ use mir::interpret::{Value, PrimVal};\n use errors::DiagnosticBuilder;\n \n use graphviz::IntoCow;\n-use serialize;\n use syntax_pos::Span;\n \n use std::borrow::Cow;\n@@ -29,13 +28,6 @@ pub enum ConstVal<'tcx> {\n     Value(Value),\n }\n \n-#[derive(Copy, Clone, Debug, Hash, RustcEncodable, Eq, PartialEq)]\n-pub struct ByteArray<'tcx> {\n-    pub data: &'tcx [u8],\n-}\n-\n-impl<'tcx> serialize::UseSpecializedDecodable for ByteArray<'tcx> {}\n-\n impl<'tcx> ConstVal<'tcx> {\n     pub fn to_raw_bits(&self) -> Option<u128> {\n         match *self {\n@@ -64,26 +56,14 @@ pub struct ConstEvalErr<'tcx> {\n \n #[derive(Clone, Debug)]\n pub enum ErrKind<'tcx> {\n-    CannotCast,\n-    MissingStructField,\n \n     NonConstPath,\n     UnimplementedConstVal(&'static str),\n-    ExpectedConstTuple,\n-    ExpectedConstStruct,\n-    IndexedNonVec,\n-    IndexNotUsize,\n     IndexOutOfBounds { len: u64, index: u64 },\n \n-    MiscBinaryOp,\n-    MiscCatchAll,\n-\n-    IndexOpFeatureGated,\n     Math(ConstMathErr),\n     LayoutError(layout::LayoutError<'tcx>),\n \n-    ErroneousReferencedConstant(Box<ConstEvalErr<'tcx>>),\n-\n     TypeckError,\n     CheckMatchError,\n     Miri(::mir::interpret::EvalError<'tcx>),\n@@ -131,28 +111,17 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         }\n \n         match self.kind {\n-            CannotCast => simple!(\"can't cast this type\"),\n-            MissingStructField  => simple!(\"nonexistent struct field\"),\n             NonConstPath        => simple!(\"non-constant path in constant expression\"),\n             UnimplementedConstVal(what) =>\n                 simple!(\"unimplemented constant expression: {}\", what),\n-            ExpectedConstTuple => simple!(\"expected constant tuple\"),\n-            ExpectedConstStruct => simple!(\"expected constant struct\"),\n-            IndexedNonVec => simple!(\"indexing is only supported for arrays\"),\n-            IndexNotUsize => simple!(\"indices must be of type `usize`\"),\n             IndexOutOfBounds { len, index } => {\n                 simple!(\"index out of bounds: the len is {} but the index is {}\",\n                         len, index)\n             }\n \n-            MiscBinaryOp => simple!(\"bad operands for binary\"),\n-            MiscCatchAll => simple!(\"unsupported constant expr\"),\n-            IndexOpFeatureGated => simple!(\"the index operation on const values is unstable\"),\n             Math(ref err) => Simple(err.description().into_cow()),\n             LayoutError(ref err) => Simple(err.to_string().into_cow()),\n \n-            ErroneousReferencedConstant(_) => simple!(\"could not evaluate referenced constant\"),\n-\n             TypeckError => simple!(\"type-checking failed\"),\n             CheckMatchError => simple!(\"match-checking failed\"),\n             // FIXME: report a full backtrace\n@@ -166,15 +135,8 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         primary_kind: &str)\n         -> DiagnosticBuilder<'gcx>\n     {\n-        let mut err = self;\n-        while let &ConstEvalErr {\n-            kind: ErrKind::ErroneousReferencedConstant(box ref i_err), ..\n-        } = err {\n-            err = i_err;\n-        }\n-\n-        let mut diag = struct_error(tcx, err.span, \"constant evaluation error\");\n-        err.note(tcx, primary_span, primary_kind, &mut diag);\n+        let mut diag = struct_error(tcx, self.span, \"constant evaluation error\");\n+        self.note(tcx, primary_span, primary_kind, &mut diag);\n         diag\n     }\n "}, {"sha": "f98bc953560988f2290b1443c2ef4318b1f39fed", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "patch": "@@ -17,7 +17,6 @@\n // persisting to incr. comp. caches.\n \n use hir::def_id::{DefId, CrateNum};\n-use middle::const_val::ByteArray;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n@@ -240,17 +239,6 @@ pub fn decode_existential_predicate_slice<'a, 'tcx, D>(decoder: &mut D)\n               .mk_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n-#[inline]\n-pub fn decode_byte_array<'a, 'tcx, D>(decoder: &mut D)\n-                                      -> Result<ByteArray<'tcx>, D::Error>\n-    where D: TyDecoder<'a, 'tcx>,\n-          'tcx: 'a,\n-{\n-    Ok(ByteArray {\n-        data: decoder.tcx().alloc_byte_array(&Vec::decode(decoder)?)\n-    })\n-}\n-\n #[inline]\n pub fn decode_const<'a, 'tcx, D>(decoder: &mut D)\n                                  -> Result<&'tcx ty::Const<'tcx>, D::Error>\n@@ -278,7 +266,6 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::codec::*;\n             use $crate::ty::subst::Substs;\n             use $crate::hir::def_id::{CrateNum};\n-            use $crate::middle::const_val::ByteArray;\n             use rustc_serialize::{Decoder, SpecializedDecoder};\n             use std::borrow::Cow;\n \n@@ -377,13 +364,6 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<ByteArray<'tcx>>\n-            for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<ByteArray<'tcx>, Self::Error> {\n-                    decode_byte_array(self)\n-                }\n-            }\n-\n             impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::ty::Const<'tcx>>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {"}, {"sha": "4e1f3664d7f85355a6593c9c76be251ba76b1633", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f65261c4396ed3d6611ff990c71e8b9e4cf4f11/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=4f65261c4396ed3d6611ff990c71e8b9e4cf4f11", "patch": "@@ -703,26 +703,14 @@ impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n         use middle::const_val::ErrKind::*;\n \n         Some(match *self {\n-            CannotCast => CannotCast,\n-            MissingStructField => MissingStructField,\n             NonConstPath => NonConstPath,\n             UnimplementedConstVal(s) => UnimplementedConstVal(s),\n-            ExpectedConstTuple => ExpectedConstTuple,\n-            ExpectedConstStruct => ExpectedConstStruct,\n-            IndexedNonVec => IndexedNonVec,\n-            IndexNotUsize => IndexNotUsize,\n             IndexOutOfBounds { len, index } => IndexOutOfBounds { len, index },\n-            MiscBinaryOp => MiscBinaryOp,\n-            MiscCatchAll => MiscCatchAll,\n-            IndexOpFeatureGated => IndexOpFeatureGated,\n             Math(ref e) => Math(e.clone()),\n \n             LayoutError(ref e) => {\n                 return tcx.lift(e).map(LayoutError)\n             }\n-            ErroneousReferencedConstant(ref e) => {\n-                return tcx.lift(e).map(ErroneousReferencedConstant)\n-            }\n \n             TypeckError => TypeckError,\n             CheckMatchError => CheckMatchError,"}]}