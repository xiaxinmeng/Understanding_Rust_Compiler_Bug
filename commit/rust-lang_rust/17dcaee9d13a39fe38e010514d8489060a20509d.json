{"sha": "17dcaee9d13a39fe38e010514d8489060a20509d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZGNhZWU5ZDEzYTM5ZmUzOGUwMTA1MTRkODQ4OTA2MGEyMDUwOWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-22T00:13:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-23T00:09:15Z"}, "message": "libsyntax: De-mut the pipe compiler", "tree": {"sha": "7815c11ad12869c41756a4b20a539d6441865d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7815c11ad12869c41756a4b20a539d6441865d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17dcaee9d13a39fe38e010514d8489060a20509d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17dcaee9d13a39fe38e010514d8489060a20509d", "html_url": "https://github.com/rust-lang/rust/commit/17dcaee9d13a39fe38e010514d8489060a20509d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17dcaee9d13a39fe38e010514d8489060a20509d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1", "html_url": "https://github.com/rust-lang/rust/commit/1a132b3721a3581cf8a4ae2ce6486a01a3b9cac1"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "27483ae94a5bd2871cfaf12ce6ef90a8853790c2", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=17dcaee9d13a39fe38e010514d8489060a20509d", "patch": "@@ -158,7 +158,7 @@ pub fn mk_handler(emitter: Option<Emitter>) -> @handler {\n         }\n     };\n \n-    @mut HandlerT { mut err_count: 0, emit: emit } as @handler\n+    @mut HandlerT { err_count: 0, emit: emit } as @handler\n }\n \n #[deriving_eq]"}, {"sha": "8b8e48bd5229b8a39148acb048e54dd7b5f2ae3e", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=17dcaee9d13a39fe38e010514d8489060a20509d", "patch": "@@ -73,7 +73,7 @@ pub fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident,\n     let rdr = tt_rdr as reader;\n     let rust_parser = Parser(sess, cfg, rdr.dup());\n \n-    let proto = rust_parser.parse_proto(cx.str_of(id));\n+    let mut proto = rust_parser.parse_proto(cx.str_of(id));\n \n     // check for errors\n     visit(proto, cx);"}, {"sha": "25760aa01b67df71d3ad07bf4f607977074c4d57", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=17dcaee9d13a39fe38e010514d8489060a20509d", "patch": "@@ -27,8 +27,8 @@ use core::to_str::ToStr;\n use core::vec;\n \n pub trait gen_send {\n-    fn gen_send(&self, cx: ext_ctxt, try: bool) -> @ast::item;\n-    fn to_ty(&self, cx: ext_ctxt) -> @ast::Ty;\n+    fn gen_send(&mut self, cx: ext_ctxt, try: bool) -> @ast::item;\n+    fn to_ty(&mut self, cx: ext_ctxt) -> @ast::Ty;\n }\n \n pub trait to_type_decls {\n@@ -47,7 +47,7 @@ pub trait gen_init {\n }\n \n pub impl gen_send for message {\n-    fn gen_send(&self, cx: ext_ctxt, try: bool) -> @ast::item {\n+    fn gen_send(&mut self, cx: ext_ctxt, try: bool) -> @ast::item {\n         debug!(\"pipec: gen_send\");\n         match *self {\n           message(ref _id, span, ref tys, this, Some(ref next_state)) => {\n@@ -193,7 +193,7 @@ pub impl gen_send for message {\n           }\n         }\n \n-    fn to_ty(&self, cx: ext_ctxt) -> @ast::Ty {\n+    fn to_ty(&mut self, cx: ext_ctxt) -> @ast::Ty {\n         cx.ty_path_ast_builder(path(~[cx.ident_of(self.name())], self.span())\n           .add_tys(cx.ty_vars_global(self.get_params())))\n     }\n@@ -259,10 +259,14 @@ pub impl to_type_decls for state {\n           recv => (*self).dir.reverse()\n         };\n         let mut items = ~[];\n-        for self.messages.each |m| {\n-            if dir == send {\n-                items.push(m.gen_send(cx, true));\n-                items.push(m.gen_send(cx, false));\n+\n+        {\n+            let messages = &mut *self.messages;\n+            for vec::each_mut(*messages) |m| {\n+                if dir == send {\n+                    items.push(m.gen_send(cx, true));\n+                    items.push(m.gen_send(cx, false));\n+                }\n             }\n         }\n \n@@ -395,7 +399,8 @@ pub impl gen_init for protocol {\n         }\n \n         cx.ty_path_ast_builder(path(~[cx.ident_of(~\"super\"),\n-                                      cx.ident_of(~\"__Buffer\")], self.span)\n+                                      cx.ident_of(~\"__Buffer\")],\n+                                    copy self.span)\n                                .add_tys(cx.ty_vars_global(params)))\n     }\n \n@@ -453,12 +458,12 @@ pub impl gen_init for protocol {\n         }\n \n         items.push(cx.item_mod(cx.ident_of(~\"client\"),\n-                               self.span,\n+                               copy self.span,\n                                client_states));\n         items.push(cx.item_mod(cx.ident_of(~\"server\"),\n-                               self.span,\n+                               copy self.span,\n                                server_states));\n \n-        cx.item_mod(cx.ident_of(self.name), self.span, items)\n+        cx.item_mod(cx.ident_of(self.name), copy self.span, items)\n     }\n }"}, {"sha": "7c6dc1f937dcaba540b629506a3e8d0127b1e3d8", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=17dcaee9d13a39fe38e010514d8489060a20509d", "patch": "@@ -16,7 +16,6 @@ use ext::base::ext_ctxt;\n use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n \n use core::cmp;\n-use core::dvec::DVec;\n use core::to_str::ToStr;\n \n #[deriving_eq]\n@@ -45,26 +44,24 @@ pub struct next_state {\n     tys: ~[@ast::Ty],\n }\n \n-pub enum message {\n-    // name, span, data, current state, next state\n-    message(~str, span, ~[@ast::Ty], state, Option<next_state>)\n-}\n+// name, span, data, current state, next state\n+pub struct message(~str, span, ~[@ast::Ty], state, Option<next_state>);\n \n pub impl message {\n-    fn name(&self) -> ~str {\n+    fn name(&mut self) -> ~str {\n         match *self {\n           message(ref id, _, _, _, _) => (*id)\n         }\n     }\n \n-    fn span(&self) -> span {\n+    fn span(&mut self) -> span {\n         match *self {\n           message(_, span, _, _, _) => span\n         }\n     }\n \n     /// Return the type parameters actually used by this message\n-    fn get_params(&self) -> ~[ast::ty_param] {\n+    fn get_params(&mut self) -> ~[ast::ty_param] {\n         match *self {\n           message(_, _, _, this, _) => this.ty_params\n         }\n@@ -80,7 +77,7 @@ pub struct state_ {\n     span: span,\n     dir: direction,\n     ty_params: ~[ast::ty_param],\n-    messages: DVec<message>,\n+    messages: @mut ~[message],\n     proto: protocol\n }\n \n@@ -121,56 +118,56 @@ pub impl state_ {\n     }\n }\n \n-pub type protocol = @protocol_;\n+pub type protocol = @mut protocol_;\n \n pub fn protocol(name: ~str, +span: span) -> protocol {\n-    @protocol_(name, span)\n+    @mut protocol_(name, span)\n }\n \n pub fn protocol_(name: ~str, span: span) -> protocol_ {\n     protocol_ {\n         name: name,\n         span: span,\n-        states: DVec(),\n+        states: @mut ~[],\n         bounded: None\n     }\n }\n \n pub struct protocol_ {\n     name: ~str,\n     span: span,\n-    states: DVec<state>,\n+    states: @mut ~[state],\n \n-    mut bounded: Option<bool>,\n+    bounded: Option<bool>,\n }\n \n pub impl protocol_ {\n     /// Get a state.\n-    fn get_state(&self, name: ~str) -> state {\n+    fn get_state(&mut self, name: ~str) -> state {\n         self.states.find(|i| i.name == name).get()\n     }\n \n-    fn get_state_by_id(&self, id: uint) -> state { self.states[id] }\n+    fn get_state_by_id(&mut self, id: uint) -> state { self.states[id] }\n \n-    fn has_state(&self, name: ~str) -> bool {\n+    fn has_state(&mut self, name: ~str) -> bool {\n         self.states.find(|i| i.name == name).is_some()\n     }\n \n-    fn filename(&self) -> ~str {\n+    fn filename(&mut self) -> ~str {\n         ~\"proto://\" + self.name\n     }\n \n-    fn num_states(&self) -> uint { self.states.len() }\n+    fn num_states(&mut self) -> uint { self.states.len() }\n \n-    fn has_ty_params(&self) -> bool {\n+    fn has_ty_params(&mut self) -> bool {\n         for self.states.each |s| {\n             if s.ty_params.len() > 0 {\n                 return true;\n             }\n         }\n         false\n     }\n-    fn is_bounded(&self) -> bool {\n+    fn is_bounded(&mut self) -> bool {\n         let bounded = self.bounded.get();\n         bounded\n     }\n@@ -179,7 +176,7 @@ pub impl protocol_ {\n pub impl protocol {\n     fn add_state_poly(&self, name: ~str, ident: ast::ident, dir: direction,\n                       +ty_params: ~[ast::ty_param]) -> state {\n-        let messages = DVec();\n+        let messages = @mut ~[];\n \n         let state = @state_ {\n             id: self.states.len(),"}, {"sha": "a9502ff29020e1b42ac9d2f3b1b54e00531aec82", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17dcaee9d13a39fe38e010514d8489060a20509d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=17dcaee9d13a39fe38e010514d8489060a20509d", "patch": "@@ -59,7 +59,7 @@ pub fn new_tt_reader(sp_diag: span_handler,\n     let r = @mut TtReader {\n         sp_diag: sp_diag,\n         interner: itr,\n-        mut cur: @mut TtFrame {\n+        cur: @mut TtFrame {\n             readme: @mut src,\n             idx: 0u,\n             dotdotdoted: false,"}]}