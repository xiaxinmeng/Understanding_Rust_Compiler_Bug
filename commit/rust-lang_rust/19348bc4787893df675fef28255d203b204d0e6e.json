{"sha": "19348bc4787893df675fef28255d203b204d0e6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MzQ4YmM0Nzg3ODkzZGY2NzVmZWYyODI1NWQyMDNiMjA0ZDBlNmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-21T13:41:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-21T13:41:09Z"}, "message": "Merge #9908\n\n9908: fix check of the toolchain's path r=lnicola a=gfreezy\n\nfixed #9907\n\nCo-authored-by: Alex.F <gfreezy@gmail.com>", "tree": {"sha": "45b4244fe97309a9e5b8b00cd72b4eb6c2a1cd4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b4244fe97309a9e5b8b00cd72b4eb6c2a1cd4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19348bc4787893df675fef28255d203b204d0e6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhIQJ1CRBK7hj4Ov3rIwAAGE0IAJiNMRvWDI/Z62NZLJoJHW9B\nukMn/SJ6cB+CmNKh/3T8otj9l9VFUnDHNmbar4Zt0IHzmKxmdaVXizaIdNuy53p6\n0zGJUwwnQiSTXn/RppvhYPv4/u3xHP+IdA5+DzWk0daduNiOaRP9L2P4UT0H4Hps\nzkPEQfQdkRaf10wFtI3jjWEQgqwhXWR8ho55GK1njywP2vnTqbtj/CP93sx5k5V1\ntoGT2zWnHHQv+sIg9dYwqbRw0yrdm5te7dMv/sPDB5edvgNTdizHxK4prLfSZNwM\nOt0hRNdPKlPY+PRiu+yt/at6QIjXcXR4+SCX3DaTStHf3tpvpYXFyCZzygvclXY=\n=LDmb\n-----END PGP SIGNATURE-----\n", "payload": "tree 45b4244fe97309a9e5b8b00cd72b4eb6c2a1cd4a\nparent 3f4c51522316c0698d59e7738ed8d8aab2d2c42d\nparent 8e4039c7d79cd846ddcabd6ce35eaa24813df011\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629553269 +0000\ncommitter GitHub <noreply@github.com> 1629553269 +0000\n\nMerge #9908\n\n9908: fix check of the toolchain's path r=lnicola a=gfreezy\n\nfixed #9907\n\nCo-authored-by: Alex.F <gfreezy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19348bc4787893df675fef28255d203b204d0e6e", "html_url": "https://github.com/rust-lang/rust/commit/19348bc4787893df675fef28255d203b204d0e6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19348bc4787893df675fef28255d203b204d0e6e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f4c51522316c0698d59e7738ed8d8aab2d2c42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4c51522316c0698d59e7738ed8d8aab2d2c42d", "html_url": "https://github.com/rust-lang/rust/commit/3f4c51522316c0698d59e7738ed8d8aab2d2c42d"}, {"sha": "8e4039c7d79cd846ddcabd6ce35eaa24813df011", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4039c7d79cd846ddcabd6ce35eaa24813df011", "html_url": "https://github.com/rust-lang/rust/commit/8e4039c7d79cd846ddcabd6ce35eaa24813df011"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "1d50d03800f39db98d934ceef43cb60717a98103", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19348bc4787893df675fef28255d203b204d0e6e/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/19348bc4787893df675fef28255d203b204d0e6e/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=19348bc4787893df675fef28255d203b204d0e6e", "patch": "@@ -107,7 +107,8 @@ export async function buildCargoTask(\n         // Check whether we must use a user-defined substitute for cargo.\n         // Split on spaces to allow overrides like \"wrapper cargo\".\n         const overrideCargo = definition.overrideCargo ?? definition.overrideCargo;\n-        const cargoCommand = overrideCargo?.split(\" \") ?? [toolchain.cargoPath()];\n+        const cargoPath = await toolchain.cargoPath();\n+        const cargoCommand = overrideCargo?.split(\" \") ?? [cargoPath];\n \n         const fullCommand = [...cargoCommand, ...args];\n "}, {"sha": "681932c93b17b10ccd7ab139ae097a205724c893", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/19348bc4787893df675fef28255d203b204d0e6e/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/19348bc4787893df675fef28255d203b204d0e6e/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=19348bc4787893df675fef28255d203b204d0e6e", "patch": "@@ -3,7 +3,7 @@ import * as os from 'os';\n import * as path from 'path';\n import * as readline from 'readline';\n import * as vscode from 'vscode';\n-import { execute, log, memoize } from './util';\n+import { execute, log, memoizeAsync } from './util';\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -89,13 +89,14 @@ export class Cargo {\n         return artifacts[0].fileName;\n     }\n \n-    private runCargo(\n+    private async runCargo(\n         cargoArgs: string[],\n         onStdoutJson: (obj: any) => void,\n         onStderrString: (data: string) => void\n     ): Promise<number> {\n-        return new Promise((resolve, reject) => {\n-            const cargo = cp.spawn(cargoPath(), cargoArgs, {\n+        const path = await cargoPath();\n+        return await new Promise((resolve, reject) => {\n+            const cargo = cp.spawn(path, cargoArgs, {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: this.rootFolder\n             });\n@@ -121,15 +122,15 @@ export class Cargo {\n }\n \n /** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n-export function getSysroot(dir: string): Promise<string> {\n-    const rustcPath = getPathForExecutable(\"rustc\");\n+export async function getSysroot(dir: string): Promise<string> {\n+    const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n-    return execute(`${rustcPath} --print sysroot`, { cwd: dir });\n+    return await execute(`${rustcPath} --print sysroot`, { cwd: dir });\n }\n \n export async function getRustcId(dir: string): Promise<string> {\n-    const rustcPath = getPathForExecutable(\"rustc\");\n+    const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n     const data = await execute(`${rustcPath} -V -v`, { cwd: dir });\n@@ -139,35 +140,35 @@ export async function getRustcId(dir: string): Promise<string> {\n }\n \n /** Mirrors `toolchain::cargo()` implementation */\n-export function cargoPath(): string {\n+export function cargoPath(): Promise<string> {\n     return getPathForExecutable(\"cargo\");\n }\n \n /** Mirrors `toolchain::get_path_for_executable()` implementation */\n-export const getPathForExecutable = memoize(\n+export const getPathForExecutable = memoizeAsync(\n     // We apply caching to decrease file-system interactions\n-    (executableName: \"cargo\" | \"rustc\" | \"rustup\"): string => {\n+    async (executableName: \"cargo\" | \"rustc\" | \"rustup\"): Promise<string> => {\n         {\n             const envVar = process.env[executableName.toUpperCase()];\n             if (envVar) return envVar;\n         }\n \n-        if (lookupInPath(executableName)) return executableName;\n+        if (await lookupInPath(executableName)) return executableName;\n \n         try {\n             // hmm, `os.homedir()` seems to be infallible\n             // it is not mentioned in docs and cannot be infered by the type signature...\n             const standardPath = vscode.Uri.joinPath(vscode.Uri.file(os.homedir()), \".cargo\", \"bin\", executableName);\n \n-            if (isFileAtUri(standardPath)) return standardPath.fsPath;\n+            if (await isFileAtUri(standardPath)) return standardPath.fsPath;\n         } catch (err) {\n             log.error(\"Failed to read the fs info\", err);\n         }\n         return executableName;\n     }\n );\n \n-function lookupInPath(exec: string): boolean {\n+async function lookupInPath(exec: string): Promise<boolean> {\n     const paths = process.env.PATH ?? \"\";;\n \n     const candidates = paths.split(path.delimiter).flatMap(dirInPath => {\n@@ -177,7 +178,12 @@ function lookupInPath(exec: string): boolean {\n             : [candidate];\n     });\n \n-    return candidates.some(isFileAtPath);\n+    for await (const isFile of candidates.map(isFileAtPath)) {\n+        if (isFile) {\n+            return true;\n+        }\n+    }\n+    return false;\n }\n \n async function isFileAtPath(path: string): Promise<boolean> {"}, {"sha": "aa57081a5f3695617f03ca4cd54062bd3c10b938", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19348bc4787893df675fef28255d203b204d0e6e/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/19348bc4787893df675fef28255d203b204d0e6e/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=19348bc4787893df675fef28255d203b204d0e6e", "patch": "@@ -126,16 +126,16 @@ export function setContextValue(key: string, value: any): Thenable<void> {\n \n /**\n  * Returns a higher-order function that caches the results of invoking the\n- * underlying function.\n+ * underlying async function.\n  */\n-export function memoize<Ret, TThis, Param extends string>(func: (this: TThis, arg: Param) => Ret) {\n+export function memoizeAsync<Ret, TThis, Param extends string>(func: (this: TThis, arg: Param) => Promise<Ret>) {\n     const cache = new Map<string, Ret>();\n \n-    return function(this: TThis, arg: Param) {\n+    return async function(this: TThis, arg: Param) {\n         const cached = cache.get(arg);\n         if (cached) return cached;\n \n-        const result = func.call(this, arg);\n+        const result = await func.call(this, arg);\n         cache.set(arg, result);\n \n         return result;"}]}