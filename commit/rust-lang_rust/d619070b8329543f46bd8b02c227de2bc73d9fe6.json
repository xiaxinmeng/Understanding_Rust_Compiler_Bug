{"sha": "d619070b8329543f46bd8b02c227de2bc73d9fe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTkwNzBiODMyOTU0M2Y0NmJkOGIwMmMyMjdkZTJiYzczZDlmZTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-02T14:41:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-02T14:41:24Z"}, "message": "Merge #8287\n\n8287: Don't allocate in `associated_type_shorthand_candidates` r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "16f78c3d4a67c80c9c4a96f7f1f44b6dc0f957dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16f78c3d4a67c80c9c4a96f7f1f44b6dc0f957dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d619070b8329543f46bd8b02c227de2bc73d9fe6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZy0UCRBK7hj4Ov3rIwAAdHIIABtDU3VYjC4tQxiSQHzYAZl1\nc0IUQ1DaQp+d/xv1Lu4Fnx8IjQ9dou5liNDosl90fpFHRNnsPHRvLiGBN6mpw1cO\nt+tMcN7qHQQvA+hBTnmLwsgEQPsTD7nll2fyKLzCVJkF5TJbb0Od61DKZo9mLH/v\naG5lxOtOagX/ony+Py37uY8bKrQ85v5h74zDvUNPq4adJwUDLBjC7VvniLUNaJX5\n1GYTFGDDdBfD1eZlEQHzf+byJfBT3H/NSVFBaQnia9i2BhN9I3RtDZJmK8isKpqY\nl9Wg8ncdPazH8wNw7uXKpvHRcadoAGR41qrKOHhEeszCYVP+U7n6szPVHWq4TbY=\n=sm4p\n-----END PGP SIGNATURE-----\n", "payload": "tree 16f78c3d4a67c80c9c4a96f7f1f44b6dc0f957dd\nparent 2c5f905c67bb8e3bfb19efa0de5ab911e63f8e42\nparent c24753ae5d06edcb798d17ed8713ef02a3c3b164\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617374484 +0000\ncommitter GitHub <noreply@github.com> 1617374484 +0000\n\nMerge #8287\n\n8287: Don't allocate in `associated_type_shorthand_candidates` r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d619070b8329543f46bd8b02c227de2bc73d9fe6", "html_url": "https://github.com/rust-lang/rust/commit/d619070b8329543f46bd8b02c227de2bc73d9fe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d619070b8329543f46bd8b02c227de2bc73d9fe6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5f905c67bb8e3bfb19efa0de5ab911e63f8e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5f905c67bb8e3bfb19efa0de5ab911e63f8e42", "html_url": "https://github.com/rust-lang/rust/commit/2c5f905c67bb8e3bfb19efa0de5ab911e63f8e42"}, {"sha": "c24753ae5d06edcb798d17ed8713ef02a3c3b164", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24753ae5d06edcb798d17ed8713ef02a3c3b164", "html_url": "https://github.com/rust-lang/rust/commit/c24753ae5d06edcb798d17ed8713ef02a3c3b164"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "018621131f128570bb8e5a8c543e9d04234fa4b8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d619070b8329543f46bd8b02c227de2bc73d9fe6/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d619070b8329543f46bd8b02c227de2bc73d9fe6/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=d619070b8329543f46bd8b02c227de2bc73d9fe6", "patch": "@@ -821,24 +821,38 @@ pub fn associated_type_shorthand_candidates<R>(\n     res: TypeNs,\n     mut cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,\n ) -> Option<R> {\n-    let traits_from_env: Vec<_> = match res {\n-        TypeNs::SelfType(impl_id) => match db.impl_trait(impl_id) {\n-            None => vec![],\n-            // FIXME: how to correctly handle higher-ranked bounds here?\n-            Some(trait_ref) => vec![trait_ref.value.shift_bound_vars_out(DebruijnIndex::ONE)],\n-        },\n+    let mut search = |t| {\n+        for t in all_super_trait_refs(db, t) {\n+            let data = db.trait_data(t.hir_trait_id());\n+\n+            for (name, assoc_id) in &data.items {\n+                if let AssocItemId::TypeAliasId(alias) = assoc_id {\n+                    if let Some(result) = cb(name, &t, *alias) {\n+                        return Some(result);\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    };\n+\n+    match res {\n+        // FIXME: how to correctly handle higher-ranked bounds here?\n+        TypeNs::SelfType(impl_id) => {\n+            search(db.impl_trait(impl_id)?.value.shift_bound_vars_out(DebruijnIndex::ONE))\n+        }\n         TypeNs::GenericParam(param_id) => {\n             let predicates = db.generic_predicates_for_param(param_id);\n-            let mut traits_: Vec<_> = predicates\n-                .iter()\n-                .filter_map(|pred| match &pred.value.value {\n-                    // FIXME: how to correctly handle higher-ranked bounds here?\n-                    WhereClause::Implemented(tr) => {\n-                        Some(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n-                    }\n-                    _ => None,\n-                })\n-                .collect();\n+            let res = predicates.iter().find_map(|pred| match &pred.value.value {\n+                // FIXME: how to correctly handle higher-ranked bounds here?\n+                WhereClause::Implemented(tr) => {\n+                    search(tr.clone().shift_bound_vars_out(DebruijnIndex::ONE))\n+                }\n+                _ => None,\n+            });\n+            if let res @ Some(_) = res {\n+                return res;\n+            }\n             // Handle `Self::Type` referring to own associated type in trait definitions\n             if let GenericDefId::TraitId(trait_id) = param_id.parent {\n                 let generics = generics(db.upcast(), trait_id.into());\n@@ -849,30 +863,13 @@ pub fn associated_type_shorthand_candidates<R>(\n                         trait_id: to_chalk_trait_id(trait_id),\n                         substitution: Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST),\n                     };\n-                    traits_.push(trait_ref);\n+                    return search(trait_ref);\n                 }\n             }\n-            traits_\n-        }\n-        _ => vec![],\n-    };\n-\n-    for t in traits_from_env.into_iter().flat_map(move |t| all_super_trait_refs(db, t)) {\n-        let data = db.trait_data(t.hir_trait_id());\n-\n-        for (name, assoc_id) in &data.items {\n-            match assoc_id {\n-                AssocItemId::TypeAliasId(alias) => {\n-                    if let Some(result) = cb(name, &t, *alias) {\n-                        return Some(result);\n-                    }\n-                }\n-                AssocItemId::FunctionId(_) | AssocItemId::ConstId(_) => {}\n-            }\n+            None\n         }\n+        _ => None,\n     }\n-\n-    None\n }\n \n /// Build the type of all specific fields of a struct or enum variant."}]}