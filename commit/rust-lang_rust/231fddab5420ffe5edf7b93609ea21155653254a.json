{"sha": "231fddab5420ffe5edf7b93609ea21155653254a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMWZkZGFiNTQyMGZmZTVlZGY3YjkzNjA5ZWEyMTE1NTY1MzI1NGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-09T12:40:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-09T12:40:11Z"}, "message": "More fluent indent API", "tree": {"sha": "9097335ae61afaf895c61ec1532fbf52aeb13aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9097335ae61afaf895c61ec1532fbf52aeb13aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/231fddab5420ffe5edf7b93609ea21155653254a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/231fddab5420ffe5edf7b93609ea21155653254a", "html_url": "https://github.com/rust-lang/rust/commit/231fddab5420ffe5edf7b93609ea21155653254a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/231fddab5420ffe5edf7b93609ea21155653254a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6334285e3b8369ca685ca436d94ff1f64201044", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6334285e3b8369ca685ca436d94ff1f64201044", "html_url": "https://github.com/rust-lang/rust/commit/c6334285e3b8369ca685ca436d94ff1f64201044"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "de016ae4e1527c82c005b435350f9d2a86cc13f1", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=231fddab5420ffe5edf7b93609ea21155653254a", "patch": "@@ -1,7 +1,11 @@\n use hir::HirDisplay;\n use ra_db::FileId;\n use ra_syntax::{\n-    ast::{self, edit::IndentLevel, ArgListOwner, AstNode, ModuleItemOwner},\n+    ast::{\n+        self,\n+        edit::{AstNodeEdit, IndentLevel},\n+        ArgListOwner, AstNode, ModuleItemOwner,\n+    },\n     SyntaxKind, SyntaxNode, TextSize,\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -116,17 +120,16 @@ impl FunctionBuilder {\n         let (fn_def, insert_offset) = match self.target {\n             GeneratedFunctionTarget::BehindItem(it) => {\n                 let with_leading_blank_line = ast::make::add_leading_newlines(2, fn_def);\n-                let indented = IndentLevel::from_node(&it).increase_indent(with_leading_blank_line);\n+                let indented = with_leading_blank_line.indent(IndentLevel::from_node(&it));\n                 (indented, it.text_range().end())\n             }\n             GeneratedFunctionTarget::InEmptyItemList(it) => {\n                 let indent_once = IndentLevel(1);\n                 let indent = IndentLevel::from_node(it.syntax());\n-\n                 let fn_def = ast::make::add_leading_newlines(1, fn_def);\n-                let fn_def = indent_once.increase_indent(fn_def);\n+                let fn_def = fn_def.indent(indent_once);\n                 let fn_def = ast::make::add_trailing_newlines(1, fn_def);\n-                let fn_def = indent.increase_indent(fn_def);\n+                let fn_def = fn_def.indent(indent);\n                 (fn_def, it.syntax().text_range().start() + TextSize::of('{'))\n             }\n         };"}, {"sha": "c1ce87914ab2908ac7daa24395905472d46a4d62", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=231fddab5420ffe5edf7b93609ea21155653254a", "patch": "@@ -2,7 +2,7 @@ use hir::HasSource;\n use ra_syntax::{\n     ast::{\n         self,\n-        edit::{self, IndentLevel},\n+        edit::{self, AstNodeEdit, IndentLevel},\n         make, AstNode, NameOwner,\n     },\n     SmolStr,\n@@ -176,8 +176,7 @@ fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     if fn_def.body().is_some() {\n         return fn_def;\n     }\n-    let body = make::block_expr(None, Some(make::expr_todo()));\n-    let body = IndentLevel(1).increase_indent(body);\n+    let body = make::block_expr(None, Some(make::expr_todo())).indent(IndentLevel(1));\n     fn_def.with_body(body)\n }\n "}, {"sha": "0f29149507f6632cd56e21b6ed3217cf8b81367d", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=231fddab5420ffe5edf7b93609ea21155653254a", "patch": "@@ -2,7 +2,11 @@ use std::{iter::once, ops::RangeInclusive};\n \n use ra_syntax::{\n     algo::replace_children,\n-    ast::{self, edit::IndentLevel, make},\n+    ast::{\n+        self,\n+        edit::{AstNodeEdit, IndentLevel},\n+        make,\n+    },\n     AstNode,\n     SyntaxKind::{FN_DEF, LOOP_EXPR, L_CURLY, R_CURLY, WHILE_EXPR, WHITESPACE},\n     SyntaxNode,\n@@ -105,8 +109,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                     let then_branch =\n                         make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n                     let cond = invert_boolean_expression(cond_expr);\n-                    let e = make::expr_if(make::condition(cond, None), then_branch);\n-                    if_indent_level.increase_indent(e)\n+                    make::expr_if(make::condition(cond, None), then_branch).indent(if_indent_level)\n                 };\n                 replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n             }\n@@ -140,7 +143,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                     make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n                     Some(match_expr),\n                 );\n-                let let_stmt = if_indent_level.increase_indent(let_stmt);\n+                let let_stmt = let_stmt.indent(if_indent_level);\n                 replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n             }\n         };\n@@ -153,7 +156,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n             parent_block: &ast::BlockExpr,\n             if_expr: &ast::IfExpr,\n         ) -> SyntaxNode {\n-            let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n+            let then_block_items = then_block.unindent(IndentLevel::from(1));\n             let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n             let end_of_then =\n                 if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {"}, {"sha": "65f5fc6abec7d58470693ebace5c12297b8bc28d", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=231fddab5420ffe5edf7b93609ea21155653254a", "patch": "@@ -1,6 +1,10 @@\n use ra_fmt::unwrap_trivial_block;\n use ra_syntax::{\n-    ast::{self, edit::IndentLevel, make},\n+    ast::{\n+        self,\n+        edit::{AstNodeEdit, IndentLevel},\n+        make,\n+    },\n     AstNode,\n };\n \n@@ -61,10 +65,9 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                 make::match_arm(vec![pattern], else_expr)\n             };\n             make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]))\n+                .indent(IndentLevel::from_node(if_expr.syntax()))\n         };\n \n-        let match_expr = IndentLevel::from_node(if_expr.syntax()).increase_indent(match_expr);\n-\n         edit.set_cursor(if_expr.syntax().text_range().start());\n         edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n     })"}, {"sha": "482957dc602934536335792aa93771bcd4e83426", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=231fddab5420ffe5edf7b93609ea21155653254a", "patch": "@@ -53,8 +53,7 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n             )\n             .into(),\n         };\n-        let block =\n-            IndentLevel::from_node(let_stmt.syntax()).increase_indent(make::block_expr(None, None));\n+        let block = make::block_expr(None, None).indent(IndentLevel::from_node(let_stmt.syntax()));\n         let if_ = make::expr_if(make::condition(init, Some(with_placeholder)), block);\n         let stmt = make::expr_stmt(if_);\n "}, {"sha": "c4b56f6e90ab6ebfc551abb36670e1f7e09e934c", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=231fddab5420ffe5edf7b93609ea21155653254a", "patch": "@@ -1,7 +1,11 @@\n use std::iter;\n \n use ra_syntax::{\n-    ast::{self, edit::IndentLevel, make},\n+    ast::{\n+        self,\n+        edit::{AstNodeEdit, IndentLevel},\n+        make,\n+    },\n     AstNode,\n };\n \n@@ -51,8 +55,8 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n         let err_arm = make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n \n         let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n-        let match_expr = make::expr_match(caller.clone(), match_arm_list);\n-        let match_expr = IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n+        let match_expr = make::expr_match(caller.clone(), match_arm_list)\n+            .indent(IndentLevel::from_node(method_call.syntax()));\n \n         edit.set_cursor(caller.syntax().text_range().start());\n         edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);"}, {"sha": "94dfb1a139189f0dd49230045fc8ffeaca6796f9", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231fddab5420ffe5edf7b93609ea21155653254a/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=231fddab5420ffe5edf7b93609ea21155653254a", "patch": "@@ -453,11 +453,7 @@ impl IndentLevel {\n         IndentLevel(0)\n     }\n \n-    pub fn increase_indent<N: AstNode>(self, node: N) -> N {\n-        N::cast(self._increase_indent(node.syntax().clone())).unwrap()\n-    }\n-\n-    fn _increase_indent(self, node: SyntaxNode) -> SyntaxNode {\n+    fn increase_indent(self, node: SyntaxNode) -> SyntaxNode {\n         let mut rewriter = SyntaxRewriter::default();\n         node.descendants_with_tokens()\n             .filter_map(|el| el.into_token())\n@@ -478,11 +474,7 @@ impl IndentLevel {\n         rewriter.rewrite(&node)\n     }\n \n-    pub fn decrease_indent<N: AstNode>(self, node: N) -> N {\n-        N::cast(self._decrease_indent(node.syntax().clone())).unwrap()\n-    }\n-\n-    fn _decrease_indent(self, node: SyntaxNode) -> SyntaxNode {\n+    fn decrease_indent(self, node: SyntaxNode) -> SyntaxNode {\n         let mut rewriter = SyntaxRewriter::default();\n         node.descendants_with_tokens()\n             .filter_map(|el| el.into_token())\n@@ -521,7 +513,7 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     iter::successors(Some(token), |token| token.prev_token())\n }\n \n-pub trait AstNodeEdit: AstNode + Sized {\n+pub trait AstNodeEdit: AstNode + Clone + Sized {\n     #[must_use]\n     fn insert_children(\n         &self,\n@@ -558,9 +550,17 @@ pub trait AstNodeEdit: AstNode + Sized {\n         }\n         rewriter.rewrite_ast(self)\n     }\n+    #[must_use]\n+    fn indent(&self, indent: IndentLevel) -> Self {\n+        Self::cast(indent.increase_indent(self.syntax().clone())).unwrap()\n+    }\n+    #[must_use]\n+    fn unindent(&self, indent: IndentLevel) -> Self {\n+        Self::cast(indent.decrease_indent(self.syntax().clone())).unwrap()\n+    }\n }\n \n-impl<N: AstNode> AstNodeEdit for N {}\n+impl<N: AstNode + Clone> AstNodeEdit for N {}\n \n fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElement> {\n     let element = element.into();\n@@ -580,7 +580,7 @@ fn test_increase_indent() {\n     _ => (),\n }\"\n     );\n-    let indented = IndentLevel(2).increase_indent(arm_list);\n+    let indented = arm_list.indent(IndentLevel(2));\n     assert_eq!(\n         indented.syntax().to_string(),\n         \"{"}]}