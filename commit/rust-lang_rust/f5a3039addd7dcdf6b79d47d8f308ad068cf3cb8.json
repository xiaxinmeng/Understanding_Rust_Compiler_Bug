{"sha": "f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "node_id": "C_kwDOAAsO6NoAKGY1YTMwMzlhZGRkN2RjZGY2Yjc5ZDQ3ZDhmMzA4YWQwNjhjZjNjYjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-25T19:06:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-25T19:06:34Z"}, "message": "Rollup merge of #110783 - dtolnay:safeprint, r=petrochenkov\n\nFix ICE on --print=... i/o errors\n\n`rustc --print=cfg > /dev/full`\n\n**Before:** ICE (see below)\n\n**After:** exits quietly with code 1.\n\n```console\nthread 'rustc' panicked at 'failed printing to stdout: No space left on device (os error 28)', library/std/src/io/stdio.rs:1019:9\nstack backtrace:\n   0:     0x7ffa84d68f33 - std::backtrace_rs::backtrace::libunwind::trace::h527d8d64d53ade2d\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7ffa84d68f33 - std::backtrace_rs::backtrace::trace_unsynchronized::hfb55b01517dd6379\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7ffa84d68f33 - std::sys_common::backtrace::_print_fmt::hd134e914eea0bd97\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7ffa84d68f33 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h1480db11ec399d77\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7ffa84dc9d4f - core::fmt::write::h67ec4c4171c92b26\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/core/src/fmt/mod.rs:1247:17\n   5:     0x7ffa84d5bed1 - std::io::Write::write_fmt::h3b12aef0fff2463b\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/io/mod.rs:1712:15\n   6:     0x7ffa84d68d45 - std::sys_common::backtrace::_print::h584400135abdbd51\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7ffa84d68d45 - std::sys_common::backtrace::print::hce41d3c8bd91096b\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7ffa84d6b84f - std::panicking::default_hook::{{closure}}::h2043b657a3791225\n   9:     0x7ffa84d6b507 - std::panicking::default_hook::h99252b8d3dd5719c\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:293:9\n  10:     0x7ffa87fdf915 - <rustc_driver_impl[d30cd2737d9d343a]::DEFAULT_HOOK::{closure#0}::{closure#0} as core[cc19a662f3570270]::ops::function::FnOnce<(&core[cc19a662f3570270]::panic::panic_info::PanicInfo,)>>::call_once::{shim:vtable#0}\n  11:     0x7ffa84d6c005 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h222a2b674b9f4762\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/alloc/src/boxed.rs:1976:9\n  12:     0x7ffa84d6c005 - std::panicking::rust_panic_with_hook::h7f49b36bf7f8ff77\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:704:13\n  13:     0x7ffa84d6bd73 - std::panicking::begin_panic_handler::{{closure}}::haa23a7352589e31e\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:595:13\n  14:     0x7ffa84d69376 - std::sys_common::backtrace::__rust_end_short_backtrace::h3d0cf6e3c96e3fe9\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:150:18\n  15:     0x7ffa84d6ba72 - rust_begin_unwind\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:584:5\n  16:     0x7ffa84dc5fe3 - core::panicking::panic_fmt::hf4b4ea11e3fdb110\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/core/src/panicking.rs:67:14\n  17:     0x7ffa84d5aa07 - std::io::stdio::print_to::h55760b9ede306280\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/io/stdio.rs:1019:9\n  18:     0x7ffa84d5aa07 - std::io::stdio::_print::h93deb6099db33eab\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/io/stdio.rs:1095:5\n  19:     0x7ffa871e163b - rustc_driver_impl[d30cd2737d9d343a]::print_crate_info\n  20:     0x7ffa87fb8e01 - rustc_span[9551eaa044f53f4f]::set_source_map::<(), rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}::{closure#0}>\n  21:     0x7ffa87fb6d59 - std[71a32ca0600a6a04]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[c2b70c9b1dae0906]::util::run_in_thread_pool_with_globals<rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>\n  22:     0x7ffa87fe25b4 - std[71a32ca0600a6a04]::panicking::try::<(), core[cc19a662f3570270]::panic::unwind_safe::AssertUnwindSafe<<std[71a32ca0600a6a04]::thread::Builder>::spawn_unchecked_<rustc_interface[c2b70c9b1dae0906]::util::run_in_thread_pool_with_globals<rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>::{closure#1}::{closure#0}>>\n  23:     0x7ffa87fb0cf1 - <<std[71a32ca0600a6a04]::thread::Builder>::spawn_unchecked_<rustc_interface[c2b70c9b1dae0906]::util::run_in_thread_pool_with_globals<rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>::{closure#1} as core[cc19a662f3570270]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n  24:     0x7ffa84d763e5 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hf15d802f31f86225\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/alloc/src/boxed.rs:1962:9\n  25:     0x7ffa84d763e5 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hac564355b46c52d6\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/alloc/src/boxed.rs:1962:9\n  26:     0x7ffa84d763e5 - std::sys::unix::thread::Thread::new::thread_start::h86fb3aedb7811f07\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys/unix/thread.rs:108:17\n  27:     0x7ffa84a94b43 - start_thread\n                               at ./nptl/pthread_create.c:442:8\n  28:     0x7ffa84b26a00 - clone3\n                               at ./misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n  29:                0x0 - <unknown>\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.71.0-nightly (7f94b314c 2023-04-23) running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\nend of query stack\n```", "tree": {"sha": "1b06b64ef934d17212850ee0cdd0de2957f17aec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b06b64ef934d17212850ee0cdd0de2957f17aec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSCS6CRBK7hj4Ov3rIwAAMdQIAHJLmTKAwTU8Du12vIBFcpbY\nWPTgxXQ+9gUdKQLsgYi/mSbQN6Kn2zFPYkRBc5CGqF3yb9R2EfPAxFN+2NieBkFQ\ny+zfPrkyO1wutauBzLOS1hJBAB3ut8Smaza9Gqa8VynD+RqjKaxqLg2Cny5BdOlW\niY+/mVHofBLGM/tz1mXKr3LRQC1Z4JitLbD+BnRso4GY7q1y0B+RvlpRN8L2m7TA\nLYFdYKfjn7cFM0BOrd3QpA7UggMZWpxNnSgjYrsJ2CYrpM67yIpLBSZYDcVEInS4\nH4rtqC7k6OabaBcdyy7xfy+MMsdl5Pt+C8RDOrvO7QaMhsCPYghaZNfWZgA3mCI=\n=GTKG\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b06b64ef934d17212850ee0cdd0de2957f17aec\nparent 95e9f68eb50cfdaa830b07b3d960a311e4a0e540\nparent 040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682449594 +0200\ncommitter GitHub <noreply@github.com> 1682449594 +0200\n\nRollup merge of #110783 - dtolnay:safeprint, r=petrochenkov\n\nFix ICE on --print=... i/o errors\n\n`rustc --print=cfg > /dev/full`\n\n**Before:** ICE (see below)\n\n**After:** exits quietly with code 1.\n\n```console\nthread 'rustc' panicked at 'failed printing to stdout: No space left on device (os error 28)', library/std/src/io/stdio.rs:1019:9\nstack backtrace:\n   0:     0x7ffa84d68f33 - std::backtrace_rs::backtrace::libunwind::trace::h527d8d64d53ade2d\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7ffa84d68f33 - std::backtrace_rs::backtrace::trace_unsynchronized::hfb55b01517dd6379\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7ffa84d68f33 - std::sys_common::backtrace::_print_fmt::hd134e914eea0bd97\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7ffa84d68f33 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h1480db11ec399d77\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7ffa84dc9d4f - core::fmt::write::h67ec4c4171c92b26\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/core/src/fmt/mod.rs:1247:17\n   5:     0x7ffa84d5bed1 - std::io::Write::write_fmt::h3b12aef0fff2463b\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/io/mod.rs:1712:15\n   6:     0x7ffa84d68d45 - std::sys_common::backtrace::_print::h584400135abdbd51\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7ffa84d68d45 - std::sys_common::backtrace::print::hce41d3c8bd91096b\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7ffa84d6b84f - std::panicking::default_hook::{{closure}}::h2043b657a3791225\n   9:     0x7ffa84d6b507 - std::panicking::default_hook::h99252b8d3dd5719c\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:293:9\n  10:     0x7ffa87fdf915 - <rustc_driver_impl[d30cd2737d9d343a]::DEFAULT_HOOK::{closure#0}::{closure#0} as core[cc19a662f3570270]::ops::function::FnOnce<(&core[cc19a662f3570270]::panic::panic_info::PanicInfo,)>>::call_once::{shim:vtable#0}\n  11:     0x7ffa84d6c005 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h222a2b674b9f4762\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/alloc/src/boxed.rs:1976:9\n  12:     0x7ffa84d6c005 - std::panicking::rust_panic_with_hook::h7f49b36bf7f8ff77\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:704:13\n  13:     0x7ffa84d6bd73 - std::panicking::begin_panic_handler::{{closure}}::haa23a7352589e31e\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:595:13\n  14:     0x7ffa84d69376 - std::sys_common::backtrace::__rust_end_short_backtrace::h3d0cf6e3c96e3fe9\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys_common/backtrace.rs:150:18\n  15:     0x7ffa84d6ba72 - rust_begin_unwind\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/panicking.rs:584:5\n  16:     0x7ffa84dc5fe3 - core::panicking::panic_fmt::hf4b4ea11e3fdb110\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/core/src/panicking.rs:67:14\n  17:     0x7ffa84d5aa07 - std::io::stdio::print_to::h55760b9ede306280\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/io/stdio.rs:1019:9\n  18:     0x7ffa84d5aa07 - std::io::stdio::_print::h93deb6099db33eab\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/io/stdio.rs:1095:5\n  19:     0x7ffa871e163b - rustc_driver_impl[d30cd2737d9d343a]::print_crate_info\n  20:     0x7ffa87fb8e01 - rustc_span[9551eaa044f53f4f]::set_source_map::<(), rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}::{closure#0}>\n  21:     0x7ffa87fb6d59 - std[71a32ca0600a6a04]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[c2b70c9b1dae0906]::util::run_in_thread_pool_with_globals<rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>\n  22:     0x7ffa87fe25b4 - std[71a32ca0600a6a04]::panicking::try::<(), core[cc19a662f3570270]::panic::unwind_safe::AssertUnwindSafe<<std[71a32ca0600a6a04]::thread::Builder>::spawn_unchecked_<rustc_interface[c2b70c9b1dae0906]::util::run_in_thread_pool_with_globals<rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>::{closure#1}::{closure#0}>>\n  23:     0x7ffa87fb0cf1 - <<std[71a32ca0600a6a04]::thread::Builder>::spawn_unchecked_<rustc_interface[c2b70c9b1dae0906]::util::run_in_thread_pool_with_globals<rustc_interface[c2b70c9b1dae0906]::interface::run_compiler<(), rustc_driver_impl[d30cd2737d9d343a]::run_compiler::{closure#0}>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>::{closure#1} as core[cc19a662f3570270]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n  24:     0x7ffa84d763e5 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hf15d802f31f86225\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/alloc/src/boxed.rs:1962:9\n  25:     0x7ffa84d763e5 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::hac564355b46c52d6\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/alloc/src/boxed.rs:1962:9\n  26:     0x7ffa84d763e5 - std::sys::unix::thread::Thread::new::thread_start::h86fb3aedb7811f07\n                               at /rustc/7f94b314cead7059a71a265a8b64905ef2511796/library/std/src/sys/unix/thread.rs:108:17\n  27:     0x7ffa84a94b43 - start_thread\n                               at ./nptl/pthread_create.c:442:8\n  28:     0x7ffa84b26a00 - clone3\n                               at ./misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\n  29:                0x0 - <unknown>\n\nerror: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.71.0-nightly (7f94b314c 2023-04-23) running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\nend of query stack\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "html_url": "https://github.com/rust-lang/rust/commit/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e9f68eb50cfdaa830b07b3d960a311e4a0e540", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e9f68eb50cfdaa830b07b3d960a311e4a0e540", "html_url": "https://github.com/rust-lang/rust/commit/95e9f68eb50cfdaa830b07b3d960a311e4a0e540"}, {"sha": "040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d", "html_url": "https://github.com/rust-lang/rust/commit/040e1b6b5fccc4c9e084ce620f95ebf8fd13ed8d"}], "stats": {"total": 108, "additions": 68, "deletions": 40}, "files": [{"sha": "5fac485de6417dd5c41e73460a3652333a9cfa67", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "patch": "@@ -58,8 +58,16 @@ use std::str;\n use std::sync::LazyLock;\n use std::time::Instant;\n \n+// This import blocks the use of panicking `print` and `println` in all the code\n+// below. Please use `safe_print` and `safe_println` to avoid ICE when\n+// encountering an I/O error during print.\n+#[allow(unused_imports)]\n+use std::{compile_error as print, compile_error as println};\n+\n pub mod args;\n pub mod pretty;\n+#[macro_use]\n+mod print;\n mod session_diagnostics;\n \n use crate::session_diagnostics::{\n@@ -511,7 +519,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n             if io::stdout().is_terminal() {\n                 show_content_with_pager(&text);\n             } else {\n-                print!(\"{text}\");\n+                safe_print!(\"{text}\");\n             }\n         }\n         Err(InvalidErrorCode) => {\n@@ -547,7 +555,7 @@ fn show_content_with_pager(content: &str) {\n     // If pager fails for whatever reason, we should still print the content\n     // to standard output\n     if fallback_to_println {\n-        print!(\"{content}\");\n+        safe_print!(\"{content}\");\n     }\n }\n \n@@ -601,7 +609,7 @@ pub fn list_metadata(sess: &Session, metadata_loader: &dyn MetadataLoader) -> Co\n                 let path = &(*ifile);\n                 let mut v = Vec::new();\n                 locator::list_file_metadata(&sess.target, path, metadata_loader, &mut v).unwrap();\n-                println!(\"{}\", String::from_utf8(v).unwrap());\n+                safe_println!(\"{}\", String::from_utf8(v).unwrap());\n             }\n             Input::Str { .. } => {\n                 early_error(ErrorOutputType::default(), \"cannot list metadata for stdin\");\n@@ -642,12 +650,12 @@ fn print_crate_info(\n             TargetList => {\n                 let mut targets = rustc_target::spec::TARGETS.to_vec();\n                 targets.sort_unstable();\n-                println!(\"{}\", targets.join(\"\\n\"));\n+                safe_println!(\"{}\", targets.join(\"\\n\"));\n             }\n-            Sysroot => println!(\"{}\", sess.sysroot.display()),\n-            TargetLibdir => println!(\"{}\", sess.target_tlib_path.dir.display()),\n+            Sysroot => safe_println!(\"{}\", sess.sysroot.display()),\n+            TargetLibdir => safe_println!(\"{}\", sess.target_tlib_path.dir.display()),\n             TargetSpec => {\n-                println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n+                safe_println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n             AllTargetSpecs => {\n                 let mut targets = BTreeMap::new();\n@@ -656,7 +664,7 @@ fn print_crate_info(\n                     let target = Target::expect_builtin(&triple);\n                     targets.insert(name, target.to_json());\n                 }\n-                println!(\"{}\", serde_json::to_string_pretty(&targets).unwrap());\n+                safe_println!(\"{}\", serde_json::to_string_pretty(&targets).unwrap());\n             }\n             FileNames | CrateName => {\n                 let Some(attrs) = attrs.as_ref() else {\n@@ -666,14 +674,14 @@ fn print_crate_info(\n                 let t_outputs = rustc_interface::util::build_output_filenames(attrs, sess);\n                 let id = rustc_session::output::find_crate_name(sess, attrs);\n                 if *req == PrintRequest::CrateName {\n-                    println!(\"{id}\");\n+                    safe_println!(\"{id}\");\n                     continue;\n                 }\n                 let crate_types = collect_crate_types(sess, attrs);\n                 for &style in &crate_types {\n                     let fname =\n                         rustc_session::output::filename_for_input(sess, style, id, &t_outputs);\n-                    println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n+                    safe_println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n                 }\n             }\n             Cfg => {\n@@ -707,13 +715,13 @@ fn print_crate_info(\n \n                 cfgs.sort();\n                 for cfg in cfgs {\n-                    println!(\"{cfg}\");\n+                    safe_println!(\"{cfg}\");\n                 }\n             }\n             CallingConventions => {\n                 let mut calling_conventions = rustc_target::spec::abi::all_names();\n                 calling_conventions.sort_unstable();\n-                println!(\"{}\", calling_conventions.join(\"\\n\"));\n+                safe_println!(\"{}\", calling_conventions.join(\"\\n\"));\n             }\n             RelocationModels\n             | CodeModels\n@@ -733,7 +741,7 @@ fn print_crate_info(\n                     let stable = sess.target.options.supported_split_debuginfo.contains(split);\n                     let unstable_ok = sess.unstable_options();\n                     if stable || unstable_ok {\n-                        println!(\"{split}\");\n+                        safe_println!(\"{split}\");\n                     }\n                 }\n             }\n@@ -770,14 +778,14 @@ pub fn version_at_macro_invocation(\n ) {\n     let verbose = matches.opt_present(\"verbose\");\n \n-    println!(\"{binary} {version}\");\n+    safe_println!(\"{binary} {version}\");\n \n     if verbose {\n-        println!(\"binary: {binary}\");\n-        println!(\"commit-hash: {commit_hash}\");\n-        println!(\"commit-date: {commit_date}\");\n-        println!(\"host: {}\", config::host_triple());\n-        println!(\"release: {release}\");\n+        safe_println!(\"binary: {binary}\");\n+        safe_println!(\"commit-hash: {commit_hash}\");\n+        safe_println!(\"commit-date: {commit_date}\");\n+        safe_println!(\"host: {}\", config::host_triple());\n+        safe_println!(\"release: {release}\");\n \n         let debug_flags = matches.opt_strs(\"Z\");\n         let backend_name = debug_flags.iter().find_map(|x| x.strip_prefix(\"codegen-backend=\"));\n@@ -807,7 +815,7 @@ fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n     } else {\n         \"\"\n     };\n-    println!(\n+    safe_println!(\n         \"{options}{at_path}\\nAdditional help:\n     -C help             Print codegen options\n     -W help             \\\n@@ -820,7 +828,7 @@ fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n }\n \n fn print_wall_help() {\n-    println!(\n+    safe_println!(\n         \"\n The flag `-Wall` does not exist in `rustc`. Most useful lints are enabled by\n default. Use `rustc -W help` to see all available lints. It's more common to put\n@@ -832,7 +840,7 @@ the command line flag directly.\n \n /// Write to stdout lint command options, together with a list of all available lints\n pub fn describe_lints(sess: &Session, lint_store: &LintStore, loaded_plugins: bool) {\n-    println!(\n+    safe_println!(\n         \"\n Available lint options:\n     -W <foo>           Warn about <foo>\n@@ -877,21 +885,21 @@ Available lint options:\n         s\n     };\n \n-    println!(\"Lint checks provided by rustc:\\n\");\n+    safe_println!(\"Lint checks provided by rustc:\\n\");\n \n     let print_lints = |lints: Vec<&Lint>| {\n-        println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n-        println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n+        safe_println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n+        safe_println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n         for lint in lints {\n             let name = lint.name_lower().replace('_', \"-\");\n-            println!(\n+            safe_println!(\n                 \"    {}  {:7.7}  {}\",\n                 padded(&name),\n                 lint.default_level(sess.edition()).as_str(),\n                 lint.desc\n             );\n         }\n-        println!(\"\\n\");\n+        safe_println!(\"\\n\");\n     };\n \n     print_lints(builtin);\n@@ -912,14 +920,14 @@ Available lint options:\n         s\n     };\n \n-    println!(\"Lint groups provided by rustc:\\n\");\n+    safe_println!(\"Lint groups provided by rustc:\\n\");\n \n     let print_lint_groups = |lints: Vec<(&'static str, Vec<LintId>)>, all_warnings| {\n-        println!(\"    {}  sub-lints\", padded(\"name\"));\n-        println!(\"    {}  ---------\", padded(\"----\"));\n+        safe_println!(\"    {}  sub-lints\", padded(\"name\"));\n+        safe_println!(\"    {}  ---------\", padded(\"----\"));\n \n         if all_warnings {\n-            println!(\"    {}  all lints that are set to issue warnings\", padded(\"warnings\"));\n+            safe_println!(\"    {}  all lints that are set to issue warnings\", padded(\"warnings\"));\n         }\n \n         for (name, to) in lints {\n@@ -929,26 +937,26 @@ Available lint options:\n                 .map(|x| x.to_string().replace('_', \"-\"))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n-            println!(\"    {}  {}\", padded(&name), desc);\n+            safe_println!(\"    {}  {}\", padded(&name), desc);\n         }\n-        println!(\"\\n\");\n+        safe_println!(\"\\n\");\n     };\n \n     print_lint_groups(builtin_groups, true);\n \n     match (loaded_plugins, plugin.len(), plugin_groups.len()) {\n         (false, 0, _) | (false, _, 0) => {\n-            println!(\"Lint tools like Clippy can provide additional lints and lint groups.\");\n+            safe_println!(\"Lint tools like Clippy can provide additional lints and lint groups.\");\n         }\n         (false, ..) => panic!(\"didn't load lint plugins but got them anyway!\"),\n-        (true, 0, 0) => println!(\"This crate does not load any lint plugins or lint groups.\"),\n+        (true, 0, 0) => safe_println!(\"This crate does not load any lint plugins or lint groups.\"),\n         (true, l, g) => {\n             if l > 0 {\n-                println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n+                safe_println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n                 print_lints(plugin);\n             }\n             if g > 0 {\n-                println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n+                safe_println!(\"Lint groups provided by plugins loaded by this crate:\\n\");\n                 print_lint_groups(plugin_groups, false);\n             }\n         }\n@@ -996,12 +1004,12 @@ pub fn describe_flag_categories(matches: &Matches) -> bool {\n }\n \n fn describe_debug_flags() {\n-    println!(\"\\nAvailable options:\\n\");\n+    safe_println!(\"\\nAvailable options:\\n\");\n     print_flag_list(\"-Z\", config::Z_OPTIONS);\n }\n \n fn describe_codegen_flags() {\n-    println!(\"\\nAvailable codegen options:\\n\");\n+    safe_println!(\"\\nAvailable codegen options:\\n\");\n     print_flag_list(\"-C\", config::CG_OPTIONS);\n }\n \n@@ -1012,7 +1020,7 @@ fn print_flag_list<T>(\n     let max_len = flag_list.iter().map(|&(name, _, _, _)| name.chars().count()).max().unwrap_or(0);\n \n     for &(name, _, _, desc) in flag_list {\n-        println!(\n+        safe_println!(\n             \"    {} {:>width$}=val -- {}\",\n             cmdline_opt,\n             name.replace('_', \"-\"),"}, {"sha": "70de55320f7ae1830c196887baf30f5f7671542b", "filename": "compiler/rustc_driver_impl/src/print.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Fprint.rs?ref=f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "patch": "@@ -0,0 +1,20 @@\n+use std::fmt;\n+use std::io::{self, Write as _};\n+\n+macro_rules! safe_print {\n+    ($($arg:tt)*) => {{\n+        $crate::print::print(std::format_args!($($arg)*));\n+    }};\n+}\n+\n+macro_rules! safe_println {\n+    ($($arg:tt)*) => {\n+        safe_print!(\"{}\\n\", std::format_args!($($arg)*))\n+    };\n+}\n+\n+pub(crate) fn print(args: fmt::Arguments<'_>) {\n+    if let Err(_) = io::stdout().write_fmt(args) {\n+        rustc_errors::FatalError.raise();\n+    }\n+}"}]}