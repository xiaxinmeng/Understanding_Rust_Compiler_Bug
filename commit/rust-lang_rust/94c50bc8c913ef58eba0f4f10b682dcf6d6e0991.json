{"sha": "94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzUwYmM4YzkxM2VmNThlYmEwZjRmMTBiNjgyZGNmNmQ2ZTA5OTE=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-07-28T14:23:47Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-07-28T14:42:26Z"}, "message": "Lint duplicate methods of trait bounds\n\nFixes #5777", "tree": {"sha": "4e3491920c83f415472afe142b2302a32f8e2f4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e3491920c83f415472afe142b2302a32f8e2f4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl8gOVIACgkQoZMWSk0F\n7kSHaQf/e58GfgyNoAlC3ejfx5COakz1n+Krdjepda3dHBSZ01y0R2LGVBLX6srq\nFutiCIUbUtQtUwefcAqotRZXoS1zmBmxKrRobUTwYIGy7yDCVUJlOcnmb6qos0xk\njXM7uZWqnf+0NK6TTLsD8okO3ghA+MNxJmDrJm2asvajqNr0vdm5BUtml6vw9a33\ncoITlu2cDOLCR5LjEuWwIiwhC10aimwnuN26Fl6wCR2Hh5P+oZMYfBGIXNtwKuLz\nGp5l1vltBJosBRzxMqPPiY+ATLrUI3h+O0rE1Z1wnmZEXmskm+KWbRb1ZlN+QGK2\n59is9iLI/u6Mu8wC85irHkbTNraHLw==\n=ezYS\n-----END PGP SIGNATURE-----", "payload": "tree 4e3491920c83f415472afe142b2302a32f8e2f4a\nparent f5d429cd762423901f946abd800dc2cd91366ccf\nauthor Christoph Walcher <christoph-wa@gmx.de> 1595946227 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1595947346 +0200\n\nLint duplicate methods of trait bounds\n\nFixes #5777\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "html_url": "https://github.com/rust-lang/rust/commit/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d429cd762423901f946abd800dc2cd91366ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d429cd762423901f946abd800dc2cd91366ccf", "html_url": "https://github.com/rust-lang/rust/commit/f5d429cd762423901f946abd800dc2cd91366ccf"}], "stats": {"total": 158, "additions": 156, "deletions": 2}, "files": [{"sha": "0ca4d88ed38399413f653c701b3c4160dd9ae32e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "patch": "@@ -1723,6 +1723,7 @@ Released 2018-09-13\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n [`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\n [`toplevel_ref_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\n+[`trait_duplication_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#trait_duplication_in_bounds\n [`transmute_bytes_to_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_bytes_to_str\n [`transmute_float_to_int`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool"}, {"sha": "07ef087c2b04f817fdf2608ea7dd11d79956c28d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "patch": "@@ -786,6 +786,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n         &temporary_assignment::TEMPORARY_ASSIGNMENT,\n         &to_digit_is_some::TO_DIGIT_IS_SOME,\n+        &trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         &transmute::CROSSPOINTER_TRANSMUTE,\n         &transmute::TRANSMUTE_BYTES_TO_STR,\n@@ -1174,6 +1175,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),\n+        LintId::of(&trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n         LintId::of(&trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n         LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::CAST_LOSSLESS),"}, {"sha": "6bfdac37180aa0f0b1496b86a0e9ee811716e21e", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "patch": "@@ -2,9 +2,10 @@ use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n-use rustc_hir::{GenericBound, Generics, WherePredicate};\n+use rustc_hir::{def::Res, GenericBound, Generics, ParamName, Path, QPath, TyKind, WherePredicate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** This lint warns about unnecessary type repetitions in trait bounds\n@@ -29,6 +30,35 @@ declare_clippy_lint! {\n     \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for cases where generics are being used and multiple\n+    /// syntax specifications for trait bounds are used simultaneously.\n+    ///\n+    /// **Why is this bad?** Duplicate bounds makes the code\n+    /// less readable than specifing them only once.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// fn func<T: Clone + Default>(arg: T) where T: Clone + Default {}\n+    /// ```\n+    ///\n+    /// Could be written as:\n+    ///\n+    /// ```rust\n+    /// fn func<T: Clone + Default>(arg: T) {}\n+    /// ```\n+    /// or\n+    ///  ///\n+    /// ```rust\n+    /// fn func<T>(arg: T) where T: Clone + Default {}\n+    /// ```\n+    pub TRAIT_DUPLICATION_IN_BOUNDS,\n+    pedantic,\n+    \"Check if the same trait bounds are specifed twice during a function declaration\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct TraitBounds {\n     max_trait_bounds: u64,\n@@ -41,10 +71,25 @@ impl TraitBounds {\n     }\n }\n \n-impl_lint_pass!(TraitBounds => [TYPE_REPETITION_IN_BOUNDS]);\n+impl_lint_pass!(TraitBounds => [TYPE_REPETITION_IN_BOUNDS, TRAIT_DUPLICATION_IN_BOUNDS]);\n \n impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n     fn check_generics(&mut self, cx: &LateContext<'tcx>, gen: &'tcx Generics<'_>) {\n+        self.check_type_repetition(cx, gen);\n+        check_trait_bound_duplication(cx, gen);\n+    }\n+}\n+\n+fn get_trait_res_span_from_bound(bound: &GenericBound<'_>) -> Option<(Res, Span)> {\n+    if let GenericBound::Trait(t, _) = bound {\n+        Some((t.trait_ref.path.res, t.span))\n+    } else {\n+        None\n+    }\n+}\n+\n+impl TraitBounds {\n+    fn check_type_repetition(self, cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         if in_macro(gen.span) {\n             return;\n         }\n@@ -101,3 +146,48 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n         }\n     }\n }\n+\n+fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n+    if in_macro(gen.span) {\n+        return;\n+    }\n+\n+    let mut map = FxHashMap::default();\n+    for param in gen.params {\n+        if let ParamName::Plain(ref ident) = param.name {\n+            let res = param\n+                .bounds\n+                .iter()\n+                .filter_map(get_trait_res_span_from_bound)\n+                .collect::<Vec<_>>();\n+            map.insert(*ident, res);\n+        }\n+    }\n+\n+    for predicate in gen.where_clause.predicates {\n+        if_chain! {\n+            if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n+            if !in_macro(bound_predicate.span);\n+            if let TyKind::Path(ref path) = bound_predicate.bounded_ty.kind;\n+            if let QPath::Resolved(_, Path { ref segments, .. }) = path;\n+            if let Some(segment) = segments.first();\n+            if let Some(trait_resolutions_direct) = map.get(&segment.ident);\n+            then {\n+                for (res_where, _) in bound_predicate.bounds.iter().filter_map(get_trait_res_span_from_bound) {\n+                    if let Some((_, span_direct)) = trait_resolutions_direct\n+                                                .iter()\n+                                                .find(|(res_direct, _)| *res_direct == res_where) {\n+                        span_lint_and_help(\n+                            cx,\n+                            TRAIT_DUPLICATION_IN_BOUNDS,\n+                            *span_direct,\n+                            \"this trait bound is already specified in the where clause\",\n+                            None,\n+                            \"consider removing this trait bound\",\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "9fb3dfc96ec56c2283e1029491c52f93c3364de6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "patch": "@@ -2166,6 +2166,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"misc\",\n     },\n+    Lint {\n+        name: \"trait_duplication_in_bounds\",\n+        group: \"pedantic\",\n+        desc: \"Check if the same trait bounds are specifed twice during a function declaration\",\n+        deprecation: None,\n+        module: \"trait_bounds\",\n+    },\n     Lint {\n         name: \"transmute_bytes_to_str\",\n         group: \"complexity\","}, {"sha": "cb2b0054e352b4b951dd23f0444bc0c760caf87b", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "patch": "@@ -0,0 +1,31 @@\n+#![deny(clippy::trait_duplication_in_bounds)]\n+\n+use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n+\n+fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+where\n+    T: Clone,\n+    T: Default,\n+{\n+    unimplemented!();\n+}\n+\n+fn good_bar<T: Clone + Default>(arg: T) {\n+    unimplemented!();\n+}\n+\n+fn good_foo<T>(arg: T)\n+where\n+    T: Clone + Default,\n+{\n+    unimplemented!();\n+}\n+\n+fn good_foobar<T: Default>(arg: T)\n+where\n+    T: Clone,\n+{\n+    unimplemented!();\n+}\n+\n+fn main() {}"}, {"sha": "027e1c752041214d756a812f2308e335d1ff6154", "filename": "tests/ui/trait_duplication_in_bounds.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c50bc8c913ef58eba0f4f10b682dcf6d6e0991/tests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=94c50bc8c913ef58eba0f4f10b682dcf6d6e0991", "patch": "@@ -0,0 +1,23 @@\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:5:15\n+   |\n+LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+   |               ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/trait_duplication_in_bounds.rs:1:9\n+   |\n+LL | #![deny(clippy::trait_duplication_in_bounds)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider removing this trait bound\n+\n+error: this trait bound is already specified in the where clause\n+  --> $DIR/trait_duplication_in_bounds.rs:5:23\n+   |\n+LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n+   |                       ^^^^^^^\n+   |\n+   = help: consider removing this trait bound\n+\n+error: aborting due to 2 previous errors\n+"}]}