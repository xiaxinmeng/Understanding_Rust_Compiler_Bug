{"sha": "846f4f21db34b252b5e42c7a841f14624c643280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NmY0ZjIxZGIzNGIyNTJiNWU0MmM3YTg0MWYxNDYyNGM2NDMyODA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-22T06:55:14Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-22T06:55:14Z"}, "message": "Fix libsyntax updates\n\n`ast::UseTreeKind::Simple` now takes `Option<ast::Ident>`\ninstead of `ast::Ident`.", "tree": {"sha": "23ad0a8f1b0b04734941156e9258a2e7cae0738e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ad0a8f1b0b04734941156e9258a2e7cae0738e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/846f4f21db34b252b5e42c7a841f14624c643280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/846f4f21db34b252b5e42c7a841f14624c643280", "html_url": "https://github.com/rust-lang/rust/commit/846f4f21db34b252b5e42c7a841f14624c643280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/846f4f21db34b252b5e42c7a841f14624c643280/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d5696977c644bd7e3107d6329354642f617f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d5696977c644bd7e3107d6329354642f617f5e", "html_url": "https://github.com/rust-lang/rust/commit/51d5696977c644bd7e3107d6329354642f617f5e"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "f631f4b9c2667e32df2bd64267502b0374006d11", "filename": "src/imports.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/846f4f21db34b252b5e42c7a841f14624c643280/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846f4f21db34b252b5e42c7a841f14624c643280/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=846f4f21db34b252b5e42c7a841f14624c643280", "patch": "@@ -29,6 +29,10 @@ pub fn path_to_imported_ident(path: &ast::Path) -> ast::Ident {\n     path.segments.last().unwrap().identifier\n }\n \n+pub fn same_rename(opt_ident: &Option<ast::Ident>, path: &ast::Path) -> bool {\n+    opt_ident.map_or(true, |ident| path_to_imported_ident(path) == ident)\n+}\n+\n fn rewrite_prefix(path: &ast::Path, context: &RewriteContext, shape: Shape) -> Option<String> {\n     if path.segments.len() > 1 && path_to_imported_ident(path).to_string() == \"self\" {\n         let path = &ast::Path {\n@@ -57,22 +61,16 @@ impl Rewrite for ast::UseTree {\n                     Some(\"*\".to_owned())\n                 }\n             }\n-            ast::UseTreeKind::Simple(ident) => {\n-                let ident_str = ident.to_string();\n-\n-                // 4 = \" as \".len()\n-                let is_same_name_bind = path_to_imported_ident(&self.prefix) == ident;\n-                let prefix_shape = if is_same_name_bind {\n-                    shape\n-                } else {\n-                    shape.sub_width(ident_str.len() + 4)?\n-                };\n-                let path_str = rewrite_prefix(&self.prefix, context, prefix_shape)\n-                    .unwrap_or_else(|| context.snippet(self.prefix.span).to_owned());\n-\n-                if is_same_name_bind {\n-                    Some(path_str)\n+            ast::UseTreeKind::Simple(opt_ident) => {\n+                if same_rename(&opt_ident, &self.prefix) {\n+                    rewrite_prefix(&self.prefix, context, shape)\n+                        .or_else(|| Some(context.snippet(self.prefix.span).to_owned()))\n                 } else {\n+                    let ident_str = opt_ident?.to_string();\n+                    // 4 = \" as \".len()\n+                    let prefix_shape = shape.sub_width(ident_str.len() + 4)?;\n+                    let path_str = rewrite_prefix(&self.prefix, context, prefix_shape)\n+                        .unwrap_or_else(|| context.snippet(self.prefix.span).to_owned());\n                     Some(format!(\"{} as {}\", path_str, ident_str))\n                 }\n             }\n@@ -161,8 +159,7 @@ fn rewrite_nested_use_tree_single(\n     shape: Shape,\n ) -> Option<String> {\n     match tree.kind {\n-        ast::UseTreeKind::Simple(rename) => {\n-            let ident = path_to_imported_ident(&tree.prefix);\n+        ast::UseTreeKind::Simple(opt_rename) => {\n             let mut item_str = rewrite_prefix(&tree.prefix, context, shape)?;\n             if item_str == \"self\" {\n                 item_str = \"\".to_owned();\n@@ -180,10 +177,10 @@ fn rewrite_nested_use_tree_single(\n                 format!(\"{}::{}\", path_str, item_str)\n             };\n \n-            Some(if ident == rename {\n+            Some(if same_rename(&opt_rename, &tree.prefix) {\n                 path_item_str\n             } else {\n-                format!(\"{} as {}\", path_item_str, rename)\n+                format!(\"{} as {}\", path_item_str, opt_rename?)\n             })\n         }\n         ast::UseTreeKind::Glob | ast::UseTreeKind::Nested(..) => {"}, {"sha": "b216313f3b034816862942f1c7cd9268743b5a8e", "filename": "src/reorder.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/846f4f21db34b252b5e42c7a841f14624c643280/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846f4f21db34b252b5e42c7a841f14624c643280/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=846f4f21db34b252b5e42c7a841f14624c643280", "patch": "@@ -321,11 +321,13 @@ impl UseTree {\n             }\n             UseTreeKind::Simple(ref rename) => {\n                 let mut name = (*path_to_imported_ident(&a.prefix).name.as_str()).to_owned();\n-                let alias = if &name == &*rename.name.as_str() {\n-                    None\n-                } else {\n-                    Some((&*rename.name.as_str()).to_owned())\n-                };\n+                let alias = rename.and_then(|ident| {\n+                    if ident == path_to_imported_ident(&a.prefix) {\n+                        None\n+                    } else {\n+                        Some(ident.to_string())\n+                    }\n+                });\n \n                 let segment = if &name == \"self\" {\n                     UseSegment::Slf(alias)"}]}