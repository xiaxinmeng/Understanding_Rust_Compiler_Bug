{"sha": "3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTE3Y2YzY2E5ZGMwOTFkZDYwNWIzMzYxN2MzMmM2MDE5YjBlMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-01T11:06:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-01T11:06:31Z"}, "message": "auto merge of #12639 : luqmana/rust/struct-variant-pat, r=pcwalton\n\nWe weren't passing the node id for the enum and hence it couldn't retrieve the field types for the struct variant we were trying to destructure.\r\n\r\nFixes #11577.", "tree": {"sha": "1397be3f221d798156530e96564ee34e749e1a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1397be3f221d798156530e96564ee34e749e1a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "html_url": "https://github.com/rust-lang/rust/commit/3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d117cf3ca9dc091dd605b33617c32c6019b0e2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143", "html_url": "https://github.com/rust-lang/rust/commit/d60e43d9e9470107b3c1ebbd5dbd69a6a080f143"}, {"sha": "715e618577381ea820d24664dc65b3b2f9ca3285", "url": "https://api.github.com/repos/rust-lang/rust/commits/715e618577381ea820d24664dc65b3b2f9ca3285", "html_url": "https://github.com/rust-lang/rust/commit/715e618577381ea820d24664dc65b3b2f9ca3285"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "39f11245f432dca8d083f28bf073faa20d3e3a10", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d117cf3ca9dc091dd605b33617c32c6019b0e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d117cf3ca9dc091dd605b33617c32c6019b0e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "patch": "@@ -1528,7 +1528,7 @@ fn compile_submatch_continue<'r,\n         Some(ref rec_fields) => {\n             let pat_ty = node_id_type(bcx, pat_id);\n             let pat_repr = adt::represent_type(bcx.ccx(), pat_ty);\n-            expr::with_field_tys(tcx, pat_ty, None, |discr, field_tys| {\n+            expr::with_field_tys(tcx, pat_ty, Some(pat_id), |discr, field_tys| {\n                 let rec_vals = rec_fields.map(|field_name| {\n                         let ix = ty::field_idx_strict(tcx, field_name.name, field_tys);\n                         adt::trans_field_ptr(bcx, pat_repr, val, discr, ix)\n@@ -2208,7 +2208,7 @@ fn bind_irrefutable_pat<'a>(\n             let tcx = bcx.tcx();\n             let pat_ty = node_id_type(bcx, pat.id);\n             let pat_repr = adt::represent_type(bcx.ccx(), pat_ty);\n-            expr::with_field_tys(tcx, pat_ty, None, |discr, field_tys| {\n+            expr::with_field_tys(tcx, pat_ty, Some(pat.id), |discr, field_tys| {\n                 for f in fields.iter() {\n                     let ix = ty::field_idx_strict(tcx, f.ident.name, field_tys);\n                     let fldptr = adt::trans_field_ptr(bcx, pat_repr, val,"}, {"sha": "ca8fbe05edddb1d5e66f4e0d008524d742ab829d", "filename": "src/test/run-pass/issue-11577.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d117cf3ca9dc091dd605b33617c32c6019b0e2b/src%2Ftest%2Frun-pass%2Fissue-11577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d117cf3ca9dc091dd605b33617c32c6019b0e2b/src%2Ftest%2Frun-pass%2Fissue-11577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11577.rs?ref=3d117cf3ca9dc091dd605b33617c32c6019b0e2b", "patch": "@@ -0,0 +1,29 @@\n+ // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(struct_variant)];\n+\n+// Destructuring struct variants would ICE where regular structs wouldn't\n+\n+enum Foo {\n+    VBar { num: int }\n+}\n+\n+struct SBar { num: int }\n+\n+pub fn main() {\n+    let vbar = VBar { num: 1 };\n+    let VBar { num } = vbar;\n+    assert_eq!(num, 1);\n+\n+    let sbar = SBar { num: 2 };\n+    let SBar { num } = sbar;\n+    assert_eq!(num, 2);\n+}"}]}