{"sha": "4fec4cd8f5ad45e8caea324df7434a82e560ca38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWM0Y2Q4ZjVhZDQ1ZThjYWVhMzI0ZGY3NDM0YTgyZTU2MGNhMzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-24T05:53:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-24T05:55:41Z"}, "message": "bench: Add hard mode to benchmarks. Activate with RUST_BENCH.\n\nRUST_BENCH is on automatically when running `make perf`", "tree": {"sha": "214af1c1aa0d5dc1d8cfc3a745dec9b68b8538d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/214af1c1aa0d5dc1d8cfc3a745dec9b68b8538d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fec4cd8f5ad45e8caea324df7434a82e560ca38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fec4cd8f5ad45e8caea324df7434a82e560ca38", "html_url": "https://github.com/rust-lang/rust/commit/4fec4cd8f5ad45e8caea324df7434a82e560ca38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fec4cd8f5ad45e8caea324df7434a82e560ca38/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f3cff28067000c46c44ed05400786bb400e937c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3cff28067000c46c44ed05400786bb400e937c", "html_url": "https://github.com/rust-lang/rust/commit/2f3cff28067000c46c44ed05400786bb400e937c"}], "stats": {"total": 232, "additions": 163, "deletions": 69}, "files": [{"sha": "3f67c50a42a64d1b7744c94623d82348580977b2", "filename": "mk/tests.mk", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -58,6 +58,14 @@ else\n   CFG_RUN_CTEST=$(call CFG_RUN,$(TLIB$(1)_T_$(3)_H_$(3)),$(2))\n endif\n \n+# If we're running perf then set this environment variable\n+# to put the benchmarks into 'hard mode'\n+ifeq ($(MAKECMDGOALS),perf)\n+  RUST_BENCH=1\n+  export RUST_BENCH\n+endif\n+\n+\n ######################################################################\n # Main test targets\n ######################################################################"}, {"sha": "a1d99563a3ad084db0fe611087f08f46ee8127a4", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -21,7 +21,13 @@ fn collect_dvec(num: uint) -> [mut uint] {\n }\n \n fn main(args: [str]) {\n-    let args = if vec::len(args) <= 1u {[\"\", \"100000\"]} else {args};\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"10000000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"100000\"]\n+    } else {\n+        args\n+    };\n     let max = uint::from_str(args[1]).get();\n     let start = std::time::precise_time_s();\n     let raw_v = collect_raw(max);"}, {"sha": "5313a6460a680f5d796b00e7e84d78591d9a4a11", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -404,9 +404,17 @@ fn validate(edges: [(node_id, node_id)],\n     true\n }\n \n-fn main() {\n-    let scale = 10u;\n-    let num_keys = 16u;\n+fn main(args: [str]) {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"12\", \"48\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"10\", \"16\"]\n+    } else {\n+        args\n+    };\n+\n+    let scale = uint::from_str(args[1]).get();\n+    let num_keys = uint::from_str(args[2]).get();\n     let do_validate = false;\n     let do_sequential = true;\n "}, {"sha": "f9ff366185346153473133618064693f5ad04a48", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -59,8 +59,15 @@ fn run(args: [str]) {\n }\n \n fn main(args: [str]) {\n-    let args1 = if vec::len(args) <= 1u { [\"\", \"10000\", \"4\"] } else { args };\n-    #debug(\"%?\", args1);\n-    run(args1);\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"1000000\", \"10000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"10000\", \"4\"]\n+    } else {\n+        args\n+    };        \n+\n+    #debug(\"%?\", args);\n+    run(args);\n }\n "}, {"sha": "8969bdfc0b784dcc57788a82d69dbf5ce4ca6411", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -13,10 +13,13 @@ fn ack(m: int, n: int) -> int {\n }\n \n fn main(args: [str]) {\n-    let n = if vec::len(args) == 2u {\n-        option::get(int::from_str(args[1]))\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"12\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"8\"]\n     } else {\n-        8\n+        args\n     };\n+    let n = int::from_str(args[1]).get();\n     io::println(#fmt(\"Ack(3,%d): %d\\n\", n, ack(3, n)));\n }"}, {"sha": "c1cfe09e15a5a275b3c341714805477243286f60", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -23,11 +23,15 @@ fn bottom_up_tree(arena: &a.arena::arena, item: int, depth: int) -> &a.tree {\n }\n \n fn main(args: [str]) {\n-    let n = if vec::len(args) == 2u {\n-        option::get(int::from_str(args[1]))\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"15\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"8\"]\n     } else {\n-        8\n+        args\n     };\n+\n+    let n = int::from_str(args[1]).get();\n     let min_depth = 4;\n     let mut max_depth;\n     if min_depth + 2 > n {"}, {"sha": "654f75d82604c0956d9fcf79918d578cfcf2810c", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -59,10 +59,14 @@ fn fannkuch(n: int) -> int {\n }\n \n fn main(args: [str]) {\n-    let n = if vec::len(args) == 2u {\n-        option::get(int::from_str(args[1]))\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"10\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"8\"]\n     } else {\n-        8\n+        args\n     };\n+\n+    let n = int::from_str(args[1]).get();\n     io::println(#fmt(\"Pfannkuchen(%d) = %d\", n, fannkuch(n)));\n }"}, {"sha": "053094987c29667e9eec56ae0e4683eff4942b55", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -73,7 +73,17 @@ fn make_repeat_fasta(id: str, desc: str, s: str, n: int) unsafe {\n \n fn acid(ch: char, prob: u32) -> aminoacids { ret {ch: ch, prob: prob}; }\n \n-fn main() {\n+fn main(args: [str]) {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"300000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"1000\"]\n+    } else {\n+        args\n+    };\n+\n+    let n = int::from_str(args[1]).get();\n+\n     let iub: [aminoacids] =\n         make_cumulative([acid('a', 27u32), acid('c', 12u32), acid('g', 12u32),\n                          acid('t', 27u32), acid('B', 2u32), acid('D', 2u32),\n@@ -91,7 +101,6 @@ fn main() {\n             \"GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\" +\n             \"AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\" +\n             \"AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\";\n-    let n: int = 512;\n     make_repeat_fasta(\"ONE\", \"Homo sapiens alu\", alu, n * 2);\n     make_random_fasta(\"TWO\", \"IUB ambiguity codes\", iub, n * 3);\n     make_random_fasta(\"THREE\", \"Homo sapiens frequency\", homosapiens, n * 5);"}, {"sha": "df6212542849039465819c4d750b7fabda7f6740", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -9,10 +9,13 @@ fn fib(n: int) -> int {\n }\n \n fn main(args: [str]) {\n-    let n = if vec::len(args) == 2u {\n-        option::get(int::from_str(args[1]))\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"40\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"30\"]\n     } else {\n-        30\n+        args\n     };\n+    let n = int::from_str(args[1]).get();\n     io::println(#fmt(\"%d\\n\", fib(n)));\n }"}, {"sha": "e429fa6a1ec4aaf22e0cd039bffb55441d78a2d0", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -140,13 +140,21 @@ fn writer(path: str, writech: comm::chan<comm::chan<line>>, size: uint)\n     }\n }\n \n-fn main(argv: [str]) {\n-    let size = if vec::len(argv) < 2_u { 80u }\n-    else { option::get(uint::from_str(argv[1])) };\n-    let yieldevery = if vec::len(argv) < 3_u { 10_u }\n-    else { option::get(uint::from_str(argv[2])) };\n-    let path = if vec::len(argv) < 4_u { \"\" }\n-    else { argv[3] };\n+fn main(args: [str]) {\n+    let path = if vec::len(args) < 4_u { \"\" }\n+    else { args[3] };\n+\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"4000\", \"10\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"80\", \"10\"]\n+    } else {\n+        args\n+    };\n+\n+    let size = uint::from_str(args[1]).get();\n+    let yieldevery = uint::from_str(args[2]).get();\n+\n     let writep = comm::port();\n     let writech = comm::chan(writep);\n     task::spawn {||"}, {"sha": "9cc506887e48596378fda1771c1e77adf2fa1724", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -14,11 +14,14 @@ native mod libc {\n }\n \n fn main(args: [str]) {\n-    let n = if vec::len(args) == 2u {\n-        option::get(int::from_str(args[1]))\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"4000000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"100000\"]\n     } else {\n-        100000\n+        args\n     };\n+    let n = int::from_str(args[1]).get();\n     let bodies: [Body::props] = NBodySystem::MakeNBodySystem();\n     io::println(#fmt(\"%f\", NBodySystem::energy(bodies)));\n     let mut i: int = 0;"}, {"sha": "4df34984b91143c1fc2d17ccc2c8868029ced6a9", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -78,36 +78,37 @@ fn stress(num_tasks: int) {\n     for results.each {|r| future::get(r); }\n }\n \n-fn main(argv: [str]) {\n-    if vec::len(argv) == 1u {\n-        assert (fib(8) == 21);\n-        log(debug, fib(8));\n+fn main(args: [str]) {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"20\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"8\"]\n     } else {\n-        // Interactive mode! Wooo!!!!\n-        let opts = parse_opts(argv);\n+        args\n+    };\n \n+    let opts = parse_opts(args);\n \n-        if opts.stress {\n-            stress(2);\n-        } else {\n-            let max = option::get(uint::parse_buf(str::bytes(argv[1]),\n-                                                  10u)) as int;\n+    if opts.stress {\n+        stress(2);\n+    } else {\n+        let max = option::get(uint::parse_buf(str::bytes(args[1]),\n+                                              10u)) as int;\n \n-            let num_trials = 10;\n+        let num_trials = 10;\n \n-            let out = io::stdout();\n+        let out = io::stdout();\n \n-            range(1, max + 1) {|n|\n-                range(0, num_trials) {|i|\n-                    let start = time::precise_time_ns();\n-                    let fibn = fib(n);\n-                    let stop = time::precise_time_ns();\n+        range(1, max + 1) {|n|\n+            range(0, num_trials) {|i|\n+                let start = time::precise_time_ns();\n+                let fibn = fib(n);\n+                let stop = time::precise_time_ns();\n \n-                    let elapsed = stop - start;\n+                let elapsed = stop - start;\n \n-                    out.write_line(#fmt[\"%d\\t%d\\t%s\", n, fibn,\n-                                        u64::str(elapsed)]);\n-                }\n+                out.write_line(#fmt[\"%d\\t%d\\t%s\", n, fibn,\n+                                    u64::str(elapsed)]);\n             }\n         }\n     }"}, {"sha": "22b2b332586ed3e74169b7748b95a98e215bd252", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -41,13 +41,16 @@ fn eval_AtA_times_u(u: [const float], AtAu: [mut float]) {\n }\n \n fn main(args: [str]) {\n-\n-    let N = if vec::len(args) == 2u {\n-        option::get(uint::from_str(args[1]))\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"2000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"1000\"]\n     } else {\n-        1000u\n+        args\n     };\n \n+    let N = uint::from_str(args[1]).get();\n+\n     let u = vec::to_mut(vec::from_elem(N, 1.0));\n     let v = vec::to_mut(vec::from_elem(N, 0.0));\n     let mut i = 0u;"}, {"sha": "9d10aa407348fd1abce3cc2bb4500174697deb39", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -38,8 +38,15 @@ fn roundtrip(id: int, p: comm::port<int>, ch: comm::chan<int>) {\n }\n \n fn main(args: [str]) {\n-    let token = if vec::len(args) < 2u { 1000 }\n-                else { option::get(int::from_str(args[1])) };\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"100000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"1000\"]\n+    } else {\n+        args\n+    };\n+\n+    let token = int::from_str(args[1]).get();\n \n     start(token);\n }\n\\ No newline at end of file"}, {"sha": "5080306e4d9312e78048464db6b69b19864c75cd", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -18,7 +18,13 @@ fn check_sequential(min: uint, max: uint, map: smallintmap<uint>) {\n }\n \n fn main(args: [str]) {\n-    let args = if vec::len(args) <= 1u {[\"\", \"10000\", \"50\"]} else {args};\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"100000\", \"50\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"10000\", \"50\"]\n+    } else {\n+        args\n+    };\n     let max = uint::from_str(args[1]).get();\n     let rep = uint::from_str(args[2]).get();\n "}, {"sha": "42fe44e2697c7ca95b5d7a4bdbb150126b22bfc9", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -46,11 +46,15 @@ fn calc(children: uint, parent_ch: comm::chan<msg>) {\n }\n \n fn main(args: [str]) {\n-    let children = if vec::len(args) == 2u {\n-        option::get(uint::from_str(args[1]))\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"100000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"100\"]\n     } else {\n-        100u\n+        args\n     };\n+\n+    let children = uint::from_str(args[1]).get();\n     let port = comm::port();\n     let chan = comm::chan(port);\n     task::spawn {||"}, {"sha": "c3dd93ce1176de16b3af0a26a4d6c1b43e2e0b3a", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -9,10 +9,14 @@ fn f(&&n: uint) {\n fn g() { }\n \n fn main(args: [str]) {\n-    let n =\n-        if vec::len(args) < 2u {\n-            10u\n-        } else { option::get(uint::parse_buf(str::bytes(args[1]), 10u)) };\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"400\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"10\"]\n+    } else {\n+        args\n+    };\n+    let n = uint::from_str(args[1]).get();\n     let mut i = 0u;\n     while i < n { task::spawn {|| f(n); }; i += 1u; }\n }"}, {"sha": "ab684c9a01dcf01e3af3a5d70d2250455da9eba5", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fec4cd8f5ad45e8caea324df7434a82e560ca38/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=4fec4cd8f5ad45e8caea324df7434a82e560ca38", "patch": "@@ -11,7 +11,13 @@ fn f(&&n: uint) {\n }\n \n fn main(args: [str]) {\n-    let n = if vec::len(args) < 2u { 100u }\n-            else { option::get(uint::from_str(args[1])) };\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+        [\"\", \"50000\"]\n+    } else if args.len() <= 1u {\n+        [\"\", \"100\"]\n+    } else {\n+        args\n+    };\n+    let n = uint::from_str(args[1]).get();\n     uint::range(0u, 100u) {|i| task::spawn {|| f(n); };}\n }"}]}