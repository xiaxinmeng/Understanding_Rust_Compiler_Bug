{"sha": "1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMzZkMjE2YmViYzlhZTViMWJmZDJjZDAxM2U3ZTcwNzE5OWNkZjc=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-06T16:50:08Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-06-15T19:41:41Z"}, "message": "Add the interner to parse_sess.", "tree": {"sha": "bc39925f522d9f49baebf161a558df46a12e691d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc39925f522d9f49baebf161a558df46a12e691d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "html_url": "https://github.com/rust-lang/rust/commit/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ded92736290073b6c591c2607ee3d829cb2874", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ded92736290073b6c591c2607ee3d829cb2874", "html_url": "https://github.com/rust-lang/rust/commit/85ded92736290073b6c591c2607ee3d829cb2874"}], "stats": {"total": 151, "additions": 47, "deletions": 104}, "files": [{"sha": "dced049e7e1af84587a78c36ebad28eb0f369790", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -238,15 +238,7 @@ fn load_link(mis: [@ast::meta_item]) -> (option<str>,\n }\n \n fn load_crate(filename: str) -> option<crate> {\n-    let cm = codemap::new_codemap();\n-    let handler = diagnostic::mk_handler(none);\n-    let sess = @{\n-        cm: cm,\n-        mut next_id: 1,\n-        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-        mut chpos: 0u,\n-        mut byte_pos: 0u\n-    };\n+    let sess = parse::new_parse_sess(none);\n     let c = parse::parse_crate_from_crate_file(filename, [], sess);\n \n     let mut name = none;"}, {"sha": "00e1edbdf77299abb1e2d64c73d595f3ac046b04", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -416,15 +416,7 @@ fn check_compiling(filename: str) -> happiness {\n \n fn parse_and_print(code: @str) -> str {\n     let filename = \"tmp.rs\";\n-    let cm = codemap::new_codemap();\n-    let handler = diagnostic::mk_handler(none);\n-    let sess = @{\n-        cm: cm,\n-        mut next_id: 1,\n-        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-        mut chpos: 0u,\n-        mut byte_pos: 0u\n-    };\n+    let sess = parse::new_parse_sess(option::none);\n     write_file(filename, *code);\n     let crate = parse::parse_crate_from_source_str(\n         filename, code, [], sess);\n@@ -566,15 +558,7 @@ fn check_variants(files: [str], cx: context) {\n         }\n \n         log(error, \"check_variants: \" + file);\n-        let cm = codemap::new_codemap();\n-        let handler = diagnostic::mk_handler(none);\n-        let sess = @{\n-            cm: cm,\n-            mut next_id: 1,\n-            span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-            mut chpos: 0u,\n-            mut byte_pos: 0u\n-        };\n+        let sess = parse::new_parse_sess(option::none);\n         let crate =\n             parse::parse_crate_from_source_str(\n                 file,"}, {"sha": "382b81e1c4d297dc62fd3847130925aaa9c9d4f3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -49,6 +49,10 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                   }\n                 }\n               }\n+              /*\n+              mac_invoc_tt(path, body) {\n+                let p = new_parser_from_tt(cx.sess, cx.cfg, )\n+              }*/\n               _ { cx.span_bug(mac.span, \"naked syntactic bit\") }\n             }\n           }"}, {"sha": "cd6fc0be31cde0a3d30630b8f6817712d9ebbb56", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -2,6 +2,8 @@\n import dvec::extensions;\n \n export parse_sess;\n+export new_parse_sess;\n+export new_parse_sess_special_handler;\n export next_node_id;\n export new_parser_from_file;\n export new_parser_etc_from_file;\n@@ -20,16 +22,38 @@ import ast::node_id;\n import util::interner;\n import lexer::{string_reader_as_reader, tt_reader_as_reader,\n                reader, string_reader, tt_reader};\n+import diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n \n type parse_sess = @{\n     cm: codemap::codemap,\n     mut next_id: node_id,\n-    span_diagnostic: diagnostic::span_handler,\n+    span_diagnostic: span_handler,\n+    interner: @interner::interner<@str>,\n     // these two must be kept up to date\n     mut chpos: uint,\n     mut byte_pos: uint\n };\n \n+fn new_parse_sess(demitter: option<emitter>) -> parse_sess {\n+    let cm = codemap::new_codemap();\n+    ret @{cm: cm,\n+          mut next_id: 1,\n+          span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n+          interner: @interner::mk::<@str>({|x|str::hash(*x)},\n+                                          {|x,y|str::eq(*x, *y)}),\n+          mut chpos: 0u, mut byte_pos: 0u};\n+}\n+\n+fn new_parse_sess_special_handler(sh: span_handler, cm: codemap::codemap)\n+    -> parse_sess {\n+    ret @{cm: cm,\n+          mut next_id: 1,\n+          span_diagnostic: sh,\n+          interner: @interner::mk::<@str>({|x|str::hash(*x)},\n+                                          {|x,y|str::eq(*x, *y)}),\n+          mut chpos: 0u, mut byte_pos: 0u};\n+}\n+\n fn parse_crate_from_file(input: str, cfg: ast::crate_cfg, sess: parse_sess) ->\n    @ast::crate {\n     if str::ends_with(input, \".rc\") {\n@@ -139,11 +163,8 @@ fn new_parser_etc_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n     let filemap = codemap::new_filemap_w_substr\n         (name, ss, source, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n-    let itr = @interner::mk::<@str>(\n-        {|x|str::hash(*x)},\n-        {|x,y|str::eq(*x, *y)}\n-    );\n-    let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap, itr);\n+    let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n+                                        sess.interner);\n     ret (parser(sess, cfg, srdr as reader, ftype), srdr);\n }\n \n@@ -166,11 +187,8 @@ fn new_parser_etc_from_file(sess: parse_sess, cfg: ast::crate_cfg, +path: str,\n     let src = @result::unwrap(res);\n     let filemap = codemap::new_filemap(path, src, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n-    let itr = @interner::mk::<@str>(\n-        {|x|str::hash(*x)},\n-        {|x,y|str::eq(*x, *y)}\n-    );\n-    let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap, itr);\n+    let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n+                                        sess.interner);\n     ret (parser(sess, cfg, srdr as reader, ftype), srdr);\n }\n \n@@ -181,8 +199,7 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, +path: str,\n }\n \n fn new_parser_from_tt(sess: parse_sess, cfg: ast::crate_cfg,\n-                      itr: @interner::interner<@str>, tt: ast::token_tree)\n-    -> parser {\n-    let trdr = lexer::new_tt_reader(sess.span_diagnostic, itr, tt);\n+                      tt: ast::token_tree) -> parser {\n+    let trdr = lexer::new_tt_reader(sess.span_diagnostic, sess.interner, tt);\n     ret parser(sess, cfg, trdr as reader, parser::SOURCE_FILE)\n }"}, {"sha": "edda9da0aa8e3ef9e7d1c7474d92758d5c6b76f4", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -508,8 +508,7 @@ fn build_session(sopts: @session::options,\n }\n \n fn build_session_(\n-    sopts: @session::options,\n-    codemap: codemap::codemap,\n+    sopts: @session::options, cm: codemap::codemap,\n     demitter: diagnostic::emitter,\n     span_diagnostic_handler: diagnostic::span_handler\n ) -> session {\n@@ -523,14 +522,9 @@ fn build_session_(\n     @{targ_cfg: target_cfg,\n       opts: sopts,\n       cstore: cstore,\n-      parse_sess: @{\n-          cm: codemap,\n-          mut next_id: 1,\n-          span_diagnostic: span_diagnostic_handler,\n-          mut chpos: 0u,\n-          mut byte_pos: 0u\n-      },\n-      codemap: codemap,\n+      parse_sess:\n+          parse::new_parse_sess_special_handler(span_diagnostic_handler, cm),\n+      codemap: cm,\n       // For a library crate, this is always none\n       mut main_fn: none,\n       span_diagnostic: span_diagnostic_handler,"}, {"sha": "bdf6babfdaaf33f9be6454477151fea6f5f0d2e4", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -1018,20 +1018,6 @@ fn decode_item_ast(par_doc: ebml::doc) -> @ast::item {\n     @ast::deserialize_item(d)\n }\n \n-#[cfg(test)]\n-fn new_parse_sess() -> parse::parse_sess {\n-    let cm = codemap::new_codemap();\n-    let handler = diagnostic::mk_handler(option::none);\n-    let sess = @{\n-        cm: cm,\n-        mut next_id: 1,\n-        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-        mut chpos: 0u,\n-        mut byte_pos: 0u\n-    };\n-    ret sess;\n-}\n-\n #[cfg(test)]\n iface fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg;\n@@ -1044,7 +1030,7 @@ type fake_session = ();\n #[cfg(test)]\n impl of fake_ext_ctxt for fake_session {\n     fn cfg() -> ast::crate_cfg { [] }\n-    fn parse_sess() -> parse::parse_sess { new_parse_sess() }\n+    fn parse_sess() -> parse::parse_sess { parse::new_parse_sess(none) }\n }\n \n #[cfg(test)]"}, {"sha": "4f4ce761e12c0e9e1e37a2e98a08eaa63f7f5330", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -27,15 +27,7 @@ mod test {\n         import syntax::codemap;\n         import syntax::diagnostic;\n \n-        let cm = codemap::new_codemap();\n-        let handler = diagnostic::mk_handler(none);\n-        let parse_sess = @{\n-            cm: cm,\n-            mut next_id: 0,\n-            span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-            mut chpos: 0u,\n-            mut byte_pos: 0u\n-        };\n+        let parse_sess = syntax::parse::new_parse_sess(none);\n         let parser = parse::new_parser_from_source_str(\n             parse_sess, [], \"-\", codemap::fss_none, @source);\n "}, {"sha": "9b0291cd8a1107bc421c0417091cbbe18cde4a7d", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -10,27 +10,14 @@ import syntax::parse;\n \n export from_file, from_str, from_file_sess, from_str_sess;\n \n-fn new_parse_sess() -> parse::parse_sess {\n-    let cm = codemap::new_codemap();\n-    let handler = diagnostic::mk_handler(none);\n-    let sess = @{\n-        cm: cm,\n-        mut next_id: 1,\n-        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-        mut chpos: 0u,\n-        mut byte_pos: 0u\n-    };\n-    ret sess;\n-}\n-\n fn from_file(file: str) -> @ast::crate {\n     parse::parse_crate_from_file(\n-        file, [], new_parse_sess())\n+        file, [], parse::new_parse_sess(none))\n }\n \n fn from_str(source: str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n-        \"-\", @source, [], new_parse_sess())\n+        \"-\", @source, [], parse::new_parse_sess(none))\n }\n \n fn from_file_sess(sess: session::session, file: str) -> @ast::crate {"}, {"sha": "625e3be7ecdad2945fd4c00a6457b384da4c5d9b", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=1e36d216bebc9ae5b1bfd2cd013e7e707199cdf7", "patch": "@@ -11,19 +11,6 @@ import syntax::codemap;\n import syntax::parse;\n import syntax::print::*;\n \n-fn new_parse_sess() -> parse::parse_sess {\n-    let cm = codemap::new_codemap();\n-    let handler = diagnostic::mk_handler(option::none);\n-    let sess = @{\n-        cm: cm,\n-        mut next_id: 1,\n-        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-        mut chpos: 0u,\n-        mut byte_pos: 0u\n-    };\n-    ret sess;\n-}\n-\n iface fake_ext_ctxt {\n     fn cfg() -> ast::crate_cfg;\n     fn parse_sess() -> parse::parse_sess;\n@@ -33,7 +20,7 @@ type fake_session = ();\n \n impl of fake_ext_ctxt for fake_session {\n     fn cfg() -> ast::crate_cfg { [] }\n-    fn parse_sess() -> parse::parse_sess { new_parse_sess() }\n+    fn parse_sess() -> parse::parse_sess { parse::new_parse_sess(none) }\n }\n \n fn mk_ctxt() -> fake_ext_ctxt {"}]}