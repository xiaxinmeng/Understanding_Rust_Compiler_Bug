{"sha": "7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZGMxZmIyZTQwYmM4ZmM1ZjFmNTllYjNiOWQxODA2MTliY2IyMTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-25T21:14:18Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-05-25T05:52:09Z"}, "message": "Hygienize lifetimes.", "tree": {"sha": "3eafc3d795855f4eee2360daa08ac0144aa3104d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eafc3d795855f4eee2360daa08ac0144aa3104d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "html_url": "https://github.com/rust-lang/rust/commit/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8497061a49cde5b70c416f2c964d1f252d82a7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8497061a49cde5b70c416f2c964d1f252d82a7a0", "html_url": "https://github.com/rust-lang/rust/commit/8497061a49cde5b70c416f2c964d1f252d82a7a0"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "5ef278207ed5e8a9f78fb0890bc35bf1199dae22", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -985,7 +985,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n         hir::Lifetime {\n             id: self.lower_node_id(l.id),\n-            name: l.name,\n+            name: self.lower_ident(l.ident),\n             span: l.span,\n         }\n     }"}, {"sha": "f834c744f95ee3bff8887f963f65855e392f1bf3", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -283,7 +283,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n     fn visit_lifetime_def(&mut self, def: &'a LifetimeDef) {\n         self.create_def(def.lifetime.id,\n-                        DefPathData::LifetimeDef(def.lifetime.name.as_str()),\n+                        DefPathData::LifetimeDef(def.lifetime.ident.name.as_str()),\n                         REGULAR_SPACE);\n     }\n "}, {"sha": "500e95a8a778ee46d99b7342eff8c77268fa0464", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -162,7 +162,7 @@ impl Lifetime {\n     }\n \n     pub fn is_static(&self) -> bool {\n-        self.name == keywords::StaticLifetime.name()\n+        self.name == \"'static\"\n     }\n }\n "}, {"sha": "1a07423bcbc0f88d44224be61db72b5b53a53d92", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -26,7 +26,6 @@ use std::mem::replace;\n use syntax::ast;\n use syntax::attr;\n use syntax::ptr::P;\n-use syntax::symbol::keywords;\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n use util::nodemap::{NodeMap, NodeSet, FxHashSet, FxHashMap, DefIdMap};\n@@ -746,7 +745,7 @@ fn object_lifetime_defaults_for_item(hir_map: &Map, generics: &hir::Generics)\n         match set {\n             Set1::Empty => Set1::Empty,\n             Set1::One(name) => {\n-                if name == keywords::StaticLifetime.name() {\n+                if name == \"'static\" {\n                     Set1::One(Region::Static)\n                 } else {\n                     generics.lifetimes.iter().enumerate().find(|&(_, def)| {"}, {"sha": "79d90210d47f78264425c5e59d828ff3b7cd7621", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -103,11 +103,11 @@ impl<'a> AstValidator<'a> {\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_lifetime(&mut self, lt: &'a Lifetime) {\n-        if lt.name == \"'_\" {\n+        if lt.ident.name == \"'_\" {\n             self.session.add_lint(lint::builtin::LIFETIME_UNDERSCORE,\n                                   lt.id,\n                                   lt.span,\n-                                  format!(\"invalid lifetime name `{}`\", lt.name));\n+                                  format!(\"invalid lifetime name `{}`\", lt.ident));\n         }\n \n         visit::walk_lifetime(self, lt)"}, {"sha": "d83740936d5d4dc6ceba451a7ce7add9b4a61fbf", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -828,7 +828,7 @@ fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n     if !generics.lifetimes.is_empty() || !generics.ty_params.is_empty() {\n         sig.push('<');\n         sig.push_str(&generics.lifetimes.iter()\n-                              .map(|l| l.lifetime.name.to_string())\n+                              .map(|l| l.lifetime.ident.name.to_string())\n                               .collect::<Vec<_>>()\n                               .join(\", \"));\n         if !generics.lifetimes.is_empty() {"}, {"sha": "2eb39bc26b5cb929b6223423c3067f58de39c8c9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -37,7 +37,7 @@ use std::u32;\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n-    pub name: Name\n+    pub ident: Ident,\n }\n \n impl fmt::Debug for Lifetime {"}, {"sha": "2a5de3c7382a334984d342b4e9cac5881eb45b88", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -206,7 +206,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n         });\n \n-    let static_ = ecx.lifetime(span, ecx.name_of(\"'static\"));\n+    let static_ = ecx.lifetime(span, Ident::from_str(\"'static\"));\n     let ty_str = ecx.ty_rptr(\n         span,\n         ecx.ty_ident(span, ecx.ident_of(\"str\")),"}, {"sha": "a4580ea3939fbb23803fffdb62e2a760c6e23c98", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -76,10 +76,10 @@ pub trait AstBuilder {\n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef;\n     fn typarambound(&self, path: ast::Path) -> ast::TyParamBound;\n-    fn lifetime(&self, span: Span, ident: ast::Name) -> ast::Lifetime;\n+    fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime;\n     fn lifetime_def(&self,\n                     span: Span,\n-                    name: ast::Name,\n+                    ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n                     -> ast::LifetimeDef;\n@@ -478,19 +478,19 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::TraitTyParamBound(self.poly_trait_ref(path.span, path), ast::TraitBoundModifier::None)\n     }\n \n-    fn lifetime(&self, span: Span, name: ast::Name) -> ast::Lifetime {\n-        ast::Lifetime { id: ast::DUMMY_NODE_ID, span: span, name: name }\n+    fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime {\n+        ast::Lifetime { id: ast::DUMMY_NODE_ID, span: span, ident: ident }\n     }\n \n     fn lifetime_def(&self,\n                     span: Span,\n-                    name: ast::Name,\n+                    ident: ast::Ident,\n                     attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n                     -> ast::LifetimeDef {\n         ast::LifetimeDef {\n             attrs: attrs.into(),\n-            lifetime: self.lifetime(span, name),\n+            lifetime: self.lifetime(span, ident),\n             bounds: bounds\n         }\n     }"}, {"sha": "4c6cf49a8db43d1b14981a263e2b4507f24672ac", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -694,7 +694,7 @@ pub fn noop_fold_ty_params<T: Folder>(tps: Vec<TyParam>, fld: &mut T) -> Vec<TyP\n pub fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime {\n     Lifetime {\n         id: fld.new_id(l.id),\n-        name: l.name,\n+        ident: fld.fold_ident(l.ident),\n         span: fld.new_span(l.span)\n     }\n }"}, {"sha": "8d7c8c5248bb9e69977a8184dc6a9e623aeb99c7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -1958,7 +1958,7 @@ impl<'a> Parser<'a> {\n             token::Lifetime(ident) => {\n                 let ident_span = self.span;\n                 self.bump();\n-                Lifetime { name: ident.name, span: ident_span, id: ast::DUMMY_NODE_ID }\n+                Lifetime { ident: ident, span: ident_span, id: ast::DUMMY_NODE_ID }\n             }\n             _ => self.span_bug(self.span, \"not a lifetime\")\n         }"}, {"sha": "073ededcb0ce777cdd388557f8fb463e4b8d8606", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -2764,7 +2764,7 @@ impl<'a> State<'a> {\n                           lifetime: &ast::Lifetime)\n                           -> io::Result<()>\n     {\n-        self.print_name(lifetime.name)\n+        self.print_name(lifetime.ident.name)\n     }\n \n     pub fn print_lifetime_bounds(&mut self,"}, {"sha": "837c3eb0100c60ed1859d706d6c387a0c0a78ab4", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -591,7 +591,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     let struct_type = ecx.ty_path(ecx.path(sp, vec![ecx.ident_of(\"self\"),\n                                                     ecx.ident_of(\"test\"),\n                                                     ecx.ident_of(\"TestDescAndFn\")]));\n-    let static_lt = ecx.lifetime(sp, keywords::StaticLifetime.name());\n+    let static_lt = ecx.lifetime(sp, keywords::StaticLifetime.ident());\n     // &'static [self::test::TestDescAndFn]\n     let static_type = ecx.ty_rptr(sp,\n                                   ecx.ty(sp, ast::TyKind::Slice(struct_type)),"}, {"sha": "18a0949af0eb136c5a25dabba2417dbc5840fe5e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -195,7 +195,7 @@ pub fn walk_local<'a, V: Visitor<'a>>(visitor: &mut V, local: &'a Local) {\n }\n \n pub fn walk_lifetime<'a, V: Visitor<'a>>(visitor: &mut V, lifetime: &'a Lifetime) {\n-    visitor.visit_name(lifetime.span, lifetime.name);\n+    visitor.visit_ident(lifetime.span, lifetime.ident);\n }\n \n pub fn walk_lifetime_def<'a, V: Visitor<'a>>(visitor: &mut V, lifetime_def: &'a LifetimeDef) {"}, {"sha": "9c89f99cbb5b3d6d652551d07499349bba8f4f0f", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -118,14 +118,14 @@ pub fn nil_ty<'r>() -> Ty<'r> {\n \n fn mk_lifetime(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n     match *lt {\n-        Some(ref s) => Some(cx.lifetime(span, cx.ident_of(*s).name)),\n+        Some(s) => Some(cx.lifetime(span, Ident::from_str(s))),\n         None => None,\n     }\n }\n \n fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Vec<ast::Lifetime> {\n     match *lt {\n-        Some(ref s) => vec![cx.lifetime(span, cx.ident_of(*s).name)],\n+        Some(s) => vec![cx.lifetime(span, Ident::from_str(s))],\n         None => vec![],\n     }\n }\n@@ -243,11 +243,11 @@ impl<'a> LifetimeBounds<'a> {\n                        -> Generics {\n         let lifetimes = self.lifetimes\n             .iter()\n-            .map(|&(ref lt, ref bounds)| {\n+            .map(|&(lt, ref bounds)| {\n                 let bounds = bounds.iter()\n-                    .map(|b| cx.lifetime(span, cx.ident_of(*b).name))\n+                    .map(|b| cx.lifetime(span, Ident::from_str(b)))\n                     .collect();\n-                cx.lifetime_def(span, cx.ident_of(*lt).name, vec![], bounds)\n+                cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds)\n             })\n             .collect();\n         let ty_params = self.bounds\n@@ -277,7 +277,7 @@ pub fn get_explicit_self(cx: &ExtCtxt,\n                 respan(span,\n                        match *ptr {\n                            Borrowed(ref lt, mutbl) => {\n-                               let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s).name));\n+                               let lt = lt.map(|s| cx.lifetime(span, Ident::from_str(s)));\n                                SelfKind::Region(lt, mutbl)\n                            }\n                            Raw(_) => {"}, {"sha": "affebbabbbda4d22398157c6513ea5d7bf933860", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -13,7 +13,7 @@\n // interface.\n //\n \n-use syntax::ast;\n+use syntax::ast::{self, Ident};\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n@@ -39,10 +39,9 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n                                      cx.std_path(&[\"option\", \"Option\", \"None\"]),\n                                      Vec::new(),\n                                      vec![cx.ty_rptr(sp,\n-                                                     cx.ty_ident(sp, cx.ident_of(\"str\")),\n+                                                     cx.ty_ident(sp, Ident::from_str(\"str\")),\n                                                      Some(cx.lifetime(sp,\n-                                                                      cx.ident_of(\"'static\")\n-                                                                          .name)),\n+                                                                      Ident::from_str(\"'static\"))),\n                                                      ast::Mutability::Immutable)],\n                                      Vec::new()))\n         }"}, {"sha": "24c1dfe289b1ed15c6494b77f28fd286a12a64e8", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=7fdc1fb2e40bc8fc5f1f59eb3b9d180619bcb210", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         let sp = piece_ty.span;\n         let ty = ecx.ty_rptr(sp,\n                              ecx.ty(sp, ast::TyKind::Slice(piece_ty)),\n-                             Some(ecx.lifetime(sp, keywords::StaticLifetime.name())),\n+                             Some(ecx.lifetime(sp, keywords::StaticLifetime.ident())),\n                              ast::Mutability::Immutable);\n         let slice = ecx.expr_vec_slice(sp, pieces);\n         // static instead of const to speed up codegen by not requiring this to be inlined\n@@ -536,7 +536,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // First, build up the static array which will become our precompiled\n         // format \"string\"\n-        let static_lifetime = self.ecx.lifetime(self.fmtsp, keywords::StaticLifetime.name());\n+        let static_lifetime = self.ecx.lifetime(self.fmtsp, keywords::StaticLifetime.ident());\n         let piece_ty = self.ecx.ty_rptr(self.fmtsp,\n                                         self.ecx.ty_ident(self.fmtsp, self.ecx.ident_of(\"str\")),\n                                         Some(static_lifetime),"}]}