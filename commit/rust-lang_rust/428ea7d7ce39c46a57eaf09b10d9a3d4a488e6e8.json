{"sha": "428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGVhN2Q3Y2UzOWM0NmE1N2VhZjA5YjEwZDlhM2Q0YTQ4OGU2ZTg=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-07-31T10:44:20Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-07-31T10:44:20Z"}, "message": "Revert atomicrmw {max, min, umax, umin}", "tree": {"sha": "7ebc02fa6483314fb36a077140453540e3e97aa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ebc02fa6483314fb36a077140453540e3e97aa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8", "html_url": "https://github.com/rust-lang/rust/commit/428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6534b4d4ce87940954b017bd27dc4e5fa7e59703", "url": "https://api.github.com/repos/rust-lang/rust/commits/6534b4d4ce87940954b017bd27dc4e5fa7e59703", "html_url": "https://github.com/rust-lang/rust/commit/6534b4d4ce87940954b017bd27dc4e5fa7e59703"}], "stats": {"total": 82, "additions": 0, "deletions": 82}, "files": [{"sha": "6f66cdbe8a78b851c4b113c42d938d9875753f38", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=428ea7d7ce39c46a57eaf09b10d9a3d4a488e6e8", "patch": "@@ -205,18 +205,6 @@ impl AtomicInt {\n     pub fn fetch_sub(&mut self, val: int, order: Ordering) -> int {\n         unsafe { atomic_sub(&mut self.v, val, order) }\n     }\n-\n-    /// Returns the old value\n-    #[inline]\n-    pub fn fetch_min(&mut self, val: int, order: Ordering) -> int {\n-        unsafe { atomic_min(&mut self.v, val, order) }\n-    }\n-\n-    /// Returns the old value\n-    #[inline]\n-    pub fn fetch_max(&mut self, val: int, order: Ordering) -> int {\n-        unsafe { atomic_max(&mut self.v, val, order) }\n-    }\n }\n \n impl AtomicUint {\n@@ -255,18 +243,6 @@ impl AtomicUint {\n     pub fn fetch_sub(&mut self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_sub(&mut self.v, val, order) }\n     }\n-\n-    /// Returns the old value\n-    #[inline]\n-    pub fn fetch_min(&mut self, val: uint, order: Ordering) -> uint {\n-        unsafe { atomic_umin(&mut self.v, val, order) }\n-    }\n-\n-    /// Returns the old value\n-    #[inline]\n-    pub fn fetch_max(&mut self, val: uint, order: Ordering) -> uint {\n-        unsafe { atomic_umax(&mut self.v, val, order) }\n-    }\n }\n \n impl<T> AtomicPtr<T> {\n@@ -515,64 +491,6 @@ pub unsafe fn atomic_xor<T>(dst: &mut T, val: T, order: Ordering) -> T {\n }\n \n \n-#[inline]\n-pub unsafe fn atomic_max<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_max_acq(dst, val),\n-        Release => intrinsics::atomic_max_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_max_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_max_relaxed(dst, val),\n-        _       => intrinsics::atomic_max(dst, val)\n-    })\n-}\n-\n-\n-#[inline]\n-pub unsafe fn atomic_min<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_min_acq(dst, val),\n-        Release => intrinsics::atomic_min_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_min_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_min_relaxed(dst, val),\n-        _       => intrinsics::atomic_min(dst, val)\n-    })\n-}\n-\n-#[inline]\n-pub unsafe fn atomic_umax<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_umax_acq(dst, val),\n-        Release => intrinsics::atomic_umax_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_umax_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_umax_relaxed(dst, val),\n-        _       => intrinsics::atomic_umax(dst, val)\n-    })\n-}\n-\n-\n-#[inline]\n-pub unsafe fn atomic_umin<T>(dst: &mut T, val: T, order: Ordering) -> T {\n-    let dst = cast::transmute(dst);\n-    let val = cast::transmute(val);\n-\n-    cast::transmute(match order {\n-        Acquire => intrinsics::atomic_umin_acq(dst, val),\n-        Release => intrinsics::atomic_umin_rel(dst, val),\n-        AcqRel  => intrinsics::atomic_umin_acqrel(dst, val),\n-        Relaxed => intrinsics::atomic_umin_relaxed(dst, val),\n-        _       => intrinsics::atomic_umin(dst, val)\n-    })\n-}\n-\n /**\n  * An atomic fence.\n  *"}]}