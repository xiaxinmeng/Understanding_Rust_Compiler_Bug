{"sha": "144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NGQxYzIxNzE1MWJiYjZmZWE2YTkzYTIyZTlkYzliZmFiYWU3N2Y=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-26T16:20:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-26T16:20:32Z"}, "message": "Review nits.", "tree": {"sha": "de30994c844e4c28ecd00cc77f5544c06a6705dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de30994c844e4c28ecd00cc77f5544c06a6705dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "html_url": "https://github.com/rust-lang/rust/commit/144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68b1ac98744b8e03bbcc5ab38f3afbd04f1ec097", "url": "https://api.github.com/repos/rust-lang/rust/commits/68b1ac98744b8e03bbcc5ab38f3afbd04f1ec097", "html_url": "https://github.com/rust-lang/rust/commit/68b1ac98744b8e03bbcc5ab38f3afbd04f1ec097"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "c945de8f1e1dc56020a9449523fa0cd1f0fe1c56", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "patch": "@@ -393,9 +393,6 @@ pub fn run_compiler(\n \n             queries.ongoing_codegen()?;\n \n-            // Drop GlobalCtxt after starting codegen to free memory\n-            mem::drop(queries.global_ctxt()?.take());\n-\n             if sess.opts.debugging_opts.print_type_sizes {\n                 sess.code_stats.print_type_sizes();\n             }"}, {"sha": "3b03cfc12bc11c2840e597ef40623034702b75c7", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "patch": "@@ -317,7 +317,7 @@ impl Linker {\n \n impl Compiler {\n     pub fn enter<F, T>(&self, f: F) -> T\n-        where F: for<'q> FnOnce(&'q Queries<'_>) -> T\n+        where F: FnOnce(&Queries<'_>) -> T\n     {\n         let queries = Queries::new(&self);\n         f(&queries)\n@@ -345,9 +345,6 @@ impl Compiler {\n \n             queries.ongoing_codegen()?;\n \n-            // Drop GlobalCtxt after starting codegen to free memory.\n-            mem::drop(queries.global_ctxt()?.take());\n-\n             let linker = queries.linker()?;\n             Ok(Some(linker))\n         })?;"}, {"sha": "7d1f89079f8081aa85dd0d28255df6d4f3361bd4", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "patch": "@@ -343,7 +343,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         registry: rustc_driver::diagnostics_registry(),\n     };\n \n-    interface::run_compiler_in_existing_thread_pool(config, |compiler| { compiler.enter(|queries| {\n+    interface::run_compiler_in_existing_thread_pool(config, |compiler| compiler.enter(|queries| {\n         let sess = compiler.session();\n \n         // We need to hold on to the complete resolver, so we cause everything to be\n@@ -487,7 +487,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n             (krate, ctxt.renderinfo.into_inner(), render_options)\n         })\n-    }) })\n+    }))\n }\n \n /// `DefId` or parameter index (`ty::ParamTy.index`) of a synthetic type parameter"}, {"sha": "44d3dac16606b863a156614c2f2b9f62217db2ae", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144d1c217151bbb6fea6a93a22e9dc9bfabae77f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=144d1c217151bbb6fea6a93a22e9dc9bfabae77f", "patch": "@@ -85,7 +85,7 @@ pub fn run(options: Options) -> i32 {\n     let mut test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n \n-    let tests = interface::run_compiler(config, |compiler| { compiler.enter(|queries| {\n+    let tests = interface::run_compiler(config, |compiler| compiler.enter(|queries| {\n         let lower_to_hir = queries.lower_to_hir()?;\n \n         let mut opts = scrape_test_config(lower_to_hir.peek().0.borrow().krate());\n@@ -119,7 +119,7 @@ pub fn run(options: Options) -> i32 {\n \n         let ret : Result<_, ErrorReported> = Ok(collector.tests);\n         ret\n-    }) }).expect(\"compiler aborted in rustdoc!\");\n+    })).expect(\"compiler aborted in rustdoc!\");\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n "}]}