{"sha": "d060e7df444923a015df58295fd1bc2a7150a807", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjBlN2RmNDQ0OTIzYTAxNWRmNTgyOTVmZDFiYzJhNzE1MGE4MDc=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T15:53:55Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T15:53:55Z"}, "message": "Add no_force to query macro and move some queries over", "tree": {"sha": "ff2257b996d81326371c5951b904018916da4b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2257b996d81326371c5951b904018916da4b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d060e7df444923a015df58295fd1bc2a7150a807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d060e7df444923a015df58295fd1bc2a7150a807", "html_url": "https://github.com/rust-lang/rust/commit/d060e7df444923a015df58295fd1bc2a7150a807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d060e7df444923a015df58295fd1bc2a7150a807/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b440041a19d3f7f49ede32ae26e0e1de865cf041", "url": "https://api.github.com/repos/rust-lang/rust/commits/b440041a19d3f7f49ede32ae26e0e1de865cf041", "html_url": "https://github.com/rust-lang/rust/commit/b440041a19d3f7f49ede32ae26e0e1de865cf041"}], "stats": {"total": 136, "additions": 71, "deletions": 65}, "files": [{"sha": "a4950c01162ee19a6b20d2f89941b13fc9baee48", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d060e7df444923a015df58295fd1bc2a7150a807", "patch": "@@ -538,7 +538,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [anon] TraitSelect,\n \n     [] ParamEnv(DefId),\n-    [] Environment(DefId),\n     [] DescribeDef(DefId),\n \n     // FIXME(mw): DefSpans are not really inputs since they are derived from\n@@ -661,9 +660,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n \n     [input] Features,\n \n-    [] ProgramClausesFor(DefId),\n-    [] ProgramClausesForEnv(traits::Environment<'tcx>),\n-    [] WasmImportModuleMap(CrateNum),\n     [] ForeignModules(CrateNum),\n \n     [] UpstreamMonomorphizations(CrateNum),"}, {"sha": "361d812900232cccbdc6fab7bf9d3e92a12f0c04", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=d060e7df444923a015df58295fd1bc2a7150a807", "patch": "@@ -2,8 +2,9 @@ use crate::ty::query::QueryDescription;\n use crate::ty::query::queries;\n use crate::ty::TyCtxt;\n use crate::ty;\n-use crate::hir::def_id::CrateNum;\n+use crate::hir::def_id::{DefId, CrateNum};\n use crate::dep_graph::SerializedDepNodeIndex;\n+use crate::traits;\n use std::borrow::Cow;\n \n // Each of these queries corresponds to a function pointer field in the\n@@ -106,4 +107,26 @@ rustc_queries! {\n             }\n         }\n     }\n+\n+    TypeChecking {\n+        query program_clauses_for(_: DefId) -> Clauses<'tcx> {\n+            desc { \"generating chalk-style clauses\" }\n+        }\n+\n+        query program_clauses_for_env(_: traits::Environment<'tcx>) -> Clauses<'tcx> {\n+            no_force\n+            desc { \"generating chalk-style clauses for environment\" }\n+        }\n+\n+        // Get the chalk-style environment of the given item.\n+        query environment(_: DefId) -> traits::Environment<'tcx> {\n+            desc { \"return a chalk-style environment\" }\n+        }\n+    }\n+\n+    Linking {\n+        query wasm_import_module_map(_: CrateNum) -> Lrc<FxHashMap<DefId, String>> {\n+            desc { \"wasm import module map\" }\n+        }\n+    }\n }"}, {"sha": "72fb649a9466fb45948c56013bdc43eae8ade0b5", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=d060e7df444923a015df58295fd1bc2a7150a807", "patch": "@@ -916,33 +916,9 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n-        \"generating chalk-style clauses\".into()\n-    }\n-}\n-\n-impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for_env<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: traits::Environment<'tcx>) -> Cow<'static, str> {\n-        \"generating chalk-style clauses for environment\".into()\n-    }\n-}\n-\n-impl<'tcx> QueryDescription<'tcx> for queries::environment<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n-        \"return a chalk-style environment\".into()\n-    }\n-}\n-\n-impl<'tcx> QueryDescription<'tcx> for queries::wasm_import_module_map<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"wasm import module map\".into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::dllimport_foreign_items<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"wasm import module map\".into()\n+        \"dllimport_foreign_items\".into()\n     }\n }\n "}, {"sha": "4cfddf08461f84d0a5fe17afe8fcc23bc9944591", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=d060e7df444923a015df58295fd1bc2a7150a807", "patch": "@@ -683,22 +683,6 @@ rustc_query_append! { [define_queries!][ <'tcx>\n \n         [] fn features_query: features_node(CrateNum) -> Lrc<feature_gate::Features>,\n     },\n-\n-    TypeChecking {\n-        [] fn program_clauses_for: ProgramClausesFor(DefId) -> Clauses<'tcx>,\n-\n-        [] fn program_clauses_for_env: ProgramClausesForEnv(\n-            traits::Environment<'tcx>\n-        ) -> Clauses<'tcx>,\n-\n-        // Get the chalk-style environment of the given item.\n-        [] fn environment: Environment(DefId) -> traits::Environment<'tcx>,\n-    },\n-\n-    Linking {\n-        [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)\n-            -> Lrc<FxHashMap<DefId, String>>,\n-    },\n ]}\n \n //////////////////////////////////////////////////////////////////////"}, {"sha": "331f68c11d0ace3767ba4be1d9965c2cb9ed4ec8", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=d060e7df444923a015df58295fd1bc2a7150a807", "patch": "@@ -1240,11 +1240,7 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::TypeOpNormalizeFnSig |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::MethodAutoderefSteps |\n-        DepKind::InstanceDefSizeEstimate |\n-        DepKind::ProgramClausesForEnv |\n-\n-        // This one should never occur in this context\n-        DepKind::Null => {\n+        DepKind::InstanceDefSizeEstimate => {\n             bug!(\"force_from_dep_node() - Encountered {:?}\", dep_node)\n         }\n \n@@ -1311,7 +1307,6 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::CheckMatch => { force!(check_match, def_id!()); }\n \n         DepKind::ParamEnv => { force!(param_env, def_id!()); }\n-        DepKind::Environment => { force!(environment, def_id!()); }\n         DepKind::DescribeDef => { force!(describe_def, def_id!()); }\n         DepKind::DefSpan => { force!(def_span, def_id!()); }\n         DepKind::LookupStability => { force!(lookup_stability, def_id!()); }\n@@ -1419,8 +1414,6 @@ pub fn force_from_dep_node<'tcx>(\n \n         DepKind::Features => { force!(features_query, LOCAL_CRATE); }\n \n-        DepKind::ProgramClausesFor => { force!(program_clauses_for, def_id!()); }\n-        DepKind::WasmImportModuleMap => { force!(wasm_import_module_map, krate!()); }\n         DepKind::ForeignModules => { force!(foreign_modules, krate!()); }\n \n         DepKind::UpstreamMonomorphizations => {"}, {"sha": "90bd46d03506246c232ce34b0a6c75e0ad0d543d", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d060e7df444923a015df58295fd1bc2a7150a807/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=d060e7df444923a015df58295fd1bc2a7150a807", "patch": "@@ -45,6 +45,9 @@ enum QueryModifier {\n \n     /// Don't hash the result, instead just mark a query red if it runs\n     NoHash,\n+\n+    /// Don't force the query\n+    NoForce,\n }\n \n impl Parse for QueryModifier {\n@@ -94,6 +97,8 @@ impl Parse for QueryModifier {\n             Ok(QueryModifier::FatalCycle)\n         } else if modifier == \"no_hash\" {\n             Ok(QueryModifier::NoHash)\n+        } else if modifier == \"no_force\" {\n+            Ok(QueryModifier::NoForce)\n         } else {\n             Err(Error::new(modifier.span(), \"unknown query modifier\"))\n         }\n@@ -194,6 +199,9 @@ struct QueryModifiers {\n \n     /// Don't hash the result, instead just mark a query red if it runs\n     no_hash: bool,\n+\n+    /// Don't force the query\n+    no_force: bool,\n }\n \n /// Process query modifiers into a struct, erroring on duplicates\n@@ -203,6 +211,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     let mut desc = None;\n     let mut fatal_cycle = false;\n     let mut no_hash = false;\n+    let mut no_force = false;\n     for modifier in query.modifiers.0.drain(..) {\n         match modifier {\n             QueryModifier::LoadCached(tcx, id, block) => {\n@@ -235,6 +244,12 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 }\n                 no_hash = true;\n             }\n+            QueryModifier::NoForce => {\n+                if no_force {\n+                    panic!(\"duplicate modifier `no_force` for query `{}`\", query.name);\n+                }\n+                no_force = true;\n+            }\n         }\n     }\n     QueryModifiers {\n@@ -243,6 +258,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n         desc,\n         fatal_cycle,\n         no_hash,\n+        no_force,\n     }\n }\n \n@@ -329,6 +345,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let mut query_description_stream = quote! {};\n     let mut dep_node_def_stream = quote! {};\n     let mut dep_node_force_stream = quote! {};\n+    let mut no_force_queries = Vec::new();\n \n     for group in groups.0 {\n         let mut group_stream = quote! {};\n@@ -364,29 +381,46 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 [#attribute_stream] fn #name: #name(#arg) #result,\n             });\n \n-            add_query_description_impl(&query, modifiers, &mut query_description_stream);\n-\n             // Create a dep node for the query\n             dep_node_def_stream.extend(quote! {\n                 [] #name(#arg),\n             });\n \n-            // Add a match arm to force the query given the dep node\n-            dep_node_force_stream.extend(quote! {\n-                DepKind::#name => {\n-                    if let Some(key) = RecoverKey::recover($tcx, $dep_node) {\n-                        force_ex!($tcx, #name, key);\n-                    } else {\n-                        return false;\n+            if modifiers.no_force {\n+                no_force_queries.push(name.clone());\n+            } else {\n+                // Add a match arm to force the query given the dep node\n+                dep_node_force_stream.extend(quote! {\n+                    DepKind::#name => {\n+                        if let Some(key) = RecoverKey::recover($tcx, $dep_node) {\n+                            force_ex!($tcx, #name, key);\n+                        } else {\n+                            return false;\n+                        }\n                     }\n-                }\n-            });\n+                });\n+            }\n+            \n+            add_query_description_impl(&query, modifiers, &mut query_description_stream);\n         }\n         let name = &group.name;\n         query_stream.extend(quote! {\n             #name { #group_stream },\n         });\n     }\n+\n+    // Add an arm for the no force queries to panic when trying to force them\n+    for query in no_force_queries {\n+        dep_node_force_stream.extend(quote! {\n+            DepKind::#query |\n+        });\n+    }\n+    dep_node_force_stream.extend(quote! {\n+        DepKind::Null => {\n+            bug!(\"Cannot force dep node: {:?}\", $dep_node)\n+        }\n+    });\n+\n     TokenStream::from(quote! {\n         macro_rules! rustc_query_append {\n             ([$($macro:tt)*][$($other:tt)*]) => {"}]}