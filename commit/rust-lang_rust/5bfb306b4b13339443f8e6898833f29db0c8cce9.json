{"sha": "5bfb306b4b13339443f8e6898833f29db0c8cce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZmIzMDZiNGIxMzMzOTQ0M2Y4ZTY4OTg4MzNmMjlkYjBjOGNjZTk=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-21T09:42:28Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-21T09:53:15Z"}, "message": "Explain how Clippy works", "tree": {"sha": "c0379e07238cb9860e680ef519d03c68dbbc1f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0379e07238cb9860e680ef519d03c68dbbc1f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfb306b4b13339443f8e6898833f29db0c8cce9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa2woMAAoJELb6Bqbg4mZbRl4P/A8DKE+r59UkjN1ZpT6eUMWF\nI/65cX9izLgWttN36gsERTBEwJosHPhRwQDpNTkWeBu4AbN7HPXKaHiKm4fOgxdM\nrFbitTL23k83iWWWqhfqZs66b90gpbv6E96BrsKlQf9KKSFxDpFwCiVXECj2poPx\nDiM6C9fHVept2jF6Q6fZMTxerclS5Hg3f7KGwseDYwBWXtQv2jl463CTNQHleTbC\nrgfdYRlHwJcvID5UbQo26yXBJwWIo7vVJk/GhtDQBJBL5Z8ZeLhhBuQtRzytfS1m\ngVL0AXN8NC4cTBEEdOWb2uu82/+ElxEBqH8+TslDOW+vYUz3P4gAh20GiktlGrEN\nzHE4Xo/GKNIpWE1/KO7cjZfuMcm3lpvPoA6pTO/HovKofTGaCX7sJ3bcU4w4bOm2\nGj7DZQSCS5F7WcjNyga5VNxtYuNL4Ve+WI8ybzT2q1JZSIQrgWI3wcQQtppDqxwD\nbOdiNSMeYzWA6kgneFx7Un5fpbUNDN082MsI//q0UA8GmUbjuRwRbnU0v7k6hibE\neuWqRtgqivBkhuPZOm2K6FWMBdp/Us9DKMjRYjYo0WVf9TYhz+1LFS79S9F/8mb7\npNvCK4qX4AzvKI1bU8xNyhyvGWjjDeE7beF8W9vDZKSERFWxgke904zO0PgHKgRt\nVSbwLRxWhMwBS242gXBC\n=mMbL\n-----END PGP SIGNATURE-----", "payload": "tree c0379e07238cb9860e680ef519d03c68dbbc1f38\nparent 475959d90596b26de58f5f7800dcac834ae3e49d\nauthor Philipp Hansch <dev@phansch.net> 1524303748 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1524304395 +0200\n\nExplain how Clippy works\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfb306b4b13339443f8e6898833f29db0c8cce9", "html_url": "https://github.com/rust-lang/rust/commit/5bfb306b4b13339443f8e6898833f29db0c8cce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfb306b4b13339443f8e6898833f29db0c8cce9/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475959d90596b26de58f5f7800dcac834ae3e49d", "url": "https://api.github.com/repos/rust-lang/rust/commits/475959d90596b26de58f5f7800dcac834ae3e49d", "html_url": "https://github.com/rust-lang/rust/commit/475959d90596b26de58f5f7800dcac834ae3e49d"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "6a9f749e65a2f9de01e5dbcb4b42594327ab9957", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5bfb306b4b13339443f8e6898833f29db0c8cce9/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/5bfb306b4b13339443f8e6898833f29db0c8cce9/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=5bfb306b4b13339443f8e6898833f29db0c8cce9", "patch": "@@ -147,6 +147,55 @@ enabled as a plugin:\n #![plugin(clippy)]\n ```\n \n+### How Clippy works\n+\n+Clippy is a [rustc compiler plugin][compiler_plugin]. The main entry point is at [`src/lib.rs`][main_entry]. In there, the lint registration is delegated to the [`clippy_lints`][lint_crate] crate.\n+\n+[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers them with the rustc plugin registry. For example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n+\n+```rust\n+// ./clippy_lints/src/lib.rs\n+\n+// ...\n+pub mod else_if_without_else;\n+// ...\n+\n+pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n+    // ...\n+    reg.register_early_lint_pass(box else_if_without_else::ElseIfWithoutElse);\n+    // ...\n+\n+    reg.register_lint_group(\"clippy_restriction\", vec![\n+        // ...\n+        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+        // ...\n+    ]);\n+}\n+```\n+\n+The [`rustc_plugin::PluginRegistry`][plugin_registry] provides two methods to register lints: [register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].\n+Both take an object that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in every single lint. \n+\n+```rust\n+// ./clippy_lints/src/else_if_without_else.rs\n+\n+use rustc::lint::*;\n+\n+// ...\n+\n+pub struct ElseIfWithoutElse;\n+\n+// ...\n+\n+impl EarlyLintPass for ElseIfWithoutElse {\n+    // ... the functions needed, to make the lint work\n+}\n+```\n+\n+The difference between `EarlyLintPass` and `LateLintPass` is that the methods of the `EarlyLintPass` trait only provide AST information. The methods of the `LateLintPass` trait are executed after type checking and contain type information via the `LateContext` parameter.\n+\n+That's why the `else_if_without_else` example uses the `register_early_lint_pass` function. Because the [actual lint logic][else_if_without_else] does not depend on any type information.\n+\n ## Contributions\n \n Contributions to Clippy should be made in the form of GitHub pull requests. Each pull request will\n@@ -156,3 +205,14 @@ main tree or given feedback for changes that would be required.\n All code in this repository is under the [Mozilla Public License, 2.0](https://www.mozilla.org/MPL/2.0/)\n \n <!-- adapted from https://github.com/servo/servo/blob/master/CONTRIBUTING.md -->\n+\n+[main_entry]: https://github.com/rust-lang-nursery/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/src/lib.rs#L14\n+[lint_crate]: https://github.com/rust-lang-nursery/rust-clippy/tree/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src\n+[lint_crate_entry]: https://github.com/rust-lang-nursery/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src/lib.rs\n+[else_if_without_else]: https://github.com/rust-lang-nursery/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src/else_if_without_else.rs\n+[compiler_plugin]: https://doc.rust-lang.org/unstable-book/language-features/plugin.html#lint-plugins\n+[plugin_registry]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin/registry/struct.Registry.html\n+[reg_early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin/registry/struct.Registry.html#method.register_early_lint_pass\n+[reg_late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin/registry/struct.Registry.html#method.register_late_lint_pass\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.LateLintPass.html"}]}