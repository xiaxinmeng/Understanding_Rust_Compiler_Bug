{"sha": "393792da8d8a931643baf855369df0a009acdb19", "node_id": "C_kwDOAAsO6NoAKDM5Mzc5MmRhOGQ4YTkzMTY0M2JhZjg1NTM2OWRmMGEwMDlhY2RiMTk", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T13:51:18Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T15:14:15Z"}, "message": "Remove check_missing_items.py", "tree": {"sha": "3c1e5f7b59b6e8d93b814a7e694f79d576f6051a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c1e5f7b59b6e8d93b814a7e694f79d576f6051a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393792da8d8a931643baf855369df0a009acdb19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393792da8d8a931643baf855369df0a009acdb19", "html_url": "https://github.com/rust-lang/rust/commit/393792da8d8a931643baf855369df0a009acdb19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393792da8d8a931643baf855369df0a009acdb19/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5956b56ab251b9aafecd2ad6f431c42e069b3058", "url": "https://api.github.com/repos/rust-lang/rust/commits/5956b56ab251b9aafecd2ad6f431c42e069b3058", "html_url": "https://github.com/rust-lang/rust/commit/5956b56ab251b9aafecd2ad6f431c42e069b3058"}], "stats": {"total": 213, "additions": 0, "deletions": 213}, "files": [{"sha": "0026c4cbdca2ce609a64d5df04f02c3680bb1d33", "filename": "src/etc/check_missing_items.py", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=5956b56ab251b9aafecd2ad6f431c42e069b3058", "patch": "@@ -1,202 +0,0 @@\n-#!/usr/bin/env python\n-\n-# This test ensures that every ID in the produced json actually resolves to an item either in\n-# `index` or `paths`. It DOES NOT check that the structure of the produced json is actually in\n-# any way correct, for example an empty map would pass.\n-\n-# FIXME: Better error output\n-\n-import sys\n-import json\n-\n-crate = json.load(open(sys.argv[1], encoding=\"utf-8\"))\n-\n-\n-def get_local_item(item_id):\n-    if item_id in crate[\"index\"]:\n-        return crate[\"index\"][item_id]\n-    print(\"Missing local ID:\", item_id)\n-    sys.exit(1)\n-\n-\n-# local IDs have to be in `index`, external ones can sometimes be in `index` but otherwise have\n-# to be in `paths`\n-def valid_id(item_id):\n-    return item_id in crate[\"index\"] or item_id[0] != \"0\" and item_id in crate[\"paths\"]\n-\n-\n-def check_generics(generics):\n-    for param in generics[\"params\"]:\n-        check_generic_param(param)\n-    for where_predicate in generics[\"where_predicates\"]:\n-        if \"bound_predicate\" in where_predicate:\n-            pred = where_predicate[\"bound_predicate\"]\n-            check_type(pred[\"type\"])\n-            for bound in pred[\"bounds\"]:\n-                check_generic_bound(bound)\n-        elif \"region_predicate\" in where_predicate:\n-            pred = where_predicate[\"region_predicate\"]\n-            for bound in pred[\"bounds\"]:\n-                check_generic_bound(bound)\n-        elif \"eq_predicate\" in where_predicate:\n-            pred = where_predicate[\"eq_predicate\"]\n-            check_type(pred[\"rhs\"])\n-            check_type(pred[\"lhs\"])\n-\n-\n-def check_generic_param(param):\n-    if \"type\" in param[\"kind\"]:\n-        ty = param[\"kind\"][\"type\"]\n-        if ty[\"default\"]:\n-            check_type(ty[\"default\"])\n-        for bound in ty[\"bounds\"]:\n-            check_generic_bound(bound)\n-    elif \"const\" in param[\"kind\"]:\n-        check_type(param[\"kind\"][\"const\"])\n-\n-\n-def check_generic_bound(bound):\n-    if \"trait_bound\" in bound:\n-        for param in bound[\"trait_bound\"][\"generic_params\"]:\n-            check_generic_param(param)\n-        check_path(bound[\"trait_bound\"][\"trait\"])\n-\n-\n-def check_decl(decl):\n-    for (_name, ty) in decl[\"inputs\"]:\n-        check_type(ty)\n-    if decl[\"output\"]:\n-        check_type(decl[\"output\"])\n-\n-def check_path(path):\n-    args = path[\"args\"]\n-    if args:\n-        if \"angle_bracketed\" in args:\n-            for arg in args[\"angle_bracketed\"][\"args\"]:\n-                if \"type\" in arg:\n-                    check_type(arg[\"type\"])\n-                elif \"const\" in arg:\n-                    check_type(arg[\"const\"][\"type\"])\n-            for binding in args[\"angle_bracketed\"][\"bindings\"]:\n-                if \"equality\" in binding[\"binding\"]:\n-                    term = binding[\"binding\"][\"equality\"]\n-                    if \"type\" in term: check_type(term[\"type\"])\n-                    elif \"const\" in term: check_type(term[\"const\"])\n-                elif \"constraint\" in binding[\"binding\"]:\n-                    for bound in binding[\"binding\"][\"constraint\"]:\n-                        check_generic_bound(bound)\n-        elif \"parenthesized\" in args:\n-            for input_ty in args[\"parenthesized\"][\"inputs\"]:\n-                check_type(input_ty)\n-            if args[\"parenthesized\"][\"output\"]:\n-                check_type(args[\"parenthesized\"][\"output\"])\n-\n-    if path[\"id\"] in crate[\"index\"]:\n-        work_list.add(path[\"id\"])\n-    elif path[\"id\"] not in crate[\"paths\"]:\n-        print(\"Id not in index or paths:\", path[\"id\"])\n-        sys.exit(1)\n-\n-def check_type(ty):\n-    if ty[\"kind\"] == \"resolved_path\":\n-        check_path(ty[\"inner\"])\n-    elif ty[\"kind\"] == \"tuple\":\n-        for ty in ty[\"inner\"]:\n-            check_type(ty)\n-    elif ty[\"kind\"] == \"slice\":\n-        check_type(ty[\"inner\"])\n-    elif ty[\"kind\"] == \"impl_trait\":\n-        for bound in ty[\"inner\"]:\n-            check_generic_bound(bound)\n-    elif ty[\"kind\"] in (\"raw_pointer\", \"borrowed_ref\", \"array\"):\n-        check_type(ty[\"inner\"][\"type\"])\n-    elif ty[\"kind\"] == \"function_pointer\":\n-        for param in ty[\"inner\"][\"generic_params\"]:\n-            check_generic_param(param)\n-        check_decl(ty[\"inner\"][\"decl\"])\n-    elif ty[\"kind\"] == \"qualified_path\":\n-        check_type(ty[\"inner\"][\"self_type\"])\n-        check_path(ty[\"inner\"][\"trait\"])\n-\n-\n-work_list = set([crate[\"root\"]])\n-visited = work_list.copy()\n-\n-while work_list:\n-    current = work_list.pop()\n-    visited.add(current)\n-    item = get_local_item(current)\n-    # check intradoc links\n-    for (_name, link) in item[\"links\"].items():\n-        if not valid_id(link):\n-            print(\"Intra-doc link contains invalid ID:\", link)\n-\n-    # check all fields that reference types such as generics as well as nested items\n-    # (modules, structs, traits, and enums)\n-    if item[\"kind\"] == \"module\":\n-        work_list |= set(item[\"inner\"][\"items\"]) - visited\n-    elif item[\"kind\"] == \"struct\":\n-        check_generics(item[\"inner\"][\"generics\"])\n-        work_list |= set(item[\"inner\"][\"impls\"]) - visited\n-        if \"tuple\" in item[\"inner\"][\"kind\"]:\n-            work_list |= set(filter(None, item[\"inner\"][\"kind\"][\"tuple\"])) - visited\n-        elif \"plain\" in item[\"inner\"][\"kind\"]:\n-            work_list |= set(item[\"inner\"][\"kind\"][\"plain\"][\"fields\"]) - visited\n-    elif item[\"kind\"] == \"struct_field\":\n-        check_type(item[\"inner\"])\n-    elif item[\"kind\"] == \"enum\":\n-        check_generics(item[\"inner\"][\"generics\"])\n-        work_list |= (\n-            set(item[\"inner\"][\"variants\"]) | set(item[\"inner\"][\"impls\"])\n-        ) - visited\n-    elif item[\"kind\"] == \"variant\":\n-        if item[\"inner\"][\"variant_kind\"] == \"tuple\":\n-            for field_id in filter(None, item[\"inner\"][\"variant_inner\"]):\n-                work_list.add(field_id)\n-        elif item[\"inner\"][\"variant_kind\"] == \"struct\":\n-            work_list |= set(item[\"inner\"][\"variant_inner\"][\"fields\"]) - visited\n-    elif item[\"kind\"] in (\"function\", \"method\"):\n-        check_generics(item[\"inner\"][\"generics\"])\n-        check_decl(item[\"inner\"][\"decl\"])\n-    elif item[\"kind\"] in (\"static\", \"constant\", \"assoc_const\"):\n-        check_type(item[\"inner\"][\"type\"])\n-    elif item[\"kind\"] == \"typedef\":\n-        check_type(item[\"inner\"][\"type\"])\n-        check_generics(item[\"inner\"][\"generics\"])\n-    elif item[\"kind\"] == \"opaque_ty\":\n-        check_generics(item[\"inner\"][\"generics\"])\n-        for bound in item[\"inner\"][\"bounds\"]:\n-            check_generic_bound(bound)\n-    elif item[\"kind\"] == \"trait_alias\":\n-        check_generics(item[\"inner\"][\"params\"])\n-        for bound in item[\"inner\"][\"bounds\"]:\n-            check_generic_bound(bound)\n-    elif item[\"kind\"] == \"trait\":\n-        check_generics(item[\"inner\"][\"generics\"])\n-        for bound in item[\"inner\"][\"bounds\"]:\n-            check_generic_bound(bound)\n-        work_list |= (\n-            set(item[\"inner\"][\"items\"]) | set(item[\"inner\"][\"implementations\"])\n-        ) - visited\n-    elif item[\"kind\"] == \"impl\":\n-        check_generics(item[\"inner\"][\"generics\"])\n-        if item[\"inner\"][\"trait\"]:\n-            check_path(item[\"inner\"][\"trait\"])\n-        if item[\"inner\"][\"blanket_impl\"]:\n-            check_type(item[\"inner\"][\"blanket_impl\"])\n-        check_type(item[\"inner\"][\"for\"])\n-        for assoc_item in item[\"inner\"][\"items\"]:\n-            if not valid_id(assoc_item):\n-                print(\"Impl block referenced a missing ID:\", assoc_item)\n-                sys.exit(1)\n-    elif item[\"kind\"] == \"assoc_type\":\n-        for bound in item[\"inner\"][\"bounds\"]:\n-            check_generic_bound(bound)\n-        if item[\"inner\"][\"default\"]:\n-            check_type(item[\"inner\"][\"default\"])\n-    elif item[\"kind\"] == \"import\":\n-        if item[\"inner\"][\"id\"]:\n-            inner_id = item[\"inner\"][\"id\"]\n-            assert valid_id(inner_id)\n-            if inner_id in crate[\"index\"] and inner_id not in visited:\n-                work_list.add(inner_id)"}, {"sha": "8f289876f7307b391525979598dbbef6a8b8e37a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/393792da8d8a931643baf855369df0a009acdb19/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393792da8d8a931643baf855369df0a009acdb19/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=393792da8d8a931643baf855369df0a009acdb19", "patch": "@@ -2563,15 +2563,6 @@ impl<'test> TestCx<'test> {\n \n         let mut json_out = out_dir.join(self.testpaths.file.file_stem().unwrap());\n         json_out.set_extension(\"json\");\n-        let res = self.cmd2procres(\n-            Command::new(&self.config.python)\n-                .arg(root.join(\"src/etc/check_missing_items.py\"))\n-                .arg(&json_out),\n-        );\n-\n-        if !res.status.success() {\n-            self.fatal_proc_rec(\"check_missing_items failed!\", &res);\n-        }\n \n         let res = self.cmd2procres(\n             Command::new(self.config.jsondoclint_path.as_ref().unwrap()).arg(&json_out),"}, {"sha": "12a55fda7ef4d5ed4bf482812a80a27432cf8842", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393792da8d8a931643baf855369df0a009acdb19/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/393792da8d8a931643baf855369df0a009acdb19/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=393792da8d8a931643baf855369df0a009acdb19", "patch": "@@ -130,7 +130,6 @@ trigger_files = [\n \n     # Internal tooling\n     \"src/etc/htmldocck.py\",\n-    \"src/etc/check_missing_items.py\",\n     \"src/tools/jsondocck\",\n     \"src/tools/jsondoclint\",\n     \"src/tools/rustdoc-gui\",\n@@ -143,7 +142,6 @@ exclude_labels = [\n \n [autolabel.\"A-rustdoc-json\"]\n trigger_files = [\n-    \"src/etc/check_missing_items.py\",\n     \"src/librustdoc/json/\",\n     \"src/rustdoc-json-types\",\n     \"src/test/rustdoc-json\","}]}