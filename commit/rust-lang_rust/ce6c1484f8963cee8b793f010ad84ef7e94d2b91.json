{"sha": "ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "node_id": "C_kwDOAAsO6NoAKGNlNmMxNDg0Zjg5NjNjZWU4Yjc5M2YwMTBhZDg0ZWY3ZTk0ZDJiOTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-01T15:08:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-01T15:08:01Z"}, "message": "Rollup merge of #86374 - bossmc:enable-static-pie-for-gnu, r=nagisa\n\nEnable combining `+crt-static` and `relocation-model=pic` on `x86_64-unknown-linux-gnu`\n\nModern `gcc` versions support `-static-pie`, and `rustc` will already fall-back to `-static` if the local `gcc` is too old (and hence this change is optimistic rather than absolute).  This brings the `-musl` and `-gnu` targets to feature compatibility (albeit with different default settings).\n\nOf note a `-static` or `-static-pie` binary based on glibc that uses NSS-backed functions (`gethostbyname` or `getpwuid` etc.) need to have access to the `libnss_X.so.2` libraries and any of their dynamic dependencies.\n\nI wasn't sure about the `# only`/`# ignore` changes (I've not got a `gnux32` toolchain to test with hence not also enabling `-static-pie` there).", "tree": {"sha": "9722a558d198b82f956432d1bf3992ceed5176f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9722a558d198b82f956432d1bf3992ceed5176f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+UzRCRBK7hj4Ov3rIwAA8b8IAJd3sMjxc3tu0kOsf/NjHtiC\nii9euu16YeT7bUVZ2g5sI2HKK5HS357SYGXxHHU22UTAEcerveX9vtjwNO5SH8vP\nxebK0rVaqnMDioh1n24GfYxpNe986byyi/1e3zhzo+Xfc9o6QfchxHkPUmRfdvGR\nYQqkeAsb4h04JjSc+gvIK3Buiz9DRXuyEOs6AZRjctAYkEIIrJYyZXGf+NW2qYOZ\n/G1HFepFD0VhXc2Y/MwgLBn/HSs4+vgeJAVz+QCvIWID5OizT17bVgyBd87jH7F4\n/zNq+WI7hRfW+OoaY6CnqNByd6NHPs87yTd1YVa5WvleHPg/oXWHR5rCO2FVapQ=\n=TlDO\n-----END PGP SIGNATURE-----\n", "payload": "tree 9722a558d198b82f956432d1bf3992ceed5176f2\nparent 547f2ba06bc4aa93a375c54e1af3fd1216eeaf62\nparent 6a88311373bf18b272aed98d3032852cfcec4455\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643728081 +0100\ncommitter GitHub <noreply@github.com> 1643728081 +0100\n\nRollup merge of #86374 - bossmc:enable-static-pie-for-gnu, r=nagisa\n\nEnable combining `+crt-static` and `relocation-model=pic` on `x86_64-unknown-linux-gnu`\n\nModern `gcc` versions support `-static-pie`, and `rustc` will already fall-back to `-static` if the local `gcc` is too old (and hence this change is optimistic rather than absolute).  This brings the `-musl` and `-gnu` targets to feature compatibility (albeit with different default settings).\n\nOf note a `-static` or `-static-pie` binary based on glibc that uses NSS-backed functions (`gethostbyname` or `getpwuid` etc.) need to have access to the `libnss_X.so.2` libraries and any of their dynamic dependencies.\n\nI wasn't sure about the `# only`/`# ignore` changes (I've not got a `gnux32` toolchain to test with hence not also enabling `-static-pie` there).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "html_url": "https://github.com/rust-lang/rust/commit/ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547f2ba06bc4aa93a375c54e1af3fd1216eeaf62", "url": "https://api.github.com/repos/rust-lang/rust/commits/547f2ba06bc4aa93a375c54e1af3fd1216eeaf62", "html_url": "https://github.com/rust-lang/rust/commit/547f2ba06bc4aa93a375c54e1af3fd1216eeaf62"}, {"sha": "6a88311373bf18b272aed98d3032852cfcec4455", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a88311373bf18b272aed98d3032852cfcec4455", "html_url": "https://github.com/rust-lang/rust/commit/6a88311373bf18b272aed98d3032852cfcec4455"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "aefbb398286acb25c64170ff44d913960db8a3a9", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n+    base.static_position_independent_executables = true;\n     base.supported_sanitizers = SanitizerSet::ADDRESS\n         | SanitizerSet::CFI\n         | SanitizerSet::LEAK"}, {"sha": "945ec1724ac041b4d1b16b585fe3df2509c01715", "filename": "src/test/run-make/static-pie/Makefile", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile?ref=ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "patch": "@@ -1,15 +1,18 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-x86_64-unknown-linux-musl\n+# only-x86_64\n+# only-linux\n+# ignore-gnux32\n \n # How to manually run this\n-# $ ./x.py test --target x86_64-unknown-linux-musl src/test/run-make/static-pie\n-\n-all:\n-\t$(RUSTC) --target $(TARGET) -C target-feature=+crt-static test-aslr.rs\n-\t# Check that no dynamic interpreter is set\n-\t! readelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) INTERP\n-\t# Check that we have a dynamic executable\n-\treadelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) DYNAMIC\n-\t# Check for address space layout randomization\n-\t$(call RUN,test-aslr) --test-aslr\n+# $ ./x.py test --target x86_64-unknown-linux-[musl,gnu] src/test/run-make/static-pie\n+\n+all: test-clang test-gcc\n+\n+test-%:\n+\tif ./check_$*_version.sh; then\\\n+\t\t${RUSTC} -Clinker=$* -Clinker-flavor=gcc --target ${TARGET} -C target-feature=+crt-static test-aslr.rs; \\\n+\t\t! readelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) INTERP; \\\n+\t\treadelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) DYNAMIC; \\\n+\t\t$(call RUN,test-aslr) --test-aslr; \\\n+\tfi"}, {"sha": "b8e97c3da7d77b5ed4356702951eda5614a3fa35", "filename": "src/test/run-make/static-pie/check_clang_version.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_clang_version.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_clang_version.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_clang_version.sh?ref=ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+if command -v clang > /dev/null\n+then\n+  CLANG_VERSION=$(echo __clang_major__ | clang -E -x c - | grep -v -e '^#' )\n+  echo \"clang version $CLANG_VERSION detected\"\n+  if (( $CLANG_VERSION >= 9 ))\n+  then\n+    echo \"clang supports -static-pie\"\n+    exit 0\n+  else\n+    echo \"clang too old to support -static-pie, skipping test\"\n+    exit 1\n+  fi\n+else\n+  echo \"No clang version detected\"\n+  exit 2\n+fi"}, {"sha": "d07e1d151dfb8b91804cf5084a0f688a2f3c5208", "filename": "src/test/run-make/static-pie/check_gcc_version.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_gcc_version.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ce6c1484f8963cee8b793f010ad84ef7e94d2b91/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_gcc_version.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2Fcheck_gcc_version.sh?ref=ce6c1484f8963cee8b793f010ad84ef7e94d2b91", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+\n+set -euo pipefail\n+\n+if command -v gcc > /dev/null\n+then\n+  GCC_VERSION=$(echo __GNUC__ | gcc -E -x c - | grep -v -e '^#' )\n+  echo \"gcc version $GCC_VERSION detected\"\n+  if (( $GCC_VERSION >= 8 ))\n+  then\n+    echo \"gcc supports -static-pie\"\n+    exit 0\n+  else\n+    echo \"gcc too old to support -static-pie, skipping test\"\n+    exit 1\n+  fi\n+else\n+  echo \"No gcc version detected\"\n+  exit 2\n+fi"}]}