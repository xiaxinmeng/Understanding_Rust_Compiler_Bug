{"sha": "d68e7ebc38cb42b8b237392b28045edeec761503", "node_id": "C_kwDOAAsO6NoAKGQ2OGU3ZWJjMzhjYjQyYjhiMjM3MzkyYjI4MDQ1ZWRlZWM3NjE1MDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T19:37:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T19:37:17Z"}, "message": "Auto merge of #99520 - matthiaskrgr:rollup-05uuv5s, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #99212 (introduce `implied_by` in `#[unstable]` attribute)\n - #99352 (Use `typeck_results` to avoid duplicate `ast_ty_to_ty` call)\n - #99355 (better error for bad depth parameter on macro metavar expr)\n - #99480 (Diagnostic width span is not added when '0$' is used as width in format strings)\n - #99488 (compiletest: Allow using revisions with debuginfo tests.)\n - #99489 (rustdoc UI fixes)\n - #99508 (Avoid `Symbol` to `String` conversions)\n - #99510 (adapt assembly/static-relocation-model test for LLVM change)\n - #99516 (Use new tracking issue for proc_macro::tracked_*.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e8109432f17346411b536b520111848a173e8cf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8109432f17346411b536b520111848a173e8cf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68e7ebc38cb42b8b237392b28045edeec761503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68e7ebc38cb42b8b237392b28045edeec761503", "html_url": "https://github.com/rust-lang/rust/commit/d68e7ebc38cb42b8b237392b28045edeec761503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68e7ebc38cb42b8b237392b28045edeec761503/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7468c60f8dbf5feb23ad840b174d7e57113a846", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7468c60f8dbf5feb23ad840b174d7e57113a846", "html_url": "https://github.com/rust-lang/rust/commit/a7468c60f8dbf5feb23ad840b174d7e57113a846"}, {"sha": "a5a681100cb14af73926f309821903175b4fc2a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a681100cb14af73926f309821903175b4fc2a2", "html_url": "https://github.com/rust-lang/rust/commit/a5a681100cb14af73926f309821903175b4fc2a2"}], "stats": {"total": 838, "additions": 584, "deletions": 254}, "files": [{"sha": "64a6f91f02206f6472f00a6ada3ef730d94c5045", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -135,9 +135,42 @@ impl ConstStability {\n #[derive(Encodable, Decodable, PartialEq, Copy, Clone, Debug, Eq, Hash)]\n #[derive(HashStable_Generic)]\n pub enum StabilityLevel {\n-    // Reason for the current stability level and the relevant rust-lang issue\n-    Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n-    Stable { since: Symbol, allowed_through_unstable_modules: bool },\n+    /// `#[unstable]`\n+    Unstable {\n+        /// Reason for the current stability level.\n+        reason: Option<Symbol>,\n+        /// Relevant `rust-lang/rust` issue.\n+        issue: Option<NonZeroU32>,\n+        is_soft: bool,\n+        /// If part of a feature is stabilized and a new feature is added for the remaining parts,\n+        /// then the `implied_by` attribute is used to indicate which now-stable feature previously\n+        /// contained a item.\n+        ///\n+        /// ```pseudo-Rust\n+        /// #[unstable(feature = \"foo\", issue = \"...\")]\n+        /// fn foo() {}\n+        /// #[unstable(feature = \"foo\", issue = \"...\")]\n+        /// fn foobar() {}\n+        /// ```\n+        ///\n+        /// ...becomes...\n+        ///\n+        /// ```pseudo-Rust\n+        /// #[stable(feature = \"foo\", since = \"1.XX.X\")]\n+        /// fn foo() {}\n+        /// #[unstable(feature = \"foobar\", issue = \"...\", implied_by = \"foo\")]\n+        /// fn foobar() {}\n+        /// ```\n+        implied_by: Option<Symbol>,\n+    },\n+    /// `#[stable]`\n+    Stable {\n+        /// Rust release which stabilized this feature.\n+        since: Symbol,\n+        /// Is this item allowed to be referred to on stable, despite being contained in unstable\n+        /// modules?\n+        allowed_through_unstable_modules: bool,\n+    },\n }\n \n impl StabilityLevel {\n@@ -243,6 +276,7 @@ where\n                     let mut issue = None;\n                     let mut issue_num = None;\n                     let mut is_soft = false;\n+                    let mut implied_by = None;\n                     for meta in metas {\n                         let Some(mi) = meta.meta_item() else {\n                             handle_errors(\n@@ -308,6 +342,11 @@ where\n                                 }\n                                 is_soft = true;\n                             }\n+                            sym::implied_by => {\n+                                if !get(mi, &mut implied_by) {\n+                                    continue 'outer;\n+                                }\n+                            }\n                             _ => {\n                                 handle_errors(\n                                     &sess.parse_sess,\n@@ -332,7 +371,7 @@ where\n                                 );\n                                 continue;\n                             }\n-                            let level = Unstable { reason, issue: issue_num, is_soft };\n+                            let level = Unstable { reason, issue: issue_num, is_soft, implied_by };\n                             if sym::unstable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n                             } else {\n@@ -391,7 +430,7 @@ where\n                                         meta.span(),\n                                         AttrError::UnknownMetaItem(\n                                             pprust::path_to_string(&mi.path),\n-                                            &[\"since\", \"note\"],\n+                                            &[\"feature\", \"since\"],\n                                         ),\n                                     );\n                                     continue 'outer;"}, {"sha": "ce897abb766e5ffd9fd1da51e5f1e88fa930f938", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -485,7 +485,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.width_span {\n                 let span = self.fmtsp.from_inner(InnerSpan::new(span.start, span.end));\n                 match fmt.width {\n-                    parse::CountIsParam(pos) if pos > self.num_args() => {\n+                    parse::CountIsParam(pos) if pos >= self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!(\n@@ -1004,9 +1004,7 @@ fn lint_named_arguments_used_positionally(\n                 node_id: ast::CRATE_NODE_ID,\n                 lint_id: LintId::of(&NAMED_ARGUMENTS_USED_POSITIONALLY),\n                 diagnostic: BuiltinLintDiagnostics::NamedArgumentUsedPositionally(\n-                    arg_span,\n-                    span,\n-                    symbol.to_string(),\n+                    arg_span, span, symbol,\n                 ),\n             });\n         }"}, {"sha": "ba888d77b15c1644708d9e82c13dd49833d594fb", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -390,18 +390,17 @@ impl Diagnostic {\n         expected: DiagnosticStyledString,\n         found: DiagnosticStyledString,\n     ) -> &mut Self {\n-        let mut msg: Vec<_> =\n-            vec![(\"required when trying to coerce from type `\".to_string(), Style::NoStyle)];\n+        let mut msg: Vec<_> = vec![(\"required when trying to coerce from type `\", Style::NoStyle)];\n         msg.extend(expected.0.iter().map(|x| match *x {\n-            StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n-            StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+            StringPart::Normal(ref s) => (s.as_str(), Style::NoStyle),\n+            StringPart::Highlighted(ref s) => (s.as_str(), Style::Highlight),\n         }));\n-        msg.push((\"` to type '\".to_string(), Style::NoStyle));\n+        msg.push((\"` to type '\", Style::NoStyle));\n         msg.extend(found.0.iter().map(|x| match *x {\n-            StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n-            StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+            StringPart::Normal(ref s) => (s.as_str(), Style::NoStyle),\n+            StringPart::Highlighted(ref s) => (s.as_str(), Style::Highlight),\n         }));\n-        msg.push((\"`\".to_string(), Style::NoStyle));\n+        msg.push((\"`\", Style::NoStyle));\n \n         // For now, just attach these as notes\n         self.highlighted_note(msg);"}, {"sha": "3037855ae28a6b6c7ea6d742bf9678a07b387c4b", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -512,7 +512,18 @@ fn out_of_bounds_err<'a>(\n     span: Span,\n     ty: &str,\n ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-    cx.struct_span_err(span, &format!(\"{ty} depth must be less than {max}\"))\n+    let msg = if max == 0 {\n+        format!(\n+            \"meta-variable expression `{ty}` with depth parameter \\\n+             must be called inside of a macro repetition\"\n+        )\n+    } else {\n+        format!(\n+            \"depth parameter on meta-variable expression `{ty}` \\\n+             must be less than {max}\"\n+        )\n+    };\n+    cx.struct_span_err(span, &msg)\n }\n \n fn transcribe_metavar_expr<'a>("}, {"sha": "3872d866dee86ff455a0d39384271e6dffd79b70", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -467,7 +467,7 @@ pub enum BuiltinLintDiagnostics {\n         /// If true, the lifetime will be fully elided.\n         use_span: Option<(Span, bool)>,\n     },\n-    NamedArgumentUsedPositionally(Option<Span>, Span, String),\n+    NamedArgumentUsedPositionally(Option<Span>, Span, Symbol),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "aa5705d3fcdc3c368820455749c6d6906e893ee5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -951,6 +951,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))\n     }\n \n+    /// Iterates over the stability implications in the given crate (when a `#[unstable]` attribute\n+    /// has an `implied_by` meta item, then the mapping from the implied feature to the actual\n+    /// feature is a stability implication).\n+    fn get_stability_implications(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Symbol)] {\n+        tcx.arena.alloc_from_iter(self.root.stability_implications.decode(self))\n+    }\n+\n     /// Iterates over the language items in the given crate.\n     fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n         tcx.arena.alloc_from_iter("}, {"sha": "65cae29c58dcbdd21accf3086843208d21f3f1de", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -291,6 +291,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.arena.alloc_slice(&result)\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n+    stability_implications => {\n+        cdata.get_stability_implications(tcx).iter().copied().collect()\n+    }\n     is_intrinsic => { cdata.get_is_intrinsic(def_id.index) }\n     defined_lang_items => { cdata.get_lang_items(tcx) }\n     diagnostic_items => { cdata.get_diagnostic_items() }"}, {"sha": "50d983754e89c6204e1dbdc3905da4bda237b821", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -538,6 +538,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let lib_features = self.encode_lib_features();\n         let lib_feature_bytes = self.position() - i;\n \n+        // Encode the stability implications.\n+        i = self.position();\n+        let stability_implications = self.encode_stability_implications();\n+        let stability_implications_bytes = self.position() - i;\n+\n         // Encode the language items.\n         i = self.position();\n         let lang_items = self.encode_lang_items();\n@@ -686,6 +691,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             crate_deps,\n             dylib_dependency_formats,\n             lib_features,\n+            stability_implications,\n             lang_items,\n             diagnostic_items,\n             lang_items_missing,\n@@ -710,6 +716,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let computed_total_bytes = preamble_bytes\n             + dep_bytes\n             + lib_feature_bytes\n+            + stability_implications_bytes\n             + lang_item_bytes\n             + diagnostic_item_bytes\n             + native_lib_bytes\n@@ -761,6 +768,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             p(\"preamble\", preamble_bytes);\n             p(\"dep\", dep_bytes);\n             p(\"lib feature\", lib_feature_bytes);\n+            p(\"stability_implications\", stability_implications_bytes);\n             p(\"lang item\", lang_item_bytes);\n             p(\"diagnostic item\", diagnostic_item_bytes);\n             p(\"native lib\", native_lib_bytes);\n@@ -1777,6 +1785,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_array(lib_features.to_vec())\n     }\n \n+    fn encode_stability_implications(&mut self) -> LazyArray<(Symbol, Symbol)> {\n+        empty_proc_macro!(self);\n+        let tcx = self.tcx;\n+        let implications = tcx.stability_implications(LOCAL_CRATE);\n+        self.lazy_array(implications.iter().map(|(k, v)| (*k, *v)))\n+    }\n+\n     fn encode_diagnostic_items(&mut self) -> LazyArray<(Symbol, DefIndex)> {\n         empty_proc_macro!(self);\n         let tcx = self.tcx;"}, {"sha": "0f291f926477702c9924e57f7dff06361f085aa2", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -226,6 +226,7 @@ pub(crate) struct CrateRoot {\n     crate_deps: LazyArray<CrateDep>,\n     dylib_dependency_formats: LazyArray<Option<LinkagePreference>>,\n     lib_features: LazyArray<(Symbol, Option<Symbol>)>,\n+    stability_implications: LazyArray<(Symbol, Symbol)>,\n     lang_items: LazyArray<(DefIndex, usize)>,\n     lang_items_missing: LazyArray<lang_items::LangItem>,\n     diagnostic_items: LazyArray<(Symbol, DefIndex)>,"}, {"sha": "8dc68b1f5a820d415d0e21d696eeaedf3c780000", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -3,23 +3,23 @@ pub mod dependency_format;\n pub mod exported_symbols;\n pub mod lang_items;\n pub mod lib_features {\n-    use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-    use rustc_span::symbol::Symbol;\n+    use rustc_data_structures::fx::FxHashMap;\n+    use rustc_span::{symbol::Symbol, Span};\n \n     #[derive(HashStable, Debug)]\n     pub struct LibFeatures {\n-        // A map from feature to stabilisation version.\n-        pub stable: FxHashMap<Symbol, Symbol>,\n-        pub unstable: FxHashSet<Symbol>,\n+        /// A map from feature to stabilisation version.\n+        pub stable: FxHashMap<Symbol, (Symbol, Span)>,\n+        pub unstable: FxHashMap<Symbol, Span>,\n     }\n \n     impl LibFeatures {\n         pub fn to_vec(&self) -> Vec<(Symbol, Option<Symbol>)> {\n             let mut all_features: Vec<_> = self\n                 .stable\n                 .iter()\n-                .map(|(f, s)| (*f, Some(*s)))\n-                .chain(self.unstable.iter().map(|f| (*f, None)))\n+                .map(|(f, (s, _))| (*f, Some(*s)))\n+                .chain(self.unstable.iter().map(|(f, _)| (*f, None)))\n                 .collect();\n             all_features.sort_unstable_by(|a, b| a.0.as_str().partial_cmp(b.0.as_str()).unwrap());\n             all_features"}, {"sha": "0fbad3f0f0f06761c56b77ce6740cfdc936eb1ba", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -62,6 +62,19 @@ pub struct Index {\n     pub stab_map: FxHashMap<LocalDefId, Stability>,\n     pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n+    /// Mapping from feature name to feature name based on the `implied_by` field of `#[unstable]`\n+    /// attributes. If a `#[unstable(feature = \"implier\", implied_by = \"impliee\")]` attribute\n+    /// exists, then this map will have a `impliee -> implier` entry.\n+    ///\n+    /// This mapping is necessary unless both the `#[stable]` and `#[unstable]` attributes should\n+    /// specify their implications (both `implies` and `implied_by`). If only one of the two\n+    /// attributes do (as in the current implementation, `implied_by` in `#[unstable]`), then this\n+    /// mapping is necessary for diagnostics. When a \"unnecessary feature attribute\" error is\n+    /// reported, only the `#[stable]` attribute information is available, so the map is necessary\n+    /// to know that the feature implies another feature. If it were reversed, and the `#[stable]`\n+    /// attribute had an `implies` meta item, then a map would be necessary when avoiding a \"use of\n+    /// unstable feature\" error for a feature that was implied.\n+    pub implications: FxHashMap<Symbol, Symbol>,\n }\n \n impl Index {\n@@ -423,7 +436,9 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         match stability {\n             Some(Stability {\n-                level: attr::Unstable { reason, issue, is_soft }, feature, ..\n+                level: attr::Unstable { reason, issue, is_soft, implied_by },\n+                feature,\n+                ..\n             }) => {\n                 if span.allows_unstable(feature) {\n                     debug!(\"stability: skipping span={:?} since it is internal\", span);\n@@ -433,6 +448,13 @@ impl<'tcx> TyCtxt<'tcx> {\n                     return EvalResult::Allow;\n                 }\n \n+                // If this item was previously part of a now-stabilized feature which is still\n+                // active (i.e. the user hasn't removed the attribute for the stabilized feature\n+                // yet) then allow use of this item.\n+                if let Some(implied_by) = implied_by && self.features().active(implied_by) {\n+                    return EvalResult::Allow;\n+                }\n+\n                 // When we're compiling the compiler itself we may pull in\n                 // crates from crates.io, but those crates may depend on other\n                 // crates also pulled in from crates.io. We want to ideally be"}, {"sha": "466a0fc25f7d11ca3563cdd7a377aa4f55586d02", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1634,11 +1634,15 @@ rustc_queries! {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating the lib features map\" }\n     }\n-    query defined_lib_features(_: CrateNum)\n-        -> &'tcx [(Symbol, Option<Symbol>)] {\n+    query defined_lib_features(_: CrateNum) -> &'tcx [(Symbol, Option<Symbol>)] {\n         desc { \"calculating the lib features defined in a crate\" }\n         separate_provide_extern\n     }\n+    query stability_implications(_: CrateNum) -> FxHashMap<Symbol, Symbol> {\n+        storage(ArenaCacheSelector<'tcx>)\n+        desc { \"calculating the implications between `#[unstable]` features defined in a crate\" }\n+        separate_provide_extern\n+    }\n     /// Whether the function is an intrinsic\n     query is_intrinsic(def_id: DefId) -> bool {\n         desc { |tcx| \"is_intrinsic({})\", tcx.def_path_str(def_id) }"}, {"sha": "6e7553f5e496b16d4c62100b20651d1c435eeea7", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -572,9 +572,10 @@ impl<'a> Parser<'a> {\n             // '0' flag and then an ill-formatted format string with just a '$'\n             // and no count, but this is better if we instead interpret this as\n             // no '0' flag and '0$' as the width instead.\n-            if self.consume('$') {\n+            if let Some(end) = self.consume_pos('$') {\n                 spec.width = CountIsParam(0);\n                 havewidth = true;\n+                spec.width_span = Some(self.to_span_index(end - 1).to(self.to_span_index(end + 1)));\n             } else {\n                 spec.flags |= 1 << (FlagSignAwareZeroPad as u32);\n             }"}, {"sha": "9c305b4996a13f73fb03ba6af46018e4b88725c8", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -178,6 +178,23 @@ fn format_counts() {\n             },\n         })],\n     );\n+    same(\n+        \"{1:0$.10x}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(1),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountIs(10),\n+                width: CountIsParam(0),\n+                precision_span: None,\n+                width_span: Some(InnerSpan::new(4, 6)),\n+                ty: \"x\",\n+                ty_span: None,\n+            },\n+        })],\n+    );\n     same(\n         \"{:.*x}\",\n         &[NextArgument(Argument {"}, {"sha": "e05994f13e4d9b8ef73bc5c8b50ca878cb599636", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1,8 +1,8 @@\n-// Detecting lib features (i.e., features that are not lang features).\n-//\n-// These are declared using stability attributes (e.g., `#[stable (..)]`\n-// and `#[unstable (..)]`), but are not declared in one single location\n-// (unlike lang features), which means we need to collect them instead.\n+//! Detecting lib features (i.e., features that are not lang features).\n+//!\n+//! These are declared using stability attributes (e.g., `#[stable (..)]` and `#[unstable (..)]`),\n+//! but are not declared in one single location (unlike lang features), which means we need to\n+//! collect them instead.\n \n use rustc_ast::{Attribute, MetaItemKind};\n use rustc_errors::struct_span_err;\n@@ -71,11 +71,11 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n \n     fn collect_feature(&mut self, feature: Symbol, since: Option<Symbol>, span: Span) {\n         let already_in_stable = self.lib_features.stable.contains_key(&feature);\n-        let already_in_unstable = self.lib_features.unstable.contains(&feature);\n+        let already_in_unstable = self.lib_features.unstable.contains_key(&feature);\n \n         match (since, already_in_stable, already_in_unstable) {\n             (Some(since), _, false) => {\n-                if let Some(prev_since) = self.lib_features.stable.get(&feature) {\n+                if let Some((prev_since, _)) = self.lib_features.stable.get(&feature) {\n                     if *prev_since != since {\n                         self.span_feature_error(\n                             span,\n@@ -89,10 +89,10 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n                     }\n                 }\n \n-                self.lib_features.stable.insert(feature, since);\n+                self.lib_features.stable.insert(feature, (since, span));\n             }\n             (None, false, _) => {\n-                self.lib_features.unstable.insert(feature);\n+                self.lib_features.unstable.insert(feature, span);\n             }\n             (Some(_), _, true) | (None, true, _) => {\n                 self.span_feature_error("}, {"sha": "81b04c414ed9b6c11ba48e8f078310476b359407", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 89, "deletions": 34, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -2,9 +2,9 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use attr::StabilityLevel;\n-use rustc_attr::{self as attr, ConstStability, Stability};\n-use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n-use rustc_errors::struct_span_err;\n+use rustc_attr::{self as attr, ConstStability, Stability, Unstable};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -29,13 +29,13 @@ use std::num::NonZeroU32;\n \n #[derive(PartialEq)]\n enum AnnotationKind {\n-    // Annotation is required if not inherited from unstable parents\n+    /// Annotation is required if not inherited from unstable parents.\n     Required,\n-    // Annotation is useless, reject it\n+    /// Annotation is useless, reject it.\n     Prohibited,\n-    // Deprecation annotation is useless, reject it. (Stability attribute is still required.)\n+    /// Deprecation annotation is useless, reject it. (Stability attribute is still required.)\n     DeprecationProhibited,\n-    // Annotation itself is useless, but it can be propagated to children\n+    /// Annotation itself is useless, but it can be propagated to children.\n     Container,\n }\n \n@@ -83,7 +83,7 @@ impl InheritStability {\n     }\n }\n \n-// A private tree-walker for producing an Index.\n+/// A private tree-walker for producing an `Index`.\n struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     index: &'a mut Index,\n@@ -94,9 +94,9 @@ struct Annotator<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Annotator<'a, 'tcx> {\n-    // Determine the stability for a node based on its attributes and inherited\n-    // stability. The stability is recorded in the index and used as the parent.\n-    // If the node is a function, `fn_sig` is its signature\n+    /// Determine the stability for a node based on its attributes and inherited stability. The\n+    /// stability is recorded in the index and used as the parent. If the node is a function,\n+    /// `fn_sig` is its signature.\n     fn annotate<F>(\n         &mut self,\n         def_id: LocalDefId,\n@@ -265,6 +265,10 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 }\n             }\n \n+            if let Stability { level: Unstable { implied_by: Some(implied_by), .. }, feature } = stab {\n+                self.index.implications.insert(implied_by, feature);\n+            }\n+\n             self.index.stab_map.insert(def_id, stab);\n             stab\n         });\n@@ -610,6 +614,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n         depr_map: Default::default(),\n+        implications: Default::default(),\n     };\n \n     {\n@@ -637,6 +642,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n                     reason: Some(Symbol::intern(reason)),\n                     issue: NonZeroU32::new(27812),\n                     is_soft: false,\n+                    implied_by: None,\n                 },\n                 feature: sym::rustc_private,\n             };\n@@ -667,6 +673,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         check_mod_unstable_api_usage,\n         stability_index,\n+        stability_implications: |tcx, _| tcx.stability().implications.clone(),\n         lookup_stability: |tcx, id| tcx.stability().local_stability(id.expect_local()),\n         lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id.expect_local()),\n         lookup_deprecation_entry: |tcx, id| {\n@@ -945,32 +952,51 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     remaining_lib_features.remove(&sym::libc);\n     remaining_lib_features.remove(&sym::test);\n \n-    let check_features = |remaining_lib_features: &mut FxIndexMap<_, _>, defined_features: &[_]| {\n-        for &(feature, since) in defined_features {\n-            if let Some(since) = since {\n-                if let Some(span) = remaining_lib_features.get(&feature) {\n-                    // Warn if the user has enabled an already-stable lib feature.\n-                    unnecessary_stable_feature_lint(tcx, *span, feature, since);\n-                }\n-            }\n-            remaining_lib_features.remove(&feature);\n-            if remaining_lib_features.is_empty() {\n-                break;\n-            }\n-        }\n-    };\n-\n     // We always collect the lib features declared in the current crate, even if there are\n     // no unknown features, because the collection also does feature attribute validation.\n-    let local_defined_features = tcx.lib_features(()).to_vec();\n-    if !remaining_lib_features.is_empty() {\n-        check_features(&mut remaining_lib_features, &local_defined_features);\n+    let local_defined_features = tcx.lib_features(());\n+    let mut all_lib_features: FxHashMap<_, _> =\n+        local_defined_features.to_vec().iter().map(|el| *el).collect();\n+    let mut implications = tcx.stability_implications(rustc_hir::def_id::LOCAL_CRATE).clone();\n+    for &cnum in tcx.crates(()) {\n+        implications.extend(tcx.stability_implications(cnum));\n+        all_lib_features.extend(tcx.defined_lib_features(cnum).iter().map(|el| *el));\n+    }\n \n-        for &cnum in tcx.crates(()) {\n+    // Check that every feature referenced by an `implied_by` exists (for features defined in the\n+    // local crate).\n+    for (implied_by, feature) in tcx.stability_implications(rustc_hir::def_id::LOCAL_CRATE) {\n+        // Only `implied_by` needs to be checked, `feature` is guaranteed to exist.\n+        if !all_lib_features.contains_key(implied_by) {\n+            let span = local_defined_features\n+                .stable\n+                .get(feature)\n+                .map(|(_, span)| span)\n+                .or_else(|| local_defined_features.unstable.get(feature))\n+                .expect(\"feature that implied another does not exist\");\n+            tcx.sess\n+                .struct_span_err(\n+                    *span,\n+                    format!(\"feature `{implied_by}` implying `{feature}` does not exist\"),\n+                )\n+                .emit();\n+        }\n+    }\n+\n+    if !remaining_lib_features.is_empty() {\n+        for (feature, since) in all_lib_features.iter() {\n+            if let Some(since) = since && let Some(span) = remaining_lib_features.get(&feature) {\n+                // Warn if the user has enabled an already-stable lib feature.\n+                if let Some(implies) = implications.get(&feature) {\n+                    unnecessary_partially_stable_feature_lint(tcx, *span, *feature, *implies, *since);\n+                } else {\n+                    unnecessary_stable_feature_lint(tcx, *span, *feature, *since);\n+                }\n+            }\n+            remaining_lib_features.remove(&feature);\n             if remaining_lib_features.is_empty() {\n                 break;\n             }\n-            check_features(&mut remaining_lib_features, tcx.defined_lib_features(cnum));\n         }\n     }\n \n@@ -982,12 +1008,41 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     // don't lint about unused features. We should re-enable this one day!\n }\n \n+fn unnecessary_partially_stable_feature_lint(\n+    tcx: TyCtxt<'_>,\n+    span: Span,\n+    feature: Symbol,\n+    implies: Symbol,\n+    since: Symbol,\n+) {\n+    tcx.struct_span_lint_hir(lint::builtin::STABLE_FEATURES, hir::CRATE_HIR_ID, span, |lint| {\n+        lint.build(&format!(\n+            \"the feature `{feature}` has been partially stabilized since {since} and is succeeded \\\n+             by the feature `{implies}`\"\n+        ))\n+        .span_suggestion(\n+            span,\n+            &format!(\n+                \"if you are using features which are still unstable, change to using `{implies}`\"\n+            ),\n+            implies,\n+            Applicability::MaybeIncorrect,\n+        )\n+        .span_suggestion(\n+            tcx.sess.source_map().span_extend_to_line(span),\n+            \"if you are using features which are now stable, remove this line\",\n+            \"\",\n+            Applicability::MaybeIncorrect,\n+        )\n+        .emit();\n+    });\n+}\n+\n fn unnecessary_stable_feature_lint(tcx: TyCtxt<'_>, span: Span, feature: Symbol, since: Symbol) {\n     tcx.struct_span_lint_hir(lint::builtin::STABLE_FEATURES, hir::CRATE_HIR_ID, span, |lint| {\n         lint.build(&format!(\n-            \"the feature `{}` has been stable since {} and no longer requires \\\n-                      an attribute to enable\",\n-            feature, since\n+            \"the feature `{feature}` has been stable since {since} and no longer requires an \\\n+             attribute to enable\",\n         ))\n         .emit();\n     });"}, {"sha": "df13136dcce37c42a7649ebac92eddbe3562c4fa", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -2603,9 +2603,9 @@ fn show_candidates(\n                 .skip(1)\n                 .all(|(_, descr, _, _)| descr == descr_first)\n             {\n-                descr_first.to_string()\n+                descr_first\n             } else {\n-                \"item\".to_string()\n+                \"item\"\n             };\n             let plural_descr =\n                 if descr.ends_with(\"s\") { format!(\"{}es\", descr) } else { format!(\"{}s\", descr) };"}, {"sha": "2b5eb12a8a890e39a26b902b8fa790856cdeaa45", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -796,9 +796,16 @@ impl<'a> Resolver<'a> {\n     ) {\n         let span = path.span;\n         if let Some(stability) = &ext.stability {\n-            if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {\n+            if let StabilityLevel::Unstable { reason, issue, is_soft, implied_by } = stability.level\n+            {\n                 let feature = stability.feature;\n-                if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n+\n+                let is_allowed = |feature| {\n+                    self.active_features.contains(&feature) || span.allows_unstable(feature)\n+                };\n+                let allowed_by_implication =\n+                    implied_by.map(|feature| is_allowed(feature)).unwrap_or(false);\n+                if !is_allowed(feature) && !allowed_by_implication {\n                     let lint_buffer = &mut self.lint_buffer;\n                     let soft_handler =\n                         |lint, span, msg: &_| lint_buffer.buffer_lint(lint, node_id, span, msg);"}, {"sha": "b4a4424e876cdeb6e5178df20f6bb19d3831be88", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -718,6 +718,11 @@ impl SourceMap {\n         sp\n     }\n \n+    /// Extends the given `Span` to contain the entire line it is on.\n+    pub fn span_extend_to_line(&self, sp: Span) -> Span {\n+        self.span_extend_to_prev_char(self.span_extend_to_next_char(sp, '\\n', true), '\\n', true)\n+    }\n+\n     /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`\n     /// `c`.\n     pub fn span_until_char(&self, sp: Span, c: char) -> Span {"}, {"sha": "2ac1ecfe87eb5f11820b3456149ecd5fab79f9dc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -800,6 +800,7 @@ symbols! {\n         impl_lint_pass,\n         impl_macros,\n         impl_trait_in_bindings,\n+        implied_by,\n         import,\n         import_shadowing,\n         imported_main,"}, {"sha": "8aa8ac90b4c56cae649bebcdd68e436c5392c810", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1757,19 +1757,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .flat_map(|a| a.args.iter())\n                         {\n                             if let hir::GenericArg::Type(hir_ty) = &arg {\n-                                if let hir::TyKind::Path(hir::QPath::TypeRelative(..)) =\n-                                    &hir_ty.kind\n-                                {\n-                                    // Avoid ICE with associated types. As this is best\n-                                    // effort only, it's ok to ignore the case. It\n-                                    // would trigger in `is_send::<T::AssocType>();`\n-                                    // from `typeck-default-trait-impl-assoc-type.rs`.\n-                                } else {\n-                                    let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, hir_ty);\n-                                    let ty = self.resolve_vars_if_possible(ty);\n-                                    if ty == predicate.self_ty() {\n-                                        error.obligation.cause.span = hir_ty.span;\n-                                    }\n+                                let ty = self.resolve_vars_if_possible(\n+                                    self.typeck_results.borrow().node_type(hir_ty.hir_id),\n+                                );\n+                                if ty == predicate.self_ty() {\n+                                    error.obligation.cause.span = hir_ty.span;\n                                 }\n                             }\n                         }"}, {"sha": "08b45ac11a14c2b06f427874f96210f755bcbccf", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1484,7 +1484,7 @@ impl fmt::Debug for Literal {\n }\n \n /// Tracked access to environment variables.\n-#[unstable(feature = \"proc_macro_tracked_env\", issue = \"74690\")]\n+#[unstable(feature = \"proc_macro_tracked_env\", issue = \"99515\")]\n pub mod tracked_env {\n     use std::env::{self, VarError};\n     use std::ffi::OsStr;\n@@ -1494,7 +1494,7 @@ pub mod tracked_env {\n     /// compilation, and will be able to rerun the build when the value of that variable changes.\n     /// Besides the dependency tracking this function should be equivalent to `env::var` from the\n     /// standard library, except that the argument must be UTF-8.\n-    #[unstable(feature = \"proc_macro_tracked_env\", issue = \"74690\")]\n+    #[unstable(feature = \"proc_macro_tracked_env\", issue = \"99515\")]\n     pub fn var<K: AsRef<OsStr> + AsRef<str>>(key: K) -> Result<String, VarError> {\n         let key: &str = key.as_ref();\n         let value = env::var(key);\n@@ -1504,13 +1504,13 @@ pub mod tracked_env {\n }\n \n /// Tracked access to additional files.\n-#[unstable(feature = \"track_path\", issue = \"73921\")]\n+#[unstable(feature = \"track_path\", issue = \"99515\")]\n pub mod tracked_path {\n \n     /// Track a file explicitly.\n     ///\n     /// Commonly used for tracking asset preprocessing.\n-    #[unstable(feature = \"track_path\", issue = \"73921\")]\n+    #[unstable(feature = \"track_path\", issue = \"99515\")]\n     pub fn path<P: AsRef<str>>(path: P) {\n         let path: &str = path.as_ref();\n         crate::bridge::client::FreeFunctions::track_path(path);"}, {"sha": "69409b77251cbe4ae9b46eca41c71218e33b500a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -949,7 +949,7 @@ table,\n #crate-search {\n \tmin-width: 115px;\n \tmargin-top: 5px;\n-\tpadding-left: 0.3125em;\n+\tpadding-left: 0.15em;\n \tpadding-right: 23px;\n \tborder: 1px solid;\n \tborder-radius: 4px;\n@@ -958,8 +958,6 @@ table,\n \t-moz-appearance: none;\n \t-webkit-appearance: none;\n \t/* Removes default arrow from firefox */\n-\ttext-indent: 0.01px;\n-\ttext-overflow: \"\";\n \tbackground-repeat: no-repeat;\n \tbackground-color: transparent;\n \tbackground-size: 20px;\n@@ -986,7 +984,6 @@ table,\n \tborder-radius: 2px;\n \tpadding: 8px;\n \tfont-size: 1rem;\n-\ttransition: border-color 300ms ease;\n \twidth: 100%;\n }\n "}, {"sha": "7ff8063904acef718711d7c9c8913fc0c798c232", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -184,7 +184,13 @@ details.rustdoc-toggle > summary::before {\n \n #crate-search, .search-input {\n \tbackground-color: #141920;\n-\t/* Without the `!important`, the border-color is ignored for `<select>`... */\n+\tborder-color: #424c57;\n+}\n+\n+#crate-search {\n+\t/* Without the `!important`, the border-color is ignored for `<select>`...\n+\t   It cannot be in the group above because `.search-input` has a different border color on\n+\t   hover. */\n \tborder-color: #424c57 !important;\n }\n "}, {"sha": "8e753f57682063d8598013ddeb4e46c244840d7a", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -159,7 +159,13 @@ details.rustdoc-toggle > summary::before {\n #crate-search, .search-input {\n \tcolor: #111;\n \tbackground-color: #f0f0f0;\n-\t/* Without the `!important`, the border-color is ignored for `<select>`... */\n+\tborder-color: #f0f0f0;\n+}\n+\n+#crate-search {\n+\t/* Without the `!important`, the border-color is ignored for `<select>`...\n+\t   It cannot be in the group above because `.search-input` has a different border color on\n+\t   hover. */\n \tborder-color: #f0f0f0 !important;\n }\n "}, {"sha": "40d965c39c390a0fb48bb895667592b4cd3adcf2", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -146,7 +146,13 @@ details.rustdoc-toggle > summary::before {\n \n #crate-search, .search-input {\n \tbackground-color: white;\n-\t/* Without the `!important`, the border-color is ignored for `<select>`... */\n+\tborder-color: #e0e0e0;\n+}\n+\n+#crate-search {\n+\t/* Without the `!important`, the border-color is ignored for `<select>`...\n+\t   It cannot be in the group above because `.search-input` has a different border color on\n+\t   hover. */\n \tborder-color: #e0e0e0 !important;\n }\n "}, {"sha": "faa2e3952096dbe5571619770419b9fb385567b5", "filename": "src/test/assembly/static-relocation-model.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -36,7 +36,8 @@ extern \"C\" {\n }\n \n // CHECK-LABEL: banana:\n-// x64: movb   chaenomeles{{(\\(%[a-z0-9]+\\))?}}, %{{[a-z0-9]+}}\n+// On the next line LLVM 14 produces a `movb`, whereas LLVM 15+ produces a `movzbl`.\n+// x64: {{movb|movzbl}}   chaenomeles{{(\\(%[a-z0-9]+\\))?}}, %{{[a-z0-9]+}}\n // A64:      adrp    [[REG:[a-z0-9]+]], chaenomeles\n // A64-NEXT: ldrb    {{[a-z0-9]+}}, {{\\[}}[[REG]], :lo12:chaenomeles]\n #[no_mangle]\n@@ -47,7 +48,7 @@ pub fn banana() -> u8 {\n }\n \n // CHECK-LABEL: peach:\n-// x64: movb    banana{{(\\(%[a-z0-9]+\\))?}}, %{{[a-z0-9]+}}\n+// x64: {{movb|movzbl}}    banana{{(\\(%[a-z0-9]+\\))?}}, %{{[a-z0-9]+}}\n // A64:      adrp    [[REG2:[a-z0-9]+]], banana\n // A64-NEXT: ldrb    {{[a-z0-9]+}}, {{\\[}}[[REG2]], :lo12:banana]\n #[no_mangle]\n@@ -59,7 +60,7 @@ pub fn peach() -> u8 {\n \n // CHECK-LABEL: mango:\n // x64:      movq    EXOCHORDA{{(\\(%[a-z0-9]+\\))?}}, %[[REG:[a-z0-9]+]]\n-// x64-NEXT: movb    (%[[REG]]), %{{[a-z0-9]+}}\n+// x64-NEXT: {{movb|movzbl}}   (%[[REG]]), %{{[a-z0-9]+}}\n // A64:      adrp    [[REG2:[a-z0-9]+]], EXOCHORDA\n // A64-NEXT: ldr     {{[a-z0-9]+}}, {{\\[}}[[REG2]], :lo12:EXOCHORDA]\n #[no_mangle]"}, {"sha": "1adf278ad32de1a97b6e04db54680cd2f06612ea", "filename": "src/test/debuginfo/basic-types-globals-lto.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a7468c60f8dbf5feb23ad840b174d7e57113a846/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7468c60f8dbf5feb23ad840b174d7e57113a846/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals-lto.rs?ref=a7468c60f8dbf5feb23ad840b174d7e57113a846", "patch": "@@ -1,81 +0,0 @@\n-// Caveat - gdb doesn't know about UTF-32 character encoding and will print a\n-// rust char as only its numerical value.\n-\n-// min-lldb-version: 310\n-// min-gdb-version: 8.0\n-\n-// no-prefer-dynamic\n-// compile-flags:-g -C lto\n-// gdb-command:run\n-// gdbg-command:print 'basic_types_globals::B'\n-// gdbr-command:print B\n-// gdb-check:$1 = false\n-// gdbg-command:print 'basic_types_globals::I'\n-// gdbr-command:print I\n-// gdb-check:$2 = -1\n-// gdbg-command:print 'basic_types_globals::C'\n-// gdbr-command:print/d C\n-// gdbg-check:$3 = 97\n-// gdbr-check:$3 = 97\n-// gdbg-command:print/d 'basic_types_globals::I8'\n-// gdbr-command:print I8\n-// gdb-check:$4 = 68\n-// gdbg-command:print 'basic_types_globals::I16'\n-// gdbr-command:print I16\n-// gdb-check:$5 = -16\n-// gdbg-command:print 'basic_types_globals::I32'\n-// gdbr-command:print I32\n-// gdb-check:$6 = -32\n-// gdbg-command:print 'basic_types_globals::I64'\n-// gdbr-command:print I64\n-// gdb-check:$7 = -64\n-// gdbg-command:print 'basic_types_globals::U'\n-// gdbr-command:print U\n-// gdb-check:$8 = 1\n-// gdbg-command:print/d 'basic_types_globals::U8'\n-// gdbr-command:print U8\n-// gdb-check:$9 = 100\n-// gdbg-command:print 'basic_types_globals::U16'\n-// gdbr-command:print U16\n-// gdb-check:$10 = 16\n-// gdbg-command:print 'basic_types_globals::U32'\n-// gdbr-command:print U32\n-// gdb-check:$11 = 32\n-// gdbg-command:print 'basic_types_globals::U64'\n-// gdbr-command:print U64\n-// gdb-check:$12 = 64\n-// gdbg-command:print 'basic_types_globals::F32'\n-// gdbr-command:print F32\n-// gdb-check:$13 = 2.5\n-// gdbg-command:print 'basic_types_globals::F64'\n-// gdbr-command:print F64\n-// gdb-check:$14 = 3.5\n-// gdb-command:continue\n-\n-#![allow(unused_variables)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-// N.B. These are `mut` only so they don't constant fold away.\n-static mut B: bool = false;\n-static mut I: isize = -1;\n-static mut C: char = 'a';\n-static mut I8: i8 = 68;\n-static mut I16: i16 = -16;\n-static mut I32: i32 = -32;\n-static mut I64: i64 = -64;\n-static mut U: usize = 1;\n-static mut U8: u8 = 100;\n-static mut U16: u16 = 16;\n-static mut U32: u32 = 32;\n-static mut U64: u64 = 64;\n-static mut F32: f32 = 2.5;\n-static mut F64: f64 = 3.5;\n-\n-fn main() {\n-    _zzz(); // #break\n-\n-    let a = unsafe { (B, I, C, I8, I16, I32, I64, U, U8, U16, U32, U64, F32, F64) };\n-}\n-\n-fn _zzz() {()}"}, {"sha": "8a3df8ba2d18eb6f5887d3f3f65905b483fd3362", "filename": "src/test/debuginfo/basic-types-globals.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types-globals.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -4,7 +4,13 @@\n // min-lldb-version: 310\n // min-gdb-version: 8.0\n \n+// revisions: lto no-lto\n+\n // compile-flags:-g\n+\n+// [lto] compile-flags:-C lto\n+// [lto] no-prefer-dynamic\n+\n // gdb-command:run\n // gdbg-command:print 'basic_types_globals::B'\n // gdbr-command:print B"}, {"sha": "44123b702df8ab9088f091c1fe2164539f8f8c25", "filename": "src/test/rustdoc-gui/search-input.goml", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,23 @@\n+// Ensures that the search input border color changes on focus.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": \"dark\"}\n+reload:\n+\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(224, 224, 224)\"})\n+click: \".search-input\"\n+focus: \".search-input\"\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(0, 141, 253)\"})\n+\n+local-storage: {\"rustdoc-theme\": \"light\"}\n+reload:\n+\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(224, 224, 224)\"})\n+click: \".search-input\"\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(102, 175, 233)\"})\n+\n+local-storage: {\"rustdoc-theme\": \"ayu\"}\n+reload:\n+\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(66, 76, 87)\"})\n+click: \".search-input\"\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(66, 76, 87)\"})"}, {"sha": "8464ba7c23cfe8a6cc3e7a5d8c9e5052c769d160", "filename": "src/test/rustdoc-gui/search-result-display.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-display.goml?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -18,7 +18,7 @@ assert-css: (\".search-results div.desc\", {\"width\": \"570px\"})\n size: (900, 900)\n \n // First we check the current width and position.\n-assert-css: (\"#crate-search\", {\"width\": \"222px\"})\n+assert-css: (\"#crate-search\", {\"width\": \"218px\"})\n compare-elements-position-near: (\n     \"#crate-search\",\n     \"#search-settings .search-results-title\","}, {"sha": "84f4cc7f4ccd81213009e336dd0088001f6ef57c", "filename": "src/test/ui/fmt/ifmt-bad-arg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -86,6 +86,9 @@ tenth number: {}\",\n     println!(\"{:foo}\", 1); //~ ERROR unknown format trait `foo`\n     println!(\"{5} {:4$} {6:7$}\", 1);\n     //~^ ERROR invalid reference to positional arguments 4, 5, 6 and 7 (there is 1 argument)\n+    let foo = 1;\n+    println!(\"{foo:0$}\");\n+    //~^ ERROR invalid reference to positional argument 0 (no arguments were given)\n \n     // We used to ICE here because we tried to unconditionally access the first argument, which\n     // doesn't exist."}, {"sha": "5439ee173985b7298424fd28cd99195662e4cf61", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -251,8 +251,19 @@ LL |     println!(\"{5} {:4$} {6:7$}\", 1);\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n+error: invalid reference to positional argument 0 (no arguments were given)\n+  --> $DIR/ifmt-bad-arg.rs:90:15\n+   |\n+LL |     println!(\"{foo:0$}\");\n+   |               ^^^^^--^\n+   |                    |\n+   |                    this width flag expects an `usize` argument at position 0, but no arguments were given\n+   |\n+   = note: positional arguments are zero-based\n+   = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n+\n error: 2 positional arguments in format string, but no arguments were given\n-  --> $DIR/ifmt-bad-arg.rs:92:15\n+  --> $DIR/ifmt-bad-arg.rs:95:15\n    |\n LL |     println!(\"{:.*}\");\n    |               ^^--^\n@@ -328,7 +339,7 @@ LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n    |            ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 37 previous errors\n \n Some errors have detailed explanations: E0308, E0425.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "025a5008d0f11f0d1aacfb8d041554be1dd149fc", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -91,10 +91,10 @@ LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<dyn Dummy>: Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:42:5\n+  --> $DIR/kindck-copy.rs:42:19\n    |\n LL |     assert_copy::<Box<dyn Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy>`\n+   |                   ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy>`\n    |\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n@@ -103,10 +103,10 @@ LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<dyn Dummy + Send>: Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:43:5\n+  --> $DIR/kindck-copy.rs:43:19\n    |\n LL |     assert_copy::<Box<dyn Dummy + Send>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy + Send>`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy + Send>`\n    |\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18"}, {"sha": "b7fb947854f04fe0ffb7c23e94b73931d028256f", "filename": "src/test/ui/macros/meta-variable-depth-outside-repeat.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Fmeta-variable-depth-outside-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Fmeta-variable-depth-outside-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmeta-variable-depth-outside-repeat.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,12 @@\n+#![feature(macro_metavar_expr)]\n+\n+macro_rules! metavar {\n+    ( $i:expr ) => {\n+        ${length(0)}\n+        //~^ ERROR meta-variable expression `length` with depth parameter must be called inside of a macro repetition\n+    };\n+}\n+\n+const _: i32 = metavar!(0);\n+\n+fn main() {}"}, {"sha": "fad150cadfca6ccd3c1f760dffa6bc5992b325ea", "filename": "src/test/ui/macros/meta-variable-depth-outside-repeat.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Fmeta-variable-depth-outside-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Fmeta-variable-depth-outside-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmeta-variable-depth-outside-repeat.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,8 @@\n+error: meta-variable expression `length` with depth parameter must be called inside of a macro repetition\n+  --> $DIR/meta-variable-depth-outside-repeat.rs:5:10\n+   |\n+LL |         ${length(0)}\n+   |          ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6a0d68bd6b16a73ffb060d55f71ea384cc8a7803", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/out-of-bounds-arguments.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fout-of-bounds-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fout-of-bounds-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fout-of-bounds-arguments.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -5,7 +5,7 @@ macro_rules! a {\n         (\n             ${count(foo, 0)},\n             ${count(foo, 10)},\n-            //~^ ERROR count depth must be less than 4\n+            //~^ ERROR depth parameter on meta-variable expression `count` must be less than 4\n         )\n     };\n }\n@@ -17,7 +17,7 @@ macro_rules! b {\n                 ${ignore(foo)}\n                 ${index(0)},\n                 ${index(10)},\n-                //~^ ERROR index depth must be less than 3\n+                //~^ ERROR depth parameter on meta-variable expression `index` must be less than 3\n             )* )* )*\n         )\n     };\n@@ -30,15 +30,14 @@ macro_rules! c {\n                 ${ignore(foo)}\n                 ${length(0)}\n                 ${length(10)}\n-                //~^ ERROR length depth must be less than 2\n+                //~^ ERROR depth parameter on meta-variable expression `length` must be less than 2\n             )* )*\n         )\n     };\n }\n \n-\n fn main() {\n     a!( { [ (a) ] [ (b c) ] } );\n     b!( { [ a b ] } );\n-    c!( { a } );\n+    c!({ a });\n }"}, {"sha": "236122b6465b2cdfe9f8ab960d1187c2a89a9c1d", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/out-of-bounds-arguments.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fout-of-bounds-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fout-of-bounds-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fout-of-bounds-arguments.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1,16 +1,16 @@\n-error: count depth must be less than 4\n+error: depth parameter on meta-variable expression `count` must be less than 4\n   --> $DIR/out-of-bounds-arguments.rs:7:14\n    |\n LL |             ${count(foo, 10)},\n    |              ^^^^^^^^^^^^^^^^\n \n-error: index depth must be less than 3\n+error: depth parameter on meta-variable expression `index` must be less than 3\n   --> $DIR/out-of-bounds-arguments.rs:19:18\n    |\n LL |                 ${index(10)},\n    |                  ^^^^^^^^^^^\n \n-error: length depth must be less than 2\n+error: depth parameter on meta-variable expression `length` must be less than 2\n   --> $DIR/out-of-bounds-arguments.rs:32:18\n    |\n LL |                 ${length(10)}"}, {"sha": "2cd51a439988db0102d10499e56f5e6aad70064b", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1,8 +1,11 @@\n error[E0277]: the type `&mut i32` may not be safely transferred across an unwind boundary\n-  --> $DIR/not-panic-safe.rs:8:5\n+  --> $DIR/not-panic-safe.rs:8:14\n    |\n LL |     assert::<&mut i32>();\n-   |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary\n+   |              -^^^^^^^\n+   |              |\n+   |              `&mut i32` may not be safely transferred across an unwind boundary\n+   |              help: consider removing the leading `&`-reference\n    |\n    = help: the trait `UnwindSafe` is not implemented for `&mut i32`\n    = note: `UnwindSafe` is implemented for `&i32`, but not for `&mut i32`"}, {"sha": "468be1bc144508b1e094ce66eb3d6872de7dba21", "filename": "src/test/ui/stability-attribute/auxiliary/stability-attribute-implies.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstability-attribute-implies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstability-attribute-implies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstability-attribute-implies.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,8 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"foo\", since = \"1.62.0\")]\n+pub fn foo() {}\n+\n+#[unstable(feature = \"foobar\", issue = \"1\", implied_by = \"foo\")]\n+pub fn foobar() {}"}, {"sha": "613878536721b3eeda65d59930abcd2c714811b4", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-missing.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,10 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+// Tests that `implied_by = \"bar\"` results in an error being emitted if `bar` does not exist.\n+\n+#[unstable(feature = \"foobar\", issue = \"1\", implied_by = \"bar\")]\n+//~^ ERROR feature `bar` implying `foobar` does not exist\n+pub fn foobar() {}\n+\n+fn main() {}"}, {"sha": "ff1856f1763f94573db427224a9fed0c9a000814", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-missing.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-missing.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,8 @@\n+error: feature `bar` implying `foobar` does not exist\n+  --> $DIR/stability-attribute-implies-missing.rs:6:1\n+   |\n+LL | #[unstable(feature = \"foobar\", issue = \"1\", implied_by = \"bar\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "947f9f73eff11a663ac21dd597d3a57c285169b3", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-no-feature.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:stability-attribute-implies.rs\n+\n+// Tests that despite the `foobar` feature being implied by now-stable feature `foo`, if `foobar`\n+// isn't allowed in this crate then an error will be emitted.\n+\n+extern crate stability_attribute_implies;\n+use stability_attribute_implies::{foo, foobar};\n+//~^ ERROR use of unstable library feature 'foobar'\n+\n+fn main() {\n+    foo(); // no error - stable\n+    foobar(); //~ ERROR use of unstable library feature 'foobar'\n+}"}, {"sha": "c2331f6766c4fc0d0ac5bccc2d17701b93b0fab4", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-no-feature.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: use of unstable library feature 'foobar'\n+  --> $DIR/stability-attribute-implies-no-feature.rs:7:40\n+   |\n+LL | use stability_attribute_implies::{foo, foobar};\n+   |                                        ^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(foobar)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'foobar'\n+  --> $DIR/stability-attribute-implies-no-feature.rs:12:5\n+   |\n+LL |     foobar();\n+   |     ^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(foobar)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1a2d8e271de043bd20b8c8170cd37148a659469a", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-stable.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:stability-attribute-implies.rs\n+#![deny(stable_features)]\n+#![feature(foo)]\n+//~^ ERROR the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n+\n+// Tests that the use of `implied_by` in the `#[unstable]` attribute results in a diagnostic\n+// mentioning partial stabilization, and that given the implied unstable feature is unused (there\n+// is no `foobar` call), that the compiler suggests removing the flag.\n+\n+extern crate stability_attribute_implies;\n+use stability_attribute_implies::foo;\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "c9b3f07cc70b15eab8092a85a745e1e53615bba0", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-stable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,22 @@\n+error: the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n+  --> $DIR/stability-attribute-implies-using-stable.rs:3:12\n+   |\n+LL | #![feature(foo)]\n+   |            ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/stability-attribute-implies-using-stable.rs:2:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `foobar`\n+   |\n+LL | #![feature(foobar)]\n+   |            ~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(foo)]\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "3c73c5abf3b54dec533b85c5a3e0ee372182f9d6", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-unstable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:stability-attribute-implies.rs\n+#![deny(stable_features)]\n+#![feature(foo)]\n+//~^ ERROR the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n+\n+// Tests that the use of `implied_by` in the `#[unstable]` attribute results in a diagnostic\n+// mentioning partial stabilization and that given the implied unstable feature is used (there is a\n+// `foobar` call), that the compiler suggests changing to that feature and doesn't error about its\n+// use.\n+\n+extern crate stability_attribute_implies;\n+use stability_attribute_implies::{foo, foobar};\n+\n+fn main() {\n+    foo();\n+    foobar(); // no error!\n+}"}, {"sha": "9a5c7ef5a476221c5c6432befccaaa0ce29f9b49", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -0,0 +1,22 @@\n+error: the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n+  --> $DIR/stability-attribute-implies-using-unstable.rs:3:12\n+   |\n+LL | #![feature(foo)]\n+   |            ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/stability-attribute-implies-using-unstable.rs:2:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `foobar`\n+   |\n+LL | #![feature(foobar)]\n+   |            ~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(foo)]\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "8dbcc6c97efd5fea50b7fe63657218a5f00c07c2", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -8,7 +8,7 @@ error[E0541]: unknown meta item 'sinse'\n   --> $DIR/stability-attribute-sanity-2.rs:10:25\n    |\n LL | #[stable(feature = \"a\", sinse = \"1.0.0\")]\n-   |                         ^^^^^^^^^^^^^^^ expected one of `since`, `note`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `feature`, `since`\n \n error[E0545]: `issue` must be a non-zero numeric string or \"none\"\n   --> $DIR/stability-attribute-sanity-2.rs:13:27"}, {"sha": "079230b2a3160e5462cb70d72b0655235be734a2", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -14,7 +14,7 @@ error[E0541]: unknown meta item 'reason'\n   --> $DIR/stability-attribute-sanity.rs:8:42\n    |\n LL |     #[stable(feature = \"a\", since = \"b\", reason)]\n-   |                                          ^^^^^^ expected one of `since`, `note`\n+   |                                          ^^^^^^ expected one of `feature`, `since`\n \n error[E0539]: incorrect meta item\n   --> $DIR/stability-attribute-sanity.rs:11:29"}, {"sha": "56a68f3a2312c92f33d47fe4aba3f390344338ae", "filename": "src/test/ui/traits/issue-32963.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -7,6 +7,5 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n fn main() {\n     size_of_copy::<dyn Misc + Copy>();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n-    //~| ERROR only auto traits can be used as additional traits in a trait object\n     //~| ERROR the trait bound `dyn Misc: Copy` is not satisfied\n }"}, {"sha": "bad45e54d64288053c9e35355542f3b95019a5a7", "filename": "src/test/ui/traits/issue-32963.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-32963.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -9,30 +9,19 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n    = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n-error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/issue-32963.rs:8:31\n-   |\n-LL |     size_of_copy::<dyn Misc + Copy>();\n-   |                        ----   ^^^^ additional non-auto trait\n-   |                        |\n-   |                        first non-auto trait\n-   |\n-   = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Misc + Copy {}`\n-   = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n-\n error[E0277]: the trait bound `dyn Misc: Copy` is not satisfied\n-  --> $DIR/issue-32963.rs:8:5\n+  --> $DIR/issue-32963.rs:8:20\n    |\n LL |     size_of_copy::<dyn Misc + Copy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `dyn Misc`\n+   |                    ^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `dyn Misc`\n    |\n note: required by a bound in `size_of_copy`\n   --> $DIR/issue-32963.rs:5:20\n    |\n LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n    |                    ^^^^ required by this bound in `size_of_copy`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0225, E0277.\n For more information about an error, try `rustc --explain E0225`."}, {"sha": "d4d9b4967478ada0cedd6115bc14d1a5638b3b4b", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -85,10 +85,10 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      ^ required by this bound in `std::mem::size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/suggest-where-clause.rs:31:5\n+  --> $DIR/suggest-where-clause.rs:31:20\n    |\n LL |     mem::size_of::<[&U]>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[&U]`\n note: required by a bound in `std::mem::size_of`"}, {"sha": "468a14762c0d70e14504c26b6e1993f745896b7a", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `<T as Trait>::AssocType` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-assoc-type.rs:11:5\n+  --> $DIR/typeck-default-trait-impl-assoc-type.rs:11:15\n    |\n LL |     is_send::<T::AssocType>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n+   |               ^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `<T as Trait>::AssocType`\n note: required by a bound in `is_send`"}, {"sha": "a3b32d2c1c8ceeabc6986304b9878eb2dac09496", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output = ()>: Eq<dyn Foo<(isize,), Output = ()>>` is not satisfied\n-  --> $DIR/unboxed-closure-sugar-default.rs:21:5\n+  --> $DIR/unboxed-closure-sugar-default.rs:21:10\n    |\n LL |     eq::<dyn Foo<(isize,), isize, Output=()>, dyn Foo(isize)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`\n    |\n note: required by a bound in `eq`\n   --> $DIR/unboxed-closure-sugar-default.rs:14:40"}, {"sha": "acf0227a79b8c523702c3245721656ab39707e1a", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -42,7 +42,7 @@ fn test<'a,'b>() {\n     // Errors expected:\n     eq::< dyn Foo<(),Output=()>,\n           dyn Foo(char)                                               >();\n-    //~^^ ERROR E0277\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "bccbf307ae15734e6212a7e1f7e3b2b6d17b1313", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1,9 +1,8 @@\n error[E0277]: the trait bound `dyn Foo<(char,), Output = ()>: Eq<dyn Foo<(), Output = ()>>` is not satisfied\n-  --> $DIR/unboxed-closure-sugar-equiv.rs:43:5\n+  --> $DIR/unboxed-closure-sugar-equiv.rs:44:11\n    |\n-LL | /     eq::< dyn Foo<(),Output=()>,\n-LL | |           dyn Foo(char)                                               >();\n-   | |_______________________________________________________________________^ the trait `Eq<dyn Foo<(), Output = ()>>` is not implemented for `dyn Foo<(char,), Output = ()>`\n+LL |           dyn Foo(char)                                               >();\n+   |           ^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(), Output = ()>>` is not implemented for `dyn Foo<(char,), Output = ()>`\n    |\n note: required by a bound in `eq`\n   --> $DIR/unboxed-closure-sugar-equiv.rs:16:28"}, {"sha": "02f4d29a2f05f9c43cbee47df46460dc05c46204", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -535,6 +535,29 @@ impl TestProps {\n     }\n }\n \n+pub fn line_directive<'line>(\n+    comment: &str,\n+    ln: &'line str,\n+) -> Option<(Option<&'line str>, &'line str)> {\n+    if ln.starts_with(comment) {\n+        let ln = ln[comment.len()..].trim_start();\n+        if ln.starts_with('[') {\n+            // A comment like `//[foo]` is specific to revision `foo`\n+            if let Some(close_brace) = ln.find(']') {\n+                let lncfg = &ln[1..close_brace];\n+\n+                Some((Some(lncfg), ln[(close_brace + 1)..].trim_start()))\n+            } else {\n+                panic!(\"malformed condition directive: expected `{}[foo]`, found `{}`\", comment, ln)\n+            }\n+        } else {\n+            Some((None, ln))\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>, &str)) {\n     if testfile.is_dir() {\n         return;\n@@ -557,17 +580,8 @@ fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>\n         let ln = ln.trim();\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n             return;\n-        } else if ln.starts_with(comment) && ln[comment.len()..].trim_start().starts_with('[') {\n-            // A comment like `//[foo]` is specific to revision `foo`\n-            if let Some(close_brace) = ln.find(']') {\n-                let open_brace = ln.find('[').unwrap();\n-                let lncfg = &ln[open_brace + 1..close_brace];\n-                it(Some(lncfg), ln[(close_brace + 1)..].trim_start());\n-            } else {\n-                panic!(\"malformed condition directive: expected `{}[foo]`, found `{}`\", comment, ln)\n-            }\n-        } else if ln.starts_with(comment) {\n-            it(None, ln[comment.len()..].trim_start());\n+        } else if let Some((lncfg, ln)) = line_directive(comment, ln) {\n+            it(lncfg, ln);\n         }\n     }\n }"}, {"sha": "26730fcec4cec4099c8eb85353144329dae80e72", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -648,8 +648,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_cdb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n@@ -695,7 +693,12 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };\n@@ -756,8 +759,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_gdb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         let config = Config {\n             target_rustcflags: self.cleanup_debug_info_options(&self.config.target_rustcflags),\n             host_rustcflags: self.cleanup_debug_info_options(&self.config.host_rustcflags),\n@@ -783,7 +784,12 @@ impl<'test> TestCx<'test> {\n         };\n \n         let DebuggerCommands { commands, check_lines, breakpoint_lines } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };\n@@ -1005,8 +1011,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_debuginfo_lldb_test(&self) {\n-        assert!(self.revision.is_none(), \"revisions not relevant here\");\n-\n         if self.config.lldb_python_dir.is_none() {\n             self.fatal(\"Can't run LLDB test because LLDB's python path is not set.\");\n         }\n@@ -1059,7 +1063,12 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+            match DebuggerCommands::parse_from(\n+                &self.testpaths.file,\n+                self.config,\n+                prefixes,\n+                self.revision,\n+            ) {\n                 Ok(cmds) => cmds,\n                 Err(e) => self.fatal(&e),\n             };"}, {"sha": "379ff0bab408a3120bda8803b9c016a3e216377b", "filename": "src/tools/compiletest/src/runtest/debugger.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68e7ebc38cb42b8b237392b28045edeec761503/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs?ref=d68e7ebc38cb42b8b237392b28045edeec761503", "patch": "@@ -1,4 +1,5 @@\n use crate::common::Config;\n+use crate::header::line_directive;\n use crate::runtest::ProcRes;\n \n use std::fs::File;\n@@ -16,6 +17,7 @@ impl DebuggerCommands {\n         file: &Path,\n         config: &Config,\n         debugger_prefixes: &[&str],\n+        rev: Option<&str>,\n     ) -> Result<Self, String> {\n         let directives = debugger_prefixes\n             .iter()\n@@ -25,13 +27,19 @@ impl DebuggerCommands {\n         let mut breakpoint_lines = vec![];\n         let mut commands = vec![];\n         let mut check_lines = vec![];\n-        let mut counter = 1;\n+        let mut counter = 0;\n         let reader = BufReader::new(File::open(file).unwrap());\n         for line in reader.lines() {\n+            counter += 1;\n             match line {\n                 Ok(line) => {\n-                    let line =\n-                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n+                    let (lnrev, line) = line_directive(\"//\", &line).unwrap_or((None, &line));\n+\n+                    // Skip any revision specific directive that doesn't match the current\n+                    // revision being tested\n+                    if lnrev.is_some() && lnrev != rev {\n+                        continue;\n+                    }\n \n                     if line.contains(\"#break\") {\n                         breakpoint_lines.push(counter);\n@@ -49,7 +57,6 @@ impl DebuggerCommands {\n                 }\n                 Err(e) => return Err(format!(\"Error while parsing debugger commands: {}\", e)),\n             }\n-            counter += 1;\n         }\n \n         Ok(Self { commands, check_lines, breakpoint_lines })"}]}