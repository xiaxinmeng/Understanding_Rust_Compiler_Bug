{"sha": "2357c443e02b185fe6be3a8ab54f3d04d1c80dd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNTdjNDQzZTAyYjE4NWZlNmJlM2E4YWI1NGYzZDA0ZDFjODBkZDA=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-20T15:09:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:31Z"}, "message": "Simplify and cleanup bitv examples.", "tree": {"sha": "85e30dfa0a015d1e2880e5f05b9c8ef9063246aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85e30dfa0a015d1e2880e5f05b9c8ef9063246aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0", "html_url": "https://github.com/rust-lang/rust/commit/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2957644e087844f92fe84647b286f1f999f040c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2957644e087844f92fe84647b286f1f999f040c1", "html_url": "https://github.com/rust-lang/rust/commit/2957644e087844f92fe84647b286f1f999f040c1"}], "stats": {"total": 194, "additions": 120, "deletions": 74}, "files": [{"sha": "f1e9eabe8d1ede1a9fae8f4473243ffcef9c1b57", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 120, "deletions": 74, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2357c443e02b185fe6be3a8ab54f3d04d1c80dd0/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=2357c443e02b185fe6be3a8ab54f3d04d1c80dd0", "patch": "@@ -98,7 +98,7 @@ enum BitvVariant { Big(BigBitv), Small(SmallBitv) }\n /// # Example\n ///\n /// ```rust\n-/// use collections::bitv::Bitv;\n+/// use collections::Bitv;\n ///\n /// let mut bv = Bitv::with_capacity(10, false);\n ///\n@@ -249,9 +249,9 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let bv: Bitv = [false, true].iter().map(|n| *n).collect();\n+    /// let bv = bitv::from_bytes([0b01100000]);\n     /// assert_eq!(bv.get(0), false);\n     /// assert_eq!(bv.get(1), true);\n     ///\n@@ -297,11 +297,15 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let mut bv: Bitv = [false, true, false].iter().map(|n| *n).collect();\n+    /// let before = 0b01100000;\n+    /// let after  = 0b11111111;\n+    ///\n+    /// let mut bv = bitv::from_bytes([before]);\n     /// bv.set_all();\n-    /// assert!(bv.eq_vec([true, true, true]));\n+    /// assert_eq!(bv, bitv::from_bytes([after]));\n+    /// ```\n     #[inline]\n     pub fn set_all(&mut self) {\n         for w in self.storage.mut_iter() { *w = !0u; }\n@@ -312,11 +316,15 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::Bitv;\n+    /// use std::collections::bitv;\n+    ///\n+    /// let before = 0b01100000;\n+    /// let after  = 0b10011111;\n     ///\n-    /// let mut bv: Bitv = [false, true, false].iter().map(|n| *n).collect();\n+    /// let mut bv = bitv::from_bytes([before]);\n     /// bv.negate();\n-    /// assert!(bv.eq_vec([true, false, true]));\n+    /// assert_eq!(bv, bitv::from_bytes([after]));\n+    /// ```\n     #[inline]\n     pub fn negate(&mut self) {\n         for w in self.storage.mut_iter() { *w = !*w; }\n@@ -334,14 +342,17 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::Bitv;\n+    /// use std::collections::bitv;\n+    ///\n+    /// let a   = 0b01100100;\n+    /// let b   = 0b01011010;\n+    /// let res = 0b01111110;\n     ///\n-    /// let mut bv1: Bitv = [false, true, true, false].iter().map(|n| *n).collect();\n-    /// let bv2: Bitv = [false, true, false, true].iter().map(|n| *n).collect();\n-    /// let res: Bitv = [false, true, true, true].iter().map(|n| *n).collect();\n+    /// let mut a = bitv::from_bytes([a]);\n+    /// let b = bitv::from_bytes([b]);\n     ///\n-    /// assert!(bv1.union(&bv2));\n-    /// assert_eq!(bv1, res);\n+    /// assert!(a.union(&b));\n+    /// assert_eq!(a, bitv::from_bytes([res]));\n     /// ```\n     #[inline]\n     pub fn union(&mut self, other: &Bitv) -> bool {\n@@ -360,14 +371,17 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let mut bv1: Bitv = [false, true, true, false].iter().map(|n| *n).collect();\n-    /// let bv2: Bitv = [false, true, false, true].iter().map(|n| *n).collect();\n-    /// let res: Bitv = [false, true, false, false].iter().map(|n| *n).collect();\n+    /// let a   = 0b01100100;\n+    /// let b   = 0b01011010;\n+    /// let res = 0b01000000;\n     ///\n-    /// assert!(bv1.intersect(&bv2));\n-    /// assert_eq!(bv1, res);\n+    /// let mut a = bitv::from_bytes([a]);\n+    /// let b = bitv::from_bytes([b]);\n+    ///\n+    /// assert!(a.intersect(&b));\n+    /// assert_eq!(a, bitv::from_bytes([res]));\n     /// ```\n     #[inline]\n     pub fn intersect(&mut self, other: &Bitv) -> bool {\n@@ -387,14 +401,24 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::Bitv;\n+    /// use std::collections::bitv;\n+    ///\n+    /// let a   = 0b01100100;\n+    /// let b   = 0b01011010;\n+    /// let a_b = 0b00100100; // a - b\n+    /// let b_a = 0b00011010; // b - a\n+    ///\n+    /// let mut bva = bitv::from_bytes([a]);\n+    /// let bvb = bitv::from_bytes([b]);\n     ///\n-    /// let mut bv1: Bitv = [false, true, true, false].iter().map(|n| *n).collect();\n-    /// let bv2: Bitv = [false, true, false, true].iter().map(|n| *n).collect();\n-    /// let res: Bitv = [false, false, true, false].iter().map(|n| *n).collect();\n+    /// assert!(bva.difference(&bvb));\n+    /// assert_eq!(bva, bitv::from_bytes([a_b]));\n     ///\n-    /// assert!(bv1.difference(&bv2));\n-    /// assert_eq!(bv1, res);\n+    /// let bva = bitv::from_bytes([a]);\n+    /// let mut bvb = bitv::from_bytes([b]);\n+    ///\n+    /// assert!(bvb.difference(&bva));\n+    /// assert_eq!(bvb, bitv::from_bytes([b_a]));\n     /// ```\n     #[inline]\n     pub fn difference(&mut self, other: &Bitv) -> bool {\n@@ -406,7 +430,7 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::Bitv;\n     ///\n     /// let mut bv = Bitv::with_capacity(5, true);\n     /// assert_eq!(bv.all(), true);\n@@ -429,16 +453,10 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n-    ///\n-    /// let mut bv = Bitv::with_capacity(10, false);\n-    /// bv.set(1, true);\n-    /// bv.set(2, true);\n-    /// bv.set(3, true);\n-    /// bv.set(5, true);\n-    /// bv.set(8, true);\n+    /// use std::collections::bitv;\n     ///\n-    /// assert_eq!(bv.iter().filter(|x| *x).count(), 5);\n+    /// let bv = bitv::from_bytes([0b01110100, 0b10010010]);\n+    /// assert_eq!(bv.iter().filter(|x| *x).count(), 7);\n     /// ```\n     #[inline]\n     pub fn iter<'a>(&'a self) -> Bits<'a> {\n@@ -450,7 +468,7 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::Bitv;\n     ///\n     /// let mut bv = Bitv::with_capacity(10, false);\n     /// assert_eq!(bv.none(), true);\n@@ -467,7 +485,7 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::Bitv;\n     ///\n     /// let mut bv = Bitv::with_capacity(10, false);\n     /// assert_eq!(bv.any(), false);\n@@ -488,7 +506,7 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::Bitv;\n     ///\n     /// let mut bv = Bitv::with_capacity(3, true);\n     /// bv.set(1, false);\n@@ -530,10 +548,11 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let bv: Bitv = [true, false, true].iter().map(|n| *n).collect();\n-    /// assert_eq!(bv.to_bools(), vec!(true, false, true));\n+    /// let bv = bitv::from_bytes([0b10100000]);\n+    /// assert_eq!(bv.to_bools(), vec!(true, false, true, false,\n+    ///                                false, false, false, false));\n     /// ```\n     pub fn to_bools(&self) -> Vec<bool> {\n         Vec::from_fn(self.nbits, |i| self.get(i))\n@@ -548,11 +567,12 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let bv: Bitv = [false, true, true].iter().map(|n| *n).collect();\n+    /// let bv = bitv::from_bytes([0b10100000]);\n     ///\n-    /// assert!(bv.eq_vec([false, true, true]));\n+    /// assert!(bv.eq_vec([true, false, true, false,\n+    ///                    false, false, false, false]));\n     /// ```\n     pub fn eq_vec(&self, v: &[bool]) -> bool {\n         assert_eq!(self.nbits, v.len());\n@@ -572,9 +592,9 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let mut bv: Bitv = [false, true, true, false].iter().map(|n| *n).collect();\n+    /// let mut bv = bitv::from_bytes([0b01001011]);\n     /// bv.truncate(2);\n     /// assert!(bv.eq_vec([false, true]));\n     /// ```\n@@ -595,7 +615,7 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::Bitv;\n     ///\n     /// let mut bv = Bitv::with_capacity(3, false);\n     /// bv.reserve(10);\n@@ -616,7 +636,7 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::Bitv;\n     ///\n     /// let mut bv = Bitv::new();\n     /// bv.reserve(10);\n@@ -632,11 +652,12 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let mut bv: Bitv = [false, true, true, false].iter().map(|n| *n).collect();\n+    /// let mut bv = bitv::from_bytes([0b01001011]);\n     /// bv.grow(2, true);\n-    /// assert!(bv.eq_vec([false, true, true, false, true, true]));\n+    /// assert_eq!(bv.len(), 10);\n+    /// assert_eq!(bv.to_bytes(), vec!(0b01001011, 0b11000000));\n     /// ```\n     pub fn grow(&mut self, n: uint, value: bool) {\n         let new_nbits = self.nbits + n;\n@@ -676,11 +697,13 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::bitv;\n     ///\n-    /// let mut bv: Bitv = [false, true, true, false].iter().map(|n| *n).collect();\n+    /// let mut bv = bitv::from_bytes([0b01001001]);\n+    /// assert_eq!(bv.pop(), true);\n     /// assert_eq!(bv.pop(), false);\n-    /// assert!(bv.eq_vec([false, true, true]));\n+    /// assert_eq!(bv.len(), 6);\n+    /// assert_eq!(bv.to_bytes(), vec!(0b01001000));\n     /// ```\n     pub fn pop(&mut self) -> bool {\n         let ret = self.get(self.nbits - 1);\n@@ -697,12 +720,12 @@ impl Bitv {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::bitv::Bitv;\n+    /// use std::collections::Bitv;\n     ///\n-    /// let mut bv: Bitv = [false, true].iter().map(|n| *n).collect();\n+    /// let mut bv = Bitv::new();\n     /// bv.push(true);\n     /// bv.push(false);\n-    /// assert!(bv.eq_vec([false, true, true, false]));\n+    /// assert!(bv.eq_vec([true, false]));\n     /// ```\n     pub fn push(&mut self, elem: bool) {\n         let insert_pos = self.nbits;\n@@ -974,9 +997,9 @@ impl BitvSet {\n     /// # Example\n     ///\n     /// ```\n-    /// use std::collections::{Bitv, BitvSet};\n+    /// use std::collections::{bitv, BitvSet};\n     ///\n-    /// let bv: Bitv = [false, true, true, false].iter().map(|n| *n).collect();\n+    /// let bv = bitv::from_bytes([0b01100000]);\n     /// let s = BitvSet::from_bitv(bv);\n     ///\n     /// // Print 1, 2 in arbitrary order\n@@ -1279,11 +1302,15 @@ impl BitvSet {\n     /// use std::collections::BitvSet;\n     /// use std::collections::bitv;\n     ///\n-    /// let mut a = BitvSet::from_bitv(bitv::from_bytes([0b01101000]));\n-    /// let b = BitvSet::from_bitv(bitv::from_bytes([0b10100000]));\n+    /// let a   = 0b01101000;\n+    /// let b   = 0b10100000;\n+    /// let res = 0b11101000;\n+    ///\n+    /// let mut a = BitvSet::from_bitv(bitv::from_bytes([a]));\n+    /// let b = BitvSet::from_bitv(bitv::from_bytes([b]));\n     ///\n     /// a.union_with(&b);\n-    /// assert_eq!(a.unwrap(), bitv::from_bytes([0b11101000]));\n+    /// assert_eq!(a.unwrap(), bitv::from_bytes([res]));\n     /// ```\n     #[inline]\n     pub fn union_with(&mut self, other: &BitvSet) {\n@@ -1298,11 +1325,15 @@ impl BitvSet {\n     /// use std::collections::BitvSet;\n     /// use std::collections::bitv;\n     ///\n-    /// let mut a = BitvSet::from_bitv(bitv::from_bytes([0b01101000]));\n-    /// let b = BitvSet::from_bitv(bitv::from_bytes([0b10100000]));\n+    /// let a   = 0b01101000;\n+    /// let b   = 0b10100000;\n+    /// let res = 0b00100000;\n+    ///\n+    /// let mut a = BitvSet::from_bitv(bitv::from_bytes([a]));\n+    /// let b = BitvSet::from_bitv(bitv::from_bytes([b]));\n     ///\n     /// a.intersect_with(&b);\n-    /// assert_eq!(a.unwrap(), bitv::from_bytes([0b00100000]));\n+    /// assert_eq!(a.unwrap(), bitv::from_bytes([res]));\n     /// ```\n     #[inline]\n     pub fn intersect_with(&mut self, other: &BitvSet) {\n@@ -1317,11 +1348,22 @@ impl BitvSet {\n     /// use std::collections::BitvSet;\n     /// use std::collections::bitv;\n     ///\n-    /// let mut a = BitvSet::from_bitv(bitv::from_bytes([0b01101000]));\n-    /// let b = BitvSet::from_bitv(bitv::from_bytes([0b10100000]));\n+    /// let a   = 0b01101000;\n+    /// let b   = 0b10100000;\n+    /// let a_b = 0b01001000; // a - b\n+    /// let b_a = 0b10000000; // b - a\n+    ///\n+    /// let mut bva = BitvSet::from_bitv(bitv::from_bytes([a]));\n+    /// let bvb = BitvSet::from_bitv(bitv::from_bytes([b]));\n+    ///\n+    /// bva.difference_with(&bvb);\n+    /// assert_eq!(bva.unwrap(), bitv::from_bytes([a_b]));\n     ///\n-    /// a.difference_with(&b);\n-    /// assert_eq!(a.unwrap(), bitv::from_bytes([0b01001000]));\n+    /// let bva = BitvSet::from_bitv(bitv::from_bytes([a]));\n+    /// let mut bvb = BitvSet::from_bitv(bitv::from_bytes([b]));\n+    ///\n+    /// bvb.difference_with(&bva);\n+    /// assert_eq!(bvb.unwrap(), bitv::from_bytes([b_a]));\n     /// ```\n     #[inline]\n     pub fn difference_with(&mut self, other: &BitvSet) {\n@@ -1336,11 +1378,15 @@ impl BitvSet {\n     /// use std::collections::BitvSet;\n     /// use std::collections::bitv;\n     ///\n-    /// let mut a = BitvSet::from_bitv(bitv::from_bytes([0b01101000]));\n-    /// let b = BitvSet::from_bitv(bitv::from_bytes([0b10100000]));\n+    /// let a   = 0b01101000;\n+    /// let b   = 0b10100000;\n+    /// let res = 0b11001000;\n+    ///\n+    /// let mut a = BitvSet::from_bitv(bitv::from_bytes([a]));\n+    /// let b = BitvSet::from_bitv(bitv::from_bytes([b]));\n     ///\n     /// a.symmetric_difference_with(&b);\n-    /// assert_eq!(a.unwrap(), bitv::from_bytes([0b11001000]));\n+    /// assert_eq!(a.unwrap(), bitv::from_bytes([res]));\n     /// ```\n     #[inline]\n     pub fn symmetric_difference_with(&mut self, other: &BitvSet) {"}]}