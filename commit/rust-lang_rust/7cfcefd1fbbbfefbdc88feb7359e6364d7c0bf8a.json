{"sha": "7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZmNlZmQxZmJiYmZlZmJkYzg4ZmViNzM1OWU2MzY0ZDdjMGJmOGE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-08-27T04:09:34Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-08-27T04:09:34Z"}, "message": "add projection_ty_from_predicates query", "tree": {"sha": "14a744cd7272d1a3b0034004be3fc549fb83c583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a744cd7272d1a3b0034004be3fc549fb83c583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "html_url": "https://github.com/rust-lang/rust/commit/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee206a80dab320ee76a2aa9324c587368df3921", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee206a80dab320ee76a2aa9324c587368df3921", "html_url": "https://github.com/rust-lang/rust/commit/8ee206a80dab320ee76a2aa9324c587368df3921"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "d72ed72e3a8aceaa19e070b0e4d08b52678cb6c1", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "patch": "@@ -1574,17 +1574,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .unwrap()\n                 .def_id;\n \n-            let mut projection_ty = None;\n-            for (predicate, _) in self.tcx.predicates_of(def_id).predicates {\n-                if let ty::PredicateAtom::Projection(projection_predicate) =\n-                    predicate.skip_binders()\n-                {\n-                    if item_def_id == projection_predicate.projection_ty.item_def_id {\n-                        projection_ty = Some(projection_predicate.projection_ty);\n-                        break;\n-                    }\n-                }\n-            }\n+            let projection_ty = self.tcx.projection_ty_from_predicates((def_id, item_def_id));\n             if let Some(projection_ty) = projection_ty {\n                 let projection_query = self.canonicalize_query(\n                     &ParamEnvAnd { param_env: self.tcx.param_env(def_id), value: projection_ty },"}, {"sha": "e05752f08f631d299c8c150c36fe196c1e5da8f0", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "patch": "@@ -173,6 +173,10 @@ rustc_queries! {\n             desc { |tcx| \"finding projection predicates for `{}`\", tcx.def_path_str(key) }\n         }\n \n+        query projection_ty_from_predicates(key: (DefId, DefId)) -> Option<ty::ProjectionTy<'tcx>> {\n+            desc { |tcx| \"finding projection type inside predicates of `{}`\", tcx.def_path_str(key.0) }\n+        }\n+\n         query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLib>> {\n             desc { \"looking up the native libraries of a linked crate\" }\n         }"}, {"sha": "82ed8fda8b489ea6127f3f67fd97bf82bfc5021d", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "patch": "@@ -1523,15 +1523,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_def_id =\n             self.tcx.associated_items(future_trait).in_definition_order().next().unwrap().def_id;\n \n-        let mut projection_ty = None;\n-        for (predicate, _) in self.tcx.predicates_of(def_id).predicates {\n-            if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n-                if item_def_id == projection_predicate.projection_ty.item_def_id {\n-                    projection_ty = Some(projection_predicate.projection_ty);\n-                    break;\n-                }\n-            }\n-        }\n+        let projection_ty = self.tcx.projection_ty_from_predicates((def_id, item_def_id));\n         debug!(\"suggest_await_on_field_access: projection_ty={:?}\", projection_ty);\n \n         let cause = self.misc(expr.span);"}, {"sha": "5cae66bc5dac6e3635d2eebc4f8039f5bc20cd1b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "patch": "@@ -870,7 +870,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call: &hir::Expr<'_>,\n         span: Span,\n     ) {\n-        if let ty::Opaque(def_id, _substs) = ty.kind {\n+        if let ty::Opaque(def_id, _) = ty.kind {\n             let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n             // Future::Output\n             let item_def_id = self\n@@ -881,17 +881,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .unwrap()\n                 .def_id;\n \n-            let mut projection_ty = None;\n-            for (predicate, _) in self.tcx.predicates_of(def_id).predicates {\n-                if let ty::PredicateAtom::Projection(projection_predicate) =\n-                    predicate.skip_binders()\n-                {\n-                    if item_def_id == projection_predicate.projection_ty.item_def_id {\n-                        projection_ty = Some(projection_predicate.projection_ty);\n-                        break;\n-                    }\n-                }\n-            }\n+            let projection_ty = self.tcx.projection_ty_from_predicates((def_id, item_def_id));\n             let cause = self.misc(span);\n             let mut selcx = SelectionContext::new(&self.infcx);\n             let mut obligations = vec![];"}, {"sha": "7a3f7ec56a2ce78d6fd043334882ea0e60eaa28b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7cfcefd1fbbbfefbdc88feb7359e6364d7c0bf8a", "patch": "@@ -70,6 +70,7 @@ pub fn provide(providers: &mut Providers) {\n         generics_of,\n         predicates_of,\n         predicates_defined_on,\n+        projection_ty_from_predicates,\n         explicit_predicates_of,\n         super_predicates_of,\n         type_param_predicates,\n@@ -2051,6 +2052,28 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     result\n }\n \n+fn projection_ty_from_predicates(\n+    tcx: TyCtxt<'tcx>,\n+    key: (\n+        // ty_def_id\n+        DefId,\n+        // def_id of `N` in `<T as Trait>::N`\n+        DefId,\n+    ),\n+) -> Option<ty::ProjectionTy<'tcx>> {\n+    let (ty_def_id, item_def_id) = key;\n+    let mut projection_ty = None;\n+    for (predicate, _) in tcx.predicates_of(ty_def_id).predicates {\n+        if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n+            if item_def_id == projection_predicate.projection_ty.item_def_id {\n+                projection_ty = Some(projection_predicate.projection_ty);\n+                break;\n+            }\n+        }\n+    }\n+    projection_ty\n+}\n+\n fn trait_associated_item_predicates(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,"}]}