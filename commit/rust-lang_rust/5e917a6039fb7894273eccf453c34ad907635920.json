{"sha": "5e917a6039fb7894273eccf453c34ad907635920", "node_id": "C_kwDOAAsO6NoAKDVlOTE3YTYwMzlmYjc4OTQyNzNlY2NmNDUzYzM0YWQ5MDc2MzU5MjA", "commit": {"author": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2023-06-06T15:26:38Z"}, "committer": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2023-06-08T16:22:30Z"}, "message": "increase the accuracy of effective visibilities calculation", "tree": {"sha": "05f294c3245ec6d04120497fd99f0d6f4ef480ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f294c3245ec6d04120497fd99f0d6f4ef480ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e917a6039fb7894273eccf453c34ad907635920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e917a6039fb7894273eccf453c34ad907635920", "html_url": "https://github.com/rust-lang/rust/commit/5e917a6039fb7894273eccf453c34ad907635920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e917a6039fb7894273eccf453c34ad907635920/comments", "author": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3572d7451d1062e8bccf310af6bbf6255091d296", "url": "https://api.github.com/repos/rust-lang/rust/commits/3572d7451d1062e8bccf310af6bbf6255091d296", "html_url": "https://github.com/rust-lang/rust/commit/3572d7451d1062e8bccf310af6bbf6255091d296"}], "stats": {"total": 95, "additions": 69, "deletions": 26}, "files": [{"sha": "afd32e38d5b87a6617c3373f648f78ad837ce952", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5e917a6039fb7894273eccf453c34ad907635920/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e917a6039fb7894273eccf453c34ad907635920/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5e917a6039fb7894273eccf453c34ad907635920", "patch": "@@ -409,8 +409,8 @@ impl VisibilityLike for ty::Visibility {\n     }\n }\n \n-impl VisibilityLike for Option<EffectiveVisibility> {\n-    const MAX: Self = Some(EffectiveVisibility::from_vis(ty::Visibility::Public));\n+impl VisibilityLike for EffectiveVisibility {\n+    const MAX: Self = EffectiveVisibility::from_vis(ty::Visibility::Public);\n     // Type inference is very smart sometimes.\n     // It can make an impl reachable even some components of its type or trait are unreachable.\n     // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`\n@@ -422,13 +422,14 @@ impl VisibilityLike for Option<EffectiveVisibility> {\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n     fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self {\n-        if let Some(min) = find.min {\n-            return find\n-                .effective_visibilities\n-                .effective_vis(def_id)\n-                .map(|eff_vis| min.min(*eff_vis, find.tcx));\n-        }\n-        None\n+        let effective_vis =\n+            find.effective_visibilities.effective_vis(def_id).cloned().unwrap_or_else(|| {\n+                let private_vis =\n+                    ty::Visibility::Restricted(find.tcx.parent_module_from_def_id(def_id));\n+                EffectiveVisibility::from_vis(private_vis)\n+            });\n+\n+        effective_vis.min(find.min, find.tcx)\n     }\n }\n \n@@ -766,28 +767,23 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             hir::ItemKind::Impl(ref impl_) => {\n-                if let Some(item_ev) = Option::<EffectiveVisibility>::of_impl(\n+                let item_ev = EffectiveVisibility::of_impl(\n                     item.owner_id.def_id,\n                     self.tcx,\n                     &self.effective_visibilities,\n-                ) {\n-                    self.update_eff_vis(item.owner_id.def_id, item_ev, None, Level::Direct);\n+                );\n+                self.update_eff_vis(item.owner_id.def_id, item_ev, None, Level::Direct);\n \n-                    self.reach(item.owner_id.def_id, item_ev)\n-                        .generics()\n-                        .predicates()\n-                        .ty()\n-                        .trait_ref();\n+                self.reach(item.owner_id.def_id, item_ev).generics().predicates().ty().trait_ref();\n \n-                    for impl_item_ref in impl_.items {\n-                        let def_id = impl_item_ref.id.owner_id.def_id;\n-                        let nominal_vis =\n-                            impl_.of_trait.is_none().then(|| self.tcx.local_visibility(def_id));\n-                        self.update_eff_vis(def_id, item_ev, nominal_vis, Level::Direct);\n+                for impl_item_ref in impl_.items {\n+                    let def_id = impl_item_ref.id.owner_id.def_id;\n+                    let nominal_vis =\n+                        impl_.of_trait.is_none().then(|| self.tcx.local_visibility(def_id));\n+                    self.update_eff_vis(def_id, item_ev, nominal_vis, Level::Direct);\n \n-                        if let Some(impl_item_ev) = self.get(def_id) {\n-                            self.reach(def_id, impl_item_ev).generics().predicates().ty();\n-                        }\n+                    if let Some(impl_item_ev) = self.get(def_id) {\n+                        self.reach(def_id, impl_item_ev).generics().predicates().ty();\n                     }\n                 }\n             }"}, {"sha": "4863c9f47901542fafd253a0a2ee94054da7b148", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e917a6039fb7894273eccf453c34ad907635920/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e917a6039fb7894273eccf453c34ad907635920/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=5e917a6039fb7894273eccf453c34ad907635920", "patch": "@@ -81,7 +81,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n             def_effective_visibilities: Default::default(),\n             import_effective_visibilities: Default::default(),\n             current_private_vis: Visibility::Restricted(CRATE_DEF_ID),\n-            changed: false,\n+            changed: true,\n         };\n \n         visitor.def_effective_visibilities.update_root();"}, {"sha": "cc708917586ff48997475d123e4832c651292e13", "filename": "tests/ui/privacy/effective_visibilities_full_priv.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e917a6039fb7894273eccf453c34ad907635920/tests%2Fui%2Fprivacy%2Feffective_visibilities_full_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e917a6039fb7894273eccf453c34ad907635920/tests%2Fui%2Fprivacy%2Feffective_visibilities_full_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Feffective_visibilities_full_priv.rs?ref=5e917a6039fb7894273eccf453c34ad907635920", "patch": "@@ -0,0 +1,21 @@\n+#![feature(rustc_attrs)]\n+#![allow(private_in_public)]\n+\n+struct SemiPriv;\n+\n+mod m {\n+    #[rustc_effective_visibility]\n+    struct Priv;\n+    //~^ ERROR Direct: pub(self), Reexported: pub(self), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n+    //~| ERROR not in the table\n+\n+    #[rustc_effective_visibility]\n+    pub fn foo() {} //~ ERROR Direct: pub(crate), Reexported: pub(crate), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n+\n+    #[rustc_effective_visibility]\n+    impl crate::SemiPriv { //~ ERROR Direct: pub(crate), Reexported: pub(crate), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n+        pub fn f(_: Priv) {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a856aa20d92c52c4e996c93d250440dd8bf10954", "filename": "tests/ui/privacy/effective_visibilities_full_priv.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e917a6039fb7894273eccf453c34ad907635920/tests%2Fui%2Fprivacy%2Feffective_visibilities_full_priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e917a6039fb7894273eccf453c34ad907635920/tests%2Fui%2Fprivacy%2Feffective_visibilities_full_priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Feffective_visibilities_full_priv.stderr?ref=5e917a6039fb7894273eccf453c34ad907635920", "patch": "@@ -0,0 +1,26 @@\n+error: Direct: pub(self), Reexported: pub(self), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n+  --> $DIR/effective_visibilities_full_priv.rs:8:5\n+   |\n+LL |     struct Priv;\n+   |     ^^^^^^^^^^^\n+\n+error: not in the table\n+  --> $DIR/effective_visibilities_full_priv.rs:8:5\n+   |\n+LL |     struct Priv;\n+   |     ^^^^^^^^^^^\n+\n+error: Direct: pub(crate), Reexported: pub(crate), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n+  --> $DIR/effective_visibilities_full_priv.rs:13:5\n+   |\n+LL |     pub fn foo() {}\n+   |     ^^^^^^^^^^^^\n+\n+error: Direct: pub(crate), Reexported: pub(crate), Reachable: pub(crate), ReachableThroughImplTrait: pub(crate)\n+  --> $DIR/effective_visibilities_full_priv.rs:16:5\n+   |\n+LL |     impl crate::SemiPriv {\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}