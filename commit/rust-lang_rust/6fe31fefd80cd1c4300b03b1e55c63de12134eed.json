{"sha": "6fe31fefd80cd1c4300b03b1e55c63de12134eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTMxZmVmZDgwY2QxYzQzMDBiMDNiMWU1NWM2M2RlMTIxMzRlZWQ=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-29T16:02:51Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-29T18:02:21Z"}, "message": "Make allocation relocation field private", "tree": {"sha": "7ea605c60c737fe86b115f3c698d3dd07f2c9fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ea605c60c737fe86b115f3c698d3dd07f2c9fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe31fefd80cd1c4300b03b1e55c63de12134eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe31fefd80cd1c4300b03b1e55c63de12134eed", "html_url": "https://github.com/rust-lang/rust/commit/6fe31fefd80cd1c4300b03b1e55c63de12134eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe31fefd80cd1c4300b03b1e55c63de12134eed/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d6b7b9d3d946b35826298e3d04381f96427433", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d6b7b9d3d946b35826298e3d04381f96427433", "html_url": "https://github.com/rust-lang/rust/commit/85d6b7b9d3d946b35826298e3d04381f96427433"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "75319a6783167d3e3e44ef4fc7d2978841450bc6", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=6fe31fefd80cd1c4300b03b1e55c63de12134eed", "patch": "@@ -35,7 +35,7 @@ pub struct Allocation<Tag=(),Extra=()> {\n     /// Only the first byte of a pointer is inserted into the map; i.e.,\n     /// every entry in this map applies to `pointer_size` consecutive bytes starting\n     /// at the given offset.\n-    pub relocations: Relocations<Tag>,\n+    relocations: Relocations<Tag>,\n     /// Denotes which part of this allocation is initialized.\n     undef_mask: UndefMask,\n     /// The size of the allocation. Currently, must always equal `bytes.len()`.\n@@ -148,6 +148,11 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n     pub fn undef_mask(&self) -> &UndefMask {\n         &self.undef_mask\n     }\n+\n+    /// Returns the relocation list.\n+    pub fn relocations(&self) -> &Relocations<Tag> {\n+        &self.relocations\n+    }\n }\n \n impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Allocation {}\n@@ -459,7 +464,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n /// Relocations\n impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Returns all relocations overlapping with the given ptr-offset pair.\n-    pub fn relocations(\n+    pub fn get_relocations(\n         &self,\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n@@ -480,7 +485,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if self.relocations(cx, ptr, size).is_empty() {\n+        if self.get_relocations(cx, ptr, size).is_empty() {\n             Ok(())\n         } else {\n             throw_unsup!(ReadPointerAsBytes)\n@@ -502,7 +507,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         // Find the start and end of the given range and its outermost relocations.\n         let (first, last) = {\n             // Find all relocations overlapping the given range.\n-            let relocations = self.relocations(cx, ptr, size);\n+            let relocations = self.get_relocations(cx, ptr, size);\n             if relocations.is_empty() {\n                 return Ok(());\n             }"}, {"sha": "4cbbc0ffe17cc4262462a27d977307710f0b64a1", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=6fe31fefd80cd1c4300b03b1e55c63de12134eed", "patch": "@@ -94,7 +94,7 @@ impl<'rt, 'mir, 'tcx> InternVisitor<'rt, 'mir, 'tcx> {\n         alloc.mutability = mutability;\n         // link the alloc id to the actual allocation\n         let alloc = tcx.intern_const_alloc(alloc);\n-        self.leftover_relocations.extend(alloc.relocations.iter().map(|&(_, ((), reloc))| reloc));\n+        self.leftover_relocations.extend(alloc.relocations().iter().map(|&(_, ((), reloc))| reloc));\n         tcx.alloc_map.lock().set_alloc_id_memory(ptr.alloc_id, alloc);\n         Ok(None)\n     }\n@@ -316,7 +316,7 @@ pub fn intern_const_alloc_recursive(\n             // So we hand-roll the interning logic here again\n             let alloc = tcx.intern_const_alloc(alloc);\n             tcx.alloc_map.lock().set_alloc_id_memory(alloc_id, alloc);\n-            for &(_, ((), reloc)) in alloc.relocations.iter() {\n+            for &(_, ((), reloc)) in alloc.relocations().iter() {\n                 if leftover_relocations.insert(reloc) {\n                     todo.push(reloc);\n                 }"}, {"sha": "26b3f0be8c2b82f9effdaae6bf61dc258197a0be", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6fe31fefd80cd1c4300b03b1e55c63de12134eed", "patch": "@@ -647,7 +647,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         for i in 0..alloc.size.bytes() {\n             let i = Size::from_bytes(i);\n-            if let Some(&(_, target_id)) = alloc.relocations.get(&i) {\n+            if let Some(&(_, target_id)) = alloc.relocations().get(&i) {\n                 if allocs_seen.insert(target_id) {\n                     allocs_to_print.push_back(target_id);\n                 }\n@@ -809,7 +809,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // (`get_bytes_with_undef_and_ptr` below checks that there are no\n         // relocations overlapping the edges; those would not be handled correctly).\n         let relocations = {\n-            let relocations = self.get(src.alloc_id)?.relocations(self, src, size);\n+            let relocations = self.get(src.alloc_id)?.get_relocations(self, src, size);\n             if relocations.is_empty() {\n                 // nothing to copy, ignore even the `length` loop\n                 Vec::new()"}, {"sha": "a9403502f64d3c32e8c643e160bfacf8b61b70ef", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6fe31fefd80cd1c4300b03b1e55c63de12134eed", "patch": "@@ -1202,7 +1202,7 @@ fn collect_miri<'tcx>(tcx: TyCtxt<'tcx>, alloc_id: AllocId, output: &mut Vec<Mon\n         }\n         Some(GlobalAlloc::Memory(alloc)) => {\n             trace!(\"collecting {:?} with {:#?}\", alloc_id, alloc);\n-            for &((), inner) in alloc.relocations.values() {\n+            for &((), inner) in alloc.relocations().values() {\n                 collect_miri(tcx, inner, output);\n             }\n         },\n@@ -1268,7 +1268,7 @@ fn collect_const<'tcx>(\n             collect_miri(tcx, ptr.alloc_id, output),\n         ConstValue::Slice { data: alloc, start: _, end: _ } |\n         ConstValue::ByRef { alloc, .. } => {\n-            for &((), id) in alloc.relocations.values() {\n+            for &((), id) in alloc.relocations().values() {\n                 collect_miri(tcx, id, output);\n             }\n         }"}, {"sha": "e68104c6df8082c06612828ef5dcb98254e42e4c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe31fefd80cd1c4300b03b1e55c63de12134eed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6fe31fefd80cd1c4300b03b1e55c63de12134eed", "patch": "@@ -1570,7 +1570,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n         } else {\n             bug!(\"Matching on non-ByRef static\")\n         };\n-        if alloc.relocations.len() != 0 {\n+        if alloc.relocations().len() != 0 {\n             let msg = \"statics with a custom `#[link_section]` must be a \\\n                        simple list of bytes on the wasm target with no \\\n                        extra levels of indirection such as references\";"}]}