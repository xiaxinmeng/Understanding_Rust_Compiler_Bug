{"sha": "daaeac56b13ad812783f1d43c640231d4f12270a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYWVhYzU2YjEzYWQ4MTI3ODNmMWQ0M2M2NDAyMzFkNGYxMjI3MGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-19T22:34:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-19T22:34:23Z"}, "message": "rustc: Fix long lines", "tree": {"sha": "b8d8e2a5a847f82f72bba3b83f1475f4982c387b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d8e2a5a847f82f72bba3b83f1475f4982c387b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daaeac56b13ad812783f1d43c640231d4f12270a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daaeac56b13ad812783f1d43c640231d4f12270a", "html_url": "https://github.com/rust-lang/rust/commit/daaeac56b13ad812783f1d43c640231d4f12270a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daaeac56b13ad812783f1d43c640231d4f12270a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb8f6cf52a2a4e2f78e6fa95d42140aa26ec31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb8f6cf52a2a4e2f78e6fa95d42140aa26ec31c", "html_url": "https://github.com/rust-lang/rust/commit/bdb8f6cf52a2a4e2f78e6fa95d42140aa26ec31c"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "9f75d0d1c77f13dbfd7c260a34810d5b97afcbe9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daaeac56b13ad812783f1d43c640231d4f12270a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaeac56b13ad812783f1d43c640231d4f12270a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=daaeac56b13ad812783f1d43c640231d4f12270a", "patch": "@@ -738,8 +738,8 @@ fn GEP_tup_like(bcx: @block_ctxt, t: ty::t, base: ValueRef, ixs: [int])\n \n // Replacement for the LLVM 'GEP' instruction when field indexing into a enum.\n // This function uses GEP_tup_like() above and automatically performs casts as\n-// appropriate. @llblobptr is the data part of a enum value; its actual type is\n-// meaningless, as it will be cast away.\n+// appropriate. @llblobptr is the data part of a enum value; its actual type\n+// is meaningless, as it will be cast away.\n fn GEP_tag(cx: @block_ctxt, llblobptr: ValueRef, tag_id: ast::def_id,\n            variant_id: ast::def_id, ty_substs: [ty::t],\n            ix: uint) : valid_variant_index(ix, cx, tag_id, variant_id) ->"}, {"sha": "f4fb7a1470e9a603eb548ce79f71c91df313aafd", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/daaeac56b13ad812783f1d43c640231d4f12270a/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaeac56b13ad812783f1d43c640231d4f12270a/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=daaeac56b13ad812783f1d43c640231d4f12270a", "patch": "@@ -16,7 +16,8 @@ import syntax::print::pprust::pat_to_str;\n \n import trans_common::*;\n \n-// An option identifying a branch (either a literal, a enum variant or a range)\n+// An option identifying a branch (either a literal, a enum variant or a\n+// range)\n enum opt {\n     lit(@ast::expr);\n     var(/* disr val */int, /* variant dids */{tg: def_id, var: def_id});"}, {"sha": "a01ce73023625e1c82c9ddfd72597a10726c80f1", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daaeac56b13ad812783f1d43c640231d4f12270a/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daaeac56b13ad812783f1d43c640231d4f12270a/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=daaeac56b13ad812783f1d43c640231d4f12270a", "patch": "@@ -68,8 +68,8 @@ enum crate_directive_ {\n \n     // NB: cdir_view_item is *not* processed by the rest of the compiler; the\n     // attached view_items are sunk into the crate's module during parsing,\n-    // and processed (resolved, imported, etc.) there. This enum-variant exists\n-    // only to preserve the view items in order in case we decide to\n+    // and processed (resolved, imported, etc.) there. This enum-variant\n+    // exists only to preserve the view items in order in case we decide to\n     // pretty-print crates in the future.\n     cdir_view_item(@view_item);\n "}]}