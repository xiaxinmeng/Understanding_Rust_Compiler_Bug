{"sha": "074d757bc68c5f22d7a59724dae55ea2357bff8b", "node_id": "C_kwDOAAsO6NoAKDA3NGQ3NTdiYzY4YzVmMjJkN2E1OTcyNGRhZTU1ZWEyMzU3YmZmOGI", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-16T23:11:35Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-16T23:30:43Z"}, "message": "Consider mutations as borrows in drop tracking\n\nThis is needed to match MIR more conservative approximation of any\nborrowed value being live across a suspend point (See #94067). This\nchange considers an expression such as `x.y = z` to be a borrow of `x`\nand therefore keeps `x` live across suspend points.", "tree": {"sha": "a37002b808178e99fb3a50c45f6c5fda8db5ce57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a37002b808178e99fb3a50c45f6c5fda8db5ce57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/074d757bc68c5f22d7a59724dae55ea2357bff8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/074d757bc68c5f22d7a59724dae55ea2357bff8b", "html_url": "https://github.com/rust-lang/rust/commit/074d757bc68c5f22d7a59724dae55ea2357bff8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/074d757bc68c5f22d7a59724dae55ea2357bff8b/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f90b06d7fb00470177516c5881bcec0432cb4f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90b06d7fb00470177516c5881bcec0432cb4f24", "html_url": "https://github.com/rust-lang/rust/commit/f90b06d7fb00470177516c5881bcec0432cb4f24"}], "stats": {"total": 126, "additions": 123, "deletions": 3}, "files": [{"sha": "03d3b23bb23d5cc35d4f6ab5e048bd338c401ef2", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/074d757bc68c5f22d7a59724dae55ea2357bff8b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074d757bc68c5f22d7a59724dae55ea2357bff8b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=074d757bc68c5f22d7a59724dae55ea2357bff8b", "patch": "@@ -93,19 +93,25 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n     fn borrow(\n         &mut self,\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        _diag_expr_id: HirId,\n+        diag_expr_id: HirId,\n         _bk: rustc_middle::ty::BorrowKind,\n     ) {\n+        debug!(\"borrow {:?}; diag_expr_id={:?}\", place_with_id, diag_expr_id);\n         self.places\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n     }\n \n     fn mutate(\n         &mut self,\n-        _assignee_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        _diag_expr_id: HirId,\n+        assignee_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n     ) {\n+        debug!(\"mutate {:?}; diag_expr_id={:?}\", assignee_place, diag_expr_id);\n+        // Count mutations as a borrow.\n+        self.places\n+            .borrowed\n+            .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));\n     }\n \n     fn fake_read("}, {"sha": "b6c0fda15216a71ad062bb725dcc5f4b54d8ae78", "filename": "src/test/ui/async-await/drop-track-field-assign-nonsend.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/074d757bc68c5f22d7a59724dae55ea2357bff8b/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074d757bc68c5f22d7a59724dae55ea2357bff8b/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.rs?ref=074d757bc68c5f22d7a59724dae55ea2357bff8b", "patch": "@@ -0,0 +1,45 @@\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+// compile-flags: -Zdrop-tracking\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<std::rc::Rc<String>>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = None;\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn assert_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    let agent = Agent { info_result: InfoResult { node: None } };\n+    // FIXME: It would be nice for this to work. See #94067.\n+    assert_send(agent.handle());\n+    //~^ cannot be sent between threads safely\n+}"}, {"sha": "d95483c81195ce679345bb25a1facb7de7da0f34", "filename": "src/test/ui/async-await/drop-track-field-assign-nonsend.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/074d757bc68c5f22d7a59724dae55ea2357bff8b/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/074d757bc68c5f22d7a59724dae55ea2357bff8b/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign-nonsend.stderr?ref=074d757bc68c5f22d7a59724dae55ea2357bff8b", "patch": "@@ -0,0 +1,25 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/drop-track-field-assign-nonsend.rs:43:17\n+   |\n+LL |     assert_send(agent.handle());\n+   |                 ^^^^^^^^^^^^^^ future returned by `handle` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<String>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/drop-track-field-assign-nonsend.rs:21:38\n+   |\n+LL |         let mut info = self.info_result.clone();\n+   |             -------- has type `InfoResult` which is not `Send`\n+...\n+LL |         let _ = send_element(element).await;\n+   |                                      ^^^^^^ await occurs here, with `mut info` maybe used later\n+LL |     }\n+   |     - `mut info` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/drop-track-field-assign-nonsend.rs:38:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a393cd164b9980a9423cad19bf599e4f65f551b", "filename": "src/test/ui/async-await/drop-track-field-assign.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/074d757bc68c5f22d7a59724dae55ea2357bff8b/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/074d757bc68c5f22d7a59724dae55ea2357bff8b/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-track-field-assign.rs?ref=074d757bc68c5f22d7a59724dae55ea2357bff8b", "patch": "@@ -0,0 +1,44 @@\n+// Derived from an ICE found in tokio-xmpp during a crater run.\n+// edition:2021\n+// compile-flags: -Zdrop-tracking\n+// build-pass\n+\n+#![allow(dead_code)]\n+\n+#[derive(Clone)]\n+struct InfoResult {\n+    node: Option<String>\n+}\n+\n+struct Agent {\n+    info_result: InfoResult\n+}\n+\n+impl Agent {\n+    async fn handle(&mut self) {\n+        let mut info = self.info_result.clone();\n+        info.node = Some(\"bar\".into());\n+        let element = parse_info(info);\n+        let _ = send_element(element).await;\n+    }\n+}\n+\n+struct Element {\n+}\n+\n+async fn send_element(_: Element) {}\n+\n+fn parse(_: &[u8]) -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn parse_info(_: InfoResult) -> Element {\n+    Element { }\n+}\n+\n+fn main() {\n+    let mut agent = Agent {\n+        info_result: InfoResult { node: None }\n+    };\n+    let _ = agent.handle();\n+}"}]}