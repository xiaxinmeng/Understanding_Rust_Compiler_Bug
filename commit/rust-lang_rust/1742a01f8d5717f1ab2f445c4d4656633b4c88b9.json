{"sha": "1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NDJhMDFmOGQ1NzE3ZjFhYjJmNDQ1YzRkNDY1NjYzM2I0Yzg4Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T20:04:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-26T20:04:09Z"}, "message": "Auto merge of #24657 - aochagavia:rustdoc, r=alexcrichton\n\nFixes #24575 \r\nFixes #25673 \r\n\r\nr? @alexcrichton", "tree": {"sha": "d69a50e9ca1f01ee794f7075acfc1a88cf856233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d69a50e9ca1f01ee794f7075acfc1a88cf856233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "html_url": "https://github.com/rust-lang/rust/commit/1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a003abc374c912b4890b6cc1c61b5b1bd1efe60", "html_url": "https://github.com/rust-lang/rust/commit/6a003abc374c912b4890b6cc1c61b5b1bd1efe60"}, {"sha": "87038831f1d1eafe6978a823cdbb353d3a7d3f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87038831f1d1eafe6978a823cdbb353d3a7d3f8d", "html_url": "https://github.com/rust-lang/rust/commit/87038831f1d1eafe6978a823cdbb353d3a7d3f8d"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "ef733a80466046a69df662fc680d1ef484be1437", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "patch": "@@ -51,26 +51,20 @@ use std::sync::Arc;\n \n use externalfiles::ExternalHtml;\n \n-use serialize::json;\n-use serialize::json::ToJson;\n-use syntax::abi;\n-use syntax::ast;\n-use syntax::ast_util;\n-use syntax::attr;\n+use serialize::json::{self, ToJson};\n+use syntax::{abi, ast, ast_util, attr};\n use rustc::util::nodemap::NodeSet;\n \n-use clean;\n+use clean::{self, SelfTy};\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n use html::format::{ConstnessSpace};\n use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n-use html::highlight;\n use html::item_type::ItemType;\n-use html::layout;\n-use html::markdown::Markdown;\n-use html::markdown;\n+use html::markdown::{self, Markdown};\n+use html::{highlight, layout};\n \n /// A pair of name and its optional document.\n pub type NameDoc = (String, Option<String>);\n@@ -2329,6 +2323,9 @@ fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n     }\n }\n \n+// Render_header is false when we are rendering a `Deref` impl and true\n+// otherwise. If render_header is false, we will avoid rendering static\n+// methods, since they are not accessible for the type implementing `Deref`\n fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n                render_header: bool) -> fmt::Result {\n     if render_header {\n@@ -2348,14 +2345,17 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n     }\n \n     fn doctraititem(w: &mut fmt::Formatter, item: &clean::Item,\n-                    link: AssocItemLink) -> fmt::Result {\n+                    link: AssocItemLink, render_static: bool) -> fmt::Result {\n         match item.inner {\n             clean::MethodItem(..) | clean::TyMethodItem(..) => {\n-                try!(write!(w, \"<h4 id='method.{}' class='{}'><code>\",\n-                            *item.name.as_ref().unwrap(),\n-                            shortty(item)));\n+                // Only render when the method is not static or we allow static methods\n+                if !is_static_method(item) || render_static {\n+                    try!(write!(w, \"<h4 id='method.{}' class='{}'><code>\",\n+                                *item.name.as_ref().unwrap(),\n+                                shortty(item)));\n                 try!(render_assoc_item(w, item, link));\n-                try!(write!(w, \"</code></h4>\\n\"));\n+                    try!(write!(w, \"</code></h4>\\n\"));\n+                }\n             }\n             clean::TypedefItem(ref tydef) => {\n                 let name = item.name.as_ref().unwrap();\n@@ -2389,30 +2389,44 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n             }\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name)\n         }\n-        if let AssocItemLink::Anchor = link {\n-            document(w, item)\n+\n+        return if let AssocItemLink::Anchor = link {\n+            if is_static_method(item) && !render_static {\n+                Ok(())\n+            } else {\n+                document(w, item)\n+            }\n         } else {\n             Ok(())\n+        };\n+\n+        fn is_static_method(item: &clean::Item) -> bool {\n+            match item.inner {\n+                clean::MethodItem(ref method) => method.self_ == SelfTy::SelfStatic,\n+                clean::TyMethodItem(ref method) => method.self_ == SelfTy::SelfStatic,\n+                _ => false\n+            }\n         }\n     }\n \n     try!(write!(w, \"<div class='impl-items'>\"));\n     for trait_item in i.impl_.items.iter() {\n-        try!(doctraititem(w, trait_item, link));\n+        try!(doctraititem(w, trait_item, link, render_header));\n     }\n \n     fn render_default_items(w: &mut fmt::Formatter,\n                             did: ast::DefId,\n                             t: &clean::Trait,\n-                            i: &clean::Impl) -> fmt::Result {\n+                              i: &clean::Impl,\n+                              render_static: bool) -> fmt::Result {\n         for trait_item in &t.items {\n             let n = trait_item.name.clone();\n             match i.items.iter().find(|m| { m.name == n }) {\n                 Some(..) => continue,\n                 None => {}\n             }\n \n-            try!(doctraititem(w, trait_item, AssocItemLink::GotoSource(did)));\n+            try!(doctraititem(w, trait_item, AssocItemLink::GotoSource(did), render_static));\n         }\n         Ok(())\n     }\n@@ -2423,7 +2437,8 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n     // for them work.\n     if let Some(clean::ResolvedPath { did, .. }) = i.impl_.trait_ {\n         if let Some(t) = cache().traits.get(&did) {\n-            try!(render_default_items(w, did, t, &i.impl_));\n+            try!(render_default_items(w, did, t, &i.impl_, render_header));\n+\n         }\n     }\n     try!(write!(w, \"</div>\"));"}, {"sha": "7403bcf4afb31694fdffcbb238ca9236217c6a7b", "filename": "src/test/auxiliary/issue-19190-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Fauxiliary%2Fissue-19190-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Fauxiliary%2Fissue-19190-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-19190-3.rs?ref=1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "patch": "@@ -22,6 +22,7 @@ pub struct Baz;\n \n impl Baz {\n     pub fn baz(&self) {}\n+    pub fn static_baz() {}\n }\n \n impl Deref for Bar {"}, {"sha": "8835e18f1c5ce49d658053241ad8d25e9d9547e9", "filename": "src/test/rustdoc/issue-19190-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Frustdoc%2Fissue-19190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Frustdoc%2Fissue-19190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19190-2.rs?ref=1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "patch": "@@ -19,4 +19,4 @@ impl Deref for Bar {\n \n // @has issue_19190_2/struct.Bar.html\n // @has - '//*[@id=\"method.count_ones\"]' 'fn count_ones(self) -> u32'\n-\n+// @!has - '//*[@id=\"method.min_value\"]' 'fn min_value() -> i32'"}, {"sha": "64c396b29f27e186db4079886ec2a5aad4805e16", "filename": "src/test/rustdoc/issue-19190-3.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Frustdoc%2Fissue-19190-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Frustdoc%2Fissue-19190-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19190-3.rs?ref=1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "patch": "@@ -18,14 +18,17 @@ use issue_19190_3::Baz;\n \n // @has issue_19190_3/struct.Foo.html\n // @has - '//*[@id=\"method.count_ones\"]' 'fn count_ones(self) -> u32'\n+// @!has - '//*[@id=\"method.min_value\"]' 'fn min_value() -> i32'\n pub use issue_19190_3::Foo;\n \n // @has issue_19190_3/struct.Bar.html\n // @has - '//*[@id=\"method.baz\"]' 'fn baz(&self)'\n+// @!has - '//*[@id=\"method.static_baz\"]' 'fn static_baz()'\n pub use issue_19190_3::Bar;\n \n // @has issue_19190_3/struct.MyBar.html\n // @has - '//*[@id=\"method.baz\"]' 'fn baz(&self)'\n+// @!has - '//*[@id=\"method.static_baz\"]' 'fn static_baz()'\n pub struct MyBar;\n \n impl Deref for MyBar {"}, {"sha": "6289fcc6fe526b671b64fb41261099f7d340941a", "filename": "src/test/rustdoc/issue-19190.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1742a01f8d5717f1ab2f445c4d4656633b4c88b9/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19190.rs?ref=1742a01f8d5717f1ab2f445c4d4656633b4c88b9", "patch": "@@ -15,6 +15,7 @@ pub struct Bar;\n \n impl Foo {\n     pub fn foo(&self) {}\n+    pub fn static_foo() {}\n }\n \n impl Deref for Bar {\n@@ -24,3 +25,4 @@ impl Deref for Bar {\n \n // @has issue_19190/struct.Bar.html\n // @has - '//*[@id=\"method.foo\"]' 'fn foo(&self)'\n+// @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}]}