{"sha": "797eb57aa8a82716dc493a98e0ba595da0253001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5N2ViNTdhYThhODI3MTZkYzQ5M2E5OGUwYmE1OTVkYTAyNTMwMDE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-01T04:21:10Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T04:25:31Z"}, "message": "Refactor field `expansion_data` of `Resolver` to use a `Mark` instead of a `u32`.", "tree": {"sha": "8be2933e2f288b0429eb3f5cc8e55d4ba3380ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be2933e2f288b0429eb3f5cc8e55d4ba3380ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797eb57aa8a82716dc493a98e0ba595da0253001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797eb57aa8a82716dc493a98e0ba595da0253001", "html_url": "https://github.com/rust-lang/rust/commit/797eb57aa8a82716dc493a98e0ba595da0253001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797eb57aa8a82716dc493a98e0ba595da0253001/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c2d76d23e9bea237748c01ff27e77d400611437", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2d76d23e9bea237748c01ff27e77d400611437", "html_url": "https://github.com/rust-lang/rust/commit/5c2d76d23e9bea237748c01ff27e77d400611437"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "0941af0b81106978b227f32ea121f181163f16f0", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=797eb57aa8a82716dc493a98e0ba595da0253001", "patch": "@@ -17,6 +17,7 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use middle::cstore::InlinedItem;\n \n use syntax::ast::*;\n+use syntax::ext::hygiene::Mark;\n use syntax::visit;\n use syntax::parse::token::{self, keywords};\n \n@@ -31,7 +32,7 @@ pub struct DefCollector<'a> {\n }\n \n pub struct MacroInvocationData {\n-    pub id: NodeId,\n+    pub mark: Mark,\n     pub def_index: DefIndex,\n     pub const_integer: bool,\n }\n@@ -126,7 +127,7 @@ impl<'a> DefCollector<'a> {\n     fn visit_macro_invoc(&mut self, id: NodeId, const_integer: bool) {\n         if let Some(ref mut visit) = self.visit_macro_invoc {\n             visit(MacroInvocationData {\n-                id: id,\n+                mark: Mark::from_placeholder_id(id),\n                 const_integer: const_integer,\n                 def_index: self.parent_def.unwrap(),\n             })"}, {"sha": "4d431824114f2e6865dc8c30e89588526c5dceef", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=797eb57aa8a82716dc493a98e0ba595da0253001", "patch": "@@ -531,7 +531,7 @@ pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n \n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) {\n-        self.resolver.expansion_data.get_mut(&id.as_u32()).unwrap().module =\n+        self.resolver.expansion_data.get_mut(&Mark::from_placeholder_id(id)).unwrap().module =\n             self.resolver.current_module;\n     }\n }"}, {"sha": "1ddd53d9c1b1350d832587f5c03432d56c9b1546", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=797eb57aa8a82716dc493a98e0ba595da0253001", "patch": "@@ -1084,7 +1084,7 @@ pub struct Resolver<'a> {\n     macro_names: FnvHashSet<Name>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n-    expansion_data: FnvHashMap<u32, macros::ExpansionData<'a>>,\n+    expansion_data: FnvHashMap<Mark, macros::ExpansionData<'a>>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1202,7 +1202,7 @@ impl<'a> Resolver<'a> {\n         DefCollector::new(&mut definitions).collect_root();\n \n         let mut expansion_data = FnvHashMap();\n-        expansion_data.insert(0, macros::ExpansionData::root(graph_root)); // Crate root expansion\n+        expansion_data.insert(Mark::root(), macros::ExpansionData::root(graph_root));\n \n         Resolver {\n             session: session,"}, {"sha": "b899942690478f999ca95dccea44f24a9d763895", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=797eb57aa8a82716dc493a98e0ba595da0253001", "patch": "@@ -55,7 +55,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark {\n         let mark = Mark::fresh();\n         let module = self.module_map[&id];\n-        self.expansion_data.insert(mark.as_u32(), ExpansionData {\n+        self.expansion_data.insert(mark, ExpansionData {\n             module: module,\n             def_index: module.def_id().unwrap().index,\n             const_integer: false,\n@@ -65,7 +65,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         self.collect_def_ids(mark, expansion);\n-        self.current_module = self.expansion_data[&mark.as_u32()].module;\n+        self.current_module = self.expansion_data[&mark].module;\n         expansion.visit_with(&mut BuildReducedGraphVisitor { resolver: self });\n     }\n \n@@ -88,7 +88,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.macro_names.insert(ident.name);\n         }\n \n-        let mut module = self.expansion_data[&scope.as_u32()].module;\n+        let mut module = self.expansion_data[&scope].module;\n         while module.macros_escape {\n             module = module.parent.unwrap();\n         }\n@@ -104,7 +104,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n             let name = intern(&attrs[i].name());\n-            match self.expansion_data[&0].module.macros.borrow().get(&name) {\n+            match self.expansion_data[&Mark::root()].module.macros.borrow().get(&name) {\n                 Some(binding) => match *binding.ext {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n                         return Some(attrs.remove(i))\n@@ -132,7 +132,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { ref attr, .. } => (intern(&*attr.name()), attr.span),\n         };\n \n-        let mut module = self.expansion_data[&scope.as_u32()].module;\n+        let mut module = self.expansion_data[&scope].module;\n         loop {\n             if let Some(binding) = module.macros.borrow().get(&name) {\n                 return Some(binding.ext.clone());\n@@ -168,9 +168,9 @@ impl<'a> Resolver<'a> {\n \n     fn collect_def_ids(&mut self, mark: Mark, expansion: &Expansion) {\n         let expansion_data = &mut self.expansion_data;\n-        let ExpansionData { def_index, const_integer, module } = expansion_data[&mark.as_u32()];\n+        let ExpansionData { def_index, const_integer, module } = expansion_data[&mark];\n         let visit_macro_invoc = &mut |invoc: map::MacroInvocationData| {\n-            expansion_data.entry(invoc.id.as_u32()).or_insert(ExpansionData {\n+            expansion_data.entry(invoc.mark).or_insert(ExpansionData {\n                 def_index: invoc.def_index,\n                 const_integer: invoc.const_integer,\n                 module: module,"}, {"sha": "0fd72277cca9f46015f5df1600e015b26365cede", "filename": "src/libsyntax/ext/hygiene.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibsyntax%2Fext%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797eb57aa8a82716dc493a98e0ba595da0253001/src%2Flibsyntax%2Fext%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fhygiene.rs?ref=797eb57aa8a82716dc493a98e0ba595da0253001", "patch": "@@ -15,6 +15,7 @@\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n //! DOI=10.1017/S0956796812000093 http://dx.doi.org/10.1017/S0956796812000093\n \n+use ast::NodeId;\n use std::cell::RefCell;\n use std::collections::HashMap;\n use std::fmt;\n@@ -46,6 +47,10 @@ impl Mark {\n         Mark(0)\n     }\n \n+    pub fn from_placeholder_id(id: NodeId) -> Self {\n+        Mark(id.as_u32())\n+    }\n+\n     pub fn as_u32(&self) -> u32 {\n         self.0\n     }"}]}