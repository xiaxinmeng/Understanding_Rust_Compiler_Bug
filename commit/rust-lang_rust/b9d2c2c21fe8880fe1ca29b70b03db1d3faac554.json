{"sha": "b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZDJjMmMyMWZlODg4MGZlMWNhMjliNzBiMDNkYjFkM2ZhYWM1NTQ=", "commit": {"author": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-04-02T18:21:08Z"}, "committer": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-04-02T18:22:06Z"}, "message": "made ExprCollector pub(crate) and moved\ncollect_fn_body_syntax", "tree": {"sha": "bda21b49cbaa67d26216c1f53d3fef72abcb11a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bda21b49cbaa67d26216c1f53d3fef72abcb11a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "html_url": "https://github.com/rust-lang/rust/commit/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554/comments", "author": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e22e9d70ac3a35989ad1d45386f86697877c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e22e9d70ac3a35989ad1d45386f86697877c4c", "html_url": "https://github.com/rust-lang/rust/commit/88e22e9d70ac3a35989ad1d45386f86697877c4c"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "51366de0a54cb047201cac228e408b6b29416438", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "patch": "@@ -462,7 +462,7 @@ impl Pat {\n \n // Queries\n \n-struct ExprCollector {\n+pub(crate) struct ExprCollector {\n     owner: DefWithBody,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n@@ -943,12 +943,3 @@ pub(crate) fn body_with_source_map_query(\n pub(crate) fn body_hir_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<Body> {\n     db.body_with_source_map(def).0\n }\n-\n-#[cfg(test)]\n-use crate::{Function};\n-#[cfg(test)]\n-fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> (Body, BodySourceMap) {\n-    let mut collector = ExprCollector::new(DefWithBody::Function(function));\n-    collector.collect_fn_body(node);\n-    collector.finish()\n-}"}, {"sha": "48283907b3500d9b98865df075387ebcfc2a3923", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "patch": "@@ -297,9 +297,9 @@ mod tests {\n     use ra_syntax::{SourceFile, algo::find_node_at_offset};\n     use test_utils::{extract_offset, assert_eq_text};\n     use ra_arena::ArenaId;\n-    use crate::{Function};\n+    use crate::Function;\n \n-    use crate::expr;\n+    use crate::expr::{ExprCollector};\n \n     use super::*;\n \n@@ -317,7 +317,7 @@ mod tests {\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let (body, source_map) = collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n         let scopes =\n             ScopesWithSourceMap { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };\n@@ -406,6 +406,12 @@ mod tests {\n         );\n     }\n \n+    fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> (Body, BodySourceMap) {\n+        let mut collector = ExprCollector::new(DefWithBody::Function(function));\n+        collector.collect_fn_body(node);\n+        collector.finish()\n+    }\n+\n     fn do_check_local_name(code: &str, expected_offset: u32) {\n         let (off, code) = extract_offset(code);\n         let file = SourceFile::parse(&code);\n@@ -416,7 +422,7 @@ mod tests {\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let (body, source_map) = collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n         let scopes =\n             ScopesWithSourceMap { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };"}]}