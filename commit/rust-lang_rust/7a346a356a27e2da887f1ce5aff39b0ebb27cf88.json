{"sha": "7a346a356a27e2da887f1ce5aff39b0ebb27cf88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzQ2YTM1NmEyN2UyZGE4ODdmMWNlNWFmZjM5YjBlYmIyN2NmODg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-06T12:19:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-06T23:58:23Z"}, "message": "Address feedback", "tree": {"sha": "48b5e0f125f2d6a10eefe34de9ac3f2273b9d641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b5e0f125f2d6a10eefe34de9ac3f2273b9d641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a346a356a27e2da887f1ce5aff39b0ebb27cf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a346a356a27e2da887f1ce5aff39b0ebb27cf88", "html_url": "https://github.com/rust-lang/rust/commit/7a346a356a27e2da887f1ce5aff39b0ebb27cf88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a346a356a27e2da887f1ce5aff39b0ebb27cf88/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db8d960c38fd761760a474038d219e643d002cf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/db8d960c38fd761760a474038d219e643d002cf8", "html_url": "https://github.com/rust-lang/rust/commit/db8d960c38fd761760a474038d219e643d002cf8"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "6fc3566a7caff822e3bfc5968373ae0094529492", "filename": "RELEASES.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7a346a356a27e2da887f1ce5aff39b0ebb27cf88/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a346a356a27e2da887f1ce5aff39b0ebb27cf88/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=7a346a356a27e2da887f1ce5aff39b0ebb27cf88", "patch": "@@ -26,11 +26,14 @@ Version 1.0.0-alpha (January 2015)\n       bounds and thus monomorphized and inlined, or via an opaque\n       pointer (boxed) as in the old system. The new system is often\n       referred to as 'unboxed' closures.\n+    * Traits now support [associated types][assoc], allowing families\n+      of related types to be defined together and used generically in\n+      powerful ways.\n     * Enum variants are [namespaced by their type names][enum].\n     * [`where` clauses][where] provide a more versatile and attractive\n       syntax for specifying generic bounds, though the previous syntax\n       remains valid.\n-    * Rust again picks a [fallback] (either i32 or f64) for uninferred\n+    * Rust again picks a [fallback][fb] (either i32 or f64) for uninferred\n       numeric types.\n     * Rust [no longer has a runtime][rt] of any description, and only\n       supports OS threads, not green threads.\n@@ -40,7 +43,7 @@ Version 1.0.0-alpha (January 2015)\n       more consistent.\n     * Rust now has a general [range syntax][range], `i..j`, `i..`, and\n       `..j` that produce range types and which, when combined with the\n-      `Index` operator and multitispatch, leads to a convenient slice\n+      `Index` operator and multidispatch, leads to a convenient slice\n       notation, `[i..j]`.\n     * The new range syntax revealed an ambiguity in the fixed-length\n       array syntax, so now fixed length arrays [are written `[T;\n@@ -81,13 +84,15 @@ Version 1.0.0-alpha (January 2015)\n       not terminated by a semicolon are [parsed as\n       expressions][macros], which makes expressions like `vec![1i32,\n       2, 3].len()` work as expected.\n-    * Trait objects now implement their traits automatically.\n+    * Trait objects now implement their traits automatically, and\n+      traits that can be coerced to objects now must be [object\n+      safe][objsafe].\n     * Automatically deriving traits is now done with `#[derive(...)]`\n       not `#[deriving(...)]` for [consistency with other naming\n       conventions][derive].\n-    * Importing the containing module at the same time as items it\n-      contains is [now done with `self` instead of `mod`][self], as in\n-      use `foo::{self, bar}`\n+    * Importing the containing module or enum at the same time as\n+      items or variants they contain is [now done with `self` instead\n+      of `mod`][self], as in use `foo::{self, bar}`\n \n * Libraries\n \n@@ -101,7 +106,7 @@ Version 1.0.0-alpha (January 2015)\n       it is easier to discuss failure in the context of error handling\n       without making clarifications as to whether you are referring to\n       the 'fail' macro or failure more generally.\n-    * On Linux, `OsRng` prefers the new, more reliable `getrandom'\n+    * On Linux, `OsRng` prefers the new, more reliable `getrandom`\n       syscall when available.\n     * The 'serialize' crate has been renamed 'rustc-serialize' and\n       moved out of the distribution to Cargo. Although it is widely\n@@ -159,7 +164,9 @@ Version 1.0.0-alpha (January 2015)\n [show]: https://github.com/rust-lang/rfcs/blob/master/text/0504-show-stabilization.md\n [derive]: https://github.com/rust-lang/rfcs/blob/master/text/0534-deriving2derive.md\n [self]: https://github.com/rust-lang/rfcs/blob/master/text/0532-self-in-use.md\n-[fallback]: https://github.com/rust-lang/rfcs/blob/master/text/0212-restore-int-fallback.md\n+[fb]: https://github.com/rust-lang/rfcs/blob/master/text/0212-restore-int-fallback.md\n+[objsafe]: https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\n+[assoc]: https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n \n Version 0.12.0 (October 2014)\n -----------------------------"}]}