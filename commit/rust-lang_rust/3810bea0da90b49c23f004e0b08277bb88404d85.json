{"sha": "3810bea0da90b49c23f004e0b08277bb88404d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MTBiZWEwZGE5MGI0OWMyM2YwMDRlMGIwODI3N2JiODg0MDRkODU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T21:14:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:57Z"}, "message": "libsyntax: De-`@mut` `TtReader::interpolations`", "tree": {"sha": "1b9c190d3c2cd5a3aaacbca1a1e30c9342e1ecf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9c190d3c2cd5a3aaacbca1a1e30c9342e1ecf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3810bea0da90b49c23f004e0b08277bb88404d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3810bea0da90b49c23f004e0b08277bb88404d85", "html_url": "https://github.com/rust-lang/rust/commit/3810bea0da90b49c23f004e0b08277bb88404d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3810bea0da90b49c23f004e0b08277bb88404d85/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "185608754d9418c226ca1a8c8889042046c25c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/185608754d9418c226ca1a8c8889042046c25c63", "html_url": "https://github.com/rust-lang/rust/commit/185608754d9418c226ca1a8c8889042046c25c63"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "bcede5a7dc5746061b407ab4c00ff07d456178cb", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3810bea0da90b49c23f004e0b08277bb88404d85/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810bea0da90b49c23f004e0b08277bb88404d85/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=3810bea0da90b49c23f004e0b08277bb88404d85", "patch": "@@ -17,6 +17,7 @@ use parse::token::{EOF, INTERPOLATED, IDENT, Token, nt_ident};\n use parse::token::{ident_to_str};\n use parse::lexer::TokenAndSpan;\n \n+use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::option;\n \n@@ -34,7 +35,7 @@ pub struct TtReader {\n     // the unzipped tree:\n     stack: @mut TtFrame,\n     /* for MBE-style macro transcription */\n-    interpolations: HashMap<Ident, @named_match>,\n+    priv interpolations: RefCell<HashMap<Ident, @named_match>>,\n     repeat_idx: ~[uint],\n     repeat_len: ~[uint],\n     /* cached: */\n@@ -59,8 +60,8 @@ pub fn new_tt_reader(sp_diag: @mut SpanHandler,\n             up: option::None\n         },\n         interpolations: match interp { /* just a convienience */\n-            None => HashMap::new(),\n-            Some(x) => x\n+            None => RefCell::new(HashMap::new()),\n+            Some(x) => RefCell::new(x),\n         },\n         repeat_idx: ~[],\n         repeat_len: ~[],\n@@ -114,7 +115,11 @@ fn lookup_cur_matched_by_matched(r: &mut TtReader,\n }\n \n fn lookup_cur_matched(r: &mut TtReader, name: Ident) -> @named_match {\n-    match r.interpolations.find_copy(&name) {\n+    let matched_opt = {\n+        let interpolations = r.interpolations.borrow();\n+        interpolations.get().find_copy(&name)\n+    };\n+    match matched_opt {\n         Some(s) => lookup_cur_matched_by_matched(r, s),\n         None => {\n             r.sp_diag.span_fatal(r.cur_span, format!(\"unknown macro variable `{}`\","}]}