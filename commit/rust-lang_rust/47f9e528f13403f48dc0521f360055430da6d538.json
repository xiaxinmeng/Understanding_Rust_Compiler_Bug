{"sha": "47f9e528f13403f48dc0521f360055430da6d538", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjllNTI4ZjEzNDAzZjQ4ZGMwNTIxZjM2MDA1NTQzMGRhNmQ1Mzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-27T19:42:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-27T19:42:48Z"}, "message": "Auto merge of #25827 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #25128, #25651, #25668, #25726, #25760, #25792, #25806, #25807\n- Failed merges:", "tree": {"sha": "e6693fe5912887e4baddf08591c122b180878993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6693fe5912887e4baddf08591c122b180878993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f9e528f13403f48dc0521f360055430da6d538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f9e528f13403f48dc0521f360055430da6d538", "html_url": "https://github.com/rust-lang/rust/commit/47f9e528f13403f48dc0521f360055430da6d538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f9e528f13403f48dc0521f360055430da6d538/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af60248ecf29127e32f5a99020be7eacc4046035", "url": "https://api.github.com/repos/rust-lang/rust/commits/af60248ecf29127e32f5a99020be7eacc4046035", "html_url": "https://github.com/rust-lang/rust/commit/af60248ecf29127e32f5a99020be7eacc4046035"}, {"sha": "6090d15e93ae4ffe06bd87568d9eac8d0013e61b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6090d15e93ae4ffe06bd87568d9eac8d0013e61b", "html_url": "https://github.com/rust-lang/rust/commit/6090d15e93ae4ffe06bd87568d9eac8d0013e61b"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "20a5fa390f00b5ca1273c84d2f9d222e5331bd41", "filename": "configure", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/configure", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -863,11 +863,6 @@ then\n     CFG_DISABLE_JEMALLOC=1\n fi\n \n-if [ -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n-then\n-    err \"either clang or gcc is required\"\n-fi\n-\n # OS X 10.9, gcc is actually clang. This can cause some confusion in the build\n # system, so if we find that gcc is clang, we should just use clang directly.\n if [ $CFG_OSTYPE = apple-darwin -a -z \"$CFG_ENABLE_CLANG\" ]"}, {"sha": "0cb1c5dc32b8ecfbad0f93d490bd163d006f45ba", "filename": "man/rustc.1", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -1,4 +1,4 @@\n-.TH RUSTC \"1\" \"March 2014\" \"rustc 0.13.0\" \"User Commands\"\n+.TH RUSTC \"1\" \"August 2015\" \"rustc 1.2.0\" \"User Commands\"\n .SH NAME\n rustc \\- The Rust compiler\n .SH SYNOPSIS\n@@ -160,7 +160,7 @@ If the value is 'help', then a list of available CPUs is printed.\n \\fBtarget\\-feature\\fR='\\fI+feature1\\fR,\\fI\\-feature2\\fR'\n A comma\\[hy]separated list of features to enable or disable for the target.\n A preceding '+' enables a feature while a preceding '\\-' disables it.\n-Available features can be discovered through \\fItarget\\-cpu=help\\fR.\n+Available features can be discovered through \\fIllc -mcpu=help\\fR.\n .TP\n \\fBpasses\\fR=\\fIval\\fR\n A space\\[hy]separated list of extra LLVM passes to run."}, {"sha": "b710c2c3a25607725906c5b6f478ff089048e6a0", "filename": "man/rustdoc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -1,4 +1,4 @@\n-.TH RUSTDOC \"1\" \"March 2014\" \"rustdoc 0.13.0\" \"User Commands\"\n+.TH RUSTDOC \"1\" \"August 2015\" \"rustdoc 1.2.0\" \"User Commands\"\n .SH NAME\n rustdoc \\- generate documentation from Rust source code\n .SH SYNOPSIS"}, {"sha": "4c9f16fdaeeb5caab6dbd47f85646418124c24b9", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -212,7 +212,7 @@ impl<T:Copy> Cell<T> {\n         }\n     }\n \n-    /// Gets a reference to the underlying `UnsafeCell`.\n+    /// Returns a reference to the underlying `UnsafeCell`.\n     ///\n     /// # Unsafety\n     ///\n@@ -439,7 +439,7 @@ impl<T: ?Sized> RefCell<T> {\n         }\n     }\n \n-    /// Gets a reference to the underlying `UnsafeCell`.\n+    /// Returns a reference to the underlying `UnsafeCell`.\n     ///\n     /// This can be used to circumvent `RefCell`'s safety checks.\n     ///\n@@ -671,8 +671,8 @@ impl<T> UnsafeCell<T> {\n     ///\n     /// # Unsafety\n     ///\n-    /// This function is unsafe because there is no guarantee that this or other threads are\n-    /// currently inspecting the inner value.\n+    /// This function is unsafe because this thread or another thread may currently be\n+    /// inspecting the inner value.\n     ///\n     /// # Examples\n     ///"}, {"sha": "c416a9810eb0ebedee7b449dc3f3ef106ee2f856", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -279,7 +279,7 @@ pub fn sanitize(s: &str) -> String {\n }\n \n pub fn mangle<PI: Iterator<Item=PathElem>>(path: PI,\n-                                      hash: Option<&str>) -> String {\n+                                           hash: Option<&str>) -> String {\n     // Follow C++ namespace-mangling style, see\n     // http://en.wikipedia.org/wiki/Name_mangling for more info.\n     //"}, {"sha": "5352c61d8c0ad68ae251ea93a027d39ff8ac7598", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -342,8 +342,8 @@ struct HandlerFreeVars<'a> {\n }\n \n unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext<'a>,\n-                                           msg: &'b str,\n-                                           cookie: c_uint) {\n+                                               msg: &'b str,\n+                                               cookie: c_uint) {\n     use syntax::codemap::ExpnId;\n \n     match cgcx.lto_ctxt {"}, {"sha": "379c925b5750ee71412cca1450ceca31c82a8792", "filename": "src/libstd/env.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -598,40 +598,94 @@ pub fn page_size() -> usize {\n pub mod consts {\n     /// A string describing the architecture of the CPU that this is currently\n     /// in use.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - x86\n+    /// - x86_64\n+    /// - arm\n+    /// - aarch64\n+    /// - mips\n+    /// - mipsel\n+    /// - powerpc\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const ARCH: &'static str = super::arch::ARCH;\n \n     /// The family of the operating system. In this case, `unix`.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - unix\n+    /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const FAMILY: &'static str = super::os::FAMILY;\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `linux`.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - linux\n+    /// - macos\n+    /// - ios\n+    /// - freebsd\n+    /// - dragonfly\n+    /// - bitrig\n+    /// - openbsd\n+    /// - android\n+    /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const OS: &'static str = super::os::OS;\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - lib\n+    /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const DLL_PREFIX: &'static str = super::os::DLL_PREFIX;\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.so`.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - .so\n+    /// - .dylib\n+    /// - .dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const DLL_SUFFIX: &'static str = super::os::DLL_SUFFIX;\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `so`.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - .so\n+    /// - .dylib\n+    /// - .dll\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const DLL_EXTENSION: &'static str = super::os::DLL_EXTENSION;\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - exe\n+    /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const EXE_SUFFIX: &'static str = super::os::EXE_SUFFIX;\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n+    ///\n+    /// Some possible values:\n+    ///\n+    /// - exe\n+    /// - `\"\"` (an empty string)\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const EXE_EXTENSION: &'static str = super::os::EXE_EXTENSION;\n "}, {"sha": "b60a84da81ddfdd5e8ae44727321f99e20c640ec", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -844,6 +844,8 @@ pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n \n /// Rename a file or directory to a new name.\n ///\n+/// This will not work if the new name is on a different mount point.\n+///\n /// # Errors\n ///\n /// This function will return an error if the provided `from` doesn't exist, if"}, {"sha": "79f0c436759b389f957be0b1562c5eef8c874658", "filename": "src/test/compile-fail/asm-src-loc-codegen-units.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47f9e528f13403f48dc0521f360055430da6d538/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f9e528f13403f48dc0521f360055430da6d538/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc-codegen-units.rs?ref=47f9e528f13403f48dc0521f360055430da6d538", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// ignore-stage1 (#20184)\n+// WONTFIX(#20184) Needs landing pads (not present in stage1) or the compiler hangs.\n+// ignore-stage1\n // compile-flags: -C codegen-units=2\n // error-pattern: build without -C codegen-units for more exact errors\n "}]}