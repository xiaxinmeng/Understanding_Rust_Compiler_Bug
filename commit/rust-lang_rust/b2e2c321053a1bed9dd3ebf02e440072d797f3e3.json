{"sha": "b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTJjMzIxMDUzYTFiZWQ5ZGQzZWJmMDJlNDQwMDcyZDc5N2YzZTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-18T14:23:13Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-27T09:17:25Z"}, "message": "Generate the `NodeId` for `existential type` in the AST", "tree": {"sha": "e75d20c373ff25c531e4dc9dabbbb54d3b9c686c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e75d20c373ff25c531e4dc9dabbbb54d3b9c686c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "html_url": "https://github.com/rust-lang/rust/commit/b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdcace0eb4a8e80044d582e5f44d5f00fe9468da", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcace0eb4a8e80044d582e5f44d5f00fe9468da", "html_url": "https://github.com/rust-lang/rust/commit/bdcace0eb4a8e80044d582e5f44d5f00fe9468da"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "d8d222b9a39f7a55ef93f564689bd6082b6470ba", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -1167,12 +1167,14 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 hir::TyTraitObject(bounds, lifetime_bound)\n             }\n-            TyKind::ImplTrait(ref bounds) => {\n+            TyKind::ImplTrait(exist_ty_node_id, ref bounds) => {\n                 let span = t.span;\n                 match itctx {\n                     ImplTraitContext::Existential(fn_def_id) => {\n                         self.lower_existential_impl_trait(\n-                            span, fn_def_id, |this| this.lower_param_bounds(bounds, itctx))\n+                            span, fn_def_id, exist_ty_node_id,\n+                            |this| this.lower_param_bounds(bounds, itctx),\n+                        )\n                     }\n                     ImplTraitContext::Universal(def_id) => {\n                         let def_node_id = self.next_id().node_id;\n@@ -1240,13 +1242,9 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         span: Span,\n         fn_def_id: DefId,\n+        exist_ty_node_id: NodeId,\n         lower_bounds: impl FnOnce(&mut LoweringContext) -> hir::GenericBounds,\n     ) -> hir::Ty_ {\n-        // We need to manually repeat the code of `next_id` because the lowering\n-        // needs to happen while the owner_id is pointing to the item itself,\n-        // because items are their own owners\n-        let exist_ty_node_id = self.sess.next_node_id();\n-\n         // Make sure we know that some funky desugaring has been going on here.\n         // This is a first: there is code in other places like for loop\n         // desugaring that explicitly states that we don't want to track that.\n@@ -1365,18 +1363,18 @@ impl<'a> LoweringContext<'a> {\n \n             fn visit_ty(&mut self, t: &'v hir::Ty) {\n                 match t.node {\n-                // Don't collect elided lifetimes used inside of `fn()` syntax\n+                    // Don't collect elided lifetimes used inside of `fn()` syntax\n                     hir::Ty_::TyBareFn(_) => {\n-                    let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n-                    self.collect_elided_lifetimes = false;\n+                        let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n+                        self.collect_elided_lifetimes = false;\n \n-                    // Record the \"stack height\" of `for<'a>` lifetime bindings\n-                    // to be able to later fully undo their introduction.\n-                    let old_len = self.currently_bound_lifetimes.len();\n-                    hir::intravisit::walk_ty(self, t);\n-                    self.currently_bound_lifetimes.truncate(old_len);\n+                        // Record the \"stack height\" of `for<'a>` lifetime bindings\n+                        // to be able to later fully undo their introduction.\n+                        let old_len = self.currently_bound_lifetimes.len();\n+                        hir::intravisit::walk_ty(self, t);\n+                        self.currently_bound_lifetimes.truncate(old_len);\n \n-                    self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n+                        self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n                     },\n                     _ => hir::intravisit::walk_ty(self, t),\n                 }\n@@ -3093,12 +3091,28 @@ impl<'a> LoweringContext<'a> {\n             ItemKind::Use(ref use_tree) => {\n                 let mut vec = SmallVector::one(hir::ItemId { id: i.id });\n                 self.lower_item_id_use_tree(use_tree, i.id, &mut vec);\n-                return vec;\n+                vec\n             }\n-            ItemKind::MacroDef(..) => return SmallVector::new(),\n-            _ => {}\n+            ItemKind::MacroDef(..) => SmallVector::new(),\n+            ItemKind::Fn(ref decl, ..) => {\n+                struct IdVisitor { ids: SmallVector<hir::ItemId> }\n+                impl<'a> Visitor<'a> for IdVisitor {\n+                    fn visit_ty(&mut self, ty: &'a Ty) {\n+                        if let TyKind::ImplTrait(id, _) = ty.node {\n+                            self.ids.push(hir::ItemId { id });\n+                        }\n+                        visit::walk_ty(self, ty);\n+                    }\n+                }\n+                let mut visitor = IdVisitor { ids: SmallVector::one(hir::ItemId { id: i.id }) };\n+                match decl.output {\n+                    FunctionRetTy::Default(_) => {},\n+                    FunctionRetTy::Ty(ref ty) => visitor.visit_ty(ty),\n+                }\n+                visitor.ids\n+            },\n+            _ => SmallVector::one(hir::ItemId { id: i.id }),\n         }\n-        SmallVector::one(hir::ItemId { id: i.id })\n     }\n \n     fn lower_item_id_use_tree(&mut self,"}, {"sha": "711bcfbde2c6f4ff52f8fc6d583fe6f9ad274c6c", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -669,7 +669,7 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n         if let ast::FunctionRetTy::Ty(ref ty) = ret_ty.output {\n             fn involves_impl_trait(ty: &ast::Ty) -> bool {\n                 match ty.node {\n-                    ast::TyKind::ImplTrait(_) => true,\n+                    ast::TyKind::ImplTrait(..) => true,\n                     ast::TyKind::Slice(ref subty) |\n                     ast::TyKind::Array(ref subty, _) |\n                     ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. }) |"}, {"sha": "97140d18c08656be9b6ce0c6679c3ba988f3cae9", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -208,7 +208,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n                 self.no_questions_in_bounds(bounds, \"trait object types\", false);\n             }\n-            TyKind::ImplTrait(ref bounds) => {\n+            TyKind::ImplTrait(_, ref bounds) => {\n                 if !bounds.iter()\n                           .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n@@ -505,7 +505,7 @@ impl<'a> NestedImplTraitVisitor<'a> {\n \n impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n     fn visit_ty(&mut self, t: &'a Ty) {\n-        if let TyKind::ImplTrait(_) = t.node {\n+        if let TyKind::ImplTrait(..) = t.node {\n             if let Some(outer_impl_trait) = self.outer_impl_trait {\n                 struct_span_err!(self.session, t.span, E0666,\n                                  \"nested `impl Trait` is not allowed\")\n@@ -570,7 +570,7 @@ impl<'a> ImplTraitProjectionVisitor<'a> {\n impl<'a> Visitor<'a> for ImplTraitProjectionVisitor<'a> {\n     fn visit_ty(&mut self, t: &'a Ty) {\n         match t.node {\n-            TyKind::ImplTrait(_) => {\n+            TyKind::ImplTrait(..) => {\n                 if self.is_banned {\n                     struct_span_err!(self.session, t.span, E0667,\n                                  \"`impl Trait` is not allowed in path parameters\")"}, {"sha": "70feba1eff866bf2a571269847e8c4cb9226b27a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -306,7 +306,7 @@ impl Sig for ast::Ty {\n                 let nested = pprust::bounds_to_string(bounds);\n                 Ok(text_sig(nested))\n             }\n-            ast::TyKind::ImplTrait(ref bounds) => {\n+            ast::TyKind::ImplTrait(_, ref bounds) => {\n                 // FIXME recurse into bounds\n                 let nested = pprust::bounds_to_string(bounds);\n                 Ok(text_sig(format!(\"impl {}\", nested)))"}, {"sha": "ca07ac7988dfe8b06929a1fd4452eed6bf4439db", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -1547,7 +1547,11 @@ pub enum TyKind {\n     TraitObject(GenericBounds, TraitObjectSyntax),\n     /// An `impl Bound1 + Bound2 + Bound3` type\n     /// where `Bound` is a trait or a lifetime.\n-    ImplTrait(GenericBounds),\n+    ///\n+    /// The `NodeId` exists to prevent lowering from having to\n+    /// generate `NodeId`s on the fly, which would complicate\n+    /// the generation of `existential type` items significantly\n+    ImplTrait(NodeId, GenericBounds),\n     /// No-op; kept solely so that we can pretty-print faithfully\n     Paren(P<Ty>),\n     /// Unused for now"}, {"sha": "1035be3a159792825928e916626a4f4fbe03ebc3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -396,8 +396,8 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::TraitObject(bounds, syntax) => {\n                 TyKind::TraitObject(bounds.move_map(|b| fld.fold_param_bound(b)), syntax)\n             }\n-            TyKind::ImplTrait(bounds) => {\n-                TyKind::ImplTrait(bounds.move_map(|b| fld.fold_param_bound(b)))\n+            TyKind::ImplTrait(id, bounds) => {\n+                TyKind::ImplTrait(fld.new_id(id), bounds.move_map(|b| fld.fold_param_bound(b)))\n             }\n             TyKind::Mac(mac) => {\n                 TyKind::Mac(fld.fold_mac(mac))"}, {"sha": "8690918c805253b93e5681d2e8a2f47a7b4ba008", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -1537,7 +1537,7 @@ impl<'a> Parser<'a> {\n             // Always parse bounds greedily for better error recovery.\n             let bounds = self.parse_generic_bounds()?;\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n-            TyKind::ImplTrait(bounds)\n+            TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n                   self.look_ahead(1, |t| t.can_begin_bound() &&\n                                          !can_continue_type_after_non_fn_ident(t)) {"}, {"sha": "74edf538842c6bbb717d826597a4dfe6a3d5b7e4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -1078,7 +1078,7 @@ impl<'a> State<'a> {\n                 let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n                 self.print_type_bounds(prefix, &bounds[..])?;\n             }\n-            ast::TyKind::ImplTrait(ref bounds) => {\n+            ast::TyKind::ImplTrait(_, ref bounds) => {\n                 self.print_type_bounds(\"impl\", &bounds[..])?;\n             }\n             ast::TyKind::Array(ref ty, ref length) => {"}, {"sha": "bb35bcee4380616d678abc98d397c630b1f4473a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e2c321053a1bed9dd3ebf02e440072d797f3e3/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b2e2c321053a1bed9dd3ebf02e440072d797f3e3", "patch": "@@ -338,7 +338,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n             visitor.visit_anon_const(length)\n         }\n         TyKind::TraitObject(ref bounds, ..) |\n-        TyKind::ImplTrait(ref bounds) => {\n+        TyKind::ImplTrait(_, ref bounds) => {\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n         TyKind::Typeof(ref expression) => {"}]}