{"sha": "7407a788149402039ffbb56aed50de2023652d46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDdhNzg4MTQ5NDAyMDM5ZmZiYjU2YWVkNTBkZTIwMjM2NTJkNDY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-12T10:11:06Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-12T10:11:06Z"}, "message": "Deny bare trait objects in src/libterm", "tree": {"sha": "558891fc34df6f2832a0c2a96964c6375bd00b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/558891fc34df6f2832a0c2a96964c6375bd00b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7407a788149402039ffbb56aed50de2023652d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7407a788149402039ffbb56aed50de2023652d46", "html_url": "https://github.com/rust-lang/rust/commit/7407a788149402039ffbb56aed50de2023652d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7407a788149402039ffbb56aed50de2023652d46/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c946c2539e9690fab5dbf7ac217ec696ac263cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c946c2539e9690fab5dbf7ac217ec696ac263cf3", "html_url": "https://github.com/rust-lang/rust/commit/c946c2539e9690fab5dbf7ac217ec696ac263cf3"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "6b115770237e6dac8ee48ab00b326ac8581347df", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7407a788149402039ffbb56aed50de2023652d46/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407a788149402039ffbb56aed50de2023652d46/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=7407a788149402039ffbb56aed50de2023652d46", "patch": "@@ -45,6 +45,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\",\n        test(attr(deny(warnings))))]\n+#![deny(bare_trait_objects)]\n #![deny(missing_docs)]\n \n #![cfg_attr(windows, feature(libc))]\n@@ -66,9 +67,9 @@ pub mod terminfo;\n mod win;\n \n /// Alias for stdout terminals.\n-pub type StdoutTerminal = Terminal<Output = Stdout> + Send;\n+pub type StdoutTerminal = dyn Terminal<Output = Stdout> + Send;\n /// Alias for stderr terminals.\n-pub type StderrTerminal = Terminal<Output = Stderr> + Send;\n+pub type StderrTerminal = dyn Terminal<Output = Stderr> + Send;\n \n #[cfg(not(windows))]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be"}, {"sha": "51e0fa315f43538a78fe573d88ec306570ad248a", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7407a788149402039ffbb56aed50de2023652d46/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407a788149402039ffbb56aed50de2023652d46/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=7407a788149402039ffbb56aed50de2023652d46", "patch": "@@ -58,7 +58,7 @@ impl error::Error for Error {\n         \"failed to create TermInfo\"\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         use self::Error::*;\n         match self {\n             &IoError(ref e) => Some(e),"}, {"sha": "d5e5df547334c28bfa544ea4e9708113c1cb729f", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7407a788149402039ffbb56aed50de2023652d46/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407a788149402039ffbb56aed50de2023652d46/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=7407a788149402039ffbb56aed50de2023652d46", "patch": "@@ -164,7 +164,7 @@ pub static stringnames: &'static[&'static str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tb\n     \"OTG3\", \"OTG1\", \"OTG4\", \"OTGR\", \"OTGL\", \"OTGU\", \"OTGD\", \"OTGH\", \"OTGV\", \"OTGC\", \"meml\", \"memu\",\n     \"box1\"];\n \n-fn read_le_u16(r: &mut io::Read) -> io::Result<u16> {\n+fn read_le_u16(r: &mut dyn io::Read) -> io::Result<u16> {\n     let mut b = [0; 2];\n     let mut amt = 0;\n     while amt < b.len() {\n@@ -176,7 +176,7 @@ fn read_le_u16(r: &mut io::Read) -> io::Result<u16> {\n     Ok((b[0] as u16) | ((b[1] as u16) << 8))\n }\n \n-fn read_byte(r: &mut io::Read) -> io::Result<u8> {\n+fn read_byte(r: &mut dyn io::Read) -> io::Result<u8> {\n     match r.bytes().next() {\n         Some(s) => s,\n         None => Err(io::Error::new(io::ErrorKind::Other, \"end of file\")),\n@@ -185,7 +185,7 @@ fn read_byte(r: &mut io::Read) -> io::Result<u8> {\n \n /// Parse a compiled terminfo entry, using long capability names if `longnames`\n /// is true\n-pub fn parse(file: &mut io::Read, longnames: bool) -> Result<TermInfo, String> {\n+pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, String> {\n     macro_rules! t( ($e:expr) => (\n         match $e {\n             Ok(e) => e,"}]}