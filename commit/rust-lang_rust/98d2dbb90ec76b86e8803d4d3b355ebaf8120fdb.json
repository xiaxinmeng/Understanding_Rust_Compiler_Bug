{"sha": "98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDJkYmI5MGVjNzZiODZlODgwM2Q0ZDNiMzU1ZWJhZjgxMjBmZGI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-10T21:26:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-10T21:26:41Z"}, "message": "Return original text range in PrepareRename responses when inside macro", "tree": {"sha": "673caa2cf73840b1763da6bac80d070e04068505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673caa2cf73840b1763da6bac80d070e04068505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb", "html_url": "https://github.com/rust-lang/rust/commit/98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052fe491797027ca930c0cd3d9cc62c920e2a17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/052fe491797027ca930c0cd3d9cc62c920e2a17d", "html_url": "https://github.com/rust-lang/rust/commit/052fe491797027ca930c0cd3d9cc62c920e2a17d"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "1e378279d942ba2580a1c84264af0958e581923b", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=98d2dbb90ec76b86e8803d4d3b355ebaf8120fdb", "patch": "@@ -21,7 +21,7 @@ use crate::{display::TryToNav, FilePosition, FileSystemEdit, RangeInfo, SourceCh\n \n type RenameResult<T> = Result<T, RenameError>;\n #[derive(Debug)]\n-pub struct RenameError(pub(crate) String);\n+pub struct RenameError(String);\n \n impl fmt::Display for RenameError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -47,16 +47,15 @@ pub(crate) fn prepare_rename(\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n-    let range = match &sema\n+    let name_like = sema\n         .find_node_at_offset_with_descend(&syntax, position.offset)\n-        .ok_or_else(|| format_err!(\"No references found at position\"))?\n-    {\n+        .ok_or_else(|| format_err!(\"No references found at position\"))?;\n+    let node = match &name_like {\n         ast::NameLike::Name(it) => it.syntax(),\n         ast::NameLike::NameRef(it) => it.syntax(),\n         ast::NameLike::Lifetime(it) => it.syntax(),\n-    }\n-    .text_range();\n-    Ok(RangeInfo::new(range, ()))\n+    };\n+    Ok(RangeInfo::new(sema.original_range(node).range, ()))\n }\n \n // Feature: Rename\n@@ -546,6 +545,8 @@ mod tests {\n \n     use crate::{fixture, FileId};\n \n+    use super::{RangeInfo, RenameError};\n+\n     fn check(new_name: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n         let (analysis, position) = fixture::position(ra_fixture_before);\n@@ -591,6 +592,45 @@ mod tests {\n         expect.assert_debug_eq(&source_change)\n     }\n \n+    fn check_prepare(ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let result = analysis\n+            .prepare_rename(position)\n+            .unwrap_or_else(|err| panic!(\"PrepareRename was cancelled: {}\", err));\n+        match result {\n+            Ok(RangeInfo { range, info: () }) => {\n+                let source = analysis.file_text(position.file_id).unwrap();\n+                expect.assert_eq(&format!(\"{:?}: {}\", range, &source[range]))\n+            }\n+            Err(RenameError(err)) => expect.assert_eq(&err),\n+        };\n+    }\n+\n+    #[test]\n+    fn test_prepare_rename_namelikes() {\n+        check_prepare(r\"fn name$0<'lifetime>() {}\", expect![[r#\"3..7: name\"#]]);\n+        check_prepare(r\"fn name<'lifetime$0>() {}\", expect![[r#\"8..17: 'lifetime\"#]]);\n+        check_prepare(r\"fn name<'lifetime>() { name$0(); }\", expect![[r#\"23..27: name\"#]]);\n+    }\n+\n+    #[test]\n+    fn test_prepare_rename_in_macro() {\n+        check_prepare(\n+            r\"macro_rules! foo {\n+    ($ident:ident) => {\n+        pub struct $ident;\n+    }\n+}\n+foo!(Foo$0);\",\n+            expect![[r#\"83..86: Foo\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_prepare_rename_keyword() {\n+        check_prepare(r\"struct$0 Foo;\", expect![[r#\"No references found at position\"#]]);\n+    }\n+\n     #[test]\n     fn test_rename_to_underscore() {\n         check(\"_\", r#\"fn main() { let i$0 = 1; }\"#, r#\"fn main() { let _ = 1; }\"#);"}]}