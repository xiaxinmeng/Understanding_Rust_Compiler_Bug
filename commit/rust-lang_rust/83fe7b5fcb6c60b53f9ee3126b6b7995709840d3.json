{"sha": "83fe7b5fcb6c60b53f9ee3126b6b7995709840d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZmU3YjVmY2I2YzYwYjUzZjllZTMxMjZiNmI3OTk1NzA5ODQwZDM=", "commit": {"author": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-08-03T16:44:59Z"}, "committer": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-08-03T16:44:59Z"}, "message": "Resolve out of line modules inside inline module with attribute path\n\nFixed #1510\nFixed #1529", "tree": {"sha": "237790e58b0e8a64f42ea562d2cdf454dee83b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/237790e58b0e8a64f42ea562d2cdf454dee83b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3", "html_url": "https://github.com/rust-lang/rust/commit/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3/comments", "author": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca30b6c4bb717e3cc54bfc98ffaa7a6d8c2cdfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca30b6c4bb717e3cc54bfc98ffaa7a6d8c2cdfd", "html_url": "https://github.com/rust-lang/rust/commit/0ca30b6c4bb717e3cc54bfc98ffaa7a6d8c2cdfd"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "7da2dcdff1c5eedc613c2b13937dc301de958f2e", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=83fe7b5fcb6c60b53f9ee3126b6b7995709840d3", "patch": "@@ -483,7 +483,7 @@ struct ModCollector<'a, D> {\n     module_id: CrateModuleId,\n     file_id: HirFileId,\n     raw_items: &'a raw::RawItems,\n-    parent_module: Option<&'a Name>,\n+    parent_module: Option<ParentModule<'a>>,\n }\n \n impl<DB> ModCollector<'_, &'_ mut DefCollector<&'_ DB>>\n@@ -508,15 +508,16 @@ where\n     fn collect_module(&mut self, module: &raw::ModuleData) {\n         match module {\n             // inline module, just recurse\n-            raw::ModuleData::Definition { name, items, ast_id } => {\n+            raw::ModuleData::Definition { name, items, ast_id, attr_path } => {\n                 let module_id =\n                     self.push_child_module(name.clone(), ast_id.with_file_id(self.file_id), None);\n+                let parent_module = ParentModule { name, attr_path: attr_path.as_ref() };\n                 ModCollector {\n                     def_collector: &mut *self.def_collector,\n                     module_id,\n                     file_id: self.file_id,\n                     raw_items: self.raw_items,\n-                    parent_module: Some(name),\n+                    parent_module: Some(parent_module),\n                 }\n                 .collect(&*items);\n             }\n@@ -530,7 +531,7 @@ where\n                     name,\n                     is_root,\n                     attr_path.as_ref(),\n-                    self.parent_module,\n+                    self.parent_module.as_ref(),\n                 ) {\n                     Ok(file_id) => {\n                         let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n@@ -647,7 +648,7 @@ fn resolve_submodule(\n     name: &Name,\n     is_root: bool,\n     attr_path: Option<&SmolStr>,\n-    parent_module: Option<&Name>,\n+    parent_module: Option<&ParentModule>,\n ) -> Result<FileId, RelativePathBuf> {\n     let file_id = file_id.original_file(db);\n     let source_root_id = db.file_source_root(file_id);\n@@ -657,20 +658,49 @@ fn resolve_submodule(\n     let mod_name = path.file_stem().unwrap_or(\"unknown\");\n \n     let resolve_mode = match (attr_path.filter(|p| !p.is_empty()), parent_module) {\n-        (Some(file_path), Some(parent_name)) => {\n+        (Some(file_path), Some(parent_module)) => {\n             let file_path = normalize_attribute_path(file_path);\n-            let path = dir_path.join(format!(\"{}/{}\", parent_name, file_path)).normalize();\n-            ResolutionMode::InsideInlineModule(InsideInlineModuleMode::WithAttributePath(path))\n+            match parent_module.attribute_path() {\n+                Some(parent_module_attr_path) => {\n+                    let path = dir_path\n+                        .join(format!(\n+                            \"{}/{}\",\n+                            normalize_attribute_path(parent_module_attr_path),\n+                            file_path\n+                        ))\n+                        .normalize();\n+                    ResolutionMode::InlineModuleWithAttributePath(\n+                        InsideInlineModuleMode::WithAttributePath(path),\n+                    )\n+                }\n+                None => {\n+                    let path =\n+                        dir_path.join(format!(\"{}/{}\", parent_module.name, file_path)).normalize();\n+                    ResolutionMode::InsideInlineModule(InsideInlineModuleMode::WithAttributePath(\n+                        path,\n+                    ))\n+                }\n+            }\n         }\n+        (None, Some(parent_module)) => match parent_module.attribute_path() {\n+            Some(parent_module_attr_path) => {\n+                let path = dir_path.join(format!(\n+                    \"{}/{}.rs\",\n+                    normalize_attribute_path(parent_module_attr_path),\n+                    name\n+                ));\n+                ResolutionMode::InlineModuleWithAttributePath(InsideInlineModuleMode::File(path))\n+            }\n+            None => {\n+                let path = dir_path.join(format!(\"{}/{}.rs\", parent_module.name, name));\n+                ResolutionMode::InsideInlineModule(InsideInlineModuleMode::File(path))\n+            }\n+        },\n         (Some(file_path), None) => {\n             let file_path = normalize_attribute_path(file_path);\n             let path = dir_path.join(file_path.as_ref()).normalize();\n             ResolutionMode::OutOfLine(OutOfLineMode::WithAttributePath(path))\n         }\n-        (None, Some(parent_name)) => {\n-            let path = dir_path.join(format!(\"{}/{}.rs\", parent_name, name));\n-            ResolutionMode::InsideInlineModule(InsideInlineModuleMode::File(path))\n-        }\n         _ => {\n             let is_dir_owner = is_root || mod_name == \"mod\";\n             if is_dir_owner {\n@@ -743,6 +773,7 @@ impl InsideInlineModuleMode {\n enum ResolutionMode {\n     OutOfLine(OutOfLineMode),\n     InsideInlineModule(InsideInlineModuleMode),\n+    InlineModuleWithAttributePath(InsideInlineModuleMode),\n }\n \n impl ResolutionMode {\n@@ -752,6 +783,7 @@ impl ResolutionMode {\n         match self {\n             OutOfLine(mode) => mode.resolve(source_root),\n             InsideInlineModule(mode) => mode.resolve(source_root),\n+            InlineModuleWithAttributePath(mode) => mode.resolve(source_root),\n         }\n     }\n }\n@@ -773,6 +805,17 @@ fn resolve_find_result(\n     }\n }\n \n+struct ParentModule<'a> {\n+    name: &'a Name,\n+    attr_path: Option<&'a SmolStr>,\n+}\n+\n+impl<'a> ParentModule<'a> {\n+    pub fn attribute_path(&self) -> Option<&SmolStr> {\n+        self.attr_path.filter(|p| !p.is_empty())\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ra_db::SourceDatabase;"}, {"sha": "584e15e290d652df0b05bafd3ae36ab11439159a", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=83fe7b5fcb6c60b53f9ee3126b6b7995709840d3", "patch": "@@ -130,8 +130,17 @@ impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum ModuleData {\n-    Declaration { name: Name, ast_id: FileAstId<ast::Module>, attr_path: Option<SmolStr> },\n-    Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n+    Declaration {\n+        name: Name,\n+        ast_id: FileAstId<ast::Module>,\n+        attr_path: Option<SmolStr>,\n+    },\n+    Definition {\n+        name: Name,\n+        ast_id: FileAstId<ast::Module>,\n+        items: Vec<RawItem>,\n+        attr_path: Option<SmolStr>,\n+    },\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -256,20 +265,22 @@ impl RawItemsCollector {\n             None => return,\n         };\n \n-        let attr_path = extract_mod_path_attribute(&module);\n         let ast_id = self.source_ast_id_map.ast_id(&module);\n         if module.has_semi() {\n+            let attr_path = extract_mod_path_attribute(&module);\n             let item =\n                 self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id, attr_path });\n             self.push_item(current_module, RawItem::Module(item));\n             return;\n         }\n \n         if let Some(item_list) = module.item_list() {\n+            let attr_path = extract_mod_path_attribute(&module);\n             let item = self.raw_items.modules.alloc(ModuleData::Definition {\n                 name,\n                 ast_id,\n                 items: Vec::new(),\n+                attr_path,\n             });\n             self.process_module(Some(item), item_list);\n             self.push_item(current_module, RawItem::Module(item));"}, {"sha": "6dd18df1a9ac09601ec336592eb0c8adcb6be67d", "filename": "crates/ra_hir/src/nameres/tests/mods.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83fe7b5fcb6c60b53f9ee3126b6b7995709840d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs?ref=83fe7b5fcb6c60b53f9ee3126b6b7995709840d3", "patch": "@@ -336,9 +336,7 @@ fn module_resolution_explicit_path_mod_rs_with_win_separator() {\n     \"###);\n }\n \n-// FIXME: issue #1529. not support out-of-line modules inside inline.\n #[test]\n-#[ignore]\n fn module_resolution_decl_inside_inline_module_with_path_attribute() {\n     let map = def_map_with_crate_graph(\n         r###\"\n@@ -397,9 +395,7 @@ fn module_resolution_decl_inside_inline_module() {\n     \"###);\n }\n \n-// FIXME: issue #1529. not support out-of-line modules inside inline.\n #[test]\n-#[ignore]\n fn module_resolution_decl_inside_inline_module_2_with_path_attribute() {\n     let map = def_map_with_crate_graph(\n         r###\"\n@@ -429,9 +425,7 @@ fn module_resolution_decl_inside_inline_module_2_with_path_attribute() {\n     \"###);\n }\n \n-// FIXME: issue #1529. not support out-of-line modules inside inline.\n #[test]\n-#[ignore]\n fn module_resolution_decl_inside_inline_module_3() {\n     let map = def_map_with_crate_graph(\n         r###\"\n@@ -462,9 +456,7 @@ fn module_resolution_decl_inside_inline_module_3() {\n     \"###);\n }\n \n-// FIXME: issue #1529. not support out-of-line modules inside inline.\n #[test]\n-#[ignore]\n fn module_resolution_decl_inside_inline_module_empty_path() {\n     let map = def_map_with_crate_graph(\n         r###\"\n@@ -475,7 +467,7 @@ fn module_resolution_decl_inside_inline_module_empty_path() {\n             mod bar;\n         }\n \n-        //- /users.rs\n+        //- /foo/users.rs\n         pub struct Baz;\n         \"###,\n         crate_graph! {\n@@ -520,9 +512,7 @@ fn module_resolution_decl_empty_path() {\n     \"###);\n }\n \n-// FIXME: issue #1529. not support out-of-line modules inside inline.\n #[test]\n-#[ignore]\n fn module_resolution_decl_inside_inline_module_relative_path() {\n     let map = def_map_with_crate_graph(\n         r###\"\n@@ -660,9 +650,7 @@ fn module_resolution_decl_inside_inline_module_in_non_crate_root() {\n     \"###);\n }\n \n-// FIXME: issue #1529. not support out-of-line modules inside inline.\n #[test]\n-#[ignore]\n fn module_resolution_decl_inside_inline_module_in_non_crate_root_2() {\n     let map = def_map_with_crate_graph(\n         r###\""}]}