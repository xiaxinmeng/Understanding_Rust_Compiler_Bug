{"sha": "b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZmRhZDg0NDhjYmQzYTk0YzJjYjg3N2ExZDIwOWYzMTgyY2EwZDU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-02T13:53:26Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-02T15:42:51Z"}, "message": "Add a bunch of tests for type inference involving traits\n\nNone of them works correctly yet, of course.", "tree": {"sha": "5149aa6cb21bd9fe3640a6f8a749000c1f962463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5149aa6cb21bd9fe3640a6f8a749000c1f962463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "html_url": "https://github.com/rust-lang/rust/commit/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b09bcd8c96c37633964aa40df711dc013a6ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b09bcd8c96c37633964aa40df711dc013a6ca5", "html_url": "https://github.com/rust-lang/rust/commit/00b09bcd8c96c37633964aa40df711dc013a6ca5"}], "stats": {"total": 403, "additions": 403, "deletions": 0}, "files": [{"sha": "4dbde99f9799575d4328f9dbd84f929f4a80d861", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_associated_type_bound.snap", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_type_bound.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_type_bound.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_associated_type_bound.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,10 @@\n+---\n+created: \"2019-03-02T13:52:02.767222917Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[67; 100) '{     ...own; }': ()\n+[77; 78) 'y': [unknown]\n+[90; 97) 'unknown': [unknown]\n+"}, {"sha": "c56e6ba42b28a3d40794d187f10a8520e6eb9997", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_call_trait_method_on_generic_param_1.snap", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_call_trait_method_on_generic_param_1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_call_trait_method_on_generic_param_1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_call_trait_method_on_generic_param_1.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,11 @@\n+---\n+created: \"2019-03-02T13:49:53.509955706Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[59; 60) 't': T\n+[65; 84) '{     ...d(); }': ()\n+[71; 72) 't': T\n+[71; 81) 't.method()': [unknown]\n+"}, {"sha": "7791a57da9395c25706e1476871dc1e30df7968b", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_call_trait_method_on_generic_param_2.snap", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_call_trait_method_on_generic_param_2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_call_trait_method_on_generic_param_2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_call_trait_method_on_generic_param_2.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,11 @@\n+---\n+created: \"2019-03-02T13:49:53.477633667Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[66; 67) 't': T\n+[72; 91) '{     ...d(); }': ()\n+[78; 79) 't': T\n+[78; 88) 't.method()': [unknown]\n+"}, {"sha": "c8d8e9806ef67a156c72459e52a4d4d19034164d", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_from_bound_1.snap", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_from_bound_1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_from_bound_1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_from_bound_1.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,17 @@\n+---\n+created: \"2019-03-02T13:49:53.558635265Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[86; 87) 't': T\n+[92; 94) '{}': ()\n+[105; 144) '{     ...(s); }': ()\n+[115; 116) 's': S<[unknown]>\n+[119; 120) 'S': S<[unknown]>(T) -> S<T>\n+[119; 129) 'S(unknown)': S<[unknown]>\n+[121; 128) 'unknown': [unknown]\n+[135; 138) 'foo': fn foo<S<[unknown]>>(T) -> ()\n+[135; 141) 'foo(s)': ()\n+[139; 140) 's': S<[unknown]>\n+"}, {"sha": "37def29c322f1b6914fa529f6bb9872b71ed80b7", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_from_bound_2.snap", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_from_bound_2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_from_bound_2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_from_bound_2.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,18 @@\n+---\n+created: \"2019-03-02T13:49:53.572131028Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[87; 88) 't': T\n+[98; 100) '{}': ()\n+[111; 163) '{     ...(s); }': ()\n+[121; 122) 's': S<[unknown]>\n+[125; 126) 'S': S<[unknown]>(T) -> S<T>\n+[125; 135) 'S(unknown)': S<[unknown]>\n+[127; 134) 'unknown': [unknown]\n+[145; 146) 'x': u32\n+[154; 157) 'foo': fn foo<u32, S<[unknown]>>(T) -> U\n+[154; 160) 'foo(s)': u32\n+[158; 159) 's': S<[unknown]>\n+"}, {"sha": "6d5331799ce64432382948a31958a1b1ddb1fd2d", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_project_associated_type.snap", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_project_associated_type.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_project_associated_type.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_project_associated_type.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,12 @@\n+---\n+created: \"2019-03-02T13:49:53.680954394Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[108; 181) '{     ...ter; }': ()\n+[118; 119) 'x': i32\n+[145; 146) '1': i32\n+[156; 157) 'y': [unknown]\n+[169; 178) 'no_matter': [unknown]\n+"}, {"sha": "c09e1cf44655fbd535faffb012909a0b71c07f38", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_trait_assoc_method.snap", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_assoc_method.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_assoc_method.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_assoc_method.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,17 @@\n+---\n+created: \"2019-03-02T13:49:53.756157395Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[87; 193) '{     ...t(); }': ()\n+[97; 99) 's1': S\n+[105; 121) 'Defaul...efault': [unknown]\n+[105; 123) 'Defaul...ault()': S\n+[133; 135) 's2': [unknown]\n+[138; 148) 'S::default': [unknown]\n+[138; 150) 'S::default()': [unknown]\n+[160; 162) 's3': [unknown]\n+[165; 188) '<S as ...efault': [unknown]\n+[165; 190) '<S as ...ault()': [unknown]\n+"}, {"sha": "a71dbaf00e8977058ef9200e8079dfc499c194a8", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_trait_method_generic_1.snap", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_generic_1.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_generic_1.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_generic_1.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,11 @@\n+---\n+created: \"2019-03-02T13:49:53.771466423Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[33; 37) 'self': &[unknown]\n+[92; 111) '{     ...d(); }': ()\n+[98; 99) 'S': S\n+[98; 108) 'S.method()': [unknown]\n+"}, {"sha": "4b28cb32a53936bf346dd0c0ccf391a496f5eb7a", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_trait_method_generic_2.snap", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_generic_2.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_generic_2.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_generic_2.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,13 @@\n+---\n+created: \"2019-03-02T13:49:53.765202736Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[33; 37) 'self': &[unknown]\n+[102; 127) '{     ...d(); }': ()\n+[108; 109) 'S': S<u32>(T) -> S<T>\n+[108; 115) 'S(1u32)': S<u32>\n+[108; 124) 'S(1u32...thod()': [unknown]\n+[110; 114) '1u32': u32\n+"}, {"sha": "f2cce656da587c9eea7d976937fe38d6750f3b7f", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_trait_method_scoped.snap", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_scoped.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_scoped.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_scoped.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,15 @@\n+---\n+created: \"2019-03-02T15:41:07.568155273Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[63; 67) 'self': &[unknown]\n+[169; 173) 'self': &[unknown]\n+[300; 337) '{     ...     }': ()\n+[310; 311) 'S': S\n+[310; 320) 'S.method()': [unknown]\n+[416; 454) '{     ...     }': ()\n+[426; 427) 'S': S\n+[426; 436) 'S.method()': [unknown]\n+"}, {"sha": "22e83722d7f48d8eeb8498a0c4da1bdd6d51b87b", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_trait_method_simple.snap", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_simple.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_simple.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_trait_method_simple.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,14 @@\n+---\n+created: \"2019-03-02T15:41:07.562949721Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[31; 35) 'self': &[unknown]\n+[110; 114) 'self': &[unknown]\n+[170; 228) '{     ...i128 }': ()\n+[176; 178) 'S1': S1\n+[176; 187) 'S1.method()': [unknown]\n+[203; 205) 'S2': S2\n+[203; 214) 'S2.method()': [unknown]\n+"}, {"sha": "82c8bae588480e6a64beee102c90d3b59d9ede61", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_with_multiple_trait_impls.snap", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_with_multiple_trait_impls.snap", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_with_multiple_trait_impls.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_with_multiple_trait_impls.snap?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -0,0 +1,19 @@\n+---\n+created: \"2019-03-02T13:49:53.860659428Z\"\n+creator: insta@0.6.3\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[29; 33) 'self': [unknown]\n+[107; 198) '{     ...(S); }': ()\n+[117; 118) 'x': u32\n+[126; 127) 'S': S\n+[126; 134) 'S.into()': u32\n+[144; 145) 'y': u64\n+[153; 154) 'S': S\n+[153; 161) 'S.into()': u64\n+[171; 172) 'z': [unknown]\n+[175; 192) 'Into::...::into': [unknown]\n+[175; 195) 'Into::...nto(S)': [unknown]\n+[193; 194) 'S': S\n+"}, {"sha": "c1bd8d4237cdc18e1ebb3aad550acb89365a2b8e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 235, "deletions": 0, "changes": 235, "blob_url": "https://github.com/rust-lang/rust/blob/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=b7fdad8448cbd3a94c2cb877a1d209f3182ca0d5", "patch": "@@ -1043,6 +1043,241 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_trait_method_simple() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    check_inference(\n+        \"infer_trait_method_simple\",\n+        r#\"\n+trait Trait1 {\n+    fn method(&self) -> u32;\n+}\n+struct S1;\n+impl Trait1 for S1 {}\n+trait Trait2 {\n+    fn method(&self) -> i128;\n+}\n+struct S2;\n+impl Trait2 for S2 {}\n+fn test() {\n+    S1.method(); // -> u32\n+    S2.method(); // -> i128\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_method_scoped() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    check_inference(\n+        \"infer_trait_method_scoped\",\n+        r#\"\n+struct S;\n+mod foo {\n+    pub trait Trait1 {\n+        fn method(&self) -> u32;\n+    }\n+    impl Trait1 for super::S {}\n+}\n+mod bar {\n+    pub trait Trait2 {\n+        fn method(&self) -> i128;\n+    }\n+    impl Trait2 for super::S {}\n+}\n+\n+mod foo_test {\n+    use super::S;\n+    use super::foo::Trait1;\n+    fn test() {\n+        S.method(); // -> u32\n+    }\n+}\n+\n+mod bar_test {\n+    use super::S;\n+    use super::bar::Trait2;\n+    fn test() {\n+        S.method(); // -> i128\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_method_generic_1() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    check_inference(\n+        \"infer_trait_method_generic_1\",\n+        r#\"\n+trait Trait<T> {\n+    fn method(&self) -> T;\n+}\n+struct S;\n+impl Trait<u32> for S {}\n+fn test() {\n+    S.method();\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_method_generic_2() {\n+    // the trait implementation is intentionally incomplete -- it shouldn't matter\n+    check_inference(\n+        \"infer_trait_method_generic_2\",\n+        r#\"\n+trait Trait<T> {\n+    fn method(&self) -> T;\n+}\n+struct S<T>(T);\n+impl<U> Trait<U> for S<U> {}\n+fn test() {\n+    S(1u32).method();\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_trait_assoc_method() {\n+    check_inference(\n+        \"infer_trait_assoc_method\",\n+        r#\"\n+trait Default {\n+    fn default() -> Self;\n+}\n+struct S;\n+impl Default for S {}\n+fn test() {\n+    let s1: S = Default::default();\n+    let s2 = S::default();\n+    let s3 = <S as Default>::default();\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_from_bound_1() {\n+    check_inference(\n+        \"infer_from_bound_1\",\n+        r#\"\n+trait Trait<T> {}\n+struct S<T>(T);\n+impl<U> Trait<U> for S<U> {}\n+fn foo<T: Trait<u32>>(t: T) {}\n+fn test() {\n+    let s = S(unknown);\n+    foo(s);\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_from_bound_2() {\n+    check_inference(\n+        \"infer_from_bound_2\",\n+        r#\"\n+trait Trait<T> {}\n+struct S<T>(T);\n+impl<U> Trait<U> for S<U> {}\n+fn foo<U, T: Trait<U>>(t: T) -> U {}\n+fn test() {\n+    let s = S(unknown);\n+    let x: u32 = foo(s);\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_call_trait_method_on_generic_param_1() {\n+    check_inference(\n+        \"infer_call_trait_method_on_generic_param_1\",\n+        r#\"\n+trait Trait {\n+    fn method() -> u32;\n+}\n+fn test<T: Trait>(t: T) {\n+    t.method();\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_call_trait_method_on_generic_param_2() {\n+    check_inference(\n+        \"infer_call_trait_method_on_generic_param_2\",\n+        r#\"\n+trait Trait<T> {\n+    fn method() -> T;\n+}\n+fn test<U, T: Trait<U>>(t: T) {\n+    t.method();\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_with_multiple_trait_impls() {\n+    check_inference(\n+        \"infer_with_multiple_trait_impls\",\n+        r#\"\n+trait Into<T> {\n+    fn into(self) -> T;\n+}\n+struct S;\n+impl Into<u32> for S;\n+impl Into<u64> for S;\n+fn test() {\n+    let x: u32 = S.into();\n+    let y: u64 = S.into();\n+    let z = Into::<u64>::into(S);\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_project_associated_type() {\n+    check_inference(\n+        \"infer_project_associated_type\",\n+        r#\"\n+trait Iterable {\n+   type Item;\n+}\n+struct S;\n+impl Iterable for S { type Item = u32; }\n+fn test<T: Iterable>() {\n+    let x: <S as Iterable>::Item = 1;\n+    let y: T::Item = no_matter;\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_associated_type_bound() {\n+    check_inference(\n+        \"infer_associated_type_bound\",\n+        r#\"\n+trait Iterable {\n+   type Item;\n+}\n+fn test<T: Iterable<Item=u32>>() {\n+    let y: T::Item = unknown;\n+}\n+\"#,\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let func = source_binder::function_from_position(db, pos).unwrap();\n     let body_source_map = func.body_source_map(db);"}]}