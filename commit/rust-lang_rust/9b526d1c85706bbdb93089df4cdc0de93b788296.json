{"sha": "9b526d1c85706bbdb93089df4cdc0de93b788296", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTI2ZDFjODU3MDZiYmRiOTMwODlkZjRjZGMwZGU5M2I3ODgyOTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-20T14:40:57Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-20T14:40:57Z"}, "message": "Reduce the usage of global paths", "tree": {"sha": "e1bfcbbee72e5f4c578b32dd593bcbbbce017887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1bfcbbee72e5f4c578b32dd593bcbbbce017887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b526d1c85706bbdb93089df4cdc0de93b788296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b526d1c85706bbdb93089df4cdc0de93b788296", "html_url": "https://github.com/rust-lang/rust/commit/9b526d1c85706bbdb93089df4cdc0de93b788296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b526d1c85706bbdb93089df4cdc0de93b788296/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02d9e63fde6d692b38b3843b16132c0b79a7ef6", "html_url": "https://github.com/rust-lang/rust/commit/f02d9e63fde6d692b38b3843b16132c0b79a7ef6"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "49de56fa5b9b95e670166f9d200def5a7fd0cb03", "filename": "src/eval_context.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b526d1c85706bbdb93089df4cdc0de93b788296/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b526d1c85706bbdb93089df4cdc0de93b788296/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=9b526d1c85706bbdb93089df4cdc0de93b788296", "patch": "@@ -18,6 +18,7 @@ use syntax::abi::Abi;\n use error::{EvalError, EvalResult};\n use lvalue::{Global, GlobalId, Lvalue, LvalueExtra};\n use memory::{Memory, MemoryPointer, TlsKey, HasMemory};\n+use memory::Kind as MemoryKind;\n use operator;\n use value::{PrimVal, PrimValKind, Value, Pointer};\n \n@@ -153,7 +154,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     ) -> EvalResult<'tcx, MemoryPointer> {\n         let size = self.type_size_with_substs(ty, substs)?.expect(\"cannot alloc memory for unsized type\");\n         let align = self.type_align_with_substs(ty, substs)?;\n-        self.memory.allocate(size, align, ::memory::Kind::Stack)\n+        self.memory.allocate(size, align, MemoryKind::Stack)\n     }\n \n     pub fn memory(&self) -> &Memory<'a, 'tcx> {\n@@ -417,8 +418,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // for a constant like `const FOO: &i32 = &1;` the local containing\n                 // the `1` is referred to by the global. We transitively marked everything\n                 // the global refers to as static itself, so we don't free it here\n-                ::memory::Kind::Static => {}\n-                ::memory::Kind::Stack => self.memory.deallocate(ptr, None, ::memory::Kind::Stack)?,\n+                MemoryKind::Static => {}\n+                MemoryKind::Stack => self.memory.deallocate(ptr, None, MemoryKind::Stack)?,\n                 other => bug!(\"local contained non-stack memory: {:?}\", other),\n             }\n         };\n@@ -696,7 +697,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     self.write_primval(dest, PrimVal::Bytes(align.into()), dest_ty)?;\n                 } else {\n                     let align = self.type_align(ty)?;\n-                    let ptr = self.memory.allocate(size, align, ::memory::Kind::Rust)?;\n+                    let ptr = self.memory.allocate(size, align, MemoryKind::Rust)?;\n                     self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n                 }\n             }\n@@ -1689,7 +1690,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             }\n \n             // Return value\n-            let ret_ptr = ecx.memory.allocate(ecx.tcx.data_layout.pointer_size.bytes(), ecx.tcx.data_layout.pointer_align.abi(), ::memory::Kind::Stack)?;\n+            let ret_ptr = ecx.memory.allocate(ecx.tcx.data_layout.pointer_size.bytes(), ecx.tcx.data_layout.pointer_align.abi(), MemoryKind::Stack)?;\n             cleanup_ptr = Some(ret_ptr);\n \n             // Push our stack frame\n@@ -1731,7 +1732,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n \n         while ecx.step()? {}\n         if let Some(cleanup_ptr) = cleanup_ptr {\n-            ecx.memory.deallocate(cleanup_ptr, None, ::memory::Kind::Stack)?;\n+            ecx.memory.deallocate(cleanup_ptr, None, MemoryKind::Stack)?;\n         }\n         return Ok(());\n     }"}, {"sha": "54a988c566786d719c32fe043b441e9381965448", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b526d1c85706bbdb93089df4cdc0de93b788296/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b526d1c85706bbdb93089df4cdc0de93b788296/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=9b526d1c85706bbdb93089df4cdc0de93b788296", "patch": "@@ -7,11 +7,12 @@ use syntax::attr;\n use syntax::abi::Abi;\n \n use error::{EvalError, EvalResult};\n-use eval_context::{EvalContext, IntegerExt, StackPopCleanup, is_inhabited};\n+use eval_context::{EvalContext, IntegerExt, StackPopCleanup, is_inhabited, self};\n use lvalue::Lvalue;\n use memory::{MemoryPointer, TlsKey, Kind};\n use value::{PrimVal, Value};\n use rustc_data_structures::indexed_vec::Idx;\n+use const_eval;\n \n use std::mem;\n \n@@ -86,7 +87,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         }\n                         (instance, sig)\n                     },\n-                    ty::TyFnDef(def_id, substs) => (::eval_context::resolve(self.tcx, def_id, substs), func_ty.fn_sig(self.tcx)),\n+                    ty::TyFnDef(def_id, substs) => (eval_context::resolve(self.tcx, def_id, substs), func_ty.fn_sig(self.tcx)),\n                     _ => {\n                         let msg = format!(\"can't handle callee of type {:?}\", func_ty);\n                         return Err(EvalError::Unimplemented(msg));\n@@ -104,9 +105,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let lval = self.eval_lvalue(location)?;\n                 let ty = self.lvalue_ty(location);\n                 self.goto_block(target);\n-                let ty = ::eval_context::apply_param_substs(self.tcx, self.substs(), &ty);\n+                let ty = eval_context::apply_param_substs(self.tcx, self.substs(), &ty);\n \n-                let instance = ::eval_context::resolve_drop_in_place(self.tcx, ty);\n+                let instance = eval_context::resolve_drop_in_place(self.tcx, ty);\n                 self.drop_lvalue(lval, instance, ty, terminator.source_info.span)?;\n             }\n \n@@ -869,7 +870,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         // compute global if not cached\n                         let val = match self.globals.get(&cid).map(|glob| glob.value) {\n                             Some(value) => self.value_to_primval(value, usize)?.to_u64()?,\n-                            None => ::const_eval::eval_body_as_primval(self.tcx, instance)?.0.to_u64()?,\n+                            None => const_eval::eval_body_as_primval(self.tcx, instance)?.0.to_u64()?,\n                         };\n                         if val == name {\n                             result = Some(path_value);"}, {"sha": "615ea214595cbf8232ea65f82d3b3c6958df898b", "filename": "src/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b526d1c85706bbdb93089df4cdc0de93b788296/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b526d1c85706bbdb93089df4cdc0de93b788296/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=9b526d1c85706bbdb93089df4cdc0de93b788296", "patch": "@@ -1,6 +1,6 @@\n use rustc::traits::{self, Reveal};\n \n-use eval_context::EvalContext;\n+use eval_context::{EvalContext, self};\n use memory::{MemoryPointer, Kind};\n use value::{Value, PrimVal};\n \n@@ -53,7 +53,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let methods = ::rustc::traits::get_vtable_methods(self.tcx, trait_ref);\n         let vtable = self.memory.allocate(ptr_size * (3 + methods.count() as u64), ptr_size, Kind::UninitializedStatic)?;\n \n-        let drop = ::eval_context::resolve_drop_in_place(self.tcx, ty);\n+        let drop = eval_context::resolve_drop_in_place(self.tcx, ty);\n         let drop = self.memory.create_fn_alloc(drop);\n         self.memory.write_ptr(vtable, drop)?;\n \n@@ -62,7 +62,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         for (i, method) in ::rustc::traits::get_vtable_methods(self.tcx, trait_ref).enumerate() {\n             if let Some((def_id, substs)) = method {\n-                let instance = ::eval_context::resolve(self.tcx, def_id, substs);\n+                let instance = eval_context::resolve(self.tcx, def_id, substs);\n                 let fn_ptr = self.memory.create_fn_alloc(instance);\n                 self.memory.write_ptr(vtable.offset(ptr_size * (3 + i as u64), self.memory.layout)?, fn_ptr)?;\n             }"}]}