{"sha": "ab362031ed2a4897b6010f2004472d1860ba3872", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMzYyMDMxZWQyYTQ4OTdiNjAxMGYyMDA0NDcyZDE4NjBiYTM4NzI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-24T21:59:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-24T21:59:15Z"}, "message": "Merge pull request #1959 from DarkEld3r/1884-borrowed-box-any\n\nFix borrowed_box lint for Box<Any>", "tree": {"sha": "afdf97a057be52adcc8f1f454ec207fa0b1af426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afdf97a057be52adcc8f1f454ec207fa0b1af426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab362031ed2a4897b6010f2004472d1860ba3872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab362031ed2a4897b6010f2004472d1860ba3872", "html_url": "https://github.com/rust-lang/rust/commit/ab362031ed2a4897b6010f2004472d1860ba3872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab362031ed2a4897b6010f2004472d1860ba3872/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb23298efff779773a98dc0927f42197346f337f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb23298efff779773a98dc0927f42197346f337f", "html_url": "https://github.com/rust-lang/rust/commit/cb23298efff779773a98dc0927f42197346f337f"}, {"sha": "81538f6ff310e0d8e7ec62542b5eb29f08043081", "url": "https://api.github.com/repos/rust-lang/rust/commits/81538f6ff310e0d8e7ec62542b5eb29f08043081", "html_url": "https://github.com/rust-lang/rust/commit/81538f6ff310e0d8e7ec62542b5eb29f08043081"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "e48f6a9042b998e03a0798960fd10fc469b6ae93", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab362031ed2a4897b6010f2004472d1860ba3872/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab362031ed2a4897b6010f2004472d1860ba3872/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ab362031ed2a4897b6010f2004472d1860ba3872", "patch": "@@ -10,7 +10,7 @@ use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::attr::IntType;\n use syntax::codemap::Span;\n use utils::{comparisons, higher, in_external_macro, in_macro, match_def_path, snippet, span_help_and_lint, span_lint,\n-            span_lint_and_sugg, opt_def_id, last_path_segment, type_size};\n+            span_lint_and_sugg, opt_def_id, last_path_segment, type_size, match_path_old};\n use utils::paths;\n \n /// Handles all the linting of funky types\n@@ -212,6 +212,11 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                         let PathParameters::AngleBracketedParameters(ref ab_data) = bx.parameters,\n                         let [ref inner] = *ab_data.types\n                     ], {\n+                        if is_any_trait(inner) {\n+                            // Ignore `Box<Any>` types, see #1884 for details.\n+                            return;\n+                        }\n+\n                         let ltopt = if lt.is_elided() {\n                             \"\".to_owned()\n                         } else {\n@@ -249,6 +254,21 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n     }\n }\n \n+// Returns true if given type is `Any` trait.\n+fn is_any_trait(t: &hir::Ty) -> bool {\n+    if_let_chain! {[\n+        let TyTraitObject(ref traits, _) = t.node,\n+        traits.len() >= 1,\n+        // Only Send/Sync can be used as additional traits, so it is enough to\n+        // check only the first trait.\n+        match_path_old(&traits[0].trait_ref.path, &paths::ANY_TRAIT)\n+    ], {\n+        return true;\n+    }}\n+\n+    false\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct LetPass;\n "}, {"sha": "1a49dad1ae4f4f599903c6c1300ff92541589231", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab362031ed2a4897b6010f2004472d1860ba3872/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab362031ed2a4897b6010f2004472d1860ba3872/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=ab362031ed2a4897b6010f2004472d1860ba3872", "patch": "@@ -1,6 +1,7 @@\n //! This module contains paths to types and functions Clippy needs to know\n //! about.\n \n+pub const ANY_TRAIT: [&'static str; 3] = [\"std\", \"any\", \"Any\"];\n pub const ASMUT_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BEGIN_PANIC: [&'static str; 3] = [\"std\", \"panicking\", \"begin_panic\"];"}, {"sha": "b5543da6e35c531ee0db9606b31ce31db1421e4b", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ab362031ed2a4897b6010f2004472d1860ba3872/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab362031ed2a4897b6010f2004472d1860ba3872/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=ab362031ed2a4897b6010f2004472d1860ba3872", "patch": "@@ -28,7 +28,57 @@ impl<'a> Test4 for Test3<'a> {\n     }\n }\n \n+use std::any::Any;\n+\n+pub fn test5(foo: &mut Box<Any>) {\n+    println!(\"{:?}\", foo)\n+}\n+\n+pub fn test6() {\n+    let foo: &Box<Any>;\n+}\n+\n+struct Test7<'a> {\n+    foo: &'a Box<Any>\n+}\n+\n+trait Test8 {\n+    fn test8(a: &Box<Any>);\n+}\n+\n+impl<'a> Test8 for Test7<'a> {\n+    fn test8(a: &Box<Any>) {\n+        unimplemented!();\n+    }\n+}\n+\n+pub fn test9(foo: &mut Box<Any + Send + Sync>) {\n+    let _ = foo;\n+}\n+\n+pub fn test10() {\n+    let foo: &Box<Any + Send + 'static>;\n+}\n+\n+struct Test11<'a> {\n+    foo: &'a Box<Any + Send>\n+}\n+\n+trait Test12 {\n+    fn test4(a: &Box<Any + 'static>);\n+}\n+\n+impl<'a> Test12 for Test11<'a> {\n+    fn test4(a: &Box<Any + 'static>) {\n+        unimplemented!();\n+    }\n+}\n+\n fn main(){\n     test1(&mut Box::new(false));\n     test2();\n+    test5(&mut (Box::new(false) as Box<Any>));\n+    test6();\n+    test9(&mut (Box::new(false) as Box<Any + Send + Sync>));\n+    test10();\n }"}]}