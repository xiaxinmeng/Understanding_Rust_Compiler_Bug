{"sha": "ea265aad64366340fa7986f7f93488300631168c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjY1YWFkNjQzNjYzNDBmYTc5ODZmN2Y5MzQ4ODMwMDYzMTE2OGM=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-05-22T16:05:48Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-05-22T17:52:06Z"}, "message": "Provide missing Chalk debug methods", "tree": {"sha": "f9875be8e240fd2d339e00b77035713f85660a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9875be8e240fd2d339e00b77035713f85660a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea265aad64366340fa7986f7f93488300631168c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea265aad64366340fa7986f7f93488300631168c", "html_url": "https://github.com/rust-lang/rust/commit/ea265aad64366340fa7986f7f93488300631168c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea265aad64366340fa7986f7f93488300631168c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27fe68ad5c908d439af6cfbe7748c56eb6f107fc", "html_url": "https://github.com/rust-lang/rust/commit/27fe68ad5c908d439af6cfbe7748c56eb6f107fc"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "0603728197e44b2d4b80e1860b54a05c97537ca4", "filename": "crates/ra_hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ea265aad64366340fa7986f7f93488300631168c/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea265aad64366340fa7986f7f93488300631168c/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=ea265aad64366340fa7986f7f93488300631168c", "patch": "@@ -138,6 +138,59 @@ impl chalk_ir::interner::Interner for Interner {\n         })\n     }\n \n+    fn debug_fn_def_id(\n+        fn_def_id: chalk_ir::FnDefId<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_fn_def_id(fn_def_id, fmt)))\n+    }\n+    fn debug_const(\n+        constant: &chalk_ir::Const<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_const(constant, fmt)))\n+    }\n+    fn debug_variable_kinds(\n+        variable_kinds: &chalk_ir::VariableKinds<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_variable_kinds(variable_kinds, fmt)))\n+    }\n+    fn debug_variable_kinds_with_angles(\n+        variable_kinds: &chalk_ir::VariableKinds<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| {\n+            Some(prog?.debug_variable_kinds_with_angles(variable_kinds, fmt))\n+        })\n+    }\n+    fn debug_canonical_var_kinds(\n+        canonical_var_kinds: &chalk_ir::CanonicalVarKinds<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| {\n+            Some(prog?.debug_canonical_var_kinds(canonical_var_kinds, fmt))\n+        })\n+    }\n+    fn debug_program_clause(\n+        clause: &chalk_ir::ProgramClause<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_program_clause(clause, fmt)))\n+    }\n+    fn debug_program_clauses(\n+        clauses: &chalk_ir::ProgramClauses<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_program_clauses(clauses, fmt)))\n+    }\n+    fn debug_quantified_where_clauses(\n+        clauses: &chalk_ir::QuantifiedWhereClauses<Self>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        tls::with_current_program(|prog| Some(prog?.debug_quantified_where_clauses(clauses, fmt)))\n+    }\n+\n     fn intern_ty(&self, ty: chalk_ir::TyData<Self>) -> Box<chalk_ir::TyData<Self>> {\n         Box::new(ty)\n     }"}, {"sha": "ebf402a0793acb9c6a14b71076f97ac560bfbb19", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ea265aad64366340fa7986f7f93488300631168c/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea265aad64366340fa7986f7f93488300631168c/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=ea265aad64366340fa7986f7f93488300631168c", "patch": "@@ -244,6 +244,65 @@ impl DebugContext<'_> {\n     ) -> Result<(), fmt::Error> {\n         write!(fmt, \"{:?}\", separator_trait_ref.debug(&Interner))\n     }\n+\n+    pub fn debug_fn_def_id(\n+        &self,\n+        _fn_def_id: chalk_ir::FnDefId<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Result<(), fmt::Error> {\n+        write!(fmt, \"fn\")\n+    }\n+\n+    pub fn debug_const(\n+        &self,\n+        _constant: &chalk_ir::Const<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> fmt::Result {\n+        write!(fmt, \"const\")\n+    }\n+\n+    pub fn debug_variable_kinds(\n+        &self,\n+        variable_kinds: &chalk_ir::VariableKinds<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> fmt::Result {\n+        write!(fmt, \"{:?}\", variable_kinds.as_slice(&Interner))\n+    }\n+    pub fn debug_variable_kinds_with_angles(\n+        &self,\n+        variable_kinds: &chalk_ir::VariableKinds<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> fmt::Result {\n+        write!(fmt, \"{:?}\", variable_kinds.inner_debug(&Interner))\n+    }\n+    pub fn debug_canonical_var_kinds(\n+        &self,\n+        canonical_var_kinds: &chalk_ir::CanonicalVarKinds<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> fmt::Result {\n+        write!(fmt, \"{:?}\", canonical_var_kinds.as_slice(&Interner))\n+    }\n+    pub fn debug_program_clause(\n+        &self,\n+        clause: &chalk_ir::ProgramClause<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> fmt::Result {\n+        write!(fmt, \"{:?}\", clause.data(&Interner))\n+    }\n+    pub fn debug_program_clauses(\n+        &self,\n+        clauses: &chalk_ir::ProgramClauses<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> fmt::Result {\n+        write!(fmt, \"{:?}\", clauses.as_slice(&Interner))\n+    }\n+    pub fn debug_quantified_where_clauses(\n+        &self,\n+        clauses: &chalk_ir::QuantifiedWhereClauses<Interner>,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> fmt::Result {\n+        write!(fmt, \"{:?}\", clauses.as_slice(&Interner))\n+    }\n }\n \n mod unsafe_tls {"}]}