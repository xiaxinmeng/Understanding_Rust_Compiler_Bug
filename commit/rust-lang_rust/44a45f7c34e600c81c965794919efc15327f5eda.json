{"sha": "44a45f7c34e600c81c965794919efc15327f5eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YTQ1ZjdjMzRlNjAwYzgxYzk2NTc5NDkxOWVmYzE1MzI3ZjVlZGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-30T21:09:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-31T20:39:40Z"}, "message": "run test suite also against libstd with full MIR", "tree": {"sha": "3114394f1fed3ab7f80488c10e9d2a2c1e713c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3114394f1fed3ab7f80488c10e9d2a2c1e713c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a45f7c34e600c81c965794919efc15327f5eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a45f7c34e600c81c965794919efc15327f5eda", "html_url": "https://github.com/rust-lang/rust/commit/44a45f7c34e600c81c965794919efc15327f5eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a45f7c34e600c81c965794919efc15327f5eda/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6619ed89baf3153bb8137e77552bcc7bdf31e3fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6619ed89baf3153bb8137e77552bcc7bdf31e3fa", "html_url": "https://github.com/rust-lang/rust/commit/6619ed89baf3153bb8137e77552bcc7bdf31e3fa"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "7cc14234efd580eab7183f1ab46ee0ae95787375", "filename": ".travis.yml", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44a45f7c34e600c81c965794919efc15327f5eda/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/44a45f7c34e600c81c965794919efc15327f5eda/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=44a45f7c34e600c81c965794919efc15327f5eda", "patch": "@@ -6,16 +6,29 @@ before_script:\n - rustup target add i686-unknown-linux-gnu\n - rustup target add i686-pc-windows-gnu\n - rustup target add i686-pc-windows-msvc\n+- rustup component add rust-src\n+- chmod +x -R ~/.rustup/toolchains/*/lib/rustlib/src/rust/src/jemalloc/include/jemalloc/\n+- cargo install xargo\n+- export RUST_SYSROOT=$HOME/rust\n script:\n - |\n-  export RUST_SYSROOT=$HOME/rust &&\n+  # Test plain miri\n   cargo build &&\n   cargo test &&\n-  cargo install &&\n+  cargo install\n+- |\n+  # Test cargo miri\n   cd cargo-miri-test &&\n   cargo miri &&\n   cargo miri test &&\n   cd ..\n+- |\n+  # get ourselves a MIR-ful libstd\n+  cd xargo &&\n+  RUSTFLAGS='-Zalways-encode-mir' xargo build &&\n+  cd .. &&\n+  # and run the tests with it\n+  MIRI_SYSROOT=~/.xargo/HOST cargo test\n notifications:\n   email:\n     on_success: never"}, {"sha": "d5873c986815dfd771ae727c079e2a33d2c73c4b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a45f7c34e600c81c965794919efc15327f5eda/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/44a45f7c34e600c81c965794919efc15327f5eda/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=44a45f7c34e600c81c965794919efc15327f5eda", "patch": "@@ -71,7 +71,7 @@ RUSTFLAGS='-Zalways-encode-mir' xargo build\n Now you can run miri against the libstd compiled by xargo:\n \n ```sh\n-cargo run --bin miri -- --sysroot ~/.xargo/HOST tests/run-pass/vecs.rs\n+MIRI_SYSROOT=~/.xargo/HOST cargo run --bin miri tests/run-pass/vecs.rs\n ```\n \n Notice that you will have to re-run the last step of the preparations above when"}, {"sha": "8d27f9057f5404d66f01401e2d58a8c124124cf3", "filename": "src/bin/miri.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44a45f7c34e600c81c965794919efc15327f5eda/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a45f7c34e600c81c965794919efc15327f5eda/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=44a45f7c34e600c81c965794919efc15327f5eda", "patch": "@@ -175,6 +175,10 @@ fn init_logger() {\n }\n \n fn find_sysroot() -> String {\n+    if let Ok(sysroot) = std::env::var(\"MIRI_SYSROOT\") {\n+        return sysroot;\n+    }\n+\n     // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));"}, {"sha": "c6aaf80e6ac00bc34febec7d704d105444bf8d97", "filename": "tests/compile-fail/stack_limit.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44a45f7c34e600c81c965794919efc15327f5eda/tests%2Fcompile-fail%2Fstack_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a45f7c34e600c81c965794919efc15327f5eda/tests%2Fcompile-fail%2Fstack_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstack_limit.rs?ref=44a45f7c34e600c81c965794919efc15327f5eda", "patch": "@@ -1,24 +1,18 @@\n #![feature(custom_attribute, attr_literals)]\n #![miri(stack_limit=16)]\n \n+//error-pattern: reached the configured maximum number of stack frames\n+\n fn bar() {\n     foo();\n }\n \n fn foo() {\n-    cake(); //~ ERROR reached the configured maximum number of stack frames\n+    cake();\n }\n \n fn cake() {\n-    flubber(3);\n-}\n-\n-fn flubber(i: u32) {\n-    if i > 0 {\n-        flubber(i-1);\n-    } else {\n-        bar();\n-    }\n+    bar();\n }\n \n fn main() {"}, {"sha": "e6535ef0212b544418834d738dc092d79f6a1047", "filename": "tests/compiletest.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44a45f7c34e600c81c965794919efc15327f5eda/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a45f7c34e600c81c965794919efc15327f5eda/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=44a45f7c34e600c81c965794919efc15327f5eda", "patch": "@@ -65,14 +65,16 @@ fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n \n #[test]\n fn compile_test() {\n-    let sysroot = std::process::Command::new(\"rustc\")\n-        .arg(\"--print\")\n-        .arg(\"sysroot\")\n-        .output()\n-        .expect(\"rustc not found\")\n-        .stdout;\n-    let sysroot = std::str::from_utf8(&sysroot).expect(\"sysroot is not utf8\").trim();\n-    let sysroot = &Path::new(&sysroot);\n+    let sysroot = std::env::var(\"MIRI_SYSROOT\").unwrap_or_else(|_| {\n+        let sysroot = std::process::Command::new(\"rustc\")\n+            .arg(\"--print\")\n+            .arg(\"sysroot\")\n+            .output()\n+            .expect(\"rustc not found\")\n+            .stdout;\n+        String::from_utf8(sysroot).expect(\"sysroot is not utf8\")\n+    });\n+    let sysroot = &Path::new(sysroot.trim());\n     let host = std::process::Command::new(\"rustc\")\n         .arg(\"-vV\")\n         .output()"}]}