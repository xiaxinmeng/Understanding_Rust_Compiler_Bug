{"sha": "c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YjczOWJhZDBjMGE0NThkM2FlNmJiMmJjNDUxNDQ3N2YzMjVlMzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-03T11:05:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-03T11:05:52Z"}, "message": "Merge #4660\n\n4660: Enable hover and autocomplete docs on macro generated items r=aloucks a=aloucks\n\nEnable hover and autocomplete docs on macro generated items. This de-sugars doc comments into `doc` attributes in some cases, but not all. Comments and `doc` attributes are then merged together. \r\n\r\nThis PR is essentially a partial implementation of what's being suggested #3182, but it's not all the way there yet. ~I still need to add unit tests~, but I wanted to first get feedback on whether or not this was an acceptable path forward.\r\n\r\nFixes #4564\r\nFixes #3984\r\nFixes #3180\r\nRelated #3182\r\n\r\n![macro_item_docs](https://user-images.githubusercontent.com/221559/83336760-15012200-a284-11ea-8d0d-b6a615850044.gif)\r\n\r\n\n\nCo-authored-by: Aaron Loucks <aloucks@cofront.net>", "tree": {"sha": "6083eb9eb766a61b6d71154f1e345c461ebdbc7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6083eb9eb766a61b6d71154f1e345c461ebdbc7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe14QQCRBK7hj4Ov3rIwAAdHIIAGJEoLfGjgDyZQzuu23u46Yi\n7UL4ugSDtFZeeD6zU36au4uIsRRtWcc8eM1YvhDwMv7G//sEMFRIJMYryEWoXDaL\naf45NAxzs1LWdi6BATUaKwSEuqxHg7BzL+irdwbLAgaSlzp7A+GRdIZW+xv5Im8Y\n65Z5hmRcUjYb+O+PwA7VXheL+cSE01ChtZJ2XgCSsfQuvRDFJcEd8xL0DNbHVem+\nhTamW1XG2eqhhG75KVkHVyK+woJ/Id0/VXD6oxMnBujcNl0bxDJVmjj6Z4bQEUMS\nPCp6GR/sSkG3gJiDh7wjRS+WUMsVj+KSD7PAnURE59Ke5jr0axG8iO8/wQNOSfI=\n=VXHZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6083eb9eb766a61b6d71154f1e345c461ebdbc7c\nparent a36c1d3fbcfe0837b73d5a849111683bef447fd8\nparent ed866892640214d315d3e9503ccaed96ca87ccc0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591182352 +0000\ncommitter GitHub <noreply@github.com> 1591182352 +0000\n\nMerge #4660\n\n4660: Enable hover and autocomplete docs on macro generated items r=aloucks a=aloucks\n\nEnable hover and autocomplete docs on macro generated items. This de-sugars doc comments into `doc` attributes in some cases, but not all. Comments and `doc` attributes are then merged together. \r\n\r\nThis PR is essentially a partial implementation of what's being suggested #3182, but it's not all the way there yet. ~I still need to add unit tests~, but I wanted to first get feedback on whether or not this was an acceptable path forward.\r\n\r\nFixes #4564\r\nFixes #3984\r\nFixes #3180\r\nRelated #3182\r\n\r\n![macro_item_docs](https://user-images.githubusercontent.com/221559/83336760-15012200-a284-11ea-8d0d-b6a615850044.gif)\r\n\r\n\n\nCo-authored-by: Aaron Loucks <aloucks@cofront.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "html_url": "https://github.com/rust-lang/rust/commit/c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36c1d3fbcfe0837b73d5a849111683bef447fd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36c1d3fbcfe0837b73d5a849111683bef447fd8", "html_url": "https://github.com/rust-lang/rust/commit/a36c1d3fbcfe0837b73d5a849111683bef447fd8"}, {"sha": "ed866892640214d315d3e9503ccaed96ca87ccc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed866892640214d315d3e9503ccaed96ca87ccc0", "html_url": "https://github.com/rust-lang/rust/commit/ed866892640214d315d3e9503ccaed96ca87ccc0"}], "stats": {"total": 279, "additions": 260, "deletions": 19}, "files": [{"sha": "2eeba057299185a1b1ad308052308740de4645e9", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "patch": "@@ -87,12 +87,18 @@ impl Attrs {\n     }\n \n     pub(crate) fn new(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Attrs {\n+        let docs = ast::CommentIter::from_syntax_node(owner.syntax()).doc_comment_text().map(\n+            |docs_text| Attr {\n+                input: Some(AttrInput::Literal(SmolStr::new(docs_text))),\n+                path: ModPath::from(hir_expand::name!(doc)),\n+            },\n+        );\n         let mut attrs = owner.attrs().peekable();\n         let entries = if attrs.peek().is_none() {\n             // Avoid heap allocation\n             None\n         } else {\n-            Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).collect())\n+            Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).chain(docs).collect())\n         };\n         Attrs { entries }\n     }"}, {"sha": "2630b3d895e60db1c6a07ffaee6cb233b37d490e", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "patch": "@@ -29,6 +29,13 @@ impl Documentation {\n         Documentation(s.into())\n     }\n \n+    pub fn from_ast<N>(node: &N) -> Option<Documentation>\n+    where\n+        N: ast::DocCommentsOwner + ast::AttrsOwner,\n+    {\n+        docs_from_ast(node)\n+    }\n+\n     pub fn as_str(&self) -> &str {\n         &*self.0\n     }\n@@ -70,6 +77,45 @@ impl Documentation {\n     }\n }\n \n-pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n-    node.doc_comment_text().map(|it| Documentation::new(&it))\n+pub(crate) fn docs_from_ast<N>(node: &N) -> Option<Documentation>\n+where\n+    N: ast::DocCommentsOwner + ast::AttrsOwner,\n+{\n+    let doc_comment_text = node.doc_comment_text();\n+    let doc_attr_text = expand_doc_attrs(node);\n+    let docs = merge_doc_comments_and_attrs(doc_comment_text, doc_attr_text);\n+    docs.map(|it| Documentation::new(&it))\n+}\n+\n+fn merge_doc_comments_and_attrs(\n+    doc_comment_text: Option<String>,\n+    doc_attr_text: Option<String>,\n+) -> Option<String> {\n+    match (doc_comment_text, doc_attr_text) {\n+        (Some(mut comment_text), Some(attr_text)) => {\n+            comment_text.push_str(\"\\n\\n\");\n+            comment_text.push_str(&attr_text);\n+            Some(comment_text)\n+        }\n+        (Some(comment_text), None) => Some(comment_text),\n+        (None, Some(attr_text)) => Some(attr_text),\n+        (None, None) => None,\n+    }\n+}\n+\n+fn expand_doc_attrs(owner: &dyn ast::AttrsOwner) -> Option<String> {\n+    let mut docs = String::new();\n+    for attr in owner.attrs() {\n+        if let Some((\"doc\", value)) =\n+            attr.as_simple_key_value().as_ref().map(|(k, v)| (k.as_str(), v.as_str()))\n+        {\n+            docs.push_str(value);\n+            docs.push_str(\"\\n\\n\");\n+        }\n+    }\n+    if docs.is_empty() {\n+        None\n+    } else {\n+        Some(docs.trim_end_matches(\"\\n\\n\").to_owned())\n+    }\n }"}, {"sha": "660bdfe3365b2f20182ede8f1c4abd356e049669", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "patch": "@@ -153,6 +153,7 @@ pub mod known {\n         str,\n         // Special names\n         macro_rules,\n+        doc,\n         // Components of known path (value or mod name)\n         std,\n         core,"}, {"sha": "a721e23c6934544bacf9c8593bf97f7fe1823779", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "patch": "@@ -125,3 +125,81 @@ pub(crate) fn completions(\n \n     Some(acc)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::completion_config::CompletionConfig;\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    struct DetailAndDocumentation<'a> {\n+        detail: &'a str,\n+        documentation: &'a str,\n+    }\n+\n+    fn check_detail_and_documentation(fixture: &str, expected: DetailAndDocumentation) {\n+        let (analysis, position) = analysis_and_position(fixture);\n+        let config = CompletionConfig::default();\n+        let completions = analysis.completions(&config, position).unwrap().unwrap();\n+        for item in completions {\n+            if item.detail() == Some(expected.detail) {\n+                let opt = item.documentation();\n+                let doc = opt.as_ref().map(|it| it.as_str());\n+                assert_eq!(doc, Some(expected.documentation));\n+                return;\n+            }\n+        }\n+        panic!(\"completion detail not found: {}\", expected.detail)\n+    }\n+\n+    #[test]\n+    fn test_completion_detail_from_macro_generated_struct_fn_doc_attr() {\n+        check_detail_and_documentation(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        #[doc = \"Do the foo\"]\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>;\n+            }\n+            \"#,\n+            DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \"Do the foo\" },\n+        );\n+    }\n+\n+    #[test]\n+    fn test_completion_detail_from_macro_generated_struct_fn_doc_comment() {\n+        check_detail_and_documentation(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        /// Do the foo\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>;\n+            }\n+            \"#,\n+            DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \" Do the foo\" },\n+        );\n+    }\n+}"}, {"sha": "9636cd0d6af7ad32bec9d4dff2084933c82d639b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 114, "deletions": 13, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "patch": "@@ -1,21 +1,16 @@\n use std::iter::once;\n \n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, FieldSource, HasSource, HirDisplay, ModuleDef,\n-    ModuleSource, Semantics,\n+    Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n+    ModuleDef, ModuleSource, Semantics,\n };\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n     RootDatabase,\n };\n-use ra_syntax::{\n-    ast::{self, DocCommentsOwner},\n-    match_ast, AstNode,\n-    SyntaxKind::*,\n-    SyntaxToken, TokenAtOffset,\n-};\n+use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n@@ -169,21 +164,24 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n-            hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)), mod_path)\n+            let docs = Documentation::from_ast(&src.value).map(Into::into);\n+            hover_text(docs, Some(macro_label(&src.value)), mod_path)\n         }\n         Definition::Field(it) => {\n             let src = it.source(db);\n             match src.value {\n                 FieldSource::Named(it) => {\n-                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n+                    let docs = Documentation::from_ast(&it).map(Into::into);\n+                    hover_text(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n             }\n         }\n         Definition::ModuleDef(it) => match it {\n             ModuleDef::Module(it) => match it.definition_source(db).value {\n                 ModuleSource::Module(it) => {\n-                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n+                    let docs = Documentation::from_ast(&it).map(Into::into);\n+                    hover_text(docs, it.short_label(), mod_path)\n                 }\n                 _ => None,\n             },\n@@ -208,10 +206,11 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n     fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<String>\n     where\n         D: HasSource<Ast = A>,\n-        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n+        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel + ast::AttrsOwner,\n     {\n         let src = def.source(db);\n-        hover_text(src.value.doc_comment_text(), src.value.short_label(), mod_path)\n+        let docs = Documentation::from_ast(&src.value).map(Into::into);\n+        hover_text(docs, src.value.short_label(), mod_path)\n     }\n }\n \n@@ -951,4 +950,106 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"mod my\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_hover_struct_doc_comment() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            /// bar docs\n+            struct Bar;\n+\n+            fn foo() {\n+                let bar = Ba<|>r;\n+            }\n+            \"#,\n+            &[\"struct Bar\\n```\\n___\\n\\nbar docs\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_struct_doc_attr() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            #[doc = \"bar docs\"]\n+            struct Bar;\n+\n+            fn foo() {\n+                let bar = Ba<|>r;\n+            }\n+            \"#,\n+            &[\"struct Bar\\n```\\n___\\n\\nbar docs\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_struct_doc_attr_multiple_and_mixed() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            /// bar docs 0\n+            #[doc = \"bar docs 1\"]\n+            #[doc = \"bar docs 2\"]\n+            struct Bar;\n+\n+            fn foo() {\n+                let bar = Ba<|>r;\n+            }\n+            \"#,\n+            &[\"struct Bar\\n```\\n___\\n\\nbar docs 0\\n\\nbar docs 1\\n\\nbar docs 2\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_macro_generated_struct_fn_doc_comment() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        /// Do the foo\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>o();\n+            }\n+            \"#,\n+            &[\"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\n Do the foo\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_macro_generated_struct_fn_doc_attr() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        #[doc = \"Do the foo\"]\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>o();\n+            }\n+            \"#,\n+            &[\"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\nDo the foo\"],\n+        );\n+    }\n }"}, {"sha": "a8f2454fd96e861209a9345911cef983ce41ace4", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "patch": "@@ -83,13 +83,22 @@ pub trait DocCommentsOwner: AstNode {\n         CommentIter { iter: self.syntax().children_with_tokens() }\n     }\n \n+    fn doc_comment_text(&self) -> Option<String> {\n+        self.doc_comments().doc_comment_text()\n+    }\n+}\n+\n+impl CommentIter {\n+    pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> CommentIter {\n+        CommentIter { iter: syntax_node.children_with_tokens() }\n+    }\n+\n     /// Returns the textual content of a doc comment block as a single string.\n     /// That is, strips leading `///` (+ optional 1 character of whitespace),\n     /// trailing `*/`, trailing whitespace and then joins the lines.\n-    fn doc_comment_text(&self) -> Option<String> {\n+    pub fn doc_comment_text(self) -> Option<String> {\n         let mut has_comments = false;\n         let docs = self\n-            .doc_comments()\n             .filter(|comment| comment.kind().doc.is_some())\n             .map(|comment| {\n                 has_comments = true;"}, {"sha": "4b93b759fa424389acbf57624ef50b8b04314b96", "filename": "docs/user/generated_features.adoc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/docs%2Fuser%2Fgenerated_features.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c6b739bad0c0a458d3ae6bb2bc4514477f325e31/docs%2Fuser%2Fgenerated_features.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_features.adoc?ref=c6b739bad0c0a458d3ae6bb2bc4514477f325e31", "patch": "@@ -76,7 +76,7 @@ Navigates to the type of an identifier.\n \n \n === Hover\n-**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/hover.rs#L63[hover.rs]\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/hover.rs#L58[hover.rs]\n \n Shows additional information, like type of an expression or documentation for definition when \"focusing\" code.\n Focusing is usually hovering with a mouse, but can also be triggered with a shortcut."}]}