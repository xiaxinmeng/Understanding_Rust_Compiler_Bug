{"sha": "8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "node_id": "C_kwDOAAsO6NoAKDhiMmY3ZTNiNTIzZjRmOWEyNWI3MTJlYzZkMGRkNzgxZGI2M2I5OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T15:59:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-25T15:59:31Z"}, "message": "Auto merge of #104846 - spastorino:santa-clauses-make-goals-early-christmas-\ud83c\udf84, r=oli-obk\n\nBranch Clause from Predicate\n\nr? `@oli-obk`\n\nThis is part of what's proposed in https://github.com/rust-lang/compiler-team/issues/531", "tree": {"sha": "9a4182b53583a3ca50a8cd546c79f3bd1d2dd580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4182b53583a3ca50a8cd546c79f3bd1d2dd580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "html_url": "https://github.com/rust-lang/rust/commit/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "268d230231439289091d6aaf79546c7969423c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/268d230231439289091d6aaf79546c7969423c84", "html_url": "https://github.com/rust-lang/rust/commit/268d230231439289091d6aaf79546c7969423c84"}, {"sha": "3f059a49a483c3ae31e378e5d5993b4215ee9ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f059a49a483c3ae31e378e5d5993b4215ee9ce9", "html_url": "https://github.com/rust-lang/rust/commit/3f059a49a483c3ae31e378e5d5993b4215ee9ce9"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "47ea98956be24cc98b6c5e41d59a6b6a4badc646", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -25,7 +25,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::{Rvalue, StatementKind};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{\n-    self, Binder, BoundVariableKind, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n+    self, Binder, BoundVariableKind, Clause, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n     ProjectionPredicate, Ty, TyCtxt, TypeVisitable, TypeckResults,\n };\n use rustc_semver::RustcVersion;\n@@ -1097,7 +1097,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n     let projection_predicates = predicates\n         .iter()\n         .filter_map(|predicate| {\n-            if let PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n+            if let PredicateKind::Clause(Clause::Projection(projection_predicate)) = predicate.kind().skip_binder() {\n                 Some(projection_predicate)\n             } else {\n                 None\n@@ -1111,7 +1111,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n     if predicates\n         .iter()\n         .filter_map(|predicate| {\n-            if let PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder()\n+            if let PredicateKind::Clause(Clause::Trait(trait_predicate)) = predicate.kind().skip_binder()\n                 && trait_predicate.trait_ref.self_ty() == param_ty.to_ty(cx.tcx)\n             {\n                 Some(trait_predicate.trait_ref.def_id)\n@@ -1173,7 +1173,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n         }\n \n         predicates.iter().all(|predicate| {\n-            if let PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder()\n+            if let PredicateKind::Clause(Clause::Trait(trait_predicate)) = predicate.kind().skip_binder()\n                 && cx.tcx.is_diagnostic_item(sym::IntoIterator, trait_predicate.trait_ref.def_id)\n                 && let ty::Param(param_ty) = trait_predicate.self_ty().kind()\n                 && let GenericArgKind::Type(ty) = substs_with_referent_ty[param_ty.index as usize].unpack()"}, {"sha": "d870e0ceef471ae2505aa6aafcdf1f483a2c4c6c", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -14,7 +14,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::{\n-    self, Binder, BoundConstness, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef,\n+    self, Binder, BoundConstness, Clause, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef,\n     Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -499,7 +499,7 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n \n     let ty_predicates = tcx.predicates_of(did).predicates;\n     for (p, _) in ty_predicates {\n-        if let PredicateKind::Trait(p) = p.kind().skip_binder()\n+        if let PredicateKind::Clause(Clause::Trait(p)) = p.kind().skip_binder()\n             && p.trait_ref.def_id == eq_trait_id\n             && let ty::Param(self_ty) = p.trait_ref.self_ty().kind()\n             && p.constness == BoundConstness::NotConst\n@@ -512,14 +512,14 @@ fn param_env_for_derived_eq(tcx: TyCtxt<'_>, did: DefId, eq_trait_id: DefId) ->\n     ParamEnv::new(\n         tcx.mk_predicates(ty_predicates.iter().map(|&(p, _)| p).chain(\n             params.iter().filter(|&&(_, needs_eq)| needs_eq).map(|&(param, _)| {\n-                tcx.mk_predicate(Binder::dummy(PredicateKind::Trait(TraitPredicate {\n+                tcx.mk_predicate(Binder::dummy(PredicateKind::Clause(Clause::Trait(TraitPredicate {\n                     trait_ref: TraitRef::new(\n                         eq_trait_id,\n                         tcx.mk_substs(std::iter::once(tcx.mk_param_from_def(param))),\n                     ),\n                     constness: BoundConstness::NotConst,\n                     polarity: ImplPolarity::Positive,\n-                })))\n+                }))))\n             }),\n         )),\n         Reveal::UserFacing,"}, {"sha": "a9425a40f885ea192bf50e263c900b44d09d77b4", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{EarlyBinder, Opaque, PredicateKind::Trait};\n+use rustc_middle::ty::{Clause, EarlyBinder, Opaque, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                                 infcx\n                                     .err_ctxt()\n                                     .maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                if let Trait(trait_pred) = obligation.predicate.kind().skip_binder() {\n+                                if let PredicateKind::Clause(Clause::Trait(trait_pred)) = obligation.predicate.kind().skip_binder() {\n                                     db.note(&format!(\n                                         \"`{}` doesn't implement `{}`\",\n                                         trait_pred.self_ty(),"}, {"sha": "7ff13b95626ba89b22d603caa7fbda300a0aaef1", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::EarlyBinder;\n-use rustc_middle::ty::{self, ParamTy, PredicateKind, ProjectionPredicate, TraitPredicate, Ty};\n+use rustc_middle::ty::{self, Clause, ParamTy, PredicateKind, ProjectionPredicate, TraitPredicate, Ty};\n use rustc_semver::RustcVersion;\n use rustc_span::{sym, Symbol};\n use rustc_trait_selection::traits::{\n@@ -341,12 +341,12 @@ fn get_input_traits_and_projections<'tcx>(\n     let mut projection_predicates = Vec::new();\n     for predicate in cx.tcx.param_env(callee_def_id).caller_bounds() {\n         match predicate.kind().skip_binder() {\n-            PredicateKind::Trait(trait_predicate) => {\n+            PredicateKind::Clause(Clause::Trait(trait_predicate)) => {\n                 if trait_predicate.trait_ref.self_ty() == input {\n                     trait_predicates.push(trait_predicate);\n                 }\n             }\n-            PredicateKind::Projection(projection_predicate) => {\n+            PredicateKind::Clause(Clause::Projection(projection_predicate)) => {\n                 if projection_predicate.projection_ty.self_ty() == input {\n                     projection_predicates.push(projection_predicate);\n                 }\n@@ -403,7 +403,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n \n                         let mut trait_predicates = cx.tcx.param_env(callee_def_id)\n                             .caller_bounds().iter().filter(|predicate| {\n-                            if let PredicateKind::Trait(trait_predicate) =  predicate.kind().skip_binder()\n+                            if let PredicateKind::Clause(Clause::Trait(trait_predicate)) =  predicate.kind().skip_binder()\n                                 && trait_predicate.trait_ref.self_ty() == *param_ty {\n                                     true\n                                 } else {"}, {"sha": "75e12715458f4faf44f9605e6b22ce4470e36fb0", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n                 match obligation.predicate.kind().no_bound_vars() {\n-                    Some(ty::PredicateKind::Trait(pred)) if pred.def_id() != sized_trait => Some(pred),\n+                    Some(ty::PredicateKind::Clause(ty::Clause::Trait(pred))) if pred.def_id() != sized_trait => Some(pred),\n                     _ => None,\n                 }\n             })"}, {"sha": "d28e97b7943525b56224cc8a2a70b2126ebb3d63", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -19,7 +19,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{Obligation, ObligationCause};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::{self, Binder, ExistentialPredicate, List, PredicateKind, Ty};\n+use rustc_middle::ty::{self, Binder, Clause, ExistentialPredicate, List, PredicateKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -698,9 +698,8 @@ fn matches_preds<'tcx>(\n             cx.tcx,\n             ObligationCause::dummy(),\n             cx.param_env,\n-            cx.tcx.mk_predicate(Binder::bind_with_vars(\n-                PredicateKind::Projection(p.with_self_ty(cx.tcx, ty)),\n-                List::empty(),\n+            cx.tcx.mk_predicate(Binder::dummy(\n+                PredicateKind::Clause(Clause::Projection(p.with_self_ty(cx.tcx, ty))),\n             )),\n         )),\n         ExistentialPredicate::AutoTrait(p) => infcx"}, {"sha": "a138a4baa9b319eb5334709f8ff6089316cb6b9d", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Closure, Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n+use rustc_middle::ty::{Clause, GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, BytePos, Span};\n \n@@ -45,7 +45,7 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     let mut preds = Vec::new();\n     for (pred, _) in generics.predicates {\n         if_chain! {\n-            if let PredicateKind::Trait(poly_trait_pred) = pred.kind().skip_binder();\n+            if let PredicateKind::Clause(Clause::Trait(poly_trait_pred)) = pred.kind().skip_binder();\n             let trait_pred = cx.tcx.erase_late_bound_regions(pred.kind().rebind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;\n@@ -63,7 +63,7 @@ fn get_projection_pred<'tcx>(\n     trait_pred: TraitPredicate<'tcx>,\n ) -> Option<ProjectionPredicate<'tcx>> {\n     generics.predicates.iter().find_map(|(proj_pred, _)| {\n-        if let ty::PredicateKind::Projection(pred) = proj_pred.kind().skip_binder() {\n+        if let ty::PredicateKind::Clause(Clause::Projection(pred)) = proj_pred.kind().skip_binder() {\n             let projection_pred = cx.tcx.erase_late_bound_regions(proj_pred.kind().rebind(pred));\n             if projection_pred.projection_ty.substs == trait_pred.trait_ref.substs {\n                 return Some(projection_pred);"}, {"sha": "f74f7dadfa90809aedb880e349a98515a98748c9", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -73,7 +73,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n             .flat_map(|v| v.fields.iter())\n             .any(|x| matches!(cx.tcx.type_of(x.did).peel_refs().kind(), ty::Param(_)))\n             && all_predicates_of(cx.tcx, fn_id).all(|(pred, _)| match pred.kind().skip_binder() {\n-                PredicateKind::Trait(pred) => cx.tcx.trait_def(pred.trait_ref.def_id).is_marker,\n+                PredicateKind::Clause(ty::Clause::Trait(pred)) => cx.tcx.trait_def(pred.trait_ref.def_id).is_marker,\n                 _ => true,\n             })\n             && subs.types().all(|x| matches!(x.peel_refs().kind(), ty::Param(_)))"}, {"sha": "b8c2dd5ab9ea16ee31ac7111304444bd16484774", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -25,13 +25,13 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: Option<\n         let predicates = tcx.predicates_of(current);\n         for (predicate, _) in predicates.predicates {\n             match predicate.kind().skip_binder() {\n-                ty::PredicateKind::RegionOutlives(_)\n-                | ty::PredicateKind::TypeOutlives(_)\n+                ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n+                | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n                 | ty::PredicateKind::WellFormed(_)\n-                | ty::PredicateKind::Projection(_)\n+                | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n-                | ty::PredicateKind::Trait(..)\n+                | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),"}, {"sha": "f4459e3e6633abd3790038816d9ed5521596e4fa", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=8b2f7e3b523f4f9a25b712ec6d0dd781db63b99b", "patch": "@@ -81,7 +81,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                     match predicate.kind().skip_binder() {\n                         // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n                         // and check substituions to find `U`.\n-                        ty::PredicateKind::Trait(trait_predicate) => {\n+                        ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n                             if trait_predicate\n                                 .trait_ref\n                                 .substs\n@@ -94,7 +94,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                         },\n                         // For `impl Trait<Assoc=U>`, it will register a predicate of `<T as Trait>::Assoc = U`,\n                         // so we check the term for `U`.\n-                        ty::PredicateKind::Projection(projection_predicate) => {\n+                        ty::PredicateKind::Clause(ty::Clause::Projection(projection_predicate)) => {\n                             if let ty::TermKind::Ty(ty) = projection_predicate.term.unpack() {\n                                 if contains_ty_adt_constructor_opaque(cx, ty, needle) {\n                                     return true;\n@@ -239,7 +239,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(def_id, _) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n-                if let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() {\n+                if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n                         return true;\n                     }\n@@ -658,7 +658,7 @@ fn sig_from_bounds<'tcx>(\n \n     for pred in predicates {\n         match pred.kind().skip_binder() {\n-            PredicateKind::Trait(p)\n+            PredicateKind::Clause(ty::Clause::Trait(p))\n                 if (lang_items.fn_trait() == Some(p.def_id())\n                     || lang_items.fn_mut_trait() == Some(p.def_id())\n                     || lang_items.fn_once_trait() == Some(p.def_id()))\n@@ -671,7 +671,7 @@ fn sig_from_bounds<'tcx>(\n                 }\n                 inputs = Some(i);\n             },\n-            PredicateKind::Projection(p)\n+            PredicateKind::Clause(ty::Clause::Projection(p))\n                 if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output()\n                     && p.projection_ty.self_ty() == ty =>\n             {\n@@ -699,7 +699,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n         .subst_iter_copied(cx.tcx, ty.substs)\n     {\n         match pred.kind().skip_binder() {\n-            PredicateKind::Trait(p)\n+            PredicateKind::Clause(ty::Clause::Trait(p))\n                 if (lang_items.fn_trait() == Some(p.def_id())\n                     || lang_items.fn_mut_trait() == Some(p.def_id())\n                     || lang_items.fn_once_trait() == Some(p.def_id())) =>\n@@ -712,7 +712,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                 }\n                 inputs = Some(i);\n             },\n-            PredicateKind::Projection(p) if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() => {\n+            PredicateKind::Clause(ty::Clause::Projection(p)) if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() => {\n                 if output.is_some() {\n                     // Multiple different fn trait impls. Is this even allowed?\n                     return None;\n@@ -887,7 +887,7 @@ pub fn ty_is_fn_once_param<'tcx>(tcx: TyCtxt<'_>, ty: Ty<'tcx>, predicates: &'tc\n     predicates\n         .iter()\n         .try_fold(false, |found, p| {\n-            if let PredicateKind::Trait(p) = p.kind().skip_binder()\n+            if let PredicateKind::Clause(ty::Clause::Trait(p)) = p.kind().skip_binder()\n             && let ty::Param(self_ty) = p.trait_ref.self_ty().kind()\n             && ty.index == self_ty.index\n         {"}]}