{"sha": "65ea0ff29d32ca4fea30477f7fb1a1d43342dc26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZWEwZmYyOWQzMmNhNGZlYTMwNDc3ZjdmYjFhMWQ0MzM0MmRjMjY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-04T06:53:31Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-08T23:17:03Z"}, "message": "Optimize string handling in lit_token().\n\nIn the common case, the string value in a string literal Token is the\nsame as the string value in a string literal LitKind. (The exception is\nwhen escapes or \\r are involved.) This patch takes advantage of that to\navoid calling str_lit() and re-interning the string in that case. This\nspeeds up incremental builds for a few of the rustc-benchmarks, the best\nby 3%.", "tree": {"sha": "800609529fd3038e29f761cb260e0b12fb96ec41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/800609529fd3038e29f761cb260e0b12fb96ec41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26", "html_url": "https://github.com/rust-lang/rust/commit/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9bfe840f41d00e9712f13fbc635ec3fbe95e8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bfe840f41d00e9712f13fbc635ec3fbe95e8c4", "html_url": "https://github.com/rust-lang/rust/commit/f9bfe840f41d00e9712f13fbc635ec3fbe95e8c4"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "f26a6a5307401cb8645517e69e6dda98862f0b22", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=65ea0ff29d32ca4fea30477f7fb1a1d43342dc26", "patch": "@@ -419,13 +419,24 @@ pub fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Hand\n         token::Integer(s) => (false, integer_lit(&s.as_str(), suf, diag)),\n         token::Float(s) => (false, float_lit(&s.as_str(), suf, diag)),\n \n-        token::Str_(s) => {\n-            let s = Symbol::intern(&str_lit(&s.as_str(), diag));\n-            (true, Some(LitKind::Str(s, ast::StrStyle::Cooked)))\n+        token::Str_(mut sym) => {\n+            // If there are no characters requiring special treatment we can\n+            // reuse the symbol from the Token. Otherwise, we must generate a\n+            // new symbol because the string in the LitKind is different to the\n+            // string in the Token.\n+            let s = &sym.as_str();\n+            if s.as_bytes().iter().any(|&c| c == b'\\\\' || c == b'\\r') {\n+                sym = Symbol::intern(&str_lit(s, diag));\n+            }\n+            (true, Some(LitKind::Str(sym, ast::StrStyle::Cooked)))\n         }\n-        token::StrRaw(s, n) => {\n-            let s = Symbol::intern(&raw_str_lit(&s.as_str()));\n-            (true, Some(LitKind::Str(s, ast::StrStyle::Raw(n))))\n+        token::StrRaw(mut sym, n) => {\n+            // Ditto.\n+            let s = &sym.as_str();\n+            if s.contains('\\r') {\n+                sym = Symbol::intern(&raw_str_lit(s));\n+            }\n+            (true, Some(LitKind::Str(sym, ast::StrStyle::Raw(n))))\n         }\n         token::ByteStr(i) => {\n             (true, Some(LitKind::ByteStr(byte_str_lit(&i.as_str()))))"}]}