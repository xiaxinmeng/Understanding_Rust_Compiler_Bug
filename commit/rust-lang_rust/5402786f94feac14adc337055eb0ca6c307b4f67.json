{"sha": "5402786f94feac14adc337055eb0ca6c307b4f67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDI3ODZmOTRmZWFjMTRhZGMzMzcwNTVlYjBjYTZjMzA3YjRmNjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-17T08:24:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T22:45:21Z"}, "message": "std: More TLS micro-optimization", "tree": {"sha": "486bf7b50a4318f8297fdf275e451c983c28b6d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/486bf7b50a4318f8297fdf275e451c983c28b6d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5402786f94feac14adc337055eb0ca6c307b4f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5402786f94feac14adc337055eb0ca6c307b4f67", "html_url": "https://github.com/rust-lang/rust/commit/5402786f94feac14adc337055eb0ca6c307b4f67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5402786f94feac14adc337055eb0ca6c307b4f67/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "468d023fe94aadbdc7b7dc0a83d264ee2ae0d68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/468d023fe94aadbdc7b7dc0a83d264ee2ae0d68a", "html_url": "https://github.com/rust-lang/rust/commit/468d023fe94aadbdc7b7dc0a83d264ee2ae0d68a"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "80beb5a2835a0403edd9c707b3c80f41fcb6f054", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5402786f94feac14adc337055eb0ca6c307b4f67/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402786f94feac14adc337055eb0ca6c307b4f67/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=5402786f94feac14adc337055eb0ca6c307b4f67", "patch": "@@ -26,7 +26,9 @@ pub trait Local {\n }\n \n impl Local for Task {\n+    #[inline]\n     fn put(value: ~Task) { unsafe { local_ptr::put(value) } }\n+    #[inline]\n     fn take() -> ~Task { unsafe { local_ptr::take() } }\n     fn exists() -> bool { local_ptr::exists() }\n     fn borrow<T>(f: &fn(&mut Task) -> T) -> T {\n@@ -43,7 +45,9 @@ impl Local for Task {\n             None => { rtabort!(\"function failed in local_borrow\") }\n         }\n     }\n+    #[inline]\n     unsafe fn unsafe_borrow() -> *mut Task { local_ptr::unsafe_borrow() }\n+    #[inline]\n     unsafe fn try_unsafe_borrow() -> Option<*mut Task> {\n         local_ptr::try_unsafe_borrow()\n     }\n@@ -57,12 +61,12 @@ impl Local for Scheduler {\n             task.sched = Some(value.take());\n         };\n     }\n+    #[inline]\n     fn take() -> ~Scheduler {\n-        do Local::borrow::<Task,~Scheduler> |task| {\n-            let sched = task.sched.take_unwrap();\n-            let task = task;\n-            task.sched = None;\n-            sched\n+        unsafe {\n+            // XXX: Unsafe for speed\n+            let task = Local::unsafe_borrow::<Task>();\n+            (*task).sched.take_unwrap()\n         }\n     }\n     fn exists() -> bool {\n@@ -97,10 +101,17 @@ impl Local for Scheduler {\n         }\n     }\n     unsafe fn try_unsafe_borrow() -> Option<*mut Scheduler> {\n-        if Local::exists::<Scheduler>() {\n-            Some(Local::unsafe_borrow())\n-        } else {\n-            None\n+        match Local::try_unsafe_borrow::<Task>() {\n+            Some(task) => {\n+                match (*task).sched {\n+                    Some(~ref mut sched) => {\n+                        let s: *mut Scheduler = &mut *sched;\n+                        Some(s)\n+                    }\n+                    None => None\n+                }\n+            }\n+            None => None\n         }\n     }\n }"}, {"sha": "491a864ebfeb4898f46d437be7c1cabb4bb41070", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5402786f94feac14adc337055eb0ca6c307b4f67/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402786f94feac14adc337055eb0ca6c307b4f67/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=5402786f94feac14adc337055eb0ca6c307b4f67", "patch": "@@ -40,6 +40,7 @@ pub fn init_tls_key() {\n /// # Safety note\n ///\n /// Does not validate the pointer type.\n+#[inline]\n pub unsafe fn put<T>(sched: ~T) {\n     let key = tls_key();\n     let void_ptr: *mut c_void = cast::transmute(sched);\n@@ -51,6 +52,7 @@ pub unsafe fn put<T>(sched: ~T) {\n /// # Safety note\n ///\n /// Does not validate the pointer type.\n+#[inline]\n pub unsafe fn take<T>() -> ~T {\n     let key = tls_key();\n     let void_ptr: *mut c_void = tls::get(key);\n@@ -99,10 +101,15 @@ pub unsafe fn borrow<T>(f: &fn(&mut T)) {\n /// Because this leaves the value in thread-local storage it is possible\n /// For the Scheduler pointer to be aliased\n pub unsafe fn unsafe_borrow<T>() -> *mut T {\n-    match try_unsafe_borrow() {\n-        Some(p) => p,\n-        None => rtabort!(\"thread-local pointer is null. bogus!\")\n+    let key = tls_key();\n+    let mut void_ptr: *mut c_void = tls::get(key);\n+    if void_ptr.is_null() {\n+        rtabort!(\"thread-local pointer is null. bogus!\");\n     }\n+    let ptr: *mut *mut c_void = &mut void_ptr;\n+    let ptr: *mut ~T = ptr as *mut ~T;\n+    let ptr: *mut T = &mut **ptr;\n+    return ptr;\n }\n \n pub unsafe fn try_unsafe_borrow<T>() -> Option<*mut T> {\n@@ -119,6 +126,7 @@ pub unsafe fn try_unsafe_borrow<T>() -> Option<*mut T> {\n     }\n }\n \n+#[inline]\n fn tls_key() -> tls::Key {\n     match maybe_tls_key() {\n         Some(key) => key,"}]}