{"sha": "d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDg1NTk5M2QwMzg2ZmMxM2FkMWI3NGRmNTY1YjViYTZmNmU0ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-11T16:52:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-11T16:52:40Z"}, "message": "auto merge of #7047 : bblum/rust/bug_triage, r=graydon\n\nr? anybody", "tree": {"sha": "f4c3d0397b96ac2a4d324e29ea1118f9223a7e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c3d0397b96ac2a4d324e29ea1118f9223a7e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "html_url": "https://github.com/rust-lang/rust/commit/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf41586a1835790b7294c658f4dae484f738ce03", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf41586a1835790b7294c658f4dae484f738ce03", "html_url": "https://github.com/rust-lang/rust/commit/bf41586a1835790b7294c658f4dae484f738ce03"}, {"sha": "8081aea3b86d9e25746ff03acabe53c3644b600c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8081aea3b86d9e25746ff03acabe53c3644b600c", "html_url": "https://github.com/rust-lang/rust/commit/8081aea3b86d9e25746ff03acabe53c3644b600c"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "7a4ad34b508923e1ba06106b7b61d6ca585073d6", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -131,7 +131,6 @@ pub fn recv_timeout<T:Copy + Owned>(iotask: &IoTask,\n     unsafe {\n         let wait_po = cast::transmute_mut(wait_po);\n \n-        // FIXME: This could be written clearer (#2618)\n         either::either(\n             |_| {\n                 None"}, {"sha": "012ad0ed80d269d6bb36262469a3a0826f9018d1", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -315,6 +315,7 @@ struct BufferResource<T> {\n impl<T> Drop for BufferResource<T> {\n     fn finalize(&self) {\n         unsafe {\n+            // FIXME(#4330) Need self by value to get mutability.\n             let this: &mut BufferResource<T> = transmute(self);\n \n             let mut b = move_it!(this.buffer);"}, {"sha": "2977d081508122690c3449b197860c4b6ade7273", "filename": "src/libstd/rt/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Frt%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Frt%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frc.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -78,7 +78,7 @@ impl<T> Drop for RC<T> {\n         assert!(self.refcount() > 0);\n \n         unsafe {\n-            // XXX: Mutable finalizer\n+            // FIXME(#4330) Need self by value to get mutability.\n             let this: &mut RC<T> = cast::transmute_mut(self);\n \n             match *this.get_mut_state() {"}, {"sha": "dd66a76eead91777ea2130c5070b8bce3d8ca3e3", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -238,28 +238,14 @@ pub fn last_uv_error<H, W: Watcher + NativeHandle<*H>>(watcher: &W) -> UvError {\n }\n \n pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n-\n-    // XXX: Could go in str::raw\n-    unsafe fn c_str_to_static_slice(s: *libc::c_char) -> &'static str {\n-        let s = s as *u8;\n-        let mut (curr, len) = (s, 0u);\n-        while *curr != 0u8 {\n-            len += 1u;\n-            curr = ptr::offset(s, len);\n-        }\n-\n-        str::raw::buf_as_slice(s, len, |d| cast::transmute(d))\n-    }\n-\n-\n     unsafe {\n         // Importing error constants\n         use rt::uv::uvll::*;\n         use rt::io::*;\n \n         // uv error descriptions are static\n         let c_desc = uvll::strerror(&*uverr);\n-        let desc = c_str_to_static_slice(c_desc);\n+        let desc = str::raw::c_str_to_static_slice(c_desc);\n \n         let kind = match uverr.code {\n             UNKNOWN => OtherIoError,"}, {"sha": "85015c9bc5e41f511f8859c7469cdf30a0aec35d", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -429,7 +429,7 @@ impl Process {\n \n impl Drop for Process {\n     fn finalize(&self) {\n-        // FIXME #4943: transmute is bad.\n+        // FIXME(#4330) Need self by value to get mutability.\n         let mut_self: &mut Process = unsafe { cast::transmute(self) };\n \n         mut_self.finish();"}, {"sha": "f270964c3b5697224d3e4121aa50a3fa85266bc6", "filename": "src/libstd/str.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -1396,12 +1396,19 @@ pub mod raw {\n     /// Converts a byte to a string.\n     pub unsafe fn from_byte(u: u8) -> ~str { raw::from_bytes([u]) }\n \n-    /// Form a slice from a *u8 buffer of the given length without copying.\n-    pub unsafe fn buf_as_slice<T>(buf: *u8, len: uint,\n-                              f: &fn(v: &str) -> T) -> T {\n-        let v = (buf, len + 1);\n+    /// Form a slice from a C string. Unsafe because the caller must ensure the\n+    /// C string has the static lifetime, or else the return value may be\n+    /// invalidated later.\n+    pub unsafe fn c_str_to_static_slice(s: *libc::c_char) -> &'static str {\n+        let s = s as *u8;\n+        let mut (curr, len) = (s, 0u);\n+        while *curr != 0u8 {\n+            len += 1u;\n+            curr = ptr::offset(s, len);\n+        }\n+        let v = (s, len + 1);\n         assert!(is_utf8(::cast::transmute(v)));\n-        f(::cast::transmute(v))\n+        ::cast::transmute(v)\n     }\n \n     /**"}, {"sha": "bc409e066330b69a5bfc0177232887f4f3cdacb7", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -323,6 +323,7 @@ impl Drop for TCB {\n     // Runs on task exit.\n     fn finalize(&self) {\n         unsafe {\n+            // FIXME(#4330) Need self by value to get mutability.\n             let this: &mut TCB = transmute(self);\n \n             // If we are failing, the whole taskgroup needs to die."}, {"sha": "856f4e6e3c196163a4abafe80538730075affde0", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "patch": "@@ -275,6 +275,7 @@ impl<T> Drop for AtomicOption<T> {\n         // This will ensure that the contained data is\n         // destroyed, unless it's null.\n         unsafe {\n+            // FIXME(#4330) Need self by value to get mutability.\n             let this : &mut AtomicOption<T> = cast::transmute(self);\n             let _ = this.take(SeqCst);\n         }"}]}