{"sha": "50ffa79589600f515ff2710830c23cd2dce7cb76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZmZhNzk1ODk2MDBmNTE1ZmYyNzEwODMwYzIzY2QyZGNlN2NiNzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-22T04:09:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-22T04:09:28Z"}, "message": "Auto merge of #65501 - alexcrichton:remove-emscripten-backend, r=Mark-Simulacrum\n\nRemove `src/llvm-emscripten` submodule\n\nWith #65251 landed there's no need to build two LLVM backends and ship\nthem with rustc, every target we have now uses the same LLVM backend!\n\nThis removes the `src/llvm-emscripten` submodule and additionally\nremoves all support from rustbuild for building the emscripten LLVM\nbackend. Multiple codegen backend support is left in place for now, and\nthis is intended to be an easy 10-15 minute win on CI times by avoiding\nhaving to build LLVM twice.", "tree": {"sha": "ecc547e06113402dfc71932098c5000576b1299c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc547e06113402dfc71932098c5000576b1299c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ffa79589600f515ff2710830c23cd2dce7cb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ffa79589600f515ff2710830c23cd2dce7cb76", "html_url": "https://github.com/rust-lang/rust/commit/50ffa79589600f515ff2710830c23cd2dce7cb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ffa79589600f515ff2710830c23cd2dce7cb76/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6576f4be5af31a5e61dfc0cf50b7130e6c6dfb35", "url": "https://api.github.com/repos/rust-lang/rust/commits/6576f4be5af31a5e61dfc0cf50b7130e6c6dfb35", "html_url": "https://github.com/rust-lang/rust/commit/6576f4be5af31a5e61dfc0cf50b7130e6c6dfb35"}, {"sha": "c7d285b78136a5bccf8419afa4c57428b83b8bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d285b78136a5bccf8419afa4c57428b83b8bec", "html_url": "https://github.com/rust-lang/rust/commit/c7d285b78136a5bccf8419afa4c57428b83b8bec"}], "stats": {"total": 145, "additions": 36, "deletions": 109}, "files": [{"sha": "1dcf9ed319f149ee1054dbc761f47ad9dc2702e7", "filename": ".gitmodules", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -28,9 +28,6 @@\n [submodule \"src/doc/rust-by-example\"]\n \tpath = src/doc/rust-by-example\n \turl = https://github.com/rust-lang/rust-by-example.git\n-[submodule \"src/llvm-emscripten\"]\n-\tpath = src/llvm-emscripten\n-\turl = https://github.com/rust-lang/llvm.git\n [submodule \"src/stdarch\"]\n \tpath = src/stdarch\n \turl = https://github.com/rust-lang/stdarch.git"}, {"sha": "be977024426097f689f56e5869194d95b334ceb1", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -374,10 +374,7 @@\n \n # This is an array of the codegen backends that will be compiled for the rustc\n # that's being compiled. The default is to only build the LLVM codegen backend,\n-# but you can also optionally enable the \"emscripten\" backend for asm.js or\n-# make this an empty array (but that probably won't get too far in the\n-# bootstrap)\n-# FIXME: remove the obsolete emscripten backend option.\n+# and currently the only standard option supported is `\"llvm\"`\n #codegen-backends = [\"llvm\"]\n \n # This is the name of the directory in which codegen backends will get installed"}, {"sha": "4caf36a6f2a51442df56e79af4028492c25647e8", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -734,10 +734,6 @@ def update_submodules(self):\n             if module.endswith(\"llvm-project\"):\n                 if self.get_toml('llvm-config') and self.get_toml('lld') != 'true':\n                     continue\n-            if module.endswith(\"llvm-emscripten\"):\n-                backends = self.get_toml('codegen-backends')\n-                if backends is None or not 'emscripten' in backends:\n-                    continue\n             check = self.check_submodule(module, slow_submodules)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)"}, {"sha": "5074b035789ae13798659e19013e954f22c03f6d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -210,7 +210,6 @@ pub fn std_cargo(builder: &Builder<'_>,\n             // config.toml equivalent) is used\n             let llvm_config = builder.ensure(native::Llvm {\n                 target: builder.config.build,\n-                emscripten: false,\n             });\n             cargo.env(\"LLVM_CONFIG\", llvm_config);\n             cargo.env(\"RUSTC_BUILD_SANITIZERS\", \"1\");\n@@ -615,36 +614,27 @@ pub fn build_codegen_backend(builder: &Builder<'_>,\n                              compiler: &Compiler,\n                              target: Interned<String>,\n                              backend: Interned<String>) -> String {\n-    let mut features = String::new();\n-\n     match &*backend {\n-        \"llvm\" | \"emscripten\" => {\n+        \"llvm\" => {\n             // Build LLVM for our target. This will implicitly build the\n             // host LLVM if necessary.\n             let llvm_config = builder.ensure(native::Llvm {\n                 target,\n-                emscripten: backend == \"emscripten\",\n             });\n \n-            if backend == \"emscripten\" {\n-                features.push_str(\" emscripten\");\n-            }\n-\n             builder.info(&format!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n                      compiler.stage, &compiler.host, target, backend));\n \n             // Pass down configuration from the LLVM build into the build of\n             // librustc_llvm and librustc_codegen_llvm.\n-            if builder.is_rust_llvm(target) && backend != \"emscripten\" {\n+            if builder.is_rust_llvm(target) {\n                 cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n             }\n \n             cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-            if backend != \"emscripten\" {\n-                let target_config = builder.config.target_config.get(&target);\n-                if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-                    cargo.env(\"CFG_LLVM_ROOT\", s);\n-                }\n+            let target_config = builder.config.target_config.get(&target);\n+            if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+                cargo.env(\"CFG_LLVM_ROOT\", s);\n             }\n             // Some LLVM linker flags (-L and -l) may be needed to link librustc_llvm.\n             if let Some(ref s) = builder.config.llvm_ldflags {\n@@ -662,9 +652,7 @@ pub fn build_codegen_backend(builder: &Builder<'_>,\n                                          \"libstdc++.a\");\n                 cargo.env(\"LLVM_STATIC_STDCPP\", file);\n             }\n-            if builder.config.llvm_link_shared ||\n-                (builder.config.llvm_thin_lto && backend != \"emscripten\")\n-            {\n+            if builder.config.llvm_link_shared || builder.config.llvm_thin_lto {\n                 cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n             }\n             if builder.config.llvm_use_libcxx {\n@@ -676,8 +664,7 @@ pub fn build_codegen_backend(builder: &Builder<'_>,\n         }\n         _ => panic!(\"unknown backend: {}\", backend),\n     }\n-\n-    features\n+    String::new()\n }\n \n /// Creates the `codegen-backends` folder for a compiler that's about to be"}, {"sha": "441bb8d68faf9c5915dc346300e31ca5167b0468", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -668,7 +668,6 @@ impl Config {\n \n     pub fn llvm_enabled(&self) -> bool {\n         self.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n-        || self.rust_codegen_backends.contains(&INTERNER.intern_str(\"emscripten\"))\n     }\n }\n "}, {"sha": "76509134f7ccdf3c3517a449fa5c380e58e6f372", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -55,7 +55,6 @@ def v(*args):\n o(\"dist-src\", \"rust.dist-src\", \"when building tarballs enables building a source tarball\")\n o(\"cargo-native-static\", \"build.cargo-native-static\", \"static native libraries in cargo\")\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")\n-o(\"emscripten\", None, \"compile the emscripten backend as well as LLVM\")\n o(\"full-tools\", None, \"enable all tools\")\n o(\"lld\", \"rust.lld\", \"build lld\")\n o(\"lldb\", \"rust.lldb\", \"build lldb\")\n@@ -335,10 +334,8 @@ def set(key, value):\n         set('build.host', value.split(','))\n     elif option.name == 'target':\n         set('build.target', value.split(','))\n-    elif option.name == 'emscripten':\n-        set('rust.codegen-backends', ['llvm', 'emscripten'])\n     elif option.name == 'full-tools':\n-        set('rust.codegen-backends', ['llvm', 'emscripten'])\n+        set('rust.codegen-backends', ['llvm'])\n         set('rust.lld', True)\n         set('rust.llvm-tools', True)\n         set('build.extended', True)"}, {"sha": "514ad1144491706c50b4fe4831e23652a29bc4ab", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -826,17 +826,13 @@ fn copy_src_dirs(builder: &Builder<'_>, src_dirs: &[&str], exclude_dirs: &[&str]\n \n         const LLVM_TEST: &[&str] = &[\n             \"llvm-project/llvm/test\", \"llvm-project\\\\llvm\\\\test\",\n-            \"llvm-emscripten/test\", \"llvm-emscripten\\\\test\",\n         ];\n         if LLVM_TEST.iter().any(|path| spath.contains(path)) &&\n             (spath.ends_with(\".ll\") ||\n              spath.ends_with(\".td\") ||\n              spath.ends_with(\".s\")) {\n             return false\n         }\n-        if spath.contains(\"test/emscripten\") || spath.contains(\"test\\\\emscripten\") {\n-            return false\n-        }\n \n         let full_path = Path::new(dir).join(path);\n         if exclude_dirs.iter().any(|excl| full_path == Path::new(excl)) {"}, {"sha": "a182405f3b2d43926d11ab4972c28548d450af49", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -232,7 +232,6 @@ pub struct Build {\n     miri_info: channel::GitInfo,\n     rustfmt_info: channel::GitInfo,\n     in_tree_llvm_info: channel::GitInfo,\n-    emscripten_llvm_info: channel::GitInfo,\n     local_rebuild: bool,\n     fail_fast: bool,\n     doc_tests: DocTests,\n@@ -351,7 +350,6 @@ impl Build {\n \n         // we always try to use git for LLVM builds\n         let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n-        let emscripten_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-emscripten\"));\n \n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),\n@@ -376,7 +374,6 @@ impl Build {\n             miri_info,\n             rustfmt_info,\n             in_tree_llvm_info,\n-            emscripten_llvm_info,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             ar: HashMap::new(),\n@@ -553,10 +550,6 @@ impl Build {\n         self.out.join(&*target).join(\"llvm\")\n     }\n \n-    fn emscripten_llvm_out(&self, target: Interned<String>) -> PathBuf {\n-        self.out.join(&*target).join(\"llvm-emscripten\")\n-    }\n-\n     fn lld_out(&self, target: Interned<String>) -> PathBuf {\n         self.out.join(&*target).join(\"lld\")\n     }"}, {"sha": "97cdd25680162869758a0349269360f112e4c1d2", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 25, "deletions": 50, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -28,7 +28,6 @@ use crate::GitRepo;\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Llvm {\n     pub target: Interned<String>,\n-    pub emscripten: bool,\n }\n \n impl Step for Llvm {\n@@ -40,46 +39,35 @@ impl Step for Llvm {\n         run.path(\"src/llvm-project\")\n             .path(\"src/llvm-project/llvm\")\n             .path(\"src/llvm\")\n-            .path(\"src/llvm-emscripten\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let emscripten = run.path.ends_with(\"llvm-emscripten\");\n         run.builder.ensure(Llvm {\n             target: run.target,\n-            emscripten,\n         });\n     }\n \n     /// Compile LLVM for `target`.\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n         let target = self.target;\n-        let emscripten = self.emscripten;\n \n         // If we're using a custom LLVM bail out here, but we can only use a\n         // custom LLVM for the build triple.\n-        if !self.emscripten {\n-            if let Some(config) = builder.config.target_config.get(&target) {\n-                if let Some(ref s) = config.llvm_config {\n-                    check_llvm_version(builder, s);\n-                    return s.to_path_buf()\n-                }\n+        if let Some(config) = builder.config.target_config.get(&target) {\n+            if let Some(ref s) = config.llvm_config {\n+                check_llvm_version(builder, s);\n+                return s.to_path_buf()\n             }\n         }\n \n-        let (llvm_info, root, out_dir, llvm_config_ret_dir) = if emscripten {\n-            let info = &builder.emscripten_llvm_info;\n-            let dir = builder.emscripten_llvm_out(target);\n-            let config_dir = dir.join(\"bin\");\n-            (info, \"src/llvm-emscripten\", dir, config_dir)\n-        } else {\n-            let info = &builder.in_tree_llvm_info;\n-            let mut dir = builder.llvm_out(builder.config.build);\n-            if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n-                dir.push(\"build\");\n-            }\n-            (info, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n-        };\n+        let llvm_info = &builder.in_tree_llvm_info;\n+        let root = \"src/llvm-project/llvm\";\n+        let out_dir = builder.llvm_out(target);\n+        let mut llvm_config_ret_dir = builder.llvm_out(builder.config.build);\n+        if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n+            llvm_config_ret_dir.push(\"build\");\n+        }\n+        llvm_config_ret_dir.push(\"bin\");\n \n         let build_llvm_config = llvm_config_ret_dir\n             .join(exe(\"llvm-config\", &*builder.config.build));\n@@ -107,8 +95,7 @@ impl Step for Llvm {\n             }\n         }\n \n-        let descriptor = if emscripten { \"Emscripten \" } else { \"\" };\n-        builder.info(&format!(\"Building {}LLVM for {}\", descriptor, target));\n+        builder.info(&format!(\"Building LLVM for {}\", target));\n         let _time = util::timeit(&builder);\n         t!(fs::create_dir_all(&out_dir));\n \n@@ -123,23 +110,15 @@ impl Step for Llvm {\n \n         // NOTE: remember to also update `config.toml.example` when changing the\n         // defaults!\n-        let llvm_targets = if self.emscripten {\n-            \"JSBackend\"\n-        } else {\n-            match builder.config.llvm_targets {\n-                Some(ref s) => s,\n-                None => \"AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n-                         Sparc;SystemZ;WebAssembly;X86\",\n-            }\n+        let llvm_targets = match &builder.config.llvm_targets {\n+            Some(s) => s,\n+            None => \"AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;\\\n+                     Sparc;SystemZ;WebAssembly;X86\",\n         };\n \n-        let llvm_exp_targets = if self.emscripten {\n-            \"\"\n-        } else {\n-            match builder.config.llvm_experimental_targets {\n-                Some(ref s) => s,\n-                None => \"\",\n-            }\n+        let llvm_exp_targets = match builder.config.llvm_experimental_targets {\n+            Some(ref s) => s,\n+            None => \"\",\n         };\n \n         let assertions = if builder.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n@@ -163,25 +142,23 @@ impl Step for Llvm {\n            .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target);\n \n-        if builder.config.llvm_thin_lto && !emscripten {\n+        if builder.config.llvm_thin_lto {\n             cfg.define(\"LLVM_ENABLE_LTO\", \"Thin\");\n             if !target.contains(\"apple\") {\n                cfg.define(\"LLVM_ENABLE_LLD\", \"ON\");\n             }\n         }\n \n-        let want_lldb = builder.config.lldb_enabled && !self.emscripten;\n-\n         // This setting makes the LLVM tools link to the dynamic LLVM library,\n         // which saves both memory during parallel links and overall disk space\n         // for the tools. We don't do this on every platform as it doesn't work\n         // equally well everywhere.\n-        if builder.llvm_link_tools_dynamically(target) && !emscripten {\n+        if builder.llvm_link_tools_dynamically(target) {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n         // For distribution we want the LLVM tools to be *statically* linked to libstdc++\n-        if builder.config.llvm_tools_enabled || want_lldb {\n+        if builder.config.llvm_tools_enabled || builder.config.lldb_enabled {\n             if !target.contains(\"windows\") {\n                 if target.contains(\"apple\") {\n                     cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-static-libstdc++\");\n@@ -209,7 +186,7 @@ impl Step for Llvm {\n             enabled_llvm_projects.push(\"compiler-rt\");\n         }\n \n-        if want_lldb {\n+        if builder.config.lldb_enabled {\n             enabled_llvm_projects.push(\"clang\");\n             enabled_llvm_projects.push(\"lldb\");\n             // For the time being, disable code signing.\n@@ -234,10 +211,9 @@ impl Step for Llvm {\n         }\n \n         // http://llvm.org/docs/HowToCrossCompileLLVM.html\n-        if target != builder.config.build && !emscripten {\n+        if target != builder.config.build {\n             builder.ensure(Llvm {\n                 target: builder.config.build,\n-                emscripten: false,\n             });\n             // FIXME: if the llvm root for the build triple is overridden then we\n             //        should use llvm-tblgen from there, also should verify that it\n@@ -481,7 +457,6 @@ impl Step for Lld {\n \n         let llvm_config = builder.ensure(Llvm {\n             target: self.target,\n-            emscripten: false,\n         });\n \n         let out_dir = builder.lld_out(target);"}, {"sha": "7ed67c6c7c5d528eb9c364c9a689870f3a3b1b0d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -1163,7 +1163,7 @@ impl Step for Compiletest {\n                     }).to_string()\n             })\n         };\n-        let lldb_exe = if builder.config.lldb_enabled && !target.contains(\"emscripten\") {\n+        let lldb_exe = if builder.config.lldb_enabled {\n             // Test against the lldb that was just built.\n             builder.llvm_out(target).join(\"bin\").join(\"lldb\")\n         } else {\n@@ -1232,7 +1232,6 @@ impl Step for Compiletest {\n         if builder.config.llvm_enabled() {\n             let llvm_config = builder.ensure(native::Llvm {\n                 target: builder.config.build,\n-                emscripten: false,\n             });\n             if !builder.config.dry_run {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));"}, {"sha": "fab3824a20ae3723968d0f018a6c161b7245bfc7", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -139,7 +139,6 @@ ENV RUST_CONFIGURE_ARGS \\\n       --musl-root-aarch64=/musl-aarch64 \\\n       --musl-root-mips=/musl-mips \\\n       --musl-root-mipsel=/musl-mipsel \\\n-      --enable-emscripten \\\n       --disable-docs\n \n ENV SCRIPT \\"}, {"sha": "92c6e546a389571c1ab59492104a8bd7afc787d7", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -47,7 +47,7 @@ function fetch_github_commit_archive {\n     rm $cached\n }\n \n-included=\"src/llvm-project src/llvm-emscripten src/doc/book src/doc/rust-by-example\"\n+included=\"src/llvm-project src/doc/book src/doc/rust-by-example\"\n modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n modules=($modules)\n use_git=\"\""}, {"sha": "867bbd22cfbbb1246fa71b32c133979b7f3d69d2", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -12,9 +12,3 @@ test = false\n \n [dependencies]\n rustc_llvm = { path = \"../librustc_llvm\" }\n-\n-[features]\n-# This is used to convince Cargo to separately cache builds of `rustc_codegen_llvm`\n-# when this option is enabled or not. That way we can build two, cache two\n-# artifacts, and have nice speedy rebuilds.\n-emscripten = [\"rustc_llvm/emscripten\"]"}, {"sha": "7f23313edff8beccb3fe44b815714269c5124c15", "filename": "src/llvm-emscripten", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-emscripten?ref=6576f4be5af31a5e61dfc0cf50b7130e6c6dfb35", "patch": "@@ -1 +0,0 @@\n-Subproject commit 7f23313edff8beccb3fe44b815714269c5124c15"}, {"sha": "d9db68ff66efd0969381d710c961eb8e167abdf4", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ffa79589600f515ff2710830c23cd2dce7cb76/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=50ffa79589600f515ff2710830c23cd2dce7cb76", "patch": "@@ -46,7 +46,6 @@ pub mod error_codes_check;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n-        \"src/llvm-emscripten\",\n         \"src/llvm-project\",\n         \"src/stdarch\",\n         \"src/tools/cargo\","}]}