{"sha": "170ad4a0ab3fbfd4c378391aa8229234eab11143", "node_id": "C_kwDOAAsO6NoAKDE3MGFkNGEwYWIzZmJmZDRjMzc4MzkxYWE4MjI5MjM0ZWFiMTExNDM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-07T13:05:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-07T13:05:24Z"}, "message": "Rollup merge of #103986 - compiler-errors:oh-no-bad-block-should-not-have-label, r=lcnr\n\nDon't silently eat label before block in block-like expr\n\nFixes #103983\ncc #92823 (where the regression was introduced)", "tree": {"sha": "51aa116830614ffb206001e001150bf9abb0ad70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51aa116830614ffb206001e001150bf9abb0ad70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/170ad4a0ab3fbfd4c378391aa8229234eab11143", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjaQKUCRBK7hj4Ov3rIwAA3ewIAKeDkzN+e1gZnxTt/gmYpKWE\nWE2oCQ1QWNcxUIp1dg+HOLT8G3CjgzCUizqdfzs5H0yzvXtAQFsxKnr4T24dWMZY\ngj1Hgjn2oFSndNerAtB4YfdyS3HCHVbM2OfarKTIE6YT2Gsm57CcOBmPP6ZZs7Jg\nI+m55ea/DacmuAL3ToDrG9bk+ar2EWfQNu2ds6Xs454dJUxgWzRN8B+ODVVwfgye\nlMmD/u6lfJa9PVkplvZhvV5FIelVJsHfMiwEZjnh7++tzGYf5V3J2huNiDfpCVrC\na7WegZSxkDMv3GZD0L38ZrwXg68/24Nqfo0T9wDorRhWnIHnYBSGJ/U2iLQyP/I=\n=mquV\n-----END PGP SIGNATURE-----\n", "payload": "tree 51aa116830614ffb206001e001150bf9abb0ad70\nparent 408b8cf7c4890ec2de3b3edb6c383886a241bdd0\nparent 4e7fc663cc674a33cc7078096ad1b0269618c456\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667826324 +0530\ncommitter GitHub <noreply@github.com> 1667826324 +0530\n\nRollup merge of #103986 - compiler-errors:oh-no-bad-block-should-not-have-label, r=lcnr\n\nDon't silently eat label before block in block-like expr\n\nFixes #103983\ncc #92823 (where the regression was introduced)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/170ad4a0ab3fbfd4c378391aa8229234eab11143", "html_url": "https://github.com/rust-lang/rust/commit/170ad4a0ab3fbfd4c378391aa8229234eab11143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/170ad4a0ab3fbfd4c378391aa8229234eab11143/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408b8cf7c4890ec2de3b3edb6c383886a241bdd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/408b8cf7c4890ec2de3b3edb6c383886a241bdd0", "html_url": "https://github.com/rust-lang/rust/commit/408b8cf7c4890ec2de3b3edb6c383886a241bdd0"}, {"sha": "4e7fc663cc674a33cc7078096ad1b0269618c456", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7fc663cc674a33cc7078096ad1b0269618c456", "html_url": "https://github.com/rust-lang/rust/commit/4e7fc663cc674a33cc7078096ad1b0269618c456"}], "stats": {"total": 231, "additions": 227, "deletions": 4}, "files": [{"sha": "c609aa93da3a75b0d9cb50637ef85e18dce8bfe5", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/170ad4a0ab3fbfd4c378391aa8229234eab11143/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170ad4a0ab3fbfd4c378391aa8229234eab11143/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=170ad4a0ab3fbfd4c378391aa8229234eab11143", "patch": "@@ -2468,11 +2468,15 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(crate) fn maybe_recover_unexpected_block_label(&mut self) -> bool {\n-        let Some(label) = self.eat_label().filter(|_| {\n-            self.eat(&token::Colon) && self.token.kind == token::OpenDelim(Delimiter::Brace)\n-        }) else {\n+        // Check for `'a : {`\n+        if !(self.check_lifetime()\n+            && self.look_ahead(1, |tok| tok.kind == token::Colon)\n+            && self.look_ahead(2, |tok| tok.kind == token::OpenDelim(Delimiter::Brace)))\n+        {\n             return false;\n-        };\n+        }\n+        let label = self.eat_label().expect(\"just checked if a label exists\");\n+        self.bump(); // eat `:`\n         let span = label.ident.span.to(self.prev_token.span);\n         let mut err = self.struct_span_err(span, \"block label not supported here\");\n         err.span_label(span, \"not supported here\");"}, {"sha": "55f3f8f9f5f036fadf7ddd210bd62a75fbede024", "filename": "src/test/ui/parser/label-after-block-like.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/170ad4a0ab3fbfd4c378391aa8229234eab11143/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170ad4a0ab3fbfd4c378391aa8229234eab11143/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.rs?ref=170ad4a0ab3fbfd4c378391aa8229234eab11143", "patch": "@@ -0,0 +1,43 @@\n+fn a() {\n+    if let () = () 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn b() {\n+    if true 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn c() {\n+    loop 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn d() {\n+    while true 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn e() {\n+    while let () = () 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn f() {\n+    for _ in 0..0 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn g() {\n+    unsafe 'a {}\n+    //~^ ERROR labeled expression must be followed by `:`\n+    //~| ERROR expected `{`, found `'a`\n+}\n+\n+fn main() {}"}, {"sha": "8ff50b124b32bc2c5282a7d08501a48222b2ed46", "filename": "src/test/ui/parser/label-after-block-like.stderr", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/170ad4a0ab3fbfd4c378391aa8229234eab11143/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/170ad4a0ab3fbfd4c378391aa8229234eab11143/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabel-after-block-like.stderr?ref=170ad4a0ab3fbfd4c378391aa8229234eab11143", "patch": "@@ -0,0 +1,176 @@\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:2:20\n+   |\n+LL |     if let () = () 'a {}\n+   |                    ---^^\n+   |                    | |\n+   |                    | help: add `:` after the label\n+   |                    the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:2:20\n+   |\n+LL |     if let () = () 'a {}\n+   |                    ^^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/label-after-block-like.rs:2:8\n+   |\n+LL |     if let () = () 'a {}\n+   |        ^^^^^^^^^^^\n+help: try placing this code inside a block\n+   |\n+LL |     if let () = () { 'a {} }\n+   |                    +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:8:13\n+   |\n+LL |     if true 'a {}\n+   |             ---^^\n+   |             | |\n+   |             | help: add `:` after the label\n+   |             the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:8:13\n+   |\n+LL |     if true 'a {}\n+   |             ^^ expected `{`\n+   |\n+note: the `if` expression is missing a block after this condition\n+  --> $DIR/label-after-block-like.rs:8:8\n+   |\n+LL |     if true 'a {}\n+   |        ^^^^\n+help: try placing this code inside a block\n+   |\n+LL |     if true { 'a {} }\n+   |             +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:14:10\n+   |\n+LL |     loop 'a {}\n+   |          ---^^\n+   |          | |\n+   |          | help: add `:` after the label\n+   |          the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:14:10\n+   |\n+LL |     loop 'a {}\n+   |     ---- ^^ expected `{`\n+   |     |\n+   |     while parsing this `loop` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     loop { 'a {} }\n+   |          +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:20:16\n+   |\n+LL |     while true 'a {}\n+   |                ---^^\n+   |                | |\n+   |                | help: add `:` after the label\n+   |                the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:20:16\n+   |\n+LL |     while true 'a {}\n+   |     ----- ---- ^^ expected `{`\n+   |     |     |\n+   |     |     this `while` condition successfully parsed\n+   |     while parsing the body of this `while` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     while true { 'a {} }\n+   |                +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:26:23\n+   |\n+LL |     while let () = () 'a {}\n+   |                       ---^^\n+   |                       | |\n+   |                       | help: add `:` after the label\n+   |                       the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:26:23\n+   |\n+LL |     while let () = () 'a {}\n+   |     ----- ----------- ^^ expected `{`\n+   |     |     |\n+   |     |     this `while` condition successfully parsed\n+   |     while parsing the body of this `while` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     while let () = () { 'a {} }\n+   |                       +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:32:19\n+   |\n+LL |     for _ in 0..0 'a {}\n+   |                   ---^^\n+   |                   | |\n+   |                   | help: add `:` after the label\n+   |                   the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:32:19\n+   |\n+LL |     for _ in 0..0 'a {}\n+   |                   ^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     for _ in 0..0 { 'a {} }\n+   |                   +       +\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/label-after-block-like.rs:38:12\n+   |\n+LL |     unsafe 'a {}\n+   |            ---^^\n+   |            | |\n+   |            | help: add `:` after the label\n+   |            the label\n+   |\n+   = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n+\n+error: expected `{`, found `'a`\n+  --> $DIR/label-after-block-like.rs:38:12\n+   |\n+LL |     unsafe 'a {}\n+   |     ------ ^^ expected `{`\n+   |     |\n+   |     while parsing this `unsafe` expression\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     unsafe { 'a {} }\n+   |            +       +\n+\n+error: aborting due to 14 previous errors\n+"}]}