{"sha": "454ae9fb8b34917eedf1bfbc482aecd4c10e56bc", "node_id": "C_kwDOAAsO6NoAKDQ1NGFlOWZiOGIzNDkxN2VlZGYxYmZiYzQ4MmFlY2Q0YzEwZTU2YmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-12T21:29:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-12T21:29:49Z"}, "message": "Rollup merge of #107954 - RalfJung:tree-borrows-fix, r=m-ou-se\n\navoid mixing accesses of ptrs derived from a mutable ref and parent ptrs\n\n``@Vanille-N`` is working on a successor for Stacked Borrows. It will mostly accept strictly more code than Stacked Borrows did, with one exception: the following pattern no longer works.\n```rust\nlet mut root = 6u8;\nlet mref = &mut root;\nlet ptr = mref as *mut u8;\n*ptr = 0; // Write\nassert_eq!(root, 0); // Parent Read\n*ptr = 0; // Attempted Write\n```\nThis worked in Stacked Borrows kind of by accident: when doing the \"parent read\", under SB we Disable `mref`, but the raw ptrs derived from it remain usable. The fact that we can still use the \"children\" of a reference that is no longer usable is quite nasty and leads to some undesirable effects (in particular it is the major blocker for resolving https://github.com/rust-lang/unsafe-code-guidelines/issues/257). So in Tree Borrows we no longer do that; instead, reading from `root` makes `mref` and all its children read-only.\n\nDue to other improvements in Tree Borrows, the entire Miri test suite still passes with this new behavior, and even the entire libcore and liballoc test suite, except for these 2 cases this PR fixes. Both of these involve code where the programmer wrote `&mut` but then used pointers derived from that reference in ways that alias with the parent pointer, which arguably is violating uniqueness. They are fixed by properly using raw pointers throughout.", "tree": {"sha": "8609caecd9916c861ffe70da05a1a638c08d5535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8609caecd9916c861ffe70da05a1a638c08d5535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6VpNCRBK7hj4Ov3rIwAA/KgIAKlSBEaxb2I7WsnhbrYqvKug\n+JGa6UEUBT3hLhK3g2eiOEMeNI4rrTG/PZaZWSOUZ4aUS5Vf8oRfrA54MsVx/Slr\ncbJFqKlNcniU6dnDEQ+v1BXeJor74B1IBXVKa2BeCDPk/tO6kIoyeJsaXry9hWld\noI4yyLrji3RjHHLdGCJ7LXcJAdu601oAAd+vGMi6tQO+k/1Y5O9mgy40cQAz0xom\noY87YiAAskvAUMkr8u2kBFim2YNLYzclbTkDEqB3wGoHsA80yPaOgkUj5vmB+etM\nKl2UCqUl8XZyCSyZCXlm0N6Ih4MHXA1f9F+J79dqlgdRWvqE5P9Vl1/6YlUwDIA=\n=3/Q8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8609caecd9916c861ffe70da05a1a638c08d5535\nparent 4b91b673b7d9aa131acc4ebdfcc6d5119f3f6c79\nparent c3a2e7a8093e54569516cac8ae5905089cf955f5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676237389 +0100\ncommitter GitHub <noreply@github.com> 1676237389 +0100\n\nRollup merge of #107954 - RalfJung:tree-borrows-fix, r=m-ou-se\n\navoid mixing accesses of ptrs derived from a mutable ref and parent ptrs\n\n``@Vanille-N`` is working on a successor for Stacked Borrows. It will mostly accept strictly more code than Stacked Borrows did, with one exception: the following pattern no longer works.\n```rust\nlet mut root = 6u8;\nlet mref = &mut root;\nlet ptr = mref as *mut u8;\n*ptr = 0; // Write\nassert_eq!(root, 0); // Parent Read\n*ptr = 0; // Attempted Write\n```\nThis worked in Stacked Borrows kind of by accident: when doing the \"parent read\", under SB we Disable `mref`, but the raw ptrs derived from it remain usable. The fact that we can still use the \"children\" of a reference that is no longer usable is quite nasty and leads to some undesirable effects (in particular it is the major blocker for resolving https://github.com/rust-lang/unsafe-code-guidelines/issues/257). So in Tree Borrows we no longer do that; instead, reading from `root` makes `mref` and all its children read-only.\n\nDue to other improvements in Tree Borrows, the entire Miri test suite still passes with this new behavior, and even the entire libcore and liballoc test suite, except for these 2 cases this PR fixes. Both of these involve code where the programmer wrote `&mut` but then used pointers derived from that reference in ways that alias with the parent pointer, which arguably is violating uniqueness. They are fixed by properly using raw pointers throughout.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc", "html_url": "https://github.com/rust-lang/rust/commit/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b91b673b7d9aa131acc4ebdfcc6d5119f3f6c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b91b673b7d9aa131acc4ebdfcc6d5119f3f6c79", "html_url": "https://github.com/rust-lang/rust/commit/4b91b673b7d9aa131acc4ebdfcc6d5119f3f6c79"}, {"sha": "c3a2e7a8093e54569516cac8ae5905089cf955f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a2e7a8093e54569516cac8ae5905089cf955f5", "html_url": "https://github.com/rust-lang/rust/commit/c3a2e7a8093e54569516cac8ae5905089cf955f5"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c02cd99cc4477dd37c1999d35b9a8cb9da5021c9", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454ae9fb8b34917eedf1bfbc482aecd4c10e56bc/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=454ae9fb8b34917eedf1bfbc482aecd4c10e56bc", "patch": "@@ -25,7 +25,7 @@ fn test() {\n             snd: isize,\n         }\n         let mut p = Pair { fst: 10, snd: 20 };\n-        let pptr: *mut Pair = &mut p;\n+        let pptr: *mut Pair = addr_of_mut!(p);\n         let iptr: *mut isize = pptr as *mut isize;\n         assert_eq!(*iptr, 10);\n         *iptr = 30;\n@@ -1070,8 +1070,8 @@ fn swap_copy_untyped() {\n     let mut x = 5u8;\n     let mut y = 6u8;\n \n-    let ptr1 = &mut x as *mut u8 as *mut bool;\n-    let ptr2 = &mut y as *mut u8 as *mut bool;\n+    let ptr1 = addr_of_mut!(x).cast::<bool>();\n+    let ptr2 = addr_of_mut!(y).cast::<bool>();\n \n     unsafe {\n         ptr::swap(ptr1, ptr2);"}]}