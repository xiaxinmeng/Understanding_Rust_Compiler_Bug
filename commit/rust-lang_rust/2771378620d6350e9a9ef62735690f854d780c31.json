{"sha": "2771378620d6350e9a9ef62735690f854d780c31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzEzNzg2MjBkNjM1MGU5YTllZjYyNzM1NjkwZjg1NGQ3ODBjMzE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-23T07:25:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-23T07:25:08Z"}, "message": "Merge pull request #2136 from ykrivopalov/identity_op_fixing\n\nIdentity/erasing operation lints", "tree": {"sha": "50d29841b0dabdbbd86f179f4c252f81496607c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d29841b0dabdbbd86f179f4c252f81496607c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2771378620d6350e9a9ef62735690f854d780c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2771378620d6350e9a9ef62735690f854d780c31", "html_url": "https://github.com/rust-lang/rust/commit/2771378620d6350e9a9ef62735690f854d780c31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2771378620d6350e9a9ef62735690f854d780c31/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96639f23ac5c361370cb900fd924f34d2af60a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96639f23ac5c361370cb900fd924f34d2af60a8", "html_url": "https://github.com/rust-lang/rust/commit/b96639f23ac5c361370cb900fd924f34d2af60a8"}, {"sha": "7b16f4d7ff772b2885a4d184ef29af4edc07a144", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b16f4d7ff772b2885a4d184ef29af4edc07a144", "html_url": "https://github.com/rust-lang/rust/commit/7b16f4d7ff772b2885a4d184ef29af4edc07a144"}], "stats": {"total": 145, "additions": 139, "deletions": 6}, "files": [{"sha": "dd8f029501f5a77b5812a508f2cb59c8b35cf9c2", "filename": "clippy_lints/src/erasing_op.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -0,0 +1,63 @@\n+use consts::{constant_simple, Constant};\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::codemap::Span;\n+use utils::{in_macro, span_lint};\n+\n+/// **What it does:** Checks for erasing operations, e.g. `x * 0`.\n+///\n+/// **Why is this bad?** The whole expression can be replaced by zero.\n+/// This is most likely not the intended outcome and should probably be\n+/// corrected\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// 0 / x; 0 * x; x & 0\n+/// ```\n+declare_lint! {\n+    pub ERASING_OP,\n+    Warn,\n+    \"using erasing operations, e.g. `x * 0` or `y & 0`\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ErasingOp;\n+\n+impl LintPass for ErasingOp {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ERASING_OP)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if in_macro(e.span) {\n+            return;\n+        }\n+        if let ExprBinary(ref cmp, ref left, ref right) = e.node {\n+            match cmp.node {\n+                BiMul | BiBitAnd => {\n+                    check(cx, left, e.span);\n+                    check(cx, right, e.span);\n+                },\n+                BiDiv => check(cx, left, e.span),\n+                _ => (),\n+            }\n+        }\n+    }\n+}\n+\n+fn check(cx: &LateContext, e: &Expr, span: Span) {\n+    if let Some(Constant::Int(v)) = constant_simple(cx, e) {\n+        if v.to_u128_unchecked() == 0 {\n+            span_lint(\n+                cx,\n+                ERASING_OP,\n+                span,\n+                \"this operation will always return zero. This is likely not the intended outcome\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "85dfb6b4ad092e578c582e30a2fb03e6f9b40ed5", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -1,9 +1,9 @@\n use consts::{constant_simple, Constant};\n-use rustc::lint::*;\n use rustc::hir::*;\n+use rustc::lint::*;\n+use rustc_const_math::ConstInt;\n use syntax::codemap::Span;\n use utils::{in_macro, snippet, span_lint};\n-use syntax::attr::IntType::{SignedInt, UnsignedInt};\n \n /// **What it does:** Checks for identity operations, e.g. `x + 0`.\n ///\n@@ -58,15 +58,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     }\n }\n \n+fn all_ones(v: &ConstInt) -> bool {\n+    match *v {\n+        ConstInt::I8(i) => i == !0,\n+        ConstInt::I16(i) => i == !0,\n+        ConstInt::I32(i) => i == !0,\n+        ConstInt::I64(i) => i == !0,\n+        ConstInt::I128(i) => i == !0,\n+        ConstInt::U8(i) => i == !0,\n+        ConstInt::U16(i) => i == !0,\n+        ConstInt::U32(i) => i == !0,\n+        ConstInt::U64(i) => i == !0,\n+        ConstInt::U128(i) => i == !0,\n+        _ => false\n+    }\n+}\n+\n #[allow(cast_possible_wrap)]\n fn check(cx: &LateContext, e: &Expr, m: i8, span: Span, arg: Span) {\n     if let Some(Constant::Int(v)) = constant_simple(cx, e) {\n         if match m {\n             0 => v.to_u128_unchecked() == 0,\n-            -1 => match v.int_type() {\n-                SignedInt(_) => (v.to_u128_unchecked() as i128 == -1),\n-                UnsignedInt(_) => false,\n-            },\n+            -1 => all_ones(&v),\n             1 => v.to_u128_unchecked() == 1,\n             _ => unreachable!(),\n         } {"}, {"sha": "27ef37dd00f92f3de530e1b3f7f2abf0e74ef038", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -88,6 +88,7 @@ pub mod entry;\n pub mod enum_clike;\n pub mod enum_glob_use;\n pub mod enum_variants;\n+pub mod erasing_op;\n pub mod eq_op;\n pub mod escape;\n pub mod eta_reduction;\n@@ -253,6 +254,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box needless_continue::NeedlessContinue);\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n+    reg.register_late_lint_pass(box erasing_op::ErasingOp);\n     reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatements);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n     reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);"}, {"sha": "39320bb9c30b418c651b996ae682764651841c56", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -6,6 +6,14 @@ error: &-masking with zero\n    |\n    = note: `-D bad-bit-mask` implied by `-D warnings`\n \n+error: this operation will always return zero. This is likely not the intended outcome\n+  --> $DIR/bit_masks.rs:12:5\n+   |\n+12 |     x & 0 == 0;\n+   |     ^^^^^\n+   |\n+   = note: `-D erasing-op` implied by `-D warnings`\n+\n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:15:5\n    |\n@@ -48,6 +56,12 @@ error: &-masking with zero\n 35 |     0 & x == 0;\n    |     ^^^^^^^^^^\n \n+error: this operation will always return zero. This is likely not the intended outcome\n+  --> $DIR/bit_masks.rs:35:5\n+   |\n+35 |     0 & x == 0;\n+   |     ^^^^^\n+\n error: incompatible bit mask: `_ | 2` will always be higher than `1`\n   --> $DIR/bit_masks.rs:39:5\n    |"}, {"sha": "e5143146f2666b0bff6c5f5e8b852f4009936bcc", "filename": "tests/ui/erasing_op.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.rs?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -0,0 +1,12 @@\n+\n+\n+\n+#[allow(no_effect)]\n+#[warn(erasing_op)]\n+fn main() {\n+    let x: u8 = 0;\n+\n+    x * 0;\n+    0 & x;\n+    0 / x;\n+}"}, {"sha": "8a05d2c251d136ee77014c2a07fbdf74b5ee1329", "filename": "tests/ui/erasing_op.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Ferasing_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Ferasing_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.stderr?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -0,0 +1,20 @@\n+error: this operation will always return zero. This is likely not the intended outcome\n+ --> $DIR/erasing_op.rs:9:5\n+  |\n+9 |     x * 0;\n+  |     ^^^^^\n+  |\n+  = note: `-D erasing-op` implied by `-D warnings`\n+\n+error: this operation will always return zero. This is likely not the intended outcome\n+  --> $DIR/erasing_op.rs:10:5\n+   |\n+10 |     0 & x;\n+   |     ^^^^^\n+\n+error: this operation will always return zero. This is likely not the intended outcome\n+  --> $DIR/erasing_op.rs:11:5\n+   |\n+11 |     0 / x;\n+   |     ^^^^^\n+"}, {"sha": "1ed9f974d436c2b4c0f3e863755b137e41a80229", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -27,4 +27,7 @@ fn main() {\n \n     x & NEG_ONE;  //no error, as we skip lookups (for now)\n     -1 & x;\n+\n+    let u : u8 = 0;\n+    u & 255;\n }"}, {"sha": "c1ce8d2ec4cd5c616aa620408d67ea3243acb985", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2771378620d6350e9a9ef62735690f854d780c31/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=2771378620d6350e9a9ef62735690f854d780c31", "patch": "@@ -42,3 +42,9 @@ error: the operation is ineffective. Consider reducing it to `x`\n 29 |     -1 & x;\n    |     ^^^^^^\n \n+error: the operation is ineffective. Consider reducing it to `u`\n+  --> $DIR/identity_op.rs:32:5\n+   |\n+32 |     u & 255;\n+   |     ^^^^^^^\n+"}]}