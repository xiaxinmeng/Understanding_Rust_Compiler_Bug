{"sha": "df5c11a069fbee34c3d2cae8b7b9c8e026b63d39", "node_id": "C_kwDOAAsO6NoAKGRmNWMxMWEwNjlmYmVlMzRjM2QyY2FlOGI3YjljOGUwMjZiNjNkMzk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:15:23Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:15:23Z"}, "message": "Do not use `local_def_id` in `node_to_string`.", "tree": {"sha": "280f2267214e322a68a928d4b63b6db88fd1129c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/280f2267214e322a68a928d4b63b6db88fd1129c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39", "html_url": "https://github.com/rust-lang/rust/commit/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d20aca98360f4376f0947d623028ac963a23948", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d20aca98360f4376f0947d623028ac963a23948", "html_url": "https://github.com/rust-lang/rust/commit/9d20aca98360f4376f0947d623028ac963a23948"}], "stats": {"total": 54, "additions": 24, "deletions": 30}, "files": [{"sha": "e14ea7be9cfd9349a84ecf8d66377f986061b374", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5c11a069fbee34c3d2cae8b7b9c8e026b63d39/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=df5c11a069fbee34c3d2cae8b7b9c8e026b63d39", "patch": "@@ -1198,20 +1198,7 @@ fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n     let id_str = format!(\" (hir_id={})\", id);\n \n-    let path_str = || {\n-        // This functionality is used for debugging, try to use `TyCtxt` to get\n-        // the user-friendly path, otherwise fall back to stringifying `DefPath`.\n-        crate::ty::tls::with_opt(|tcx| {\n-            if let Some(tcx) = tcx {\n-                let def_id = map.local_def_id(id);\n-                tcx.def_path_str(def_id.to_def_id())\n-            } else if let Some(path) = map.def_path_from_hir_id(id) {\n-                path.data.into_iter().map(|elem| elem.to_string()).collect::<Vec<_>>().join(\"::\")\n-            } else {\n-                String::from(\"<missing path>\")\n-            }\n-        })\n-    };\n+    let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id.to_def_id());\n \n     let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n     let node_str = |prefix| format!(\"{} {}{}\", prefix, span_str(), id_str);\n@@ -1243,32 +1230,33 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::TraitAlias(..) => \"trait alias\",\n                 ItemKind::Impl { .. } => \"impl\",\n             };\n-            format!(\"{} {}{}\", item_str, path_str(), id_str)\n+            format!(\"{} {}{}\", item_str, path_str(item.owner_id.def_id), id_str)\n+        }\n+        Some(Node::ForeignItem(item)) => {\n+            format!(\"foreign item {}{}\", path_str(item.owner_id.def_id), id_str)\n+        }\n+        Some(Node::ImplItem(ii)) => {\n+            let kind = match ii.kind {\n+                ImplItemKind::Const(..) => \"assoc const\",\n+                ImplItemKind::Fn(..) => \"method\",\n+                ImplItemKind::Type(_) => \"assoc type\",\n+            };\n+            format!(\"{} {} in {}{}\", kind, ii.ident, path_str(ii.owner_id.def_id), id_str)\n         }\n-        Some(Node::ForeignItem(_)) => format!(\"foreign item {}{}\", path_str(), id_str),\n-        Some(Node::ImplItem(ii)) => match ii.kind {\n-            ImplItemKind::Const(..) => {\n-                format!(\"assoc const {} in {}{}\", ii.ident, path_str(), id_str)\n-            }\n-            ImplItemKind::Fn(..) => format!(\"method {} in {}{}\", ii.ident, path_str(), id_str),\n-            ImplItemKind::Type(_) => {\n-                format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n-            }\n-        },\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n                 TraitItemKind::Const(..) => \"assoc constant\",\n                 TraitItemKind::Fn(..) => \"trait method\",\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n \n-            format!(\"{} {} in {}{}\", kind, ti.ident, path_str(), id_str)\n+            format!(\"{} {} in {}{}\", kind, ti.ident, path_str(ti.owner_id.def_id), id_str)\n         }\n         Some(Node::Variant(ref variant)) => {\n-            format!(\"variant {} in {}{}\", variant.ident, path_str(), id_str)\n+            format!(\"variant {} in {}{}\", variant.ident, path_str(variant.def_id), id_str)\n         }\n         Some(Node::Field(ref field)) => {\n-            format!(\"field {} in {}{}\", field.ident, path_str(), id_str)\n+            format!(\"field {} in {}{}\", field.ident, path_str(field.def_id), id_str)\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n@@ -1285,9 +1273,15 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Block(_)) => node_str(\"block\"),\n         Some(Node::Infer(_)) => node_str(\"infer\"),\n         Some(Node::Local(_)) => node_str(\"local\"),\n-        Some(Node::Ctor(..)) => format!(\"ctor {}{}\", path_str(), id_str),\n+        Some(Node::Ctor(ctor)) => format!(\n+            \"ctor {}{}\",\n+            ctor.ctor_def_id().map_or(\"<missing path>\".into(), |def_id| path_str(def_id)),\n+            id_str\n+        ),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n-        Some(Node::GenericParam(ref param)) => format!(\"generic_param {:?}{}\", param, id_str),\n+        Some(Node::GenericParam(ref param)) => {\n+            format!(\"generic_param {}{}\", path_str(param.def_id), id_str)\n+        }\n         Some(Node::Crate(..)) => String::from(\"root_crate\"),\n         None => format!(\"unknown node{}\", id_str),\n     }"}]}