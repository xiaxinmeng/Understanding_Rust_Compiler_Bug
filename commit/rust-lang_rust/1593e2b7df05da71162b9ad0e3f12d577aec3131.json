{"sha": "1593e2b7df05da71162b9ad0e3f12d577aec3131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTNlMmI3ZGYwNWRhNzExNjJiOWFkMGUzZjEyZDU3N2FlYzMxMzE=", "commit": {"author": {"name": "main()", "email": "main@ehvag.de", "date": "2020-05-04T13:53:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T13:53:02Z"}, "message": "Add remove_current_as_list to LinkedList's CursorMut\n\nThe `remove_current` method only returns the inner `T` and deallocates the list node. This is unnecessary for move operations, where the element is going to be linked back into this (or even a different) `LinkedList`. The `remove_current_as_list` method avoids this by returning the unlinked list node as a new single-element `LinkedList` structure .", "tree": {"sha": "39f4eb8ea619a895d7c477fe03290a184e2b735c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f4eb8ea619a895d7c477fe03290a184e2b735c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1593e2b7df05da71162b9ad0e3f12d577aec3131", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesB4+CRBK7hj4Ov3rIwAAdHIIAE0MDMIaMU6GxHmR6CwEJGLi\n7EJk/hzX4vUjVqzmw6eyZD7iRw0UJkTn96G37A5nBdUUaUMIW2r4mcbDmxYSCKuO\n9SDjGd3UX01meGpbuJX1VcJAGoGknxnObeTBPVT0kBTsQLCNxgKqc7rpX9RUCK4a\nvlRwpkVMRulKuDWbAWxkYb902g+TIo/kB876M/qQZeGyXmRENGHDTzPxYSXGGh4b\nAgckOonUN1VG2TAI0dxi4HTm+vtwlgvp4j/GaZqlpfC1YIX2Bd1jAxs0NaKaDbX4\nXNkPXNRo2x8158cleO/LSwuz1yq+ZLw89j5WDF98ZToZpQr68P0p8uKVFmiJeGk=\n=Q76i\n-----END PGP SIGNATURE-----\n", "payload": "tree 39f4eb8ea619a895d7c477fe03290a184e2b735c\nparent 6318d24ad8440fa30428b405be1174478e9536e3\nauthor main() <main@ehvag.de> 1588600382 +0200\ncommitter GitHub <noreply@github.com> 1588600382 +0200\n\nAdd remove_current_as_list to LinkedList's CursorMut\n\nThe `remove_current` method only returns the inner `T` and deallocates the list node. This is unnecessary for move operations, where the element is going to be linked back into this (or even a different) `LinkedList`. The `remove_current_as_list` method avoids this by returning the unlinked list node as a new single-element `LinkedList` structure ."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1593e2b7df05da71162b9ad0e3f12d577aec3131", "html_url": "https://github.com/rust-lang/rust/commit/1593e2b7df05da71162b9ad0e3f12d577aec3131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1593e2b7df05da71162b9ad0e3f12d577aec3131/comments", "author": {"login": "main--", "id": 754850, "node_id": "MDQ6VXNlcjc1NDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/754850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/main--", "html_url": "https://github.com/main--", "followers_url": "https://api.github.com/users/main--/followers", "following_url": "https://api.github.com/users/main--/following{/other_user}", "gists_url": "https://api.github.com/users/main--/gists{/gist_id}", "starred_url": "https://api.github.com/users/main--/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/main--/subscriptions", "organizations_url": "https://api.github.com/users/main--/orgs", "repos_url": "https://api.github.com/users/main--/repos", "events_url": "https://api.github.com/users/main--/events{/privacy}", "received_events_url": "https://api.github.com/users/main--/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6318d24ad8440fa30428b405be1174478e9536e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3", "html_url": "https://github.com/rust-lang/rust/commit/6318d24ad8440fa30428b405be1174478e9536e3"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "952e5317840a1d768eb87d9bcdb60069a4cabe84", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1593e2b7df05da71162b9ad0e3f12d577aec3131/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1593e2b7df05da71162b9ad0e3f12d577aec3131/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=1593e2b7df05da71162b9ad0e3f12d577aec3131", "patch": "@@ -1496,6 +1496,31 @@ impl<'a, T> CursorMut<'a, T> {\n         }\n     }\n \n+    /// Removes the current element from the `LinkedList` without deallocating the list node.\n+    ///\n+    /// The node that was removed is returned as a new `LinkedList` containing only this node.\n+    /// The cursor is moved to point to the next element in the current `LinkedList`.\n+    ///\n+    /// If the cursor is currently pointing to the \"ghost\" non-element then no element\n+    /// is removed and `None` is returned.\n+    #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n+    pub fn remove_current_as_list(&mut self) -> Option<LinkedList<T>> {\n+        let unlinked_node = self.current?;\n+        unsafe {\n+            self.current = unlinked_node.as_ref().next;\n+            self.list.unlink_node(unlinked_node);\n+\n+            unlinked_node.as_mut().prev = None;\n+            unlinked_node.as_mut().next = None;\n+            Some(LinkedList {\n+                head: Some(unlinked_node),\n+                tail: Some(unlinked_node),\n+                len: 1,\n+                marker: PhantomData,\n+            })\n+        }\n+    }\n+\n     /// Inserts the elements from the given `LinkedList` after the current one.\n     ///\n     /// If the cursor is pointing at the \"ghost\" non-element then the new elements are"}]}