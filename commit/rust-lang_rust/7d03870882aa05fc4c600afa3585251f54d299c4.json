{"sha": "7d03870882aa05fc4c600afa3585251f54d299c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDM4NzA4ODJhYTA1ZmM0YzYwMGFmYTM1ODUyNTFmNTRkMjk5YzQ=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2020-10-13T18:25:19Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2021-01-06T14:13:38Z"}, "message": "Implement suggestions from code review.", "tree": {"sha": "8e1e0a5da86922454f07242b78d996f039b3fd46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1e0a5da86922454f07242b78d996f039b3fd46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d03870882aa05fc4c600afa3585251f54d299c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d03870882aa05fc4c600afa3585251f54d299c4", "html_url": "https://github.com/rust-lang/rust/commit/7d03870882aa05fc4c600afa3585251f54d299c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d03870882aa05fc4c600afa3585251f54d299c4/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bee80210d1e155b5502e51b693b6c478ed29efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bee80210d1e155b5502e51b693b6c478ed29efd", "html_url": "https://github.com/rust-lang/rust/commit/0bee80210d1e155b5502e51b693b6c478ed29efd"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "8b68a2bd65ca880bcfb9f4998dfa2e4ad48af552", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7d03870882aa05fc4c600afa3585251f54d299c4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d03870882aa05fc4c600afa3585251f54d299c4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=7d03870882aa05fc4c600afa3585251f54d299c4", "patch": "@@ -70,35 +70,36 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         );\n         top_level_module.is_crate = true;\n         // Attach the crate's exported macros to the top-level module.\n-        // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s as well\n-        // (_e.g._, `Copy`), these are wrongly bundled in there too, so we need to fix that by\n+        // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s or attributes as\n+        // well (_e.g._, `Copy`), these are wrongly bundled in there too, so we need to fix that by\n         // moving them back to their correct locations.\n         krate.exported_macros.iter().for_each(|def| {\n-            macro_rules! try_some {($($body:tt)*) => ({\n-                fn fn_once<R, F: FnOnce() -> R> (f: F) -> F { f }\n-                fn_once(|| Some({ $($body)* }))()\n-            })}\n-            // In the case of dummy items, some of the following operations may fail. We propagate\n-            // that within a `?`-capturing block, so as to fallback to the basic behavior.\n-            let containing_module_of_def = try_some! {\n+            /// A return value of `None` signifies a fallback to the default behavior (locating\n+            /// the macro at the root of the crate).\n+            fn containing_mod_of_macro<'module, 'hir>(\n+                def: &'_ rustc_hir::MacroDef<'_>,\n+                tcx: TyCtxt<'_>,\n+                top_level_module: &'module mut Module<'hir>,\n+            ) -> Option<&'module mut Module<'hir>> {\n                 // The `def` of a macro in `exported_macros` should correspond to either:\n                 //  - a `#[macro-export] macro_rules!` macro,\n-                //  - a built-in `derive` macro such as the ones in `::core`,\n+                //  - a built-in `derive` (or attribute) macro such as the ones in `::core`,\n                 //  - a `pub macro`.\n                 // Only the last two need to be fixed, thus:\n                 if def.ast.macro_rules {\n                     return None;\n                 }\n-                let macro_parent_module = self.cx.tcx.def_path({\n+                /* Because of #77828 we cannot do the simpler:\n+                let macro_parent_module = tcx.def_path(tcx.parent_module(def.hir_id).to_def_id());\n+                // and instead have to do: */\n+                let macro_parent_module = tcx.def_path({\n                     use rustc_middle::ty::DefIdTree;\n-                    self.cx\n-                        .tcx\n-                        /* Because of #77828 we cannot do the simpler:\n-                        .parent_module(def.hir_id).to_def_id()\n-                        // and instead have to do: */\n-                        .parent(self.cx.tcx.hir().local_def_id(def.hir_id).to_def_id())?\n+                    tcx.parent(tcx.hir().local_def_id(def.hir_id).to_def_id())?\n                 });\n-                let mut cur_mod = &mut top_level_module;\n+                // HACK: rustdoc has no way to lookup `doctree::Module`s by their HirId. Instead,\n+                // lookup the module by its name, by looking at each path segment one at a time.\n+                // WARNING: this will probably break in the presence of re-exports or shadowing.\n+                let mut cur_mod = top_level_module;\n                 for path_segment in macro_parent_module.data {\n                     let path_segment = path_segment.to_string();\n                     cur_mod = cur_mod.mods.iter_mut().find(|module| {\n@@ -108,9 +109,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         )\n                     })?;\n                 }\n-                cur_mod\n-            };\n-            if let Some(module) = containing_module_of_def {\n+                Some(cur_mod)\n+            }\n+\n+            if let Some(module) = containing_mod_of_macro(def, self.cx.tcx, &mut top_level_module) {\n                 &mut module.macros\n             } else {\n                 &mut top_level_module.macros"}, {"sha": "035d2a8c4418ab0734a8695cc594d2ff8cf101fd", "filename": "src/test/rustdoc/macro_pub_in_module.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d03870882aa05fc4c600afa3585251f54d299c4/src%2Ftest%2Frustdoc%2Fmacro_pub_in_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d03870882aa05fc4c600afa3585251f54d299c4/src%2Ftest%2Frustdoc%2Fmacro_pub_in_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_pub_in_module.rs?ref=7d03870882aa05fc4c600afa3585251f54d299c4", "patch": "@@ -1,9 +1,17 @@\n //! See issue #74355\n+#![feature(decl_macro, no_core, rustc_attrs)]\n #![crate_name = \"krate\"]\n-#![feature(decl_macro)]\n+#![no_core]\n \n-// @has krate/some_module/macro.my_macro.html\n-pub mod some_module {\n-    //\n+pub mod inner {\n+    // @has krate/inner/macro.my_macro.html\n     pub macro my_macro() {}\n+\n+    // @has krate/inner/macro.test.html\n+    #[rustc_builtin_macro]\n+    pub macro test($item:item) {}\n+\n+    // @has krate/inner/macro.Clone.html\n+    #[rustc_builtin_macro]\n+    pub macro Clone($item:item) {}\n }"}]}