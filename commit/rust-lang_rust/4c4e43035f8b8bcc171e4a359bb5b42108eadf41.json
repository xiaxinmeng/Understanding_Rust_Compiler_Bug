{"sha": "4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "node_id": "C_kwDOAAsO6NoAKDRjNGU0MzAzNWY4YjhiY2MxNzFlNGEzNTliYjViNDIxMDhlYWRmNDE", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-04T21:33:06Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-02-04T21:41:00Z"}, "message": "Rename `BorrowedFd::borrow_raw_fd` to `BorrowedFd::borrow_raw`.\n\nAlso, rename `BorrowedHandle::borrow_raw_handle` and\n`BorrowedSocket::borrow_raw_socket` to `BorrowedHandle::borrow_raw` and\n`BorrowedSocket::borrow_raw`.\n\nThis is just a minor rename to reduce redundancy in the user code calling\nthese functions, and to eliminate an inessential difference between\n`BorrowedFd` code and `BorrowedHandle`/`BorrowedSocket` code.\n\nWhile here, add a simple test exercising `BorrowedFd::borrow_raw_fd`.", "tree": {"sha": "688140c5dffe06e665c5e4de2f7766159ff8dcdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688140c5dffe06e665c5e4de2f7766159ff8dcdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "html_url": "https://github.com/rust-lang/rust/commit/4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6abb6385b2cb7249f67b9b3ce7522527767dd907", "url": "https://api.github.com/repos/rust-lang/rust/commits/6abb6385b2cb7249f67b9b3ce7522527767dd907", "html_url": "https://github.com/rust-lang/rust/commit/6abb6385b2cb7249f67b9b3ce7522527767dd907"}], "stats": {"total": 87, "additions": 62, "deletions": 25}, "files": [{"sha": "13bb079194fbe06d1ecec28b5a14dfa28f0f2c10", "filename": "library/std/src/os/fd/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs?ref=4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "patch": "@@ -11,3 +11,6 @@ pub mod owned;\n \n // Implementations for `AsRawFd` etc. for network types.\n mod net;\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "1b3739d33f39513e3e5e6df84843989685019c00", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "patch": "@@ -62,7 +62,7 @@ impl BorrowedFd<'_> {\n     /// the returned `BorrowedFd`, and it must not have the value `-1`.\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_fd(fd: RawFd) -> Self {\n+    pub unsafe fn borrow_raw(fd: RawFd) -> Self {\n         assert_ne!(fd, u32::MAX as RawFd);\n         // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n         unsafe { Self { fd, _phantom: PhantomData } }\n@@ -215,7 +215,7 @@ impl AsFd for OwnedFd {\n         // Safety: `OwnedFd` and `BorrowedFd` have the same validity\n         // invariants, and the `BorrowdFd` is bounded by the lifetime\n         // of `&self`.\n-        unsafe { BorrowedFd::borrow_raw_fd(self.as_raw_fd()) }\n+        unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }\n     }\n }\n "}, {"sha": "be920a2b38c65a8598e60170851c363b0d5273dc", "filename": "library/std/src/os/fd/tests.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs?ref=4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "patch": "@@ -0,0 +1,34 @@\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+#[test]\n+fn test_raw_fd() {\n+    #[cfg(unix)]\n+    use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd, BorrowedFd};\n+    #[cfg(target_os = \"wasi\")]\n+    use crate::os::wasi::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd, BorrowedFd};\n+\n+    let raw_fd: RawFd = crate::io::stdin().as_raw_fd();\n+\n+    let stdin_as_file = unsafe { crate::fs::File::from_raw_fd(raw_fd) };\n+    assert_eq!(stdin_as_file.as_raw_fd(), raw_fd);\n+    assert_eq!(unsafe { BorrowedFd::borrow_raw(raw_fd).as_raw_fd() }, raw_fd);\n+    assert_eq!(stdin_as_file.into_raw_fd(), 0);\n+}\n+\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+#[test]\n+fn test_fd() {\n+    #[cfg(unix)]\n+    use crate::os::unix::io::{AsFd, BorrowedFd, OwnedFd, FromRawFd, IntoRawFd, RawFd, AsRawFd};\n+    #[cfg(target_os = \"wasi\")]\n+    use crate::os::wasi::io::{AsFd, BorrowedFd, OwnedFd, FromRawFd, IntoRawFd, RawFd, AsRawFd};\n+\n+    let stdin = crate::io::stdin();\n+    let fd: BorrowedFd<'_> = stdin.as_fd();\n+    let raw_fd: RawFd = fd.as_raw_fd();\n+    let owned_fd: OwnedFd = unsafe { OwnedFd::from_raw_fd(raw_fd) };\n+\n+    let stdin_as_file = crate::fs::File::from(owned_fd);\n+\n+    assert_eq!(stdin_as_file.as_fd().as_raw_fd(), raw_fd);\n+    assert_eq!(Into::<OwnedFd>::into(stdin_as_file).into_raw_fd(), raw_fd);\n+}"}, {"sha": "5c224f118b6eae8097369097329b58cc2fdbb4df", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "patch": "@@ -131,7 +131,7 @@ impl BorrowedHandle<'_> {\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_handle(handle: RawHandle) -> Self {\n+    pub unsafe fn borrow_raw(handle: RawHandle) -> Self {\n         Self { handle, _phantom: PhantomData }\n     }\n }\n@@ -329,7 +329,7 @@ impl AsHandle for OwnedHandle {\n         // Safety: `OwnedHandle` and `BorrowedHandle` have the same validity\n         // invariants, and the `BorrowdHandle` is bounded by the lifetime\n         // of `&self`.\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -357,49 +357,49 @@ impl From<OwnedHandle> for fs::File {\n impl AsHandle for crate::io::Stdin {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl<'a> AsHandle for crate::io::StdinLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl AsHandle for crate::io::Stdout {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl<'a> AsHandle for crate::io::StdoutLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl AsHandle for crate::io::Stderr {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl<'a> AsHandle for crate::io::StderrLock<'a> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n impl AsHandle for crate::process::ChildStdin {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -413,7 +413,7 @@ impl From<crate::process::ChildStdin> for OwnedHandle {\n impl AsHandle for crate::process::ChildStdout {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -427,7 +427,7 @@ impl From<crate::process::ChildStdout> for OwnedHandle {\n impl AsHandle for crate::process::ChildStderr {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n \n@@ -441,7 +441,7 @@ impl From<crate::process::ChildStderr> for OwnedHandle {\n impl<T> AsHandle for crate::thread::JoinHandle<T> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {\n-        unsafe { BorrowedHandle::borrow_raw_handle(self.as_raw_handle()) }\n+        unsafe { BorrowedHandle::borrow_raw(self.as_raw_handle()) }\n     }\n }\n "}, {"sha": "6ed44b4b11e616709519c557c287d32a06bcc558", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "patch": "@@ -67,7 +67,7 @@ impl BorrowedSocket<'_> {\n     /// `INVALID_SOCKET`.\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub unsafe fn borrow_raw_socket(socket: RawSocket) -> Self {\n+    pub unsafe fn borrow_raw(socket: RawSocket) -> Self {\n         debug_assert_ne!(socket, c::INVALID_SOCKET as RawSocket);\n         Self { socket, _phantom: PhantomData }\n     }\n@@ -223,14 +223,14 @@ impl AsSocket for OwnedSocket {\n         // Safety: `OwnedSocket` and `BorrowedSocket` have the same validity\n         // invariants, and the `BorrowdSocket` is bounded by the lifetime\n         // of `&self`.\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n impl AsSocket for crate::net::TcpStream {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n@@ -251,7 +251,7 @@ impl From<OwnedSocket> for crate::net::TcpStream {\n impl AsSocket for crate::net::TcpListener {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n \n@@ -272,7 +272,7 @@ impl From<OwnedSocket> for crate::net::TcpListener {\n impl AsSocket for crate::net::UdpSocket {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {\n-        unsafe { BorrowedSocket::borrow_raw_socket(self.as_raw_socket()) }\n+        unsafe { BorrowedSocket::borrow_raw(self.as_raw_socket()) }\n     }\n }\n "}, {"sha": "e4d83ba0ffd1335e3cefd3c6c9edfe16f1091685", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4e43035f8b8bcc171e4a359bb5b42108eadf41/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=4c4e43035f8b8bcc171e4a359bb5b42108eadf41", "patch": "@@ -96,46 +96,46 @@ pub fn panic_output() -> Option<impl io::Write> {\n impl AsFd for io::Stdin {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDIN_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl<'a> AsFd for io::StdinLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDIN_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for io::Stdout {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDOUT_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl<'a> AsFd for io::StdoutLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDOUT_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for io::Stderr {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDERR_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl<'a> AsFd for io::StderrLock<'a> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw_fd(libc::STDERR_FILENO) }\n+        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n     }\n }"}]}