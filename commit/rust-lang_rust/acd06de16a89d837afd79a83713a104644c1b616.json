{"sha": "acd06de16a89d837afd79a83713a104644c1b616", "node_id": "C_kwDOAAsO6NoAKGFjZDA2ZGUxNmE4OWQ4MzdhZmQ3OWE4MzcxM2ExMDQ2NDRjMWI2MTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T07:55:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T07:55:57Z"}, "message": "Auto merge of #13690 - Crauzer:vararg-type, r=Veykril\n\nfeat: Implement vararg parameter type inference\n\nThis PR implements the \"collection\" of the `va_list` type into the function parameter types list.", "tree": {"sha": "1fa9c1eb9811980bbccab1d617bbf1b97428c881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa9c1eb9811980bbccab1d617bbf1b97428c881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd06de16a89d837afd79a83713a104644c1b616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd06de16a89d837afd79a83713a104644c1b616", "html_url": "https://github.com/rust-lang/rust/commit/acd06de16a89d837afd79a83713a104644c1b616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd06de16a89d837afd79a83713a104644c1b616/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3769cc35fa3fc28f6d6d5ecb40ba72bb16f63e0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3769cc35fa3fc28f6d6d5ecb40ba72bb16f63e0c", "html_url": "https://github.com/rust-lang/rust/commit/3769cc35fa3fc28f6d6d5ecb40ba72bb16f63e0c"}, {"sha": "b3bd5a471e314841fb1d2d94fdc50ef3c8d8548f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bd5a471e314841fb1d2d94fdc50ef3c8d8548f", "html_url": "https://github.com/rust-lang/rust/commit/b3bd5a471e314841fb1d2d94fdc50ef3c8d8548f"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "259fe1327f888d1bdf932809ef6ba18801ea5b57", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd06de16a89d837afd79a83713a104644c1b616/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd06de16a89d837afd79a83713a104644c1b616/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=acd06de16a89d837afd79a83713a104644c1b616", "patch": "@@ -419,6 +419,7 @@ pub mod known {\n         shr,\n         sub_assign,\n         sub,\n+        va_list\n     );\n \n     // self/Self cannot be used as an identifier"}, {"sha": "112eb5bd84cde62a1672b019b804057254659a37", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/acd06de16a89d837afd79a83713a104644c1b616/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd06de16a89d837afd79a83713a104644c1b616/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=acd06de16a89d837afd79a83713a104644c1b616", "patch": "@@ -537,8 +537,20 @@ impl<'a> InferenceContext<'a> {\n         let data = self.db.function_data(func);\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n             .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n-        let param_tys =\n+        let mut param_tys =\n             data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n+        // Check if function contains a va_list, if it does then we append it to the parameter types\n+        // that are collected from the function data\n+        if data.is_varargs() {\n+            let va_list_ty = match self.resolve_va_list() {\n+                Some(va_list) => TyBuilder::adt(self.db, va_list)\n+                    .fill_with_defaults(self.db, || self.table.new_type_var())\n+                    .build(),\n+                None => self.err_ty(),\n+            };\n+\n+            param_tys.push(va_list_ty)\n+        }\n         for (ty, pat) in param_tys.into_iter().zip(self.body.params.iter()) {\n             let ty = self.insert_type_vars(ty);\n             let ty = self.normalize_associated_types_in(ty);\n@@ -983,6 +995,11 @@ impl<'a> InferenceContext<'a> {\n         let trait_ = self.resolve_ops_index()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n+\n+    fn resolve_va_list(&self) -> Option<AdtId> {\n+        let struct_ = self.resolve_lang_item(name![va_list])?.as_struct()?;\n+        Some(struct_.into())\n+    }\n }\n \n /// When inferring an expression, we propagate downward whatever type hint we"}, {"sha": "9333e2693522bceba97bb55e2ea20a7cf8c3b0b7", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acd06de16a89d837afd79a83713a104644c1b616/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd06de16a89d837afd79a83713a104644c1b616/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=acd06de16a89d837afd79a83713a104644c1b616", "patch": "@@ -1080,3 +1080,15 @@ fn my_fn(#[cfg(feature = \"feature\")] u8: u8, u32: u32) {}\n \"#,\n     );\n }\n+\n+#[test]\n+fn var_args() {\n+    check_types(\n+        r#\"\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f>;\n+fn my_fn(foo: ...) {}\n+       //^^^ VaListImpl\n+\"#,\n+    );\n+}"}]}