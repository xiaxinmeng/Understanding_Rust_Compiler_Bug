{"sha": "ae044ee893edca63488fe020900b88909bae9832", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMDQ0ZWU4OTNlZGNhNjM0ODhmZTAyMDkwMGI4ODkwOWJhZTk4MzI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-07T08:58:14Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-11T23:00:46Z"}, "message": "Add self profiler events for loading incremental query results from disk", "tree": {"sha": "e123f6d2f33ab93bf4bb73e94fb60ec91e32bf36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e123f6d2f33ab93bf4bb73e94fb60ec91e32bf36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae044ee893edca63488fe020900b88909bae9832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae044ee893edca63488fe020900b88909bae9832", "html_url": "https://github.com/rust-lang/rust/commit/ae044ee893edca63488fe020900b88909bae9832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae044ee893edca63488fe020900b88909bae9832/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d7cfc3cf50f0c427ad3043ff09eaef20671320", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d7cfc3cf50f0c427ad3043ff09eaef20671320", "html_url": "https://github.com/rust-lang/rust/commit/57d7cfc3cf50f0c427ad3043ff09eaef20671320"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "74a7cc5a8b75a0c0729ac65eaa04cdb963bf2d21", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae044ee893edca63488fe020900b88909bae9832/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae044ee893edca63488fe020900b88909bae9832/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=ae044ee893edca63488fe020900b88909bae9832", "patch": "@@ -436,7 +436,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // First we try to load the result from the on-disk cache\n         let result = if Q::cache_on_disk(self.global_tcx(), key.clone()) &&\n                         self.sess.opts.debugging_opts.incremental_queries {\n+            self.sess.profiler(|p| p.incremental_load_result_start(Q::NAME));\n             let result = Q::try_load_from_disk(self.global_tcx(), prev_dep_node_index);\n+            self.sess.profiler(|p| p.incremental_load_result_end(Q::NAME));\n \n             // We always expect to find a cached result for things that\n             // can be forced from DepNode."}, {"sha": "0306ce1e6f29b29bf007f23f44a5bc92269a9a5e", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae044ee893edca63488fe020900b88909bae9832/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae044ee893edca63488fe020900b88909bae9832/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=ae044ee893edca63488fe020900b88909bae9832", "patch": "@@ -25,16 +25,24 @@ pub enum ProfilerEvent {\n     GenericActivityEnd { category: ProfileCategory, time: Instant },\n     QueryCacheHit { query_name: &'static str, category: ProfileCategory },\n     QueryCount { query_name: &'static str, category: ProfileCategory, count: usize },\n+    IncrementalLoadResultStart { query_name: &'static str, time: Instant },\n+    IncrementalLoadResultEnd { query_name: &'static str, time: Instant },\n }\n \n impl ProfilerEvent {\n     fn is_start_event(&self) -> bool {\n         use self::ProfilerEvent::*;\n \n         match self {\n-            QueryStart { .. } | GenericActivityStart { .. } => true,\n-            QueryEnd { .. } | GenericActivityEnd { .. } |\n-            QueryCacheHit { .. } | QueryCount { .. } => false,\n+            QueryStart { .. } |\n+            GenericActivityStart { .. } |\n+            IncrementalLoadResultStart { .. } => true,\n+\n+            QueryEnd { .. } |\n+            GenericActivityEnd { .. } |\n+            QueryCacheHit { .. } |\n+            QueryCount { .. } |\n+            IncrementalLoadResultEnd { .. } => false,\n         }\n     }\n }\n@@ -225,6 +233,22 @@ impl SelfProfiler {\n         })\n     }\n \n+    #[inline]\n+    pub fn incremental_load_result_start(&mut self, query_name: &'static str) {\n+        self.record(ProfilerEvent::IncrementalLoadResultStart {\n+            query_name,\n+            time: Instant::now(),\n+        })\n+    }\n+\n+    #[inline]\n+    pub fn incremental_load_result_end(&mut self, query_name: &'static str) {\n+        self.record(ProfilerEvent::IncrementalLoadResultEnd {\n+            query_name,\n+            time: Instant::now(),\n+        })\n+    }\n+\n     #[inline]\n     fn record(&mut self, event: ProfilerEvent) {\n         let thread_id = std::thread::current().id();\n@@ -317,6 +341,8 @@ impl SelfProfiler {\n                         result_data.query_cache_stats.entry(query_name).or_insert((0, 0));\n                     *totals += *count as u64;\n                 },\n+                //we don't summarize incremental load result events in the simple output mode\n+                IncrementalLoadResultStart { .. } | IncrementalLoadResultEnd { .. } => { },\n             }\n         }\n "}]}