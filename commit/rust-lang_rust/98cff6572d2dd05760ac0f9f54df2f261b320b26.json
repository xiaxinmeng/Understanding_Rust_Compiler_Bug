{"sha": "98cff6572d2dd05760ac0f9f54df2f261b320b26", "node_id": "C_kwDOAAsO6NoAKDk4Y2ZmNjU3MmQyZGQwNTc2MGFjMGY5ZjU0ZGYyZjI2MWIzMjBiMjY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-27T12:35:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-29T13:10:44Z"}, "message": "Don't discard attributed items when a proc-macro unexpectedly fails to expand", "tree": {"sha": "68d51af70a7cff56ca2d8f886c2c45a35eaa59fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68d51af70a7cff56ca2d8f886c2c45a35eaa59fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cff6572d2dd05760ac0f9f54df2f261b320b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cff6572d2dd05760ac0f9f54df2f261b320b26", "html_url": "https://github.com/rust-lang/rust/commit/98cff6572d2dd05760ac0f9f54df2f261b320b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cff6572d2dd05760ac0f9f54df2f261b320b26/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e6583f5383fa080a730424edcc9bc376ba02a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/54e6583f5383fa080a730424edcc9bc376ba02a7", "html_url": "https://github.com/rust-lang/rust/commit/54e6583f5383fa080a730424edcc9bc376ba02a7"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "d68794eb980e351786148e7143862c7b8bb12c53", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98cff6572d2dd05760ac0f9f54df2f261b320b26/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cff6572d2dd05760ac0f9f54df2f261b320b26/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=98cff6572d2dd05760ac0f9f54df2f261b320b26", "patch": "@@ -1,9 +1,10 @@\n //! Proc Macro Expander stub\n \n-use crate::db::AstDatabase;\n-use base_db::{CrateId, ProcMacroExpansionError, ProcMacroId};\n+use base_db::{CrateId, ProcMacroExpansionError, ProcMacroId, ProcMacroKind};\n use mbe::ExpandResult;\n \n+use crate::db::AstDatabase;\n+\n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n     krate: CrateId,\n@@ -36,20 +37,29 @@ impl ProcMacroExpander {\n                 let krate_graph = db.crate_graph();\n                 let proc_macro = match krate_graph[self.krate].proc_macro.get(id.0 as usize) {\n                     Some(proc_macro) => proc_macro,\n-                    None => return ExpandResult::str_err(\"No derive macro found.\".to_string()),\n+                    None => return ExpandResult::str_err(\"No proc-macro found.\".to_string()),\n                 };\n \n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n-\n-                proc_macro\n-                    .expander\n-                    .expand(tt, attr_arg, env)\n-                    .map_err(|err| match err {\n-                        ProcMacroExpansionError::Panic(text) => mbe::ExpandError::Other(text),\n-                        ProcMacroExpansionError::System(text) => mbe::ExpandError::Other(text),\n-                    })\n-                    .into()\n+                match proc_macro.expander.expand(tt, attr_arg, env) {\n+                    Ok(t) => ExpandResult::ok(t),\n+                    Err(err) => match err {\n+                        // Don't discard the item in case something unexpected happened while expanding attributes\n+                        ProcMacroExpansionError::System(text)\n+                            if proc_macro.kind == ProcMacroKind::Attr =>\n+                        {\n+                            ExpandResult {\n+                                value: tt.clone(),\n+                                err: Some(mbe::ExpandError::Other(text)),\n+                            }\n+                        }\n+                        ProcMacroExpansionError::System(text)\n+                        | ProcMacroExpansionError::Panic(text) => {\n+                            ExpandResult::only_err(mbe::ExpandError::Other(text))\n+                        }\n+                    },\n+                }\n             }\n             None => ExpandResult::only_err(mbe::ExpandError::UnresolvedProcMacro),\n         }"}, {"sha": "9e50c1f83f7cc4e62b69252b4fe9c8bb4f589b5c", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98cff6572d2dd05760ac0f9f54df2f261b320b26/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cff6572d2dd05760ac0f9f54df2f261b320b26/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=98cff6572d2dd05760ac0f9f54df2f261b320b26", "patch": "@@ -167,7 +167,7 @@ impl ProcMacro {\n         let request = msg::Request::ExpandMacro(task);\n         let response = self.process.lock().unwrap_or_else(|e| e.into_inner()).send_task(request)?;\n         match response {\n-            msg::Response::ExpandMacro(it) => Ok(it.map(|it| it.to_subtree())),\n+            msg::Response::ExpandMacro(it) => Ok(it.map(FlatTree::to_subtree)),\n             msg::Response::ListMacros { .. } => {\n                 Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n             }"}]}