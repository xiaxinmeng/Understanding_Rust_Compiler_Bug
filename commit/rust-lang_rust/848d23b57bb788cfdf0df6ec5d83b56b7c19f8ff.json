{"sha": "848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff", "node_id": "C_kwDOAAsO6NoAKDg0OGQyM2I1N2JiNzg4Y2ZkZjBkZjZlYzVkODNiNTZiN2MxOWY4ZmY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-11T04:44:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-13T22:27:28Z"}, "message": "factor 'is this type allowed as union field on stable' into separate function", "tree": {"sha": "4ba4c81ef93e65a98881eed57701fb9a17b93fcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ba4c81ef93e65a98881eed57701fb9a17b93fcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff", "html_url": "https://github.com/rust-lang/rust/commit/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80dde43f992f3eb419899a34551b84c6301f8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c80dde43f992f3eb419899a34551b84c6301f8e8", "html_url": "https://github.com/rust-lang/rust/commit/c80dde43f992f3eb419899a34551b84c6301f8e8"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "a1697978d66a3fac65c42582993d9238000d45d8", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=848d23b57bb788cfdf0df6ec5d83b56b7c19f8ff", "patch": "@@ -772,13 +772,21 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 let ty = self.tcx.type_of(item.def_id);\n                 let ty::Adt(adt_def, substs) = ty.kind() else { bug!() };\n \n+                #[allow(rustc::usage_of_qualified_ty)] // `Ty` is the wrong type here, we really want `ty::Ty`.\n+                fn allowed_union_field<'tcx>(\n+                    tcx: TyCtxt<'tcx>,\n+                    param_env: ty::ParamEnv<'tcx>,\n+                    ty: ty::Ty<'tcx>,\n+                ) -> bool {\n+                    ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n+                        || ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env)\n+                }\n+\n                 // Non-`Copy` fields are unstable, except for `ManuallyDrop`.\n                 let param_env = self.tcx.param_env(item.def_id);\n                 for field in &adt_def.non_enum_variant().fields {\n                     let field_ty = field.ty(self.tcx, substs);\n-                    if !field_ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n-                        && !field_ty.is_copy_modulo_regions(self.tcx.at(DUMMY_SP), param_env)\n-                    {\n+                    if !allowed_union_field(self.tcx, param_env, field_ty) {\n                         if field_ty.needs_drop(self.tcx, param_env) {\n                             // Avoid duplicate error: This will error later anyway because fields\n                             // that need drop are not allowed."}]}