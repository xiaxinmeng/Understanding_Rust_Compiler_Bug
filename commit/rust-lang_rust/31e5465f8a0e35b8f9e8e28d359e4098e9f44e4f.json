{"sha": "31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "node_id": "C_kwDOAAsO6NoAKDMxZTU0NjVmOGEwZTM1YjhmOWU4ZTI4ZDM1OWU0MDk4ZTlmNDRlNGY", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-07-18T17:29:45Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-07-18T17:29:45Z"}, "message": "Add Arithmetic lint", "tree": {"sha": "ab9ebedf90f8b4c92600c41208cf665694f91f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9ebedf90f8b4c92600c41208cf665694f91f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "html_url": "https://github.com/rust-lang/rust/commit/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cce617165ded6648cadf2b6fe2f3f0232ce12459", "url": "https://api.github.com/repos/rust-lang/rust/commits/cce617165ded6648cadf2b6fe2f3f0232ce12459", "html_url": "https://github.com/rust-lang/rust/commit/cce617165ded6648cadf2b6fe2f3f0232ce12459"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "aeaf3975649546f89cb5811aaa9986bb3d32f419", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -3437,6 +3437,7 @@ Released 2018-09-13\n [`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n [`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n+[`arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic\n [`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\n [`as_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_underscore\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants"}, {"sha": "1ffd190cb9b3d948cc70bf2d55ef71b88f002fe2", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -418,6 +418,7 @@ store.register_lints(&[\n     only_used_in_recursion::ONLY_USED_IN_RECURSION,\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n     operators::ABSURD_EXTREME_COMPARISONS,\n+    operators::ARITHMETIC,\n     operators::ASSIGN_OP_PATTERN,\n     operators::BAD_BIT_MASK,\n     operators::CMP_NAN,"}, {"sha": "495abd8387e85e0bd8ce1c073e02b6ec4e4564b6", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -48,6 +48,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION),\n     LintId::of(module_style::MOD_MODULE_FILES),\n     LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n+    LintId::of(operators::ARITHMETIC),\n     LintId::of(operators::FLOAT_ARITHMETIC),\n     LintId::of(operators::FLOAT_CMP_CONST),\n     LintId::of(operators::INTEGER_ARITHMETIC),"}, {"sha": "8ac40cc73e01e79fca7fb4949bd2bbd21204c790", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -548,6 +548,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| Box::new(utils::internal_lints::MsrvAttrImpl));\n     }\n \n+    let arithmetic_allowed = conf.arithmetic_allowed.clone();\n+    store.register_late_pass(move || Box::new(operators::arithmetic::Arithmetic::new(arithmetic_allowed.clone())));\n     store.register_late_pass(|| Box::new(utils::dump_hir::DumpHir));\n     store.register_late_pass(|| Box::new(utils::author::Author));\n     let await_holding_invalid_types = conf.await_holding_invalid_types.clone();"}, {"sha": "800cf249f5c78433a7b64bc1f686a40bd4123704", "filename": "clippy_lints/src/operators/arithmetic.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Foperators%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Foperators%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -0,0 +1,119 @@\n+#![allow(\n+    // False positive\n+    clippy::match_same_arms\n+)]\n+\n+use super::ARITHMETIC;\n+use clippy_utils::{consts::constant_simple, diagnostics::span_lint};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::impl_lint_pass;\n+use rustc_span::source_map::Span;\n+\n+const HARD_CODED_ALLOWED: &[&str] = &[\"std::num::Saturating\", \"std::string::String\", \"std::num::Wrapping\"];\n+\n+#[derive(Debug)]\n+pub struct Arithmetic {\n+    allowed: FxHashSet<String>,\n+    // Used to check whether expressions are constants, such as in enum discriminants and consts\n+    const_span: Option<Span>,\n+    expr_span: Option<Span>,\n+}\n+\n+impl_lint_pass!(Arithmetic => [ARITHMETIC]);\n+\n+impl Arithmetic {\n+    #[must_use]\n+    pub fn new(mut allowed: FxHashSet<String>) -> Self {\n+        allowed.extend(HARD_CODED_ALLOWED.iter().copied().map(String::from));\n+        Self {\n+            allowed,\n+            const_span: None,\n+            expr_span: None,\n+        }\n+    }\n+\n+    /// Checks if the given `expr` has any of the inner `allowed` elements.\n+    fn is_allowed_ty(&self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+        self.allowed.contains(\n+            cx.typeck_results()\n+                .expr_ty(expr)\n+                .to_string()\n+                .split('<')\n+                .next()\n+                .unwrap_or_default(),\n+        )\n+    }\n+\n+    fn issue_lint(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n+        span_lint(cx, ARITHMETIC, expr.span, \"arithmetic detected\");\n+        self.expr_span = Some(expr.span);\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if self.expr_span.is_some() {\n+            return;\n+        }\n+        if let Some(span) = self.const_span && span.contains(expr.span) {\n+            return;\n+        }\n+        match &expr.kind {\n+            hir::ExprKind::Binary(op, lhs, rhs) | hir::ExprKind::AssignOp(op, lhs, rhs) => {\n+                let (\n+                    hir::BinOpKind::Add\n+                    | hir::BinOpKind::Sub\n+                    | hir::BinOpKind::Mul\n+                    | hir::BinOpKind::Div\n+                    | hir::BinOpKind::Rem\n+                    | hir::BinOpKind::Shl\n+                    | hir::BinOpKind::Shr\n+                ) = op.node else {\n+                    return;\n+                };\n+                if self.is_allowed_ty(cx, lhs) || self.is_allowed_ty(cx, rhs) {\n+                    return;\n+                }\n+                self.issue_lint(cx, expr);\n+            },\n+            hir::ExprKind::Unary(hir::UnOp::Neg, _) => {\n+                // CTFE already takes care of things like `-1` that do not overflow.\n+                if constant_simple(cx, cx.typeck_results(), expr).is_none() {\n+                    self.issue_lint(cx, expr);\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    fn check_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n+        let body_owner = cx.tcx.hir().body_owner_def_id(body.id());\n+        match cx.tcx.hir().body_owner_kind(body_owner) {\n+            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n+                let body_span = cx.tcx.def_span(body_owner);\n+                if let Some(span) = self.const_span && span.contains(body_span) {\n+                    return;\n+                }\n+                self.const_span = Some(body_span);\n+            },\n+            hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => {},\n+        }\n+    }\n+\n+    fn check_body_post(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n+        let body_owner = cx.tcx.hir().body_owner(body.id());\n+        let body_span = cx.tcx.hir().span(body_owner);\n+        if let Some(span) = self.const_span && span.contains(body_span) {\n+            return;\n+        }\n+        self.const_span = None;\n+    }\n+\n+    fn check_expr_post(&mut self, _: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if Some(expr.span) == self.expr_span {\n+            self.expr_span = None;\n+        }\n+    }\n+}"}, {"sha": "c688d94bb520ce956f54af105a871f9ff1c33a86", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -2,6 +2,8 @@ use rustc_hir::{Body, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n+pub(crate) mod arithmetic;\n+\n mod absurd_extreme_comparisons;\n mod assign_op_pattern;\n mod bit_mask;\n@@ -57,6 +59,42 @@ declare_clippy_lint! {\n     \"a comparison with a maximum or minimum value that is always true or false\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for any kind of arithmetic operation of any type.\n+    ///\n+    /// Operators like `+`, `-`, `*` or `<<` are usually capable of overflowing according to the [Rust\n+    /// Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\n+    /// or can panic (`/`, `%`). Known safe built-in types like `Wrapping` or `Saturing` are filtered\n+    /// away.\n+    ///\n+    /// ### Why is this bad?\n+    /// Integer overflow will trigger a panic in debug builds or will wrap in\n+    /// release mode. Division by zero will cause a panic in either mode. In some applications one\n+    /// wants explicitly checked, wrapping or saturating arithmetic.\n+    ///\n+    /// #### Example\n+    /// ```rust\n+    /// # let a = 0;\n+    /// a + 1;\n+    /// ```\n+    ///\n+    /// Third-party types also tend to overflow.\n+    ///\n+    /// #### Example\n+    /// ```ignore,rust\n+    /// use rust_decimal::Decimal;\n+    /// let _n = Decimal::MAX + Decimal::MAX;\n+    /// ```\n+    ///\n+    /// ### Allowed types\n+    /// Custom allowed types can be specified through the \"arithmetic-allowed\" filter.\n+    #[clippy::version = \"1.64.0\"]\n+    pub ARITHMETIC,\n+    restriction,\n+    \"any arithmetic expression that could overflow or panic\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for integer arithmetic operations which could overflow or panic.\n@@ -747,6 +785,7 @@ pub struct Operators {\n }\n impl_lint_pass!(Operators => [\n     ABSURD_EXTREME_COMPARISONS,\n+    ARITHMETIC,\n     INTEGER_ARITHMETIC,\n     FLOAT_ARITHMETIC,\n     ASSIGN_OP_PATTERN,"}, {"sha": "6e033b3be2d87a60e5d6e21f913e09ac79eef269", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -191,6 +191,10 @@ macro_rules! define_Conf {\n }\n \n define_Conf! {\n+    /// Lint: Arithmetic.\n+    ///\n+    /// Suppress checking of the passed type names.\n+    (arithmetic_allowed: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n     /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates."}, {"sha": "195fabdbf710b59e0b3aa503532013b7d5ebf2f2", "filename": "tests/ui-toml/arithmetic_allowed/arithmetic_allowed.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui-toml%2Farithmetic_allowed%2Farithmetic_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui-toml%2Farithmetic_allowed%2Farithmetic_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_allowed%2Farithmetic_allowed.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -0,0 +1,24 @@\n+#![warn(clippy::arithmetic)]\n+\n+use core::ops::Add;\n+\n+#[derive(Clone, Copy)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Add for Point {\n+    type Output = Self;\n+\n+    fn add(self, other: Self) -> Self {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    let _ = Point { x: 1, y: 0 } + Point { x: 2, y: 3 };\n+\n+    let point: Point = Point { x: 1, y: 0 };\n+    let _ = point + point;\n+}"}, {"sha": "cc40570b12a0881369321dcc74295e38a20d7786", "filename": "tests/ui-toml/arithmetic_allowed/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui-toml%2Farithmetic_allowed%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui-toml%2Farithmetic_allowed%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_allowed%2Fclippy.toml?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -0,0 +1 @@\n+arithmetic-allowed = [\"Point\"]"}, {"sha": "fe5139c47680c2b449e5823a77af031a10530c8f", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -3,6 +3,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            allow-expect-in-tests\n            allow-unwrap-in-tests\n            allowed-scripts\n+           arithmetic-allowed\n            array-size-threshold\n            avoid-breaking-exported-api\n            await-holding-invalid-types"}, {"sha": "a2a1c4394c21f73eeb1f01a182a419362cbf2b05", "filename": "tests/ui/arithmetic.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui%2Farithmetic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui%2Farithmetic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.fixed?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+\n+#![allow(clippy::unnecessary_owned_empty_strings)]\n+#![feature(saturating_int_impl)]\n+#![warn(clippy::arithmetic)]\n+\n+use core::num::{Saturating, Wrapping};\n+\n+pub fn hard_coded_allowed() {\n+    let _ = Saturating(0u32) + Saturating(0u32);\n+    let _ = String::new() + \"\";\n+    let _ = Wrapping(0u32) + Wrapping(0u32);\n+\n+    let saturating: Saturating<u32> = Saturating(0u32);\n+    let string: String = String::new();\n+    let wrapping: Wrapping<u32> = Wrapping(0u32);\n+\n+    let inferred_saturating = saturating + saturating;\n+    let inferred_string = string + \"\";\n+    let inferred_wrapping = wrapping + wrapping;\n+\n+    let _ = inferred_saturating + inferred_saturating;\n+    let _ = inferred_string + \"\";\n+    let _ = inferred_wrapping + inferred_wrapping;\n+}\n+\n+fn main() {}"}, {"sha": "a2a1c4394c21f73eeb1f01a182a419362cbf2b05", "filename": "tests/ui/arithmetic.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=31e5465f8a0e35b8f9e8e28d359e4098e9f44e4f", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+\n+#![allow(clippy::unnecessary_owned_empty_strings)]\n+#![feature(saturating_int_impl)]\n+#![warn(clippy::arithmetic)]\n+\n+use core::num::{Saturating, Wrapping};\n+\n+pub fn hard_coded_allowed() {\n+    let _ = Saturating(0u32) + Saturating(0u32);\n+    let _ = String::new() + \"\";\n+    let _ = Wrapping(0u32) + Wrapping(0u32);\n+\n+    let saturating: Saturating<u32> = Saturating(0u32);\n+    let string: String = String::new();\n+    let wrapping: Wrapping<u32> = Wrapping(0u32);\n+\n+    let inferred_saturating = saturating + saturating;\n+    let inferred_string = string + \"\";\n+    let inferred_wrapping = wrapping + wrapping;\n+\n+    let _ = inferred_saturating + inferred_saturating;\n+    let _ = inferred_string + \"\";\n+    let _ = inferred_wrapping + inferred_wrapping;\n+}\n+\n+fn main() {}"}]}