{"sha": "ba28e19b7838e3ad4223ae82d074dc3950ef1548", "node_id": "C_kwDOAAsO6NoAKGJhMjhlMTliNzgzOGUzYWQ0MjIzYWU4MmQwNzRkYzM5NTBlZjE1NDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T08:54:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T08:54:14Z"}, "message": "Auto merge of #13505 - lowr:feat/gats, r=flodiebold\n\nClean up tests and add documentation for GATs related stuff\n\nThis is a follow-up PR for #13494.\n\n- addresses https://github.com/rust-lang/rust-analyzer/pull/13494#discussion_r1006774897\n- documents the ordering constraint on `Binders` and `Substitution` (which is not really follow-up for the previous PR, but it was introduced to support GATs and I strongly feel it's worth it)", "tree": {"sha": "da7b73c287a04bceace178303567df788fbfcbfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da7b73c287a04bceace178303567df788fbfcbfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba28e19b7838e3ad4223ae82d074dc3950ef1548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba28e19b7838e3ad4223ae82d074dc3950ef1548", "html_url": "https://github.com/rust-lang/rust/commit/ba28e19b7838e3ad4223ae82d074dc3950ef1548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba28e19b7838e3ad4223ae82d074dc3950ef1548/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebce5e923c3702b0fce3cda2873cc19edf9afaca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebce5e923c3702b0fce3cda2873cc19edf9afaca", "html_url": "https://github.com/rust-lang/rust/commit/ebce5e923c3702b0fce3cda2873cc19edf9afaca"}, {"sha": "e0f09cd00728fb5257d9e6e663de29875c6f0347", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f09cd00728fb5257d9e6e663de29875c6f0347", "html_url": "https://github.com/rust-lang/rust/commit/e0f09cd00728fb5257d9e6e663de29875c6f0347"}], "stats": {"total": 105, "additions": 41, "deletions": 64}, "files": [{"sha": "42c3b58d5ada520ba626c22c5ace408f007b2797", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba28e19b7838e3ad4223ae82d074dc3950ef1548/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba28e19b7838e3ad4223ae82d074dc3950ef1548/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=ba28e19b7838e3ad4223ae82d074dc3950ef1548", "patch": "@@ -81,7 +81,20 @@ pub type PlaceholderIndex = chalk_ir::PlaceholderIndex;\n pub type VariableKind = chalk_ir::VariableKind<Interner>;\n pub type VariableKinds = chalk_ir::VariableKinds<Interner>;\n pub type CanonicalVarKinds = chalk_ir::CanonicalVarKinds<Interner>;\n+/// Represents generic parameters and an item bound by them. When the item has parent, the binders\n+/// also contain the generic parameters for its parent. See chalk's documentation for details.\n+///\n+/// One thing to keep in mind when working with `Binders` (and `Substitution`s, which represent\n+/// generic arguments) in rust-analyzer is that the ordering within *is* significant - the generic\n+/// parameters/arguments for an item MUST come before those for its parent. This is to facilitate\n+/// the integration with chalk-solve, which mildly puts constraints as such. See #13335 for its\n+/// motivation in detail.\n pub type Binders<T> = chalk_ir::Binders<T>;\n+/// Interned list of generic arguments for an item. When an item has parent, the `Substitution` for\n+/// it contains generic arguments for both its parent and itself. See chalk's documentation for\n+/// details.\n+///\n+/// See `Binders` for the constraint on the ordering.\n pub type Substitution = chalk_ir::Substitution<Interner>;\n pub type GenericArg = chalk_ir::GenericArg<Interner>;\n pub type GenericArgData = chalk_ir::GenericArgData<Interner>;"}, {"sha": "7d42b8b9bc8d80951f258da956e786ee0a681273", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 28, "deletions": 64, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ba28e19b7838e3ad4223ae82d074dc3950ef1548/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba28e19b7838e3ad4223ae82d074dc3950ef1548/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=ba28e19b7838e3ad4223ae82d074dc3950ef1548", "patch": "@@ -3966,7 +3966,7 @@ fn g(t: &(dyn T + Send)) {\n \n #[test]\n fn gats_in_path() {\n-    check_infer_with_mismatches(\n+    check_types(\n         r#\"\n //- minicore: deref\n use core::ops::Deref;\n@@ -3976,32 +3976,22 @@ trait PointerFamily {\n \n fn f<P: PointerFamily>(p: P::Pointer<i32>) {\n     let a = *p;\n+      //^ i32\n }\n fn g<P: PointerFamily>(p: <P as PointerFamily>::Pointer<i32>) {\n     let a = *p;\n+      //^ i32\n }\n         \"#,\n-        expect![[r#\"\n-            110..111 'p': PointerFamily::Pointer<i32, P>\n-            130..149 '{     ... *p; }': ()\n-            140..141 'a': i32\n-            144..146 '*p': i32\n-            145..146 'p': PointerFamily::Pointer<i32, P>\n-            173..174 'p': PointerFamily::Pointer<i32, P>\n-            212..231 '{     ... *p; }': ()\n-            222..223 'a': i32\n-            226..228 '*p': i32\n-            227..228 'p': PointerFamily::Pointer<i32, P>\n-        \"#]],\n     );\n }\n \n #[test]\n fn gats_with_impl_trait() {\n-    // FIXME: the last function (`fn h()`) is not valid Rust as of this writing because you cannot\n-    // specify the same associated type multiple times even if their arguments are different.\n-    // Reconsider how to treat these invalid types.\n-    check_infer_with_mismatches(\n+    // FIXME: the last function (`fn i()`) is not valid Rust as of this writing because you cannot\n+    // specify the same associated type multiple times even if their arguments are different (c.f.\n+    // `fn h()`, which is valid). Reconsider how to treat these invalid types.\n+    check_types(\n         r#\"\n //- minicore: deref\n use core::ops::Deref;\n@@ -4012,45 +4002,30 @@ trait Trait {\n }\n \n fn f<T>(v: impl Trait) {\n-    v.get::<i32>().deref();\n-    v.get::<T>().deref();\n+    let a = v.get::<i32>().deref();\n+      //^ &i32\n+    let a = v.get::<T>().deref();\n+      //^ &T\n }\n-fn g<T>(v: impl Trait<Assoc<T> = &'a T>) {\n+fn g<'a, T: 'a>(v: impl Trait<Assoc<T> = &'a T>) {\n     let a = v.get::<T>();\n+      //^ &T\n     let a = v.get::<()>();\n+      //^ Trait::Assoc<(), impl Trait<Assoc<T> = &T>>\n+}\n+fn h<'a>(v: impl Trait<Assoc<i32> = &'a i32> + Trait<Assoc<i64> = &'a i64>) {\n+    let a = v.get::<i32>();\n+      //^ &i32\n+    let a = v.get::<i64>();\n+      //^ &i64\n }\n-fn h(v: impl Trait<Assoc<i32> = &'a i32, Assoc<i64> = &'a i64> {\n+fn i<'a>(v: impl Trait<Assoc<i32> = &'a i32, Assoc<i64> = &'a i64>) {\n     let a = v.get::<i32>();\n+      //^ &i32\n     let a = v.get::<i64>();\n+      //^ &i64\n }\n     \"#,\n-        expect![[r#\"\n-            90..94 'self': &Self\n-            126..127 'v': impl Trait\n-            141..198 '{     ...f(); }': ()\n-            147..148 'v': impl Trait\n-            147..161 'v.get::<i32>()': Trait::Assoc<i32, impl Trait>\n-            147..169 'v.get:...eref()': &i32\n-            175..176 'v': impl Trait\n-            175..187 'v.get::<T>()': Trait::Assoc<T, impl Trait>\n-            175..195 'v.get:...eref()': &T\n-            207..208 'v': impl Trait<Assoc<T> = &T>\n-            240..296 '{     ...>(); }': ()\n-            250..251 'a': &T\n-            254..255 'v': impl Trait<Assoc<T> = &T>\n-            254..266 'v.get::<T>()': &T\n-            276..277 'a': Trait::Assoc<(), impl Trait<Assoc<T> = &T>>\n-            280..281 'v': impl Trait<Assoc<T> = &T>\n-            280..293 'v.get::<()>()': Trait::Assoc<(), impl Trait<Assoc<T> = &T>>\n-            302..303 'v': impl Trait<Assoc<i32> = &i32, Assoc<i64> = &i64>\n-            360..419 '{     ...>(); }': ()\n-            370..371 'a': &i32\n-            374..375 'v': impl Trait<Assoc<i32> = &i32, Assoc<i64> = &i64>\n-            374..388 'v.get::<i32>()': &i32\n-            398..399 'a': &i64\n-            402..403 'v': impl Trait<Assoc<i32> = &i32, Assoc<i64> = &i64>\n-            402..416 'v.get::<i64>()': &i64\n-        \"#]],\n     );\n }\n \n@@ -4086,7 +4061,7 @@ fn f<'a>(v: &dyn Trait<Assoc<i32> = &'a i32>) {\n \n #[test]\n fn gats_in_associated_type_binding() {\n-    check_infer_with_mismatches(\n+    check_types(\n         r#\"\n trait Trait {\n     type Assoc<T>;\n@@ -4099,24 +4074,13 @@ where\n     T: Trait<Assoc<isize> = usize>,\n {\n     let a = t.get::<i32>();\n+      //^ u32\n     let a = t.get::<isize>();\n+      //^ usize\n     let a = t.get::<()>();\n+      //^ Trait::Assoc<(), T>\n }\n \n     \"#,\n-        expect![[r#\"\n-            48..52 'self': &Self\n-            84..85 't': T\n-            164..252 '{     ...>(); }': ()\n-            174..175 'a': u32\n-            178..179 't': T\n-            178..192 't.get::<i32>()': u32\n-            202..203 'a': usize\n-            206..207 't': T\n-            206..222 't.get:...ize>()': usize\n-            232..233 'a': Trait::Assoc<(), T>\n-            236..237 't': T\n-            236..249 't.get::<()>()': Trait::Assoc<(), T>\n-        \"#]],\n-    )\n+    );\n }"}]}