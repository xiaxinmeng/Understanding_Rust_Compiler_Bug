{"sha": "3836573ae4610f75d41d467e35d855efd6b000b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MzY1NzNhZTQ2MTBmNzVkNDFkNDY3ZTM1ZDg1NWVmZDZiMDAwYjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-08T21:30:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-08T21:30:33Z"}, "message": "Scalar: only convert to/from soft-float types, not to/from hard-floats", "tree": {"sha": "1d599db79b769cd49132c3ae8d03cb028f93b3f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d599db79b769cd49132c3ae8d03cb028f93b3f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3836573ae4610f75d41d467e35d855efd6b000b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3836573ae4610f75d41d467e35d855efd6b000b5", "html_url": "https://github.com/rust-lang/rust/commit/3836573ae4610f75d41d467e35d855efd6b000b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3836573ae4610f75d41d467e35d855efd6b000b5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c45343f11fbf93cf4e15568aee3ff3f2f287466", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c45343f11fbf93cf4e15568aee3ff3f2f287466", "html_url": "https://github.com/rust-lang/rust/commit/5c45343f11fbf93cf4e15568aee3ff3f2f287466"}], "stats": {"total": 92, "additions": 41, "deletions": 51}, "files": [{"sha": "1909f3cb998be90584d99480dd7c2e837ed6fd06", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=3836573ae4610f75d41d467e35d855efd6b000b5", "patch": "@@ -1,5 +1,6 @@\n use std::fmt;\n use rustc_macros::HashStable;\n+use rustc_apfloat::{Float, ieee::{Double, Single}};\n \n use crate::ty::{Ty, InferConst, ParamConst, layout::{HasDataLayout, Size}, subst::SubstsRef};\n use crate::ty::PlaceholderConst;\n@@ -292,12 +293,12 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn from_f32(f: f32) -> Self {\n+    pub fn from_f32(f: Single) -> Self {\n         Scalar::Raw { data: f.to_bits() as u128, size: 4 }\n     }\n \n     #[inline]\n-    pub fn from_f64(f: f64) -> Self {\n+    pub fn from_f64(f: Double) -> Self {\n         Scalar::Raw { data: f.to_bits() as u128, size: 8 }\n     }\n \n@@ -427,13 +428,15 @@ impl<'tcx, Tag> Scalar<Tag> {\n     }\n \n     #[inline]\n-    pub fn to_f32(self) -> InterpResult<'static, f32> {\n-        Ok(f32::from_bits(self.to_u32()?))\n+    pub fn to_f32(self) -> InterpResult<'static, Single> {\n+        // Going through `u32` to check size and truncation.\n+        Ok(Single::from_bits(self.to_u32()? as u128))\n     }\n \n     #[inline]\n-    pub fn to_f64(self) -> InterpResult<'static, f64> {\n-        Ok(f64::from_bits(self.to_u64()?))\n+    pub fn to_f64(self) -> InterpResult<'static, Double> {\n+        // Going through `u64` to check size and truncation.\n+        Ok(Double::from_bits(self.to_u64()? as u128))\n     }\n }\n \n@@ -517,12 +520,12 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n \n     #[inline(always)]\n-    pub fn to_f32(self) -> InterpResult<'tcx, f32> {\n+    pub fn to_f32(self) -> InterpResult<'tcx, Single> {\n         self.not_undef()?.to_f32()\n     }\n \n     #[inline(always)]\n-    pub fn to_f64(self) -> InterpResult<'tcx, f64> {\n+    pub fn to_f64(self) -> InterpResult<'tcx, Double> {\n         self.not_undef()?.to_f64()\n     }\n "}, {"sha": "37a2e79dae91ff62d89ff94efebcf2648d1c266c", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=3836573ae4610f75d41d467e35d855efd6b000b5", "patch": "@@ -69,8 +69,7 @@ fn parse_float<'tcx>(\n ) -> Result<ConstValue<'tcx>, ()> {\n     let num = num.as_str();\n     use rustc_apfloat::ieee::{Single, Double};\n-    use rustc_apfloat::Float;\n-    let (data, size) = match fty {\n+    let scalar = match fty {\n         ast::FloatTy::F32 => {\n             num.parse::<f32>().map_err(|_| ())?;\n             let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n@@ -79,19 +78,19 @@ fn parse_float<'tcx>(\n             if neg {\n                 f = -f;\n             }\n-            (f.to_bits(), 4)\n+            Scalar::from_f32(f)\n         }\n         ast::FloatTy::F64 => {\n             num.parse::<f64>().map_err(|_| ())?;\n             let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n-                panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n+                panic!(\"apfloat::ieee::Double failed to parse `{}`: {:?}\", num, e)\n             });\n             if neg {\n                 f = -f;\n             }\n-            (f.to_bits(), 8)\n+            Scalar::from_f64(f)\n         }\n     };\n \n-    Ok(ConstValue::Scalar(Scalar::from_uint(data, Size::from_bytes(size))))\n+    Ok(ConstValue::Scalar(scalar))\n }"}, {"sha": "4395f0c947b152820b235ad828458ddb20a6df26", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=3836573ae4610f75d41d467e35d855efd6b000b5", "patch": "@@ -166,21 +166,17 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 Ok(Scalar::from_uint(v, dest_layout.size))\n             }\n \n-            Float(FloatTy::F32) if signed => Ok(Scalar::from_uint(\n-                Single::from_i128(v as i128).value.to_bits(),\n-                Size::from_bits(32)\n+            Float(FloatTy::F32) if signed => Ok(Scalar::from_f32(\n+                Single::from_i128(v as i128).value\n             )),\n-            Float(FloatTy::F64) if signed => Ok(Scalar::from_uint(\n-                Double::from_i128(v as i128).value.to_bits(),\n-                Size::from_bits(64)\n+            Float(FloatTy::F64) if signed => Ok(Scalar::from_f64(\n+                Double::from_i128(v as i128).value\n             )),\n-            Float(FloatTy::F32) => Ok(Scalar::from_uint(\n-                Single::from_u128(v).value.to_bits(),\n-                Size::from_bits(32)\n+            Float(FloatTy::F32) => Ok(Scalar::from_f32(\n+                Single::from_u128(v).value\n             )),\n-            Float(FloatTy::F64) => Ok(Scalar::from_uint(\n-                Double::from_u128(v).value.to_bits(),\n-                Size::from_bits(64)\n+            Float(FloatTy::F64) => Ok(Scalar::from_f64(\n+                Double::from_u128(v).value\n             )),\n \n             Char => {\n@@ -223,22 +219,16 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 Ok(Scalar::from_int(v, Size::from_bits(width as u64)))\n             },\n             // f64 -> f32\n-            Float(FloatTy::F32) if fty == FloatTy::F64 => {\n-                Ok(Scalar::from_uint(\n-                    Single::to_bits(Double::from_bits(bits).convert(&mut false).value),\n-                    Size::from_bits(32),\n-                ))\n-            },\n+            Float(FloatTy::F32) if fty == FloatTy::F64 =>\n+                Ok(Scalar::from_f32(Double::from_bits(bits).convert(&mut false).value)),\n             // f32 -> f64\n-            Float(FloatTy::F64) if fty == FloatTy::F32 => {\n-                Ok(Scalar::from_uint(\n-                    Double::to_bits(Single::from_bits(bits).convert(&mut false).value),\n-                    Size::from_bits(64),\n-                ))\n-            },\n+            Float(FloatTy::F64) if fty == FloatTy::F32 =>\n+                Ok(Scalar::from_f64(Single::from_bits(bits).convert(&mut false).value)),\n             // identity cast\n-            Float(FloatTy:: F64) => Ok(Scalar::from_uint(bits, Size::from_bits(64))),\n-            Float(FloatTy:: F32) => Ok(Scalar::from_uint(bits, Size::from_bits(32))),\n+            Float(FloatTy::F64) if fty == FloatTy::F64 =>\n+                Ok(Scalar::from_uint(bits, Size::from_bits(64))),\n+            Float(FloatTy::F32) if fty == FloatTy::F32 =>\n+                Ok(Scalar::from_uint(bits, Size::from_bits(32))),\n             _ => err!(Unimplemented(format!(\"float to {:?} cast\", dest_ty))),\n         }\n     }"}, {"sha": "fa4597c825ace572335039c797e5052286fcfed4", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3836573ae4610f75d41d467e35d855efd6b000b5/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=3836573ae4610f75d41d467e35d855efd6b000b5", "patch": "@@ -1,5 +1,5 @@\n use rustc::mir;\n-use rustc::ty::{self, layout::{Size, TyLayout}};\n+use rustc::ty::{self, layout::TyLayout};\n use syntax::ast::FloatTy;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n@@ -92,31 +92,29 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         use rustc::mir::BinOp::*;\n \n         macro_rules! float_math {\n-            ($ty:path, $size:expr) => {{\n+            ($ty:path, $from_float:ident) => {{\n                 let l = <$ty>::from_bits(l);\n                 let r = <$ty>::from_bits(r);\n-                let bitify = |res: ::rustc_apfloat::StatusAnd<$ty>|\n-                    Scalar::from_uint(res.value.to_bits(), Size::from_bytes($size));\n                 let val = match bin_op {\n                     Eq => Scalar::from_bool(l == r),\n                     Ne => Scalar::from_bool(l != r),\n                     Lt => Scalar::from_bool(l < r),\n                     Le => Scalar::from_bool(l <= r),\n                     Gt => Scalar::from_bool(l > r),\n                     Ge => Scalar::from_bool(l >= r),\n-                    Add => bitify(l + r),\n-                    Sub => bitify(l - r),\n-                    Mul => bitify(l * r),\n-                    Div => bitify(l / r),\n-                    Rem => bitify(l % r),\n+                    Add => Scalar::$from_float((l + r).value),\n+                    Sub => Scalar::$from_float((l - r).value),\n+                    Mul => Scalar::$from_float((l * r).value),\n+                    Div => Scalar::$from_float((l / r).value),\n+                    Rem => Scalar::$from_float((l % r).value),\n                     _ => bug!(\"invalid float op: `{:?}`\", bin_op),\n                 };\n                 return Ok((val, false));\n             }};\n         }\n         match fty {\n-            FloatTy::F32 => float_math!(Single, 4),\n-            FloatTy::F64 => float_math!(Double, 8),\n+            FloatTy::F32 => float_math!(Single, from_f32),\n+            FloatTy::F64 => float_math!(Double, from_f64),\n         }\n     }\n "}]}