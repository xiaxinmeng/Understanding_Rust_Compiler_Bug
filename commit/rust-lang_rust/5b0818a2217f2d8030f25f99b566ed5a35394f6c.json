{"sha": "5b0818a2217f2d8030f25f99b566ed5a35394f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMDgxOGEyMjE3ZjJkODAzMGYyNWY5OWI1NjZlZDVhMzUzOTRmNmM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-01-07T06:28:17Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-15T23:22:24Z"}, "message": "Remove old integer tests", "tree": {"sha": "4a6122efb49a9054d8d1f4172a58dcdd0717b416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a6122efb49a9054d8d1f4172a58dcdd0717b416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0818a2217f2d8030f25f99b566ed5a35394f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0818a2217f2d8030f25f99b566ed5a35394f6c", "html_url": "https://github.com/rust-lang/rust/commit/5b0818a2217f2d8030f25f99b566ed5a35394f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0818a2217f2d8030f25f99b566ed5a35394f6c/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac057a354a00b4329a47266ea184e5177c7b584", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac057a354a00b4329a47266ea184e5177c7b584", "html_url": "https://github.com/rust-lang/rust/commit/0ac057a354a00b4329a47266ea184e5177c7b584"}], "stats": {"total": 444, "additions": 0, "deletions": 444}, "files": [{"sha": "8a0a279b8dce2e7f538f19c58911ef891104b3b3", "filename": "crates/core_simd/tests/ops_impl/i128.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi128.rs?ref=0ac057a354a00b4329a47266ea184e5177c7b584", "patch": "@@ -1,4 +0,0 @@\n-use super::helpers;\n-\n-int_tests! { i128x2, i128 }\n-int_tests! { i128x4, i128 }"}, {"sha": "445436b77a8935dadf8b2b5ec9e33deae7d245c9", "filename": "crates/core_simd/tests/ops_impl/i16.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi16.rs?ref=0ac057a354a00b4329a47266ea184e5177c7b584", "patch": "@@ -1,6 +0,0 @@\n-use super::helpers;\n-\n-int_tests! { i16x4, i16 }\n-int_tests! { i16x8, i16 }\n-int_tests! { i16x16, i16 }\n-int_tests! { i16x32, i16 }"}, {"sha": "f13ab833a33591027c9b6dce5dec07e07e624d62", "filename": "crates/core_simd/tests/ops_impl/i32.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi32.rs?ref=0ac057a354a00b4329a47266ea184e5177c7b584", "patch": "@@ -1,6 +0,0 @@\n-use super::helpers;\n-\n-int_tests! { i32x2, i32 }\n-int_tests! { i32x4, i32 }\n-int_tests! { i32x8, i32 }\n-int_tests! { i32x16, i32 }"}, {"sha": "08479c4b994b34278a7fc85bc0989ab97daedb63", "filename": "crates/core_simd/tests/ops_impl/i64.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi64.rs?ref=0ac057a354a00b4329a47266ea184e5177c7b584", "patch": "@@ -1,5 +0,0 @@\n-use super::helpers;\n-\n-int_tests! { i64x2, i64 }\n-int_tests! { i64x4, i64 }\n-int_tests! { i64x8, i64 }"}, {"sha": "2a7db7906ac1ef02f235b01cdc19fb8d997aacf6", "filename": "crates/core_simd/tests/ops_impl/i8.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fi8.rs?ref=0ac057a354a00b4329a47266ea184e5177c7b584", "patch": "@@ -1,6 +0,0 @@\n-use super::helpers;\n-\n-int_tests! { i8x8, i8 }\n-int_tests! { i8x16, i8 }\n-int_tests! { i8x32, i8 }\n-int_tests! { i8x64, i8 }"}, {"sha": "f565ae2f04df531d2433fa6e9b60eb8e5cf9385f", "filename": "crates/core_simd/tests/ops_impl/int_macros.rs", "status": "modified", "additions": 0, "deletions": 392, "changes": 392, "blob_url": "https://github.com/rust-lang/rust/blob/5b0818a2217f2d8030f25f99b566ed5a35394f6c/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0818a2217f2d8030f25f99b566ed5a35394f6c/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs?ref=5b0818a2217f2d8030f25f99b566ed5a35394f6c", "patch": "@@ -40,194 +40,6 @@ macro_rules! int_tests {\n                  -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,\n             ];\n \n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Add::add);\n-                assert_biteq!(a + b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Add::add);\n-                a += b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Add::add);\n-                assert_biteq!(a + b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Add::add);\n-                assert_biteq!(a + b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn add_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Add::add);\n-                a += b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Sub::sub);\n-                assert_biteq!(a - b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Sub::sub);\n-                a -= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Sub::sub);\n-                assert_biteq!(a - b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Sub::sub);\n-                assert_biteq!(a - b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn sub_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Sub::sub);\n-                a -= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Mul::mul);\n-                assert_biteq!(a * b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Mul::mul);\n-                a *= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Mul::mul);\n-                assert_biteq!(a * b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Mul::mul);\n-                assert_biteq!(a * b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn mul_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Mul::mul);\n-                a *= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Div::div);\n-                assert_biteq!(a / b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Div::div);\n-                a /= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Div::div);\n-                assert_biteq!(a / b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Div::div);\n-                assert_biteq!(a / b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn div_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Div::div);\n-                a /= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n             #[test]\n             #[should_panic]\n             fn div_min_panics() {\n@@ -261,53 +73,6 @@ macro_rules! int_tests {\n                 let _ = a / b;\n             }\n \n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Rem::rem);\n-                assert_biteq!(a % b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::Rem::rem);\n-                a %= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Rem::rem);\n-                assert_biteq!(a % b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::Rem::rem);\n-                assert_biteq!(a % b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn rem_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::Rem::rem);\n-                a %= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_min_neg_one_no_panic() {\n@@ -331,163 +96,6 @@ macro_rules! int_tests {\n                 let b = from_slice(&vec![0 ; 64]);\n                 let _ = a % b;\n             }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitAnd::bitand);\n-                assert_biteq!(a & b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitAnd::bitand);\n-                a &= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitAnd::bitand);\n-                assert_biteq!(a & b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::BitAnd::bitand);\n-                assert_biteq!(a & b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitand_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitAnd::bitand);\n-                a &= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitOr::bitor);\n-                assert_biteq!(a | b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitOr::bitor);\n-                a |= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitOr::bitor);\n-                assert_biteq!(a | b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::BitOr::bitor);\n-                assert_biteq!(a | b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitor_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitOr::bitor);\n-                a |= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor() {\n-                let a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_assign() {\n-                let mut a = from_slice(&A);\n-                let b = from_slice(&B);\n-                let expected = apply_binary_lanewise(a, b, core::ops::BitXor::bitxor);\n-                a ^= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_scalar_rhs() {\n-                let a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_scalar_lhs() {\n-                let a = 5;\n-                let b = from_slice(&B);\n-                let expected = apply_binary_scalar_lhs_lanewise(a, b, core::ops::BitXor::bitxor);\n-                assert_biteq!(a ^ b, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn bitxor_assign_scalar() {\n-                let mut a = from_slice(&A);\n-                let b = 5;\n-                let expected = apply_binary_scalar_rhs_lanewise(a, b, core::ops::BitXor::bitxor);\n-                a ^= b;\n-                assert_biteq!(a, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn neg() {\n-                let v = from_slice(&A);\n-                let expected = apply_unary_lanewise(v, core::ops::Neg::neg);\n-                assert_biteq!(-v, expected);\n-            }\n-\n-            #[test]\n-            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n-            fn not() {\n-                let v = from_slice(&A);\n-                let expected = apply_unary_lanewise(v, core::ops::Not::not);\n-                assert_biteq!(!v, expected);\n-            }\n         }\n     }\n }"}, {"sha": "9943e9c357a458d9de84c71a5f259c4dc0480ee2", "filename": "crates/core_simd/tests/ops_impl/isize.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac057a354a00b4329a47266ea184e5177c7b584/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fisize.rs?ref=0ac057a354a00b4329a47266ea184e5177c7b584", "patch": "@@ -1,5 +0,0 @@\n-use super::helpers;\n-\n-int_tests! { isizex2, isize }\n-int_tests! { isizex4, isize }\n-int_tests! { isizex8, isize }"}, {"sha": "89f5e1b0b52a846ec9c32c897c069c36aa690141", "filename": "crates/core_simd/tests/ops_impl/mod.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b0818a2217f2d8030f25f99b566ed5a35394f6c/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0818a2217f2d8030f25f99b566ed5a35394f6c/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmod.rs?ref=5b0818a2217f2d8030f25f99b566ed5a35394f6c", "patch": "@@ -2,26 +2,6 @@\n #[path = \"../helpers/mod.rs\"]\n mod helpers;\n \n-#[macro_use]\n-mod int_macros;\n-\n-mod r#i8;\n-mod r#i16;\n-mod r#i32;\n-mod r#i64;\n-mod r#i128;\n-mod r#isize;\n-\n-#[macro_use]\n-mod uint_macros;\n-\n-mod r#u8;\n-mod r#u16;\n-mod r#u32;\n-mod r#u64;\n-mod r#u128;\n-mod r#usize;\n-\n #[macro_use]\n mod mask_macros;\n "}]}