{"sha": "8256e97231332ef49bd47a74b1809e785ecc78df", "node_id": "C_kwDOAAsO6NoAKDgyNTZlOTcyMzEzMzJlZjQ5YmQ0N2E3NGIxODA5ZTc4NWVjYzc4ZGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T14:44:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-01T14:44:20Z"}, "message": "Auto merge of #97622 - JohnTitor:rollup-4qoxrjn, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #94647 (Expose `get_many_mut` and `get_many_unchecked_mut` to HashMap)\n - #97216 (Ensure we never consider the null pointer dereferencable)\n - #97399 (simplify code of finding arg index in `opt_const_param_of`)\n - #97470 (rustdoc: add more test coverage)\n - #97498 (Corrected EBNF grammar for from_str)\n - #97562 (Fix comment in `poly_project_and_unify_type`)\n - #97580 (Add regression test for #71546)\n - #97611 (Tweak insert docs)\n - #97616 (Remove an unnecessary `Option`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "65a1388d9fd21c48e6549dc3d6c0367aac4fe577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a1388d9fd21c48e6549dc3d6c0367aac4fe577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8256e97231332ef49bd47a74b1809e785ecc78df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8256e97231332ef49bd47a74b1809e785ecc78df", "html_url": "https://github.com/rust-lang/rust/commit/8256e97231332ef49bd47a74b1809e785ecc78df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8256e97231332ef49bd47a74b1809e785ecc78df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d", "html_url": "https://github.com/rust-lang/rust/commit/395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d"}, {"sha": "85fdef087c889846644192553dc6f4ebaf7b4494", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fdef087c889846644192553dc6f4ebaf7b4494", "html_url": "https://github.com/rust-lang/rust/commit/85fdef087c889846644192553dc6f4ebaf7b4494"}], "stats": {"total": 316, "additions": 257, "deletions": 59}, "files": [{"sha": "9c032c55fe54491478b0918e925da6fe257b6208", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -441,6 +441,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         msg,\n                     })\n                 }\n+                // Ensure we never consider the null pointer dereferencable.\n+                if M::PointerTag::OFFSET_IS_ADDR {\n+                    assert_ne!(ptr.addr(), Size::ZERO);\n+                }\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {"}, {"sha": "4fda3adb7b87829deda1f3f00fe9f82c5e245a71", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -126,9 +126,10 @@ impl<T: Eq + Hash> SsoHashSet<T> {\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have this value present, `true` is returned.\n+    /// Returns whether the value was newly inserted. That is:\n     ///\n-    /// If the set did have this value present, `false` is returned.\n+    /// - If the set did not previously contain this value, `true` is returned.\n+    /// - If the set already contained this value, `false` is returned.\n     #[inline]\n     pub fn insert(&mut self, elem: T) -> bool {\n         self.map.insert(elem, ()).is_none()"}, {"sha": "641b915f373625ab9d52685eaa4328cb792e0538", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -145,15 +145,28 @@ impl<'tcx> ProjectionCandidateSet<'tcx> {\n     }\n }\n \n-/// Takes the place of a\n+/// States returned from `poly_project_and_unify_type`. Takes the place\n+/// of the old return type, which was:\n+/// ```ignore (not-rust)\n /// Result<\n ///     Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n ///     MismatchedProjectionTypes<'tcx>,\n /// >\n+/// ```\n pub(super) enum ProjectAndUnifyResult<'tcx> {\n+    /// The projection bound holds subject to the given obligations. If the\n+    /// projection cannot be normalized because the required trait bound does\n+    /// not hold, this is returned, with `obligations` being a predicate that\n+    /// cannot be proven.\n     Holds(Vec<PredicateObligation<'tcx>>),\n+    /// The projection cannot be normalized due to ambiguity. Resolving some\n+    /// inference variables in the projection may fix this.\n     FailedNormalization,\n+    /// The project cannot be normalized because `poly_project_and_unify_type`\n+    /// is called recursively while normalizing the same projection.\n     Recursive,\n+    // the projection can be normalized, but is not equal to the expected type.\n+    // Returns the type error that arose from the mismatch.\n     MismatchedProjectionTypes(MismatchedProjectionTypes<'tcx>),\n }\n \n@@ -163,19 +176,6 @@ pub(super) enum ProjectAndUnifyResult<'tcx> {\n /// ```\n /// If successful, this may result in additional obligations. Also returns\n /// the projection cache key used to track these additional obligations.\n-///\n-/// ## Returns\n-///\n-/// - `Err(_)`: the projection can be normalized, but is not equal to the\n-///   expected type.\n-/// - `Ok(Err(InProgress))`: this is called recursively while normalizing\n-///   the same projection.\n-/// - `Ok(Ok(None))`: The projection cannot be normalized due to ambiguity\n-///   (resolving some inference variables in the projection may fix this).\n-/// - `Ok(Ok(Some(obligations)))`: The projection bound holds subject to\n-///    the given obligations. If the projection cannot be normalized because\n-///    the required trait bound doesn't hold this returned with `obligations`\n-///    being a predicate that cannot be proven.\n #[instrument(level = \"debug\", skip(selcx))]\n pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,"}, {"sha": "2ce2a44d3db76bd3703eea9c11483961ad2eb43d", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -81,10 +81,17 @@ pub fn trait_obligations<'a, 'tcx>(\n     body_id: hir::HirId,\n     trait_ref: &ty::TraitRef<'tcx>,\n     span: Span,\n-    item: Option<&'tcx hir::Item<'tcx>>,\n+    item: &'tcx hir::Item<'tcx>,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n-    let mut wf =\n-        WfPredicates { infcx, param_env, body_id, span, out: vec![], recursion_depth: 0, item };\n+    let mut wf = WfPredicates {\n+        infcx,\n+        param_env,\n+        body_id,\n+        span,\n+        out: vec![],\n+        recursion_depth: 0,\n+        item: Some(item),\n+    };\n     wf.compute_trait_ref(trait_ref, Elaborate::All);\n     debug!(obligations = ?wf.out);\n     wf.normalize()"}, {"sha": "20ef97c085f1884296fda4be45551b6cc97c46ba", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -1228,7 +1228,7 @@ fn check_impl<'tcx>(\n                     fcx.body_id,\n                     &trait_ref,\n                     ast_trait_ref.path.span,\n-                    Some(item),\n+                    item,\n                 );\n                 debug!(?obligations);\n                 for obligation in obligations {"}, {"sha": "7e3fefe4502d2c1bc580377c4441cb70f8601502", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -161,38 +161,23 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // We've encountered an `AnonConst` in some path, so we need to\n             // figure out which generic parameter it corresponds to and return\n             // the relevant type.\n-            let filtered = path.segments.iter().find_map(|seg| {\n-                seg.args?\n-                    .args\n+            let Some((arg_index, segment)) = path.segments.iter().find_map(|seg| {\n+                let args = seg.args?;\n+                args.args\n+                .iter()\n+                .filter(|arg| arg.is_ty_or_const())\n+                .position(|arg| arg.id() == hir_id)\n+                .map(|index| (index, seg)).or_else(|| args.bindings\n                     .iter()\n-                    .filter(|arg| arg.is_ty_or_const())\n-                    .position(|arg| arg.id() == hir_id)\n-                    .map(|index| (index, seg))\n-            });\n-\n-            // FIXME(associated_const_generics): can we blend this with iteration above?\n-            let (arg_index, segment) = match filtered {\n-                None => {\n-                    let binding_filtered = path.segments.iter().find_map(|seg| {\n-                        seg.args?\n-                            .bindings\n-                            .iter()\n-                            .filter_map(TypeBinding::opt_const)\n-                            .position(|ct| ct.hir_id == hir_id)\n-                            .map(|idx| (idx, seg))\n-                    });\n-                    match binding_filtered {\n-                        Some(inner) => inner,\n-                        None => {\n-                            tcx.sess.delay_span_bug(\n-                                tcx.def_span(def_id),\n-                                \"no arg matching AnonConst in path\",\n-                            );\n-                            return None;\n-                        }\n-                    }\n-                }\n-                Some(inner) => inner,\n+                    .filter_map(TypeBinding::opt_const)\n+                    .position(|ct| ct.hir_id == hir_id)\n+                    .map(|idx| (idx, seg)))\n+            }) else {\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(def_id),\n+                    \"no arg matching AnonConst in path\",\n+                );\n+                return None;\n             };\n \n             // Try to use the segment resolution if it is valid, otherwise we"}, {"sha": "caa629cf4e65e412e4ec9461343b083cf4032f73", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -770,10 +770,14 @@ impl<T> BTreeSet<T> {\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have an equal element present, `true` is returned.\n+    /// Returns whether the value was newly inserted. That is:\n     ///\n-    /// If the set did have an equal element present, `false` is returned, and\n-    /// the entry is not updated. See the [module-level documentation] for more.\n+    /// - If the set did not previously contain an equal value, `true` is\n+    ///   returned.\n+    /// - If the set already contained an equal value, `false` is returned, and\n+    ///   the entry is not updated.\n+    ///\n+    /// See the [module-level documentation] for more.\n     ///\n     /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///"}, {"sha": "a888ced49b3769cb16cd8e9589a0d5db321fa9f9", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -126,7 +126,6 @@ macro_rules! from_str_float_impl {\n             /// ```txt\n             /// Float  ::= Sign? ( 'inf' | 'infinity' | 'nan' | Number )\n             /// Number ::= ( Digit+ |\n-            ///              '.' Digit* |\n             ///              Digit+ '.' Digit* |\n             ///              Digit* '.' Digit+ ) Exp?\n             /// Exp    ::= 'e' Sign? Digit+"}, {"sha": "11ccdd9ea1cc5e90ca76964e0322e9a965cc4c6a", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -896,6 +896,119 @@ where\n         self.base.get_key_value(k)\n     }\n \n+    /// Attempts to get mutable references to `N` values in the map at once.\n+    ///\n+    /// Returns an array of length `N` with the results of each query. For soundness, at most one\n+    /// mutable reference will be returned to any value. `None` will be returned if any of the\n+    /// keys are duplicates or missing.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_many_mut)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut libraries = HashMap::new();\n+    /// libraries.insert(\"Bodleian Library\".to_string(), 1602);\n+    /// libraries.insert(\"Athen\u00e6um\".to_string(), 1807);\n+    /// libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\n+    /// libraries.insert(\"Library of Congress\".to_string(), 1800);\n+    ///\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Library of Congress\",\n+    /// ]);\n+    /// assert_eq!(\n+    ///     got,\n+    ///     Some([\n+    ///         &mut 1807,\n+    ///         &mut 1800,\n+    ///     ]),\n+    /// );\n+    ///\n+    /// // Missing keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"New York Public Library\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    ///\n+    /// // Duplicate keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Athen\u00e6um\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_many_mut\", issue = \"97601\")]\n+    pub fn get_many_mut<Q: ?Sized, const N: usize>(&mut self, ks: [&Q; N]) -> Option<[&'_ mut V; N]>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_many_mut(ks)\n+    }\n+\n+    /// Attempts to get mutable references to `N` values in the map at once, without validating that\n+    /// the values are unique.\n+    ///\n+    /// Returns an array of length `N` with the results of each query. `None` will be returned if\n+    /// any of the keys are missing.\n+    ///\n+    /// For a safe alternative see [`get_many_mut`](Self::get_many_mut).\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method with overlapping keys is *[undefined behavior]* even if the resulting\n+    /// references are not used.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_many_mut)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut libraries = HashMap::new();\n+    /// libraries.insert(\"Bodleian Library\".to_string(), 1602);\n+    /// libraries.insert(\"Athen\u00e6um\".to_string(), 1807);\n+    /// libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\n+    /// libraries.insert(\"Library of Congress\".to_string(), 1800);\n+    ///\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Library of Congress\",\n+    /// ]);\n+    /// assert_eq!(\n+    ///     got,\n+    ///     Some([\n+    ///         &mut 1807,\n+    ///         &mut 1800,\n+    ///     ]),\n+    /// );\n+    ///\n+    /// // Missing keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"New York Public Library\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_many_mut\", issue = \"97601\")]\n+    pub unsafe fn get_many_unchecked_mut<Q: ?Sized, const N: usize>(\n+        &mut self,\n+        ks: [&Q; N],\n+    ) -> Option<[&'_ mut V; N]>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_many_unchecked_mut(ks)\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but"}, {"sha": "19428fe9a2339c315b461b0f7b176fa14072b505", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -858,9 +858,10 @@ where\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have this value present, `true` is returned.\n+    /// Returns whether the value was newly inserted. That is:\n     ///\n-    /// If the set did have this value present, `false` is returned.\n+    /// - If the set did not previously contain this value, `true` is returned.\n+    /// - If the set already contained this value, `false` is returned.\n     ///\n     /// # Examples\n     ///"}, {"sha": "b003fb357d0f9d53ed4e4134ce29d89b78bef4b8", "filename": "src/test/rustdoc/inline_cross/auxiliary/implementors_inline.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimplementors_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimplementors_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimplementors_inline.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -0,0 +1,18 @@\n+pub mod my_trait {\n+    pub trait MyTrait {\n+        fn my_fn(&self) -> Self;\n+    }\n+}\n+\n+pub mod prelude {\n+    #[doc(inline)]\n+    pub use crate::my_trait::MyTrait;\n+}\n+\n+pub struct SomeStruct;\n+\n+impl my_trait::MyTrait for SomeStruct {\n+    fn my_fn(&self) -> SomeStruct {\n+        SomeStruct\n+    }\n+}"}, {"sha": "c79f05d8d3c9be58e05408e89adf69b6a9c9f9d4", "filename": "src/test/rustdoc/inline_cross/implementors-js.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Frustdoc%2Finline_cross%2Fimplementors-js.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Frustdoc%2Finline_cross%2Fimplementors-js.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimplementors-js.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -0,0 +1,25 @@\n+// aux-build:implementors_inline.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate implementors_inline;\n+\n+// @!has implementors/implementors_js/trait.MyTrait.js\n+// @has implementors/implementors_inline/my_trait/trait.MyTrait.js\n+// @!has implementors/implementors_inline/prelude/trait.MyTrait.js\n+// @has implementors_inline/my_trait/trait.MyTrait.html\n+// @has - '//script/@src' '../../implementors/implementors_inline/my_trait/trait.MyTrait.js'\n+// @has implementors_js/trait.MyTrait.html\n+// @has - '//script/@src' '../implementors/implementors_inline/my_trait/trait.MyTrait.js'\n+/// When re-exporting this trait, the HTML will be inlined,\n+/// but, vitally, the JavaScript will be located only at the\n+/// one canonical path.\n+pub use implementors_inline::prelude::MyTrait;\n+\n+pub struct OtherStruct;\n+\n+impl MyTrait for OtherStruct {\n+    fn my_fn(&self) -> OtherStruct {\n+        OtherStruct\n+    }\n+}"}, {"sha": "24161c3bb4858e6aa7aec23cf4d95926cbec4ead", "filename": "src/test/rustdoc/intra-doc/email-address.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -1,8 +1,10 @@\n-#![allow(rustdoc::broken_intra_doc_links)]\n+#![forbid(rustdoc::broken_intra_doc_links)]\n \n //! Email me at <hello@example.com>.\n //! Email me at <hello-world@example.com>.\n-//! Email me at <hello@localhost> (this warns but will still become a link).\n+//! Email me at <hello@localhost>.\n+//! Email me at <prim@i32>.\n // @has email_address/index.html '//a[@href=\"mailto:hello@example.com\"]' 'hello@example.com'\n // @has email_address/index.html '//a[@href=\"mailto:hello-world@example.com\"]' 'hello-world@example.com'\n // @has email_address/index.html '//a[@href=\"mailto:hello@localhost\"]' 'hello@localhost'\n+// @has email_address/index.html '//a[@href=\"mailto:prim@i32\"]' 'prim@i32'"}, {"sha": "943f7f86e55246dc7db866e350651b2bf8cee98e", "filename": "src/test/ui/borrowck/issue-71546.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.rs?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for #71546.\n+\n+// ignore-compare-mode-nll\n+// NLL stderr is different from the original one.\n+\n+pub fn serialize_as_csv<V>(value: &V) -> Result<String, &str>\n+where\n+    V: 'static,\n+    for<'a> &'a V: IntoIterator,\n+    for<'a> <&'a V as IntoIterator>::Item: ToString + 'static,\n+{\n+    let csv_str: String = value //~ ERROR: the associated type `<&'a V as IntoIterator>::Item` may not live long enough\n+        .into_iter()\n+        .map(|elem| elem.to_string())\n+        .collect::<String>();\n+    Ok(csv_str)\n+}\n+\n+fn main() {}"}, {"sha": "d479ca8f1d8b97d5e688eed976107b020c8db595", "filename": "src/test/ui/borrowck/issue-71546.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8256e97231332ef49bd47a74b1809e785ecc78df/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-71546.stderr?ref=8256e97231332ef49bd47a74b1809e785ecc78df", "patch": "@@ -0,0 +1,20 @@\n+error[E0310]: the associated type `<&'a V as IntoIterator>::Item` may not live long enough\n+  --> $DIR/issue-71546.rs:12:27\n+   |\n+LL |       let csv_str: String = value\n+   |  ___________________________^\n+LL | |         .into_iter()\n+LL | |         .map(|elem| elem.to_string())\n+   | |_____________________________________^\n+   |\n+   = help: consider adding an explicit lifetime bound `<&'a V as IntoIterator>::Item: 'static`...\n+   = note: ...so that the type `<&'a V as IntoIterator>::Item` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/issue-71546.rs:10:55\n+   |\n+LL |     for<'a> <&'a V as IntoIterator>::Item: ToString + 'static,\n+   |                                                       ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}]}