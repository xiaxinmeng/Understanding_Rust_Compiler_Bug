{"sha": "9b5de39c25b9b19ffcff3d519821b72a31d39d6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNWRlMzljMjViOWIxOWZmY2ZmM2Q1MTk4MjFiNzJhMzFkMzlkNmM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-17T00:40:57Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-18T20:02:29Z"}, "message": "Address Niko's comments", "tree": {"sha": "6f91503b4828b7fa688e143be0b07f197f6d9f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f91503b4828b7fa688e143be0b07f197f6d9f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5de39c25b9b19ffcff3d519821b72a31d39d6c", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5de39c25b9b19ffcff3d519821b72a31d39d6c", "html_url": "https://github.com/rust-lang/rust/commit/9b5de39c25b9b19ffcff3d519821b72a31d39d6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5de39c25b9b19ffcff3d519821b72a31d39d6c/comments", "author": null, "committer": null, "parents": [{"sha": "d15d1529e0b54d22a3597bcc817b6e1be5e3e0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15d1529e0b54d22a3597bcc817b6e1be5e3e0e7", "html_url": "https://github.com/rust-lang/rust/commit/d15d1529e0b54d22a3597bcc817b6e1be5e3e0e7"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "def82ecd6c85b18e783194ea453aaaee5edf72b0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b5de39c25b9b19ffcff3d519821b72a31d39d6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5de39c25b9b19ffcff3d519821b72a31d39d6c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9b5de39c25b9b19ffcff3d519821b72a31d39d6c", "patch": "@@ -3356,14 +3356,15 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                  trait_did: Option<ast::DefId>,\n                                  ex: &ast::Expr,\n                                  rhs_expr: &ast::Expr,\n-                                 rhs_t: Ty<'tcx>) -> Ty<'tcx> {\n+                                 rhs_t: Ty<'tcx>,\n+                                 op: ast::UnOp) -> Ty<'tcx> {\n        lookup_op_method(fcx, ex, rhs_t, token::intern(mname),\n                         trait_did, rhs_expr, None, || {\n             fcx.type_error_message(ex.span, |actual| {\n                 format!(\"cannot apply unary operator `{}` to type `{}`\",\n                         op_str, actual)\n             }, rhs_t, None);\n-        }, AutorefArgs::No)\n+        }, if ast_util::is_by_value_unop(op) { AutorefArgs::No } else { AutorefArgs::Yes })\n     }\n \n     // Check field access expressions\n@@ -3803,7 +3804,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                          oprnd_t.sty == ty::ty_bool) {\n                         oprnd_t = check_user_unop(fcx, \"!\", \"not\",\n                                                   tcx.lang_items.not_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                                                  expr, &**oprnd, oprnd_t, unop);\n                     }\n                 }\n                 ast::UnNeg => {\n@@ -3813,7 +3814,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                          ty::type_is_fp(oprnd_t)) {\n                         oprnd_t = check_user_unop(fcx, \"-\", \"neg\",\n                                                   tcx.lang_items.neg_trait(),\n-                                                  expr, &**oprnd, oprnd_t);\n+                                                  expr, &**oprnd, oprnd_t, unop);\n                     }\n                 }\n             }"}]}