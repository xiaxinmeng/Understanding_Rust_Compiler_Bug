{"sha": "323f5b2ac922cac6d9a954ad55b2552b6da519b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyM2Y1YjJhYzkyMmNhYzZkOWE5NTRhZDU1YjI1NTJiNmRhNTE5YjM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-28T17:58:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-29T19:36:48Z"}, "message": "Split crate_hash from index_hir.", "tree": {"sha": "98ce723cca79939ad20c1a8412a90713a31c4b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ce723cca79939ad20c1a8412a90713a31c4b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/323f5b2ac922cac6d9a954ad55b2552b6da519b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/323f5b2ac922cac6d9a954ad55b2552b6da519b3", "html_url": "https://github.com/rust-lang/rust/commit/323f5b2ac922cac6d9a954ad55b2552b6da519b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/323f5b2ac922cac6d9a954ad55b2552b6da519b3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553004539eaa14b8338f6f3cabce42c9e705fead", "url": "https://api.github.com/repos/rust-lang/rust/commits/553004539eaa14b8338f6f3cabce42c9e705fead", "html_url": "https://github.com/rust-lang/rust/commit/553004539eaa14b8338f6f3cabce42c9e705fead"}], "stats": {"total": 218, "additions": 99, "deletions": 119}, "files": [{"sha": "d5697513eef1ea017515dcc1d5dd3b59d6048345", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=323f5b2ac922cac6d9a954ad55b2552b6da519b3", "patch": "@@ -91,7 +91,7 @@ macro_rules! arena_types {\n             [] predicates: rustc_middle::ty::PredicateInner<$tcx>,\n \n             // HIR query types\n-            [few] indexed_hir: rustc_middle::hir::map::IndexedHir<$tcx>,\n+            [few] indexed_hir: rustc_middle::hir::IndexedHir<$tcx>,\n             [few] hir_definitions: rustc_hir::definitions::Definitions,\n             [] hir_owner: rustc_middle::hir::Owner<$tcx>,\n             [] hir_owner_nodes: rustc_middle::hir::OwnerNodes<$tcx>,"}, {"sha": "3b804819fb56c32b0afb4f460cf5a4eacd2819dc", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 13, "deletions": 89, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=323f5b2ac922cac6d9a954ad55b2552b6da519b3", "patch": "@@ -2,21 +2,19 @@ use crate::arena::Arena;\n use crate::hir::map::{Entry, HirOwnerData, Map};\n use crate::hir::{Owner, OwnerNodes, ParentedNode};\n use crate::ich::StableHashingContext;\n-use crate::middle::cstore::CrateStore;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n-use rustc_hir::definitions::{self, DefPathHash};\n+use rustc_hir::definitions;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::{CrateDisambiguator, Session};\n+use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::{Span, Symbol, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::iter::repeat;\n \n@@ -40,10 +38,6 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     definitions: &'a definitions::Definitions,\n \n     hcx: StableHashingContext<'a>,\n-\n-    // We are collecting HIR hashes here so we can compute the\n-    // crate hash from them later on.\n-    hir_body_nodes: Vec<(DefPathHash, Fingerprint)>,\n }\n \n fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V) {\n@@ -58,34 +52,13 @@ fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V\n \n fn hash_body(\n     hcx: &mut StableHashingContext<'_>,\n-    def_path_hash: DefPathHash,\n     item_like: impl for<'a> HashStable<StableHashingContext<'a>>,\n-    hir_body_nodes: &mut Vec<(DefPathHash, Fingerprint)>,\n ) -> Fingerprint {\n-    let hash = {\n-        let mut stable_hasher = StableHasher::new();\n-        hcx.while_hashing_hir_bodies(true, |hcx| {\n-            item_like.hash_stable(hcx, &mut stable_hasher);\n-        });\n-        stable_hasher.finish()\n-    };\n-    hir_body_nodes.push((def_path_hash, hash));\n-    hash\n-}\n-\n-fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n-    let mut upstream_crates: Vec<_> = cstore\n-        .crates_untracked()\n-        .iter()\n-        .map(|&cnum| {\n-            let name = cstore.crate_name_untracked(cnum);\n-            let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n-            let hash = cstore.crate_hash_untracked(cnum);\n-            (name, disambiguator, hash)\n-        })\n-        .collect();\n-    upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n-    upstream_crates\n+    let mut stable_hasher = StableHasher::new();\n+    hcx.while_hashing_hir_bodies(true, |hcx| {\n+        item_like.hash_stable(hcx, &mut stable_hasher);\n+    });\n+    stable_hasher.finish()\n }\n \n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n@@ -96,11 +69,6 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         definitions: &'a definitions::Definitions,\n         mut hcx: StableHashingContext<'a>,\n     ) -> NodeCollector<'a, 'hir> {\n-        let root_mod_def_path_hash =\n-            definitions.def_path_hash(LocalDefId { local_def_index: CRATE_DEF_INDEX });\n-\n-        let mut hir_body_nodes = Vec::new();\n-\n         let hash = {\n             let Crate {\n                 ref item,\n@@ -120,7 +88,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 attrs: _,\n             } = *krate;\n \n-            hash_body(&mut hcx, root_mod_def_path_hash, item, &mut hir_body_nodes)\n+            hash_body(&mut hcx, item)\n         };\n \n         let mut collector = NodeCollector {\n@@ -131,7 +99,6 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             current_dep_node_owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n             definitions,\n             hcx,\n-            hir_body_nodes,\n             map: (0..definitions.def_index_count())\n                 .map(|_| HirOwnerData { signature: None, with_bodies: None })\n                 .collect(),\n@@ -147,53 +114,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     pub(super) fn finalize_and_compute_crate_hash(\n         mut self,\n-        crate_disambiguator: CrateDisambiguator,\n-        cstore: &dyn CrateStore,\n-        commandline_args_hash: u64,\n-    ) -> (IndexVec<LocalDefId, HirOwnerData<'hir>>, Svh) {\n+    ) -> IndexVec<LocalDefId, HirOwnerData<'hir>> {\n         // Insert bodies into the map\n         for (id, body) in self.krate.bodies.iter() {\n             let bodies = &mut self.map[id.hir_id.owner].with_bodies.as_mut().unwrap().bodies;\n             assert!(bodies.insert(id.hir_id.local_id, body).is_none());\n         }\n-\n-        self.hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n-\n-        let node_hashes = self.hir_body_nodes.iter().fold(\n-            Fingerprint::ZERO,\n-            |combined_fingerprint, &(def_path_hash, fingerprint)| {\n-                combined_fingerprint.combine(def_path_hash.0.combine(fingerprint))\n-            },\n-        );\n-\n-        let upstream_crates = upstream_crates(cstore);\n-\n-        // We hash the final, remapped names of all local source files so we\n-        // don't have to include the path prefix remapping commandline args.\n-        // If we included the full mapping in the SVH, we could only have\n-        // reproducible builds by compiling from the same directory. So we just\n-        // hash the result of the mapping instead of the mapping itself.\n-        let mut source_file_names: Vec<_> = self\n-            .source_map\n-            .files()\n-            .iter()\n-            .filter(|source_file| source_file.cnum == LOCAL_CRATE)\n-            .map(|source_file| source_file.name_hash)\n-            .collect();\n-\n-        source_file_names.sort_unstable();\n-\n-        let crate_hash_input = (\n-            ((node_hashes, upstream_crates), source_file_names),\n-            (commandline_args_hash, crate_disambiguator.to_fingerprint()),\n-        );\n-\n-        let mut stable_hasher = StableHasher::new();\n-        crate_hash_input.hash_stable(&mut self.hcx, &mut stable_hasher);\n-        let crate_hash: Fingerprint = stable_hasher.finish();\n-\n-        let svh = Svh::new(crate_hash.to_smaller_hash());\n-        (self.map, svh)\n+        self.map\n     }\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>, hash: Fingerprint) {\n@@ -294,10 +221,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         f: F,\n     ) {\n         let prev_owner = self.current_dep_node_owner;\n-\n-        let def_path_hash = self.definitions.def_path_hash(dep_node_owner);\n-\n-        let hash = hash_body(&mut self.hcx, def_path_hash, item_like, &mut self.hir_body_nodes);\n+        let hash = hash_body(&mut self.hcx, item_like);\n \n         self.current_dep_node_owner = dep_node_owner;\n         f(self, hash);"}, {"sha": "1148c587c4d016049abab586673c1ca05764d108", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 72, "deletions": 21, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=323f5b2ac922cac6d9a954ad55b2552b6da519b3", "patch": "@@ -1,8 +1,11 @@\n use self::collector::NodeCollector;\n \n-use crate::hir::{Owner, OwnerNodes};\n+use crate::hir::{HirOwnerData, IndexedHir};\n+use crate::middle::cstore::CrateStore;\n use crate::ty::TyCtxt;\n use rustc_ast as ast;\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -11,7 +14,6 @@ use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n-use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -86,20 +88,6 @@ fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n     }\n }\n \n-#[derive(Debug)]\n-pub(super) struct HirOwnerData<'hir> {\n-    pub(super) signature: Option<&'hir Owner<'hir>>,\n-    pub(super) with_bodies: Option<&'hir mut OwnerNodes<'hir>>,\n-}\n-\n-#[derive(Debug)]\n-pub struct IndexedHir<'hir> {\n-    /// The SVH of the local crate.\n-    pub crate_hash: Svh,\n-\n-    pub(super) map: IndexVec<LocalDefId, HirOwnerData<'hir>>,\n-}\n-\n #[derive(Copy, Clone)]\n pub struct Map<'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n@@ -935,19 +923,82 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n \n     let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n-    let (map, crate_hash) = {\n+    let map = {\n         let hcx = tcx.create_stable_hashing_context();\n \n         let mut collector =\n             NodeCollector::root(tcx.sess, &**tcx.arena, tcx.untracked_crate, &tcx.definitions, hcx);\n         intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n \n-        let crate_disambiguator = tcx.sess.local_crate_disambiguator();\n-        let cmdline_args = tcx.sess.opts.dep_tracking_hash(true);\n-        collector.finalize_and_compute_crate_hash(crate_disambiguator, &*tcx.cstore, cmdline_args)\n+        collector.finalize_and_compute_crate_hash()\n     };\n \n-    tcx.arena.alloc(IndexedHir { crate_hash, map })\n+    tcx.arena.alloc(IndexedHir { map })\n+}\n+\n+pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n+    let mut hir_body_nodes: Vec<_> = tcx\n+        .index_hir(crate_num)\n+        .map\n+        .iter_enumerated()\n+        .filter_map(|(def_id, hod)| {\n+            let def_path_hash = tcx.definitions.def_path_hash(def_id);\n+            let hash = hod.with_bodies.as_ref()?.hash;\n+            Some((def_path_hash, hash))\n+        })\n+        .collect();\n+    hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n+\n+    let node_hashes = hir_body_nodes.iter().fold(\n+        Fingerprint::ZERO,\n+        |combined_fingerprint, &(def_path_hash, fingerprint)| {\n+            combined_fingerprint.combine(def_path_hash.0.combine(fingerprint))\n+        },\n+    );\n+\n+    let upstream_crates = upstream_crates(&*tcx.cstore);\n+\n+    // We hash the final, remapped names of all local source files so we\n+    // don't have to include the path prefix remapping commandline args.\n+    // If we included the full mapping in the SVH, we could only have\n+    // reproducible builds by compiling from the same directory. So we just\n+    // hash the result of the mapping instead of the mapping itself.\n+    let mut source_file_names: Vec<_> = tcx\n+        .sess\n+        .source_map()\n+        .files()\n+        .iter()\n+        .filter(|source_file| source_file.cnum == LOCAL_CRATE)\n+        .map(|source_file| source_file.name_hash)\n+        .collect();\n+\n+    source_file_names.sort_unstable();\n+\n+    let mut hcx = tcx.create_stable_hashing_context();\n+    let mut stable_hasher = StableHasher::new();\n+    node_hashes.hash_stable(&mut hcx, &mut stable_hasher);\n+    upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n+    source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n+    tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);\n+    tcx.sess.local_crate_disambiguator().to_fingerprint().hash_stable(&mut hcx, &mut stable_hasher);\n+\n+    let crate_hash: Fingerprint = stable_hasher.finish();\n+    Svh::new(crate_hash.to_smaller_hash())\n+}\n+\n+fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n+    let mut upstream_crates: Vec<_> = cstore\n+        .crates_untracked()\n+        .iter()\n+        .map(|&cnum| {\n+            let name = cstore.crate_name_untracked(cnum);\n+            let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n+            let hash = cstore.crate_hash_untracked(cnum);\n+            (name, disambiguator, hash)\n+        })\n+        .collect();\n+    upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n+    upstream_crates\n }\n \n fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {"}, {"sha": "c13c8404bae11458b52b2820276e67d66ab2d92a", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=323f5b2ac922cac6d9a954ad55b2552b6da519b3", "patch": "@@ -19,6 +19,17 @@ use rustc_index::vec::IndexVec;\n use rustc_span::DUMMY_SP;\n use std::collections::BTreeMap;\n \n+#[derive(Debug)]\n+struct HirOwnerData<'hir> {\n+    signature: Option<&'hir Owner<'hir>>,\n+    with_bodies: Option<&'hir mut OwnerNodes<'hir>>,\n+}\n+\n+#[derive(Debug)]\n+pub struct IndexedHir<'hir> {\n+    map: IndexVec<LocalDefId, HirOwnerData<'hir>>,\n+}\n+\n #[derive(Debug)]\n pub struct Owner<'tcx> {\n     parent: HirId,\n@@ -117,6 +128,7 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.hir_crate = |tcx, _| tcx.untracked_crate;\n     providers.index_hir = map::index_hir;\n+    providers.crate_hash = map::crate_hash;\n     providers.hir_module_items = |tcx, id| &tcx.untracked_crate.modules[&id];\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n     providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();"}, {"sha": "2c87cf52a864d67daa1ae6447f6d687b35a21849", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=323f5b2ac922cac6d9a954ad55b2552b6da519b3", "patch": "@@ -28,7 +28,7 @@ rustc_queries! {\n \n     /// The indexed HIR. This can be conveniently accessed by `tcx.hir()`.\n     /// Avoid calling this query directly.\n-    query index_hir(_: CrateNum) -> &'tcx map::IndexedHir<'tcx> {\n+    query index_hir(_: CrateNum) -> &'tcx crate::hir::IndexedHir<'tcx> {\n         eval_always\n         no_hash\n         desc { \"index HIR\" }"}, {"sha": "81230e32f56bd926cfecbc86a61682721a9f4bdd", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=323f5b2ac922cac6d9a954ad55b2552b6da519b3", "patch": "@@ -1,6 +1,5 @@\n use crate::dep_graph;\n use crate::hir::exports::Export;\n-use crate::hir::map;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;"}, {"sha": "144c7281b67c1a2e996e10d0b5af652f166a7cb8", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323f5b2ac922cac6d9a954ad55b2552b6da519b3/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=323f5b2ac922cac6d9a954ad55b2552b6da519b3", "patch": "@@ -1,5 +1,4 @@\n use rustc_data_structures::fx::FxIndexSet;\n-use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_middle::hir::map as hir_map;\n@@ -400,10 +399,6 @@ fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n     tcx.crate_name\n }\n \n-fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n-    tcx.index_hir(crate_num).crate_hash\n-}\n-\n fn instance_def_size_estimate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance_def: ty::InstanceDef<'tcx>,\n@@ -551,7 +546,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         trait_of_item,\n         crate_disambiguator,\n         original_crate_name,\n-        crate_hash,\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,"}]}