{"sha": "aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "node_id": "C_kwDOAAsO6NoAKGFhODgxZjE2ZWNjZmQzNjE0YmMzZDQwYWFmOWIxYWY2ZDg2MGMxNmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-16T07:57:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-16T07:57:05Z"}, "message": "Rollup merge of #108875 - notriddle:notriddle/return-trait, r=GuillaumeGomez\n\nrustdoc: fix type search for `Option` combinators", "tree": {"sha": "3eb673fc3f780e8dba6288acb02ceb72e818bdd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eb673fc3f780e8dba6288acb02ceb72e818bdd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEsvRCRBK7hj4Ov3rIwAA/McIAAaxwymhRzBgR/8LEGUv7xD4\nM1fk58iQWSmulB5ad4xJoJXniEVrhLfK7BLjNau+eSFD0ujUQoJFr+CjtwKl2ieQ\nsoq5mxqer27ws5CTQ8k4Es8J+w1IpUQ7Vk+6QktTm7t26WYmZ6SwqT2UCz20YcGV\nrzZzADyij8uXQ/dz52Z0bpEZakFMtGgcLoVsX0MZNN6+9gJd856mOMAu/RKwKKKj\nEhw4k26gSLICGpJEUYQYZoNDUGHJMQteUDgPc7stGGUeG02yOO8TAQj1bjQInc9F\nNJfGo+LPkf8XUx/8TbaUohIKcoX5eJR7MJXgdZyIccY+DGKqKQ4lAwysthuh7I0=\n=u38F\n-----END PGP SIGNATURE-----\n", "payload": "tree 3eb673fc3f780e8dba6288acb02ceb72e818bdd0\nparent 18e305dfca6dfef07478378cb9a673fdba6ac3b3\nparent 44813e038c62ac975f4efaf8fb588949d24528af\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678953425 +0100\ncommitter GitHub <noreply@github.com> 1678953425 +0100\n\nRollup merge of #108875 - notriddle:notriddle/return-trait, r=GuillaumeGomez\n\nrustdoc: fix type search for `Option` combinators\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "html_url": "https://github.com/rust-lang/rust/commit/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e305dfca6dfef07478378cb9a673fdba6ac3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e305dfca6dfef07478378cb9a673fdba6ac3b3", "html_url": "https://github.com/rust-lang/rust/commit/18e305dfca6dfef07478378cb9a673fdba6ac3b3"}, {"sha": "44813e038c62ac975f4efaf8fb588949d24528af", "url": "https://api.github.com/repos/rust-lang/rust/commits/44813e038c62ac975f4efaf8fb588949d24528af", "html_url": "https://github.com/rust-lang/rust/commit/44813e038c62ac975f4efaf8fb588949d24528af"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "08a0e1c377ef8231f4e5a60b03d1c1037ec5b7c6", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "patch": "@@ -486,7 +486,7 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n     }\n \n     // First, check if it's \"Self\".\n-    let arg = if let Some(self_) = self_ {\n+    let mut arg = if let Some(self_) = self_ {\n         match &*arg {\n             Type::BorrowedRef { type_, .. } if type_.is_self_type() => self_,\n             type_ if type_.is_self_type() => self_,\n@@ -496,11 +496,16 @@ fn add_generics_and_bounds_as_types<'tcx, 'a>(\n         arg\n     };\n \n+    // strip references from the argument type\n+    while let Type::BorrowedRef { type_, .. } = &*arg {\n+        arg = &*type_;\n+    }\n+\n     // If this argument is a type parameter and not a trait bound or a type, we need to look\n     // for its bounds.\n     if let Type::Generic(arg_s) = *arg {\n         // First we check if the bounds are in a `where` predicate...\n-        if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n+        for where_pred in generics.where_predicates.iter().filter(|g| match g {\n             WherePredicate::BoundPredicate { ty: Type::Generic(ty_s), .. } => *ty_s == arg_s,\n             _ => false,\n         }) {"}, {"sha": "6bf421a21356072eda42297d227e7de6bf7492f8", "filename": "tests/rustdoc-js-std/option-type-signatures.js", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "raw_url": "https://github.com/rust-lang/rust/raw/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Foption-type-signatures.js?ref=aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "patch": "@@ -1,7 +1,18 @@\n-const QUERY = 'option, fnonce -> option';\n+const QUERY = [\n+    'option, fnonce -> option',\n+    'option -> default',\n+];\n \n-const EXPECTED = {\n-    'others': [\n-        { 'path': 'std::option::Option', 'name': 'map' },\n-    ],\n-};\n+const EXPECTED = [\n+    {\n+        'others': [\n+            { 'path': 'std::option::Option', 'name': 'map' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'std::option::Option', 'name': 'unwrap_or_default' },\n+            { 'path': 'std::option::Option', 'name': 'get_or_insert_default' },\n+        ],\n+    },\n+];"}, {"sha": "86254a80e20f3623ac14e93bbba366cc4342bbde", "filename": "tests/rustdoc-js/where-clause.js", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/tests%2Frustdoc-js%2Fwhere-clause.js", "raw_url": "https://github.com/rust-lang/rust/raw/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/tests%2Frustdoc-js%2Fwhere-clause.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fwhere-clause.js?ref=aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "patch": "@@ -1,4 +1,4 @@\n-const QUERY = ['trait<nested>', '-> trait<nested>', 't1, t2'];\n+const QUERY = ['trait<nested>', '-> trait<nested>', 't1, t2', '-> shazam', 'drizzel -> shazam'];\n \n const EXPECTED = [\n     {\n@@ -16,4 +16,15 @@ const EXPECTED = [\n             { 'path': 'where_clause', 'name': 'presto' },\n         ],\n     },\n+    {\n+        'others': [\n+            { 'path': 'where_clause', 'name': 'bippety' },\n+            { 'path': 'where_clause::Drizzel', 'name': 'boppety' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'where_clause::Drizzel', 'name': 'boppety' },\n+        ],\n+    },\n ];"}, {"sha": "56c01019fb69fb70fbcb2ff8b1483508da01094c", "filename": "tests/rustdoc-js/where-clause.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/tests%2Frustdoc-js%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa881f16eccfd3614bc3d40aaf9b1af6d860c16a/tests%2Frustdoc-js%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fwhere-clause.rs?ref=aa881f16eccfd3614bc3d40aaf9b1af6d860c16a", "patch": "@@ -14,3 +14,17 @@ pub trait T2<'a, T> {\n }\n \n pub fn presto<A, B>(_: A, _: B) where A: T1, B: for <'b> T2<'b, Nested> {}\n+\n+pub trait Shazam {}\n+\n+pub fn bippety<X>() -> &'static X where X: Shazam {\n+    panic!()\n+}\n+\n+pub struct Drizzel<T>(T);\n+\n+impl<T> Drizzel<T> {\n+    pub fn boppety(&self) -> &T where T: Shazam {\n+        panic!();\n+    }\n+}"}]}