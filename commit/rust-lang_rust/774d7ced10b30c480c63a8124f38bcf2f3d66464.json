{"sha": "774d7ced10b30c480c63a8124f38bcf2f3d66464", "node_id": "C_kwDOAAsO6NoAKDc3NGQ3Y2VkMTBiMzBjNDgwYzYzYTgxMjRmMzhiY2YyZjNkNjY0NjQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-28T23:12:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-28T23:12:33Z"}, "message": "Rollup merge of #97482 - RalfJung:ptr-invalid, r=thomcc\n\nptr::invalid is not equivalent to a int2ptr cast\n\nI just realized I forgot to update these docs when adding `from_exposed_addr`.\nRight now the docs say `invalid` and `from_exposed_addr` are both equivalent to a cast, and that is clearly not what we want.\n\nCc ``@Gankra``", "tree": {"sha": "4f5f4fc8d8e0d086ef04f7468877d45d400127c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f5f4fc8d8e0d086ef04f7468877d45d400127c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774d7ced10b30c480c63a8124f38bcf2f3d66464", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJikqxhCRBK7hj4Ov3rIwAAx80IAGWQld2MTbLXQNWD7oBVs+Xn\nsj0NMQ+3nfdze8i389lkRiXO5/HTULRffBTbDNyylucysjipCQ8KGWI1/BA+wanR\nkokVVG48JoQnihgEieDKTWeOAUtu7YvvzZuG2GZ9JQ4uE2EC1YWXFIVSAyTVC3l5\neHGGQDiklzEaKGv281/kkeVFf4eEXfRANyO9GjqiaodWyuzNC3+IRkPMr3ufe9Oc\nn24uM2WMmova4hBAF7656QsZ8AbS3frzNWGE8FE5ybFrCiC4k3deovowBhTdqI9V\nbhG/YgF+fnpKa5nrlnsXiRAsECp0K02MMFHxuUeVux2NbrseEpSX5S4jUuwwo34=\n=HXqw\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f5f4fc8d8e0d086ef04f7468877d45d400127c7\nparent 37bac9cacbd4811b1e385ce2d6aab8b9a26bd07d\nparent 852777eff12bfc99b355e7c9ddd803d11cd795aa\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1653779553 +0200\ncommitter GitHub <noreply@github.com> 1653779553 +0200\n\nRollup merge of #97482 - RalfJung:ptr-invalid, r=thomcc\n\nptr::invalid is not equivalent to a int2ptr cast\n\nI just realized I forgot to update these docs when adding `from_exposed_addr`.\nRight now the docs say `invalid` and `from_exposed_addr` are both equivalent to a cast, and that is clearly not what we want.\n\nCc ``@Gankra``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774d7ced10b30c480c63a8124f38bcf2f3d66464", "html_url": "https://github.com/rust-lang/rust/commit/774d7ced10b30c480c63a8124f38bcf2f3d66464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774d7ced10b30c480c63a8124f38bcf2f3d66464/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37bac9cacbd4811b1e385ce2d6aab8b9a26bd07d", "url": "https://api.github.com/repos/rust-lang/rust/commits/37bac9cacbd4811b1e385ce2d6aab8b9a26bd07d", "html_url": "https://github.com/rust-lang/rust/commit/37bac9cacbd4811b1e385ce2d6aab8b9a26bd07d"}, {"sha": "852777eff12bfc99b355e7c9ddd803d11cd795aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/852777eff12bfc99b355e7c9ddd803d11cd795aa", "html_url": "https://github.com/rust-lang/rust/commit/852777eff12bfc99b355e7c9ddd803d11cd795aa"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "6b1e63e0cfaae8de34a3609dea1029d0911af504", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/774d7ced10b30c480c63a8124f38bcf2f3d66464/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774d7ced10b30c480c63a8124f38bcf2f3d66464/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=774d7ced10b30c480c63a8124f38bcf2f3d66464", "patch": "@@ -26,6 +26,7 @@\n //!   some memory happens to exist at that address and gets deallocated. This corresponds to writing\n //!   your own allocator: allocating zero-sized objects is not very hard. The canonical way to\n //!   obtain a pointer that is valid for zero-sized accesses is [`NonNull::dangling`].\n+//FIXME: mention `ptr::invalid` above, once it is stable.\n //! * All accesses performed by functions in this module are *non-atomic* in the sense\n //!   of [atomic operations] used to synchronize between threads. This means it is\n //!   undefined behavior to perform two concurrent accesses to the same location from different\n@@ -557,16 +558,16 @@ pub const fn null_mut<T>() -> *mut T {\n \n /// Creates an invalid pointer with the given address.\n ///\n-/// This is *currently* equivalent to `addr as *const T` but it expresses the intended semantic\n-/// more clearly, and may become important under future memory models.\n+/// This is different from `addr as *const T`, which creates a pointer that picks up a previously\n+/// exposed provenance. See [`from_exposed_addr`] for more details on that operation.\n ///\n /// The module's top-level documentation discusses the precise meaning of an \"invalid\"\n /// pointer but essentially this expresses that the pointer is not associated\n /// with any actual allocation and is little more than a usize address in disguise.\n ///\n /// This pointer will have no provenance associated with it and is therefore\n /// UB to read/write/offset. This mostly exists to facilitate things\n-/// like ptr::null and NonNull::dangling which make invalid pointers.\n+/// like `ptr::null` and `NonNull::dangling` which make invalid pointers.\n ///\n /// (Standard \"Zero-Sized-Types get to cheat and lie\" caveats apply, although it\n /// may be desirable to give them their own API just to make that 100% clear.)\n@@ -588,16 +589,16 @@ pub const fn invalid<T>(addr: usize) -> *const T {\n \n /// Creates an invalid mutable pointer with the given address.\n ///\n-/// This is *currently* equivalent to `addr as *mut T` but it expresses the intended semantic\n-/// more clearly, and may become important under future memory models.\n+/// This is different from `addr as *mut T`, which creates a pointer that picks up a previously\n+/// exposed provenance. See [`from_exposed_addr_mut`] for more details on that operation.\n ///\n /// The module's top-level documentation discusses the precise meaning of an \"invalid\"\n /// pointer but essentially this expresses that the pointer is not associated\n /// with any actual allocation and is little more than a usize address in disguise.\n ///\n /// This pointer will have no provenance associated with it and is therefore\n /// UB to read/write/offset. This mostly exists to facilitate things\n-/// like ptr::null and NonNull::dangling which make invalid pointers.\n+/// like `ptr::null` and `NonNull::dangling` which make invalid pointers.\n ///\n /// (Standard \"Zero-Sized-Types get to cheat and lie\" caveats apply, although it\n /// may be desirable to give them their own API just to make that 100% clear.)"}]}