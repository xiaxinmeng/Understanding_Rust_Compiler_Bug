{"sha": "c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OTQwZTBmOTBkN2QwZTE3ODRhZGUyYjllMWNjYzdhZTdhY2ZkNGE=", "commit": {"author": {"name": "David Laban", "email": "alsuren@gmail.com", "date": "2019-08-06T14:20:47Z"}, "committer": {"name": "David Laban", "email": "alsuren@gmail.com", "date": "2019-08-06T14:20:47Z"}, "message": "test drop order for locals when a future is dropped part-way through execution", "tree": {"sha": "8ee9bfb6bdc5dfc56b3c35713302d15fc0b5b464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ee9bfb6bdc5dfc56b3c35713302d15fc0b5b464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a", "html_url": "https://github.com/rust-lang/rust/commit/c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a/comments", "author": {"login": "alsuren", "id": 254647, "node_id": "MDQ6VXNlcjI1NDY0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/254647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alsuren", "html_url": "https://github.com/alsuren", "followers_url": "https://api.github.com/users/alsuren/followers", "following_url": "https://api.github.com/users/alsuren/following{/other_user}", "gists_url": "https://api.github.com/users/alsuren/gists{/gist_id}", "starred_url": "https://api.github.com/users/alsuren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alsuren/subscriptions", "organizations_url": "https://api.github.com/users/alsuren/orgs", "repos_url": "https://api.github.com/users/alsuren/repos", "events_url": "https://api.github.com/users/alsuren/events{/privacy}", "received_events_url": "https://api.github.com/users/alsuren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alsuren", "id": 254647, "node_id": "MDQ6VXNlcjI1NDY0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/254647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alsuren", "html_url": "https://github.com/alsuren", "followers_url": "https://api.github.com/users/alsuren/followers", "following_url": "https://api.github.com/users/alsuren/following{/other_user}", "gists_url": "https://api.github.com/users/alsuren/gists{/gist_id}", "starred_url": "https://api.github.com/users/alsuren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alsuren/subscriptions", "organizations_url": "https://api.github.com/users/alsuren/orgs", "repos_url": "https://api.github.com/users/alsuren/repos", "events_url": "https://api.github.com/users/alsuren/events{/privacy}", "received_events_url": "https://api.github.com/users/alsuren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3882ed4abcd86c0f6d4ad19beece83998e5685a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3882ed4abcd86c0f6d4ad19beece83998e5685a8", "html_url": "https://github.com/rust-lang/rust/commit/3882ed4abcd86c0f6d4ad19beece83998e5685a8"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "db396d3957e13c1ce005b3282e8c36f859533919", "filename": "src/test/ui/async-await/drop-order/drop-order-for-locals-when-cancelled.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs?ref=c4940e0f90d7d0e1784ade2b9e1ccc7ae7acfd4a", "patch": "@@ -0,0 +1,176 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![deny(dead_code)]\n+#![feature(async_await)]\n+\n+// Test that the drop order for locals in a fn and async fn matches up.\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::pin::Pin;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+struct NeverReady;\n+\n+impl Future for NeverReady {\n+    type Output = ();\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        Poll::Pending\n+    }\n+}\n+\n+async fn simple_variable_declaration_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    NeverReady.await;\n+}\n+\n+fn simple_variable_declaration_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+}\n+\n+async fn varable_completely_contained_within_block_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    async {\n+        let x = D(\"x\", l.clone());\n+    }\n+        .await;\n+    let y = D(\"y\", l.clone());\n+    NeverReady.await;\n+}\n+\n+fn varable_completely_contained_within_block_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    {\n+        let x = D(\"x\", l.clone());\n+    }\n+    let y = D(\"y\", l.clone());\n+}\n+\n+async fn variables_moved_into_separate_blocks_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    async move { x }.await;\n+    async move { y }.await;\n+    NeverReady.await;\n+}\n+\n+fn variables_moved_into_separate_blocks_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    {\n+        x\n+    };\n+    {\n+        y\n+    };\n+}\n+\n+async fn variables_moved_into_same_block_async(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    async move {\n+        x;\n+        y;\n+    };\n+    NeverReady.await;\n+}\n+\n+fn variables_moved_into_same_block_sync(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    {\n+        x;\n+        y;\n+    };\n+    return;\n+}\n+\n+async fn move_after_current_await_doesnt_affect_order(l: DropOrderListPtr) {\n+    l.borrow_mut().push(DropOrder::Function);\n+    let x = D(\"x\", l.clone());\n+    let y = D(\"y\", l.clone());\n+    NeverReady.await;\n+    async move {\n+        x;\n+        y;\n+    };\n+}\n+\n+fn assert_drop_order_after_cancel<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+    drop(fut);\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    assert_drop_order_after_cancel(\n+        simple_variable_declaration_async,\n+        simple_variable_declaration_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        varable_completely_contained_within_block_async,\n+        varable_completely_contained_within_block_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        variables_moved_into_separate_blocks_async,\n+        variables_moved_into_separate_blocks_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        variables_moved_into_same_block_async,\n+        variables_moved_into_same_block_sync,\n+    );\n+    assert_drop_order_after_cancel(\n+        move_after_current_await_doesnt_affect_order,\n+        simple_variable_declaration_sync,\n+    );\n+}"}]}