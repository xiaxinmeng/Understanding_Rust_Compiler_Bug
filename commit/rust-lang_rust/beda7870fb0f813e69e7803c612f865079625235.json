{"sha": "beda7870fb0f813e69e7803c612f865079625235", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZGE3ODcwZmIwZjgxM2U2OWU3ODAzYzYxMmY4NjUwNzk2MjUyMzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-12T20:08:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "Split debuginfo/line_info.rs from debuginfo/mod.rs", "tree": {"sha": "d7258f81b23980f65fce7fec3e5dcd87935eda63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7258f81b23980f65fce7fec3e5dcd87935eda63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beda7870fb0f813e69e7803c612f865079625235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beda7870fb0f813e69e7803c612f865079625235", "html_url": "https://github.com/rust-lang/rust/commit/beda7870fb0f813e69e7803c612f865079625235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beda7870fb0f813e69e7803c612f865079625235/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed758912d31c159c26768a4603db55372f948b82", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed758912d31c159c26768a4603db55372f948b82", "html_url": "https://github.com/rust-lang/rust/commit/ed758912d31c159c26768a4603db55372f948b82"}], "stats": {"total": 287, "additions": 153, "deletions": 134}, "files": [{"sha": "dc380c623f6a1d4bfd087b5bef10a346c0ca5797", "filename": "src/debuginfo/line_info.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/beda7870fb0f813e69e7803c612f865079625235/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda7870fb0f813e69e7803c612f865079625235/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=beda7870fb0f813e69e7803c612f865079625235", "patch": "@@ -0,0 +1,149 @@\n+use crate::prelude::*;\n+\n+use syntax::source_map::FileName;\n+\n+use gimli::write::{\n+    Address, AttributeValue, FileId, LineProgram, LineString,\n+    LineStringTable, Range, UnitEntryId,\n+};\n+\n+fn line_program_add_file(\n+    line_program: &mut LineProgram,\n+    line_strings: &mut LineStringTable,\n+    file: &FileName,\n+) -> FileId {\n+    match file {\n+        FileName::Real(path) => {\n+            let dir_name = path.parent().unwrap().to_str().unwrap().as_bytes();\n+            let dir_id = if !dir_name.is_empty() {\n+                let dir_name = LineString::new(dir_name, line_program.encoding(), line_strings);\n+                line_program.add_directory(dir_name)\n+            } else {\n+                line_program.default_directory()\n+            };\n+            let file_name = LineString::new(\n+                path.file_name().unwrap().to_str().unwrap().as_bytes(),\n+                line_program.encoding(),\n+                line_strings,\n+            );\n+            line_program.add_file(file_name, dir_id, None)\n+        }\n+        // FIXME give more appropriate file names\n+        _ => {\n+            let dir_id = line_program.default_directory();\n+            let dummy_file_name = LineString::new(\n+                file.to_string().into_bytes(),\n+                line_program.encoding(),\n+                line_strings,\n+            );\n+            line_program.add_file(dummy_file_name, dir_id, None)\n+        }\n+    }\n+}\n+\n+impl<'tcx> DebugContext<'tcx> {\n+    pub(super) fn emit_location(&mut self, entry_id: UnitEntryId, span: Span) {\n+        let loc = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+\n+        let file_id = line_program_add_file(\n+            &mut self.dwarf.unit.line_program,\n+            &mut self.dwarf.line_strings,\n+            &loc.file.name,\n+        );\n+\n+        let entry = self.dwarf.unit.get_mut(entry_id);\n+\n+        entry.set(\n+            gimli::DW_AT_decl_file,\n+            AttributeValue::FileIndex(Some(file_id)),\n+        );\n+        entry.set(\n+            gimli::DW_AT_decl_line,\n+            AttributeValue::Udata(loc.line as u64),\n+        );\n+        // FIXME: probably omit this\n+        entry.set(\n+            gimli::DW_AT_decl_column,\n+            AttributeValue::Udata(loc.col.to_usize() as u64),\n+        );\n+    }\n+}\n+\n+impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n+    pub(crate) fn create_debug_lines(\n+        &mut self,\n+        context: &Context,\n+        isa: &dyn cranelift::codegen::isa::TargetIsa,\n+        source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n+    ) {\n+        let tcx = self.debug_context.tcx;\n+\n+        let line_program = &mut self.debug_context.dwarf.unit.line_program;\n+\n+        line_program.begin_sequence(Some(Address::Symbol {\n+            symbol: self.symbol,\n+            addend: 0,\n+        }));\n+\n+        let encinfo = isa.encoding_info();\n+        let func = &context.func;\n+        let mut ebbs = func.layout.ebbs().collect::<Vec<_>>();\n+        ebbs.sort_by_key(|ebb| func.offsets[*ebb]); // Ensure inst offsets always increase\n+\n+        let line_strings = &mut self.debug_context.dwarf.line_strings;\n+        let mut create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n+            let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n+            let file_id = line_program_add_file(line_program, line_strings, &loc.file.name);\n+\n+            /*println!(\n+                \"srcloc {:>04X} {}:{}:{}\",\n+                line_program.row().address_offset,\n+                file.display(),\n+                loc.line,\n+                loc.col.to_u32()\n+            );*/\n+\n+            line_program.row().file = file_id;\n+            line_program.row().line = loc.line as u64;\n+            line_program.row().column = loc.col.to_u32() as u64 + 1;\n+            line_program.generate_row();\n+        };\n+\n+        let mut end = 0;\n+        for ebb in ebbs {\n+            for (offset, inst, size) in func.inst_offsets(ebb, &encinfo) {\n+                let srcloc = func.srclocs[inst];\n+                line_program.row().address_offset = offset as u64;\n+                if !srcloc.is_default() {\n+                    let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n+                    create_row_for_span(line_program, source_info.0);\n+                } else {\n+                    create_row_for_span(line_program, self.mir.span);\n+                }\n+                end = offset + size;\n+            }\n+        }\n+\n+        line_program.end_sequence(end as u64);\n+\n+        let entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n+        entry.set(\n+            gimli::DW_AT_low_pc,\n+            AttributeValue::Address(Address::Symbol { symbol: self.symbol, addend: 0 }),\n+        );\n+        entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(end as u64));\n+\n+        self.debug_context.emit_location(self.entry_id, self.mir.span);\n+\n+        self.debug_context\n+            .unit_range_list\n+            .0\n+            .push(Range::StartLength {\n+                begin: Address::Symbol {\n+                    symbol: self.symbol,\n+                    addend: 0,\n+                },\n+                length: end as u64,\n+            });\n+    }\n+}"}, {"sha": "f710f90e7f45a107812a67bca5ce7ce80a2592ce", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 134, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/beda7870fb0f813e69e7803c612f865079625235/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda7870fb0f813e69e7803c612f865079625235/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=beda7870fb0f813e69e7803c612f865079625235", "patch": "@@ -1,15 +1,14 @@\n mod emit;\n+mod line_info;\n \n use crate::prelude::*;\n \n-use syntax::source_map::FileName;\n-\n use cranelift::codegen::ir::{StackSlots, ValueLoc};\n use cranelift::codegen::isa::RegUnit;\n \n use gimli::write::{\n-    self, Address, AttributeValue, DwarfUnit, Expression, FileId, LineProgram, LineString,\n-    LineStringTable, Location, LocationList, Range, RangeList, UnitEntryId, Writer,\n+    self, Address, AttributeValue, DwarfUnit, Expression, LineProgram, LineString,\n+    Location, LocationList, RangeList, UnitEntryId, Writer,\n };\n use gimli::{Encoding, Format, LineEncoding, Register, RunTimeEndian, X86_64};\n \n@@ -24,40 +23,6 @@ fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     }\n }\n \n-fn line_program_add_file(\n-    line_program: &mut LineProgram,\n-    line_strings: &mut LineStringTable,\n-    file: &FileName,\n-) -> FileId {\n-    match file {\n-        FileName::Real(path) => {\n-            let dir_name = path.parent().unwrap().to_str().unwrap().as_bytes();\n-            let dir_id = if !dir_name.is_empty() {\n-                let dir_name = LineString::new(dir_name, line_program.encoding(), line_strings);\n-                line_program.add_directory(dir_name)\n-            } else {\n-                line_program.default_directory()\n-            };\n-            let file_name = LineString::new(\n-                path.file_name().unwrap().to_str().unwrap().as_bytes(),\n-                line_program.encoding(),\n-                line_strings,\n-            );\n-            line_program.add_file(file_name, dir_id, None)\n-        }\n-        // FIXME give more appropriate file names\n-        _ => {\n-            let dir_id = line_program.default_directory();\n-            let dummy_file_name = LineString::new(\n-                file.to_string().into_bytes(),\n-                line_program.encoding(),\n-                line_strings,\n-            );\n-            line_program.add_file(dummy_file_name, dir_id, None)\n-        }\n-    }\n-}\n-\n pub struct DebugContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n@@ -135,32 +100,6 @@ impl<'tcx> DebugContext<'tcx> {\n         }\n     }\n \n-    fn emit_location(&mut self, entry_id: UnitEntryId, span: Span) {\n-        let loc = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n-\n-        let file_id = line_program_add_file(\n-            &mut self.dwarf.unit.line_program,\n-            &mut self.dwarf.line_strings,\n-            &loc.file.name,\n-        );\n-\n-        let entry = self.dwarf.unit.get_mut(entry_id);\n-\n-        entry.set(\n-            gimli::DW_AT_decl_file,\n-            AttributeValue::FileIndex(Some(file_id)),\n-        );\n-        entry.set(\n-            gimli::DW_AT_decl_line,\n-            AttributeValue::Udata(loc.line as u64),\n-        );\n-        // FIXME: probably omit this\n-        entry.set(\n-            gimli::DW_AT_decl_column,\n-            AttributeValue::Udata(loc.col.to_usize() as u64),\n-        );\n-    }\n-\n     fn dwarf_ty(&mut self, ty: Ty<'tcx>) -> UnitEntryId {\n         if let Some(type_id) = self.types.get(ty) {\n             return *type_id;\n@@ -248,13 +187,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             AttributeValue::StringRef(name_id),\n         );\n \n-        entry.set(\n-            gimli::DW_AT_low_pc,\n-            AttributeValue::Address(Address::Symbol { symbol, addend: 0 }),\n-        );\n-\n-        debug_context.emit_location(entry_id, mir.span);\n-\n         FunctionDebugContext {\n             debug_context,\n             entry_id,\n@@ -305,58 +237,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         isa: &dyn cranelift::codegen::isa::TargetIsa,\n         source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n     ) {\n-        let tcx = self.debug_context.tcx;\n-\n-        let line_program = &mut self.debug_context.dwarf.unit.line_program;\n-\n-        line_program.begin_sequence(Some(Address::Symbol {\n-            symbol: self.symbol,\n-            addend: 0,\n-        }));\n-\n-        let encinfo = isa.encoding_info();\n-        let func = &context.func;\n-        let mut ebbs = func.layout.ebbs().collect::<Vec<_>>();\n-        ebbs.sort_by_key(|ebb| func.offsets[*ebb]); // Ensure inst offsets always increase\n-\n-        let line_strings = &mut self.debug_context.dwarf.line_strings;\n-        let mut create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n-            let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n-            let file_id = line_program_add_file(line_program, line_strings, &loc.file.name);\n-\n-            /*println!(\n-                \"srcloc {:>04X} {}:{}:{}\",\n-                line_program.row().address_offset,\n-                file.display(),\n-                loc.line,\n-                loc.col.to_u32()\n-            );*/\n-\n-            line_program.row().file = file_id;\n-            line_program.row().line = loc.line as u64;\n-            line_program.row().column = loc.col.to_u32() as u64 + 1;\n-            line_program.generate_row();\n-        };\n-\n-        let mut end = 0;\n-        for ebb in ebbs {\n-            for (offset, inst, size) in func.inst_offsets(ebb, &encinfo) {\n-                let srcloc = func.srclocs[inst];\n-                line_program.row().address_offset = offset as u64;\n-                if !srcloc.is_default() {\n-                    let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n-                    create_row_for_span(line_program, source_info.0);\n-                } else {\n-                    create_row_for_span(line_program, self.mir.span);\n-                }\n-                end = offset + size;\n-            }\n-        }\n-\n-        line_program.end_sequence(end as u64);\n-\n-        let entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n-        entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(end as u64));\n+        self.create_debug_lines(context, isa, source_info_set);\n \n         {\n             let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n@@ -391,17 +272,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 );\n             }\n         }\n-\n-        self.debug_context\n-            .unit_range_list\n-            .0\n-            .push(Range::StartLength {\n-                begin: Address::Symbol {\n-                    symbol: self.symbol,\n-                    addend: 0,\n-                },\n-                length: end as u64,\n-            });\n     }\n }\n "}]}