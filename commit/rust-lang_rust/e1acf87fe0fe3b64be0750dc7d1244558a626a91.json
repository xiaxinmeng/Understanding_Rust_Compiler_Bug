{"sha": "e1acf87fe0fe3b64be0750dc7d1244558a626a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYWNmODdmZTBmZTNiNjRiZTA3NTBkYzdkMTI0NDU1OGE2MjZhOTE=", "commit": {"author": {"name": "Willy Aguirre", "email": "marti1125@gmail.com", "date": "2015-09-28T15:46:50Z"}, "committer": {"name": "Willy Aguirre", "email": "marti1125@gmail.com", "date": "2015-09-28T15:46:50Z"}, "message": "remove a sentence #28701", "tree": {"sha": "1da71c56077b56ad43bb317e3450757db3d30585", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1da71c56077b56ad43bb317e3450757db3d30585"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1acf87fe0fe3b64be0750dc7d1244558a626a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1acf87fe0fe3b64be0750dc7d1244558a626a91", "html_url": "https://github.com/rust-lang/rust/commit/e1acf87fe0fe3b64be0750dc7d1244558a626a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1acf87fe0fe3b64be0750dc7d1244558a626a91/comments", "author": {"login": "marti1125", "id": 223240, "node_id": "MDQ6VXNlcjIyMzI0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/223240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marti1125", "html_url": "https://github.com/marti1125", "followers_url": "https://api.github.com/users/marti1125/followers", "following_url": "https://api.github.com/users/marti1125/following{/other_user}", "gists_url": "https://api.github.com/users/marti1125/gists{/gist_id}", "starred_url": "https://api.github.com/users/marti1125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marti1125/subscriptions", "organizations_url": "https://api.github.com/users/marti1125/orgs", "repos_url": "https://api.github.com/users/marti1125/repos", "events_url": "https://api.github.com/users/marti1125/events{/privacy}", "received_events_url": "https://api.github.com/users/marti1125/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marti1125", "id": 223240, "node_id": "MDQ6VXNlcjIyMzI0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/223240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marti1125", "html_url": "https://github.com/marti1125", "followers_url": "https://api.github.com/users/marti1125/followers", "following_url": "https://api.github.com/users/marti1125/following{/other_user}", "gists_url": "https://api.github.com/users/marti1125/gists{/gist_id}", "starred_url": "https://api.github.com/users/marti1125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marti1125/subscriptions", "organizations_url": "https://api.github.com/users/marti1125/orgs", "repos_url": "https://api.github.com/users/marti1125/repos", "events_url": "https://api.github.com/users/marti1125/events{/privacy}", "received_events_url": "https://api.github.com/users/marti1125/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219eca11b044de3644b3e9101124513c1a842b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/219eca11b044de3644b3e9101124513c1a842b09", "html_url": "https://github.com/rust-lang/rust/commit/219eca11b044de3644b3e9101124513c1a842b09"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "6d1e66b67334fce72a7dfc06e294f5e53e5a2543", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1acf87fe0fe3b64be0750dc7d1244558a626a91/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1acf87fe0fe3b64be0750dc7d1244558a626a91/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=e1acf87fe0fe3b64be0750dc7d1244558a626a91", "patch": "@@ -281,8 +281,7 @@ If you are trying to execute a closure on an iterator for its side effects,\n just use `for` instead.\n \n There are tons of interesting iterator adapters. `take(n)` will return an\n-iterator over the next `n` elements of the original iterator. Note that this\n-has no side effect on the original iterator. Let's try it out with our infinite\n+iterator over the next `n` elements of the original iterator. Let's try it out with our infinite\n iterator from before:\n \n ```rust"}]}