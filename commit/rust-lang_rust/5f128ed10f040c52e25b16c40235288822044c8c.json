{"sha": "5f128ed10f040c52e25b16c40235288822044c8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTI4ZWQxMGYwNDBjNTJlMjViMTZjNDAyMzUyODg4MjIwNDRjOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-06T21:05:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-06T21:05:31Z"}, "message": "Auto merge of #38017 - arthurprs:hm-extend, r=bluss\n\nSmarter HashMap/HashSet pre-allocation for extend/from_iter\n\nHashMap/HashSet from_iter and extend are making totally different assumptions.\n\nA more balanced decision may allocate half the lower hint (rounding up). For \"well defined\" iterators this effectively limits the worst case to two resizes (the initial reserve + one resize).\n\ncc #36579\ncc @bluss", "tree": {"sha": "82847cc0eed7630af3dc0cd73a56e970169281dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82847cc0eed7630af3dc0cd73a56e970169281dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f128ed10f040c52e25b16c40235288822044c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f128ed10f040c52e25b16c40235288822044c8c", "html_url": "https://github.com/rust-lang/rust/commit/5f128ed10f040c52e25b16c40235288822044c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f128ed10f040c52e25b16c40235288822044c8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5d0f90929ddaae89609e9bb229a9b8a27e27615", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d0f90929ddaae89609e9bb229a9b8a27e27615", "html_url": "https://github.com/rust-lang/rust/commit/b5d0f90929ddaae89609e9bb229a9b8a27e27615"}, {"sha": "2c5d2403d770e624bbb0b9ce8e970efa914a8602", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5d2403d770e624bbb0b9ce8e970efa914a8602", "html_url": "https://github.com/rust-lang/rust/commit/2c5d2403d770e624bbb0b9ce8e970efa914a8602"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "368604ccb82d05a46ae2fa03037c6a2568e21fbd", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f128ed10f040c52e25b16c40235288822044c8c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f128ed10f040c52e25b16c40235288822044c8c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5f128ed10f040c52e25b16c40235288822044c8c", "patch": "@@ -1974,10 +1974,8 @@ impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>\n           S: BuildHasher + Default\n {\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> HashMap<K, V, S> {\n-        let iterator = iter.into_iter();\n-        let lower = iterator.size_hint().0;\n-        let mut map = HashMap::with_capacity_and_hasher(lower, Default::default());\n-        map.extend(iterator);\n+        let mut map = HashMap::with_hasher(Default::default());\n+        map.extend(iter);\n         map\n     }\n }\n@@ -1988,6 +1986,17 @@ impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>\n           S: BuildHasher\n {\n     fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {\n+        // Keys may be already present or show multiple times in the iterator.\n+        // Reserve the entire hint lower bound if the map is empty.\n+        // Otherwise reserve half the hint (rounded up), so the map\n+        // will only resize twice in the worst case.\n+        let iter = iter.into_iter();\n+        let reserve = if self.is_empty() {\n+            iter.size_hint().0\n+        } else {\n+            (iter.size_hint().0 + 1) / 2\n+        };\n+        self.reserve(reserve);\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "72af612f5696f51c8676bb2b91da6a6864d57859", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f128ed10f040c52e25b16c40235288822044c8c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f128ed10f040c52e25b16c40235288822044c8c/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=5f128ed10f040c52e25b16c40235288822044c8c", "patch": "@@ -663,10 +663,8 @@ impl<T, S> FromIterator<T> for HashSet<T, S>\n           S: BuildHasher + Default\n {\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> HashSet<T, S> {\n-        let iterator = iter.into_iter();\n-        let lower = iterator.size_hint().0;\n-        let mut set = HashSet::with_capacity_and_hasher(lower, Default::default());\n-        set.extend(iterator);\n+        let mut set = HashSet::with_hasher(Default::default());\n+        set.extend(iter);\n         set\n     }\n }\n@@ -677,9 +675,7 @@ impl<T, S> Extend<T> for HashSet<T, S>\n           S: BuildHasher\n {\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        for k in iter {\n-            self.insert(k);\n-        }\n+        self.map.extend(iter.into_iter().map(|k| (k, ())));\n     }\n }\n "}]}