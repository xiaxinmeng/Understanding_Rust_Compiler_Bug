{"sha": "6dd8744a11393f4969e6525e313070b34783b2e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZDg3NDRhMTEzOTNmNDk2OWU2NTI1ZTMxMzA3MGIzNDc4M2IyZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-29T03:58:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-29T03:58:18Z"}, "message": "Auto merge of #43492 - lu-zero:master, r=alexcrichton\n\nMore Altivec Intrinsics", "tree": {"sha": "3de50b648848bb98138afa644294d6e5df19c1a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3de50b648848bb98138afa644294d6e5df19c1a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd8744a11393f4969e6525e313070b34783b2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd8744a11393f4969e6525e313070b34783b2e0", "html_url": "https://github.com/rust-lang/rust/commit/6dd8744a11393f4969e6525e313070b34783b2e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd8744a11393f4969e6525e313070b34783b2e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a09c01f0165230f7700828ea1635ebe3be8722", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a09c01f0165230f7700828ea1635ebe3be8722", "html_url": "https://github.com/rust-lang/rust/commit/42a09c01f0165230f7700828ea1635ebe3be8722"}, {"sha": "c4710203c098b68b5f80b1507e889ad894855729", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4710203c098b68b5f80b1507e889ad894855729", "html_url": "https://github.com/rust-lang/rust/commit/c4710203c098b68b5f80b1507e889ad894855729"}], "stats": {"total": 203, "additions": 186, "deletions": 17}, "files": [{"sha": "7f01aaa3ac113a6e22d1b028f4a3d15ba5eb9de7", "filename": "src/etc/platform-intrinsics/powerpc.json", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json", "raw_url": "https://github.com/rust-lang/rust/raw/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fpowerpc.json?ref=6dd8744a11393f4969e6525e313070b34783b2e0", "patch": "@@ -3,8 +3,15 @@\n     \"intrinsic_prefix\": \"_vec_\",\n     \"llvm_prefix\": \"llvm.ppc.altivec.\",\n     \"number_info\": {\n-        \"unsigned\": {},\n-        \"signed\": {}\n+        \"unsigned\": {\n+            \"kind\" : \"u\",\n+            \"data_type_short\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\", \"64\": \"d\" }\n+        },\n+        \"signed\": {\n+            \"kind\" : \"s\",\n+            \"data_type_short\": { \"8\": \"b\", \"16\": \"h\", \"32\": \"w\", \"64\": \"d\" }\n+        },\n+        \"float\": {}\n     },\n     \"width_info\": {\n         \"128\": { \"width\": \"\" }\n@@ -16,6 +23,55 @@\n             \"llvm\": \"vperm\",\n             \"ret\": \"s32\",\n             \"args\": [\"0\", \"0\", \"s8\"]\n+        },\n+        {\n+            \"intrinsic\": \"mradds\",\n+            \"width\": [128],\n+            \"llvm\": \"vmhraddshs\",\n+            \"ret\": \"s16\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"cmpb\",\n+            \"width\": [128],\n+            \"llvm\": \"vcmpbfp\",\n+            \"ret\": \"s32\",\n+            \"args\": [\"f32\", \"f32\"]\n+        },\n+        {\n+            \"intrinsic\": \"cmpeq{0.data_type_short}\",\n+            \"width\": [128],\n+            \"llvm\": \"vcmpequ{0.data_type_short}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"cmpgt{1.kind}{1.data_type_short}\",\n+            \"width\": [128],\n+            \"llvm\": \"vcmpgt{1.kind}{1.data_type_short}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0u\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"cmpgt{1.kind}{1.data_type_short}\",\n+            \"width\": [128],\n+            \"llvm\": \"vcmpgt{1.kind}{1.data_type_short}\",\n+            \"ret\": \"s(8-32)\",\n+            \"args\": [\"0\", \"1\"]\n+        },\n+        {\n+            \"intrinsic\": \"max{0.kind}{0.data_type_short}\",\n+            \"width\": [128],\n+            \"llvm\": \"vmax{0.kind}{0.data_type_short}\",\n+            \"ret\": \"i(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"min{0.kind}{0.data_type_short}\",\n+            \"width\": [128],\n+            \"llvm\": \"vmin{0.kind}{0.data_type_short}\",\n+            \"ret\": \"i(8-32)\",\n+            \"args\": [\"0\", \"0\"]\n         }\n     ]\n }"}, {"sha": "60074cce2b9a326504f1d3df2287a4caa5f3664b", "filename": "src/librustc_platform_intrinsics/powerpc.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fpowerpc.rs?ref=6dd8744a11393f4969e6525e313070b34783b2e0", "patch": "@@ -27,6 +27,121 @@ pub fn find(name: &str) -> Option<Intrinsic> {\n             output: &::I32x4,\n             definition: Named(\"llvm.ppc.altivec.vperm\")\n         },\n+        \"_vec_mradds\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 3] = [&::I16x8, &::I16x8, &::I16x8]; &INPUTS },\n+            output: &::I16x8,\n+            definition: Named(\"llvm.ppc.altivec.vmhraddshs\")\n+        },\n+        \"_vec_cmpb\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::F32x4, &::F32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vcmpbfp\")\n+        },\n+        \"_vec_cmpeqb\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n+            output: &::I8x16,\n+            definition: Named(\"llvm.ppc.altivec.vcmpequb\")\n+        },\n+        \"_vec_cmpeqh\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n+            output: &::I16x8,\n+            definition: Named(\"llvm.ppc.altivec.vcmpequh\")\n+        },\n+        \"_vec_cmpeqw\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vcmpequw\")\n+        },\n+        \"_vec_cmpgtub\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n+            output: &::I8x16,\n+            definition: Named(\"llvm.ppc.altivec.vcmpgtub\")\n+        },\n+        \"_vec_cmpgtuh\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n+            output: &::I16x8,\n+            definition: Named(\"llvm.ppc.altivec.vcmpgtuh\")\n+        },\n+        \"_vec_cmpgtuw\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vcmpgtuw\")\n+        },\n+        \"_vec_cmpgtsb\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n+            output: &::I8x16,\n+            definition: Named(\"llvm.ppc.altivec.vcmpgtsb\")\n+        },\n+        \"_vec_cmpgtsh\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n+            output: &::I16x8,\n+            definition: Named(\"llvm.ppc.altivec.vcmpgtsh\")\n+        },\n+        \"_vec_cmpgtsw\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vcmpgtsw\")\n+        },\n+        \"_vec_maxsb\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n+            output: &::I8x16,\n+            definition: Named(\"llvm.ppc.altivec.vmaxsb\")\n+        },\n+        \"_vec_maxub\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n+            output: &::U8x16,\n+            definition: Named(\"llvm.ppc.altivec.vmaxub\")\n+        },\n+        \"_vec_maxsh\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n+            output: &::I16x8,\n+            definition: Named(\"llvm.ppc.altivec.vmaxsh\")\n+        },\n+        \"_vec_maxuh\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n+            output: &::U16x8,\n+            definition: Named(\"llvm.ppc.altivec.vmaxuh\")\n+        },\n+        \"_vec_maxsw\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmaxsw\")\n+        },\n+        \"_vec_maxuw\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n+            output: &::U32x4,\n+            definition: Named(\"llvm.ppc.altivec.vmaxuw\")\n+        },\n+        \"_vec_minsb\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I8x16, &::I8x16]; &INPUTS },\n+            output: &::I8x16,\n+            definition: Named(\"llvm.ppc.altivec.vminsb\")\n+        },\n+        \"_vec_minub\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U8x16, &::U8x16]; &INPUTS },\n+            output: &::U8x16,\n+            definition: Named(\"llvm.ppc.altivec.vminub\")\n+        },\n+        \"_vec_minsh\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I16x8, &::I16x8]; &INPUTS },\n+            output: &::I16x8,\n+            definition: Named(\"llvm.ppc.altivec.vminsh\")\n+        },\n+        \"_vec_minuh\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U16x8, &::U16x8]; &INPUTS },\n+            output: &::U16x8,\n+            definition: Named(\"llvm.ppc.altivec.vminuh\")\n+        },\n+        \"_vec_minsw\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::I32x4, &::I32x4]; &INPUTS },\n+            output: &::I32x4,\n+            definition: Named(\"llvm.ppc.altivec.vminsw\")\n+        },\n+        \"_vec_minuw\" => Intrinsic {\n+            inputs: { static INPUTS: [&'static Type; 2] = [&::U32x4, &::U32x4]; &INPUTS },\n+            output: &::U32x4,\n+            definition: Named(\"llvm.ppc.altivec.vminuw\")\n+        },\n         _ => return None,\n     })\n }"}, {"sha": "448feb5259ddd81fe65d33ee0f2b0278e6d5aceb", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=6dd8744a11393f4969e6525e313070b34783b2e0", "patch": "@@ -80,7 +80,10 @@ const X86_WHITELIST: &'static [&'static str] = &[\"avx\\0\", \"avx2\\0\", \"bmi\\0\", \"bm\n \n const HEXAGON_WHITELIST: &'static [&'static str] = &[\"hvx\\0\", \"hvx-double\\0\"];\n \n-const POWERPC_WHITELIST: &'static [&'static str] = &[\"altivec\\0\", \"vsx\\0\"];\n+const POWERPC_WHITELIST: &'static [&'static str] = &[\"altivec\\0\",\n+                                                     \"power8-altivec\\0\", \"power9-altivec\\0\",\n+                                                     \"power8-vector\\0\", \"power9-vector\\0\",\n+                                                     \"vsx\\0\"];\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_target_machine(sess);"}, {"sha": "57e90be27748f3e1ca24ffb557007454661b5aa9", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=6dd8744a11393f4969e6525e313070b34783b2e0", "patch": "@@ -181,20 +181,14 @@ extern \"C\" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,\n   TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const FeatureBitset &Bits = MCInfo->getFeatureBits();\n-  const llvm::SubtargetFeatureKV *FeatureEntry;\n-\n-#define SUBTARGET(x)                                                           \\\n-  if (MCInfo->isCPUStringValid(x##SubTypeKV[0].Key)) {                         \\\n-    FeatureEntry = x##FeatureKV;                                               \\\n-  } else\n-\n-  GEN_SUBTARGETS { return false; }\n-#undef SUBTARGET\n-\n-  while (strcmp(Feature, FeatureEntry->Key) != 0)\n-    FeatureEntry++;\n+#if LLVM_VERSION_GE(4, 0)\n+  const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n \n-  return (Bits & FeatureEntry->Value) == FeatureEntry->Value;\n+  for (auto &FeatureEntry : FeatTable)\n+    if (!strcmp(FeatureEntry.Key, Feature))\n+      return (Bits & FeatureEntry.Value) == FeatureEntry.Value;\n+#endif\n+  return false;\n }\n \n enum class LLVMRustCodeModel {"}, {"sha": "82fa3f6a3c5e03d7ea8141c0526186c762be0a20", "filename": "src/test/run-make/print-cfg/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Ftest%2Frun-make%2Fprint-cfg%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Ftest%2Frun-make%2Fprint-cfg%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprint-cfg%2FMakefile?ref=6dd8744a11393f4969e6525e313070b34783b2e0", "patch": "@@ -5,7 +5,7 @@ all: default\n \t$(RUSTC) --target x86_64-pc-windows-gnu --print cfg | grep x86_64\n \t$(RUSTC) --target i686-pc-windows-msvc --print cfg | grep msvc\n \t$(RUSTC) --target i686-apple-darwin --print cfg | grep macos\n-\t$(RUSTC) --target i686-unknown-linux-gnu --print cfg | grep sse2\n+\t$(RUSTC) --target i686-unknown-linux-gnu --print cfg | grep gnu\n \n ifdef IS_WINDOWS\n default:"}, {"sha": "c27f83011cb1b4c7f95498589e333a4851eea413", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd8744a11393f4969e6525e313070b34783b2e0/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=6dd8744a11393f4969e6525e313070b34783b2e0", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+// min-llvm-version 4.0\n \n #![feature(cfg_target_feature)]\n "}]}