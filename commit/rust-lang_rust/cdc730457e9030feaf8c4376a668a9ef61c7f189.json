{"sha": "cdc730457e9030feaf8c4376a668a9ef61c7f189", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYzczMDQ1N2U5MDMwZmVhZjhjNDM3NmE2NjhhOWVmNjFjN2YxODk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-06T10:20:27Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T12:55:20Z"}, "message": "Compute the correct layout for variants of uninhabited enums and readd a long lost assertion\n\nThis reverts part of commit 9712fa405944cb8d5416556ac4b1f26365a10658.", "tree": {"sha": "dcc13829721a1ea75625b7aea2c999e9519e2ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcc13829721a1ea75625b7aea2c999e9519e2ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc730457e9030feaf8c4376a668a9ef61c7f189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc730457e9030feaf8c4376a668a9ef61c7f189", "html_url": "https://github.com/rust-lang/rust/commit/cdc730457e9030feaf8c4376a668a9ef61c7f189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc730457e9030feaf8c4376a668a9ef61c7f189/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "html_url": "https://github.com/rust-lang/rust/commit/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "f616d8160377513b92d6175a08a4ac447fbc41c7", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=cdc730457e9030feaf8c4376a668a9ef61c7f189", "patch": "@@ -782,8 +782,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     present_first @ Some(_) => present_first,\n                     // Uninhabited because it has no variants, or only absent ones.\n                     None if def.is_enum() => return tcx.layout_raw(param_env.and(tcx.types.never)),\n-                    // if it's a struct, still compute a layout so that we can still compute the\n-                    // field offsets\n+                    // If it's a struct, still compute a layout so that we can still compute the\n+                    // field offsets.\n                     None => Some(VariantIdx::new(0)),\n                 };\n \n@@ -1990,7 +1990,15 @@ where\n {\n     fn for_variant(this: TyLayout<'tcx>, cx: &C, variant_index: VariantIdx) -> TyLayout<'tcx> {\n         let details = match this.variants {\n-            Variants::Single { index } if index == variant_index => this.details,\n+            Variants::Single { index }\n+                // If all variants but one are uninhabited, the variant layout is the enum layout.\n+                if index == variant_index &&\n+                // Don't confuse variants of uninhabited enums with the enum itself.\n+                // For more details see https://github.com/rust-lang/rust/issues/69763.\n+                this.fields != FieldPlacement::Union(0) =>\n+            {\n+                this.details\n+            }\n \n             Variants::Single { index } => {\n                 // Deny calling for_variant more than once for non-Single enums."}, {"sha": "5d035bbeb27c7bac81891fdbb4e087afbe3a8bcc", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=cdc730457e9030feaf8c4376a668a9ef61c7f189", "patch": "@@ -356,7 +356,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let base = match op.try_as_mplace(self) {\n             Ok(mplace) => {\n-                // The easy case\n+                // We can reuse the mplace field computation logic for indirect operands\n                 let field = self.mplace_field(mplace, field)?;\n                 return Ok(field.into());\n             }"}, {"sha": "856c654980ab798226ce65a9cea695e5e7bd3411", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=cdc730457e9030feaf8c4376a668a9ef61c7f189", "patch": "@@ -410,14 +410,6 @@ where\n                 stride * field\n             }\n             layout::FieldPlacement::Union(count) => {\n-                // This is a narrow bug-fix for rust-lang/rust#69191: if we are\n-                // trying to access absent field of uninhabited variant, then\n-                // signal UB (but don't ICE the compiler).\n-                // FIXME temporary hack to work around incoherence between\n-                // layout computation and MIR building\n-                if field >= count as u64 && base.layout.abi == layout::Abi::Uninhabited {\n-                    throw_ub!(Unreachable);\n-                }\n                 assert!(\n                     field < count as u64,\n                     \"Tried to access field {} of union {:#?} with {} fields\","}, {"sha": "681326b0f150a791f11575011c9c5ad40a7fa32a", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc730457e9030feaf8c4376a668a9ef61c7f189/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=cdc730457e9030feaf8c4376a668a9ef61c7f189", "patch": "@@ -660,7 +660,11 @@ impl FieldPlacement {\n \n     pub fn offset(&self, i: usize) -> Size {\n         match *self {\n-            FieldPlacement::Union(_) => Size::ZERO,\n+            FieldPlacement::Union(count) => {\n+                assert!(i < count,\n+                        \"Tried to access field {} of union with {} fields\", i, count);\n+                Size::ZERO\n+            },\n             FieldPlacement::Array { stride, count } => {\n                 let i = i as u64;\n                 assert!(i < count);"}]}