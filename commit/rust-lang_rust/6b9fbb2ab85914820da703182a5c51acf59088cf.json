{"sha": "6b9fbb2ab85914820da703182a5c51acf59088cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOWZiYjJhYjg1OTE0ODIwZGE3MDMxODJhNWM1MWFjZjU5MDg4Y2Y=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-04T11:21:28Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-05T22:34:02Z"}, "message": "fix borrows across loops, libcore *almost* compiles", "tree": {"sha": "639e973658bc7dd681d2b048946005d713fe8994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/639e973658bc7dd681d2b048946005d713fe8994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b9fbb2ab85914820da703182a5c51acf59088cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9fbb2ab85914820da703182a5c51acf59088cf", "html_url": "https://github.com/rust-lang/rust/commit/6b9fbb2ab85914820da703182a5c51acf59088cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b9fbb2ab85914820da703182a5c51acf59088cf/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82f3fc5dbca4d2d696ce66b902cb339f4507ae9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f3fc5dbca4d2d696ce66b902cb339f4507ae9f", "html_url": "https://github.com/rust-lang/rust/commit/82f3fc5dbca4d2d696ce66b902cb339f4507ae9f"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "c27cb43eff77b8f92f8effd87052ffa8b5213559", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6b9fbb2ab85914820da703182a5c51acf59088cf/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9fbb2ab85914820da703182a5c51acf59088cf/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=6b9fbb2ab85914820da703182a5c51acf59088cf", "patch": "@@ -43,6 +43,7 @@ pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     borrows: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n     location_map: FxHashMap<Location, BorrowIndex>,\n     region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n+    local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n     region_span_map: FxHashMap<RegionKind, Span>,\n     nonlexical_regioncx: Option<RegionInferenceContext<'tcx>>,\n }\n@@ -89,6 +90,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             idx_vec: IndexVec::new(),\n             location_map: FxHashMap(),\n             region_map: FxHashMap(),\n+            local_map: FxHashMap(),\n             region_span_map: FxHashMap()\n         };\n         visitor.visit_mir(mir);\n@@ -99,6 +101,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                          root_scope,\n                          location_map: visitor.location_map,\n                          region_map: visitor.region_map,\n+                         local_map: visitor.local_map,\n                          region_span_map: visitor.region_span_map,\n                          nonlexical_regioncx };\n \n@@ -108,13 +111,22 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n             location_map: FxHashMap<Location, BorrowIndex>,\n             region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n+            local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n             region_span_map: FxHashMap<RegionKind, Span>,\n         }\n \n         impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n             fn visit_rvalue(&mut self,\n                             rvalue: &mir::Rvalue<'tcx>,\n                             location: mir::Location) {\n+                fn root_local(mut p: &mir::Place<'_>) -> Option<mir::Local> {\n+                    loop { match p {\n+                        mir::Place::Projection(pi) => p = &pi.base,\n+                        mir::Place::Static(_) => return None,\n+                        mir::Place::Local(l) => return Some(*l)\n+                    }}\n+                }\n+\n                 if let mir::Rvalue::Ref(region, kind, ref place) = *rvalue {\n                     if is_unsafe_place(self.tcx, self.mir, place) { return; }\n \n@@ -123,8 +135,14 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     };\n                     let idx = self.idx_vec.push(borrow);\n                     self.location_map.insert(location, idx);\n+\n                     let borrows = self.region_map.entry(region).or_insert(FxHashSet());\n                     borrows.insert(idx);\n+\n+                    if let Some(local) = root_local(place) {\n+                        let borrows = self.local_map.entry(local).or_insert(FxHashSet());\n+                        borrows.insert(idx);\n+                    }\n                 }\n             }\n \n@@ -213,7 +231,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::EndRegion(region_scope) => {\n                 if let Some(borrow_indexes) = self.region_map.get(&ReScope(region_scope)) {\n                     assert!(self.nonlexical_regioncx.is_none());\n-                    for idx in borrow_indexes { sets.kill(&idx); }\n+                    sets.kill_all(borrow_indexes);\n                 } else {\n                     // (if there is no entry, then there are no borrows to be tracked)\n                 }\n@@ -238,10 +256,19 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            mir::StatementKind::StorageDead(local) => {\n+                // Make sure there are no remaining borrows for locals that\n+                // are gone out of scope.\n+                //\n+                // FIXME: expand this to variables that are assigned over.\n+                if let Some(borrow_indexes) = self.local_map.get(&local) {\n+                    sets.kill_all(borrow_indexes);\n+                }\n+            }\n+\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n-            mir::StatementKind::StorageDead(..) |\n             mir::StatementKind::Validate(..) |\n             mir::StatementKind::Nop => {}\n "}, {"sha": "63bb04a0e4c3afd38716b3e7de834bbe298a963f", "filename": "src/test/compile-fail/borrowck/borrowck-mut-borrow-linear-errors.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b9fbb2ab85914820da703182a5c51acf59088cf/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9fbb2ab85914820da703182a5c51acf59088cf/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs?ref=6b9fbb2ab85914820da703182a5c51acf59088cf", "patch": "@@ -23,15 +23,9 @@ fn main() {\n             1 => { addr = &mut x; } //[ast]~ ERROR [E0499]\n             //[mir]~^ ERROR [E0499]\n             2 => { addr = &mut x; } //[ast]~ ERROR [E0499]\n-            //[mir]~^ ERROR [E0506]\n-            //[mir]~| ERROR [E0499]\n-            //[mir]~| ERROR [E0499]\n+            //[mir]~^ ERROR [E0499]\n             _ => { addr = &mut x; } //[ast]~ ERROR [E0499]\n-            //[mir]~^ ERROR [E0506]\n-            //[mir]~| ERROR [E0499]\n-            //[mir]~| ERROR [E0499]\n+            //[mir]~^ ERROR [E0499]\n         }\n     }\n }\n-\n-"}, {"sha": "5f5a58ed759426b8e2b1c633e509d02ea31edfaf", "filename": "src/test/compile-fail/issue-25579.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b9fbb2ab85914820da703182a5c51acf59088cf/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b9fbb2ab85914820da703182a5c51acf59088cf/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs?ref=6b9fbb2ab85914820da703182a5c51acf59088cf", "patch": "@@ -20,13 +20,9 @@ fn causes_ice(mut l: &mut Sexpression) {\n     loop { match l {\n         &mut Sexpression::Num(ref mut n) => {},\n         &mut Sexpression::Cons(ref mut expr) => { //[ast]~ ERROR [E0499]\n-                                                  //[mir]~^ ERROR [E0506]\n-                                                  //[mir]~| ERROR [E0499]\n+                                                  //[mir]~^ ERROR [E0499]\n             l = &mut **expr; //[ast]~ ERROR [E0506]\n                              //[mir]~^ ERROR [E0506]\n-                             //[mir]~| ERROR [E0499]\n-                             //[mir]~| ERROR [E0506]\n-                             //[mir]~| ERROR [E0499]\n         }\n     }}\n }"}]}