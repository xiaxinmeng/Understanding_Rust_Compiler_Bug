{"sha": "f8c140465f20217913f14b7423f7110d0cc7b57c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzE0MDQ2NWYyMDIxNzkxM2YxNGI3NDIzZjcxMTBkMGNjN2I1N2M=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-27T17:42:23Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-27T20:02:12Z"}, "message": "Only closure analysis should run after fallback.\n\nMove `check_casts` and `resolve_generator_interiors` to before fallback.\n\nRename `apply_fallback_if_possible` to `fallback_if_possible`.\n\nRefactor `select_all_obligations_or_error`.", "tree": {"sha": "9a0dedc01290823a3d8391dacfb03950c0a5e4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0dedc01290823a3d8391dacfb03950c0a5e4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c140465f20217913f14b7423f7110d0cc7b57c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c140465f20217913f14b7423f7110d0cc7b57c", "html_url": "https://github.com/rust-lang/rust/commit/f8c140465f20217913f14b7423f7110d0cc7b57c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c140465f20217913f14b7423f7110d0cc7b57c/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd4de4cece143e8dbaeeff93492afcbb356d3051", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4de4cece143e8dbaeeff93492afcbb356d3051", "html_url": "https://github.com/rust-lang/rust/commit/cd4de4cece143e8dbaeeff93492afcbb356d3051"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "dae5ba14bfb5bf4f23c3376751b851af4237a3f1", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8c140465f20217913f14b7423f7110d0cc7b57c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c140465f20217913f14b7423f7110d0cc7b57c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=f8c140465f20217913f14b7423f7110d0cc7b57c", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         // For backwards compatibility we apply numeric fallback here. This means that in:\n         // `let x = 100; x as u8;`, we infer `x` to `i32` rather than `u8`.\n         if self.expr_ty.is_ty_infer() {\n-            fcx.apply_fallback_if_possible(self.expr_ty, Fallback::Numeric);\n+            fcx.fallback_if_possible(self.expr_ty, Fallback::Numeric);\n             self.expr_ty = fcx.structurally_resolved_type(self.span, self.expr_ty);\n         }\n         self.cast_ty = fcx.structurally_resolved_type(self.span, self.cast_ty);"}, {"sha": "b1645ed9228308646c74ef9e96f3faa3276aaf1a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8c140465f20217913f14b7423f7110d0cc7b57c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c140465f20217913f14b7423f7110d0cc7b57c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f8c140465f20217913f14b7423f7110d0cc7b57c", "patch": "@@ -858,9 +858,19 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             fcx\n         };\n \n+        fcx.check_casts();\n+\n+        // All type checking constraints were added, try to fallback unsolved variables.\n+        fcx.select_obligations_where_possible();\n+        for ty in &fcx.unsolved_variables() {\n+            fcx.fallback_if_possible(ty, Fallback::Full);\n+        }\n         fcx.select_obligations_where_possible();\n+\n+        // Closure and generater analysis may run after fallback\n+        // because they doen't constrain other type variables.\n         fcx.closure_analyze(body);\n-        fcx.check_casts();\n+        assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n         fcx.resolve_generator_interiors(def_id);\n         fcx.select_all_obligations_or_error();\n \n@@ -2137,9 +2147,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // Non-numerics get replaced with ! or () (depending on whether\n     // feature(never_type) is enabled), unconstrained ints with i32,\n     // unconstrained floats with f64.\n-    // Defaulting inference variables becomes very dubious if we have\n-    // encountered type-checking errors. In that case, fallback to TyError.\n-    fn apply_fallback_if_possible(&self, ty: Ty<'tcx>, fallback: Fallback) {\n+    // Fallback becomes very dubious if we have encountered type-checking errors.\n+    // In that case, fallback to TyError.\n+    fn fallback_if_possible(&self, ty: Ty<'tcx>, fallback: Fallback) {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n \n@@ -2162,22 +2172,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn select_all_obligations_or_error(&self) {\n         debug!(\"select_all_obligations_or_error\");\n-\n-        // upvar inference should have ensured that all deferred call\n-        // resolutions are handled by now.\n-        assert!(self.deferred_call_resolutions.borrow().is_empty());\n-\n-        self.select_obligations_where_possible();\n-\n-        for ty in &self.unsolved_variables() {\n-            self.apply_fallback_if_possible(ty, Fallback::Full);\n-        }\n-\n-        let mut fulfillment_cx = self.fulfillment_cx.borrow_mut();\n-\n-        match fulfillment_cx.select_all_or_error(self) {\n-            Ok(()) => { }\n-            Err(errors) => { self.report_fulfillment_errors(&errors, self.inh.body_id); }\n+        if let Err(errors) = self.fulfillment_cx.borrow_mut().select_all_or_error(&self) {\n+            self.report_fulfillment_errors(&errors, self.inh.body_id);\n         }\n     }\n "}, {"sha": "f4beb44b82dc7408c6db36891f8467063e2bb68d", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8c140465f20217913f14b7423f7110d0cc7b57c/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8c140465f20217913f14b7423f7110d0cc7b57c/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=f8c140465f20217913f14b7423f7110d0cc7b57c", "patch": "@@ -1,13 +1,13 @@\n-error[E0277]: the trait bound `std::cell::UnsafeCell<{integer}>: std::panic::RefUnwindSafe` is not satisfied in `std::cell::Cell<{integer}>`\n+error[E0277]: the trait bound `std::cell::UnsafeCell<i32>: std::panic::RefUnwindSafe` is not satisfied in `std::cell::Cell<i32>`\n   --> $DIR/interior-mutability.rs:15:5\n    |\n 15 |     catch_unwind(|| { x.set(23); }); //~ ERROR the trait bound\n-   |     ^^^^^^^^^^^^ the type std::cell::UnsafeCell<{integer}> may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |     ^^^^^^^^^^^^ the type std::cell::UnsafeCell<i32> may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n-   = help: within `std::cell::Cell<{integer}>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<{integer}>`\n-   = note: required because it appears within the type `std::cell::Cell<{integer}>`\n-   = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<{integer}>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:15:18: 15:35 x:&std::cell::Cell<{integer}>]`\n+   = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n+   = note: required because it appears within the type `std::cell::Cell<i32>`\n+   = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:15:18: 15:35 x:&std::cell::Cell<i32>]`\n    = note: required by `std::panic::catch_unwind`\n \n error: aborting due to previous error"}]}