{"sha": "fb40a2796e6e87d05b14f67a4b38985522f76586", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNDBhMjc5NmU2ZTg3ZDA1YjE0ZjY3YTRiMzg5ODU1MjJmNzY1ODY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-05-31T08:11:10Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-05-31T08:11:10Z"}, "message": "Merge pull request #85 from cassiersg/tuple\n\nImplement reformat of tuple litterals", "tree": {"sha": "38e04f0f905df36dfe4e242ac5ab9f3e273376bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38e04f0f905df36dfe4e242ac5ab9f3e273376bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb40a2796e6e87d05b14f67a4b38985522f76586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb40a2796e6e87d05b14f67a4b38985522f76586", "html_url": "https://github.com/rust-lang/rust/commit/fb40a2796e6e87d05b14f67a4b38985522f76586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb40a2796e6e87d05b14f67a4b38985522f76586/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90494132c23ac8a0f62d9c50f3eb66e1e456d76e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90494132c23ac8a0f62d9c50f3eb66e1e456d76e", "html_url": "https://github.com/rust-lang/rust/commit/90494132c23ac8a0f62d9c50f3eb66e1e456d76e"}, {"sha": "7a6b4db819745e5e3553ea2e5094ccb17a914f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6b4db819745e5e3553ea2e5094ccb17a914f5c", "html_url": "https://github.com/rust-lang/rust/commit/7a6b4db819745e5e3553ea2e5094ccb17a914f5c"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "70695f30c4f01b6687dc15755440362279c940d8", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fb40a2796e6e87d05b14f67a4b38985522f76586/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb40a2796e6e87d05b14f67a4b38985522f76586/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fb40a2796e6e87d05b14f67a4b38985522f76586", "patch": "@@ -194,6 +194,45 @@ impl<'a> FmtVisitor<'a> {\n         format!(\"{}: {}\", name, expr)\n     }\n \n+    fn rewrite_tuple_lit(&mut self, items: &[ptr::P<ast::Expr>], width: usize, offset: usize)\n+        -> String {\n+        // opening paren\n+        let indent = offset + 1;\n+        // In case of length 1, need a trailing comma\n+        if items.len() == 1 {\n+            return format!(\"({},)\", self.rewrite_expr(&*items[0], width - 3, indent));\n+        }\n+        // Only last line has width-1 as budget, other may take max_width\n+        let item_strs: Vec<_> =\n+            items.iter()\n+                 .enumerate()\n+                 .map(|(i, item)| self.rewrite_expr(\n+                    item,\n+                    // last line : given width (minus \"(\"+\")\"), other lines : max_width\n+                    // (minus \"(\"+\",\"))\n+                    if i == items.len() - 1 { width - 2 } else { config!(max_width) - indent - 2 },\n+                    indent))\n+                 .collect();\n+        let tactics = if item_strs.iter().any(|s| s.contains('\\n')) {\n+            ListTactic::Vertical\n+        } else {\n+            ListTactic::HorizontalVertical\n+        };\n+        // FIXME handle comments\n+        let item_strs: Vec<_> = item_strs.into_iter().map(|s| (s, String::new())).collect();\n+        let fmt = ListFormatting {\n+            tactic: tactics,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: indent,\n+            h_width: width - 2,\n+            v_width: width - 2,\n+        };\n+        let item_str = write_list(&item_strs, &fmt);\n+        format!(\"({})\", item_str)\n+    }\n+\n+\n     pub fn rewrite_expr(&mut self, expr: &ast::Expr, width: usize, offset: usize) -> String {\n         match expr.node {\n             ast::Expr_::ExprLit(ref l) => {\n@@ -219,6 +258,9 @@ impl<'a> FmtVisitor<'a> {\n                                                width,\n                                                offset);\n             }\n+            ast::Expr_::ExprTup(ref items) => {\n+                return self.rewrite_tuple_lit(items, width, offset);\n+            }\n             _ => {}\n         }\n "}, {"sha": "3655cab0663048713d88011798da333101a61bac", "filename": "tests/idem/tuple.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb40a2796e6e87d05b14f67a4b38985522f76586/tests%2Fidem%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb40a2796e6e87d05b14f67a4b38985522f76586/tests%2Fidem%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem%2Ftuple.rs?ref=fb40a2796e6e87d05b14f67a4b38985522f76586", "patch": "@@ -0,0 +1,11 @@\n+// Test tuple litterals\n+\n+fn foo() {\n+    let a = (a, a, a, a, a);\n+    let aaaaaaaaaaaaaaaa = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaa, aaaaaaaaaaaaaa);\n+    let aaaaaaaaaaaaaaaaaaaaaa = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+                                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,\n+                                  aaaaaaaaaaaaaaaaaaaaaaaaa,\n+                                  aaaa);\n+    let a = (a,);\n+}"}]}