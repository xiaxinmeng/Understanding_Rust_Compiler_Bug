{"sha": "38ed36bba4669a3a6737d1f973789a459b8530b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZWQzNmJiYTQ2NjlhM2E2NzM3ZDFmOTczNzg5YTQ1OWI4NTMwYjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-13T12:44:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-18T00:02:32Z"}, "message": "hir: Preserve used syntax in `TyKind::TraitObject`", "tree": {"sha": "1f1c86e89a33f6576b2c9991aaeb11ee5e33112c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f1c86e89a33f6576b2c9991aaeb11ee5e33112c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ed36bba4669a3a6737d1f973789a459b8530b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ed36bba4669a3a6737d1f973789a459b8530b2", "html_url": "https://github.com/rust-lang/rust/commit/38ed36bba4669a3a6737d1f973789a459b8530b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ed36bba4669a3a6737d1f973789a459b8530b2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dac96d45af760dce26ff7cbab09c08411c9a9105", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac96d45af760dce26ff7cbab09c08411c9a9105", "html_url": "https://github.com/rust-lang/rust/commit/dac96d45af760dce26ff7cbab09c08411c9a9105"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "7e82d7ff77d9617c115b610ecbe9807001444d89", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -1964,7 +1964,7 @@ impl TyKind {\n }\n \n /// Syntax used to declare a trait object.\n-#[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum TraitObjectSyntax {\n     Dyn,\n     None,"}, {"sha": "f9872f84e125e27d693745b9e03d5f80bc564ecb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -1396,7 +1396,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 if kind != TraitObjectSyntax::Dyn {\n                     self.maybe_lint_bare_trait(t.span, t.id, false);\n                 }\n-                hir::TyKind::TraitObject(bounds, lifetime_bound)\n+                hir::TyKind::TraitObject(bounds, lifetime_bound, kind)\n             }\n             TyKind::ImplTrait(def_node_id, ref bounds) => {\n                 let span = t.span;\n@@ -2648,6 +2648,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         hir::TyKind::TraitObject(\n                             arena_vec![self; principal],\n                             self.elided_dyn_bound(span),\n+                            TraitObjectSyntax::None,\n                         )\n                     }\n                     _ => hir::TyKind::Path(hir::QPath::Resolved(None, path)),"}, {"sha": "d03584d49a5bcc595a2e3a94839a142cc6cb0a55", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -6,7 +6,7 @@ use crate::{itemlikevisit, LangItem};\n \n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_ast::{self as ast, CrateSugar, LlvmAsmDialect};\n-use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n+use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, TraitObjectSyntax, UintTy};\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n@@ -2327,7 +2327,7 @@ pub enum TyKind<'hir> {\n     OpaqueDef(ItemId, &'hir [GenericArg<'hir>]),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n-    TraitObject(&'hir [PolyTraitRef<'hir>], Lifetime),\n+    TraitObject(&'hir [PolyTraitRef<'hir>], Lifetime, TraitObjectSyntax),\n     /// Unused for now.\n     Typeof(AnonConst),\n     /// `TyKind::Infer` means the type should be inferred instead of it having been"}, {"sha": "701e4a632939473180b28cab0009da66dcf8d049", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -709,7 +709,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n             visitor.visit_ty(ty);\n             visitor.visit_anon_const(length)\n         }\n-        TyKind::TraitObject(bounds, ref lifetime) => {\n+        TyKind::TraitObject(bounds, ref lifetime, _syntax) => {\n             for bound in bounds {\n                 visitor.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n             }"}, {"sha": "b37a3e19b84081093e2d0d8b3c0050a95c4e07f1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -410,7 +410,10 @@ impl<'a> State<'a> {\n             }\n             hir::TyKind::OpaqueDef(..) => self.s.word(\"/*impl Trait*/\"),\n             hir::TyKind::Path(ref qpath) => self.print_qpath(qpath, false),\n-            hir::TyKind::TraitObject(bounds, ref lifetime) => {\n+            hir::TyKind::TraitObject(bounds, ref lifetime, syntax) => {\n+                if syntax == ast::TraitObjectSyntax::Dyn {\n+                    self.word_space(\"dyn\");\n+                }\n                 let mut first = true;\n                 for bound in bounds {\n                     if first {"}, {"sha": "35b9bc96f133999bc3496dba3029f2f0004387d2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -99,7 +99,7 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                 return;\n             }\n \n-            hir::TyKind::TraitObject(bounds, _) => {\n+            hir::TyKind::TraitObject(bounds, ..) => {\n                 for bound in bounds {\n                     self.current_index.shift_in(1);\n                     self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);"}, {"sha": "1e926989263c9cb66ea81f0eb7a356a6f6cbd3c4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         );\n                     }\n                 }\n-                TyKind::TraitObject(_, lt) => match lt.name {\n+                TyKind::TraitObject(_, lt, _) => match lt.name {\n                     LifetimeName::ImplicitObjectLifetimeDefault => {\n                         err.span_suggestion_verbose(\n                             fn_return.span.shrink_to_hi(),\n@@ -498,6 +498,7 @@ impl<'tcx> Visitor<'tcx> for HirTraitObjectVisitor {\n         if let TyKind::TraitObject(\n             poly_trait_refs,\n             Lifetime { name: LifetimeName::ImplicitObjectLifetimeDefault, .. },\n+            _,\n         ) = t.kind\n         {\n             for ptr in poly_trait_refs {"}, {"sha": "982c8a354b4ab20a91933e8613398ab32dd543c7", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -314,6 +314,7 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n                         hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static,\n                     ..\n                 },\n+                _,\n             ) => {\n                 self.0.push(ty);\n             }"}, {"sha": "2c61c0963ae2844b9dc65d9dd17b68e88dc6f03a", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.missing_named_lifetime_spots.pop();\n                 self.is_in_fn_syntax = was_in_fn_syntax;\n             }\n-            hir::TyKind::TraitObject(bounds, ref lifetime) => {\n+            hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n                 debug!(\"visit_ty: TraitObject(bounds={:?}, lifetime={:?})\", bounds, lifetime);\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n@@ -2299,7 +2299,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     self.outer_index.shift_in(1);\n                 }\n                 match ty.kind {\n-                    hir::TyKind::TraitObject(bounds, ref lifetime) => {\n+                    hir::TyKind::TraitObject(bounds, ref lifetime, _) => {\n                         for bound in bounds {\n                             self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n                         }"}, {"sha": "d0a03008c95222ad572dbd8f805f55bc05281a9d", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -2201,7 +2201,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     Some(ast_ty),\n                 ))\n             }\n-            hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n+            hir::TyKind::TraitObject(ref bounds, ref lifetime, _) => {\n                 self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(ref maybe_qself, ref path)) => {"}, {"sha": "17a961a5f6655efcfee3dee5a6cb84b79eeb4492", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -1477,7 +1477,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 }\n             }\n             TyKind::Path(_) => clean_qpath(&self, cx),\n-            TyKind::TraitObject(ref bounds, ref lifetime) => {\n+            TyKind::TraitObject(ref bounds, ref lifetime, _) => {\n                 match bounds[0].clean(cx).trait_ {\n                     ResolvedPath { path, param_names: None, did, is_generic } => {\n                         let mut bounds: Vec<self::GenericBound> = bounds[1..]"}, {"sha": "3ac6e6cbbefcf49f1b924cbb8b7278f7ebea0204", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n                 return;\n             },\n-            TyKind::TraitObject(bounds, ref lt) => {\n+            TyKind::TraitObject(bounds, ref lt, _) => {\n                 if !lt.is_elided() {\n                     self.unelided_trait_object_lifetime = true;\n                 }"}, {"sha": "81090040d92e0af42b1f8a9a700305119d6bc3d8", "filename": "src/tools/clippy/clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -50,7 +50,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                     // Originally reported as the issue #3128.\n                     let inner_snippet = snippet(cx, inner.span, \"..\");\n                     let suggestion = match &inner.kind {\n-                        TyKind::TraitObject(bounds, lt_bound) if bounds.len() > 1 || !lt_bound.is_elided() => {\n+                        TyKind::TraitObject(bounds, lt_bound, _) if bounds.len() > 1 || !lt_bound.is_elided() => {\n                             format!(\"&{}({})\", ltopt, &inner_snippet)\n                         },\n                         TyKind::Path(qpath)\n@@ -86,7 +86,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n // Returns true if given type is `Any` trait.\n fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n     if_chain! {\n-        if let TyKind::TraitObject(ref traits, _) = t.kind;\n+        if let TyKind::TraitObject(ref traits, ..) = t.kind;\n         if !traits.is_empty();\n         // Only Send/Sync can be used as additional traits, so it is enough to\n         // check only the first trait."}, {"sha": "4a1a608e8ae62ea308ffa0f7dcb43e6f3b2129b0", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -911,7 +911,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n             // function types bring a lot of overhead\n             TyKind::BareFn(ref bare) if bare.abi == Abi::Rust => (50 * self.nest, 1),\n \n-            TyKind::TraitObject(ref param_bounds, _) => {\n+            TyKind::TraitObject(ref param_bounds, ..) => {\n                 let has_lifetime_parameters = param_bounds.iter().any(|bound| {\n                     bound\n                         .bound_generic_params"}, {"sha": "7f7d9c5f56a1e0463071f9a9784083beb9c46241", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ed36bba4669a3a6737d1f973789a459b8530b2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=38ed36bba4669a3a6737d1f973789a459b8530b2", "patch": "@@ -892,7 +892,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::OpaqueDef(_, arg_list) => {\n                 self.hash_generic_args(arg_list);\n             },\n-            TyKind::TraitObject(_, lifetime) => {\n+            TyKind::TraitObject(_, lifetime, _) => {\n                 self.hash_lifetime(lifetime);\n             },\n             TyKind::Typeof(anon_const) => {"}]}