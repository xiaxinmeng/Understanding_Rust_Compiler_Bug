{"sha": "68013ee315c72379c536941ba83c888e083d7441", "node_id": "C_kwDOAAsO6NoAKDY4MDEzZWUzMTVjNzIzNzljNTM2OTQxYmE4M2M4ODhlMDgzZDc0NDE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-02T14:46:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-02T14:46:05Z"}, "message": "Merge #11165\n\n11165: internal: start enforcing invariants for top-level entry points r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "192701feabd468e3be884422721059a281a0a435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/192701feabd468e3be884422721059a281a0a435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68013ee315c72379c536941ba83c888e083d7441", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0bqtCRBK7hj4Ov3rIwAAcHQIAFxRKtcKQ+EqrwRZw7QmuDZm\nkI4BFnC1Gv9uJced4L4UUorjE/ESOpZcdqKX8GocvKORw5MFR9kF8r14q3cX4Y+U\nrNq+0McI/bVf5n79MnCA2FPeRQi3jrLqU5puwNgmCe6ZcOBc3L1ePngxFyEVMhp3\nFjnh1N2a5jGoqlKVGs9JkyS/sRjDRw38UKPAXprk7u7jKMiuvYpIrJPoUDh+nric\nI0MMERsb3mtl/PrzOm776dqFx7SgwkqnGtcDkODd4DXhLE4/04Efj2wMUNqD7EKo\nllyKvD9RxrwhaTGriEa66oq4q904lTnKiRIuF9aqmdjLPL1AcmoUb5U8bBCIbg4=\n=+fAl\n-----END PGP SIGNATURE-----\n", "payload": "tree 192701feabd468e3be884422721059a281a0a435\nparent ddb420a86e7947e76085a986aba6100440c38e58\nparent 640cc27ff07e36d45dd2259b4a37ce797df0559e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641134765 +0000\ncommitter GitHub <noreply@github.com> 1641134765 +0000\n\nMerge #11165\n\n11165: internal: start enforcing invariants for top-level entry points r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68013ee315c72379c536941ba83c888e083d7441", "html_url": "https://github.com/rust-lang/rust/commit/68013ee315c72379c536941ba83c888e083d7441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68013ee315c72379c536941ba83c888e083d7441/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb420a86e7947e76085a986aba6100440c38e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb420a86e7947e76085a986aba6100440c38e58", "html_url": "https://github.com/rust-lang/rust/commit/ddb420a86e7947e76085a986aba6100440c38e58"}, {"sha": "640cc27ff07e36d45dd2259b4a37ce797df0559e", "url": "https://api.github.com/repos/rust-lang/rust/commits/640cc27ff07e36d45dd2259b4a37ce797df0559e", "html_url": "https://github.com/rust-lang/rust/commit/640cc27ff07e36d45dd2259b4a37ce797df0559e"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "4c58ea9ba64df4aee58b237926060d997bfb78ff", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68013ee315c72379c536941ba83c888e083d7441/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68013ee315c72379c536941ba83c888e083d7441/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=68013ee315c72379c536941ba83c888e083d7441", "patch": "@@ -141,7 +141,7 @@ macro_rules! m1 { () => (Some(x) left overs) }\n macro_rules! m2 { () => ($) }\n \n fn main() {\n-    let Some(x) = ();\n+    let Some(x)left overs = ();\n     let /* parse error: expected pattern */\n $ = ();\n }"}, {"sha": "6ffb4c191b59667fa7a09223d401206475df30a5", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68013ee315c72379c536941ba83c888e083d7441/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68013ee315c72379c536941ba83c888e083d7441/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=68013ee315c72379c536941ba83c888e083d7441", "patch": "@@ -109,6 +109,32 @@ pub(crate) mod entry {\n             items::mod_contents(p, false);\n             m.complete(p, MACRO_ITEMS);\n         }\n+\n+        pub(crate) fn pattern(p: &mut Parser) {\n+            let m = p.start();\n+            patterns::pattern_single(p);\n+            if p.at(EOF) {\n+                m.abandon(p);\n+                return;\n+            }\n+            while !p.at(EOF) {\n+                p.bump_any();\n+            }\n+            m.complete(p, ERROR);\n+        }\n+\n+        pub(crate) fn type_(p: &mut Parser) {\n+            let m = p.start();\n+            types::type_(p);\n+            if p.at(EOF) {\n+                m.abandon(p);\n+                return;\n+            }\n+            while !p.at(EOF) {\n+                p.bump_any();\n+            }\n+            m.complete(p, ERROR);\n+        }\n     }\n }\n "}, {"sha": "72d529d6cfd5d9df1736be5f6926918f77de9d5b", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68013ee315c72379c536941ba83c888e083d7441/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68013ee315c72379c536941ba83c888e083d7441/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=68013ee315c72379c536941ba83c888e083d7441", "patch": "@@ -110,6 +110,8 @@ pub enum TopEntryPoint {\n     Pattern,\n     Type,\n     Expr,\n+    /// Edge case -- macros generally don't expand to attributes, with the\n+    /// exception of `cfg_attr` which does!\n     MetaItem,\n }\n \n@@ -119,9 +121,9 @@ impl TopEntryPoint {\n             TopEntryPoint::SourceFile => grammar::entry::top::source_file,\n             TopEntryPoint::MacroStmts => grammar::entry::top::macro_stmts,\n             TopEntryPoint::MacroItems => grammar::entry::top::macro_items,\n+            TopEntryPoint::Pattern => grammar::entry::top::pattern,\n+            TopEntryPoint::Type => grammar::entry::top::type_,\n             // FIXME\n-            TopEntryPoint::Pattern => grammar::entry::prefix::pat,\n-            TopEntryPoint::Type => grammar::entry::prefix::ty,\n             TopEntryPoint::Expr => grammar::entry::prefix::expr,\n             TopEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n         };"}, {"sha": "dcf61b6aca5afc958fdc71145c8505248ea9a44a", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/68013ee315c72379c536941ba83c888e083d7441/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68013ee315c72379c536941ba83c888e083d7441/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=68013ee315c72379c536941ba83c888e083d7441", "patch": "@@ -146,6 +146,82 @@ fn macro_pattern() {\n               R_PAREN \")\"\n         \"#]],\n     );\n+\n+    check(\n+        TopEntryPoint::Pattern,\n+        \"None leftover tokens\",\n+        expect![[r#\"\n+            ERROR\n+              IDENT_PAT\n+                NAME\n+                  IDENT \"None\"\n+              WHITESPACE \" \"\n+              IDENT \"leftover\"\n+              WHITESPACE \" \"\n+              IDENT \"tokens\"\n+        \"#]],\n+    );\n+\n+    check(\n+        TopEntryPoint::Pattern,\n+        \"@err\",\n+        expect![[r#\"\n+            ERROR\n+              ERROR\n+                AT \"@\"\n+              IDENT \"err\"\n+            error 0: expected pattern\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn type_() {\n+    check(\n+        TopEntryPoint::Type,\n+        \"Option<!>\",\n+        expect![[r#\"\n+            PATH_TYPE\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"Option\"\n+                  GENERIC_ARG_LIST\n+                    L_ANGLE \"<\"\n+                    TYPE_ARG\n+                      NEVER_TYPE\n+                        BANG \"!\"\n+                    R_ANGLE \">\"\n+        \"#]],\n+    );\n+    check(\n+        TopEntryPoint::Type,\n+        \"() () ()\",\n+        expect![[r#\"\n+            ERROR\n+              TUPLE_TYPE\n+                L_PAREN \"(\"\n+                R_PAREN \")\"\n+              WHITESPACE \" \"\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+              WHITESPACE \" \"\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+        \"#]],\n+    );\n+    check(\n+        TopEntryPoint::Type,\n+        \"$$$\",\n+        expect![[r#\"\n+            ERROR\n+              ERROR\n+                DOLLAR \"$\"\n+              DOLLAR \"$\"\n+              DOLLAR \"$\"\n+            error 0: expected type\n+        \"#]],\n+    );\n }\n \n #[track_caller]"}]}