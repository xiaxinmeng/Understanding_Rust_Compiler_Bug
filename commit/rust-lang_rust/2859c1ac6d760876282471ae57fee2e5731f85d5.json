{"sha": "2859c1ac6d760876282471ae57fee2e5731f85d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NTljMWFjNmQ3NjA4NzYyODI0NzFhZTU3ZmVlMmU1NzMxZjg1ZDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-27T21:45:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-28T19:32:26Z"}, "message": "librustc: Enforce cross-crate method privacy", "tree": {"sha": "6fe22be7c7b742fc4de6aee8c45cbc011efb181b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fe22be7c7b742fc4de6aee8c45cbc011efb181b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2859c1ac6d760876282471ae57fee2e5731f85d5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2859c1ac6d760876282471ae57fee2e5731f85d5", "html_url": "https://github.com/rust-lang/rust/commit/2859c1ac6d760876282471ae57fee2e5731f85d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2859c1ac6d760876282471ae57fee2e5731f85d5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09a2b4e5992a0508c6ea91c030ccee11151f67ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/09a2b4e5992a0508c6ea91c030ccee11151f67ac", "html_url": "https://github.com/rust-lang/rust/commit/09a2b4e5992a0508c6ea91c030ccee11151f67ac"}], "stats": {"total": 139, "additions": 112, "deletions": 27}, "files": [{"sha": "d31fbbb0c07a15079bf3141a95b770b52c914767", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -2304,11 +2304,10 @@ mod farm {\n         farmer: Human\n     }\n \n-    // Note - visibility modifiers on impls currently have no effect\n     impl Farm {\n         priv fn feed_chickens(&self) { ... }\n         priv fn feed_cows(&self) { ... }\n-        fn add_chicken(&self, c: Chicken) { ... }\n+        pub fn add_chicken(&self, c: Chicken) { ... }\n     }\n \n     pub fn feed_animals(farm: &Farm) {"}, {"sha": "90d8dcdc235436bc1efe966bcad2416bd5c70ab4", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -155,6 +155,7 @@ pub const tag_lang_items_item_node_id: uint = 0x75;\n \n pub const tag_item_unnamed_field: uint = 0x76;\n pub const tag_items_data_item_struct_ctor: uint = 0x77;\n+pub const tag_items_data_item_visibility: uint = 0x78;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "ae4a223c1ae75a3e98b5ff376844967cfb364af4", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -234,6 +234,14 @@ pub fn struct_dtor(cstore: @mut cstore::CStore, def: ast::def_id)\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::struct_dtor(cdata, def.node)\n }\n+\n+pub fn get_method_visibility(cstore: @mut cstore::CStore,\n+                             def_id: ast::def_id)\n+                          -> ast::visibility {\n+    let cdata = cstore::get_crate_data(cstore, def_id.crate);\n+    decoder::get_method_visibility(cdata, def_id.node)\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "5963d87806093ff05f5633ef03e394401ec96efd", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -151,6 +151,16 @@ fn item_family(item: ebml::Doc) -> Family {\n     }\n }\n \n+fn item_visibility(item: ebml::Doc) -> ast::visibility {\n+    let visibility = reader::get_doc(item, tag_items_data_item_visibility);\n+    match reader::doc_as_u8(visibility) as char {\n+        'y' => ast::public,\n+        'n' => ast::private,\n+        'i' => ast::inherited,\n+        _ => fail!(~\"unknown visibility character\"),\n+    }\n+}\n+\n fn item_method_sort(item: ebml::Doc) -> char {\n     for reader::tagged_docs(item, tag_item_trait_method_sort) |doc| {\n         return str::from_bytes(reader::doc_data(doc))[0] as char;\n@@ -860,7 +870,7 @@ pub fn get_item_attrs(cdata: cmd,\n     }\n }\n \n-pure fn family_to_visibility(family: Family) -> ast::visibility {\n+pure fn struct_field_family_to_visibility(family: Family) -> ast::visibility {\n     match family {\n       PublicField => ast::public,\n       PrivateField => ast::private,\n@@ -883,7 +893,7 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n             result.push(ty::field_ty {\n                 ident: name,\n                 id: did, vis:\n-                family_to_visibility(f),\n+                struct_field_family_to_visibility(f),\n                 mutability: mt,\n             });\n         }\n@@ -900,6 +910,11 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n     result\n }\n \n+pub fn get_method_visibility(cdata: cmd, id: ast::node_id)\n+                          -> ast::visibility {\n+    item_visibility(lookup_item(id, cdata.data))\n+}\n+\n fn family_has_type_params(fam: Family) -> bool {\n     match fam {\n       Const | ForeignType | Mod | ForeignMod | PublicField | PrivateField"}, {"sha": "a950cd04d6771407bac2bcf2831d96d949ccda32", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -383,14 +383,26 @@ fn encode_info_for_mod(ecx: @EncodeContext, ebml_w: writer::Encoder,\n     ebml_w.end_tag();\n }\n \n-fn encode_visibility(ebml_w: writer::Encoder, visibility: visibility) {\n+fn encode_struct_field_family(ebml_w: writer::Encoder,\n+                              visibility: visibility) {\n     encode_family(ebml_w, match visibility {\n         public => 'g',\n         private => 'j',\n         inherited => 'N'\n     });\n }\n \n+fn encode_visibility(ebml_w: writer::Encoder, visibility: visibility) {\n+    ebml_w.start_tag(tag_items_data_item_visibility);\n+    let ch = match visibility {\n+        public => 'y',\n+        private => 'n',\n+        inherited => 'i',\n+    };\n+    ebml_w.wr_str(str::from_char(ch));\n+    ebml_w.end_tag();\n+}\n+\n fn encode_self_type(ebml_w: writer::Encoder, self_type: ast::self_ty_) {\n     ebml_w.start_tag(tag_item_trait_method_self_ty);\n \n@@ -456,7 +468,7 @@ fn encode_info_for_struct(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         ebml_w.start_tag(tag_items_data_item);\n         debug!(\"encode_info_for_struct: doing %s %d\",\n                *tcx.sess.str_of(nm), id);\n-        encode_visibility(ebml_w, vis);\n+        encode_struct_field_family(ebml_w, vis);\n         encode_name(ecx, ebml_w, nm);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n@@ -525,6 +537,7 @@ fn encode_info_for_method(ecx: @EncodeContext,\n                           should_inline: bool,\n                           parent_id: node_id,\n                           m: @method,\n+                          parent_visibility: ast::visibility,\n                           owner_generics: &ast::Generics,\n                           method_generics: &ast::Generics) {\n     debug!(\"encode_info_for_method: %d %s %u %u\", m.id,\n@@ -533,6 +546,7 @@ fn encode_info_for_method(ecx: @EncodeContext,\n            method_generics.ty_params.len());\n     ebml_w.start_tag(tag_items_data_item);\n     encode_def_id(ebml_w, local_def(m.id));\n+\n     match m.self_ty.node {\n         ast::sty_static => {\n             encode_family(ebml_w, purity_static_method_family(m.purity));\n@@ -550,6 +564,14 @@ fn encode_info_for_method(ecx: @EncodeContext,\n     encode_name(ecx, ebml_w, m.ident);\n     encode_path(ecx, ebml_w, impl_path, ast_map::path_name(m.ident));\n     encode_self_type(ebml_w, m.self_ty.node);\n+\n+    // Combine parent visibility and this visibility.\n+    let visibility = match m.vis {\n+        ast::inherited => parent_visibility,\n+        vis => vis,\n+    };\n+    encode_visibility(ebml_w, visibility);\n+\n     if len > 0u || should_inline {\n         (ecx.encode_inlined_item)(\n            ecx, ebml_w, impl_path,\n@@ -568,6 +590,7 @@ fn purity_fn_family(p: purity) -> char {\n       extern_fn => 'e'\n     }\n }\n+\n fn purity_static_method_family(p: purity) -> char {\n     match p {\n       unsafe_fn => 'U',\n@@ -757,7 +780,7 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             match f.node.kind {\n                 named_field(ident, _, vis) => {\n                    ebml_w.start_tag(tag_item_field);\n-                   encode_visibility(ebml_w, vis);\n+                   encode_struct_field_family(ebml_w, vis);\n                    encode_name(ecx, ebml_w, ident);\n                    encode_def_id(ebml_w, local_def(f.node.id));\n                    ebml_w.end_tag();\n@@ -808,12 +831,28 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n         let mut impl_path = vec::append(~[], path);\n         impl_path += ~[ast_map::path_name(item.ident)];\n \n+        // If there is a trait reference, treat the methods as always public.\n+        // This is to work around some incorrect behavior in privacy checking:\n+        // when the method belongs to a trait, it should acquire the privacy\n+        // from the trait, not the impl. Forcing the visibility to be public\n+        // makes things sorta work.\n+        let parent_visibility = if opt_trait.is_some() {\n+            ast::public\n+        } else {\n+            item.vis\n+        };\n+\n         for methods.each |m| {\n             index.push(entry {val: m.id, pos: ebml_w.writer.tell()});\n-            encode_info_for_method(ecx, ebml_w, impl_path,\n+            encode_info_for_method(ecx,\n+                                   ebml_w,\n+                                   impl_path,\n                                    should_inline(m.attrs),\n-                                   item.id, *m,\n-                                   generics, &m.generics);\n+                                   item.id,\n+                                   *m,\n+                                   parent_visibility,\n+                                   generics,\n+                                   &m.generics);\n         }\n       }\n       item_trait(ref generics, ref traits, ref ms) => {\n@@ -902,9 +941,15 @@ fn encode_info_for_item(ecx: @EncodeContext, ebml_w: writer::Encoder,\n             // of provided methods.  I am not sure why this is. -ndm\n             let owner_generics = ast_util::empty_generics();\n \n-            encode_info_for_method(ecx, ebml_w, /*bad*/copy path,\n-                                   true, item.id, *m,\n-                                   &owner_generics, &m.generics);\n+            encode_info_for_method(ecx,\n+                                   ebml_w,\n+                                   /*bad*/copy path,\n+                                   true,\n+                                   item.id,\n+                                   *m,\n+                                   item.vis,\n+                                   &owner_generics,\n+                                   &m.generics);\n         }\n       }\n       item_mac(*) => fail!(~\"item macros unimplemented\")"}, {"sha": "e60069e05da81119d0442318bb3610bd9ec5e297", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -14,10 +14,11 @@\n \n use core::prelude::*;\n \n+use metadata::csearch;\n use middle::ty::{ty_struct, ty_enum};\n use middle::ty;\n-use middle::typeck::{method_map, method_origin, method_param, method_self,\n-                     method_super};\n+use middle::typeck::{method_map, method_origin, method_param, method_self};\n+use middle::typeck::{method_super};\n use middle::typeck::{method_static, method_trait};\n \n use core::dvec::DVec;\n@@ -100,8 +101,10 @@ pub fn check_crate(tcx: ty::ctxt,\n     };\n \n     // Checks that a private method is in scope.\n-    let check_method: @fn(span: span, origin: &method_origin) =\n-            |span, origin| {\n+    let check_method: @fn(span: span,\n+                          origin: &method_origin,\n+                          ident: ast::ident) =\n+            |span, origin, ident| {\n         match *origin {\n             method_static(method_id) => {\n                 if method_id.crate == local_crate {\n@@ -110,6 +113,8 @@ pub fn check_crate(tcx: ty::ctxt,\n                             let mut is_private = false;\n                             if method.vis == private {\n                                 is_private = true;\n+                            } else if method.vis == public {\n+                                is_private = false;\n                             } else {\n                                 // Look up the enclosing impl.\n                                 if impl_id.crate != local_crate {\n@@ -121,7 +126,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                                 match tcx.items.find(&impl_id.node) {\n                                     Some(node_item(item, _)) => {\n                                         match item.node {\n-                                            item_impl(_, None, _, _) \n+                                            item_impl(_, None, _, _)\n                                                     if item.vis != public => {\n                                                 is_private = true;\n                                             }\n@@ -165,7 +170,15 @@ pub fn check_crate(tcx: ty::ctxt,\n                         }\n                     }\n                 } else {\n-                    // FIXME #4732: External crates.\n+                    let visibility =\n+                        csearch::get_method_visibility(tcx.sess.cstore,\n+                                                       method_id);\n+                    if visibility != public {\n+                        tcx.sess.span_err(span,\n+                                          fmt!(\"method `%s` is private\",\n+                                               *tcx.sess.parse_sess.interner\n+                                                   .get(ident)));\n+                    }\n                 }\n             }\n             method_param(method_param {\n@@ -264,14 +277,16 @@ pub fn check_crate(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span, &(*entry).origin);\n+                                    check_method(expr.span,\n+                                                 &entry.origin,\n+                                                 ident);\n                                 }\n                             }\n                         }\n                         _ => {}\n                     }\n                 }\n-                expr_method_call(base, _, _, _, _) => {\n+                expr_method_call(base, ident, _, _, _) => {\n                     // Ditto\n                     match ty::get(ty::type_autoderef(tcx, ty::expr_ty(tcx,\n                                                           base))).sty {\n@@ -287,7 +302,9 @@ pub fn check_crate(tcx: ty::ctxt,\n                                 Some(ref entry) => {\n                                     debug!(\"(privacy checking) checking \\\n                                             impl method\");\n-                                    check_method(expr.span, &(*entry).origin);\n+                                    check_method(expr.span,\n+                                                 &entry.origin,\n+                                                 ident);\n                                 }\n                             }\n                         }"}, {"sha": "1d21f749b32a6a31b8fab0ec993f490d1e79965e", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -134,7 +134,9 @@ pub mod chained {\n             }\n             self.chains = new_chains;\n         }\n+    }\n \n+    pub impl<K:Eq + IterBytes + Hash,V> T<K, V> {\n         pure fn each_entry(blk: fn(@Entry<K,V>) -> bool) {\n             // n.b. we can't use vec::iter() here because self.chains\n             // is stored in a mutable location."}, {"sha": "c04cdbcab1adbd24b25b3f6a298f75d8da4508c5", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -10,12 +10,12 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv mut meows : uint,\n+        priv meows : uint,\n         how_hungry : int,\n     }\n \n     pub impl cat {\n-      priv fn nap() { for uint::range(1, 10000u) |_i|{}}\n+      priv fn nap(&self) { for uint::range(1, 10000u) |_i|{}}\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "7414dc5721621b3ce5e7c21bc58685a643586515", "filename": "src/test/compile-fail/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2859c1ac6d760876282471ae57fee2e5731f85d5/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs?ref=2859c1ac6d760876282471ae57fee2e5731f85d5", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:attempted access of field `nap` on type\n-// xfail-test Cross-crate impl method privacy doesn't work\n // xfail-fast\n // aux-build:cci_class_5.rs\n extern mod cci_class_5;\n use cci_class_5::kitties::*;\n \n fn main() {\n   let nyan : cat = cat(52, 99);\n-  nyan.nap();\n+  nyan.nap();   //~ ERROR method `nap` is private\n }"}]}