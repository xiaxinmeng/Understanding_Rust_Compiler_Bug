{"sha": "f03d8f305a80778ae034b0205803ea3edc297ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwM2Q4ZjMwNWE4MDc3OGFlMDM0YjAyMDU4MDNlYTNlZGMyOTdhYzg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-12T17:09:20Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-03T17:19:14Z"}, "message": "Move early lint declarations to librustc_session", "tree": {"sha": "510804ecf5b989dcb8e21f116f2c9950addb1ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/510804ecf5b989dcb8e21f116f2c9950addb1ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03d8f305a80778ae034b0205803ea3edc297ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03d8f305a80778ae034b0205803ea3edc297ac8", "html_url": "https://github.com/rust-lang/rust/commit/f03d8f305a80778ae034b0205803ea3edc297ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03d8f305a80778ae034b0205803ea3edc297ac8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "html_url": "https://github.com/rust-lang/rust/commit/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce"}], "stats": {"total": 343, "additions": 172, "deletions": 171}, "files": [{"sha": "5f911a45330838e4ea939952b2dea0147bc67b38", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -3700,6 +3700,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_feature\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_target\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -4477,6 +4478,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\","}, {"sha": "1aba73ec73d00fb7873b07294ba3ab46d6e15106", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -12,6 +12,8 @@ use syntax::ast;\n use syntax::edition::Edition;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n+use syntax::early_buffered_lints::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n+use rustc_session::declare_lint;\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,\n@@ -404,31 +406,6 @@ declare_lint! {\n     };\n }\n \n-/// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n-pub mod parser {\n-    declare_lint! {\n-        pub ILL_FORMED_ATTRIBUTE_INPUT,\n-        Deny,\n-        \"ill-formed attribute inputs that were previously accepted and used in practice\",\n-        @future_incompatible = super::FutureIncompatibleInfo {\n-            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-            edition: None,\n-        };\n-    }\n-\n-    declare_lint! {\n-        pub META_VARIABLE_MISUSE,\n-        Allow,\n-        \"possible meta-variable misuse at macro definition\"\n-    }\n-\n-    declare_lint! {\n-        pub INCOMPLETE_INCLUDE,\n-        Deny,\n-        \"trailing content in included file\"\n-    }\n-}\n-\n declare_lint! {\n     pub DEPRECATED_IN_FUTURE,\n     Allow,\n@@ -520,8 +497,8 @@ declare_lint_pass! {\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,\n         MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n-        parser::ILL_FORMED_ATTRIBUTE_INPUT,\n-        parser::META_VARIABLE_MISUSE,\n+        ILL_FORMED_ATTRIBUTE_INPUT,\n+        META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,"}, {"sha": "10c0c63995ca276c7f3e9f2ae15ec185e3d24d65", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -9,6 +9,7 @@ use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::{Ident, Item, ItemKind};\n use syntax::symbol::{sym, Symbol};\n+use rustc_session::declare_tool_lint;\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,"}, {"sha": "f29d1a3789aea493275d1e91a7ecde847b705fb7", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -8,7 +8,7 @@ use crate::lint::{self, Lint, LintId, Level, LintSource};\n use crate::session::Session;\n use crate::util::nodemap::FxHashMap;\n use errors::{Applicability, DiagnosticBuilder};\n-use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate;\n@@ -566,19 +566,3 @@ impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n         })\n     }\n }\n-\n-impl<HCX> HashStable<HCX> for LintId {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        self.lint_name_raw().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<HCX> ToStableHashKey<HCX> for LintId {\n-    type KeyType = &'static str;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, _: &HCX) -> &'static str {\n-        self.lint_name_raw()\n-    }\n-}"}, {"sha": "a8d886866795eef22f1760bc105d0d53fdaa0eb5", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 107, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -32,7 +32,6 @@ use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n use crate::util::nodemap::NodeMap;\n use errors::{DiagnosticBuilder, DiagnosticId};\n-use std::{hash, ptr};\n use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n use syntax::symbol::Symbol;\n@@ -43,72 +42,7 @@ pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore\n                         check_crate, check_ast_crate, late_lint_mod, CheckLintNameResult,\n                         BufferedEarlyLint,};\n \n-pub use rustc_session::lint::{Lint, Level, FutureIncompatibleInfo};\n-\n-/// Declares a static item of type `&'static Lint`.\n-#[macro_export]\n-macro_rules! declare_lint {\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n-        declare_lint!(\n-            $vis $NAME, $Level, $desc,\n-        );\n-    );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: stringify!($NAME),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: None,\n-            is_plugin: false,\n-            $($v: true,)*\n-            $(future_incompatible: Some($fi),)*\n-            ..$crate::lint::Lint::default_fields_for_macro()\n-        };\n-    );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $lint_edition: expr => $edition_level: ident\n-    ) => (\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: stringify!($NAME),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n-            report_in_external_macro: false,\n-            is_plugin: false,\n-        };\n-    );\n-}\n-\n-#[macro_export]\n-macro_rules! declare_tool_lint {\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n-    ) => (\n-        declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n-    );\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n-        report_in_external_macro: $rep:expr\n-    ) => (\n-         declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n-    );\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n-        $external:expr\n-    ) => (\n-        $(#[$attr])*\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: None,\n-            report_in_external_macro: $external,\n-            future_incompatible: None,\n-            is_plugin: true,\n-        };\n-    );\n-}\n+pub use rustc_session::lint::{Lint, LintId, Level, FutureIncompatibleInfo};\n \n /// Declares a static `LintArray` and return it as an expression.\n #[macro_export]\n@@ -420,46 +354,6 @@ pub type EarlyLintPassObject = Box<dyn EarlyLintPass + sync::Send + sync::Sync +\n pub type LateLintPassObject = Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + sync::Send\n                                                                            + sync::Sync + 'static>;\n \n-/// Identifies a lint known to the compiler.\n-#[derive(Clone, Copy, Debug)]\n-pub struct LintId {\n-    // Identity is based on pointer equality of this field.\n-    lint: &'static Lint,\n-}\n-\n-impl PartialEq for LintId {\n-    fn eq(&self, other: &LintId) -> bool {\n-        ptr::eq(self.lint, other.lint)\n-    }\n-}\n-\n-impl Eq for LintId { }\n-\n-impl hash::Hash for LintId {\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n-        let ptr = self.lint as *const Lint;\n-        ptr.hash(state);\n-    }\n-}\n-\n-impl LintId {\n-    /// Gets the `LintId` for a `Lint`.\n-    pub fn of(lint: &'static Lint) -> LintId {\n-        LintId {\n-            lint,\n-        }\n-    }\n-\n-    pub fn lint_name_raw(&self) -> &'static str {\n-        self.lint.name\n-    }\n-\n-    /// Gets the name of the lint.\n-    pub fn to_string(&self) -> String {\n-        self.lint.name_lower()\n-    }\n-}\n-\n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n pub enum LintSource {"}, {"sha": "6a6ed3260de7f3c737a2ea350951b176e8c7da11", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -1,7 +1,7 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command-line options.\n \n-use crate::lint;\n+use rustc_session::lint;\n use crate::middle::cstore;\n use crate::session::{early_error, early_warn, Session};\n use crate::session::search_paths::SearchPath;\n@@ -2854,7 +2854,7 @@ impl PpMode {\n /// we have an opt-in scheme here, so one is hopefully forced to think about\n /// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n-    use crate::lint;\n+    use rustc_session::lint;\n     use crate::middle::cstore;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;"}, {"sha": "05945504db237eb81fce0b3e8e0da55a337b7aad", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -828,7 +828,7 @@ Available lint options:\n \n     fn sort_lints(sess: &Session, mut lints: Vec<&'static Lint>) -> Vec<&'static Lint> {\n         // The sort doesn't case-fold but it's doubtful we care.\n-        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess), x.name));\n+        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess.edition()), x.name));\n         lints\n     }\n "}, {"sha": "235184382c5cc18873e5c09f72e86b5cff6bdcc2", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -439,8 +439,7 @@ fn configure_and_expand_inner<'a>(\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n         for BufferedEarlyLint{id, span, msg, lint_id} in buffered_lints.drain(..) {\n-            let lint = lint::Lint::from_parser_lint_id(lint_id);\n-            resolver.lint_buffer().buffer_lint(lint, id, span, &msg);\n+            resolver.lint_buffer().buffer_lint(lint_id, id, span, &msg);\n         }\n     });\n "}, {"sha": "e834b87896ddf8fcb010634d2198e48e1a94a2cb", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -18,3 +18,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "e60c025c3ef8b2f5671865f3672c53001e95b415", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -21,6 +21,8 @@\n \n #[macro_use]\n extern crate rustc;\n+#[macro_use]\n+extern crate rustc_session;\n \n mod array_into_iter;\n mod nonstandard_style;"}, {"sha": "8601add3f6f9654d68b4591a640ff54794b7e963", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -4,7 +4,7 @@ use errors::{PResult, Applicability};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MetaItem, MetaItemKind};\n use syntax::attr::mk_name_value_item_str;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n use syntax::sess::ParseSess;\n use syntax_pos::{Symbol, sym};\n \n@@ -93,7 +93,7 @@ pub fn check_builtin_attribute(\n             }\n             if should_warn(name) {\n                 sess.buffer_lint(\n-                    BufferedEarlyLintId::IllFormedAttributeInput,\n+                    &ILL_FORMED_ATTRIBUTE_INPUT,\n                     meta.span,\n                     ast::CRATE_NODE_ID,\n                     &msg,"}, {"sha": "df5715f76b4d875b6e1b552f65181087d14008e0", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -1,3 +1,4 @@\n pub mod cgu_reuse_tracker;\n pub mod utils;\n+#[macro_use]\n pub mod lint;"}, {"sha": "0f1c91183bb688fcfd4c585bd4580aee72f4ce23", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -1,5 +1,6 @@\n use syntax_pos::{Symbol, sym};\n use syntax_pos::edition::Edition;\n+use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n pub use self::Level::*;\n \n /// Setting for how to handle a lint.\n@@ -114,3 +115,124 @@ impl Lint {\n             .unwrap_or(self.default_level)\n     }\n }\n+\n+/// Identifies a lint known to the compiler.\n+#[derive(Clone, Copy, Debug)]\n+pub struct LintId {\n+    // Identity is based on pointer equality of this field.\n+    pub lint: &'static Lint,\n+}\n+\n+impl PartialEq for LintId {\n+    fn eq(&self, other: &LintId) -> bool {\n+        std::ptr::eq(self.lint, other.lint)\n+    }\n+}\n+\n+impl Eq for LintId { }\n+\n+impl std::hash::Hash for LintId {\n+    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+        let ptr = self.lint as *const Lint;\n+        ptr.hash(state);\n+    }\n+}\n+\n+impl LintId {\n+    /// Gets the `LintId` for a `Lint`.\n+    pub fn of(lint: &'static Lint) -> LintId {\n+        LintId {\n+            lint,\n+        }\n+    }\n+\n+    pub fn lint_name_raw(&self) -> &'static str {\n+        self.lint.name\n+    }\n+\n+    /// Gets the name of the lint.\n+    pub fn to_string(&self) -> String {\n+        self.lint.name_lower()\n+    }\n+}\n+\n+impl<HCX> HashStable<HCX> for LintId {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n+        self.lint_name_raw().hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<HCX> ToStableHashKey<HCX> for LintId {\n+    type KeyType = &'static str;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HCX) -> &'static str {\n+        self.lint_name_raw()\n+    }\n+}\n+\n+/// Declares a static item of type `&'static Lint`.\n+#[macro_export]\n+macro_rules! declare_lint {\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n+        $crate::declare_lint!(\n+            $vis $NAME, $Level, $desc,\n+        );\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: None,\n+            is_plugin: false,\n+            $($v: true,)*\n+            $(future_incompatible: Some($fi),)*\n+            ..$crate::lint::Lint::default_fields_for_macro()\n+        };\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $lint_edition: expr => $edition_level: ident\n+    ) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n+            report_in_external_macro: false,\n+            is_plugin: false,\n+        };\n+    );\n+}\n+\n+#[macro_export]\n+macro_rules! declare_tool_lint {\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n+    ) => (\n+        $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n+    );\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        report_in_external_macro: $rep:expr\n+    ) => (\n+         $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n+    );\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        $external:expr\n+    ) => (\n+        $(#[$attr])*\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: None,\n+            report_in_external_macro: $external,\n+            future_incompatible: None,\n+            is_plugin: true,\n+        };\n+    );\n+}"}, {"sha": "8a00bcbfe17c78016278ae061a747d1a441fc85a", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -24,3 +24,4 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "e6b86a0f4fbe4618a9be82778facda11edd97a0a", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -5,13 +5,30 @@\n \n use crate::ast::NodeId;\n use syntax_pos::MultiSpan;\n+use rustc_session::lint::FutureIncompatibleInfo;\n+use rustc_session::declare_lint;\n+pub use rustc_session::lint::BufferedEarlyLint;\n \n-/// Since we cannot import `LintId`s from `rustc::lint`, we define some Ids here which can later be\n-/// passed to `rustc::lint::Lint::from_parser_lint_id` to get a `rustc::lint::Lint`.\n-pub enum BufferedEarlyLintId {\n-    IllFormedAttributeInput,\n-    MetaVariableMisuse,\n-    IncompleteInclude,\n+declare_lint! {\n+    pub ILL_FORMED_ATTRIBUTE_INPUT,\n+    Deny,\n+    \"ill-formed attribute inputs that were previously accepted and used in practice\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+        edition: None,\n+    };\n+}\n+\n+declare_lint! {\n+    pub META_VARIABLE_MISUSE,\n+    Allow,\n+    \"possible meta-variable misuse at macro definition\"\n+}\n+\n+declare_lint! {\n+    pub INCOMPLETE_INCLUDE,\n+    Deny,\n+    \"trailing content in included file\"\n }\n \n /// Stores buffered lint info which can later be passed to `librustc`.\n@@ -26,5 +43,5 @@ pub struct BufferedEarlyLint {\n    pub id: NodeId,\n \n    /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n-   pub lint_id: BufferedEarlyLintId,\n+   pub lint_id: &'static rustc_session::lint::Lint,\n }"}, {"sha": "555e8a134f7835bb70aed2abf1c8a84633c79bad", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -2,7 +2,7 @@\n //! It also serves as an input to the parser itself.\n \n use crate::ast::{CrateConfig, NodeId};\n-use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n+use crate::early_buffered_lints::BufferedEarlyLint;\n \n use errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n@@ -137,7 +137,7 @@ impl ParseSess {\n \n     pub fn buffer_lint(\n         &self,\n-        lint_id: BufferedEarlyLintId,\n+        lint_id: &'static rustc_session::lint::Lint,\n         span: impl Into<MultiSpan>,\n         id: NodeId,\n         msg: &str,"}, {"sha": "dfc8d699dbe8d0c00c64aad0d4c7c3f6e5e92e03", "filename": "src/libsyntax_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -107,7 +107,7 @@\n use crate::mbe::{KleeneToken, TokenTree};\n \n use syntax::ast::NodeId;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::META_VARIABLE_MISUSE;\n use syntax::token::{DelimToken, Token, TokenKind};\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n@@ -623,5 +623,5 @@ fn ops_is_prefix(\n }\n \n fn buffer_lint(sess: &ParseSess, span: MultiSpan, node_id: NodeId, message: &str) {\n-    sess.buffer_lint(BufferedEarlyLintId::MetaVariableMisuse, span, node_id, message);\n+    sess.buffer_lint(&META_VARIABLE_MISUSE, span, node_id, message);\n }"}, {"sha": "4aab68d7c0e8d8c2115fc7663591adc973c5e93a", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03d8f305a80778ae034b0205803ea3edc297ac8/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=f03d8f305a80778ae034b0205803ea3edc297ac8", "patch": "@@ -5,7 +5,7 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::INCOMPLETE_INCLUDE;\n use syntax_expand::panictry;\n use syntax_expand::base::{self, *};\n \n@@ -101,7 +101,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n             let r = panictry!(self.p.parse_expr());\n             if self.p.token != token::Eof {\n                 self.p.sess.buffer_lint(\n-                    BufferedEarlyLintId::IncompleteInclude,\n+                    &INCOMPLETE_INCLUDE,\n                     self.p.token.span,\n                     ast::CRATE_NODE_ID,\n                     \"include macro expected single expression in source\","}]}