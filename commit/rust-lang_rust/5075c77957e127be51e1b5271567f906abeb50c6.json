{"sha": "5075c77957e127be51e1b5271567f906abeb50c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzVjNzc5NTdlMTI3YmU1MWUxYjUyNzE1NjdmOTA2YWJlYjUwYzY=", "commit": {"author": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-11-13T19:51:57Z"}, "committer": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-11-13T19:51:57Z"}, "message": "Use anyhow::Result in xtask, add contexts\n\nThis builds on #2231 but was actually done before that. You see, the\ncause for #2231 was that I got this error message:\n\n    Error: Error { kind: Io(Os { code: 2, kind: NotFound, message: \"No such file or directory\" }) }\n\nJust switching to `anyhow::Result` got me stack traces (when setting\n`RUST_LIB_BACKTRACE=1`) that at least showed\n\n    stack backtrace:\n      0: std::backtrace::Backtrace::create\n      1: std::backtrace::Backtrace::capture\n      2: anyhow::error::<impl core::convert::From<E> for anyhow::Error>::from\n      3: xtask::install_server\n      4: xtask::install\n      5: xtask::main\n      6: std::rt::lang_start::{{closure}}\n      7: std::panicking::try::do_call\n      8: __rust_maybe_catch_panic\n      9: std::rt::lang_start_internal\n      10: std::rt::lang_start\n      11: main\n\nWith the added contexts (not at all exhaustive), the error became\n\n    Error: install server\n\n    Caused by:\n        0: build AutoCfg with target directory\n        1: No such file or directory (os error 2)\n\nSince anyhow is such a small thing (no new transitive dependencies!),\nand in general gives you `Result<T, Box<dyn Error>>` on steroids, I\nthink this a nice small change. The only slightly annoying thing was to\nreplace all the `Err(format!(\u2026))?` calls (haven't even looked at whether\nwe can make it support wrapping strings though), but the `bail!` macro\nis shorter anyway :)", "tree": {"sha": "c8e8d8f29011ad2b2472a201561f3f3dc1627d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e8d8f29011ad2b2472a201561f3f3dc1627d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5075c77957e127be51e1b5271567f906abeb50c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5075c77957e127be51e1b5271567f906abeb50c6", "html_url": "https://github.com/rust-lang/rust/commit/5075c77957e127be51e1b5271567f906abeb50c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5075c77957e127be51e1b5271567f906abeb50c6/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e3c1c2b5f63e57f98a7d02f75a559d225341b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3c1c2b5f63e57f98a7d02f75a559d225341b1c", "html_url": "https://github.com/rust-lang/rust/commit/5e3c1c2b5f63e57f98a7d02f75a559d225341b1c"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "c9ab3ef1081d7bf6ca87dd2370be5a57bbe53df5", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5075c77957e127be51e1b5271567f906abeb50c6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5075c77957e127be51e1b5271567f906abeb50c6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5075c77957e127be51e1b5271567f906abeb50c6", "patch": "@@ -8,6 +8,11 @@ dependencies = [\n  \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"anyhow\"\n+version = \"1.0.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"arrayvec\"\n version = \"0.5.1\"\n@@ -1823,6 +1828,7 @@ dependencies = [\n name = \"xtask\"\n version = \"0.1.0\"\n dependencies = [\n+ \"anyhow 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pico-args 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1847,6 +1853,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n \"checksum aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"58fb5e95d83b38284460a5fda7d6470aa0b8844d283a0b614b8535e880800d2d\"\n+\"checksum anyhow 1.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"57114fc2a6cc374bce195d3482057c846e706d252ff3604363449695684d7a0d\"\n \"checksum arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n \"checksum atty 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1803c647a3ec87095e7ae7acfca019e98de5ec9a7d01343f611cf3152ed71a90\"\n \"checksum autocfg 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\""}, {"sha": "bba4be1927857114e1a7c1fd1f449427616a8e83", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=5075c77957e127be51e1b5271567f906abeb50c6", "patch": "@@ -13,3 +13,4 @@ quote = \"1.0.2\"\n proc-macro2 = \"1.0.1\"\n ron = \"0.5.1\"\n serde = { version = \"1.0.0\", features = [\"derive\"] }\n+anyhow = \"1.0.19\""}, {"sha": "44507fb74873e15ef28941ef0acc0831c6233196", "filename": "xtask/src/bin/pre-commit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fbin%2Fpre-commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fbin%2Fpre-commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fbin%2Fpre-commit.rs?ref=5075c77957e127be51e1b5271567f906abeb50c6", "patch": "@@ -19,10 +19,10 @@ fn update_staged() -> Result<()> {\n         .current_dir(&root)\n         .output()?;\n     if !output.status.success() {\n-        Err(format!(\n+        anyhow::bail!(\n             \"`git diff --diff-filter=MAR --name-only --cached` exited with {}\",\n             output.status\n-        ))?;\n+        );\n     }\n     for line in String::from_utf8(output.stdout)?.lines() {\n         run(&format!(\"git update-index --add {}\", root.join(line).to_string_lossy()), \".\")?;"}, {"sha": "53f524f42dfe7aaaacd236d1f7f4f31be355cea5", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=5075c77957e127be51e1b5271567f906abeb50c6", "patch": "@@ -52,7 +52,7 @@ fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n         _ => (),\n     }\n     if mode == Mode::Verify {\n-        Err(format!(\"`{}` is not up-to-date\", path.display()))?;\n+        anyhow::bail!(\"`{}` is not up-to-date\", path.display());\n     }\n     eprintln!(\"updating {}\", path.display());\n     fs::write(path, contents)?;\n@@ -101,10 +101,8 @@ fn do_extract_comment_blocks(text: &str, allow_blocks_with_empty_lins: bool) ->\n         let is_comment = line.starts_with(prefix);\n         if is_comment {\n             block.push(line[prefix.len()..].to_string());\n-        } else {\n-            if !block.is_empty() {\n-                res.push(mem::replace(&mut block, Vec::new()))\n-            }\n+        } else if !block.is_empty() {\n+            res.push(mem::replace(&mut block, Vec::new()));\n         }\n     }\n     if !block.is_empty() {"}, {"sha": "2977da2fae2f9689a4ad618a9435ddbad86b6999", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=5075c77957e127be51e1b5271567f906abeb50c6", "patch": "@@ -102,10 +102,10 @@ fn tests_from_dir(dir: &Path) -> Result<Tests> {\n         for test in collect_tests(&text) {\n             if test.ok {\n                 if let Some(old_test) = res.ok.insert(test.name.clone(), test) {\n-                    return Err(format!(\"Duplicate test: {}\", old_test.name).into());\n+                    anyhow::bail!(\"Duplicate test: {}\", old_test.name);\n                 }\n             } else if let Some(old_test) = res.err.insert(test.name.clone(), test) {\n-                return Err(format!(\"Duplicate test: {}\", old_test.name).into());\n+                anyhow::bail!(\"Duplicate test: {}\", old_test.name);\n             }\n         }\n         Ok(())"}, {"sha": "bfee2f9c8e78e6542a4fe9c6f6bb3e50a515298f", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=5075c77957e127be51e1b5271567f906abeb50c6", "patch": "@@ -2,19 +2,17 @@\n \n pub mod codegen;\n \n+use anyhow::Context;\n+pub use anyhow::Result;\n use std::{\n-    env,\n-    error::Error,\n-    fs,\n+    env, fs,\n     io::{Error as IoError, ErrorKind},\n     path::{Path, PathBuf},\n     process::{Command, Output, Stdio},\n };\n \n use crate::codegen::Mode;\n \n-pub type Result<T> = std::result::Result<T, Box<dyn Error>>;\n-\n const TOOLCHAIN: &str = \"stable\";\n \n pub fn project_root() -> PathBuf {\n@@ -69,7 +67,7 @@ pub fn run_rustfmt(mode: Mode) -> Result<()> {\n         .status()\n     {\n         Ok(status) if status.success() => (),\n-        _ => install_rustfmt()?,\n+        _ => install_rustfmt().context(\"install rustfmt\")?,\n     };\n \n     if mode == Mode::Verify {\n@@ -112,7 +110,7 @@ pub fn run_clippy() -> Result<()> {\n         .status()\n     {\n         Ok(status) if status.success() => (),\n-        _ => install_clippy()?,\n+        _ => install_clippy().context(\"install clippy\")?,\n     };\n \n     let allowed_lints = [\n@@ -162,9 +160,9 @@ where\n     let exec = args.next().unwrap();\n     let mut cmd = Command::new(exec);\n     f(cmd.args(args).current_dir(proj_dir).stderr(Stdio::inherit()));\n-    let output = cmd.output()?;\n+    let output = cmd.output().with_context(|| format!(\"running `{}`\", cmdline))?;\n     if !output.status.success() {\n-        Err(format!(\"`{}` exited with {}\", cmdline, output.status))?;\n+        anyhow::bail!(\"`{}` exited with {}\", cmdline, output.status);\n     }\n     Ok(output)\n }"}, {"sha": "7eab1c949dbae52b84900d5432653e1f0e7f1d2c", "filename": "xtask/src/main.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5075c77957e127be51e1b5271567f906abeb50c6/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=5075c77957e127be51e1b5271567f906abeb50c6", "patch": "@@ -9,6 +9,7 @@\n //! `.cargo/config`.\n mod help;\n \n+use anyhow::Context;\n use autocfg;\n use core::fmt::Write;\n use core::str;\n@@ -114,21 +115,21 @@ fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n             write!(&mut invalid_flags, \"{}, \", flag)?;\n         }\n         let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n-        Err(format!(\"Invalid flags: {}\", invalid_flags).into())\n+        anyhow::bail!(\"Invalid flags: {}\", invalid_flags)\n     } else {\n-        Err(e.to_string().into())\n+        anyhow::bail!(e.to_string())\n     }\n }\n \n fn install(opts: InstallOpt) -> Result<()> {\n     if cfg!(target_os = \"macos\") {\n-        fix_path_for_mac()?\n+        fix_path_for_mac().context(\"Fix path for mac\")?\n     }\n     if let Some(server) = opts.server {\n-        install_server(server)?;\n+        install_server(server).context(\"install server\")?;\n     }\n     if let Some(client) = opts.client {\n-        install_client(client)?;\n+        install_client(client).context(\"install client\")?;\n     }\n     Ok(())\n }\n@@ -140,7 +141,7 @@ fn fix_path_for_mac() -> Result<()> {\n         const ROOT_DIR: &str = \"\";\n         let home_dir = match env::var(\"HOME\") {\n             Ok(home) => home,\n-            Err(e) => Err(format!(\"Failed getting HOME from environment with error: {}.\", e))?,\n+            Err(e) => anyhow::bail!(\"Failed getting HOME from environment with error: {}.\", e),\n         };\n \n         [ROOT_DIR, &home_dir]\n@@ -154,12 +155,12 @@ fn fix_path_for_mac() -> Result<()> {\n     if !vscode_path.is_empty() {\n         let vars = match env::var_os(\"PATH\") {\n             Some(path) => path,\n-            None => Err(\"Could not get PATH variable from env.\")?,\n+            None => anyhow::bail!(\"Could not get PATH variable from env.\"),\n         };\n \n         let mut paths = env::split_paths(&vars).collect::<Vec<_>>();\n         paths.append(&mut vscode_path);\n-        let new_paths = env::join_paths(paths)?;\n+        let new_paths = env::join_paths(paths).context(\"build env PATH\")?;\n         env::set_var(\"PATH\", &new_paths);\n     }\n \n@@ -198,7 +199,7 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n \n     let code_binary = match code_binary {\n         Some(it) => it,\n-        None => Err(\"Can't execute `code --version`. Perhaps it is not in $PATH?\")?,\n+        None => anyhow::bail!(\"Can't execute `code --version`. Perhaps it is not in $PATH?\"),\n     };\n \n     Cmd {\n@@ -219,8 +220,10 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n     .run_with_output()?;\n \n     if !str::from_utf8(&output.stdout)?.contains(\"ra-lsp\") {\n-        Err(\"Could not install the Visual Studio Code extension. \\\n-             Please make sure you have at least NodeJS 10.x installed and try again.\")?;\n+        anyhow::bail!(\n+            \"Could not install the Visual Studio Code extension. \\\n+             Please make sure you have at least NodeJS 10.x installed and try again.\"\n+        );\n     }\n \n     Ok(())"}]}