{"sha": "8bd1bcad5858eb79bd60f320c9251dd84aa3b017", "node_id": "C_kwDOAAsO6NoAKDhiZDFiY2FkNTg1OGViNzliZDYwZjMyMGM5MjUxZGQ4NGFhM2IwMTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-18T03:09:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-18T03:09:02Z"}, "message": "Factor out some code into `MatcherPos::repetition`.\n\nAlso move `create_matches` within `impl MatcherPos`, because it's only\nused within that impl block.", "tree": {"sha": "0f4b7c47eaffe47c610a810b3b239059f30f76c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4b7c47eaffe47c610a810b3b239059f30f76c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd1bcad5858eb79bd60f320c9251dd84aa3b017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd1bcad5858eb79bd60f320c9251dd84aa3b017", "html_url": "https://github.com/rust-lang/rust/commit/8bd1bcad5858eb79bd60f320c9251dd84aa3b017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd1bcad5858eb79bd60f320c9251dd84aa3b017/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bbbee5ba7bfa9d9f527f929e34231c9c5308923", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbbee5ba7bfa9d9f527f929e34231c9c5308923", "html_url": "https://github.com/rust-lang/rust/commit/5bbbee5ba7bfa9d9f527f929e34231c9c5308923"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "247327e94bada5478a349540282cb552b51f0602", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8bd1bcad5858eb79bd60f320c9251dd84aa3b017/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd1bcad5858eb79bd60f320c9251dd84aa3b017/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=8bd1bcad5858eb79bd60f320c9251dd84aa3b017", "patch": "@@ -74,7 +74,7 @@ crate use NamedMatch::*;\n crate use ParseResult::*;\n use TokenTreeOrTokenTreeSlice::*;\n \n-use crate::mbe::{self, TokenTree};\n+use crate::mbe::{self, DelimSpan, SequenceRepetition, TokenTree};\n \n use rustc_ast::token::{self, DocComment, Nonterminal, Token};\n use rustc_parse::parser::Parser;\n@@ -203,6 +203,17 @@ struct MatcherPos<'root, 'tt> {\n rustc_data_structures::static_assert_size!(MatcherPos<'_, '_>, 240);\n \n impl<'root, 'tt> MatcherPos<'root, 'tt> {\n+    /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.\n+    fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {\n+        if len == 0 {\n+            vec![]\n+        } else {\n+            let empty_matches = Lrc::new(SmallVec::new());\n+            vec![empty_matches; len]\n+        }\n+        .into_boxed_slice()\n+    }\n+\n     /// Generates the top-level matcher position in which the \"dot\" is before the first token of\n     /// the matcher `ms`.\n     fn new(ms: &'tt [TokenTree]) -> Self {\n@@ -217,7 +228,7 @@ impl<'root, 'tt> MatcherPos<'root, 'tt> {\n             // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in\n             // `top_elts`. `match_lo` for `top_elts` is 0 and `match_hi` is `match_idx_hi`.\n             // `match_cur` is 0 since we haven't actually matched anything yet.\n-            matches: create_matches(match_idx_hi),\n+            matches: Self::create_matches(match_idx_hi),\n             match_lo: 0,\n             match_cur: 0,\n             match_hi: match_idx_hi,\n@@ -230,6 +241,27 @@ impl<'root, 'tt> MatcherPos<'root, 'tt> {\n         }\n     }\n \n+    fn repetition(\n+        up: MatcherPosHandle<'root, 'tt>,\n+        sp: DelimSpan,\n+        seq: Lrc<SequenceRepetition>,\n+    ) -> Self {\n+        MatcherPos {\n+            stack: smallvec![],\n+            idx: 0,\n+            matches: Self::create_matches(up.matches.len()),\n+            match_lo: up.match_cur,\n+            match_cur: up.match_cur,\n+            match_hi: up.match_cur + seq.num_captures,\n+            repetition: Some(MatcherPosRepetition {\n+                up,\n+                sep: seq.separator.clone(),\n+                seq_op: seq.kleene.op,\n+            }),\n+            top_elts: Tt(TokenTree::Sequence(sp, seq)),\n+        }\n+    }\n+\n     /// Adds `m` as a named match for the `idx`-th metavar.\n     fn push_match(&mut self, idx: usize, m: NamedMatch) {\n         let matches = Lrc::make_mut(&mut self.matches[idx]);\n@@ -333,17 +365,6 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n     })\n }\n \n-/// `len` `Vec`s (initially shared and empty) that will store matches of metavars.\n-fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {\n-    if len == 0 {\n-        vec![]\n-    } else {\n-        let empty_matches = Lrc::new(SmallVec::new());\n-        vec![empty_matches; len]\n-    }\n-    .into_boxed_slice()\n-}\n-\n /// `NamedMatch` is a pattern-match result for a single `token::MATCH_NONTERMINAL`:\n /// so it is associated with a single ident in a parse, and all\n /// `MatchedNonterminal`s in the `NamedMatch` have the same non-terminal type\n@@ -599,21 +620,9 @@ fn parse_tt_inner<'root, 'tt>(\n                         cur_items.push(new_item);\n                     }\n \n-                    let matches = create_matches(item.matches.len());\n-                    cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {\n-                        stack: smallvec![],\n-                        idx: 0,\n-                        matches,\n-                        match_lo: item.match_cur,\n-                        match_cur: item.match_cur,\n-                        match_hi: item.match_cur + seq.num_captures,\n-                        repetition: Some(MatcherPosRepetition {\n-                            up: item,\n-                            sep: seq.separator.clone(),\n-                            seq_op: seq.kleene.op,\n-                        }),\n-                        top_elts: Tt(TokenTree::Sequence(sp, seq)),\n-                    })));\n+                    cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos::repetition(\n+                        item, sp, seq,\n+                    ))));\n                 }\n \n                 // We need to match a metavar (but the identifier is invalid)... this is an error"}]}