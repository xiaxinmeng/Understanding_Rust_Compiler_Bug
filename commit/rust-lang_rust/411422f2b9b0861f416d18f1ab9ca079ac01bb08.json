{"sha": "411422f2b9b0861f416d18f1ab9ca079ac01bb08", "node_id": "C_kwDOAAsO6NoAKDQxMTQyMmYyYjliMDg2MWY0MTZkMThmMWFiOWNhMDc5YWMwMWJiMDg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-12T05:26:05Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-13T02:10:16Z"}, "message": "Remove `impl ToRegionVid for RegionVid`.\n\nIt's weird and unnecessary.", "tree": {"sha": "660e89e08ab34d0078505bf4040309dd142a15d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660e89e08ab34d0078505bf4040309dd142a15d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/411422f2b9b0861f416d18f1ab9ca079ac01bb08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/411422f2b9b0861f416d18f1ab9ca079ac01bb08", "html_url": "https://github.com/rust-lang/rust/commit/411422f2b9b0861f416d18f1ab9ca079ac01bb08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/411422f2b9b0861f416d18f1ab9ca079ac01bb08/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "html_url": "https://github.com/rust-lang/rust/commit/c802694bdaded1ee655a08c3ecf03cf57bc4d60f"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "94939c7e4cd72ea0824baf09b64670e9fe2cae99", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=411422f2b9b0861f416d18f1ab9ca079ac01bb08", "patch": "@@ -11,9 +11,7 @@ use rustc_mir_dataflow::{self, fmt::DebugWithContext, CallReturnPlaces, GenKill}\n use rustc_mir_dataflow::{Analysis, Direction, Results};\n use std::fmt;\n \n-use crate::{\n-    places_conflict, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext, ToRegionVid,\n-};\n+use crate::{places_conflict, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext};\n \n /// A tuple with named fields that can hold either the results or the transient state of the\n /// dataflow analyses used by the borrow checker.\n@@ -242,7 +240,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n     ) -> Self {\n         let mut prec = OutOfScopePrecomputer::new(body, nonlexical_regioncx);\n         for (borrow_index, borrow_data) in borrow_set.iter_enumerated() {\n-            let borrow_region = borrow_data.region.to_region_vid();\n+            let borrow_region = borrow_data.region;\n             let location = borrow_data.reserve_location;\n \n             prec.precompute_borrows_out_of_scope(borrow_index, borrow_region, location);"}, {"sha": "a4b285a34fa4654eac10e3934274415fe20f2ba3", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=411422f2b9b0861f416d18f1ab9ca079ac01bb08", "patch": "@@ -94,7 +94,7 @@ pub mod consumers;\n \n use borrow_set::{BorrowData, BorrowSet};\n use dataflow::{BorrowIndex, BorrowckFlowState as Flows, BorrowckResults, Borrows};\n-use nll::{PoloniusOutput, ToRegionVid};\n+use nll::PoloniusOutput;\n use place_ext::PlaceExt;\n use places_conflict::{places_conflict, PlaceConflictBias};\n use region_infer::RegionInferenceContext;"}, {"sha": "8b5ff999e9b3dd69df2a6ab03f5e0609ac3d592e", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=411422f2b9b0861f416d18f1ab9ca079ac01bb08", "patch": "@@ -459,12 +459,6 @@ impl<'tcx> ToRegionVid for Region<'tcx> {\n     }\n }\n \n-impl ToRegionVid for RegionVid {\n-    fn to_region_vid(self) -> RegionVid {\n-        self\n-    }\n-}\n-\n pub(crate) trait ConstraintDescription {\n     fn description(&self) -> &'static str;\n }"}, {"sha": "ce6f3690e190402dd0eb8c0cc78a081d055b5274", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411422f2b9b0861f416d18f1ab9ca079ac01bb08/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=411422f2b9b0861f416d18f1ab9ca079ac01bb08", "patch": "@@ -27,7 +27,7 @@ use crate::{\n     },\n     diagnostics::{RegionErrorKind, RegionErrors, UniverseInfo},\n     member_constraints::{MemberConstraintSet, NllMemberConstraintIndex},\n-    nll::{PoloniusOutput, ToRegionVid},\n+    nll::PoloniusOutput,\n     region_infer::reverse_sccs::ReverseSccGraph,\n     region_infer::values::{\n         LivenessValues, PlaceholderIndices, RegionElement, RegionValueElements, RegionValues,\n@@ -593,39 +593,36 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Returns `true` if the region `r` contains the point `p`.\n     ///\n     /// Panics if called before `solve()` executes,\n-    pub(crate) fn region_contains(&self, r: impl ToRegionVid, p: impl ToElementIndex) -> bool {\n-        let scc = self.constraint_sccs.scc(r.to_region_vid());\n+    pub(crate) fn region_contains(&self, r: RegionVid, p: impl ToElementIndex) -> bool {\n+        let scc = self.constraint_sccs.scc(r);\n         self.scc_values.contains(scc, p)\n     }\n \n     /// Returns access to the value of `r` for debugging purposes.\n     pub(crate) fn region_value_str(&self, r: RegionVid) -> String {\n-        let scc = self.constraint_sccs.scc(r.to_region_vid());\n+        let scc = self.constraint_sccs.scc(r);\n         self.scc_values.region_value_str(scc)\n     }\n \n     pub(crate) fn placeholders_contained_in<'a>(\n         &'a self,\n         r: RegionVid,\n     ) -> impl Iterator<Item = ty::PlaceholderRegion> + 'a {\n-        let scc = self.constraint_sccs.scc(r.to_region_vid());\n+        let scc = self.constraint_sccs.scc(r);\n         self.scc_values.placeholders_contained_in(scc)\n     }\n \n     /// Returns access to the value of `r` for debugging purposes.\n     pub(crate) fn region_universe(&self, r: RegionVid) -> ty::UniverseIndex {\n-        let scc = self.constraint_sccs.scc(r.to_region_vid());\n+        let scc = self.constraint_sccs.scc(r);\n         self.scc_universes[scc]\n     }\n \n     /// Once region solving has completed, this function will return\n     /// the member constraints that were applied to the value of a given\n     /// region `r`. See `AppliedMemberConstraint`.\n-    pub(crate) fn applied_member_constraints(\n-        &self,\n-        r: impl ToRegionVid,\n-    ) -> &[AppliedMemberConstraint] {\n-        let scc = self.constraint_sccs.scc(r.to_region_vid());\n+    pub(crate) fn applied_member_constraints(&self, r: RegionVid) -> &[AppliedMemberConstraint] {\n+        let scc = self.constraint_sccs.scc(r);\n         binary_search_util::binary_search_slice(\n             &self.member_constraints_applied,\n             |applied| applied.member_region_scc,\n@@ -2234,7 +2231,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         r: RegionVid,\n         body: &Body<'_>,\n     ) -> Option<Location> {\n-        let scc = self.constraint_sccs.scc(r.to_region_vid());\n+        let scc = self.constraint_sccs.scc(r);\n         let locations = self.scc_values.locations_outlived_by(scc);\n         for location in locations {\n             let bb = &body[location.block];"}]}