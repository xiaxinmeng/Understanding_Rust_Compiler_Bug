{"sha": "78c2e0bfe98bc0490bd97a319104e2bd811c3c91", "node_id": "C_kwDOAAsO6NoAKDc4YzJlMGJmZTk4YmMwNDkwYmQ5N2EzMTkxMDRlMmJkODExYzNjOTE", "commit": {"author": {"name": "nsunderland1", "email": "sunderland.nicholas@protonmail.com", "date": "2022-02-14T01:07:14Z"}, "committer": {"name": "nsunderland1", "email": "sunderland.nicholas@protonmail.com", "date": "2022-02-14T01:07:14Z"}, "message": "Document `pub` requirement for `new_without_default` lint", "tree": {"sha": "236e4922c775da0cac5ff9639c4bc2b452f97c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236e4922c775da0cac5ff9639c4bc2b452f97c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c2e0bfe98bc0490bd97a319104e2bd811c3c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c2e0bfe98bc0490bd97a319104e2bd811c3c91", "html_url": "https://github.com/rust-lang/rust/commit/78c2e0bfe98bc0490bd97a319104e2bd811c3c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c2e0bfe98bc0490bd97a319104e2bd811c3c91/comments", "author": {"login": "nsunderland1", "id": 16548079, "node_id": "MDQ6VXNlcjE2NTQ4MDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16548079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsunderland1", "html_url": "https://github.com/nsunderland1", "followers_url": "https://api.github.com/users/nsunderland1/followers", "following_url": "https://api.github.com/users/nsunderland1/following{/other_user}", "gists_url": "https://api.github.com/users/nsunderland1/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsunderland1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsunderland1/subscriptions", "organizations_url": "https://api.github.com/users/nsunderland1/orgs", "repos_url": "https://api.github.com/users/nsunderland1/repos", "events_url": "https://api.github.com/users/nsunderland1/events{/privacy}", "received_events_url": "https://api.github.com/users/nsunderland1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nsunderland1", "id": 16548079, "node_id": "MDQ6VXNlcjE2NTQ4MDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16548079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsunderland1", "html_url": "https://github.com/nsunderland1", "followers_url": "https://api.github.com/users/nsunderland1/followers", "following_url": "https://api.github.com/users/nsunderland1/following{/other_user}", "gists_url": "https://api.github.com/users/nsunderland1/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsunderland1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsunderland1/subscriptions", "organizations_url": "https://api.github.com/users/nsunderland1/orgs", "repos_url": "https://api.github.com/users/nsunderland1/repos", "events_url": "https://api.github.com/users/nsunderland1/events{/privacy}", "received_events_url": "https://api.github.com/users/nsunderland1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c37d6eed067eb6fb4c126b4ac3c09499483071ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c37d6eed067eb6fb4c126b4ac3c09499483071ec", "html_url": "https://github.com/rust-lang/rust/commit/c37d6eed067eb6fb4c126b4ac3c09499483071ec"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "47121ad84f2c9af791edfeb2b77ca8ce9863b987", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78c2e0bfe98bc0490bd97a319104e2bd811c3c91/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c2e0bfe98bc0490bd97a319104e2bd811c3c91/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=78c2e0bfe98bc0490bd97a319104e2bd811c3c91", "patch": "@@ -13,7 +13,7 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for types with a `fn new() -> Self` method and no\n+    /// Checks for public types with a `pub fn new() -> Self` method and no\n     /// implementation of\n     /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html).\n     ///\n@@ -24,10 +24,10 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// struct Foo(Bar);\n+    /// pub struct Foo(Bar);\n     ///\n     /// impl Foo {\n-    ///     fn new() -> Self {\n+    ///     pub fn new() -> Self {\n     ///         Foo(Bar::new())\n     ///     }\n     /// }\n@@ -36,7 +36,7 @@ declare_clippy_lint! {\n     /// To fix the lint, add a `Default` implementation that delegates to `new`:\n     ///\n     /// ```ignore\n-    /// struct Foo(Bar);\n+    /// pub struct Foo(Bar);\n     ///\n     /// impl Default for Foo {\n     ///     fn default() -> Self {\n@@ -47,7 +47,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEW_WITHOUT_DEFAULT,\n     style,\n-    \"`fn new() -> Self` method without `Default` implementation\"\n+    \"`pub fn new() -> Self` method without `Default` implementation\"\n }\n \n #[derive(Clone, Default)]"}, {"sha": "c76e3b424383e2552591742e08acb054645ffc1e", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78c2e0bfe98bc0490bd97a319104e2bd811c3c91/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c2e0bfe98bc0490bd97a319104e2bd811c3c91/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=78c2e0bfe98bc0490bd97a319104e2bd811c3c91", "patch": "@@ -90,6 +90,22 @@ impl Private {\n     } // We don't lint private items\n }\n \n+struct PrivateStruct;\n+\n+impl PrivateStruct {\n+    pub fn new() -> PrivateStruct {\n+        unimplemented!()\n+    } // We don't lint public items on private structs\n+}\n+\n+pub struct PrivateItem;\n+\n+impl PrivateItem {\n+    fn new() -> PrivateItem {\n+        unimplemented!()\n+    } // We don't lint private items on public structs\n+}\n+\n struct Const;\n \n impl Const {"}, {"sha": "19572dfe8b0753bdb597ca3959314eede3bd0685", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78c2e0bfe98bc0490bd97a319104e2bd811c3c91/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78c2e0bfe98bc0490bd97a319104e2bd811c3c91/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=78c2e0bfe98bc0490bd97a319104e2bd811c3c91", "patch": "@@ -51,7 +51,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n-  --> $DIR/new_without_default.rs:156:5\n+  --> $DIR/new_without_default.rs:172:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         NewNotEqualToDerive { foo: 1 }\n@@ -68,7 +68,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n-  --> $DIR/new_without_default.rs:164:5\n+  --> $DIR/new_without_default.rs:180:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -85,7 +85,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n-  --> $DIR/new_without_default.rs:171:5\n+  --> $DIR/new_without_default.rs:187:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -102,7 +102,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `Foo<T>`\n-  --> $DIR/new_without_default.rs:182:9\n+  --> $DIR/new_without_default.rs:198:9\n    |\n LL | /         pub fn new() -> Self {\n LL | |             todo!()"}]}