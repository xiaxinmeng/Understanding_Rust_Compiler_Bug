{"sha": "f8c7d8dc8e8f779e6468e83f79456ed1916a93d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzdkOGRjOGU4Zjc3OWU2NDY4ZTgzZjc5NDU2ZWQxOTE2YTkzZDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-03T21:14:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-03T21:14:14Z"}, "message": "make set return a mutable reference", "tree": {"sha": "7347b23c2d9d9af69d33af12e1bb23abae1d398a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7347b23c2d9d9af69d33af12e1bb23abae1d398a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7", "html_url": "https://github.com/rust-lang/rust/commit/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760424af17bc40c4fd2be95e96ebcebe70d217e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/760424af17bc40c4fd2be95e96ebcebe70d217e9", "html_url": "https://github.com/rust-lang/rust/commit/760424af17bc40c4fd2be95e96ebcebe70d217e9"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "4712df1fa7cd20a51fea3e95f3be0c018495ee5e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c7d8dc8e8f779e6468e83f79456ed1916a93d7/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=f8c7d8dc8e8f779e6468e83f79456ed1916a93d7", "patch": "@@ -1117,11 +1117,14 @@ impl<T> MaybeUninit<T> {\n     }\n \n     /// Set the value of the `MaybeUninit`. This overwrites any previous value without dropping it.\n+    /// For your convenience, this also returns a mutable reference to the (now\n+    /// safely initialized) content of `self`.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub fn set(&mut self, val: T) {\n+    pub fn set(&mut self, val: T) -> &mut T {\n         unsafe {\n             self.value = ManuallyDrop::new(val);\n+            self.get_mut()\n         }\n     }\n "}]}