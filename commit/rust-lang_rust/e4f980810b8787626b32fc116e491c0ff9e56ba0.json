{"sha": "e4f980810b8787626b32fc116e491c0ff9e56ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Zjk4MDgxMGI4Nzg3NjI2YjMyZmMxMTZlNDkxYzBmZjllNTZiYTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T00:10:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T01:26:22Z"}, "message": "rt: Simplify channel-port association\n\nIt turns out that there's only ever a single channel per port these days,\nand it always has the same lifetime as the port, so we don't need a list or a\ncomplex association protocol.", "tree": {"sha": "54846f214cf1758a8e6079be028c980fdff15b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54846f214cf1758a8e6079be028c980fdff15b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f980810b8787626b32fc116e491c0ff9e56ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f980810b8787626b32fc116e491c0ff9e56ba0", "html_url": "https://github.com/rust-lang/rust/commit/e4f980810b8787626b32fc116e491c0ff9e56ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f980810b8787626b32fc116e491c0ff9e56ba0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08d0ff38bc6efe2915b877dfec443a3d7853831b", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d0ff38bc6efe2915b877dfec443a3d7853831b", "html_url": "https://github.com/rust-lang/rust/commit/08d0ff38bc6efe2915b877dfec443a3d7853831b"}], "stats": {"total": 93, "additions": 23, "deletions": 70}, "files": [{"sha": "89bd58effa9a27c34c9e9bf9768c5820b3cfb304", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=e4f980810b8787626b32fc116e491c0ff9e56ba0", "patch": "@@ -538,9 +538,8 @@ port_recv(uintptr_t *dptr, rust_port *port) {\n         scoped_lock with(port->lock);\n \n         LOG(task, comm, \"port: 0x%\" PRIxPTR \", dptr: 0x%\" PRIxPTR\n-            \", size: 0x%\" PRIxPTR \", chan_no: %d\",\n-            (uintptr_t) port, (uintptr_t) dptr, port->unit_sz,\n-            port->chans.length());\n+            \", size: 0x%\" PRIxPTR,\n+            (uintptr_t) port, (uintptr_t) dptr, port->unit_sz);\n \n         if (port->receive(dptr)) {\n             return;"}, {"sha": "de26feac020d396a47ecd0aad9451210522d64d9", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=e4f980810b8787626b32fc116e491c0ff9e56ba0", "patch": "@@ -6,16 +6,17 @@\n  */\n rust_chan::rust_chan(rust_kernel *kernel, rust_port *port,\n                      size_t unit_sz)\n-    : ref_count(1),\n+    : ref_count(0),\n       kernel(kernel),\n       port(port),\n       buffer(kernel, unit_sz) {\n-    if (port) {\n-        associate(port);\n-    }\n     KLOG(kernel, comm, \"new rust_chan(task=0x%\" PRIxPTR\n         \", port=0x%\" PRIxPTR \") -> chan=0x%\" PRIxPTR,\n         (uintptr_t) task, (uintptr_t) port, (uintptr_t) this);\n+\n+    A(kernel, port != NULL, \"Port must not be null\");\n+    this->task = port->task;\n+    this->task->ref();\n }\n \n rust_chan::~rust_chan() {\n@@ -26,49 +27,15 @@ rust_chan::~rust_chan() {\n \n     A(kernel, is_associated() == false,\n       \"Channel must be disassociated before being freed.\");\n-}\n \n-/**\n- * Link this channel with the specified port.\n- */\n-void rust_chan::associate(rust_port *port) {\n-    this->ref();\n-    this->port = port;\n-    scoped_lock with(port->lock);\n-    KLOG(kernel, task,\n-         \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n-         this, port);\n-    this->task = port->task;\n-    this->task->ref();\n-    this->port->chans.push(this);\n+    task->deref();\n+    task = NULL;\n }\n \n bool rust_chan::is_associated() {\n     return port != NULL;\n }\n \n-/**\n- * Unlink this channel from its associated port.\n- */\n-void rust_chan::disassociate() {\n-    A(kernel,\n-      port->lock.lock_held_by_current_thread(),\n-      \"Port referent lock must be held to call rust_chan::disassociate\");\n-    A(kernel, is_associated(),\n-      \"Channel must be associated with a port.\");\n-    KLOG(kernel, task,\n-         \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n-         this, port);\n-    task->deref();\n-    this->task = NULL;\n-    port->chans.swap_delete(this);\n-\n-    // Delete reference to the port.\n-    port = NULL;\n-\n-    this->deref();\n-}\n-\n /**\n  * Attempt to send data to the associated port.\n  */"}, {"sha": "0736012e63c3ca5f317933a82b2c9fb527a370f3", "filename": "src/rt/rust_chan.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_chan.h", "raw_url": "https://github.com/rust-lang/rust/raw/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_chan.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.h?ref=e4f980810b8787626b32fc116e491c0ff9e56ba0", "patch": "@@ -16,8 +16,6 @@ class rust_chan : public kernel_owned<rust_chan>,\n     size_t idx;\n     circular_buffer buffer;\n \n-    void associate(rust_port *port);\n-    void disassociate();\n     bool is_associated();\n \n     void send(void *sptr);"}, {"sha": "38120d8fcf2a2cb46c88785601b893b52c438aeb", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=e4f980810b8787626b32fc116e491c0ff9e56ba0", "patch": "@@ -5,7 +5,7 @@\n \n rust_port::rust_port(rust_task *task, size_t unit_sz)\n     : ref_count(1), kernel(task->kernel), task(task),\n-      unit_sz(unit_sz), writers(task), chans(task) {\n+      unit_sz(unit_sz), writers(task) {\n \n     LOG(task, comm,\n         \"new rust_port(task=0x%\" PRIxPTR \", unit_sz=%d) -> port=0x%\"\n@@ -14,47 +14,37 @@ rust_port::rust_port(rust_task *task, size_t unit_sz)\n     id = task->register_port(this);\n     remote_chan = new (task->kernel, \"rust_chan\")\n         rust_chan(task->kernel, this, unit_sz);\n+    remote_chan->ref();\n+    remote_chan->port = this;\n }\n \n rust_port::~rust_port() {\n     LOG(task, comm, \"~rust_port 0x%\" PRIxPTR, (uintptr_t) this);\n \n-    // Disassociate channels from this port.\n-    while (chans.is_empty() == false) {\n+    {\n         scoped_lock with(lock);\n-        rust_chan *chan = chans.peek();\n-        chan->disassociate();\n+        remote_chan->port = NULL;\n+        remote_chan->deref();\n+        remote_chan = NULL;\n     }\n \n-    remote_chan->deref();\n-    remote_chan = NULL;\n-\n     task->release_port(id);\n }\n \n bool rust_port::receive(void *dptr) {\n-    for (uint32_t i = 0; i < chans.length(); i++) {\n-        rust_chan *chan = chans[i];\n-        if (chan->buffer.is_empty() == false) {\n-            chan->buffer.dequeue(dptr);\n-            LOG(task, comm, \"<=== read data ===\");\n-            return true;\n-        }\n+    if (remote_chan->buffer.is_empty() == false) {\n+        remote_chan->buffer.dequeue(dptr);\n+        LOG(task, comm, \"<=== read data ===\");\n+        return true;\n     }\n     return false;\n }\n \n void rust_port::log_state() {\n     LOG(task, comm,\n-              \"rust_port: 0x%\" PRIxPTR \", associated channel(s): %d\",\n-              this, chans.length());\n-    for (uint32_t i = 0; i < chans.length(); i++) {\n-        rust_chan *chan = chans[i];\n-        LOG(task, comm,\n-            \"\\tchan: 0x%\" PRIxPTR \", size: %d\",\n-            chan,\n-            chan->buffer.size());\n-    }\n+        \"\\tchan: 0x%\" PRIxPTR \", size: %d\",\n+        remote_chan,\n+        remote_chan->buffer.size());\n }\n \n //"}, {"sha": "566c88f026b6d1ff2d3ad4710cd3de703ec98af8", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/e4f980810b8787626b32fc116e491c0ff9e56ba0/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=e4f980810b8787626b32fc116e491c0ff9e56ba0", "patch": "@@ -12,7 +12,6 @@ class rust_port : public kernel_owned<rust_port>, public rust_cond {\n     rust_chan *remote_chan;\n     size_t unit_sz;\n     ptr_vec<rust_token> writers;\n-    ptr_vec<rust_chan> chans;\n \n     lock_and_signal lock;\n "}]}