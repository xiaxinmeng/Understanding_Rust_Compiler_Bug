{"sha": "c8865d8e195813ade6b84434ac9f8850e7112d1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODY1ZDhlMTk1ODEzYWRlNmI4NDQzNGFjOWY4ODUwZTcxMTJkMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-07T14:50:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-07T14:50:22Z"}, "message": "Auto merge of #61622 - Centril:rollup-6ivvmul, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #61332 (Remove asterisk suggestion for move errors in borrowck)\n - #61532 ([const-prop] Support Rvalue::{Ref,Len} and Deref)\n - #61586 (ci: Disable LLVM/debug assertions for asmjs builder)\n - #61599 (libcore/pin: Minor grammar corrections for module documentation)\n - #61603 (Increases heap size available during testing for SGX)\n - #61605 (Fix slice const generic length display)\n - #61618 (make the backtrace field of EvalError private)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fc215e8ceabdc786ed09f930a0b0f35a46d78e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc215e8ceabdc786ed09f930a0b0f35a46d78e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8865d8e195813ade6b84434ac9f8850e7112d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8865d8e195813ade6b84434ac9f8850e7112d1a", "html_url": "https://github.com/rust-lang/rust/commit/c8865d8e195813ade6b84434ac9f8850e7112d1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8865d8e195813ade6b84434ac9f8850e7112d1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1c60d292e2dd2deff7084208274f9a02f750d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c60d292e2dd2deff7084208274f9a02f750d43", "html_url": "https://github.com/rust-lang/rust/commit/c1c60d292e2dd2deff7084208274f9a02f750d43"}, {"sha": "b9c752b550321bbab47b4c4df6df7fe4443d48f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c752b550321bbab47b4c4df6df7fe4443d48f1", "html_url": "https://github.com/rust-lang/rust/commit/b9c752b550321bbab47b4c4df6df7fe4443d48f1"}], "stats": {"total": 367, "additions": 242, "deletions": 125}, "files": [{"sha": "01d6fce34186a50db647dbee2351f6ec46e824f5", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -37,3 +37,11 @@ ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n   src/libstd \\\n   src/liballoc \\\n   src/libcore\n+\n+# Debug assertions in rustc are largely covered by other builders, and LLVM\n+# assertions cause this builder to slow down by quite a large amount and don't\n+# buy us a huge amount over other builders (not sure if we've ever seen an\n+# asmjs-specific backend assertion trip), so disable assertions for these\n+# tests.\n+ENV NO_LLVM_ASSERTIONS=1\n+ENV NO_DEBUG_ASSERTIONS=1"}, {"sha": "c5247e134c86a48e0c0dbeb50aad8c133fb3b586", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -1,10 +1,10 @@\n //! Types that pin data to its location in memory.\n //!\n-//! It is sometimes useful to have objects that are guaranteed to not move,\n+//! It is sometimes useful to have objects that are guaranteed not to move,\n //! in the sense that their placement in memory does not change, and can thus be relied upon.\n //! A prime example of such a scenario would be building self-referential structs,\n-//! since moving an object with pointers to itself will invalidate them,\n-//! which could cause undefined behavior.\n+//! as moving an object with pointers to itself will invalidate them, which could cause undefined\n+//! behavior.\n //!\n //! A [`Pin<P>`] ensures that the pointee of any pointer type `P` has a stable location in memory,\n //! meaning it cannot be moved elsewhere and its memory cannot be deallocated\n@@ -15,9 +15,10 @@\n //! moving the values they contain: you can move out of a `Box<T>`, or you can use [`mem::swap`].\n //! [`Pin<P>`] wraps a pointer type `P`, so `Pin<Box<T>>` functions much like a regular `Box<T>`:\n //! when a `Pin<Box<T>>` gets dropped, so do its contents, and the memory gets deallocated.\n-//! Similarily, `Pin<&mut T>` is a lot like `&mut T`. However, [`Pin<P>`] does not let clients\n+//! Similarly, `Pin<&mut T>` is a lot like `&mut T`. However, [`Pin<P>`] does not let clients\n //! actually obtain a `Box<T>` or `&mut T` to pinned data, which implies that you cannot use\n //! operations such as [`mem::swap`]:\n+//!\n //! ```\n //! use std::pin::Pin;\n //! fn swap_pins<T>(x: Pin<&mut T>, y: Pin<&mut T>) {\n@@ -39,19 +40,19 @@\n //! as a \"`P`-style pointer\" to a pinned `P::Target` -- so, a `Pin<Box<T>>` is\n //! an owned pointer to a pinned `T`, and a `Pin<Rc<T>>` is a reference-counted\n //! pointer to a pinned `T`.\n-//! For correctness, [`Pin<P>`] relies on the [`Deref`] and [`DerefMut`] implementations\n-//! to not move out of their `self` parameter, and to only ever return a pointer\n-//! to pinned data when they are called on a pinned pointer.\n+//! For correctness, [`Pin<P>`] relies on the implementations of [`Deref`] and\n+//! [`DerefMut`] not to move out of their `self` parameter, and only ever to\n+//! return a pointer to pinned data when they are called on a pinned pointer.\n //!\n //! # `Unpin`\n //!\n-//! However, these restrictions are usually not necessary. Many types are always freely\n-//! movable, even when pinned, because they do not rely on having a stable address.\n-//! This includes all the basic types (like `bool`, `i32`, references)\n-//! as well as types consisting solely of these types.\n-//! Types that do not care about pinning implement the [`Unpin`] auto-trait, which\n-//! cancels the effect of [`Pin<P>`]. For `T: Unpin`, `Pin<Box<T>>` and `Box<T>` function\n-//! identically, as do `Pin<&mut T>` and `&mut T`.\n+//! Many types are always freely movable, even when pinned, because they do not\n+//! rely on having a stable address. This includes all the basic types (like\n+//! `bool`, `i32`, and references) as well as types consisting solely of these\n+//! types. Types that do not care about pinning implement the [`Unpin`]\n+//! auto-trait, which cancels the effect of [`Pin<P>`]. For `T: Unpin`,\n+//! `Pin<Box<T>>` and `Box<T>` function identically, as do `Pin<&mut T>` and\n+//! `&mut T`.\n //!\n //! Note that pinning and `Unpin` only affect the pointed-to type `P::Target`, not the pointer\n //! type `P` itself that got wrapped in `Pin<P>`. For example, whether or not `Box<T>` is\n@@ -65,11 +66,11 @@\n //! use std::marker::PhantomPinned;\n //! use std::ptr::NonNull;\n //!\n-//! // This is a self-referential struct since the slice field points to the data field.\n+//! // This is a self-referential struct because the slice field points to the data field.\n //! // We cannot inform the compiler about that with a normal reference,\n-//! // since this pattern cannot be described with the usual borrowing rules.\n-//! // Instead we use a raw pointer, though one which is known to not be null,\n-//! // since we know it's pointing at the string.\n+//! // as this pattern cannot be described with the usual borrowing rules.\n+//! // Instead we use a raw pointer, though one which is known not to be null,\n+//! // as we know it's pointing at the string.\n //! struct Unmovable {\n //!     data: String,\n //!     slice: NonNull<String>,\n@@ -146,7 +147,7 @@\n //! section needs to function correctly.\n //!\n //! Notice that this guarantee does *not* mean that memory does not leak! It is still\n-//! completely okay not to ever call `drop` on a pinned element (e.g., you can still\n+//! completely okay not ever to call `drop` on a pinned element (e.g., you can still\n //! call [`mem::forget`] on a `Pin<Box<T>>`). In the example of the doubly-linked\n //! list, that element would just stay in the list. However you may not free or reuse the storage\n //! *without calling `drop`*.\n@@ -192,7 +193,7 @@\n //!     `Unpin`. This is the default, but `Unpin` is a safe trait, so as the author of\n //!     the wrapper it is your responsibility *not* to add something like\n //!     `impl<T> Unpin for Wrapper<T>`. (Notice that adding a projection operation\n-//!     requires unsafe code, so the fact that `Unpin` is a safe trait  does not break\n+//!     requires unsafe code, so the fact that `Unpin` is a safe trait does not break\n //!     the principle that you only have to worry about any of this if you use `unsafe`.)\n //! 2.  The destructor of the wrapper must not move structural fields out of its argument. This\n //!     is the exact point that was raised in the [previous section][drop-impl]: `drop` takes"}, {"sha": "e324abd8e2f32bdc20daa0aa345d32f7a03d8bf6", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -179,10 +179,15 @@ pub fn struct_error<'a, 'gcx, 'tcx>(\n     struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n }\n \n+/// Packages the kind of error we got from the const code interpreter\n+/// up with a Rust-level backtrace of where the error occured.\n+/// Thsese should always be constructed by calling `.into()` on\n+/// a `InterpError`. In `librustc_mir::interpret`, we have the `err!`\n+/// macro for this\n #[derive(Debug, Clone)]\n pub struct EvalError<'tcx> {\n     pub kind: InterpError<'tcx, u64>,\n-    pub backtrace: Option<Box<Backtrace>>,\n+    backtrace: Option<Box<Backtrace>>,\n }\n \n impl<'tcx> EvalError<'tcx> {"}, {"sha": "c421839513c012de4ce0eb91c8ca75257733a601", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -503,32 +503,12 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 move_from,\n                 ..\n             } => {\n-                let try_remove_deref = match move_from {\n-                    Place::Projection(box Projection {\n-                        elem: ProjectionElem::Deref,\n-                        ..\n-                    }) => true,\n-                    _ => false,\n-                };\n-                if try_remove_deref && snippet.starts_with('*') {\n-                    // The snippet doesn't start with `*` in (e.g.) index\n-                    // expressions `a[b]`, which roughly desugar to\n-                    // `*Index::index(&a, b)` or\n-                    // `*IndexMut::index_mut(&mut a, b)`.\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider removing the `*`\",\n-                        snippet[1..].to_owned(),\n-                        Applicability::Unspecified,\n-                    );\n-                } else {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider borrowing here\",\n-                        format!(\"&{}\", snippet),\n-                        Applicability::Unspecified,\n-                    );\n-                }\n+                err.span_suggestion(\n+                    span,\n+                    \"consider borrowing here\",\n+                    format!(\"&{}\", snippet),\n+                    Applicability::Unspecified,\n+                );\n \n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.mir, self.infcx.tcx).ty;"}, {"sha": "a3297666113d4aabd4245b130e63f63c452a4f80", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -663,6 +663,23 @@ where\n         Ok(())\n     }\n \n+    /// Write an `Immediate` to memory.\n+    #[inline(always)]\n+    pub fn write_immediate_to_mplace(\n+        &mut self,\n+        src: Immediate<M::PointerTag>,\n+        dest: MPlaceTy<'tcx, M::PointerTag>,\n+    ) -> EvalResult<'tcx> {\n+        self.write_immediate_to_mplace_no_validate(src, dest)?;\n+\n+        if M::enforce_validity(self) {\n+            // Data got changed, better make sure it matches the type!\n+            self.validate_operand(dest.into(), vec![], None, /*const_mode*/ false)?;\n+        }\n+\n+        Ok(())\n+    }\n+\n     /// Write an immediate to a place.\n     /// If you use this you are responsible for validating that things got copied at the\n     /// right type."}, {"sha": "0d389b31f907536878eea4f3cfe09c393871ce4a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -17,8 +17,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::layout::{\n-    LayoutOf, TyLayout, LayoutError,\n-    HasTyCtxt, TargetDataLayout, HasDataLayout,\n+    LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout, Size,\n };\n \n use crate::interpret::{\n@@ -333,6 +332,12 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                             this.ecx.operand_field(eval, field.index() as u64)\n                         })?;\n                     },\n+                    ProjectionElem::Deref => {\n+                        trace!(\"processing deref\");\n+                        eval = self.use_ecx(source_info, |this| {\n+                            this.ecx.deref_operand(eval)\n+                        })?.into();\n+                    }\n                     // We could get more projections by using e.g., `operand_projection`,\n                     // but we do not even have the stack frame set up properly so\n                     // an `Index` projection would throw us off-track.\n@@ -363,8 +368,12 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             Rvalue::Use(ref op) => {\n                 self.eval_operand(op, source_info)\n             },\n+            Rvalue::Ref(_, _, ref place) => {\n+                let src = self.eval_place(place, source_info)?;\n+                let mplace = src.try_as_mplace().ok()?;\n+                Some(ImmTy::from_scalar(mplace.ptr.into(), place_layout).into())\n+            },\n             Rvalue::Repeat(..) |\n-            Rvalue::Ref(..) |\n             Rvalue::Aggregate(..) |\n             Rvalue::NullaryOp(NullOp::Box, _) |\n             Rvalue::Discriminant(..) => None,\n@@ -376,10 +385,30 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     this.ecx.cast(op, kind, dest.into())?;\n                     Ok(dest.into())\n                 })\n-            }\n+            },\n+            Rvalue::Len(ref place) => {\n+                let place = self.eval_place(&place, source_info)?;\n+                let mplace = place.try_as_mplace().ok()?;\n+\n+                if let ty::Slice(_) = mplace.layout.ty.sty {\n+                    let len = mplace.meta.unwrap().to_usize(&self.ecx).unwrap();\n \n-            // FIXME(oli-obk): evaluate static/constant slice lengths\n-            Rvalue::Len(_) => None,\n+                    Some(ImmTy {\n+                        imm: Immediate::Scalar(\n+                            Scalar::from_uint(\n+                                len,\n+                                Size::from_bits(\n+                                    self.tcx.sess.target.usize_ty.bit_width().unwrap() as u64\n+                                )\n+                            ).into(),\n+                        ),\n+                        layout: self.tcx.layout_of(self.param_env.and(self.tcx.types.usize)).ok()?,\n+                    }.into())\n+                } else {\n+                    trace!(\"not slice: {:?}\", mplace.layout.ty.sty);\n+                    None\n+                }\n+            },\n             Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                 type_size_of(self.tcx, self.param_env, ty).and_then(|n| Some(\n                     ImmTy {\n@@ -525,12 +554,10 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         source_info: SourceInfo,\n     ) {\n         trace!(\"attepting to replace {:?} with {:?}\", rval, value);\n-        self.ecx.validate_operand(\n-            value,\n-            vec![],\n-            None,\n-            true,\n-        ).expect(\"value should already be a valid const\");\n+        if let Err(e) = self.ecx.validate_operand(value, vec![], None, true) {\n+            trace!(\"validation error, attempt failed: {:?}\", e);\n+            return;\n+        }\n \n         // FIXME> figure out what tho do when try_read_immediate fails\n         let imm = self.use_ecx(source_info, |this| {"}, {"sha": "a717ef20a844413eaca5dbd73464e10ed88b32e2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -2768,7 +2768,10 @@ impl Clean<Type> for hir::Ty {\n                 };\n                 let length = match cx.tcx.const_eval(param_env.and(cid)) {\n                     Ok(length) => print_const(cx, length),\n-                    Err(_) => \"_\".to_string(),\n+                    Err(_) => cx.sess()\n+                                .source_map()\n+                                .span_to_snippet(cx.tcx.def_span(def_id))\n+                                .unwrap_or_else(|_| \"_\".to_string()),\n                 };\n                 Array(box ty.clean(cx), length)\n             },"}, {"sha": "30e23f1007f20b7a7e4d14f69b03a9f45298b502", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -87,3 +87,5 @@ std_detect_dlsym_getauxval = []\n [package.metadata.fortanix-sgx]\n # Maximum possible number of threads when testing\n threads = 125\n+# Maximum heap size\n+heap_size = 0x8000000"}, {"sha": "2d04822c0e7898a453652aa21e8204bad75ee464", "filename": "src/test/mir-opt/const_prop/ref_deref.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -0,0 +1,21 @@\n+fn main() {\n+    *(&4);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+// bb0: {\n+//     ...\n+//     _2 = &(promoted[0]: i32);\n+//     _1 = (*_2);\n+//     ...\n+//}\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+// bb0: {\n+//     ...\n+//     _2 = const Scalar(AllocId(0).0x0) : &i32;\n+//     _1 = const 4i32;\n+//     ...\n+// }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "809eb19ade899194aedce53275369e2a770715ec", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -0,0 +1,25 @@\n+fn main() {\n+    let _ = main as usize as *const fn();\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _3 = const main as fn() (Pointer(ReifyFnPointer));\n+//      _2 = move _3 as usize (Misc);\n+//      ...\n+//      _1 = move _2 as *const fn() (Misc);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = const Scalar(AllocId(1).0x0) : fn();\n+//      _2 = move _3 as usize (Misc);\n+//      ...\n+//      _1 = const Scalar(AllocId(1).0x0) : *const fn();\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "5babeb195a826f0fbf7e2b5ebfb36a4a58d77d60", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -1,36 +1,40 @@\n-fn test() -> &'static [u32] {\n-    &[1, 2]\n-}\n-\n fn main() {\n-    let x = test()[0];\n+    (&[1u32, 2, 3] as &[u32])[1];\n }\n \n // END RUST SOURCE\n // START rustc.main.ConstProp.before.mir\n-//  bb1: {\n+//  bb0: {\n //      ...\n-//      _3 = const 0usize;\n-//      _4 = Len((*_2));\n-//      _5 = Lt(_3, _4);\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//      _4 = &(promoted[0]: [u32; 3]);\n+//      _3 = _4;\n+//      _2 = move _3 as &[u32] (Pointer(Unsize));\n+//      ...\n+//      _6 = const 1usize;\n+//      _7 = Len((*_2));\n+//      _8 = Lt(_6, _7);\n+//      assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n //  }\n-//  bb2: {\n-//      _1 = (*_2)[_3];\n+//  bb1: {\n+//      _1 = (*_2)[_6];\n //      ...\n //      return;\n //  }\n // END rustc.main.ConstProp.before.mir\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _3 = const 0usize;\n-//      _4 = Len((*_2));\n-//      _5 = Lt(_3, _4);\n-//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//      _4 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n+//      _3 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n+//      _2 = move _3 as &[u32] (Pointer(Unsize));\n+//      ...\n+//      _6 = const 1usize;\n+//      _7 = const 3usize;\n+//      _8 = const true;\n+//      assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1;\n //  }\n-//  bb2: {\n-//      _1 = (*_2)[_3];\n+//  bb1: {\n+//      _1 = (*_2)[_6];\n //      ...\n //      return;\n //  }"}, {"sha": "60d96770f7eaea8f0ffa9df1075767450f4ae610", "filename": "src/test/rustdoc/const-generics/const-generic-slice.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -0,0 +1,12 @@\n+#![crate_name = \"foo\"]\n+#![feature(const_generics)]\n+\n+pub trait Array {\n+    type Item;\n+}\n+\n+// @has foo/trait.Array.html\n+// @has - '//h3[@class=\"impl\"]' 'impl<T, const N: usize> Array for [T; N]'\n+impl <T, const N: usize> Array for [T; N] {\n+    type Item = T;\n+}"}, {"sha": "349e3f4a836a0bbf5cf1bb67a7f9072333590cb4", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -6,7 +6,7 @@ LL |         match *s { S(v) => v }\n    |               |      |\n    |               |      data moved here\n    |               |      move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n-   |               help: consider removing the `*`: `s`\n+   |               help: consider borrowing here: `&*s`\n \n error: aborting due to previous error\n "}, {"sha": "5880a1abb818ca384749f2d98c81c6e97e371606", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |         let _b = *y;\n    |                  ^^\n    |                  |\n    |                  move occurs because `*y` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-   |                  help: consider removing the `*`: `y`\n+   |                  help: consider borrowing here: `&*y`\n \n error: aborting due to previous error\n "}, {"sha": "d56b9f562c932dfc5c51feb38a4916298a01ca1a", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of `f.0` which is behind a shared reference\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n LL |     match *f {\n-   |           ^^ help: consider removing the `*`: `f`\n+   |           ^^ help: consider borrowing here: `&*f`\n LL |         Foo::Foo1(num1,\n    |                   ---- data moved here\n LL |                   num2) => (),"}, {"sha": "7dfae33920e1cd146e420df19fefc1d7ce986745", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |     let y = *x;\n    |             ^^\n    |             |\n    |             move occurs because `*x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `x`\n+   |             help: consider borrowing here: `&*x`\n \n error: aborting due to previous error\n "}, {"sha": "1501644fac758e1ef9024d09056ae258fc872dac", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              move occurs because value has type `std::string::String`, which does not implement the `Copy` trait\n-   |              help: consider removing the `*`: `Rc::new(\"hi\".to_string())`\n+   |              help: consider borrowing here: `&*Rc::new(\"hi\".to_string())`\n \n error: aborting due to previous error\n "}, {"sha": "78d44f320619973ec26a63cde793d65224c31a2a", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |             *array\n    |             ^^^^^^\n    |             |\n    |             move occurs because `*array` has type `std::vec::Vec<Value>`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `array`\n+   |             help: consider borrowing here: `&*array`\n \n error: aborting due to previous error\n "}, {"sha": "c9f3a7659f9cd216615164ca711aef5c1a8c83bc", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -16,6 +16,12 @@ warning: attempt to divide by zero\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n+warning: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ attempt to divide by zero\n+\n warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:11:14\n    |\n@@ -34,6 +40,12 @@ warning: attempt to divide by zero\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n+warning: this expression will panic at runtime\n+  --> $DIR/promoted_errors.rs:14:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:16:14\n    |"}, {"sha": "d276231dc0c967103b894dff7784ed953f5daa48", "filename": "src/test/ui/issues/issue-20801.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |     let a = unsafe { *mut_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `mut_ref()`\n+   |                      help: consider borrowing here: `&*mut_ref()`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/issue-20801.rs:29:22\n@@ -14,7 +14,7 @@ LL |     let b = unsafe { *imm_ref() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `imm_ref()`\n+   |                      help: consider borrowing here: `&*imm_ref()`\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:32:22\n@@ -23,7 +23,7 @@ LL |     let c = unsafe { *mut_ptr() };\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `mut_ptr()`\n+   |                      help: consider borrowing here: `&*mut_ptr()`\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:35:22\n@@ -32,7 +32,7 @@ LL |     let d = unsafe { *const_ptr() };\n    |                      ^^^^^^^^^^^^\n    |                      |\n    |                      move occurs because value has type `T`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `const_ptr()`\n+   |                      help: consider borrowing here: `&*const_ptr()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7db5d731acd17baa49079f5113f688cf7e14c142", "filename": "src/test/ui/nll/cannot-move-block-spans.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |     let x = { *r };\n    |               ^^\n    |               |\n    |               move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |               help: consider removing the `*`: `r`\n+   |               help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:6:22\n@@ -14,7 +14,7 @@ LL |     let y = unsafe { *r };\n    |                      ^^\n    |                      |\n    |                      move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                      help: consider removing the `*`: `r`\n+   |                      help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:7:26\n@@ -23,7 +23,7 @@ LL |     let z = loop { break *r; };\n    |                          ^^\n    |                          |\n    |                          move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                          help: consider removing the `*`: `r`\n+   |                          help: consider borrowing here: `&*r`\n \n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:11:15\n@@ -62,7 +62,7 @@ LL |     let x = { let mut u = 0; u += 1; *r };\n    |                                      ^^\n    |                                      |\n    |                                      move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                                      help: consider removing the `*`: `r`\n+   |                                      help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:18:45\n@@ -71,7 +71,7 @@ LL |     let y = unsafe { let mut u = 0; u += 1; *r };\n    |                                             ^^\n    |                                             |\n    |                                             move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                                             help: consider removing the `*`: `r`\n+   |                                             help: consider borrowing here: `&*r`\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:19:49\n@@ -80,7 +80,7 @@ LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n    |                                                 ^^\n    |                                                 |\n    |                                                 move occurs because `*r` has type `std::string::String`, which does not implement the `Copy` trait\n-   |                                                 help: consider removing the `*`: `r`\n+   |                                                 help: consider borrowing here: `&*r`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "7139617a97a4fe8e0c3cf312ce67a0b035e1addd", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |     let b = *a;\n    |             ^^\n    |             |\n    |             move occurs because `*a` has type `A`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `a`\n+   |             help: consider borrowing here: `&*a`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:12:13\n@@ -24,7 +24,7 @@ LL |     let s = **r;\n    |             ^^^\n    |             |\n    |             move occurs because `**r` has type `A`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `*r`\n+   |             help: consider borrowing here: `&**r`\n \n error[E0507]: cannot move out of an `Rc`\n   --> $DIR/move-errors.rs:27:13\n@@ -33,7 +33,7 @@ LL |     let s = *r;\n    |             ^^\n    |             |\n    |             move occurs because value has type `A`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `r`\n+   |             help: consider borrowing here: `&*r`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:32:13\n@@ -49,7 +49,7 @@ error[E0507]: cannot move out of `a.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:38:16\n    |\n LL |     let A(s) = *a;\n-   |           -    ^^ help: consider removing the `*`: `a`\n+   |           -    ^^ help: consider borrowing here: `&*a`\n    |           |\n    |           data moved here\n    |           move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n@@ -148,7 +148,7 @@ error[E0507]: cannot move out of `x.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11\n    |\n LL |     match *x {\n-   |           ^^ help: consider removing the `*`: `x`\n+   |           ^^ help: consider borrowing here: `&*x`\n LL |\n LL |         Ok(s) | Err(s) => (),\n    |            -"}, {"sha": "9db9fcf40f82c0d34bddd0eb2d2322eff055090f", "filename": "src/test/ui/std-uncopyable-atomics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -5,7 +5,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicBool`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:11:13\n@@ -14,7 +14,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicIsize`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:13:13\n@@ -23,7 +23,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:15:13\n@@ -32,7 +32,7 @@ LL |     let x = *&x;\n    |             ^^^\n    |             |\n    |             move occurs because value has type `std::sync::atomic::AtomicPtr<usize>`, which does not implement the `Copy` trait\n-   |             help: consider removing the `*`: `&x`\n+   |             help: consider borrowing here: `&*&x`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "69b303a66237ebf8184d8737a78551c2a1990340", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -37,26 +37,26 @@ pub fn main() {\n \n     let X(_t) = *s;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION s\n     if let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION r\n     while let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION r\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION r\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION r\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n@@ -65,34 +65,34 @@ pub fn main() {\n \n     let X(_t) = *sm;\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION sm\n     if let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION rm\n     while let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider removing the `*`\n+    //~| HELP consider borrowing here\n     //~| SUGGESTION rm\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION rm\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION rm\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider removing the `*`\n+        //~| HELP consider borrowing here\n         //~| SUGGESTION rm\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),"}, {"sha": "cb3ce5991aeeeeca5e103c6c846e935994d1a544", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8865d8e195813ade6b84434ac9f8850e7112d1a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=c8865d8e195813ade6b84434ac9f8850e7112d1a", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of `s.0` which is behind a shared reference\n   --> $DIR/simple.rs:38:17\n    |\n LL |     let X(_t) = *s;\n-   |           --    ^^ help: consider removing the `*`: `s`\n+   |           --    ^^ help: consider borrowing here: `&*s`\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n@@ -11,7 +11,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:42:30\n    |\n LL |     if let Either::One(_t) = *r { }\n-   |                        --    ^^ help: consider removing the `*`: `r`\n+   |                        --    ^^ help: consider borrowing here: `&*r`\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -20,7 +20,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:46:33\n    |\n LL |     while let Either::One(_t) = *r { }\n-   |                           --    ^^ help: consider removing the `*`: `r`\n+   |                           --    ^^ help: consider borrowing here: `&*r`\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -29,7 +29,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:50:11\n    |\n LL |     match *r {\n-   |           ^^ help: consider removing the `*`: `r`\n+   |           ^^ help: consider borrowing here: `&*r`\n ...\n LL |         Either::One(_t)\n    |                     --\n@@ -41,7 +41,7 @@ error[E0507]: cannot move out of `r.0` which is behind a shared reference\n   --> $DIR/simple.rs:57:11\n    |\n LL |     match *r {\n-   |           ^^ help: consider removing the `*`: `r`\n+   |           ^^ help: consider borrowing here: `&*r`\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n@@ -53,7 +53,7 @@ error[E0507]: cannot move out of `sm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:66:17\n    |\n LL |     let X(_t) = *sm;\n-   |           --    ^^^ help: consider removing the `*`: `sm`\n+   |           --    ^^^ help: consider borrowing here: `&*sm`\n    |           |\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n@@ -62,7 +62,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:70:30\n    |\n LL |     if let Either::One(_t) = *rm { }\n-   |                        --    ^^^ help: consider removing the `*`: `rm`\n+   |                        --    ^^^ help: consider borrowing here: `&*rm`\n    |                        |\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -71,7 +71,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:74:33\n    |\n LL |     while let Either::One(_t) = *rm { }\n-   |                           --    ^^^ help: consider removing the `*`: `rm`\n+   |                           --    ^^^ help: consider borrowing here: `&*rm`\n    |                           |\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:78:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider borrowing here: `&*rm`\n ...\n LL |         Either::One(_t)\n    |                     --\n@@ -92,7 +92,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:85:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider borrowing here: `&*rm`\n ...\n LL |         Either::One(_t) => (),\n    |                     --\n@@ -104,7 +104,7 @@ error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n   --> $DIR/simple.rs:93:11\n    |\n LL |     match *rm {\n-   |           ^^^ help: consider removing the `*`: `rm`\n+   |           ^^^ help: consider borrowing here: `&*rm`\n ...\n LL |         Either::One(_t) => (),\n    |                     --"}]}