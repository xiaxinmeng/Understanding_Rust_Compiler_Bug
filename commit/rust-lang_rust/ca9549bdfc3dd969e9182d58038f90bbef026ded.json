{"sha": "ca9549bdfc3dd969e9182d58038f90bbef026ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTU0OWJkZmMzZGQ5NjllOTE4MmQ1ODAzOGY5MGJiZWYwMjZkZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-02T00:38:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-02T00:58:17Z"}, "message": "Avoid calling to_vec() unnecessarily in parser.\n\nAlso, rename the OptVec-to-vector conversion method to\nopt_vec::take_vec() and convert from a method into a fn\nbecause I fear strange bugs.", "tree": {"sha": "d66509b54f56151513e8207da875cb4e7df9ec85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d66509b54f56151513e8207da875cb4e7df9ec85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca9549bdfc3dd969e9182d58038f90bbef026ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9549bdfc3dd969e9182d58038f90bbef026ded", "html_url": "https://github.com/rust-lang/rust/commit/ca9549bdfc3dd969e9182d58038f90bbef026ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca9549bdfc3dd969e9182d58038f90bbef026ded/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c08dbf0d0150de41fcc7f5e87a97c4ea2bd4f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c08dbf0d0150de41fcc7f5e87a97c4ea2bd4f0", "html_url": "https://github.com/rust-lang/rust/commit/50c08dbf0d0150de41fcc7f5e87a97c4ea2bd4f0"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "5ebc787dce14f8449a6db35286735d47d517fe0a", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=ca9549bdfc3dd969e9182d58038f90bbef026ded", "patch": "@@ -730,7 +730,7 @@ pub fn trans_arg_expr(bcx: block,\n \n                     ast::by_copy => {\n                         debug!(\"by copy arg with type %s, storing to scratch\",\n-                               ty_to_str(ccx.tcx, arg_datum.ty));\n+                               bcx.ty_to_str(arg_datum.ty));\n                         let scratch = scratch_datum(bcx, arg_datum.ty, false);\n \n                         arg_datum.store_to_datum(bcx, arg_expr.id,"}, {"sha": "b00fa9d0a19485d1858b3bd1e4ef03ffa28d7e92", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=ca9549bdfc3dd969e9182d58038f90bbef026ded", "patch": "@@ -460,8 +460,8 @@ fn mk_impl(\n     let ty = cx.ty_path(\n         span,\n         ~[ident],\n-        generics.ty_params.map(\n-            |tp| cx.ty_path(span, ~[tp.ident], ~[])).to_vec()\n+        opt_vec::take_vec(generics.ty_params.map(\n+            |tp| cx.ty_path(span, ~[tp.ident], ~[])))\n     );\n \n     let generics = ast::Generics {"}, {"sha": "6e1406e364723ca2c37e53765c2e3113e3237dcc", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=ca9549bdfc3dd969e9182d58038f90bbef026ded", "patch": "@@ -394,13 +394,15 @@ impl ext_ctxt_ast_builder for ext_ctxt {\n     }\n \n     fn ty_vars(&self, ty_params: &OptVec<ast::TyParam>) -> ~[@ast::Ty] {\n-        ty_params.map(|p| self.ty_path_ast_builder(\n-            path(~[p.ident], dummy_sp()))).to_vec()\n+        opt_vec::take_vec(\n+            ty_params.map(|p| self.ty_path_ast_builder(\n+                path(~[p.ident], dummy_sp()))))\n     }\n \n     fn ty_vars_global(&self,\n                       ty_params: &OptVec<ast::TyParam>) -> ~[@ast::Ty] {\n-        ty_params.map(|p| self.ty_path_ast_builder(\n-            path(~[p.ident], dummy_sp()))).to_vec()\n+        opt_vec::take_vec(\n+            ty_params.map(|p| self.ty_path_ast_builder(\n+                path(~[p.ident], dummy_sp()))))\n     }\n }"}, {"sha": "340e2614d2edcd1e3de6308a7785c651057d3836", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=ca9549bdfc3dd969e9182d58038f90bbef026ded", "patch": "@@ -31,6 +31,14 @@ pub fn with<T>(+t: T) -> OptVec<T> {\n     Vec(~[t])\n }\n \n+pub fn from<T>(+t: ~[T]) -> OptVec<T> {\n+    if t.len() == 0 {\n+        Empty\n+    } else {\n+        Vec(t)\n+    }\n+}\n+\n impl<T> OptVec<T> {\n     fn push(&mut self, +t: T) {\n         match *self {\n@@ -70,12 +78,12 @@ impl<T> OptVec<T> {\n             Vec(ref v) => v.len()\n         }\n     }\n+}\n \n-    pure fn to_vec(self) -> ~[T] {\n-        match self {\n-            Empty => ~[],\n-            Vec(v) => v\n-        }\n+pub fn take_vec<T>(+v: OptVec<T>) -> ~[T] {\n+    match v {\n+        Empty => ~[],\n+        Vec(v) => v\n     }\n }\n "}, {"sha": "6294243d486fd740009b66ba432a439ccfa0ff75", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9549bdfc3dd969e9182d58038f90bbef026ded/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ca9549bdfc3dd969e9182d58038f90bbef026ded", "patch": "@@ -1157,7 +1157,7 @@ pub impl Parser {\n                     let remaining_exprs =\n                         self.parse_seq_to_end(token::RBRACKET,\n                             seq_sep_trailing_allowed(token::COMMA),\n-                            |p| p.parse_expr()).to_vec();\n+                            |p| p.parse_expr());\n                     ex = expr_vec(~[first_expr] + remaining_exprs, mutbl);\n                 } else {\n                     // Vector with one element.\n@@ -1419,7 +1419,7 @@ pub impl Parser {\n                 vec::append(\n                     self.parse_seq_to_before_end(\n                         ket, seq_sep_none(),\n-                        |p| p.parse_token_tree()).to_vec(),\n+                        |p| p.parse_token_tree()),\n                     // the close delimiter:\n                     ~[parse_any_tt_tok(self)])))\n           }\n@@ -2727,7 +2727,7 @@ pub impl Parser {\n         let result = self.parse_seq_to_gt(\n             Some(token::COMMA),\n             |p| p.parse_ty(false));\n-        result.to_vec()\n+        opt_vec::take_vec(result)\n     }\n \n     fn parse_fn_decl(parse_arg_fn: fn(Parser) -> arg_or_capture_item)\n@@ -2819,7 +2819,7 @@ pub impl Parser {\n                     args_or_capture_items =\n                         self.parse_seq_to_before_end(token::RPAREN,\n                                                      sep,\n-                                                     parse_arg_fn).to_vec();\n+                                                     parse_arg_fn);\n                 }\n                 token::RPAREN => {\n                     args_or_capture_items = ~[];\n@@ -2835,7 +2835,7 @@ pub impl Parser {\n             args_or_capture_items =\n                 self.parse_seq_to_before_end(token::RPAREN,\n                                              sep,\n-                                             parse_arg_fn).to_vec();\n+                                             parse_arg_fn);\n         }\n \n         self.expect(token::RPAREN);\n@@ -3032,7 +3032,7 @@ pub impl Parser {\n     fn parse_trait_ref_list(ket: token::Token) -> ~[@trait_ref] {\n         self.parse_seq_to_before_end(\n             ket, seq_sep_none(),\n-            |p| p.parse_trait_ref()).to_vec()\n+            |p| p.parse_trait_ref())\n     }\n \n     fn parse_item_struct() -> item_info {"}]}