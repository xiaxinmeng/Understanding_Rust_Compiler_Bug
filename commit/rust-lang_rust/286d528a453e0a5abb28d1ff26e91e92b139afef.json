{"sha": "286d528a453e0a5abb28d1ff26e91e92b139afef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NmQ1MjhhNDUzZTBhNWFiYjI4ZDFmZjI2ZTkxZTkyYjEzOWFmZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T10:22:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T10:22:06Z"}, "message": "Auto merge of #4345 - phansch:enum_variants_fix, r=flip1995\n\nDon't emit enum_variant_names if remainder starts with a numeric\n\nchangelog: Fix false positive in `pub_enum_variant_names` and `enum_variant_names`\n\nAs [per the reference](https://doc.rust-lang.org/reference/identifiers.html), identifiers must start with a letter. So we don't suggest a better\nvariant naming in case the remainder would start with a numeric.\n\nFixes #739", "tree": {"sha": "e7df5def3d79399731b1f0795ea6a8792dbe2a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7df5def3d79399731b1f0795ea6a8792dbe2a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/286d528a453e0a5abb28d1ff26e91e92b139afef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/286d528a453e0a5abb28d1ff26e91e92b139afef", "html_url": "https://github.com/rust-lang/rust/commit/286d528a453e0a5abb28d1ff26e91e92b139afef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/286d528a453e0a5abb28d1ff26e91e92b139afef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fed08dfb1c05c89c54879c052620316548afa6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fed08dfb1c05c89c54879c052620316548afa6c", "html_url": "https://github.com/rust-lang/rust/commit/8fed08dfb1c05c89c54879c052620316548afa6c"}, {"sha": "0a988c663080f5c59ccd5a1d1f4e7903495871fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a988c663080f5c59ccd5a1d1f4e7903495871fd", "html_url": "https://github.com/rust-lang/rust/commit/0a988c663080f5c59ccd5a1d1f4e7903495871fd"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "1cc3bda3ba322188d82b0bb9ebdfc7bce6dfcfb0", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/286d528a453e0a5abb28d1ff26e91e92b139afef/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286d528a453e0a5abb28d1ff26e91e92b139afef/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=286d528a453e0a5abb28d1ff26e91e92b139afef", "patch": "@@ -160,6 +160,7 @@ fn check_variant(\n         let name = var2str(var);\n         if partial_match(item_name, &name) == item_name_chars\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n+            && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n         {\n             span_lint(cx, lint, var.span, \"Variant name starts with the enum's name\");\n         }\n@@ -178,6 +179,9 @@ fn check_variant(\n         let pre_camel = camel_case::until(pre);\n         pre = &pre[..pre_camel];\n         while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n+            if next.is_numeric() {\n+                return;\n+            }\n             if next.is_lowercase() {\n                 let last = pre.len() - last.len_utf8();\n                 let last_camel = camel_case::until(&pre[..last]);"}, {"sha": "01774a2a9845cf26c0a6c70c131e8fed7e71bb1d", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/286d528a453e0a5abb28d1ff26e91e92b139afef/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286d528a453e0a5abb28d1ff26e91e92b139afef/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=286d528a453e0a5abb28d1ff26e91e92b139afef", "patch": "@@ -1,5 +1,5 @@\n #![feature(non_ascii_idents)]\n-#![warn(clippy::all, clippy::pub_enum_variant_names)]\n+#![warn(clippy::enum_variant_names, clippy::pub_enum_variant_names)]\n #![allow(non_camel_case_types)]\n \n enum FakeCallType {\n@@ -120,4 +120,17 @@ enum N {\n     Float,\n }\n \n+// should not lint\n+enum Peek {\n+    Peek1,\n+    Peek2,\n+    Peek3,\n+}\n+\n+// should not lint\n+pub enum NetworkLayer {\n+    Layer2,\n+    Layer3,\n+}\n+\n fn main() {}"}]}