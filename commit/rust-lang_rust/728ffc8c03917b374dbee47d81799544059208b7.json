{"sha": "728ffc8c03917b374dbee47d81799544059208b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGZmYzhjMDM5MTdiMzc0ZGJlZTQ3ZDgxNzk5NTQ0MDU5MjA4Yjc=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-19T19:21:05Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-19T22:02:34Z"}, "message": "Address review v2", "tree": {"sha": "caa6f2e9dbf86a923e1bc4a8b905635e2cb75a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa6f2e9dbf86a923e1bc4a8b905635e2cb75a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728ffc8c03917b374dbee47d81799544059208b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmAHVwMACgkQfsyTL4ss\ncx7+0Q/9GeJ8ysFJ1LmNIx5ojDWtPM3mm2JjUaG+Tzv+e1zaoo8jihdtrwQ2HD26\nQBkIlkgBxCibDLOnkw0jujEbpGS9/oQ+EQU3zXV/Yy5TB8SAdKXY2E1Cx0oG4KU1\nDFzkWIY68k7LhkZ+5/u63xc6S4J0/F1JpQMtwotDRf/qa6epxSIxG36SbSgFiQMd\n6wghSHhBNHhxzRycXthObJq1hMZoPGBVCjejUJiJlrjJmU9ZNwdLEdFHPJYcr2ZM\n7ByqHdOjs0s0BHJH1006tWt3tEVldvPpx3L+zwgiUmlvgCHX/g3P+ghSrxY6gz9q\nkKOAtyyliyyTL8FSZaDBRQuha05ZuYLsSqfDNlI9MuEfAP+ay0CJ/hDqNEGpaZ0b\nKUhPB1+B/KBw+3+/7hjQmu8mnPg32L+cp+C/ILt4E3I1+xIr7YS+OPqJlu9SYdkE\nlM+HgNi1+3qs/7djDVQUU/rP3zVlm9g2YzCmDQlsltljrd5K9aX3eY+C8mt3aIdE\nDv7DOd9uNSljgXu9pLpTdiDOYFCaE7NbTxFXQSr2Vdoa7kVsJs0V3WV+h8O2EluN\nglTJgvnib0D6OTd2HKDfdqOGzVWtPxMDZxJqtNC0LfX90MxFLN16BJoCd++gQbzy\nMN6U1LVp7NgjccJnMPOMpZS/xIqY+RBhrOQaqInlxPwINzZfkV8=\n=0Z2a\n-----END PGP SIGNATURE-----", "payload": "tree caa6f2e9dbf86a923e1bc4a8b905635e2cb75a20\nparent a3df483974bd9832c2640a4dcbfd58fd9fa229cc\nauthor Rune Tynan <runetynan@gmail.com> 1611084065 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1611093754 -0500\n\nAddress review v2\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728ffc8c03917b374dbee47d81799544059208b7", "html_url": "https://github.com/rust-lang/rust/commit/728ffc8c03917b374dbee47d81799544059208b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728ffc8c03917b374dbee47d81799544059208b7/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3df483974bd9832c2640a4dcbfd58fd9fa229cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3df483974bd9832c2640a4dcbfd58fd9fa229cc", "html_url": "https://github.com/rust-lang/rust/commit/a3df483974bd9832c2640a4dcbfd58fd9fa229cc"}], "stats": {"total": 128, "additions": 60, "deletions": 68}, "files": [{"sha": "62065e27dd9667a8f999845672a0515f15da758f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -751,11 +751,6 @@ impl<'a> Builder<'a> {\n         cmd\n     }\n \n-    /// Gets a path to the jsondocck tool\n-    pub fn jsondocck(&self, compiler: Compiler, target: TargetSelection) -> PathBuf {\n-        self.ensure(tool::JsonDocCk { compiler, target })\n-    }\n-\n     /// Return the path to `llvm-config` for the target, if it exists.\n     ///\n     /// Note that this returns `None` if LLVM is disabled, or if we're in a"}, {"sha": "2811349809ee3e5bcf7bbf323b143eab8c4ceacf", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -1072,7 +1072,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--docck-python\").arg(builder.python());\n \n-        cmd.arg(\"--jsondocck-path\").arg(builder.jsondocck(compiler, target));\n+        cmd.arg(\"--jsondocck-path\").arg(builder.ensure(tool::JsonDocCk { compiler, target }));\n \n         if builder.config.build.ends_with(\"apple-darwin\") {\n             // Force /usr/bin/python3 on macOS for LLDB tests because we're loading the"}, {"sha": "7e705255d983d0289606bd55ad3a84798b426404", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -1,25 +1,24 @@\n // edition:2018\n \n-// @has nested.json \"$.index.['0:0'].kind\" \\\"module\\\"\n-// @has - \"$.index.['0:0'].inner.is_crate\" true\n-// @has - \"$.index.['0:0'].inner.items[*]\" \\\"0:3\\\"\n+// @has nested.json \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n+// @has - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n+// @count - \"$.index[*][?(@.name=='nested')].inner.items[*]\" 1\n \n-// @has nested.json \"$.index.['0:3'].kind\" \\\"module\\\"\n-// @has - \"$.index.['0:3'].inner.is_crate\" false\n-// @has - \"$.index.['0:3'].inner.items[*]\" \\\"0:4\\\"\n-// @has - \"$.index.['0:3'].inner.items[*]\" \\\"0:7\\\"\n+// @has nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n+// @has - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n+// @count - \"$.index[*][?(@.name=='l1')].inner.items[*]\" 2\n pub mod l1 {\n \n-    // @has nested.json \"$.index.['0:4'].kind\" \\\"module\\\"\n-    // @has - \"$.index.['0:4'].inner.is_crate\" false\n-    // @has - \"$.index.['0:4'].inner.items[*]\" \\\"0:5\\\"\n+    // @has nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n+    // @has - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n+    // @count - \"$.index[*][?(@.name=='l3')].inner.items[*]\" 1\n     pub mod l3 {\n \n-        // @has nested.json \"$.index.['0:5'].kind\" \\\"struct\\\"\n-        // @has - \"$.index.['0:5'].inner.struct_type\" \\\"unit\\\"\n+        // @has nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n+        // @has - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n         pub struct L4;\n     }\n-    // @has nested.json \"$.index.['0:7'].kind\" \\\"import\\\"\n-    // @has - \"$.index.['0:7'].inner.glob\" false\n+    // @has nested.json \"$.index[*][?(@.inner.span=='l3::L4')].kind\" \\\"import\\\"\n+    // @has - \"$.index[*][?(@.inner.span=='l3::L4')].inner.glob\" false\n     pub use l3::L4;\n }"}, {"sha": "a251caf4ba93388a7aa1e24bd43ebdbd838eb25a", "filename": "src/test/rustdoc-json/structs/plain_empty.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -1,7 +1,6 @@\n-// @has plain_empty.json \"$.index.['0:3'].name\" \\\"PlainEmpty\\\"\n-// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n-// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n-// @has - \"$.index.['0:3'].inner.struct_type\" \\\"plain\\\"\n-// @has - \"$.index.['0:3'].inner.fields_stripped\" false\n-// @has - \"$.index.['0:3'].inner.fields\" []\n+// @has plain_empty.json \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='PlainEmpty')].inner.struct_type\" \\\"plain\\\"\n+// @has - \"$.index[*][?(@.name=='PlainEmpty')].inner.fields_stripped\" false\n+// @has - \"$.index[*][?(@.name=='PlainEmpty')].inner.fields\" []\n pub struct PlainEmpty {}"}, {"sha": "4e510b3982507f5cdbe4c4e2f7110fd8e8da25d7", "filename": "src/test/rustdoc-json/structs/tuple.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -1,6 +1,5 @@\n-// @has tuple.json \"$.index.['0:3'].name\" \\\"Tuple\\\"\n-// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n-// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n-// @has - \"$.index.['0:3'].inner.struct_type\" \\\"tuple\\\"\n-// @has - \"$.index.['0:3'].inner.fields_stripped\" true\n+// @has tuple.json \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='Tuple')].inner.struct_type\" \\\"tuple\\\"\n+// @has - \"$.index[*][?(@.name=='Tuple')].inner.fields_stripped\" true\n pub struct Tuple(u32, String);"}, {"sha": "559d3068de6e4e3a0b72e83e9f82dfbca47bd4d2", "filename": "src/test/rustdoc-json/structs/unit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -1,6 +1,5 @@\n-// @has unit.json \"$.index.['0:3'].name\" \\\"Unit\\\"\n-// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n-// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n-// @has - \"$.index.['0:3'].inner.struct_type\" \\\"unit\\\"\n-// @has - \"$.index.['0:3'].inner.fields\" []\n+// @has unit.json \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='Unit')].inner.struct_type\" \\\"unit\\\"\n+// @has - \"$.index[*][?(@.name=='Unit')].inner.fields\" []\n pub struct Unit;"}, {"sha": "65cfe7effa5f1f6e2c8ba328cfcc9c5a74d43b1a", "filename": "src/test/rustdoc-json/structs/with_generics.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -1,14 +1,13 @@\n use std::collections::HashMap;\n \n-// @has with_generics.json \"$.index.['0:4'].name\" \\\"WithGenerics\\\"\n-// @has - \"$.index.['0:4'].visibility\" \\\"public\\\"\n-// @has - \"$.index.['0:4'].kind\" \\\"struct\\\"\n-// @has - \"$.index.['0:4'].inner.generics.params[0].name\" \\\"T\\\"\n-// @has - \"$.index.['0:4'].inner.generics.params[0].kind.type\"\n-// @has - \"$.index.['0:4'].inner.generics.params[1].name\" \\\"U\\\"\n-// @has - \"$.index.['0:4'].inner.generics.params[1].kind.type\"\n-// @has - \"$.index.['0:4'].inner.struct_type\" \\\"plain\\\"\n-// @has - \"$.index.['0:4'].inner.fields_stripped\" true\n+// @has with_generics.json \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n+// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type\"\n+// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n+// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type\"\n+// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.struct_type\" \\\"plain\\\"\n+// @has - \"$.index[*][?(@.name=='WithGenerics')].inner.fields_stripped\" true\n pub struct WithGenerics<T, U> {\n     stuff: Vec<T>,\n     things: HashMap<U, U>,"}, {"sha": "ea98676863b5eed119ef38cd56561bb9950b02ea", "filename": "src/test/rustdoc-json/structs/with_primitives.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -1,10 +1,9 @@\n-// @has with_primitives.json \"$.index.['0:3'].name\" \\\"WithPrimitives\\\"\n-// @has - \"$.index.['0:3'].visibility\" \\\"public\\\"\n-// @has - \"$.index.['0:3'].kind\" \\\"struct\\\"\n-// @has - \"$.index.['0:3'].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @has - \"$.index.['0:3'].inner.generics.params[0].kind\" \\\"lifetime\\\"\n-// @has - \"$.index.['0:3'].inner.struct_type\" \\\"plain\\\"\n-// @has - \"$.index.['0:3'].inner.fields_stripped\" true\n+// @has with_primitives.json \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n+// @has - \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n+// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind\" \\\"lifetime\\\"\n+// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.struct_type\" \\\"plain\\\"\n+// @has - \"$.index[*][?(@.name=='WithPrimitives')].inner.fields_stripped\" true\n pub struct WithPrimitives<'a> {\n     num: u32,\n     s: &'a str,"}, {"sha": "8cb0342c1f89610b426c8a74d49b94a61449c43d", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -197,7 +197,6 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     let has_tidy = Command::new(\"tidy\")\n         .arg(\"--version\")\n         .stdout(Stdio::null())\n-        .stderr(Stdio::null())\n         .status()\n         .map_or(false, |status| status.success());\n     Config {"}, {"sha": "b742f0eb3ee55c145b3fa482c7db237b6ca0b4a2", "filename": "src/tools/jsondocck/src/cache.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -13,6 +13,7 @@ pub struct Cache {\n }\n \n impl Cache {\n+    /// Create a new cache, used to read files only once and otherwise store their contents.\n     pub fn new(doc_dir: &str) -> Cache {\n         Cache {\n             root: Path::new(doc_dir).to_owned(),\n@@ -32,9 +33,7 @@ impl Cache {\n         }\n     }\n \n-    pub fn get_file(&mut self, path: &String) -> Result<String, io::Error> {\n-        let path = self.resolve_path(path);\n-\n+    fn read_file(&mut self, path: PathBuf) -> Result<String, io::Error> {\n         if let Some(f) = self.files.get(&path) {\n             return Ok(f.clone());\n         }\n@@ -46,16 +45,22 @@ impl Cache {\n         Ok(file)\n     }\n \n+    /// Get the text from a file. If called multiple times, the file will only be read once\n+    pub fn get_file(&mut self, path: &String) -> Result<String, io::Error> {\n+        let path = self.resolve_path(path);\n+        self.read_file(path)\n+    }\n+\n+    /// Parse the JSON from a file. If called multiple times, the file will only be read once.\n     pub fn get_value(&mut self, path: &String) -> Result<Value, CkError> {\n         let path = self.resolve_path(path);\n \n         if let Some(v) = self.values.get(&path) {\n             return Ok(v.clone());\n         }\n \n-        let file = fs::File::open(&path)?;\n-\n-        let val = serde_json::from_reader::<_, Value>(file)?;\n+        let content = self.read_file(path.clone())?;\n+        let val = serde_json::from_str::<Value>(&content)?;\n \n         self.values.insert(path, val.clone());\n "}, {"sha": "9b3ba3f3fbe39edc9c1c485a76a901767b6f2f24", "filename": "src/tools/jsondocck/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -8,14 +8,15 @@ pub struct Config {\n     pub template: String,\n }\n \n+/// Create a Config from a vector of command-line arguments\n pub fn parse_config(args: Vec<String>) -> Config {\n     let mut opts = Options::new();\n     opts.reqopt(\"\", \"doc-dir\", \"Path to the documentation directory\", \"PATH\")\n         .reqopt(\"\", \"template\", \"Path to the template file\", \"PATH\")\n         .optflag(\"h\", \"help\", \"show this message\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n-    if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n+    if args.len() == 1 {\n         let message = format!(\"Usage: {} <doc-dir> <template>\", argv0);\n         println!(\"{}\", opts.usage(&message));\n         std::process::exit(1);"}, {"sha": "29131f686a9dc331f7bf2f6e8052993ed48d7cfb", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ffc8c03917b374dbee47d81799544059208b7/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=728ffc8c03917b374dbee47d81799544059208b7", "patch": "@@ -106,6 +106,8 @@ fn print_err(msg: &str, lineno: usize) {\n     eprintln!(\"Invalid command: {} on line {}\", msg, lineno)\n }\n \n+/// Get a list of commands from a file. Does the work of ensuring the commands\n+/// are syntactically valid.\n fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n     let mut commands = Vec::new();\n     let mut errors = false;\n@@ -147,10 +149,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n             }\n         }\n \n-        let args = match cap.name(\"args\") {\n-            Some(m) => shlex::split(m.as_str()).unwrap(),\n-            None => vec![],\n-        };\n+        let args = cap.name(\"args\").map_or(vec![], |m| shlex::split(m.as_str()).unwrap());\n \n         if !cmd.validate(&args, commands.len(), lineno) {\n             errors = true;\n@@ -163,15 +162,14 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n     if !errors { Ok(commands) } else { Err(()) }\n }\n \n+/// Performs the actual work of ensuring a command passes. Generally assumes the command\n+/// is syntactically valid.\n fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n     let result = match command.kind {\n         CommandKind::Has => {\n             match command.args.len() {\n                 // @has <path> = file existence\n-                1 => match cache.get_file(&command.args[0]) {\n-                    Ok(_) => true,\n-                    Err(_) => false,\n-                },\n+                1 => cache.get_file(&command.args[0]).is_ok(),\n                 // @has <path> <jsonpath> = check path exists\n                 2 => {\n                     let val = cache.get_value(&command.args[0])?;"}]}