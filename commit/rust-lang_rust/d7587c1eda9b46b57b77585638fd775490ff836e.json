{"sha": "d7587c1eda9b46b57b77585638fd775490ff836e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTg3YzFlZGE5YjQ2YjU3Yjc3NTg1NjM4ZmQ3NzU0OTBmZjgzNmU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-16T10:42:18Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-16T10:42:18Z"}, "message": "Change convention for specifying referenced argument\n\nIt is now 1-based, rather than 0 based. (Seems more natural, and allows 0 to\nbe used to refer to self and maybe to closure.)\n\nAlso allows non-referenced args to be implicitly copied again.\n\nIssue #918", "tree": {"sha": "36df18710389a28371d93a39f73269c54cac8f83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36df18710389a28371d93a39f73269c54cac8f83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7587c1eda9b46b57b77585638fd775490ff836e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7587c1eda9b46b57b77585638fd775490ff836e", "html_url": "https://github.com/rust-lang/rust/commit/d7587c1eda9b46b57b77585638fd775490ff836e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7587c1eda9b46b57b77585638fd775490ff836e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059b31f7a3a58193db1dc80a3bd32cbb36f00e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/059b31f7a3a58193db1dc80a3bd32cbb36f00e1d", "html_url": "https://github.com/rust-lang/rust/commit/059b31f7a3a58193db1dc80a3bd32cbb36f00e1d"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "10ddb097101464395999adca5dbc454b0b4c90f0", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=d7587c1eda9b46b57b77585638fd775490ff836e", "patch": "@@ -72,7 +72,9 @@ fn visit_fn(cx: @ctx, f: ast::_fn, _tp: [ast::ty_param], _sp: span,\n                              \"return implicitly\");\n     }\n     let ret_info = alt f.decl.cf {\n-      ast::return_ref(mut, n_arg) { by_ref(mut, f.decl.inputs[n_arg].id) }\n+      ast::return_ref(mut, n_arg) {\n+        by_ref(mut, f.decl.inputs[n_arg - 1u].id)\n+      }\n       _ { other }\n     };\n     v.visit_block(f.body, {bs: bs, ret_info: ret_info}, v);\n@@ -220,7 +222,9 @@ fn cant_copy(cx: ctx, b: binding) -> bool {\n \n fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr]) -> [binding] {\n     let fty = ty::type_autoderef(cx.tcx, ty::expr_ty(cx.tcx, f));\n-    let ret_ref = ast_util::ret_by_ref(ty::ty_fn_ret_style(cx.tcx, fty));\n+    let by_ref = alt ty::ty_fn_ret_style(cx.tcx, fty) {\n+      ast::return_ref(_, arg_n) { arg_n } _ { 0u }\n+    };\n     let arg_ts = ty::ty_fn_args(cx.tcx, fty);\n     let mut_roots: [{arg: uint, node: node_id}] = [];\n     let bindings = [];\n@@ -246,7 +250,9 @@ fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr]) -> [binding] {\n                        mutable ok: valid,\n                        mutable copied: alt arg_t.mode {\n                          ast::by_move. { copied }\n-                         ast::by_ref. { ret_ref ? not_allowed : not_copied }\n+                         ast::by_ref. {\n+                           i + 1u == by_ref ? not_allowed : not_copied\n+                         }\n                          ast::by_mut_ref. { not_allowed }\n                        }}];\n         i += 1u;\n@@ -683,7 +689,7 @@ fn expr_root(cx: ctx, ex: @ast::expr, autoderef: bool) ->\n             let fty = ty::type_autoderef(cx.tcx, ty::expr_ty(cx.tcx, f));\n             alt ty::ty_fn_ret_style(cx.tcx, fty) {\n               ast::return_ref(mut, arg_n) {\n-                let arg = args[arg_n];\n+                let arg = args[arg_n - 1u];\n                 let arg_root = expr_root(cx, arg, false);\n                 ret {ex: arg_root.ex,\n                      ds: @(*arg_root.ds +"}, {"sha": "8184376d789a69ae382fe5882d059228e8e6cc66", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d7587c1eda9b46b57b77585638fd775490ff836e", "patch": "@@ -3557,9 +3557,11 @@ fn trans_arg_expr(cx: @block_ctxt, arg: ty::arg, lldestty0: TypeRef,\n //  - create_llargs_for_fn_args.\n //  - new_fn_ctxt\n //  - trans_args\n-fn trans_args(cx: @block_ctxt, llenv: ValueRef, gen: option::t<generic_info>,\n+fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n+              gen: option::t<generic_info>,\n               lliterbody: option::t<ValueRef>, es: [@ast::expr], fn_ty: ty::t)\n    -> {bcx: @block_ctxt,\n+       outer_cx: @block_ctxt,\n        args: [ValueRef],\n        retslot: ValueRef,\n        to_zero: [{v: ValueRef, t: ty::t}],\n@@ -3574,7 +3576,8 @@ fn trans_args(cx: @block_ctxt, llenv: ValueRef, gen: option::t<generic_info>,\n     let ccx = bcx_ccx(cx);\n     let tcx = ccx.tcx;\n     let bcx: @block_ctxt = cx;\n-    let by_ref = ast_util::ret_by_ref(ty::ty_fn_ret_style(tcx, fn_ty));\n+    let ret_style = ty::ty_fn_ret_style(tcx, fn_ty);\n+    let by_ref = ast_util::ret_by_ref(ret_style);\n     // Arg 0: Output pointer.\n \n     // FIXME: test case looks like\n@@ -3583,6 +3586,7 @@ fn trans_args(cx: @block_ctxt, llenv: ValueRef, gen: option::t<generic_info>,\n         // This means an earlier arg was divergent.\n         // So this arg can't be evaluated.\n         ret {bcx: bcx,\n+             outer_cx: outer_cx,\n              args: [],\n              retslot: C_nil(),\n              to_zero: to_zero,\n@@ -3652,13 +3656,18 @@ fn trans_args(cx: @block_ctxt, llenv: ValueRef, gen: option::t<generic_info>,\n             // So this arg can't be evaluated.\n             break;\n         }\n-        let r =\n-            trans_arg_expr(bcx, args[i], arg_tys[i], to_zero, to_revoke, e);\n-        bcx = r.bcx;\n+        let is_referenced = alt ret_style {\n+          ast::return_ref(_, arg_n) { i + 1u == arg_n }\n+          _ { false }\n+        };\n+        let r = trans_arg_expr(is_referenced ? outer_cx : bcx,\n+                               args[i], arg_tys[i], to_zero, to_revoke, e);\n+        if is_referenced { outer_cx = r.bcx; } else { bcx = r.bcx; }\n         llargs += [r.val];\n         i += 1u;\n     }\n     ret {bcx: bcx,\n+         outer_cx: outer_cx,\n          args: llargs,\n          retslot: llretslot,\n          to_zero: to_zero,\n@@ -3675,14 +3684,7 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n     let fn_ty = ty::type_autoderef(bcx_tcx(in_cx), fn_expr_ty);\n     let by_ref = ast_util::ret_by_ref(ty::ty_fn_ret_style(bcx_tcx(in_cx),\n                                                           fn_ty));\n-    // Things that return by reference must put their arguments (FIXME only\n-    // the referenced arguments) into the outer scope, so that they are still\n-    // alive when the return value is used.\n-    let cx = if by_ref { in_cx } else {\n-        let cx = new_scope_block_ctxt(in_cx, \"call\");\n-        Br(in_cx, cx.llbb);\n-        cx\n-    };\n+    let cx = new_scope_block_ctxt(in_cx, \"call\");\n     let f_res = trans_lval_gen(cx, f);\n     let bcx = f_res.res.bcx;\n \n@@ -3710,7 +3712,8 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n \n     let ret_ty = ty::node_id_to_type(bcx_tcx(cx), id);\n     let args_res =\n-        trans_args(bcx, llenv, f_res.generic, lliterbody, args, fn_ty);\n+        trans_args(bcx, in_cx, llenv, f_res.generic, lliterbody, args, fn_ty);\n+    Br(args_res.outer_cx, cx.llbb);\n     bcx = args_res.bcx;\n     let llargs = args_res.args;\n     let llretslot = args_res.retslot;"}, {"sha": "dffa10ff831507db9b287b44a280964d78905811", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=d7587c1eda9b46b57b77585638fd775490ff836e", "patch": "@@ -448,16 +448,19 @@ fn parse_ret_ty(p: parser, n_args: uint) -> (ast::ret_style, @ast::ty) {\n                 if n_args == 0u {\n                     p.fatal(\"can not return reference from argument-less fn\");\n                 }\n-                let mut_root = eat(p, token::NOT), arg = 0u;\n+                let mut_root = eat(p, token::NOT), arg = 1u;\n                 alt p.peek() {\n                   token::LIT_INT(val) { p.bump(); arg = val as uint; }\n                   _ { if n_args > 1u {\n                       p.fatal(\"must specify referenced parameter\");\n                   } }\n                 }\n-                if arg >= n_args {\n+                if arg > n_args {\n                     p.fatal(\"referenced argument does not exist\");\n                 }\n+                if arg == 0u {\n+                    p.fatal(\"referenced argument can't be 0\");\n+                }\n                 style = ast::return_ref(mut_root, arg);\n             };\n             (style, parse_ty(p, false))"}, {"sha": "7c4791248057789705b1fbfb32b5f593d02822c8", "filename": "src/test/compile-fail/ret-by-reference-wrong-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Ftest%2Fcompile-fail%2Fret-by-reference-wrong-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Ftest%2Fcompile-fail%2Fret-by-reference-wrong-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fret-by-reference-wrong-param.rs?ref=d7587c1eda9b46b57b77585638fd775490ff836e", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:can not return a reference to the wrong parameter\n \n-fn f(a: int, b: int) -> &1 int {\n+fn f(a: int, b: int) -> &2 int {\n     ret a;\n }\n "}, {"sha": "7e430c971152ecf1491356a9e2d7a197b71d1b3e", "filename": "src/test/run-pass/ret-by-reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Ftest%2Frun-pass%2Fret-by-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7587c1eda9b46b57b77585638fd775490ff836e/src%2Ftest%2Frun-pass%2Fret-by-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-by-reference.rs?ref=d7587c1eda9b46b57b77585638fd775490ff836e", "patch": "@@ -6,7 +6,7 @@ fn get<@T>(opt: option<T>) -> &T {\n     }\n }\n \n-fn get_mut(a: {mutable x: @int}, _b: int) -> &!0 @int {\n+fn get_mut(a: {mutable x: @int}, _b: int) -> &!1 @int {\n     ret a.x;\n }\n "}]}