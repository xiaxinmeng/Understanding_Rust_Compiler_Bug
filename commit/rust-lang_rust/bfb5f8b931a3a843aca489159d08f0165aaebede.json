{"sha": "bfb5f8b931a3a843aca489159d08f0165aaebede", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjVmOGI5MzFhM2E4NDNhY2E0ODkxNTlkMDhmMDE2NWFhZWJlZGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:33:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:23Z"}, "message": "rollup merge of #19743: steveklabnik/gh16143\n\nThis will hopefully help people with their first steps in Rust.\n\nFixes #16143.\n\n/cc @jvns", "tree": {"sha": "efab464fb57e7461bef1e1712c6aa340388aa556", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efab464fb57e7461bef1e1712c6aa340388aa556"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb5f8b931a3a843aca489159d08f0165aaebede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb5f8b931a3a843aca489159d08f0165aaebede", "html_url": "https://github.com/rust-lang/rust/commit/bfb5f8b931a3a843aca489159d08f0165aaebede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb5f8b931a3a843aca489159d08f0165aaebede/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43a807d25f6b20a130d3cc9d8a49593ae1705d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43a807d25f6b20a130d3cc9d8a49593ae1705d6", "html_url": "https://github.com/rust-lang/rust/commit/c43a807d25f6b20a130d3cc9d8a49593ae1705d6"}, {"sha": "31b240d6bcb81836fca2c2aa4076daa2aea587fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/31b240d6bcb81836fca2c2aa4076daa2aea587fe", "html_url": "https://github.com/rust-lang/rust/commit/31b240d6bcb81836fca2c2aa4076daa2aea587fe"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "51766468eaa194085447db5e2e2cc4b0aae59c62", "filename": "src/doc/guide.md", "status": "modified", "additions": 46, "deletions": 26, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/bfb5f8b931a3a843aca489159d08f0165aaebede/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfb5f8b931a3a843aca489159d08f0165aaebede/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=bfb5f8b931a3a843aca489159d08f0165aaebede", "patch": "@@ -418,6 +418,19 @@ let x: int = 5;\n If I asked you to read this out loud to the rest of the class, you'd say \"`x`\n is a binding with the type `int` and the value `five`.\"\n \n+In future examples, we may annotate the type in a comment. The examples will\n+look like this:\n+\n+```{rust}\n+fn main() {\n+    let x = 5i; // x: int\n+}\n+```\n+\n+Note the similarities between this annotation and the syntax you use with `let`.\n+Including these kinds of comments is not idiomatic Rust, but we'll occasionally\n+include them to help you understand what the types that Rust infers are.\n+\n By default, bindings are **immutable**. This code will not compile:\n \n ```{ignore}\n@@ -436,7 +449,7 @@ error: re-assignment of immutable variable `x`\n If you want a binding to be mutable, you can use `mut`:\n \n ```{rust}\n-let mut x = 5i;\n+let mut x = 5i; // mut x: int\n x = 10i;\n ```\n \n@@ -584,15 +597,15 @@ let y = if x == 5i {\n     10i\n } else {\n     15i\n-};\n+}; // y: int\n ```\n \n Which we can (and probably should) write like this:\n \n ```{rust}\n let x = 5i;\n \n-let y = if x == 5i { 10i } else { 15i };\n+let y = if x == 5i { 10i } else { 15i }; // y: int\n ```\n \n This reveals two interesting things about Rust: it is an expression-based\n@@ -928,8 +941,8 @@ destructuring. You can assign one tuple into another, if they have the same\n arity and contained types.\n \n ```rust\n-let mut x = (1i, 2i);\n-let y = (2i, 3i);\n+let mut x = (1i, 2i); // x: (int, int)\n+let y = (2i, 3i);     // y: (int, int)\n \n x = y;\n ```\n@@ -981,7 +994,7 @@ struct Point {\n }\n \n fn main() {\n-    let origin = Point { x: 0i, y: 0i };\n+    let origin = Point { x: 0i, y: 0i }; // origin: Point\n \n     println!(\"The origin is at ({}, {})\", origin.x, origin.y);\n }\n@@ -1101,7 +1114,7 @@ fn main() {\n     let x = 5i;\n     let y = 10i;\n \n-    let ordering = cmp(x, y);\n+    let ordering = cmp(x, y); // ordering: Ordering\n \n     if ordering == Less {\n         println!(\"less\");\n@@ -1388,7 +1401,7 @@ Instead, it looks like this:\n \n ```{rust}\n for x in range(0i, 10i) {\n-    println!(\"{}\", x);\n+    println!(\"{}\", x); // x: int\n }\n ```\n \n@@ -1423,8 +1436,8 @@ The other kind of looping construct in Rust is the `while` loop. It looks like\n this:\n \n ```{rust}\n-let mut x = 5u;\n-let mut done = false;\n+let mut x = 5u;       // mut x: uint\n+let mut done = false; // mut done: bool\n \n while !done {\n     x += x - 3;\n@@ -1520,7 +1533,7 @@ The first kind is a `&str`. This is pronounced a 'string slice.' String literals\n are of the type `&str`:\n \n ```{rust}\n-let string = \"Hello there.\";\n+let string = \"Hello there.\"; // string: &str\n ```\n \n This string is statically allocated, meaning that it's saved inside our\n@@ -1532,7 +1545,7 @@ A `String`, on the other hand, is an in-memory string.  This string is\n growable, and is also guaranteed to be UTF-8.\n \n ```{rust}\n-let mut s = \"Hello\".to_string();\n+let mut s = \"Hello\".to_string(); // mut s: String\n println!(\"{}\", s);\n \n s.push_str(\", world.\");\n@@ -1588,16 +1601,19 @@ things. The most basic is the **array**, a fixed-size list of elements of the\n same type. By default, arrays are immutable.\n \n ```{rust}\n-let a = [1i, 2i, 3i];\n-let mut m = [1i, 2i, 3i];\n+let a = [1i, 2i, 3i];     // a: [int, ..3]\n+let mut m = [1i, 2i, 3i]; // mut m: [int, ..3]\n ```\n \n You can create an array with a given number of elements, all initialized to the\n same value, with `[val, ..N]` syntax. The compiler ensures that arrays are\n always initialized.\n \n+There's a shorthand for initializing each element of an array to the same\n+value. In this example, each element of `a` will be initialized to `0i`:\n+\n ```{rust}\n-let a = [0i, ..20];  // Shorthand for array of 20 elements all initialized to 0\n+let a = [0i, ..20]; // a: [int, ..20]\n ```\n \n Arrays have type `[T,..N]`. We'll talk about this `T` notation later, when we\n@@ -1608,7 +1624,7 @@ You can get the number of elements in an array `a` with `a.len()`, and use\n number in order:\n \n ```{rust}\n-let a = [1i, 2, 3];     // Only the first item needs a type suffix\n+let a = [1i, 2, 3]; // Only the first item needs a type suffix\n \n println!(\"a has {} elements\", a.len());\n for e in a.iter() {\n@@ -1619,7 +1635,7 @@ for e in a.iter() {\n You can access a particular element of an array with **subscript notation**:\n \n ```{rust}\n-let names = [\"Graydon\", \"Brian\", \"Niko\"];\n+let names = [\"Graydon\", \"Brian\", \"Niko\"]; // names: [&str, 3]\n \n println!(\"The second name is: {}\", names[1]);\n ```\n@@ -1637,7 +1653,7 @@ later). Vectors are to arrays what `String` is to `&str`. You can create them\n with the `vec!` macro:\n \n ```{rust}\n-let v = vec![1i, 2, 3];\n+let v = vec![1i, 2, 3]; // v: Vec<int>\n ```\n \n (Notice that unlike the `println!` macro we've used in the past, we use square\n@@ -1648,8 +1664,10 @@ You can get the length of, iterate over, and subscript vectors just like\n arrays. In addition, (mutable) vectors can grow automatically:\n \n ```{rust}\n-let mut nums = vec![1i, 2, 3];\n+let mut nums = vec![1i, 2, 3]; // mut nums: Vec<int>\n+\n nums.push(4);\n+\n println!(\"The length of nums is now {}\", nums.len());   // Prints 4\n ```\n \n@@ -1823,10 +1841,12 @@ use std::io;\n fn main() {\n     println!(\"Type something!\");\n \n-    let input = io::stdin()\n-                  .read_line()\n-                  .ok()\n-                  .expect(\"Failed to read line\");\n+                                                  // here, we'll show the types at each step\n+\n+    let input = io::stdin()                       // std::io::stdio::StdinReader\n+                  .read_line()                    // IoResult<String>\n+                  .ok()                           // Option<String>\n+                  .expect(\"Failed to read line\"); // String\n \n     println!(\"{}\", input);\n }\n@@ -1969,7 +1989,7 @@ use std::rand;\n fn main() {\n     println!(\"Guess the number!\");\n \n-    let secret_number = (rand::random() % 100i) + 1i;\n+    let secret_number = (rand::random() % 100i) + 1i; // secret_number: int\n \n     println!(\"The secret number is: {}\", secret_number);\n \n@@ -2262,8 +2282,8 @@ In this case, we say `x` is a `uint` explicitly, so Rust is able to properly\n tell `random()` what to generate. In a similar fashion, both of these work:\n \n ```{rust,ignore}\n-let input_num = from_str::<uint>(\"5\");\n-let input_num: Option<uint> = from_str(\"5\");\n+let input_num = from_str::<uint>(\"5\");       // input_num: Option<uint>\n+let input_num: Option<uint> = from_str(\"5\"); // input_num: Option<uint>\n ```\n \n Anyway, with us now converting our input to a number, our code looks like this:"}]}