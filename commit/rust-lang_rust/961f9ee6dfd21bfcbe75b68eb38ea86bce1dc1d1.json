{"sha": "961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MWY5ZWU2ZGZkMjFiZmNiZTc1YjY4ZWIzOGVhODZiY2UxZGMxZDE=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2021-01-07T19:03:59Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2021-01-07T19:03:59Z"}, "message": "Use Option::map_or instead of `.map(..).unwrap_or(..)`", "tree": {"sha": "99f7325370b0d25c52c8f5e87f02be2fd21720cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f7325370b0d25c52c8f5e87f02be2fd21720cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1", "html_url": "https://github.com/rust-lang/rust/commit/961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c496de374407c0937cf5257d89230b5358d053", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c496de374407c0937cf5257d89230b5358d053", "html_url": "https://github.com/rust-lang/rust/commit/b5c496de374407c0937cf5257d89230b5358d053"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "93991870338792310c7effd1edfdb8d8477afff5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=961f9ee6dfd21bfcbe75b68eb38ea86bce1dc1d1", "patch": "@@ -942,7 +942,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| {\n-                    let mut name = self.1.get(i).map(|ident| ident.name).unwrap_or(kw::Empty);\n+                    let mut name = self.1.get(i).map_or(kw::Empty, |ident| ident.name);\n                     if name.is_empty() {\n                         name = kw::Underscore;\n                     }\n@@ -1001,7 +1001,7 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                     .iter()\n                     .map(|t| Argument {\n                         type_: t.clean(cx),\n-                        name: names.next().map(|i| i.name).unwrap_or(kw::Empty),\n+                        name: names.next().map_or(kw::Empty, |i| i.name),\n                     })\n                     .collect(),\n             },"}]}