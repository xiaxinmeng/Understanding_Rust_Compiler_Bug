{"sha": "4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTI5N2JhZjdiNmU5Y2Q0Y2FjODM3NDhjNDgzYTJmMTAwYTU5ZTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-21T22:44:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-29T21:38:26Z"}, "message": "Suggest try_into when possible", "tree": {"sha": "54cf669e058767d2ffa2e72e2d553b630f698b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54cf669e058767d2ffa2e72e2d553b630f698b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "html_url": "https://github.com/rust-lang/rust/commit/4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55c2eb325029960991508e64650a139b040d24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55c2eb325029960991508e64650a139b040d24f", "html_url": "https://github.com/rust-lang/rust/commit/a55c2eb325029960991508e64650a139b040d24f"}], "stats": {"total": 4138, "additions": 3413, "deletions": 725}, "files": [{"sha": "6249d6e56af684e32cbfa0de4f128ce6c8d26598", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 121, "deletions": 208, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -559,14 +559,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let will_truncate = \"will truncate the source value\";\n-        let depending_on_isize = \"will truncate or zero-extend depending on the bit width of \\\n-                                  `isize`\";\n-        let depending_on_usize = \"will truncate or zero-extend depending on the bit width of \\\n-                                  `usize`\";\n-        let will_sign_extend = \"will sign-extend the source value\";\n-        let will_zero_extend = \"will zero-extend the source value\";\n-\n         // If casting this expression to a given numeric type would be appropriate in case of a type\n         // mismatch.\n         //\n@@ -596,10 +588,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        let msg = format!(\"you can convert an `{}` to `{}`\", checked_ty, expected_ty);\n+        let cast_msg = format!(\"you can cast an `{} to `{}`\", checked_ty, expected_ty);\n+        let try_msg = format!(\"{} or panic if it the converted value wouldn't fit\", msg);\n+        let lit_msg = format!(\n+            \"change the type of the numeric literal from `{}` to `{}`\",\n+            checked_ty,\n+            expected_ty,\n+        );\n+\n         let needs_paren = expr.precedence().order() < (PREC_POSTFIX as i8);\n \n         if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n-            let msg = format!(\"you can cast an `{}` to `{}`\", checked_ty, expected_ty);\n             let cast_suggestion = format!(\n                 \"{}{}{}{} as {}\",\n                 prefix,\n@@ -608,13 +608,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if needs_paren { \")\" } else { \"\" },\n                 expected_ty,\n             );\n+            let try_into_suggestion = format!(\n+                \"{}{}{}{}.try_into().unwrap()\",\n+                prefix,\n+                if needs_paren { \"(\" } else { \"\" },\n+                src,\n+                if needs_paren { \")\" } else { \"\" },\n+            );\n             let into_suggestion = format!(\n                 \"{}{}{}{}.into()\",\n                 prefix,\n                 if needs_paren { \"(\" } else { \"\" },\n                 src,\n                 if needs_paren { \")\" } else { \"\" },\n             );\n+            let suffix_suggestion = format!(\n+                \"{}{}{}{}\",\n+                if needs_paren { \"(\" } else { \"\" },\n+                if let (ty::Int(_), ty::Float(_)) | (ty::Uint(_), ty::Float(_)) = (\n+                    &expected_ty.sty,\n+                    &checked_ty.sty,\n+                ) {\n+                    // Remove fractional part from literal, for example `42.0f32` into `42`\n+                    let src = src.trim_end_matches(&checked_ty.to_string());\n+                    src.split(\".\").next().unwrap()\n+                } else {\n+                    src.trim_end_matches(&checked_ty.to_string())\n+                },\n+                expected_ty,\n+                if needs_paren { \")\" } else { \"\" },\n+            );\n             let literal_is_ty_suffixed = |expr: &hir::Expr| {\n                 if let hir::ExprKind::Lit(lit) = &expr.node {\n                     lit.node.is_suffixed()\n@@ -623,35 +646,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             };\n \n-            let into_sugg = into_suggestion.clone();\n-            let suggest_to_change_suffix_or_into = |err: &mut DiagnosticBuilder<'_>,\n-                                                    note: Option<&str>| {\n-                let suggest_msg = if literal_is_ty_suffixed(expr) {\n-                    format!(\n-                        \"change the type of the numeric literal from `{}` to `{}`\",\n-                        checked_ty,\n-                        expected_ty,\n-                    )\n-                } else {\n-                    match note {\n-                        Some(note) => format!(\"{}, which {}\", msg, note),\n-                        _ => format!(\"{} in a lossless way\", msg),\n-                    }\n-                };\n-\n-                let suffix_suggestion = format!(\n-                    \"{}{}{}{}\",\n-                    if needs_paren { \"(\" } else { \"\" },\n-                    src.trim_end_matches(&checked_ty.to_string()),\n-                    expected_ty,\n-                    if needs_paren { \")\" } else { \"\" },\n-                );\n-\n+            let suggest_to_change_suffix_or_into = |\n+                err: &mut DiagnosticBuilder<'_>,\n+                is_fallible: bool,\n+            | {\n+                let into_sugg = into_suggestion.clone();\n                 err.span_suggestion(\n                     expr.span,\n-                    &suggest_msg,\n                     if literal_is_ty_suffixed(expr) {\n-                        suffix_suggestion\n+                        &lit_msg\n+                    } else if is_fallible {\n+                        &try_msg\n+                    } else {\n+                        &msg\n+                    },\n+                    if literal_is_ty_suffixed(expr) {\n+                        suffix_suggestion.clone()\n+                    } else if is_fallible {\n+                        try_into_suggestion\n                     } else {\n                         into_sugg\n                     },\n@@ -661,188 +673,67 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             match (&expected_ty.sty, &checked_ty.sty) {\n                 (&ty::Int(ref exp), &ty::Int(ref found)) => {\n-                    match (found.bit_width(), exp.bit_width()) {\n-                        (Some(found), Some(exp)) if found > exp => {\n-                            if can_cast {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_truncate),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect // lossy conversion\n-                                );\n-                            }\n-                        }\n-                        (None, _) | (_, None) => {\n-                            if can_cast {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, depending_on_isize),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect // lossy conversion\n-                                );\n-                            }\n-                        }\n-                        _ => {\n-                            suggest_to_change_suffix_or_into(\n-                                err,\n-                                Some(will_sign_extend),\n-                            );\n-                        }\n-                    }\n+                    let is_fallible = match (found.bit_width(), exp.bit_width()) {\n+                        (Some(found), Some(exp)) if found > exp => true,\n+                        (None, _) | (_, None) => true,\n+                        _ => false,\n+                    };\n+                    suggest_to_change_suffix_or_into(err, is_fallible);\n                     true\n                 }\n                 (&ty::Uint(ref exp), &ty::Uint(ref found)) => {\n-                    match (found.bit_width(), exp.bit_width()) {\n-                        (Some(found), Some(exp)) if found > exp => {\n-                            if can_cast {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_truncate),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                        }\n-                        (None, _) | (_, None) => {\n-                            if can_cast {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, depending_on_usize),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                        }\n-                        _ => {\n-                           suggest_to_change_suffix_or_into(\n-                               err,\n-                               Some(will_zero_extend),\n-                           );\n-                        }\n-                    }\n+                    let is_fallible = match (found.bit_width(), exp.bit_width()) {\n+                        (Some(found), Some(exp)) if found > exp => true,\n+                        (None, _) | (_, None) => true,\n+                        _ => false,\n+                    };\n+                    suggest_to_change_suffix_or_into(err, is_fallible);\n                     true\n                 }\n-                (&ty::Int(ref exp), &ty::Uint(ref found)) => {\n-                    if can_cast {\n-                        match (found.bit_width(), exp.bit_width()) {\n-                            (Some(found), Some(exp)) if found > exp - 1 => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_truncate),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                            (None, None) => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_truncate),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                            (None, _) => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, depending_on_isize),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                            (_, None) => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, depending_on_usize),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                            _ => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_zero_extend),\n-                                    cast_suggestion,\n-                                    Applicability::MachineApplicable\n-                                );\n-                            }\n-                        }\n-                    }\n-                    true\n-                }\n-                (&ty::Uint(ref exp), &ty::Int(ref found)) => {\n-                    if can_cast {\n-                        match (found.bit_width(), exp.bit_width()) {\n-                            (Some(found), Some(exp)) if found - 1 > exp => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_truncate),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                            (None, None) => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_sign_extend),\n-                                    cast_suggestion,\n-                                    Applicability::MachineApplicable  // lossy conversion\n-                                );\n-                            }\n-                            (None, _) => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, depending_on_usize),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                            (_, None) => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, depending_on_isize),\n-                                    cast_suggestion,\n-                                    Applicability::MaybeIncorrect  // lossy conversion\n-                                );\n-                            }\n-                            _ => {\n-                                err.span_suggestion(\n-                                    expr.span,\n-                                    &format!(\"{}, which {}\", msg, will_sign_extend),\n-                                    cast_suggestion,\n-                                    Applicability::MachineApplicable\n-                                );\n-                            }\n-                        }\n-                    }\n+                (&ty::Int(_), &ty::Uint(_)) | (&ty::Uint(_), &ty::Int(_)) => {\n+                    suggest_to_change_suffix_or_into(err, true);\n                     true\n                 }\n                 (&ty::Float(ref exp), &ty::Float(ref found)) => {\n                     if found.bit_width() < exp.bit_width() {\n-                       suggest_to_change_suffix_or_into(\n-                           err,\n-                           None,\n-                       );\n-                    } else if can_cast {\n+                        suggest_to_change_suffix_or_into(err, false);\n+                    } else if literal_is_ty_suffixed(expr) {\n                         err.span_suggestion(\n                             expr.span,\n-                            &format!(\"{}, producing the closest possible value\", msg),\n+                            &lit_msg,\n+                            suffix_suggestion,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else if can_cast { // Missing try_into implementation for `f64` to `f32`\n+                        err.span_suggestion(\n+                            expr.span,\n+                            &format!(\"{}, producing the closest possible value\", cast_msg),\n                             cast_suggestion,\n-                            Applicability::MaybeIncorrect  // lossy conversion\n+                            Applicability::MaybeIncorrect,  // lossy conversion\n                         );\n                     }\n                     true\n                 }\n                 (&ty::Uint(_), &ty::Float(_)) | (&ty::Int(_), &ty::Float(_)) => {\n-                    if can_cast {\n+                    if literal_is_ty_suffixed(expr) {\n+                        err.span_suggestion(\n+                            expr.span,\n+                            &lit_msg,\n+                            suffix_suggestion,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else if can_cast {\n+                        // Missing try_into implementation for `{float}` to `{integer}`\n                         err.span_suggestion(\n                             expr.span,\n                             &format!(\"{}, rounding the float towards zero\", msg),\n                             cast_suggestion,\n                             Applicability::MaybeIncorrect  // lossy conversion\n                         );\n-                        err.warn(\"casting here will cause undefined behavior if the rounded value \\\n-                                  cannot be represented by the target integer type, including \\\n-                                  `Inf` and `NaN` (this is a bug and will be fixed)\");\n+                        err.warn(\"if the rounded value cannot be represented by the target \\\n+                                  integer type, including `Inf` and `NaN`, casting will cause \\\n+                                  undefined behavior \\\n+                                  (https://github.com/rust-lang/rust/issues/10184)\");\n                     }\n                     true\n                 }\n@@ -851,18 +742,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                         err.span_suggestion(\n                             expr.span,\n-                            &format!(\"{}, producing the floating point representation of the \\\n-                                      integer\",\n-                                     msg),\n+                            &format!(\n+                                \"{}, producing the floating point representation of the integer\",\n+                                msg,\n+                            ),\n                             into_suggestion,\n                             Applicability::MachineApplicable\n                         );\n-                    } else if can_cast {\n+                    } else if literal_is_ty_suffixed(expr) {\n+                        err.span_suggestion(\n+                            expr.span,\n+                            &lit_msg,\n+                            suffix_suggestion,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        // Missing try_into implementation for `{integer}` to `{float}`\n                         err.span_suggestion(\n                             expr.span,\n-                            &format!(\"{}, producing the floating point representation of the \\\n-                                      integer, rounded if necessary\",\n-                                     msg),\n+                            &format!(\n+                                \"{}, producing the floating point representation of the integer,\n+                                 rounded if necessary\",\n+                                cast_msg,\n+                            ),\n                             cast_suggestion,\n                             Applicability::MaybeIncorrect  // lossy conversion\n                         );\n@@ -874,18 +776,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                         err.span_suggestion(\n                             expr.span,\n-                            &format!(\"{}, producing the floating point representation of the \\\n-                                      integer\",\n-                                     msg),\n+                            &format!(\n+                                \"{}, producing the floating point representation of the integer\",\n+                                &msg,\n+                            ),\n                             into_suggestion,\n                             Applicability::MachineApplicable\n                         );\n-                    } else if can_cast {\n+                    } else if literal_is_ty_suffixed(expr) {\n                         err.span_suggestion(\n                             expr.span,\n-                            &format!(\"{}, producing the floating point representation of the \\\n-                                      integer, rounded if necessary\",\n-                                     msg),\n+                            &lit_msg,\n+                            suffix_suggestion,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        // Missing try_into implementation for `{integer}` to `{float}`\n+                        err.span_suggestion(\n+                            expr.span,\n+                            &format!(\n+                                \"{}, producing the floating point representation of the integer, \\\n+                                 rounded if necessary\",\n+                                &msg,\n+                            ),\n                             cast_suggestion,\n                             Applicability::MaybeIncorrect  // lossy conversion\n                         );"}, {"sha": "c25f12d008703c997b0e191b48d05f5af4e304a6", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,6 +3,10 @@ error[E0308]: mismatched types\n    |\n LL |     f1(2i32, 4i32);\n    |              ^^^^ expected u32, found i32\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |     f1(2i32, 4u32);\n+   |              ^^^^\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n@@ -45,6 +49,10 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = f2(2i32);\n    |                  ^^^^^^^^ expected i32, found u32\n+help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let _: i32 = f2(2i32).try_into().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "543fecb249f988cb31e15dd6f3a24f9935004917", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,48 +3,80 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_u8,\n    |                ^^^^ expected i8, found u8\n+help: change the type of the numeric literal from `u8` to `i8`\n+   |\n+LL |         OhNo = 0_i8,\n+   |                ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:30:16\n    |\n LL |         OhNo = 0_i8,\n    |                ^^^^ expected u8, found i8\n+help: change the type of the numeric literal from `i8` to `u8`\n+   |\n+LL |         OhNo = 0_u8,\n+   |                ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:43:16\n    |\n LL |         OhNo = 0_u16,\n    |                ^^^^^ expected i16, found u16\n+help: change the type of the numeric literal from `u16` to `i16`\n+   |\n+LL |         OhNo = 0_i16,\n+   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:56:16\n    |\n LL |         OhNo = 0_i16,\n    |                ^^^^^ expected u16, found i16\n+help: change the type of the numeric literal from `i16` to `u16`\n+   |\n+LL |         OhNo = 0_u16,\n+   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:69:16\n    |\n LL |         OhNo = 0_u32,\n    |                ^^^^^ expected i32, found u32\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         OhNo = 0_i32,\n+   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:82:16\n    |\n LL |         OhNo = 0_i32,\n    |                ^^^^^ expected u32, found i32\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |         OhNo = 0_u32,\n+   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:95:16\n    |\n LL |         OhNo = 0_u64,\n    |                ^^^^^ expected i64, found u64\n+help: change the type of the numeric literal from `u64` to `i64`\n+   |\n+LL |         OhNo = 0_i64,\n+   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:108:16\n    |\n LL |         OhNo = 0_i64,\n    |                ^^^^^ expected u64, found i64\n+help: change the type of the numeric literal from `i64` to `u64`\n+   |\n+LL |         OhNo = 0_u64,\n+   |                ^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "839ca57ce55628e786932b8ada470def70eda033", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -15,6 +15,10 @@ error[E0308]: mismatched types\n    |\n LL |     let y: f32 = 1f64;\n    |                  ^^^^ expected f32, found f64\n+help: change the type of the numeric literal from `f64` to `f32`\n+   |\n+LL |     let y: f32 = 1f32;\n+   |                  ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9dafe1c24f1c254cee5845602ae36edd012c2bbd", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -12,6 +12,10 @@ error[E0308]: mismatched types\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected isize, found usize\n+help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b5b3f27f0e6cd886eda277685f189e85f80fda45", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 144, "deletions": 90, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,288 +3,342 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a16);\n    |           ^^^ expected i8, found i16\n+help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i8(a16.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:35:11\n    |\n LL |     id_i8(a32);\n    |           ^^^ expected i8, found i32\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i8(a32.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:38:11\n    |\n LL |     id_i8(a64);\n    |           ^^^ expected i8, found i64\n+help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i8(a64.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:42:12\n    |\n LL |     id_i16(a8);\n-   |            ^^ expected i16, found i8\n-help: you can cast an `i8` to `i16`, which will sign-extend the source value\n-   |\n-LL |     id_i16(a8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected i16, found i8\n+   |            help: you can convert an `i8` to `i16`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:46:12\n    |\n LL |     id_i16(a32);\n    |            ^^^ expected i16, found i32\n+help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i16(a32.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:49:12\n    |\n LL |     id_i16(a64);\n    |            ^^^ expected i16, found i64\n+help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i16(a64.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:53:12\n    |\n LL |     id_i32(a8);\n-   |            ^^ expected i32, found i8\n-help: you can cast an `i8` to `i32`, which will sign-extend the source value\n-   |\n-LL |     id_i32(a8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected i32, found i8\n+   |            help: you can convert an `i8` to `i32`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:56:12\n    |\n LL |     id_i32(a16);\n-   |            ^^^ expected i32, found i16\n-help: you can cast an `i16` to `i32`, which will sign-extend the source value\n-   |\n-LL |     id_i32(a16.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected i32, found i16\n+   |            help: you can convert an `i16` to `i32`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:60:12\n    |\n LL |     id_i32(a64);\n    |            ^^^ expected i32, found i64\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i32(a64.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:64:12\n    |\n LL |     id_i64(a8);\n-   |            ^^ expected i64, found i8\n-help: you can cast an `i8` to `i64`, which will sign-extend the source value\n-   |\n-LL |     id_i64(a8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected i64, found i8\n+   |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:67:12\n    |\n LL |     id_i64(a16);\n-   |            ^^^ expected i64, found i16\n-help: you can cast an `i16` to `i64`, which will sign-extend the source value\n-   |\n-LL |     id_i64(a16.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected i64, found i16\n+   |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:70:12\n    |\n LL |     id_i64(a32);\n-   |            ^^^ expected i64, found i32\n-help: you can cast an `i32` to `i64`, which will sign-extend the source value\n-   |\n-LL |     id_i64(a32.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected i64, found i32\n+   |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:76:11\n    |\n LL |     id_i8(c16);\n    |           ^^^ expected i8, found i16\n+help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i8(c16.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:79:11\n    |\n LL |     id_i8(c32);\n    |           ^^^ expected i8, found i32\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i8(c32.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:82:11\n    |\n LL |     id_i8(c64);\n    |           ^^^ expected i8, found i64\n+help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i8(c64.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:86:12\n    |\n LL |     id_i16(c8);\n-   |            ^^ expected i16, found i8\n-help: you can cast an `i8` to `i16`, which will sign-extend the source value\n-   |\n-LL |     id_i16(c8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected i16, found i8\n+   |            help: you can convert an `i8` to `i16`: `c8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:90:12\n    |\n LL |     id_i16(c32);\n    |            ^^^ expected i16, found i32\n+help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i16(c32.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:93:12\n    |\n LL |     id_i16(c64);\n    |            ^^^ expected i16, found i64\n+help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i16(c64.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:97:12\n    |\n LL |     id_i32(c8);\n-   |            ^^ expected i32, found i8\n-help: you can cast an `i8` to `i32`, which will sign-extend the source value\n-   |\n-LL |     id_i32(c8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected i32, found i8\n+   |            help: you can convert an `i8` to `i32`: `c8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:100:12\n    |\n LL |     id_i32(c16);\n-   |            ^^^ expected i32, found i16\n-help: you can cast an `i16` to `i32`, which will sign-extend the source value\n-   |\n-LL |     id_i32(c16.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected i32, found i16\n+   |            help: you can convert an `i16` to `i32`: `c16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:104:12\n    |\n LL |     id_i32(c64);\n    |            ^^^ expected i32, found i64\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_i32(c64.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:108:12\n    |\n LL |     id_i64(a8);\n-   |            ^^ expected i64, found i8\n-help: you can cast an `i8` to `i64`, which will sign-extend the source value\n-   |\n-LL |     id_i64(a8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected i64, found i8\n+   |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:111:12\n    |\n LL |     id_i64(a16);\n-   |            ^^^ expected i64, found i16\n-help: you can cast an `i16` to `i64`, which will sign-extend the source value\n-   |\n-LL |     id_i64(a16.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected i64, found i16\n+   |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:114:12\n    |\n LL |     id_i64(a32);\n-   |            ^^^ expected i64, found i32\n-help: you can cast an `i32` to `i64`, which will sign-extend the source value\n-   |\n-LL |     id_i64(a32.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected i64, found i32\n+   |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:120:11\n    |\n LL |     id_u8(b16);\n    |           ^^^ expected u8, found u16\n+help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_u8(b16.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:123:11\n    |\n LL |     id_u8(b32);\n    |           ^^^ expected u8, found u32\n+help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_u8(b32.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:126:11\n    |\n LL |     id_u8(b64);\n    |           ^^^ expected u8, found u64\n+help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_u8(b64.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:130:12\n    |\n LL |     id_u16(b8);\n-   |            ^^ expected u16, found u8\n-help: you can cast an `u8` to `u16`, which will zero-extend the source value\n-   |\n-LL |     id_u16(b8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected u16, found u8\n+   |            help: you can convert an `u8` to `u16`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:134:12\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected u16, found u32\n+help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_u16(b32.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:137:12\n    |\n LL |     id_u16(b64);\n    |            ^^^ expected u16, found u64\n+help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_u16(b64.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:141:12\n    |\n LL |     id_u32(b8);\n-   |            ^^ expected u32, found u8\n-help: you can cast an `u8` to `u32`, which will zero-extend the source value\n-   |\n-LL |     id_u32(b8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected u32, found u8\n+   |            help: you can convert an `u8` to `u32`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:144:12\n    |\n LL |     id_u32(b16);\n-   |            ^^^ expected u32, found u16\n-help: you can cast an `u16` to `u32`, which will zero-extend the source value\n-   |\n-LL |     id_u32(b16.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected u32, found u16\n+   |            help: you can convert an `u16` to `u32`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:148:12\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected u32, found u64\n+help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     id_u32(b64.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:152:12\n    |\n LL |     id_u64(b8);\n-   |            ^^ expected u64, found u8\n-help: you can cast an `u8` to `u64`, which will zero-extend the source value\n-   |\n-LL |     id_u64(b8.into());\n-   |            ^^^^^^^^^\n+   |            ^^\n+   |            |\n+   |            expected u64, found u8\n+   |            help: you can convert an `u8` to `u64`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:155:12\n    |\n LL |     id_u64(b16);\n-   |            ^^^ expected u64, found u16\n-help: you can cast an `u16` to `u64`, which will zero-extend the source value\n-   |\n-LL |     id_u64(b16.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected u64, found u16\n+   |            help: you can convert an `u16` to `u64`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:158:12\n    |\n LL |     id_u64(b32);\n-   |            ^^^ expected u64, found u32\n-help: you can cast an `u32` to `u64`, which will zero-extend the source value\n-   |\n-LL |     id_u64(b32.into());\n-   |            ^^^^^^^^^^\n+   |            ^^^\n+   |            |\n+   |            expected u64, found u32\n+   |            help: you can convert an `u32` to `u64`: `b32.into()`\n \n error: aborting due to 36 previous errors\n "}, {"sha": "b16b7a5b2cf0462e7384f64bdc0c237977f65092", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,12 +3,20 @@ error[E0308]: mismatched types\n    |\n LL |     foo(1*(1 as isize));\n    |         ^^^^^^^^^^^^^^ expected i16, found isize\n+help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo((1*(1 as isize)).try_into().unwrap());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:10:9\n    |\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected u32, found usize\n+help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     bar((1*(1 as usize)).try_into().unwrap());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3f4fdee50fddeaed672d38840df980b6c2f9c53a", "filename": "src/test/ui/issues/issue-1362.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,6 +3,10 @@ error[E0308]: mismatched types\n    |\n LL |   let x: u32 = 20i32;\n    |                ^^^^^ expected u32, found i32\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |   let x: u32 = 20u32;\n+   |                ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a9fabca50a683c1dd9867b6399cddf4257301063", "filename": "src/test/ui/issues/issue-1448-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,6 +3,10 @@ error[E0308]: mismatched types\n    |\n LL |     println!(\"{}\", foo(10i32));\n    |                        ^^^^^ expected u32, found i32\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |     println!(\"{}\", foo(10u32));\n+   |                        ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8dd9287ffec79030e60c6de8d20cc43f85d01f97", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,6 +3,10 @@ error[E0308]: mismatched types\n    |\n LL |     X = Trait::Number,\n    |         ^^^^^^^^^^^^^ expected isize, found i32\n+help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     X = Trait::Number.try_into().unwrap(),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "28847c5a82a07b3bb0bfc71ae3c823869fecdf57", "filename": "src/test/ui/issues/issue-8761.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,12 +3,20 @@ error[E0308]: mismatched types\n    |\n LL |     A = 1i64,\n    |         ^^^^ expected isize, found i64\n+help: change the type of the numeric literal from `i64` to `isize`\n+   |\n+LL |     A = 1isize,\n+   |         ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-8761.rs:5:9\n    |\n LL |     B = 2u8\n    |         ^^^ expected isize, found u8\n+help: change the type of the numeric literal from `u8` to `isize`\n+   |\n+LL |     B = 2isize\n+   |         ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db1d5070e7fa18ca449978c8cbd658133b1a607b", "filename": "src/test/ui/meta-expected-error-correct-rev.a.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,6 +3,10 @@ error[E0308]: mismatched types\n    |\n LL |     let x: u32 = 22_usize;\n    |                  ^^^^^^^^ expected u32, found usize\n+help: change the type of the numeric literal from `usize` to `u32`\n+   |\n+LL |     let x: u32 = 22_u32;\n+   |                  ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "be701b2bb3973e9b85a26597e79a72334effb4a3", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -11,6 +11,10 @@ error[E0308]: mismatched types\n    |\n LL |     let y: usize = x.foo();\n    |                    ^^^^^^^ expected usize, found isize\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let y: usize = x.foo().try_into().unwrap();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1a81df8e2c464c7fafa27f31a168c151a81c9a3c", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -6,6 +6,10 @@ LL |                   $arr.len() * size_of($arr[0]));\n ...\n LL |     write!(hello);\n    |     -------------- in this macro invocation\n+help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n+   |\n+LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:22:19"}, {"sha": "be4411e630becfdbfec6b2ce31d0dbcb8dfd62e4", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,18 +3,30 @@ error[E0308]: mismatched types\n    |\n LL |     let x: u16 = foo();\n    |                  ^^^^^ expected u16, found i32\n+help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let x: u16 = foo().try_into().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:7:18\n    |\n LL |     let y: i64 = x + x;\n    |                  ^^^^^ expected i64, found u16\n+help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let y: i64 = (x + x).try_into().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-2.rs:9:18\n    |\n LL |     let z: i32 = x + x;\n    |                  ^^^^^ expected i32, found u16\n+help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let z: i32 = (x + x).try_into().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "faf24a8c18efd701cd6778cf9d06d321be8ec0f4", "filename": "src/test/ui/numeric/numeric-cast-without-suggestion.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.rs?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -0,0 +1,38 @@\n+fn foo<N>(_x: N) {}\n+\n+fn main() {\n+    let x_usize: usize = 1;\n+    let x_u64: u64 = 2;\n+    let x_u32: u32 = 3;\n+    let x_u16: u16 = 4;\n+    let x_u8: u8 = 5;\n+    let x_isize: isize = 6;\n+    let x_i64: i64 = 7;\n+    let x_i32: i32 = 8;\n+    let x_i16: i16 = 9;\n+    let x_i8: i8 = 10;\n+    let x_f64: f64 = 11.0;\n+    let x_f32: f32 = 12.0;\n+\n+    foo::<usize>(x_f64); //~ ERROR mismatched types\n+    foo::<usize>(x_f32); //~ ERROR mismatched types\n+    foo::<isize>(x_f64); //~ ERROR mismatched types\n+    foo::<isize>(x_f32); //~ ERROR mismatched types\n+    foo::<u64>(x_f64); //~ ERROR mismatched types\n+    foo::<u64>(x_f32); //~ ERROR mismatched types\n+    foo::<i64>(x_f64); //~ ERROR mismatched types\n+    foo::<i64>(x_f32); //~ ERROR mismatched types\n+    foo::<u32>(x_f64); //~ ERROR mismatched types\n+    foo::<u32>(x_f32); //~ ERROR mismatched types\n+    foo::<i32>(x_f64); //~ ERROR mismatched types\n+    foo::<i32>(x_f32); //~ ERROR mismatched types\n+    foo::<u16>(x_f64); //~ ERROR mismatched types\n+    foo::<u16>(x_f32); //~ ERROR mismatched types\n+    foo::<i16>(x_f64); //~ ERROR mismatched types\n+    foo::<i16>(x_f32); //~ ERROR mismatched types\n+    foo::<u8>(x_f64); //~ ERROR mismatched types\n+    foo::<u8>(x_f32); //~ ERROR mismatched types\n+    foo::<i8>(x_f64); //~ ERROR mismatched types\n+    foo::<i8>(x_f32); //~ ERROR mismatched types\n+    foo::<f32>(x_f64); //~ ERROR mismatched types\n+}"}, {"sha": "a79eaea16ebb0fefa6e7d3795448db920f0988cb", "filename": "src/test/ui/numeric/numeric-cast-without-suggestion.stderr", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-without-suggestion.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -0,0 +1,129 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:17:18\n+   |\n+LL |     foo::<usize>(x_f64);\n+   |                  ^^^^^ expected usize, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:18:18\n+   |\n+LL |     foo::<usize>(x_f32);\n+   |                  ^^^^^ expected usize, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:19:18\n+   |\n+LL |     foo::<isize>(x_f64);\n+   |                  ^^^^^ expected isize, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:20:18\n+   |\n+LL |     foo::<isize>(x_f32);\n+   |                  ^^^^^ expected isize, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:21:16\n+   |\n+LL |     foo::<u64>(x_f64);\n+   |                ^^^^^ expected u64, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:22:16\n+   |\n+LL |     foo::<u64>(x_f32);\n+   |                ^^^^^ expected u64, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:23:16\n+   |\n+LL |     foo::<i64>(x_f64);\n+   |                ^^^^^ expected i64, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:24:16\n+   |\n+LL |     foo::<i64>(x_f32);\n+   |                ^^^^^ expected i64, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:25:16\n+   |\n+LL |     foo::<u32>(x_f64);\n+   |                ^^^^^ expected u32, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:26:16\n+   |\n+LL |     foo::<u32>(x_f32);\n+   |                ^^^^^ expected u32, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:27:16\n+   |\n+LL |     foo::<i32>(x_f64);\n+   |                ^^^^^ expected i32, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:28:16\n+   |\n+LL |     foo::<i32>(x_f32);\n+   |                ^^^^^ expected i32, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:29:16\n+   |\n+LL |     foo::<u16>(x_f64);\n+   |                ^^^^^ expected u16, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:30:16\n+   |\n+LL |     foo::<u16>(x_f32);\n+   |                ^^^^^ expected u16, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:31:16\n+   |\n+LL |     foo::<i16>(x_f64);\n+   |                ^^^^^ expected i16, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:32:16\n+   |\n+LL |     foo::<i16>(x_f32);\n+   |                ^^^^^ expected i16, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:33:15\n+   |\n+LL |     foo::<u8>(x_f64);\n+   |               ^^^^^ expected u8, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:34:15\n+   |\n+LL |     foo::<u8>(x_f32);\n+   |               ^^^^^ expected u8, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:35:15\n+   |\n+LL |     foo::<i8>(x_f64);\n+   |               ^^^^^ expected i8, found f64\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:36:15\n+   |\n+LL |     foo::<i8>(x_f32);\n+   |               ^^^^^ expected i8, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-cast-without-suggestion.rs:37:16\n+   |\n+LL |     foo::<f32>(x_f64);\n+   |                ^^^^^ expected f32, found f64\n+\n+error: aborting due to 21 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6f78228a85d4497e76ebb9506fe7cb6ef9cb650c", "filename": "src/test/ui/numeric/numeric-cast.fixed", "status": "added", "additions": 293, "deletions": 0, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -0,0 +1,293 @@\n+// run-rustfix\n+\n+// The `try_into` suggestion doesn't include this, but we do suggest it after applying it\n+use std::convert::TryInto;\n+\n+fn foo<N>(_x: N) {}\n+\n+fn main() {\n+    let x_usize: usize = 1;\n+    let x_u64: u64 = 2;\n+    let x_u32: u32 = 3;\n+    let x_u16: u16 = 4;\n+    let x_u8: u8 = 5;\n+    let x_isize: isize = 6;\n+    let x_i64: i64 = 7;\n+    let x_i32: i32 = 8;\n+    let x_i16: i16 = 9;\n+    let x_i8: i8 = 10;\n+    let x_f64: f64 = 11.0;\n+    let x_f32: f32 = 12.0;\n+\n+    foo::<usize>(x_usize);\n+    foo::<usize>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_u16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_u8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_i16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<usize>(x_i8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    // foo::<usize>(x_f64);\n+    // foo::<usize>(x_f32);\n+\n+    foo::<isize>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_u16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_u8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_isize);\n+    foo::<isize>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_i16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<isize>(x_i8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    // foo::<isize>(x_f64);\n+    // foo::<isize>(x_f32);\n+\n+    foo::<u64>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_u64);\n+    foo::<u64>(x_u32.into());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_u16.into());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_u8.into());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_i16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u64>(x_i8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    // foo::<u64>(x_f64);\n+    // foo::<u64>(x_f32);\n+\n+    foo::<i64>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_u16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_u8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_i64);\n+    foo::<i64>(x_i32.into());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_i16.into());\n+    //~^ ERROR mismatched types\n+    foo::<i64>(x_i8.into());\n+    //~^ ERROR mismatched types\n+    // foo::<i64>(x_f64);\n+    // foo::<i64>(x_f32);\n+\n+    foo::<u32>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_u32);\n+    foo::<u32>(x_u16.into());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_u8.into());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_i16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u32>(x_i8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    // foo::<u32>(x_f64);\n+    // foo::<u32>(x_f32);\n+\n+    foo::<i32>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_u16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_u8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_i32);\n+    foo::<i32>(x_i16.into());\n+    //~^ ERROR mismatched types\n+    foo::<i32>(x_i8.into());\n+    //~^ ERROR mismatched types\n+    // foo::<i32>(x_f64);\n+    // foo::<i32>(x_f32);\n+\n+    foo::<u16>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_u16);\n+    foo::<u16>(x_u8.into());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_i16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u16>(x_i8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    // foo::<u16>(x_f64);\n+    // foo::<u16>(x_f32);\n+\n+    foo::<i16>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_u16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_u8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i16>(x_i16);\n+    foo::<i16>(x_i8.into());\n+    //~^ ERROR mismatched types\n+    // foo::<i16>(x_f64);\n+    // foo::<i16>(x_f32);\n+\n+    foo::<u8>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_u16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_u8);\n+    foo::<u8>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_i16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<u8>(x_i8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    // foo::<u8>(x_f64);\n+    // foo::<u8>(x_f32);\n+\n+    foo::<i8>(x_usize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_u64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_u32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_u16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_u8.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_isize.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_i64.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_i32.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_i16.try_into().unwrap());\n+    //~^ ERROR mismatched types\n+    foo::<i8>(x_i8);\n+    // foo::<i8>(x_f64);\n+    // foo::<i8>(x_f32);\n+\n+    foo::<f64>(x_usize as f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_u64 as f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_u32.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_u16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_u8.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_isize as f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_i64 as f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_i32.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_i16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_i8.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(x_f64);\n+    foo::<f64>(x_f32.into());\n+    //~^ ERROR mismatched types\n+\n+    foo::<f32>(x_usize as f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_u64 as f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_u32 as f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_u16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_u8.into());\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_isize as f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_i64 as f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_i32 as f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_i16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f32>(x_i8.into());\n+    //~^ ERROR mismatched types\n+    // foo::<f32>(x_f64);\n+    foo::<f32>(x_f32);\n+\n+    foo::<u32>((x_u8 as u16).into());\n+    //~^ ERROR mismatched types\n+    foo::<i32>((-x_i8).into());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "7bddfc50905357e062e90709c93e525c743cd08e", "filename": "src/test/ui/numeric/numeric-cast.rs", "status": "modified", "additions": 26, "deletions": 42, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.rs?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -1,3 +1,8 @@\n+// run-rustfix\n+\n+// The `try_into` suggestion doesn't include this, but we do suggest it after applying it\n+use std::convert::TryInto;\n+\n fn foo<N>(_x: N) {}\n \n fn main() {\n@@ -33,10 +38,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<usize>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<usize>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<usize>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<usize>(x_f64);\n+    // foo::<usize>(x_f32);\n \n     foo::<isize>(x_usize);\n     //~^ ERROR mismatched types\n@@ -57,10 +60,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<isize>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<isize>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<isize>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<isize>(x_f64);\n+    // foo::<isize>(x_f32);\n \n     foo::<u64>(x_usize);\n     //~^ ERROR mismatched types\n@@ -81,10 +82,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u64>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<u64>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u64>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<u64>(x_f64);\n+    // foo::<u64>(x_f32);\n \n     foo::<i64>(x_usize);\n     //~^ ERROR mismatched types\n@@ -105,10 +104,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i64>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<i64>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i64>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<i64>(x_f64);\n+    // foo::<i64>(x_f32);\n \n     foo::<u32>(x_usize);\n     //~^ ERROR mismatched types\n@@ -129,10 +126,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u32>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<u32>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u32>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<u32>(x_f64);\n+    // foo::<u32>(x_f32);\n \n     foo::<i32>(x_usize);\n     //~^ ERROR mismatched types\n@@ -153,10 +148,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<i32>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<i32>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i32>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<i32>(x_f64);\n+    // foo::<i32>(x_f32);\n \n     foo::<u16>(x_usize);\n     //~^ ERROR mismatched types\n@@ -177,10 +170,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u16>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<u16>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u16>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<u16>(x_f64);\n+    // foo::<u16>(x_f32);\n \n     foo::<i16>(x_usize);\n     //~^ ERROR mismatched types\n@@ -201,10 +192,8 @@ fn main() {\n     foo::<i16>(x_i16);\n     foo::<i16>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<i16>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i16>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<i16>(x_f64);\n+    // foo::<i16>(x_f32);\n \n     foo::<u8>(x_usize);\n     //~^ ERROR mismatched types\n@@ -225,10 +214,8 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<u8>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<u8>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<u8>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<u8>(x_f64);\n+    // foo::<u8>(x_f32);\n \n     foo::<i8>(x_usize);\n     //~^ ERROR mismatched types\n@@ -249,10 +236,8 @@ fn main() {\n     foo::<i8>(x_i16);\n     //~^ ERROR mismatched types\n     foo::<i8>(x_i8);\n-    foo::<i8>(x_f64);\n-    //~^ ERROR mismatched types\n-    foo::<i8>(x_f32);\n-    //~^ ERROR mismatched types\n+    // foo::<i8>(x_f64);\n+    // foo::<i8>(x_f32);\n \n     foo::<f64>(x_usize);\n     //~^ ERROR mismatched types\n@@ -298,8 +283,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<f32>(x_i8);\n     //~^ ERROR mismatched types\n-    foo::<f32>(x_f64);\n-    //~^ ERROR mismatched types\n+    // foo::<f32>(x_f64);\n     foo::<f32>(x_f32);\n \n     foo::<u32>(x_u8 as u16);"}, {"sha": "9e7dcf7e41b555165dc1596d979ccb0675699964", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 528, "deletions": 317, "changes": 845, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -1,907 +1,1118 @@\n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:18:18\n+  --> $DIR/numeric-cast.rs:23:18\n    |\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected usize, found u64\n+help: you can convert an `u64` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_u64.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:20:18\n+  --> $DIR/numeric-cast.rs:25:18\n    |\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected usize, found u32\n+help: you can convert an `u32` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_u32.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:22:18\n+  --> $DIR/numeric-cast.rs:27:18\n    |\n LL |     foo::<usize>(x_u16);\n    |                  ^^^^^ expected usize, found u16\n+help: you can convert an `u16` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_u16.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:24:18\n+  --> $DIR/numeric-cast.rs:29:18\n    |\n LL |     foo::<usize>(x_u8);\n    |                  ^^^^ expected usize, found u8\n+help: you can convert an `u8` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_u8.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:26:18\n+  --> $DIR/numeric-cast.rs:31:18\n    |\n LL |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected usize, found isize\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_isize.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:28:18\n+  --> $DIR/numeric-cast.rs:33:18\n    |\n LL |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected usize, found i64\n+help: you can convert an `i64` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_i64.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:30:18\n+  --> $DIR/numeric-cast.rs:35:18\n    |\n LL |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected usize, found i32\n+help: you can convert an `i32` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_i32.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:32:18\n+  --> $DIR/numeric-cast.rs:37:18\n    |\n LL |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected usize, found i16\n+help: you can convert an `i16` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<usize>(x_i16.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:34:18\n+  --> $DIR/numeric-cast.rs:39:18\n    |\n LL |     foo::<usize>(x_i8);\n    |                  ^^^^ expected usize, found i8\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:36:18\n+help: you can convert an `i8` to `usize` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<usize>(x_f64);\n-   |                  ^^^^^ expected usize, found f64\n+LL |     foo::<usize>(x_i8.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:38:18\n-   |\n-LL |     foo::<usize>(x_f32);\n-   |                  ^^^^^ expected usize, found f32\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:41:18\n+  --> $DIR/numeric-cast.rs:44:18\n    |\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected isize, found usize\n+help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_usize.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:43:18\n+  --> $DIR/numeric-cast.rs:46:18\n    |\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected isize, found u64\n+help: you can convert an `u64` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_u64.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:45:18\n+  --> $DIR/numeric-cast.rs:48:18\n    |\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected isize, found u32\n+help: you can convert an `u32` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_u32.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:47:18\n+  --> $DIR/numeric-cast.rs:50:18\n    |\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected isize, found u16\n+help: you can convert an `u16` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_u16.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:49:18\n+  --> $DIR/numeric-cast.rs:52:18\n    |\n LL |     foo::<isize>(x_u8);\n    |                  ^^^^ expected isize, found u8\n+help: you can convert an `u8` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_u8.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:52:18\n+  --> $DIR/numeric-cast.rs:55:18\n    |\n LL |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected isize, found i64\n+help: you can convert an `i64` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_i64.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:54:18\n+  --> $DIR/numeric-cast.rs:57:18\n    |\n LL |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected isize, found i32\n+help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_i32.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:56:18\n+  --> $DIR/numeric-cast.rs:59:18\n    |\n LL |     foo::<isize>(x_i16);\n    |                  ^^^^^ expected isize, found i16\n+help: you can convert an `i16` to `isize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<isize>(x_i16.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:58:18\n+  --> $DIR/numeric-cast.rs:61:18\n    |\n LL |     foo::<isize>(x_i8);\n    |                  ^^^^ expected isize, found i8\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:60:18\n+help: you can convert an `i8` to `isize` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<isize>(x_f64);\n-   |                  ^^^^^ expected isize, found f64\n+LL |     foo::<isize>(x_i8.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:62:18\n-   |\n-LL |     foo::<isize>(x_f32);\n-   |                  ^^^^^ expected isize, found f32\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:65:16\n+  --> $DIR/numeric-cast.rs:66:16\n    |\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected u64, found usize\n+help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u64>(x_usize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:68:16\n+  --> $DIR/numeric-cast.rs:69:16\n    |\n LL |     foo::<u64>(x_u32);\n-   |                ^^^^^ expected u64, found u32\n-help: you can cast an `u32` to `u64`, which will zero-extend the source value\n-   |\n-LL |     foo::<u64>(x_u32.into());\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected u64, found u32\n+   |                help: you can convert an `u32` to `u64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:70:16\n+  --> $DIR/numeric-cast.rs:71:16\n    |\n LL |     foo::<u64>(x_u16);\n-   |                ^^^^^ expected u64, found u16\n-help: you can cast an `u16` to `u64`, which will zero-extend the source value\n-   |\n-LL |     foo::<u64>(x_u16.into());\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected u64, found u16\n+   |                help: you can convert an `u16` to `u64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:72:16\n+  --> $DIR/numeric-cast.rs:73:16\n    |\n LL |     foo::<u64>(x_u8);\n-   |                ^^^^ expected u64, found u8\n-help: you can cast an `u8` to `u64`, which will zero-extend the source value\n-   |\n-LL |     foo::<u64>(x_u8.into());\n-   |                ^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected u64, found u8\n+   |                help: you can convert an `u8` to `u64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:74:16\n+  --> $DIR/numeric-cast.rs:75:16\n    |\n LL |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected u64, found isize\n+help: you can convert an `isize` to `u64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u64>(x_isize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:76:16\n+  --> $DIR/numeric-cast.rs:77:16\n    |\n LL |     foo::<u64>(x_i64);\n    |                ^^^^^ expected u64, found i64\n+help: you can convert an `i64` to `u64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u64>(x_i64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:78:16\n+  --> $DIR/numeric-cast.rs:79:16\n    |\n LL |     foo::<u64>(x_i32);\n    |                ^^^^^ expected u64, found i32\n+help: you can convert an `i32` to `u64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u64>(x_i32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:80:16\n+  --> $DIR/numeric-cast.rs:81:16\n    |\n LL |     foo::<u64>(x_i16);\n    |                ^^^^^ expected u64, found i16\n+help: you can convert an `i16` to `u64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u64>(x_i16.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:82:16\n+  --> $DIR/numeric-cast.rs:83:16\n    |\n LL |     foo::<u64>(x_i8);\n    |                ^^^^ expected u64, found i8\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:84:16\n+help: you can convert an `i8` to `u64` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<u64>(x_f64);\n-   |                ^^^^^ expected u64, found f64\n+LL |     foo::<u64>(x_i8.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:86:16\n-   |\n-LL |     foo::<u64>(x_f32);\n-   |                ^^^^^ expected u64, found f32\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:89:16\n+  --> $DIR/numeric-cast.rs:88:16\n    |\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected i64, found usize\n+help: you can convert an `usize` to `i64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i64>(x_usize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:91:16\n+  --> $DIR/numeric-cast.rs:90:16\n    |\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected i64, found u64\n+help: you can convert an `u64` to `i64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i64>(x_u64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:93:16\n+  --> $DIR/numeric-cast.rs:92:16\n    |\n LL |     foo::<i64>(x_u32);\n    |                ^^^^^ expected i64, found u32\n+help: you can convert an `u32` to `i64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i64>(x_u32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:95:16\n+  --> $DIR/numeric-cast.rs:94:16\n    |\n LL |     foo::<i64>(x_u16);\n    |                ^^^^^ expected i64, found u16\n+help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i64>(x_u16.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:97:16\n+  --> $DIR/numeric-cast.rs:96:16\n    |\n LL |     foo::<i64>(x_u8);\n    |                ^^^^ expected i64, found u8\n+help: you can convert an `u8` to `i64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i64>(x_u8.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:99:16\n+  --> $DIR/numeric-cast.rs:98:16\n    |\n LL |     foo::<i64>(x_isize);\n    |                ^^^^^^^ expected i64, found isize\n+help: you can convert an `isize` to `i64` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i64>(x_isize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:102:16\n+  --> $DIR/numeric-cast.rs:101:16\n    |\n LL |     foo::<i64>(x_i32);\n-   |                ^^^^^ expected i64, found i32\n-help: you can cast an `i32` to `i64`, which will sign-extend the source value\n-   |\n-LL |     foo::<i64>(x_i32.into());\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected i64, found i32\n+   |                help: you can convert an `i32` to `i64`: `x_i32.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:104:16\n+  --> $DIR/numeric-cast.rs:103:16\n    |\n LL |     foo::<i64>(x_i16);\n-   |                ^^^^^ expected i64, found i16\n-help: you can cast an `i16` to `i64`, which will sign-extend the source value\n-   |\n-LL |     foo::<i64>(x_i16.into());\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected i64, found i16\n+   |                help: you can convert an `i16` to `i64`: `x_i16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:106:16\n+  --> $DIR/numeric-cast.rs:105:16\n    |\n LL |     foo::<i64>(x_i8);\n-   |                ^^^^ expected i64, found i8\n-help: you can cast an `i8` to `i64`, which will sign-extend the source value\n-   |\n-LL |     foo::<i64>(x_i8.into());\n-   |                ^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:108:16\n-   |\n-LL |     foo::<i64>(x_f64);\n-   |                ^^^^^ expected i64, found f64\n+   |                ^^^^\n+   |                |\n+   |                expected i64, found i8\n+   |                help: you can convert an `i8` to `i64`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:110:16\n    |\n-LL |     foo::<i64>(x_f32);\n-   |                ^^^^^ expected i64, found f32\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:113:16\n-   |\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected u32, found usize\n+help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u32>(x_usize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:115:16\n+  --> $DIR/numeric-cast.rs:112:16\n    |\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected u32, found u64\n+help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u32>(x_u64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:118:16\n+  --> $DIR/numeric-cast.rs:115:16\n    |\n LL |     foo::<u32>(x_u16);\n-   |                ^^^^^ expected u32, found u16\n-help: you can cast an `u16` to `u32`, which will zero-extend the source value\n-   |\n-LL |     foo::<u32>(x_u16.into());\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected u32, found u16\n+   |                help: you can convert an `u16` to `u32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:120:16\n+  --> $DIR/numeric-cast.rs:117:16\n    |\n LL |     foo::<u32>(x_u8);\n-   |                ^^^^ expected u32, found u8\n-help: you can cast an `u8` to `u32`, which will zero-extend the source value\n-   |\n-LL |     foo::<u32>(x_u8.into());\n-   |                ^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected u32, found u8\n+   |                help: you can convert an `u8` to `u32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:122:16\n+  --> $DIR/numeric-cast.rs:119:16\n    |\n LL |     foo::<u32>(x_isize);\n    |                ^^^^^^^ expected u32, found isize\n+help: you can convert an `isize` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u32>(x_isize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:124:16\n+  --> $DIR/numeric-cast.rs:121:16\n    |\n LL |     foo::<u32>(x_i64);\n    |                ^^^^^ expected u32, found i64\n+help: you can convert an `i64` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u32>(x_i64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:126:16\n+  --> $DIR/numeric-cast.rs:123:16\n    |\n LL |     foo::<u32>(x_i32);\n    |                ^^^^^ expected u32, found i32\n+help: you can convert an `i32` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u32>(x_i32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:128:16\n+  --> $DIR/numeric-cast.rs:125:16\n    |\n LL |     foo::<u32>(x_i16);\n    |                ^^^^^ expected u32, found i16\n+help: you can convert an `i16` to `u32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u32>(x_i16.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:130:16\n+  --> $DIR/numeric-cast.rs:127:16\n    |\n LL |     foo::<u32>(x_i8);\n    |                ^^^^ expected u32, found i8\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:132:16\n-   |\n-LL |     foo::<u32>(x_f64);\n-   |                ^^^^^ expected u32, found f64\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:134:16\n+help: you can convert an `i8` to `u32` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<u32>(x_f32);\n-   |                ^^^^^ expected u32, found f32\n+LL |     foo::<u32>(x_i8.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:137:16\n+  --> $DIR/numeric-cast.rs:132:16\n    |\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected i32, found usize\n+help: you can convert an `usize` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i32>(x_usize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:139:16\n+  --> $DIR/numeric-cast.rs:134:16\n    |\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected i32, found u64\n+help: you can convert an `u64` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i32>(x_u64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:141:16\n+  --> $DIR/numeric-cast.rs:136:16\n    |\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected i32, found u32\n+help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i32>(x_u32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:143:16\n+  --> $DIR/numeric-cast.rs:138:16\n    |\n LL |     foo::<i32>(x_u16);\n    |                ^^^^^ expected i32, found u16\n+help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i32>(x_u16.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:145:16\n+  --> $DIR/numeric-cast.rs:140:16\n    |\n LL |     foo::<i32>(x_u8);\n    |                ^^^^ expected i32, found u8\n+help: you can convert an `u8` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i32>(x_u8.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:147:16\n+  --> $DIR/numeric-cast.rs:142:16\n    |\n LL |     foo::<i32>(x_isize);\n    |                ^^^^^^^ expected i32, found isize\n+help: you can convert an `isize` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i32>(x_isize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:149:16\n+  --> $DIR/numeric-cast.rs:144:16\n    |\n LL |     foo::<i32>(x_i64);\n    |                ^^^^^ expected i32, found i64\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i32>(x_i64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:152:16\n+  --> $DIR/numeric-cast.rs:147:16\n    |\n LL |     foo::<i32>(x_i16);\n-   |                ^^^^^ expected i32, found i16\n-help: you can cast an `i16` to `i32`, which will sign-extend the source value\n-   |\n-LL |     foo::<i32>(x_i16.into());\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected i32, found i16\n+   |                help: you can convert an `i16` to `i32`: `x_i16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:154:16\n+  --> $DIR/numeric-cast.rs:149:16\n    |\n LL |     foo::<i32>(x_i8);\n-   |                ^^^^ expected i32, found i8\n-help: you can cast an `i8` to `i32`, which will sign-extend the source value\n-   |\n-LL |     foo::<i32>(x_i8.into());\n-   |                ^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:156:16\n-   |\n-LL |     foo::<i32>(x_f64);\n-   |                ^^^^^ expected i32, found f64\n+   |                ^^^^\n+   |                |\n+   |                expected i32, found i8\n+   |                help: you can convert an `i8` to `i32`: `x_i8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:158:16\n-   |\n-LL |     foo::<i32>(x_f32);\n-   |                ^^^^^ expected i32, found f32\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:161:16\n+  --> $DIR/numeric-cast.rs:154:16\n    |\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected u16, found usize\n+help: you can convert an `usize` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u16>(x_usize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:163:16\n+  --> $DIR/numeric-cast.rs:156:16\n    |\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected u16, found u64\n+help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u16>(x_u64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:165:16\n+  --> $DIR/numeric-cast.rs:158:16\n    |\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected u16, found u32\n+help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u16>(x_u32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:168:16\n+  --> $DIR/numeric-cast.rs:161:16\n    |\n LL |     foo::<u16>(x_u8);\n-   |                ^^^^ expected u16, found u8\n-help: you can cast an `u8` to `u16`, which will zero-extend the source value\n-   |\n-LL |     foo::<u16>(x_u8.into());\n-   |                ^^^^^^^^^^^\n+   |                ^^^^\n+   |                |\n+   |                expected u16, found u8\n+   |                help: you can convert an `u8` to `u16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:170:16\n+  --> $DIR/numeric-cast.rs:163:16\n    |\n LL |     foo::<u16>(x_isize);\n    |                ^^^^^^^ expected u16, found isize\n+help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u16>(x_isize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:172:16\n+  --> $DIR/numeric-cast.rs:165:16\n    |\n LL |     foo::<u16>(x_i64);\n    |                ^^^^^ expected u16, found i64\n+help: you can convert an `i64` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u16>(x_i64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:174:16\n+  --> $DIR/numeric-cast.rs:167:16\n    |\n LL |     foo::<u16>(x_i32);\n    |                ^^^^^ expected u16, found i32\n+help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u16>(x_i32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:176:16\n+  --> $DIR/numeric-cast.rs:169:16\n    |\n LL |     foo::<u16>(x_i16);\n    |                ^^^^^ expected u16, found i16\n+help: you can convert an `i16` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u16>(x_i16.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:178:16\n+  --> $DIR/numeric-cast.rs:171:16\n    |\n LL |     foo::<u16>(x_i8);\n    |                ^^^^ expected u16, found i8\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:180:16\n-   |\n-LL |     foo::<u16>(x_f64);\n-   |                ^^^^^ expected u16, found f64\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:182:16\n+help: you can convert an `i8` to `u16` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<u16>(x_f32);\n-   |                ^^^^^ expected u16, found f32\n+LL |     foo::<u16>(x_i8.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:185:16\n+  --> $DIR/numeric-cast.rs:176:16\n    |\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected i16, found usize\n+help: you can convert an `usize` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i16>(x_usize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:187:16\n+  --> $DIR/numeric-cast.rs:178:16\n    |\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected i16, found u64\n+help: you can convert an `u64` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i16>(x_u64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:189:16\n+  --> $DIR/numeric-cast.rs:180:16\n    |\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected i16, found u32\n+help: you can convert an `u32` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i16>(x_u32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:191:16\n+  --> $DIR/numeric-cast.rs:182:16\n    |\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected i16, found u16\n+help: you can convert an `u16` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i16>(x_u16.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:193:16\n+  --> $DIR/numeric-cast.rs:184:16\n    |\n LL |     foo::<i16>(x_u8);\n    |                ^^^^ expected i16, found u8\n+help: you can convert an `u8` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i16>(x_u8.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:195:16\n+  --> $DIR/numeric-cast.rs:186:16\n    |\n LL |     foo::<i16>(x_isize);\n    |                ^^^^^^^ expected i16, found isize\n+help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i16>(x_isize.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:197:16\n+  --> $DIR/numeric-cast.rs:188:16\n    |\n LL |     foo::<i16>(x_i64);\n    |                ^^^^^ expected i16, found i64\n+help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i16>(x_i64.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:199:16\n+  --> $DIR/numeric-cast.rs:190:16\n    |\n LL |     foo::<i16>(x_i32);\n    |                ^^^^^ expected i16, found i32\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:202:16\n-   |\n-LL |     foo::<i16>(x_i8);\n-   |                ^^^^ expected i16, found i8\n-help: you can cast an `i8` to `i16`, which will sign-extend the source value\n-   |\n-LL |     foo::<i16>(x_i8.into());\n-   |                ^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:204:16\n+help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<i16>(x_f64);\n-   |                ^^^^^ expected i16, found f64\n+LL |     foo::<i16>(x_i32.try_into().unwrap());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:206:16\n+  --> $DIR/numeric-cast.rs:193:16\n    |\n-LL |     foo::<i16>(x_f32);\n-   |                ^^^^^ expected i16, found f32\n+LL |     foo::<i16>(x_i8);\n+   |                ^^^^\n+   |                |\n+   |                expected i16, found i8\n+   |                help: you can convert an `i8` to `i16`: `x_i8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:209:15\n+  --> $DIR/numeric-cast.rs:198:15\n    |\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected u8, found usize\n+help: you can convert an `usize` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_usize.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:211:15\n+  --> $DIR/numeric-cast.rs:200:15\n    |\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected u8, found u64\n+help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_u64.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:213:15\n+  --> $DIR/numeric-cast.rs:202:15\n    |\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected u8, found u32\n+help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_u32.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:215:15\n+  --> $DIR/numeric-cast.rs:204:15\n    |\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected u8, found u16\n+help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_u16.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:218:15\n+  --> $DIR/numeric-cast.rs:207:15\n    |\n LL |     foo::<u8>(x_isize);\n    |               ^^^^^^^ expected u8, found isize\n+help: you can convert an `isize` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_isize.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:220:15\n+  --> $DIR/numeric-cast.rs:209:15\n    |\n LL |     foo::<u8>(x_i64);\n    |               ^^^^^ expected u8, found i64\n+help: you can convert an `i64` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_i64.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:222:15\n+  --> $DIR/numeric-cast.rs:211:15\n    |\n LL |     foo::<u8>(x_i32);\n    |               ^^^^^ expected u8, found i32\n+help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_i32.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:224:15\n+  --> $DIR/numeric-cast.rs:213:15\n    |\n LL |     foo::<u8>(x_i16);\n    |               ^^^^^ expected u8, found i16\n+help: you can convert an `i16` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<u8>(x_i16.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:226:15\n+  --> $DIR/numeric-cast.rs:215:15\n    |\n LL |     foo::<u8>(x_i8);\n    |               ^^^^ expected u8, found i8\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:228:15\n-   |\n-LL |     foo::<u8>(x_f64);\n-   |               ^^^^^ expected u8, found f64\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:230:15\n+help: you can convert an `i8` to `u8` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<u8>(x_f32);\n-   |               ^^^^^ expected u8, found f32\n+LL |     foo::<u8>(x_i8.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:233:15\n+  --> $DIR/numeric-cast.rs:220:15\n    |\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected i8, found usize\n+help: you can convert an `usize` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_usize.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:235:15\n+  --> $DIR/numeric-cast.rs:222:15\n    |\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected i8, found u64\n+help: you can convert an `u64` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_u64.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:237:15\n+  --> $DIR/numeric-cast.rs:224:15\n    |\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected i8, found u32\n+help: you can convert an `u32` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_u32.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:239:15\n+  --> $DIR/numeric-cast.rs:226:15\n    |\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected i8, found u16\n+help: you can convert an `u16` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_u16.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:241:15\n+  --> $DIR/numeric-cast.rs:228:15\n    |\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected i8, found u8\n+help: you can convert an `u8` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_u8.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:243:15\n+  --> $DIR/numeric-cast.rs:230:15\n    |\n LL |     foo::<i8>(x_isize);\n    |               ^^^^^^^ expected i8, found isize\n+help: you can convert an `isize` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_isize.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:245:15\n+  --> $DIR/numeric-cast.rs:232:15\n    |\n LL |     foo::<i8>(x_i64);\n    |               ^^^^^ expected i8, found i64\n+help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_i64.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:247:15\n+  --> $DIR/numeric-cast.rs:234:15\n    |\n LL |     foo::<i8>(x_i32);\n    |               ^^^^^ expected i8, found i32\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     foo::<i8>(x_i32.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:249:15\n+  --> $DIR/numeric-cast.rs:236:15\n    |\n LL |     foo::<i8>(x_i16);\n    |               ^^^^^ expected i8, found i16\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:252:15\n-   |\n-LL |     foo::<i8>(x_f64);\n-   |               ^^^^^ expected i8, found f64\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:254:15\n+help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n    |\n-LL |     foo::<i8>(x_f32);\n-   |               ^^^^^ expected i8, found f32\n+LL |     foo::<i8>(x_i16.try_into().unwrap());\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:257:16\n+  --> $DIR/numeric-cast.rs:242:16\n    |\n LL |     foo::<f64>(x_usize);\n    |                ^^^^^^^ expected f64, found usize\n+help: you can cast an `usize to `f64`, producing the floating point representation of the integer,\n+   |                                              rounded if necessary\n+LL |     foo::<f64>(x_usize as f64);\n+   |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:259:16\n+  --> $DIR/numeric-cast.rs:244:16\n    |\n LL |     foo::<f64>(x_u64);\n    |                ^^^^^ expected f64, found u64\n+help: you can cast an `u64 to `f64`, producing the floating point representation of the integer,\n+   |                                              rounded if necessary\n+LL |     foo::<f64>(x_u64 as f64);\n+   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:261:16\n+  --> $DIR/numeric-cast.rs:246:16\n    |\n LL |     foo::<f64>(x_u32);\n    |                ^^^^^ expected f64, found u32\n-help: you can cast an `u32` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:263:16\n+  --> $DIR/numeric-cast.rs:248:16\n    |\n LL |     foo::<f64>(x_u16);\n    |                ^^^^^ expected f64, found u16\n-help: you can cast an `u16` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:265:16\n+  --> $DIR/numeric-cast.rs:250:16\n    |\n LL |     foo::<f64>(x_u8);\n    |                ^^^^ expected f64, found u8\n-help: you can cast an `u8` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:267:16\n+  --> $DIR/numeric-cast.rs:252:16\n    |\n LL |     foo::<f64>(x_isize);\n    |                ^^^^^^^ expected f64, found isize\n+help: you can convert an `isize` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+   |\n+LL |     foo::<f64>(x_isize as f64);\n+   |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:269:16\n+  --> $DIR/numeric-cast.rs:254:16\n    |\n LL |     foo::<f64>(x_i64);\n    |                ^^^^^ expected f64, found i64\n+help: you can convert an `i64` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+   |\n+LL |     foo::<f64>(x_i64 as f64);\n+   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:271:16\n+  --> $DIR/numeric-cast.rs:256:16\n    |\n LL |     foo::<f64>(x_i32);\n    |                ^^^^^ expected f64, found i32\n-help: you can cast an `i32` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:273:16\n+  --> $DIR/numeric-cast.rs:258:16\n    |\n LL |     foo::<f64>(x_i16);\n    |                ^^^^^ expected f64, found i16\n-help: you can cast an `i16` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:275:16\n+  --> $DIR/numeric-cast.rs:260:16\n    |\n LL |     foo::<f64>(x_i8);\n    |                ^^^^ expected f64, found i8\n-help: you can cast an `i8` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:278:16\n+  --> $DIR/numeric-cast.rs:263:16\n    |\n LL |     foo::<f64>(x_f32);\n-   |                ^^^^^ expected f64, found f32\n-help: you can cast an `f32` to `f64` in a lossless way\n-   |\n-LL |     foo::<f64>(x_f32.into());\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected f64, found f32\n+   |                help: you can convert an `f32` to `f64`: `x_f32.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:281:16\n+  --> $DIR/numeric-cast.rs:266:16\n    |\n LL |     foo::<f32>(x_usize);\n    |                ^^^^^^^ expected f32, found usize\n+help: you can cast an `usize to `f32`, producing the floating point representation of the integer,\n+   |                                              rounded if necessary\n+LL |     foo::<f32>(x_usize as f32);\n+   |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:283:16\n+  --> $DIR/numeric-cast.rs:268:16\n    |\n LL |     foo::<f32>(x_u64);\n    |                ^^^^^ expected f32, found u64\n+help: you can cast an `u64 to `f32`, producing the floating point representation of the integer,\n+   |                                              rounded if necessary\n+LL |     foo::<f32>(x_u64 as f32);\n+   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:285:16\n+  --> $DIR/numeric-cast.rs:270:16\n    |\n LL |     foo::<f32>(x_u32);\n    |                ^^^^^ expected f32, found u32\n+help: you can cast an `u32 to `f32`, producing the floating point representation of the integer,\n+   |                                              rounded if necessary\n+LL |     foo::<f32>(x_u32 as f32);\n+   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:287:16\n+  --> $DIR/numeric-cast.rs:272:16\n    |\n LL |     foo::<f32>(x_u16);\n    |                ^^^^^ expected f32, found u16\n-help: you can cast an `u16` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:289:16\n+  --> $DIR/numeric-cast.rs:274:16\n    |\n LL |     foo::<f32>(x_u8);\n    |                ^^^^ expected f32, found u8\n-help: you can cast an `u8` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:291:16\n+  --> $DIR/numeric-cast.rs:276:16\n    |\n LL |     foo::<f32>(x_isize);\n    |                ^^^^^^^ expected f32, found isize\n+help: you can convert an `isize` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+   |\n+LL |     foo::<f32>(x_isize as f32);\n+   |                ^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:293:16\n+  --> $DIR/numeric-cast.rs:278:16\n    |\n LL |     foo::<f32>(x_i64);\n    |                ^^^^^ expected f32, found i64\n+help: you can convert an `i64` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+   |\n+LL |     foo::<f32>(x_i64 as f32);\n+   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:295:16\n+  --> $DIR/numeric-cast.rs:280:16\n    |\n LL |     foo::<f32>(x_i32);\n    |                ^^^^^ expected f32, found i32\n+help: you can convert an `i32` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+   |\n+LL |     foo::<f32>(x_i32 as f32);\n+   |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:297:16\n+  --> $DIR/numeric-cast.rs:282:16\n    |\n LL |     foo::<f32>(x_i16);\n    |                ^^^^^ expected f32, found i16\n-help: you can cast an `i16` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:299:16\n+  --> $DIR/numeric-cast.rs:284:16\n    |\n LL |     foo::<f32>(x_i8);\n    |                ^^^^ expected f32, found i8\n-help: you can cast an `i8` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:301:16\n-   |\n-LL |     foo::<f32>(x_f64);\n-   |                ^^^^^ expected f32, found f64\n-\n-error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:305:16\n+  --> $DIR/numeric-cast.rs:289:16\n    |\n LL |     foo::<u32>(x_u8 as u16);\n-   |                ^^^^^^^^^^^ expected u32, found u16\n-help: you can cast an `u16` to `u32`, which will zero-extend the source value\n-   |\n-LL |     foo::<u32>((x_u8 as u16).into());\n-   |                ^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^\n+   |                |\n+   |                expected u32, found u16\n+   |                help: you can convert an `u16` to `u32`: `(x_u8 as u16).into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/numeric-cast.rs:307:16\n+  --> $DIR/numeric-cast.rs:291:16\n    |\n LL |     foo::<i32>(-x_i8);\n-   |                ^^^^^ expected i32, found i8\n-help: you can cast an `i8` to `i32`, which will sign-extend the source value\n-   |\n-LL |     foo::<i32>((-x_i8).into());\n-   |                ^^^^^^^^^^^^^^\n+   |                ^^^^^\n+   |                |\n+   |                expected i32, found i8\n+   |                help: you can convert an `i8` to `i32`: `(-x_i8).into()`\n \n-error: aborting due to 134 previous errors\n+error: aborting due to 113 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "53c5fe0f435f9ea31bc6239a72358fe8e69964c1", "filename": "src/test/ui/numeric/numeric-suffix.fixed", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.fixed?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -0,0 +1,298 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+\n+fn main() {\n+    foo::<usize>(42_usize);\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42usize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42usize);\n+    //~^ ERROR mismatched types\n+\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42isize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42isize);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42u64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42u64);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42i64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42i64);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42u32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42u32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42i32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42i32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42u16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42u16);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    foo::<i16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42i16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42i16);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42u8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42u8);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    foo::<i8>(42i8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42i8);\n+    //~^ ERROR mismatched types\n+\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_u32.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_u16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_u8.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_f64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_i32.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_i16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_i8.into());\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42.0_f64);\n+    foo::<f64>(42.0_f64);\n+    //~^ ERROR mismatched types\n+\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_u16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_u8.into());\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_i16.into());\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_i8.into());\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42.0_f32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42.0_f32);\n+\n+    foo::<u32>((42_u8 as u16).into());\n+    //~^ ERROR mismatched types\n+    foo::<i32>((-42_i8).into());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "ca38ed82220b24b228adb8405c897c23ae298717", "filename": "src/test/ui/numeric/numeric-suffix.rs", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.rs?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -0,0 +1,298 @@\n+// run-rustfix\n+\n+fn foo<N>(_x: N) {}\n+\n+fn main() {\n+    foo::<usize>(42_usize);\n+    foo::<usize>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<usize>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<isize>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_isize);\n+    foo::<isize>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<isize>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u64>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u64);\n+    foo::<u64>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<u64>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i64>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i64);\n+    foo::<i64>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<i64>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u32>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u32);\n+    foo::<u32>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<u32>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i32>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i32);\n+    foo::<i32>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u16>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_u16);\n+    foo::<u16>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<u16>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i16>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42_i16);\n+    foo::<i16>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<i16>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<u8>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_u8);\n+    foo::<u8>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<u8>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<i8>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42_i8);\n+    foo::<i8>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<i8>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<f64>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<f64>(42.0_f64);\n+    foo::<f64>(42.0_f32);\n+    //~^ ERROR mismatched types\n+\n+    foo::<f32>(42_usize);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_u64);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_u32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_u16);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_u8);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_isize);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_i64);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_i32);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_i16);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42_i8);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42.0_f64);\n+    //~^ ERROR mismatched types\n+    foo::<f32>(42.0_f32);\n+\n+    foo::<u32>(42_u8 as u16);\n+    //~^ ERROR mismatched types\n+    foo::<i32>(-42_i8);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "c88eeeb9f70b22a4b12e7fe6169e71bbc36b20a8", "filename": "src/test/ui/numeric/numeric-suffix.stderr", "status": "added", "additions": 1341, "deletions": 0, "changes": 1341, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -0,0 +1,1341 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:7:18\n+   |\n+LL |     foo::<usize>(42_u64);\n+   |                  ^^^^^^ expected usize, found u64\n+help: change the type of the numeric literal from `u64` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:9:18\n+   |\n+LL |     foo::<usize>(42_u32);\n+   |                  ^^^^^^ expected usize, found u32\n+help: change the type of the numeric literal from `u32` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:11:18\n+   |\n+LL |     foo::<usize>(42_u16);\n+   |                  ^^^^^^ expected usize, found u16\n+help: change the type of the numeric literal from `u16` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:13:18\n+   |\n+LL |     foo::<usize>(42_u8);\n+   |                  ^^^^^ expected usize, found u8\n+help: change the type of the numeric literal from `u8` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:15:18\n+   |\n+LL |     foo::<usize>(42_isize);\n+   |                  ^^^^^^^^ expected usize, found isize\n+help: change the type of the numeric literal from `isize` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:17:18\n+   |\n+LL |     foo::<usize>(42_i64);\n+   |                  ^^^^^^ expected usize, found i64\n+help: change the type of the numeric literal from `i64` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:19:18\n+   |\n+LL |     foo::<usize>(42_i32);\n+   |                  ^^^^^^ expected usize, found i32\n+help: change the type of the numeric literal from `i32` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:21:18\n+   |\n+LL |     foo::<usize>(42_i16);\n+   |                  ^^^^^^ expected usize, found i16\n+help: change the type of the numeric literal from `i16` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:23:18\n+   |\n+LL |     foo::<usize>(42_i8);\n+   |                  ^^^^^ expected usize, found i8\n+help: change the type of the numeric literal from `i8` to `usize`\n+   |\n+LL |     foo::<usize>(42_usize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:25:18\n+   |\n+LL |     foo::<usize>(42.0_f64);\n+   |                  ^^^^^^^^ expected usize, found f64\n+help: change the type of the numeric literal from `f64` to `usize`\n+   |\n+LL |     foo::<usize>(42usize);\n+   |                  ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:27:18\n+   |\n+LL |     foo::<usize>(42.0_f32);\n+   |                  ^^^^^^^^ expected usize, found f32\n+help: change the type of the numeric literal from `f32` to `usize`\n+   |\n+LL |     foo::<usize>(42usize);\n+   |                  ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:30:18\n+   |\n+LL |     foo::<isize>(42_usize);\n+   |                  ^^^^^^^^ expected isize, found usize\n+help: change the type of the numeric literal from `usize` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:32:18\n+   |\n+LL |     foo::<isize>(42_u64);\n+   |                  ^^^^^^ expected isize, found u64\n+help: change the type of the numeric literal from `u64` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:34:18\n+   |\n+LL |     foo::<isize>(42_u32);\n+   |                  ^^^^^^ expected isize, found u32\n+help: change the type of the numeric literal from `u32` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:36:18\n+   |\n+LL |     foo::<isize>(42_u16);\n+   |                  ^^^^^^ expected isize, found u16\n+help: change the type of the numeric literal from `u16` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:38:18\n+   |\n+LL |     foo::<isize>(42_u8);\n+   |                  ^^^^^ expected isize, found u8\n+help: change the type of the numeric literal from `u8` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:41:18\n+   |\n+LL |     foo::<isize>(42_i64);\n+   |                  ^^^^^^ expected isize, found i64\n+help: change the type of the numeric literal from `i64` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:43:18\n+   |\n+LL |     foo::<isize>(42_i32);\n+   |                  ^^^^^^ expected isize, found i32\n+help: change the type of the numeric literal from `i32` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:45:18\n+   |\n+LL |     foo::<isize>(42_i16);\n+   |                  ^^^^^^ expected isize, found i16\n+help: change the type of the numeric literal from `i16` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:47:18\n+   |\n+LL |     foo::<isize>(42_i8);\n+   |                  ^^^^^ expected isize, found i8\n+help: change the type of the numeric literal from `i8` to `isize`\n+   |\n+LL |     foo::<isize>(42_isize);\n+   |                  ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:49:18\n+   |\n+LL |     foo::<isize>(42.0_f64);\n+   |                  ^^^^^^^^ expected isize, found f64\n+help: change the type of the numeric literal from `f64` to `isize`\n+   |\n+LL |     foo::<isize>(42isize);\n+   |                  ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:51:18\n+   |\n+LL |     foo::<isize>(42.0_f32);\n+   |                  ^^^^^^^^ expected isize, found f32\n+help: change the type of the numeric literal from `f32` to `isize`\n+   |\n+LL |     foo::<isize>(42isize);\n+   |                  ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:54:16\n+   |\n+LL |     foo::<u64>(42_usize);\n+   |                ^^^^^^^^ expected u64, found usize\n+help: change the type of the numeric literal from `usize` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:57:16\n+   |\n+LL |     foo::<u64>(42_u32);\n+   |                ^^^^^^ expected u64, found u32\n+help: change the type of the numeric literal from `u32` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:59:16\n+   |\n+LL |     foo::<u64>(42_u16);\n+   |                ^^^^^^ expected u64, found u16\n+help: change the type of the numeric literal from `u16` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:61:16\n+   |\n+LL |     foo::<u64>(42_u8);\n+   |                ^^^^^ expected u64, found u8\n+help: change the type of the numeric literal from `u8` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:63:16\n+   |\n+LL |     foo::<u64>(42_isize);\n+   |                ^^^^^^^^ expected u64, found isize\n+help: change the type of the numeric literal from `isize` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:65:16\n+   |\n+LL |     foo::<u64>(42_i64);\n+   |                ^^^^^^ expected u64, found i64\n+help: change the type of the numeric literal from `i64` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:67:16\n+   |\n+LL |     foo::<u64>(42_i32);\n+   |                ^^^^^^ expected u64, found i32\n+help: change the type of the numeric literal from `i32` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:69:16\n+   |\n+LL |     foo::<u64>(42_i16);\n+   |                ^^^^^^ expected u64, found i16\n+help: change the type of the numeric literal from `i16` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:71:16\n+   |\n+LL |     foo::<u64>(42_i8);\n+   |                ^^^^^ expected u64, found i8\n+help: change the type of the numeric literal from `i8` to `u64`\n+   |\n+LL |     foo::<u64>(42_u64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:73:16\n+   |\n+LL |     foo::<u64>(42.0_f64);\n+   |                ^^^^^^^^ expected u64, found f64\n+help: change the type of the numeric literal from `f64` to `u64`\n+   |\n+LL |     foo::<u64>(42u64);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:75:16\n+   |\n+LL |     foo::<u64>(42.0_f32);\n+   |                ^^^^^^^^ expected u64, found f32\n+help: change the type of the numeric literal from `f32` to `u64`\n+   |\n+LL |     foo::<u64>(42u64);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:78:16\n+   |\n+LL |     foo::<i64>(42_usize);\n+   |                ^^^^^^^^ expected i64, found usize\n+help: change the type of the numeric literal from `usize` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:80:16\n+   |\n+LL |     foo::<i64>(42_u64);\n+   |                ^^^^^^ expected i64, found u64\n+help: change the type of the numeric literal from `u64` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:82:16\n+   |\n+LL |     foo::<i64>(42_u32);\n+   |                ^^^^^^ expected i64, found u32\n+help: change the type of the numeric literal from `u32` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:84:16\n+   |\n+LL |     foo::<i64>(42_u16);\n+   |                ^^^^^^ expected i64, found u16\n+help: change the type of the numeric literal from `u16` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:86:16\n+   |\n+LL |     foo::<i64>(42_u8);\n+   |                ^^^^^ expected i64, found u8\n+help: change the type of the numeric literal from `u8` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:88:16\n+   |\n+LL |     foo::<i64>(42_isize);\n+   |                ^^^^^^^^ expected i64, found isize\n+help: change the type of the numeric literal from `isize` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:91:16\n+   |\n+LL |     foo::<i64>(42_i32);\n+   |                ^^^^^^ expected i64, found i32\n+help: change the type of the numeric literal from `i32` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:93:16\n+   |\n+LL |     foo::<i64>(42_i16);\n+   |                ^^^^^^ expected i64, found i16\n+help: change the type of the numeric literal from `i16` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:95:16\n+   |\n+LL |     foo::<i64>(42_i8);\n+   |                ^^^^^ expected i64, found i8\n+help: change the type of the numeric literal from `i8` to `i64`\n+   |\n+LL |     foo::<i64>(42_i64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:97:16\n+   |\n+LL |     foo::<i64>(42.0_f64);\n+   |                ^^^^^^^^ expected i64, found f64\n+help: change the type of the numeric literal from `f64` to `i64`\n+   |\n+LL |     foo::<i64>(42i64);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:99:16\n+   |\n+LL |     foo::<i64>(42.0_f32);\n+   |                ^^^^^^^^ expected i64, found f32\n+help: change the type of the numeric literal from `f32` to `i64`\n+   |\n+LL |     foo::<i64>(42i64);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:102:16\n+   |\n+LL |     foo::<u32>(42_usize);\n+   |                ^^^^^^^^ expected u32, found usize\n+help: change the type of the numeric literal from `usize` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:104:16\n+   |\n+LL |     foo::<u32>(42_u64);\n+   |                ^^^^^^ expected u32, found u64\n+help: change the type of the numeric literal from `u64` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:107:16\n+   |\n+LL |     foo::<u32>(42_u16);\n+   |                ^^^^^^ expected u32, found u16\n+help: change the type of the numeric literal from `u16` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:109:16\n+   |\n+LL |     foo::<u32>(42_u8);\n+   |                ^^^^^ expected u32, found u8\n+help: change the type of the numeric literal from `u8` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:111:16\n+   |\n+LL |     foo::<u32>(42_isize);\n+   |                ^^^^^^^^ expected u32, found isize\n+help: change the type of the numeric literal from `isize` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:113:16\n+   |\n+LL |     foo::<u32>(42_i64);\n+   |                ^^^^^^ expected u32, found i64\n+help: change the type of the numeric literal from `i64` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:115:16\n+   |\n+LL |     foo::<u32>(42_i32);\n+   |                ^^^^^^ expected u32, found i32\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:117:16\n+   |\n+LL |     foo::<u32>(42_i16);\n+   |                ^^^^^^ expected u32, found i16\n+help: change the type of the numeric literal from `i16` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:119:16\n+   |\n+LL |     foo::<u32>(42_i8);\n+   |                ^^^^^ expected u32, found i8\n+help: change the type of the numeric literal from `i8` to `u32`\n+   |\n+LL |     foo::<u32>(42_u32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:121:16\n+   |\n+LL |     foo::<u32>(42.0_f64);\n+   |                ^^^^^^^^ expected u32, found f64\n+help: change the type of the numeric literal from `f64` to `u32`\n+   |\n+LL |     foo::<u32>(42u32);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:123:16\n+   |\n+LL |     foo::<u32>(42.0_f32);\n+   |                ^^^^^^^^ expected u32, found f32\n+help: change the type of the numeric literal from `f32` to `u32`\n+   |\n+LL |     foo::<u32>(42u32);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:126:16\n+   |\n+LL |     foo::<i32>(42_usize);\n+   |                ^^^^^^^^ expected i32, found usize\n+help: change the type of the numeric literal from `usize` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:128:16\n+   |\n+LL |     foo::<i32>(42_u64);\n+   |                ^^^^^^ expected i32, found u64\n+help: change the type of the numeric literal from `u64` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:130:16\n+   |\n+LL |     foo::<i32>(42_u32);\n+   |                ^^^^^^ expected i32, found u32\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:132:16\n+   |\n+LL |     foo::<i32>(42_u16);\n+   |                ^^^^^^ expected i32, found u16\n+help: change the type of the numeric literal from `u16` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:134:16\n+   |\n+LL |     foo::<i32>(42_u8);\n+   |                ^^^^^ expected i32, found u8\n+help: change the type of the numeric literal from `u8` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:136:16\n+   |\n+LL |     foo::<i32>(42_isize);\n+   |                ^^^^^^^^ expected i32, found isize\n+help: change the type of the numeric literal from `isize` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:138:16\n+   |\n+LL |     foo::<i32>(42_i64);\n+   |                ^^^^^^ expected i32, found i64\n+help: change the type of the numeric literal from `i64` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:141:16\n+   |\n+LL |     foo::<i32>(42_i16);\n+   |                ^^^^^^ expected i32, found i16\n+help: change the type of the numeric literal from `i16` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:143:16\n+   |\n+LL |     foo::<i32>(42_i8);\n+   |                ^^^^^ expected i32, found i8\n+help: change the type of the numeric literal from `i8` to `i32`\n+   |\n+LL |     foo::<i32>(42_i32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:145:16\n+   |\n+LL |     foo::<i32>(42.0_f64);\n+   |                ^^^^^^^^ expected i32, found f64\n+help: change the type of the numeric literal from `f64` to `i32`\n+   |\n+LL |     foo::<i32>(42i32);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:147:16\n+   |\n+LL |     foo::<i32>(42.0_f32);\n+   |                ^^^^^^^^ expected i32, found f32\n+help: change the type of the numeric literal from `f32` to `i32`\n+   |\n+LL |     foo::<i32>(42i32);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:150:16\n+   |\n+LL |     foo::<u16>(42_usize);\n+   |                ^^^^^^^^ expected u16, found usize\n+help: change the type of the numeric literal from `usize` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:152:16\n+   |\n+LL |     foo::<u16>(42_u64);\n+   |                ^^^^^^ expected u16, found u64\n+help: change the type of the numeric literal from `u64` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:154:16\n+   |\n+LL |     foo::<u16>(42_u32);\n+   |                ^^^^^^ expected u16, found u32\n+help: change the type of the numeric literal from `u32` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:157:16\n+   |\n+LL |     foo::<u16>(42_u8);\n+   |                ^^^^^ expected u16, found u8\n+help: change the type of the numeric literal from `u8` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:159:16\n+   |\n+LL |     foo::<u16>(42_isize);\n+   |                ^^^^^^^^ expected u16, found isize\n+help: change the type of the numeric literal from `isize` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:161:16\n+   |\n+LL |     foo::<u16>(42_i64);\n+   |                ^^^^^^ expected u16, found i64\n+help: change the type of the numeric literal from `i64` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:163:16\n+   |\n+LL |     foo::<u16>(42_i32);\n+   |                ^^^^^^ expected u16, found i32\n+help: change the type of the numeric literal from `i32` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:165:16\n+   |\n+LL |     foo::<u16>(42_i16);\n+   |                ^^^^^^ expected u16, found i16\n+help: change the type of the numeric literal from `i16` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:167:16\n+   |\n+LL |     foo::<u16>(42_i8);\n+   |                ^^^^^ expected u16, found i8\n+help: change the type of the numeric literal from `i8` to `u16`\n+   |\n+LL |     foo::<u16>(42_u16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:169:16\n+   |\n+LL |     foo::<u16>(42.0_f64);\n+   |                ^^^^^^^^ expected u16, found f64\n+help: change the type of the numeric literal from `f64` to `u16`\n+   |\n+LL |     foo::<u16>(42u16);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:171:16\n+   |\n+LL |     foo::<u16>(42.0_f32);\n+   |                ^^^^^^^^ expected u16, found f32\n+help: change the type of the numeric literal from `f32` to `u16`\n+   |\n+LL |     foo::<u16>(42u16);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:174:16\n+   |\n+LL |     foo::<i16>(42_usize);\n+   |                ^^^^^^^^ expected i16, found usize\n+help: change the type of the numeric literal from `usize` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:176:16\n+   |\n+LL |     foo::<i16>(42_u64);\n+   |                ^^^^^^ expected i16, found u64\n+help: change the type of the numeric literal from `u64` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:178:16\n+   |\n+LL |     foo::<i16>(42_u32);\n+   |                ^^^^^^ expected i16, found u32\n+help: change the type of the numeric literal from `u32` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:180:16\n+   |\n+LL |     foo::<i16>(42_u16);\n+   |                ^^^^^^ expected i16, found u16\n+help: change the type of the numeric literal from `u16` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:182:16\n+   |\n+LL |     foo::<i16>(42_u8);\n+   |                ^^^^^ expected i16, found u8\n+help: change the type of the numeric literal from `u8` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:184:16\n+   |\n+LL |     foo::<i16>(42_isize);\n+   |                ^^^^^^^^ expected i16, found isize\n+help: change the type of the numeric literal from `isize` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:186:16\n+   |\n+LL |     foo::<i16>(42_i64);\n+   |                ^^^^^^ expected i16, found i64\n+help: change the type of the numeric literal from `i64` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:188:16\n+   |\n+LL |     foo::<i16>(42_i32);\n+   |                ^^^^^^ expected i16, found i32\n+help: change the type of the numeric literal from `i32` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:191:16\n+   |\n+LL |     foo::<i16>(42_i8);\n+   |                ^^^^^ expected i16, found i8\n+help: change the type of the numeric literal from `i8` to `i16`\n+   |\n+LL |     foo::<i16>(42_i16);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:193:16\n+   |\n+LL |     foo::<i16>(42.0_f64);\n+   |                ^^^^^^^^ expected i16, found f64\n+help: change the type of the numeric literal from `f64` to `i16`\n+   |\n+LL |     foo::<i16>(42i16);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:195:16\n+   |\n+LL |     foo::<i16>(42.0_f32);\n+   |                ^^^^^^^^ expected i16, found f32\n+help: change the type of the numeric literal from `f32` to `i16`\n+   |\n+LL |     foo::<i16>(42i16);\n+   |                ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:198:15\n+   |\n+LL |     foo::<u8>(42_usize);\n+   |               ^^^^^^^^ expected u8, found usize\n+help: change the type of the numeric literal from `usize` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:200:15\n+   |\n+LL |     foo::<u8>(42_u64);\n+   |               ^^^^^^ expected u8, found u64\n+help: change the type of the numeric literal from `u64` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:202:15\n+   |\n+LL |     foo::<u8>(42_u32);\n+   |               ^^^^^^ expected u8, found u32\n+help: change the type of the numeric literal from `u32` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:204:15\n+   |\n+LL |     foo::<u8>(42_u16);\n+   |               ^^^^^^ expected u8, found u16\n+help: change the type of the numeric literal from `u16` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:207:15\n+   |\n+LL |     foo::<u8>(42_isize);\n+   |               ^^^^^^^^ expected u8, found isize\n+help: change the type of the numeric literal from `isize` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:209:15\n+   |\n+LL |     foo::<u8>(42_i64);\n+   |               ^^^^^^ expected u8, found i64\n+help: change the type of the numeric literal from `i64` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:211:15\n+   |\n+LL |     foo::<u8>(42_i32);\n+   |               ^^^^^^ expected u8, found i32\n+help: change the type of the numeric literal from `i32` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:213:15\n+   |\n+LL |     foo::<u8>(42_i16);\n+   |               ^^^^^^ expected u8, found i16\n+help: change the type of the numeric literal from `i16` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:215:15\n+   |\n+LL |     foo::<u8>(42_i8);\n+   |               ^^^^^ expected u8, found i8\n+help: change the type of the numeric literal from `i8` to `u8`\n+   |\n+LL |     foo::<u8>(42_u8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:217:15\n+   |\n+LL |     foo::<u8>(42.0_f64);\n+   |               ^^^^^^^^ expected u8, found f64\n+help: change the type of the numeric literal from `f64` to `u8`\n+   |\n+LL |     foo::<u8>(42u8);\n+   |               ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:219:15\n+   |\n+LL |     foo::<u8>(42.0_f32);\n+   |               ^^^^^^^^ expected u8, found f32\n+help: change the type of the numeric literal from `f32` to `u8`\n+   |\n+LL |     foo::<u8>(42u8);\n+   |               ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:222:15\n+   |\n+LL |     foo::<i8>(42_usize);\n+   |               ^^^^^^^^ expected i8, found usize\n+help: change the type of the numeric literal from `usize` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:224:15\n+   |\n+LL |     foo::<i8>(42_u64);\n+   |               ^^^^^^ expected i8, found u64\n+help: change the type of the numeric literal from `u64` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:226:15\n+   |\n+LL |     foo::<i8>(42_u32);\n+   |               ^^^^^^ expected i8, found u32\n+help: change the type of the numeric literal from `u32` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:228:15\n+   |\n+LL |     foo::<i8>(42_u16);\n+   |               ^^^^^^ expected i8, found u16\n+help: change the type of the numeric literal from `u16` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:230:15\n+   |\n+LL |     foo::<i8>(42_u8);\n+   |               ^^^^^ expected i8, found u8\n+help: change the type of the numeric literal from `u8` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:232:15\n+   |\n+LL |     foo::<i8>(42_isize);\n+   |               ^^^^^^^^ expected i8, found isize\n+help: change the type of the numeric literal from `isize` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:234:15\n+   |\n+LL |     foo::<i8>(42_i64);\n+   |               ^^^^^^ expected i8, found i64\n+help: change the type of the numeric literal from `i64` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:236:15\n+   |\n+LL |     foo::<i8>(42_i32);\n+   |               ^^^^^^ expected i8, found i32\n+help: change the type of the numeric literal from `i32` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:238:15\n+   |\n+LL |     foo::<i8>(42_i16);\n+   |               ^^^^^^ expected i8, found i16\n+help: change the type of the numeric literal from `i16` to `i8`\n+   |\n+LL |     foo::<i8>(42_i8);\n+   |               ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:241:15\n+   |\n+LL |     foo::<i8>(42.0_f64);\n+   |               ^^^^^^^^ expected i8, found f64\n+help: change the type of the numeric literal from `f64` to `i8`\n+   |\n+LL |     foo::<i8>(42i8);\n+   |               ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:243:15\n+   |\n+LL |     foo::<i8>(42.0_f32);\n+   |               ^^^^^^^^ expected i8, found f32\n+help: change the type of the numeric literal from `f32` to `i8`\n+   |\n+LL |     foo::<i8>(42i8);\n+   |               ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:246:16\n+   |\n+LL |     foo::<f64>(42_usize);\n+   |                ^^^^^^^^ expected f64, found usize\n+help: change the type of the numeric literal from `usize` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:248:16\n+   |\n+LL |     foo::<f64>(42_u64);\n+   |                ^^^^^^ expected f64, found u64\n+help: change the type of the numeric literal from `u64` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:250:16\n+   |\n+LL |     foo::<f64>(42_u32);\n+   |                ^^^^^^ expected f64, found u32\n+help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_u32.into());\n+   |                ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:252:16\n+   |\n+LL |     foo::<f64>(42_u16);\n+   |                ^^^^^^ expected f64, found u16\n+help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_u16.into());\n+   |                ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:254:16\n+   |\n+LL |     foo::<f64>(42_u8);\n+   |                ^^^^^ expected f64, found u8\n+help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_u8.into());\n+   |                ^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:256:16\n+   |\n+LL |     foo::<f64>(42_isize);\n+   |                ^^^^^^^^ expected f64, found isize\n+help: change the type of the numeric literal from `isize` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:258:16\n+   |\n+LL |     foo::<f64>(42_i64);\n+   |                ^^^^^^ expected f64, found i64\n+help: change the type of the numeric literal from `i64` to `f64`\n+   |\n+LL |     foo::<f64>(42_f64);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:260:16\n+   |\n+LL |     foo::<f64>(42_i32);\n+   |                ^^^^^^ expected f64, found i32\n+help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_i32.into());\n+   |                ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:262:16\n+   |\n+LL |     foo::<f64>(42_i16);\n+   |                ^^^^^^ expected f64, found i16\n+help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_i16.into());\n+   |                ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:264:16\n+   |\n+LL |     foo::<f64>(42_i8);\n+   |                ^^^^^ expected f64, found i8\n+help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f64>(42_i8.into());\n+   |                ^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:267:16\n+   |\n+LL |     foo::<f64>(42.0_f32);\n+   |                ^^^^^^^^ expected f64, found f32\n+help: change the type of the numeric literal from `f32` to `f64`\n+   |\n+LL |     foo::<f64>(42.0_f64);\n+   |                ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:270:16\n+   |\n+LL |     foo::<f32>(42_usize);\n+   |                ^^^^^^^^ expected f32, found usize\n+help: change the type of the numeric literal from `usize` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:272:16\n+   |\n+LL |     foo::<f32>(42_u64);\n+   |                ^^^^^^ expected f32, found u64\n+help: change the type of the numeric literal from `u64` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:274:16\n+   |\n+LL |     foo::<f32>(42_u32);\n+   |                ^^^^^^ expected f32, found u32\n+help: change the type of the numeric literal from `u32` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:276:16\n+   |\n+LL |     foo::<f32>(42_u16);\n+   |                ^^^^^^ expected f32, found u16\n+help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_u16.into());\n+   |                ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:278:16\n+   |\n+LL |     foo::<f32>(42_u8);\n+   |                ^^^^^ expected f32, found u8\n+help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_u8.into());\n+   |                ^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:280:16\n+   |\n+LL |     foo::<f32>(42_isize);\n+   |                ^^^^^^^^ expected f32, found isize\n+help: change the type of the numeric literal from `isize` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:282:16\n+   |\n+LL |     foo::<f32>(42_i64);\n+   |                ^^^^^^ expected f32, found i64\n+help: change the type of the numeric literal from `i64` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:284:16\n+   |\n+LL |     foo::<f32>(42_i32);\n+   |                ^^^^^^ expected f32, found i32\n+help: change the type of the numeric literal from `i32` to `f32`\n+   |\n+LL |     foo::<f32>(42_f32);\n+   |                ^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:286:16\n+   |\n+LL |     foo::<f32>(42_i16);\n+   |                ^^^^^^ expected f32, found i16\n+help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_i16.into());\n+   |                ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:288:16\n+   |\n+LL |     foo::<f32>(42_i8);\n+   |                ^^^^^ expected f32, found i8\n+help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n+   |\n+LL |     foo::<f32>(42_i8.into());\n+   |                ^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:290:16\n+   |\n+LL |     foo::<f32>(42.0_f64);\n+   |                ^^^^^^^^ expected f32, found f64\n+help: change the type of the numeric literal from `f64` to `f32`\n+   |\n+LL |     foo::<f32>(42.0_f32);\n+   |                ^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:294:16\n+   |\n+LL |     foo::<u32>(42_u8 as u16);\n+   |                ^^^^^^^^^^^^\n+   |                |\n+   |                expected u32, found u16\n+   |                help: you can convert an `u16` to `u32`: `(42_u8 as u16).into()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-suffix.rs:296:16\n+   |\n+LL |     foo::<i32>(-42_i8);\n+   |                ^^^^^^\n+   |                |\n+   |                expected i32, found i8\n+   |                help: you can convert an `i8` to `i32`: `(-42_i8).into()`\n+\n+error: aborting due to 134 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "dc4b3ce370cb168d19734970aa10a3b9030057a6", "filename": "src/test/ui/pptypedef.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fpptypedef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fpptypedef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpptypedef.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,12 +3,20 @@ error[E0308]: mismatched types\n    |\n LL |     let_in(3u32, |i| { assert!(i == 3i32); });\n    |                                     ^^^^ expected u32, found i32\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |     let_in(3u32, |i| { assert!(i == 3u32); });\n+   |                                     ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/pptypedef.rs:8:37\n    |\n LL |     let_in(3i32, |i| { assert!(i == 3u32); });\n    |                                     ^^^^ expected i32, found u32\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     let_in(3i32, |i| { assert!(i == 3i32); });\n+   |                                     ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6772aa1c38d2c7bfe4144a24152c49d144008e6b", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -42,12 +42,20 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected usize, found isize\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let f = [0; (-4_isize).try_into().unwrap()];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:28:23\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected usize, found isize\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let f = [0_usize; (-1_isize).try_into().unwrap()];\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:34:17"}, {"sha": "97523fe82cd4ed4269af260b02f4aad82e3e2fe6", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -27,6 +27,10 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = 22_i64 >> 1_i32;\n    |                  ^^^^^^^^^^^^^^^ expected i32, found i64\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+   |\n+LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "62389ba6120834901e2cc2ef162b3294eecb87fd", "filename": "src/test/ui/suggestions/recover-invalid-float.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.fixed?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _: f32 = 0.3;\n+    //~^ ERROR float literals must have an integer part\n+    let _: f32 = 0.42f32;\n+    //~^ ERROR float literals must have an integer part\n+    let _: f64 = 0.5f64;\n+    //~^ ERROR float literals must have an integer part\n+}"}, {"sha": "a5a7efe5e76e8e9d3ddfd776f2dd2e20f58d0d5d", "filename": "src/test/ui/suggestions/recover-invalid-float.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.rs?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -1,11 +1,10 @@\n+// run-rustfix\n+\n fn main() {\n-    let _: usize = .3;\n+    let _: f32 = .3;\n     //~^ ERROR float literals must have an integer part\n-    //~| ERROR mismatched types\n-    let _: usize = .42f32;\n+    let _: f32 = .42f32;\n     //~^ ERROR float literals must have an integer part\n-    //~| ERROR mismatched types\n-    let _: usize = .5f64;\n+    let _: f64 = .5f64;\n     //~^ ERROR float literals must have an integer part\n-    //~| ERROR mismatched types\n }"}, {"sha": "dd24746eab80f435dfdfb12f93225ea8a3fa9f68", "filename": "src/test/ui/suggestions/recover-invalid-float.stderr", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -1,42 +1,20 @@\n error: float literals must have an integer part\n-  --> $DIR/recover-invalid-float.rs:2:20\n+  --> $DIR/recover-invalid-float.rs:4:18\n    |\n-LL |     let _: usize = .3;\n-   |                    ^^ help: must have an integer part: `0.3`\n+LL |     let _: f32 = .3;\n+   |                  ^^ help: must have an integer part: `0.3`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-invalid-float.rs:5:20\n+  --> $DIR/recover-invalid-float.rs:6:18\n    |\n-LL |     let _: usize = .42f32;\n-   |                    ^^^^^^ help: must have an integer part: `0.42f32`\n+LL |     let _: f32 = .42f32;\n+   |                  ^^^^^^ help: must have an integer part: `0.42f32`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-invalid-float.rs:8:20\n+  --> $DIR/recover-invalid-float.rs:8:18\n    |\n-LL |     let _: usize = .5f64;\n-   |                    ^^^^^ help: must have an integer part: `0.5f64`\n+LL |     let _: f64 = .5f64;\n+   |                  ^^^^^ help: must have an integer part: `0.5f64`\n \n-error[E0308]: mismatched types\n-  --> $DIR/recover-invalid-float.rs:2:20\n-   |\n-LL |     let _: usize = .3;\n-   |                    ^^ expected usize, found floating-point number\n-   |\n-   = note: expected type `usize`\n-              found type `{float}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/recover-invalid-float.rs:5:20\n-   |\n-LL |     let _: usize = .42f32;\n-   |                    ^^^^^^ expected usize, found f32\n-\n-error[E0308]: mismatched types\n-  --> $DIR/recover-invalid-float.rs:8:20\n-   |\n-LL |     let _: usize = .5f64;\n-   |                    ^^^^^ expected usize, found f64\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "a25c644680ee0bf40206cad391e9f3a7441bacb0", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand-2.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -2,21 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:19\n    |\n LL |     let _ = RGB { r, g, c };\n-   |                   ^ expected f64, found f32\n-help: you can cast an `f32` to `f64` in a lossless way\n-   |\n-LL |     let _ = RGB { r: r.into(), g, c };\n-   |                   ^^^^^^^^^^^\n+   |                   ^\n+   |                   |\n+   |                   expected f64, found f32\n+   |                   help: you can convert an `f32` to `f64`: `r: r.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:22\n    |\n LL |     let _ = RGB { r, g, c };\n-   |                      ^ expected f64, found f32\n-help: you can cast an `f32` to `f64` in a lossless way\n-   |\n-LL |     let _ = RGB { r, g: g.into(), c };\n-   |                      ^^^^^^^^^^^\n+   |                      ^\n+   |                      |\n+   |                      expected f64, found f32\n+   |                      help: you can convert an `f32` to `f64`: `g: g.into()`\n \n error[E0560]: struct `RGB` has no field named `c`\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:25"}, {"sha": "ed8013d5997e43c0c12cb9d885fdefb9455ebbc1", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.stderr", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -2,31 +2,28 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:19\n    |\n LL |     let _ = RGB { r, g, b };\n-   |                   ^ expected f64, found f32\n-help: you can cast an `f32` to `f64` in a lossless way\n-   |\n-LL |     let _ = RGB { r: r.into(), g, b };\n-   |                   ^^^^^^^^^^^\n+   |                   ^\n+   |                   |\n+   |                   expected f64, found f32\n+   |                   help: you can convert an `f32` to `f64`: `r: r.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:22\n    |\n LL |     let _ = RGB { r, g, b };\n-   |                      ^ expected f64, found f32\n-help: you can cast an `f32` to `f64` in a lossless way\n-   |\n-LL |     let _ = RGB { r, g: g.into(), b };\n-   |                      ^^^^^^^^^^^\n+   |                      ^\n+   |                      |\n+   |                      expected f64, found f32\n+   |                      help: you can convert an `f32` to `f64`: `g: g.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:25\n    |\n LL |     let _ = RGB { r, g, b };\n-   |                         ^ expected f64, found f32\n-help: you can cast an `f32` to `f64` in a lossless way\n-   |\n-LL |     let _ = RGB { r, g, b: b.into() };\n-   |                         ^^^^^^^^^^^\n+   |                         ^\n+   |                         |\n+   |                         expected f64, found f32\n+   |                         help: you can convert an `f32` to `f64`: `b: b.into()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9e6c38ced0d269fc383f88579b78152a9c0738de", "filename": "src/test/ui/traits/traits-multidispatch-bad.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-bad.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,6 +3,10 @@ error[E0308]: mismatched types\n    |\n LL |     test(22i32, 44i32);\n    |                 ^^^^^ expected u32, found i32\n+help: change the type of the numeric literal from `i32` to `u32`\n+   |\n+LL |     test(22i32, 44u32);\n+   |                 ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9acd63c2c25f14fe477fc30bb0aa9757f35cacfa", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -6,6 +6,10 @@ LL | fn global_bound_is_hidden() -> u8\n ...\n LL |     B::get_x()\n    |     ^^^^^^^^^^ expected u8, found i32\n+help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n+   |\n+LL |     B::get_x().try_into().unwrap()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f51f2defd475925766abc6fdbc226b426e9cfc4d", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -2,23 +2,30 @@ error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:9:18\n    |\n LL |     identity_u16(x);\n-   |                  ^ expected u16, found u8\n-help: you can cast an `u8` to `u16`, which will zero-extend the source value\n-   |\n-LL |     identity_u16(x.into());\n-   |                  ^^^^^^^^\n+   |                  ^\n+   |                  |\n+   |                  expected u16, found u8\n+   |                  help: you can convert an `u8` to `u16`: `x.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:12:18\n    |\n LL |     identity_u16(y);\n    |                  ^ expected u16, found i32\n+help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     identity_u16(y.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:21:18\n    |\n LL |     identity_u16(a);\n    |                  ^ expected u16, found isize\n+help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n+   |\n+LL |     identity_u16(a.try_into().unwrap());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f749ed3f9d8652c665bc364fa87bb8f8e0e70d0f", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -11,12 +11,20 @@ error[E0308]: mismatched types\n    |\n LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |                            ^^^^ expected i32, found u32\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     <i32 as Add<i32>>::add(1i32, 2);\n+   |                            ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/ufcs-qpath-self-mismatch.rs:8:31\n    |\n LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |                               ^^^^ expected i32, found u32\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     <i32 as Add<i32>>::add(1, 2i32);\n+   |                               ^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "758762fd5fde342ec44ab4e4a23dd6f224fb039e", "filename": "src/test/ui/unboxed-closures/unboxed-closures-type-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b1297baf7b6e9cd4cac83748c483a2f100a59e1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr?ref=4b1297baf7b6e9cd4cac83748c483a2f100a59e1", "patch": "@@ -3,6 +3,10 @@ error[E0308]: mismatched types\n    |\n LL |     let z = f(1_usize, 2);\n    |               ^^^^^^^ expected isize, found usize\n+help: change the type of the numeric literal from `usize` to `isize`\n+   |\n+LL |     let z = f(1_isize, 2);\n+   |               ^^^^^^^\n \n error: aborting due to previous error\n "}]}