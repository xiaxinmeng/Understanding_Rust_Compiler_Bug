{"sha": "a5e3de34376c198437269ff9636a8ca77c204688", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTNkZTM0Mzc2YzE5ODQzNzI2OWZmOTYzNmE4Y2E3N2MyMDQ2ODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-12T21:20:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-12T21:20:06Z"}, "message": "Auto merge of #64360 - varkor:foreign-items-diagnostic-const-generics, r=cramertj\n\nCorrect the polymorphic extern fn error for const parameters\n\nBefore, any polymorphism on extern functions was assumed to be type polymorphism.", "tree": {"sha": "88b57c4d7ee61c7f1e184f9adb9fea43f1ce217d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b57c4d7ee61c7f1e184f9adb9fea43f1ce217d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e3de34376c198437269ff9636a8ca77c204688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e3de34376c198437269ff9636a8ca77c204688", "html_url": "https://github.com/rust-lang/rust/commit/a5e3de34376c198437269ff9636a8ca77c204688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e3de34376c198437269ff9636a8ca77c204688/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb48d6bdee6c655d71f26594d47d232adf3e4e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb48d6bdee6c655d71f26594d47d232adf3e4e93", "html_url": "https://github.com/rust-lang/rust/commit/eb48d6bdee6c655d71f26594d47d232adf3e4e93"}, {"sha": "ef62e050624fabc57f17dd6744ff29f79b39e8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef62e050624fabc57f17dd6744ff29f79b39e8cd", "html_url": "https://github.com/rust-lang/rust/commit/ef62e050624fabc57f17dd6744ff29f79b39e8cd"}], "stats": {"total": 80, "additions": 65, "deletions": 15}, "files": [{"sha": "02e7d97ccdf7b91796d780e00328ac160985f213", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a5e3de34376c198437269ff9636a8ca77c204688/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e3de34376c198437269ff9636a8ca77c204688/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a5e3de34376c198437269ff9636a8ca77c204688", "patch": "@@ -1511,21 +1511,34 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n             } else {\n                 for item in &m.items {\n                     let generics = tcx.generics_of(tcx.hir().local_def_id(item.hir_id));\n-                    if generics.params.len() - generics.own_counts().lifetimes != 0 {\n-                        let mut err = struct_span_err!(\n+                    let own_counts = generics.own_counts();\n+                    if generics.params.len() - own_counts.lifetimes != 0 {\n+                        let (kinds, kinds_pl, egs) = match (own_counts.types, own_counts.consts) {\n+                            (_, 0) => (\"type\", \"types\", Some(\"u32\")),\n+                            // We don't specify an example value, because we can't generate\n+                            // a valid value for any type.\n+                            (0, _) => (\"const\", \"consts\", None),\n+                            _ => (\"type or const\", \"types or consts\", None),\n+                        };\n+                        struct_span_err!(\n                             tcx.sess,\n                             item.span,\n                             E0044,\n-                            \"foreign items may not have type parameters\"\n-                        );\n-                        err.span_label(item.span, \"can't have type parameters\");\n-                        // FIXME: once we start storing spans for type arguments, turn this into a\n-                        // suggestion.\n-                        err.help(\n-                            \"use specialization instead of type parameters by replacing them \\\n-                             with concrete types like `u32`\",\n-                        );\n-                        err.emit();\n+                            \"foreign items may not have {} parameters\",\n+                            kinds,\n+                        ).span_label(\n+                            item.span,\n+                            &format!(\"can't have {} parameters\", kinds),\n+                        ).help(\n+                            // FIXME: once we start storing spans for type arguments, turn this\n+                            // into a suggestion.\n+                            &format!(\n+                                \"replace the {} parameters with concrete {}{}\",\n+                                kinds,\n+                                kinds_pl,\n+                                egs.map(|egs| format!(\" like `{}`\", egs)).unwrap_or_default(),\n+                            ),\n+                        ).emit();\n                     }\n \n                     if let hir::ForeignItemKind::Fn(ref fn_decl, _, _) = item.node {"}, {"sha": "4673c8606c3931ce883a37b8ab933fbfa1029aec", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs?ref=a5e3de34376c198437269ff9636a8ca77c204688", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+extern \"C\" {\n+    fn foo<const X: usize>(); //~ ERROR foreign items may not have const parameters\n+\n+    fn bar<T, const X: usize>(_: T); //~ ERROR foreign items may not have type or const parameters\n+}\n+\n+fn main() {}"}, {"sha": "999feed2d3b20592d1f06e879d741d2c5de2214b", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr?ref=a5e3de34376c198437269ff9636a8ca77c204688", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/foreign-item-const-parameter.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0044]: foreign items may not have const parameters\n+  --> $DIR/foreign-item-const-parameter.rs:5:5\n+   |\n+LL |     fn foo<const X: usize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n+   |\n+   = help: replace the const parameters with concrete consts\n+\n+error[E0044]: foreign items may not have type or const parameters\n+  --> $DIR/foreign-item-const-parameter.rs:7:5\n+   |\n+LL |     fn bar<T, const X: usize>(_: T);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters\n+   |\n+   = help: replace the type or const parameters with concrete types or consts\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0044`."}, {"sha": "9eee9c31d3c38440154cfdccd97a1adb5aa179da", "filename": "src/test/ui/error-codes/E0044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs?ref=a5e3de34376c198437269ff9636a8ca77c204688", "patch": "@@ -1,7 +1,7 @@\n extern {\n     fn sqrt<T>(f: T) -> T;\n     //~^ ERROR foreign items may not have type parameters [E0044]\n-    //~| HELP use specialization instead of type parameters by replacing them with concrete types\n+    //~| HELP replace the type parameters with concrete types\n     //~| NOTE can't have type parameters\n }\n "}, {"sha": "e889c167b98d296d32eabf731cb2cc3491aae2d3", "filename": "src/test/ui/error-codes/E0044.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr?ref=a5e3de34376c198437269ff9636a8ca77c204688", "patch": "@@ -4,7 +4,7 @@ error[E0044]: foreign items may not have type parameters\n LL |     fn sqrt<T>(f: T) -> T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ can't have type parameters\n    |\n-   = help: use specialization instead of type parameters by replacing them with concrete types like `u32`\n+   = help: replace the type parameters with concrete types like `u32`\n \n error: aborting due to previous error\n "}, {"sha": "c90215b612d4c834c192a1d8b3924f68ccec0ddb", "filename": "src/test/ui/generic/generic-extern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5e3de34376c198437269ff9636a8ca77c204688/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-extern.stderr?ref=a5e3de34376c198437269ff9636a8ca77c204688", "patch": "@@ -4,7 +4,7 @@ error[E0044]: foreign items may not have type parameters\n LL |     fn foo<T>();\n    |     ^^^^^^^^^^^^ can't have type parameters\n    |\n-   = help: use specialization instead of type parameters by replacing them with concrete types like `u32`\n+   = help: replace the type parameters with concrete types like `u32`\n \n error: aborting due to previous error\n "}]}