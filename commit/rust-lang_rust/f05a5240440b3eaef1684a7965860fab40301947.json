{"sha": "f05a5240440b3eaef1684a7965860fab40301947", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWE1MjQwNDQwYjNlYWVmMTY4NGE3OTY1ODYwZmFiNDAzMDE5NDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T20:24:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T20:24:50Z"}, "message": "Auto merge of #69274 - LeSeulArtichaut:target-feature-11, r=hanna-kruppe\n\nImplement RFC 2396: `#[target_feature]` 1.1\n\nTracking issue: #69098\n\nr? @nikomatsakis\ncc @gnzlbg @joshtriplett", "tree": {"sha": "1f088b9917a0244c164c8a7399e41bc9977bf055", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f088b9917a0244c164c8a7399e41bc9977bf055"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05a5240440b3eaef1684a7965860fab40301947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05a5240440b3eaef1684a7965860fab40301947", "html_url": "https://github.com/rust-lang/rust/commit/f05a5240440b3eaef1684a7965860fab40301947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05a5240440b3eaef1684a7965860fab40301947/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d20113d0f590858c8fea34ebcb1c54c93ae79714", "url": "https://api.github.com/repos/rust-lang/rust/commits/d20113d0f590858c8fea34ebcb1c54c93ae79714", "html_url": "https://github.com/rust-lang/rust/commit/d20113d0f590858c8fea34ebcb1c54c93ae79714"}, {"sha": "8d9f73a6902064e1a5508af98d77aed2ae055944", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9f73a6902064e1a5508af98d77aed2ae055944", "html_url": "https://github.com/rust-lang/rust/commit/8d9f73a6902064e1a5508af98d77aed2ae055944"}], "stats": {"total": 415, "additions": 392, "deletions": 23}, "files": [{"sha": "cec9e0ce3af71c7a9048d7646a5d9525443968c4", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -559,6 +559,9 @@ declare_features! (\n     /// Allow negative trait implementations.\n     (active, negative_impls, \"1.44.0\", Some(68318), None),\n \n+    /// Allows the use of `#[target_feature]` on safe functions.\n+    (active, target_feature_11, \"1.45.0\", Some(69098), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "78a94b62d4722979f3a51569149986f527a77531", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -3,11 +3,13 @@ use rustc_ast::ast;\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n use std::fmt;\n+use std::ops::Deref;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n pub struct ExpectedFound<T> {\n@@ -58,6 +60,8 @@ pub enum TypeError<'tcx> {\n     ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n \n     IntrinsicCast,\n+    /// Safe `#[target_feature]` functions are not assignable to safe function pointers.\n+    TargetFeatureCast(DefId),\n }\n \n pub enum UnconstrainedNumeric {\n@@ -183,6 +187,10 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 write!(f, \"expected `{}`, found `{}`\", values.expected, values.found)\n             }\n             IntrinsicCast => write!(f, \"cannot coerce intrinsics to function pointers\"),\n+            TargetFeatureCast(_) => write!(\n+                f,\n+                \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n+            ),\n             ObjectUnsafeCoercion(_) => write!(f, \"coercion to object-unsafe trait object\"),\n         }\n     }\n@@ -193,7 +201,8 @@ impl<'tcx> TypeError<'tcx> {\n         use self::TypeError::*;\n         match self {\n             CyclicTy(_) | UnsafetyMismatch(_) | Mismatch | AbiMismatch(_) | FixedArraySize(_)\n-            | Sorts(_) | IntMismatch(_) | FloatMismatch(_) | VariadicMismatch(_) => false,\n+            | Sorts(_) | IntMismatch(_) | FloatMismatch(_) | VariadicMismatch(_)\n+            | TargetFeatureCast(_) => false,\n \n             Mutability\n             | TupleSize(_)\n@@ -489,6 +498,18 @@ impl Trait for X {\n                     );\n                 }\n             }\n+            TargetFeatureCast(def_id) => {\n+                let attrs = self.get_attrs(*def_id);\n+                let target_spans = attrs\n+                    .deref()\n+                    .iter()\n+                    .filter(|attr| attr.has_name(sym::target_feature))\n+                    .map(|attr| attr.span);\n+                db.note(\n+                    \"functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\"\n+                );\n+                db.span_labels(target_spans, \"`#[target_feature]` added here\");\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "c8406a024ecffb39dd7f738d3212bbe8cb7225d8", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -645,6 +645,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n             ConstMismatch(ref x) => return tcx.lift(x).map(ConstMismatch),\n             IntrinsicCast => IntrinsicCast,\n+            TargetFeatureCast(ref x) => TargetFeatureCast(*x),\n             ObjectUnsafeCoercion(ref x) => return tcx.lift(x).map(ObjectUnsafeCoercion),\n         })\n     }"}, {"sha": "a015dc603520bae3eb7dfffe7d799e807eb5b837", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -19,6 +19,7 @@ use crate::util;\n \n pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n+    body_did: LocalDefId,\n     const_context: bool,\n     min_const_fn: bool,\n     violations: Vec<UnsafetyViolation>,\n@@ -35,6 +36,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         const_context: bool,\n         min_const_fn: bool,\n         body: &'a Body<'tcx>,\n+        body_did: LocalDefId,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n@@ -44,6 +46,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         }\n         Self {\n             body,\n+            body_did,\n             const_context,\n             min_const_fn,\n             violations: vec![],\n@@ -87,6 +90,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         UnsafetyViolationKind::GeneralAndConstFn,\n                     )\n                 }\n+\n+                if let ty::FnDef(func_id, _) = func_ty.kind {\n+                    self.check_target_features(func_id);\n+                }\n             }\n         }\n         self.super_terminator(terminator, location);\n@@ -436,6 +443,22 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// Checks whether calling `func_did` needs an `unsafe` context or not, i.e. whether\n+    /// the called function has target features the calling function hasn't.\n+    fn check_target_features(&mut self, func_did: DefId) {\n+        let callee_features = &self.tcx.codegen_fn_attrs(func_did).target_features;\n+        let self_features = &self.tcx.codegen_fn_attrs(self.body_did).target_features;\n+\n+        // Is `callee_features` a subset of `calling_features`?\n+        if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n+            self.require_unsafe(\n+                \"call to function with `#[target_feature]`\",\n+                \"can only be called if the required target features are available\",\n+                UnsafetyViolationKind::GeneralAndConstFn,\n+            )\n+        }\n+    }\n }\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n@@ -502,7 +525,8 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: LocalDefId) -> UnsafetyCheckRe\n         }\n         hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n-    let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body, tcx, param_env);\n+    let mut checker =\n+        UnsafetyChecker::new(const_context, min_const_fn, body, def_id, tcx, param_env);\n     checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "74d73404acd8ebc7f2fb5ba566d697c37ba2e603", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -722,6 +722,7 @@ symbols! {\n         suggestion,\n         sync_trait,\n         target_feature,\n+        target_feature_11,\n         target_has_atomic,\n         target_has_atomic_load_store,\n         target_thread_local,"}, {"sha": "bf36b2cdffe2b499630d5a8a44576800e725f89b", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -691,12 +691,22 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         debug!(\"coerce_from_fn_item(a={:?}, b={:?})\", a, b);\n \n         match b.kind {\n-            ty::FnPtr(_) => {\n+            ty::FnPtr(b_sig) => {\n                 let a_sig = a.fn_sig(self.tcx);\n                 // Intrinsics are not coercible to function pointers\n                 if a_sig.abi() == Abi::RustIntrinsic || a_sig.abi() == Abi::PlatformIntrinsic {\n                     return Err(TypeError::IntrinsicCast);\n                 }\n+\n+                // Safe `#[target_feature]` functions are not assignable to safe fn pointers (RFC 2396).\n+                if let ty::FnDef(def_id, _) = a.kind {\n+                    if b_sig.unsafety() == hir::Unsafety::Normal\n+                        && !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+                    {\n+                        return Err(TypeError::TargetFeatureCast(def_id));\n+                    }\n+                }\n+\n                 let InferOk { value: a_sig, mut obligations } =\n                     self.normalize_associated_types_in_as_infer_ok(self.cause.span, &a_sig);\n "}, {"sha": "b6ad763ec395d69f698b71b37baea9f9f3a57f97", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node, Unsafety};\n+use rustc_hir::{GenericParamKind, Node};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -2404,13 +2404,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 codegen_fn_attrs.export_name = Some(s);\n             }\n         } else if attr.check_name(sym::target_feature) {\n-            if tcx.is_closure(id) || tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n-                let msg = \"`#[target_feature(..)]` can only be applied to `unsafe` functions\";\n-                tcx.sess\n-                    .struct_span_err(attr.span, msg)\n-                    .span_label(attr.span, \"can only be applied to `unsafe` functions\")\n-                    .span_label(tcx.def_span(id), \"not an `unsafe` function\")\n-                    .emit();\n+            if !tcx.features().target_feature_11 {\n+                check_target_feature_safe_fn(tcx, id, attr.span);\n+            } else if let Some(local_id) = id.as_local() {\n+                if tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+                    check_target_feature_trait_unsafe(tcx, local_id, attr.span);\n+                }\n             }\n             from_target_feature(tcx, id, attr, &whitelist, &mut codegen_fn_attrs.target_features);\n         } else if attr.check_name(sym::linkage) {\n@@ -2657,3 +2656,39 @@ fn check_link_name_xor_ordinal(\n         tcx.sess.err(msg);\n     }\n }\n+\n+/// Checks the function annotated with `#[target_feature]` is unsafe,\n+/// reporting an error if it isn't.\n+fn check_target_feature_safe_fn(tcx: TyCtxt<'_>, id: DefId, attr_span: Span) {\n+    if tcx.is_closure(id) || tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+        let mut err = feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::target_feature_11,\n+            attr_span,\n+            \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n+        );\n+        err.span_label(tcx.def_span(id), \"not an `unsafe` function\");\n+        err.emit();\n+    }\n+}\n+\n+/// Checks the function annotated with `#[target_feature]` is not a safe\n+/// trait method implementation, reporting an error if it is.\n+fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span: Span) {\n+    let hir_id = tcx.hir().as_local_hir_id(id);\n+    let node = tcx.hir().get(hir_id);\n+    if let Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) = node {\n+        let parent_id = tcx.hir().get_parent_item(hir_id);\n+        let parent_item = tcx.hir().expect_item(parent_id);\n+        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = parent_item.kind {\n+            tcx.sess\n+                .struct_span_err(\n+                    attr_span,\n+                    \"`#[target_feature(..)]` cannot be applied to safe trait method\",\n+                )\n+                .span_label(attr_span, \"cannot be applied to safe trait method\")\n+                .span_label(tcx.def_span(id), \"not an `unsafe` function\")\n+                .emit();\n+        }\n+    }\n+}"}, {"sha": "22187c4a4098a236681edef01c4ed10baa0dba8c", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -1,11 +1,14 @@\n-error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/issue-68060.rs:6:13\n    |\n LL |             #[target_feature(enable = \"\")]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |             |_| (),\n    |             ------ not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: the feature named `` is not valid for this target\n   --> $DIR/issue-68060.rs:6:30\n@@ -21,4 +24,5 @@ LL |             #[track_caller]\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0737`.\n+Some errors have detailed explanations: E0658, E0737.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "58a2c271ecfbccb8f1a53ff99bcc88f37d267686", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,50 @@\n+// Tests the new rules added by RFC 2396, including:\n+// - applying `#[target_feature]` to safe functions is allowed\n+// - calling functions with `#[target_feature]` is allowed in\n+//   functions which have (at least) the same features\n+// - calling functions with `#[target_feature]` is allowed in\n+//   unsafe contexts\n+// - functions with `#[target_feature]` can coerce to unsafe fn pointers\n+\n+// check-pass\n+// only-x86_64\n+\n+#![feature(target_feature_11)]\n+\n+#[target_feature(enable = \"sse2\")]\n+const fn sse2() {}\n+\n+#[cfg(target_feature = \"sse2\")]\n+const SSE2_ONLY: () = unsafe {\n+    sse2();\n+};\n+\n+#[target_feature(enable = \"sse2\")]\n+fn also_sse2() {\n+    sse2();\n+}\n+\n+#[target_feature(enable = \"sse2\")]\n+#[target_feature(enable = \"avx\")]\n+fn sse2_and_avx() {\n+    sse2();\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    #[target_feature(enable = \"sse2\")]\n+    fn sse2(&self) {\n+        sse2();\n+    }\n+}\n+\n+fn main() {\n+    if cfg!(target_feature = \"sse2\") {\n+        unsafe {\n+            sse2();\n+            Foo.sse2();\n+        }\n+    }\n+    let sse2_ptr: unsafe fn() = sse2;\n+}"}, {"sha": "975d7a1f694c6960933369479a9e60933a026e8f", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,6 @@\n+// only-x86_64\n+\n+#[target_feature(enable = \"sse2\")] //~ ERROR can only be applied to `unsafe` functions\n+fn foo() {}\n+\n+fn main() {}"}, {"sha": "413890f436d0f07cda2f0ef0a70d33574c8ff9df", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,14 @@\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/feature-gate-target_feature_11.rs:3:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn foo() {}\n+   | ----------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "3ecea5c5313901878d07384cd515ac4f2df4cf7c", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,10 @@\n+// only-x86_64\n+\n+#![feature(target_feature_11)]\n+\n+#[target_feature(enable = \"sse2\")]\n+fn foo() {}\n+\n+fn main() {\n+    let foo: fn() = foo; //~ ERROR mismatched types\n+}"}, {"sha": "06cfdde3fb974f4e309a3b0088ac9866334157e3", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.stderr?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/fn-ptr.rs:9:21\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ---------------------------------- `#[target_feature]` added here\n+...\n+LL |     let foo: fn() = foo;\n+   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers\n+   |              |\n+   |              expected due to this\n+   |\n+   = note: expected fn pointer `fn()`\n+                 found fn item `fn() {foo}`\n+   = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8da3affc4477bb880ad7b32a58d819830bf5bf43", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,47 @@\n+// only-x86_64\n+\n+#![feature(target_feature_11)]\n+\n+#[target_feature(enable = \"sse2\")]\n+const fn sse2() {}\n+\n+#[target_feature(enable = \"avx\")]\n+#[target_feature(enable = \"bmi2\")]\n+fn avx_bmi2() {}\n+\n+struct Quux;\n+\n+impl Quux {\n+    #[target_feature(enable = \"avx\")]\n+    #[target_feature(enable = \"bmi2\")]\n+    fn avx_bmi2(&self) {}\n+}\n+\n+fn foo() {\n+    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+}\n+\n+#[target_feature(enable = \"sse2\")]\n+fn bar() {\n+    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+}\n+\n+#[target_feature(enable = \"avx\")]\n+fn baz() {\n+    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+}\n+\n+#[target_feature(enable = \"avx\")]\n+#[target_feature(enable = \"bmi2\")]\n+fn qux() {\n+    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n+}\n+\n+const name: () = sse2(); //~ ERROR call to function with `#[target_feature]` is unsafe\n+\n+fn main() {}"}, {"sha": "b9f748640b55874a733bfab632b1f3d4a10baa9c", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.stderr?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,83 @@\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:21:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:22:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:23:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:28:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:29:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:34:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:35:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:36:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:42:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:45:18\n+   |\n+LL | const name: () = sse2();\n+   |                  ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "7314fa8cced2aa5921147578de949b0696901594", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/trait-impl.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,21 @@\n+// only-x86_64\n+\n+#![feature(target_feature_11)]\n+\n+trait Foo {\n+    fn foo(&self);\n+    unsafe fn unsf_foo(&self);\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    #[target_feature(enable = \"sse2\")]\n+    //~^ ERROR cannot be applied to safe trait method\n+    fn foo(&self) {}\n+\n+    #[target_feature(enable = \"sse2\")]\n+    unsafe fn unsf_foo(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "3c56e0fc5c6e34765b5f5c47c6a160889974d820", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/trait-impl.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -0,0 +1,11 @@\n+error: `#[target_feature(..)]` cannot be applied to safe trait method\n+  --> $DIR/trait-impl.rs:13:5\n+   |\n+LL |     #[target_feature(enable = \"sse2\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot be applied to safe trait method\n+LL |\n+LL |     fn foo(&self) {}\n+   |     ---------------- not an `unsafe` function\n+\n+error: aborting due to previous error\n+"}, {"sha": "63b1951a71631b2c4e295d4348ee509455dd6fae", "filename": "src/test/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -26,7 +26,7 @@ unsafe fn foo() {}\n \n #[target_feature(enable = \"sse2\")]\n //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n-//~| NOTE can only be applied to `unsafe` functions\n+//~| NOTE see issue #69098\n fn bar() {}\n //~^ NOTE not an `unsafe` function\n \n@@ -72,7 +72,7 @@ trait Quux {\n impl Quux for Foo {\n     #[target_feature(enable = \"sse2\")]\n     //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n-    //~| NOTE can only be applied to `unsafe` functions\n+    //~| NOTE see issue #69098\n     fn foo() {}\n     //~^ NOTE not an `unsafe` function\n }\n@@ -84,7 +84,7 @@ fn main() {\n     }\n     #[target_feature(enable = \"sse2\")]\n     //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n-    //~| NOTE can only be applied to `unsafe` functions\n+    //~| NOTE see issue #69098\n     || {};\n     //~^ NOTE not an `unsafe` function\n }"}, {"sha": "21d6aa218ec79fe314c29d378d996b16bf022437", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f05a5240440b3eaef1684a7965860fab40301947/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=f05a5240440b3eaef1684a7965860fab40301947", "patch": "@@ -22,14 +22,17 @@ error: malformed `target_feature` attribute input\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n-error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/invalid-attribute.rs:27:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | fn bar() {}\n    | ----------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: attribute should be applied to a function\n   --> $DIR/invalid-attribute.rs:33:1\n@@ -91,23 +94,30 @@ error: cannot use `#[inline(always)]` with `#[target_feature]`\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n-error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/invalid-attribute.rs:85:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     || {};\n    |     ----- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n-error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/invalid-attribute.rs:73:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     fn foo() {}\n    |     ----------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: aborting due to 14 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}]}