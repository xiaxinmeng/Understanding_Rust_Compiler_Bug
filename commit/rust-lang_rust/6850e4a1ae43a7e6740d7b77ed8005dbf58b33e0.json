{"sha": "6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NTBlNGExYWU0M2E3ZTY3NDBkN2I3N2VkODAwNWRiZjU4YjMzZTA=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-16T23:38:42Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-20T21:38:06Z"}, "message": "Use assoc float consts instead of module level", "tree": {"sha": "7c7990f7c4746d7b54c432e62d41e392e1c483e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7990f7c4746d7b54c432e62d41e392e1c483e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "html_url": "https://github.com/rust-lang/rust/commit/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ddf66187aeca3ad1d44e239c794ecf4be95c5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddf66187aeca3ad1d44e239c794ecf4be95c5bf", "html_url": "https://github.com/rust-lang/rust/commit/4ddf66187aeca3ad1d44e239c794ecf4be95c5bf"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "32f4956328975b4c9b748f9cf86df5482e605061", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "patch": "@@ -265,7 +265,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_infinite(self) -> bool {\n-        self.abs_private() == INFINITY\n+        self.abs_private() == Self::INFINITY\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -287,7 +287,7 @@ impl f32 {\n     pub fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n-        self.abs_private() < INFINITY\n+        self.abs_private() < Self::INFINITY\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,"}, {"sha": "b38fd804ee80fc9cddec632247aa8c370170e1cd", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "patch": "@@ -264,7 +264,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_infinite(self) -> bool {\n-        self.abs_private() == INFINITY\n+        self.abs_private() == Self::INFINITY\n     }\n \n     /// Returns `true` if this number is neither infinite nor `NaN`.\n@@ -286,7 +286,7 @@ impl f64 {\n     pub fn is_finite(self) -> bool {\n         // There's no need to handle NaN separately: if self is NaN,\n         // the comparison is not true, exactly as desired.\n-        self.abs_private() < INFINITY\n+        self.abs_private() < Self::INFINITY\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,"}, {"sha": "c43536c6fcca86585db29821f1772c2f3fbc94dc", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "patch": "@@ -2,7 +2,6 @@\n \n use crate::num::dec2flt::rawfp::RawFloat;\n use crate::num::FpCategory;\n-use crate::{f32, f64};\n \n /// Decoded unsigned finite value, such that:\n ///"}, {"sha": "8e743ace99bfbddde05b22d12495bdbb0ed87613", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "patch": "@@ -171,7 +171,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn signum(self) -> f32 {\n-        if self.is_nan() { NAN } else { 1.0_f32.copysign(self) }\n+        if self.is_nan() { Self::NAN } else { 1.0_f32.copysign(self) }\n     }\n \n     /// Returns a number composed of the magnitude of `self` and the sign of\n@@ -832,8 +832,8 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f32 {\n-        if self == NEG_INFINITY {\n-            NEG_INFINITY\n+        if self == Self::NEG_INFINITY {\n+            Self::NEG_INFINITY\n         } else {\n             (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n@@ -855,7 +855,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f32 {\n-        if self < 1.0 { crate::f32::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n     }\n \n     /// Inverse hyperbolic tangent function."}, {"sha": "fe64d27b1efc8fb9a7441c7f47b41ec0c82a381d", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=6850e4a1ae43a7e6740d7b77ed8005dbf58b33e0", "patch": "@@ -171,7 +171,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn signum(self) -> f64 {\n-        if self.is_nan() { NAN } else { 1.0_f64.copysign(self) }\n+        if self.is_nan() { Self::NAN } else { 1.0_f64.copysign(self) }\n     }\n \n     /// Returns a number composed of the magnitude of `self` and the sign of\n@@ -834,8 +834,8 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn asinh(self) -> f64 {\n-        if self == NEG_INFINITY {\n-            NEG_INFINITY\n+        if self == Self::NEG_INFINITY {\n+            Self::NEG_INFINITY\n         } else {\n             (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n@@ -857,7 +857,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f64 {\n-        if self < 1.0 { NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n+        if self < 1.0 { Self::NAN } else { (self + ((self * self) - 1.0).sqrt()).ln() }\n     }\n \n     /// Inverse hyperbolic tangent function.\n@@ -926,16 +926,16 @@ impl f64 {\n                 if self > 0.0 {\n                     log_fn(self)\n                 } else if self == 0.0 {\n-                    NEG_INFINITY // log(0) = -Inf\n+                    Self::NEG_INFINITY // log(0) = -Inf\n                 } else {\n-                    NAN // log(-n) = NaN\n+                    Self::NAN // log(-n) = NaN\n                 }\n             } else if self.is_nan() {\n                 self // log(NaN) = NaN\n             } else if self > 0.0 {\n                 self // log(Inf) = Inf\n             } else {\n-                NAN // log(-Inf) = NaN\n+                Self::NAN // log(-Inf) = NaN\n             }\n         }\n     }"}]}