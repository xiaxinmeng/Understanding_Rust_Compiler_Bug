{"sha": "1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a", "node_id": "C_kwDOAAsO6NoAKDFmYTlkNWUwN2IxYjIwMzViZTJlY2E3MGQwZTJiYjgxZjEwZWRkOGE", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-08-31T16:41:24Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-08-31T16:41:24Z"}, "message": "Correct visibility check", "tree": {"sha": "c83390b78282688804ed5c7e64d9671f6a9c25d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83390b78282688804ed5c7e64d9671f6a9c25d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a", "html_url": "https://github.com/rust-lang/rust/commit/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a580a3396ea11c3cf186af8ec5c563d906b7127", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a580a3396ea11c3cf186af8ec5c563d906b7127", "html_url": "https://github.com/rust-lang/rust/commit/1a580a3396ea11c3cf186af8ec5c563d906b7127"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "f3fe10c8575470d91389fdbb9a468f52aca17537", "filename": "crates/hir-ty/src/inhabitedness.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a/crates%2Fhir-ty%2Fsrc%2Finhabitedness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a/crates%2Fhir-ty%2Fsrc%2Finhabitedness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finhabitedness.rs?ref=1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a", "patch": "@@ -149,17 +149,11 @@ impl UninhabitedFrom<'_> {\n         subst: &Substitution,\n         is_enum: bool,\n     ) -> ControlFlow<VisiblyUninhabited> {\n-        let target_mod = self.target_mod;\n-        let mut data_uninhabitedness =\n-            || ty.clone().substitute(Interner, subst).visit_with(self, DebruijnIndex::INNERMOST);\n-        if is_enum {\n-            data_uninhabitedness()\n+        if is_enum || vis.is_visible_from(self.db.upcast(), self.target_mod) {\n+            let ty = ty.clone().substitute(Interner, subst);\n+            ty.visit_with(self, DebruijnIndex::INNERMOST)\n         } else {\n-            match vis {\n-                Visibility::Module(mod_id) if mod_id == target_mod => data_uninhabitedness(),\n-                Visibility::Module(_) => CONTINUE_OPAQUELY_INHABITED,\n-                Visibility::Public => data_uninhabitedness(),\n-            }\n+            CONTINUE_OPAQUELY_INHABITED\n         }\n     }\n }"}]}