{"sha": "850437b6f9915a5281c5085d45480b7d29f4e1e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDQzN2I2Zjk5MTVhNTI4MWM1MDg1ZDQ1NDgwYjdkMjlmNGUxZTY=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-09T08:27:14Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-14T10:00:53Z"}, "message": "Cache link resolution results in current module\n\nCo-authored-by: Joshua Nelson <jyn514@gmail.com>", "tree": {"sha": "16e45bd049f91ee20462d770ab5ac423766f147e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e45bd049f91ee20462d770ab5ac423766f147e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/850437b6f9915a5281c5085d45480b7d29f4e1e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/850437b6f9915a5281c5085d45480b7d29f4e1e6", "html_url": "https://github.com/rust-lang/rust/commit/850437b6f9915a5281c5085d45480b7d29f4e1e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/850437b6f9915a5281c5085d45480b7d29f4e1e6/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331e74014a0a2bf18aae7f02495f97958bf9767d", "url": "https://api.github.com/repos/rust-lang/rust/commits/331e74014a0a2bf18aae7f02495f97958bf9767d", "html_url": "https://github.com/rust-lang/rust/commit/331e74014a0a2bf18aae7f02495f97958bf9767d"}], "stats": {"total": 93, "additions": 79, "deletions": 14}, "files": [{"sha": "d888a87b9e7c8590df7031808e29c0184b548ba9", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 79, "deletions": 14, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/850437b6f9915a5281c5085d45480b7d29f4e1e6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/850437b6f9915a5281c5085d45480b7d29f4e1e6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=850437b6f9915a5281c5085d45480b7d29f4e1e6", "patch": "@@ -3,7 +3,7 @@\n //! [RFC 1946]: https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md\n \n use rustc_ast as ast;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtensionKind;\n use rustc_hir as hir;\n@@ -168,6 +168,31 @@ enum AnchorFailure {\n     RustdocAnchorConflict(Res),\n }\n \n+#[derive(Clone, Debug, Hash, PartialEq, Eq)]\n+struct CacheKey {\n+    module_id: DefId,\n+    dis: Option<Disambiguator>,\n+    path_str: String,\n+    extra_fragment: Option<String>,\n+}\n+\n+impl CacheKey {\n+    fn new(\n+        module_id: DefId,\n+        dis: Option<Disambiguator>,\n+        path_str: String,\n+        extra_fragment: Option<String>,\n+    ) -> Self {\n+        Self { module_id, dis, path_str, extra_fragment }\n+    }\n+}\n+\n+#[derive(Clone, Debug, Hash)]\n+struct CachedLink {\n+    pub res: (Res, Option<String>),\n+    pub side_channel: Option<(DefKind, DefId)>,\n+}\n+\n struct LinkCollector<'a, 'tcx> {\n     cx: &'a DocContext<'tcx>,\n     /// A stack of modules used to decide what scope to resolve in.\n@@ -179,11 +204,18 @@ struct LinkCollector<'a, 'tcx> {\n     /// because `clean` and the disambiguator code expect them to be different.\n     /// See the code for associated items on inherent impls for details.\n     kind_side_channel: Cell<Option<(DefKind, DefId)>>,\n+    /// Cache the resolved links so we can avoid resolving (and emitting errors for) the same link\n+    visited_links: FxHashMap<CacheKey, CachedLink>,\n }\n \n impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     fn new(cx: &'a DocContext<'tcx>) -> Self {\n-        LinkCollector { cx, mod_ids: Vec::new(), kind_side_channel: Cell::new(None) }\n+        LinkCollector {\n+            cx,\n+            mod_ids: Vec::new(),\n+            kind_side_channel: Cell::new(None),\n+            visited_links: FxHashMap::default(),\n+        }\n     }\n \n     /// Given a full link, parse it as an [enum struct variant].\n@@ -937,7 +969,7 @@ impl LinkCollector<'_, '_> {\n     ///\n     /// FIXME(jynelson): this is way too many arguments\n     fn resolve_link(\n-        &self,\n+        &mut self,\n         item: &Item,\n         dox: &str,\n         self_name: &Option<String>,\n@@ -962,6 +994,7 @@ impl LinkCollector<'_, '_> {\n         let link = ori_link.replace(\"`\", \"\");\n         let parts = link.split('#').collect::<Vec<_>>();\n         let (link, extra_fragment) = if parts.len() > 2 {\n+            // A valid link can't have multiple #'s\n             anchor_failure(cx, &item, &link, dox, link_range, AnchorFailure::MultipleAnchors);\n             return None;\n         } else if parts.len() == 2 {\n@@ -1075,16 +1108,9 @@ impl LinkCollector<'_, '_> {\n             return None;\n         }\n \n-        let (mut res, mut fragment) = self.resolve_with_disambiguator(\n-            disambiguator,\n-            item,\n-            dox,\n-            path_str,\n-            module_id,\n-            extra_fragment,\n-            &ori_link,\n-            link_range.clone(),\n-        )?;\n+        let key = CacheKey::new(module_id, disambiguator, path_str.to_owned(), extra_fragment);\n+        let (mut res, mut fragment) =\n+            self.resolve_with_disambiguator_cached(key, item, dox, &ori_link, link_range.clone())?;\n \n         // Check for a primitive which might conflict with a module\n         // Report the ambiguity and require that the user specify which one they meant.\n@@ -1192,6 +1218,45 @@ impl LinkCollector<'_, '_> {\n         }\n     }\n \n+    fn resolve_with_disambiguator_cached(\n+        &mut self,\n+        key: CacheKey,\n+        item: &Item,\n+        dox: &str,\n+        ori_link: &str,\n+        link_range: Option<Range<usize>>,\n+    ) -> Option<(Res, Option<String>)> {\n+        // Try to look up both the result and the corresponding side channel value\n+        if let Some(ref cached) = self.visited_links.get(&key) {\n+            self.kind_side_channel.set(cached.side_channel.clone());\n+            Some(cached.res.clone())\n+        } else {\n+            match self.resolve_with_disambiguator(\n+                key.dis,\n+                item,\n+                dox,\n+                &key.path_str,\n+                key.module_id,\n+                key.extra_fragment.clone(),\n+                ori_link,\n+                link_range,\n+            ) {\n+                Some(res) => {\n+                    // Store result for the actual namespace\n+                    self.visited_links.insert(\n+                        key,\n+                        CachedLink {\n+                            res: res.clone(),\n+                            side_channel: self.kind_side_channel.clone().into_inner(),\n+                        },\n+                    );\n+                    Some(res)\n+                }\n+                _ => None,\n+            }\n+        }\n+    }\n+\n     /// After parsing the disambiguator, resolve the main part of the link.\n     // FIXME(jynelson): wow this is just so much\n     fn resolve_with_disambiguator(\n@@ -1356,7 +1421,7 @@ impl LinkCollector<'_, '_> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n enum Disambiguator {\n     /// `prim@`"}]}