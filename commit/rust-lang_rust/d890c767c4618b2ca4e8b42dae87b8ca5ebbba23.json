{"sha": "d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OTBjNzY3YzQ2MThiMmNhNGU4YjQyZGFlODdiOGNhNWViYmJhMjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T21:33:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T21:33:42Z"}, "message": "internal: cleanup item parsing", "tree": {"sha": "f386172b3e4c05963bd44d402c8c87245030facf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f386172b3e4c05963bd44d402c8c87245030facf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "html_url": "https://github.com/rust-lang/rust/commit/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec2043a0820cc0fa0f7341f752342428aec6bde9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec2043a0820cc0fa0f7341f752342428aec6bde9", "html_url": "https://github.com/rust-lang/rust/commit/ec2043a0820cc0fa0f7341f752342428aec6bde9"}], "stats": {"total": 138, "additions": 44, "deletions": 94}, "files": [{"sha": "78d99f284a99ea0f6b11c6a28a5457f7534e7811", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 39, "deletions": 57, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "patch": "@@ -184,34 +184,14 @@ pub(super) fn opt_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n \n     // items\n     match p.current() {\n-        // test fn\n-        // fn foo() {}\n-        T![fn] => {\n-            fn_(p);\n-            m.complete(p, FN);\n-        }\n+        T![fn] => fn_(p, m),\n \n-        // test trait\n-        // trait T {}\n-        T![trait] => {\n-            traits::trait_(p);\n-            m.complete(p, TRAIT);\n-        }\n+        T![const] if p.nth(1) != T!['{'] => consts::konst(p, m),\n \n-        T![const] if p.nth(1) != T!['{'] => {\n-            consts::konst(p, m);\n-        }\n-\n-        // test impl\n-        // impl T for S {}\n-        T![impl] => {\n-            traits::impl_(p);\n-            m.complete(p, IMPL);\n-        }\n+        T![trait] => traits::trait_(p, m),\n+        T![impl] => traits::impl_(p, m),\n \n-        T![type] => {\n-            type_alias(p, m);\n-        }\n+        T![type] => type_alias(p, m),\n \n         // test extern_block\n         // unsafe extern \"C\" {}\n@@ -339,38 +319,6 @@ pub(crate) fn extern_item_list(p: &mut Parser) {\n     m.complete(p, EXTERN_ITEM_LIST);\n }\n \n-fn fn_(p: &mut Parser) {\n-    assert!(p.at(T![fn]));\n-    p.bump(T![fn]);\n-\n-    name_r(p, ITEM_RECOVERY_SET);\n-    // test function_type_params\n-    // fn foo<T: Clone + Copy>(){}\n-    type_params::opt_generic_param_list(p);\n-\n-    if p.at(T!['(']) {\n-        params::param_list_fn_def(p);\n-    } else {\n-        p.error(\"expected function arguments\");\n-    }\n-    // test function_ret_type\n-    // fn foo() {}\n-    // fn bar() -> () {}\n-    opt_ret_type(p);\n-\n-    // test function_where_clause\n-    // fn foo<T>() where T: Copy {}\n-    type_params::opt_where_clause(p);\n-\n-    // test fn_decl\n-    // trait T { fn foo(); }\n-    if p.at(T![;]) {\n-        p.bump(T![;]);\n-    } else {\n-        expressions::block_expr(p)\n-    }\n-}\n-\n fn macro_rules(p: &mut Parser, m: Marker) {\n     assert!(p.at_contextual_kw(\"macro_rules\"));\n     p.bump_remap(T![macro_rules]);\n@@ -428,6 +376,40 @@ fn macro_def(p: &mut Parser, m: Marker) {\n     m.complete(p, MACRO_DEF);\n }\n \n+// test fn\n+// fn foo() {}\n+fn fn_(p: &mut Parser, m: Marker) {\n+    p.bump(T![fn]);\n+\n+    name_r(p, ITEM_RECOVERY_SET);\n+    // test function_type_params\n+    // fn foo<T: Clone + Copy>(){}\n+    type_params::opt_generic_param_list(p);\n+\n+    if p.at(T!['(']) {\n+        params::param_list_fn_def(p);\n+    } else {\n+        p.error(\"expected function arguments\");\n+    }\n+    // test function_ret_type\n+    // fn foo() {}\n+    // fn bar() -> () {}\n+    opt_ret_type(p);\n+\n+    // test function_where_clause\n+    // fn foo<T>() where T: Copy {}\n+    type_params::opt_where_clause(p);\n+\n+    // test fn_decl\n+    // trait T { fn foo(); }\n+    if p.at(T![;]) {\n+        p.bump(T![;]);\n+    } else {\n+        expressions::block_expr(p)\n+    }\n+    m.complete(p, FN);\n+}\n+\n fn macro_call(p: &mut Parser) -> BlockLike {\n     assert!(paths::is_use_path_start(p));\n     paths::use_path(p);"}, {"sha": "569fc58a1ceeb84f631176dcb0f22ed476060ef1", "filename": "crates/parser/src/grammar/items/traits.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d890c767c4618b2ca4e8b42dae87b8ca5ebbba23/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=d890c767c4618b2ca4e8b42dae87b8ca5ebbba23", "patch": "@@ -3,7 +3,7 @@ use super::*;\n // test trait_item\n // trait T<U>: Hash + Clone where U: Copy {}\n // trait X<U: Debug + Display>: Hash + Clone where U: Copy {}\n-pub(super) fn trait_(p: &mut Parser) {\n+pub(super) fn trait_(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![trait]));\n     p.bump(T![trait]);\n     name_r(p, ITEM_RECOVERY_SET);\n@@ -16,6 +16,7 @@ pub(super) fn trait_(p: &mut Parser) {\n         type_params::bounds_without_colon(p);\n         type_params::opt_where_clause(p);\n         p.expect(T![;]);\n+        m.complete(p, TRAIT);\n         return;\n     }\n     if p.at(T![:]) {\n@@ -27,11 +28,12 @@ pub(super) fn trait_(p: &mut Parser) {\n     } else {\n         p.error(\"expected `{`\");\n     }\n+    m.complete(p, TRAIT);\n }\n \n // test impl_def\n // impl Foo {}\n-pub(super) fn impl_(p: &mut Parser) {\n+pub(super) fn impl_(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![impl]));\n     p.bump(T![impl]);\n     if choose_type_params_over_qpath(p) {\n@@ -58,6 +60,7 @@ pub(super) fn impl_(p: &mut Parser) {\n     } else {\n         p.error(\"expected `{`\");\n     }\n+    m.complete(p, IMPL);\n }\n \n // test impl_item_list"}, {"sha": "7968cf9ffa07e0dece536cc5d15902230d395194", "filename": "crates/syntax/test_data/parser/inline/ok/0152_impl.rast", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rast?ref=ec2043a0820cc0fa0f7341f752342428aec6bde9", "patch": "@@ -1,22 +0,0 @@\n-SOURCE_FILE@0..16\n-  IMPL@0..15\n-    IMPL_KW@0..4 \"impl\"\n-    WHITESPACE@4..5 \" \"\n-    PATH_TYPE@5..6\n-      PATH@5..6\n-        PATH_SEGMENT@5..6\n-          NAME_REF@5..6\n-            IDENT@5..6 \"T\"\n-    WHITESPACE@6..7 \" \"\n-    FOR_KW@7..10 \"for\"\n-    WHITESPACE@10..11 \" \"\n-    PATH_TYPE@11..12\n-      PATH@11..12\n-        PATH_SEGMENT@11..12\n-          NAME_REF@11..12\n-            IDENT@11..12 \"S\"\n-    WHITESPACE@12..13 \" \"\n-    ASSOC_ITEM_LIST@13..15\n-      L_CURLY@13..14 \"{\"\n-      R_CURLY@14..15 \"}\"\n-  WHITESPACE@15..16 \"\\n\""}, {"sha": "a1a550d8a6076d350e7fa99ed646213734c43ade", "filename": "crates/syntax/test_data/parser/inline/ok/0152_impl.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_impl.rs?ref=ec2043a0820cc0fa0f7341f752342428aec6bde9", "patch": "@@ -1 +0,0 @@\n-impl T for S {}"}, {"sha": "9881e5048c87e7bf18cab1bbb58a6aa058aa8ea3", "filename": "crates/syntax/test_data/parser/inline/ok/0153_trait.rast", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rast?ref=ec2043a0820cc0fa0f7341f752342428aec6bde9", "patch": "@@ -1,11 +0,0 @@\n-SOURCE_FILE@0..11\n-  TRAIT@0..10\n-    TRAIT_KW@0..5 \"trait\"\n-    WHITESPACE@5..6 \" \"\n-    NAME@6..7\n-      IDENT@6..7 \"T\"\n-    WHITESPACE@7..8 \" \"\n-    ASSOC_ITEM_LIST@8..10\n-      L_CURLY@8..9 \"{\"\n-      R_CURLY@9..10 \"}\"\n-  WHITESPACE@10..11 \"\\n\""}, {"sha": "8d183dbb5d3fedb9abf11ef3a5c7bc304507d4e7", "filename": "crates/syntax/test_data/parser/inline/ok/0153_trait.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2043a0820cc0fa0f7341f752342428aec6bde9/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_trait.rs?ref=ec2043a0820cc0fa0f7341f752342428aec6bde9", "patch": "@@ -1 +0,0 @@\n-trait T {}"}]}