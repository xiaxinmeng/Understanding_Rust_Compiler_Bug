{"sha": "ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "node_id": "C_kwDOAAsO6NoAKGVmOTE1MTliNDVkMmJiZjBjZThjMDE4MDExODE2MDU2MmVhYWEwY2E", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-27T01:49:01Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-04-04T21:06:35Z"}, "message": "Dedup logic and improve output for other types that impl trait", "tree": {"sha": "ab798e750270dc35abaadabf38e6946025faf9b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab798e750270dc35abaadabf38e6946025faf9b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "html_url": "https://github.com/rust-lang/rust/commit/ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f", "html_url": "https://github.com/rust-lang/rust/commit/e2bba0708a1e4b0c21f94de56c2bd5d66d3b825f"}], "stats": {"total": 720, "additions": 363, "deletions": 357}, "files": [{"sha": "09b445058c0d3b3e3c44349181a56d70872ca7ce", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 60, "deletions": 61, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{\n-    self, SubtypePredicate, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n@@ -1756,6 +1756,60 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         err: &mut Diagnostic,\n     ) -> bool {\n+        let report = |mut candidates: Vec<TraitRef<'_>>, err: &mut Diagnostic| {\n+            candidates.sort();\n+            candidates.dedup();\n+            let len = candidates.len();\n+            if candidates.len() == 0 {\n+                return false;\n+            }\n+            let trait_ref = candidates[0];\n+            if candidates.len() == 1 {\n+                err.highlighted_help(vec![\n+                    (\n+                        format!(\n+                            \"the trait `{}` is implemented for `\",\n+                            trait_ref.print_only_trait_path()\n+                        ),\n+                        Style::NoStyle,\n+                    ),\n+                    (candidates[0].self_ty().to_string(), Style::Highlight),\n+                    (\"`\".to_string(), Style::NoStyle),\n+                ]);\n+                return true;\n+            }\n+            // Check if the trait is the same in all cases. If so, we'll only show the type.\n+            // FIXME: there *has* to be a better way!\n+            let mut traits: Vec<_> = candidates\n+                .iter()\n+                .map(|c| format!(\"{}\", c).split(\" as \").last().unwrap().to_string())\n+                .collect();\n+            traits.sort();\n+            traits.dedup();\n+\n+            let mut candidates: Vec<String> = candidates\n+                .into_iter()\n+                .map(|c| {\n+                    if traits.len() == 1 {\n+                        format!(\"\\n  {}\", c.self_ty())\n+                    } else {\n+                        format!(\"\\n  {}\", c)\n+                    }\n+                })\n+                .collect();\n+\n+            candidates.sort();\n+            candidates.dedup();\n+            let end = if candidates.len() <= 9 { candidates.len() } else { 8 };\n+            err.help(&format!(\n+                \"the following other types implement trait `{}`:{}{}\",\n+                trait_ref.print_only_trait_path(),\n+                candidates[..end].join(\"\"),\n+                if len > 9 { format!(\"\\nand {} others\", len - 8) } else { String::new() }\n+            ));\n+            true\n+        };\n+\n         let def_id = trait_ref.def_id();\n         if impl_candidates.is_empty() {\n             if self.tcx.trait_is_auto(def_id)\n@@ -1765,7 +1819,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 // Mentioning implementers of `Copy`, `Debug` and friends is not useful.\n                 return false;\n             }\n-            let mut normalized_impl_candidates: Vec<_> = self\n+            let normalized_impl_candidates: Vec<_> = self\n                 .tcx\n                 .all_impls(def_id)\n                 // Ignore automatically derived impls and `!Trait` impls.\n@@ -1776,54 +1830,19 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 .filter_map(|def_id| self.tcx.impl_trait_ref(def_id))\n                 // Avoid mentioning type parameters.\n                 .filter(|trait_ref| !matches!(trait_ref.self_ty().kind(), ty::Param(_)))\n-                .map(|trait_ref| format!(\"\\n  {}\", trait_ref.self_ty()))\n                 .collect();\n-            normalized_impl_candidates.sort();\n-            normalized_impl_candidates.dedup();\n-            let len = normalized_impl_candidates.len();\n-            if len == 0 {\n-                return false;\n-            }\n-            if len == 1 {\n-                err.highlighted_help(vec![\n-                    (\n-                        format!(\n-                            \"the trait `{}` is implemented for `\",\n-                            trait_ref.print_only_trait_path()\n-                        ),\n-                        Style::NoStyle,\n-                    ),\n-                    (normalized_impl_candidates[0].trim().to_string(), Style::Highlight),\n-                    (\"`\".to_string(), Style::NoStyle),\n-                ]);\n-                return true;\n-            }\n-            let end = if normalized_impl_candidates.len() <= 9 {\n-                normalized_impl_candidates.len()\n-            } else {\n-                8\n-            };\n-            err.help(&format!(\n-                \"the following other types implement trait `{}`:{}{}\",\n-                trait_ref.print_only_trait_path(),\n-                normalized_impl_candidates[..end].join(\"\"),\n-                if len > 9 { format!(\"\\nand {} others\", len - 8) } else { String::new() }\n-            ));\n-            return true;\n+            return report(normalized_impl_candidates, err);\n         }\n \n-        let len = impl_candidates.len();\n-        let end = if impl_candidates.len() <= 9 { impl_candidates.len() } else { 8 };\n-\n         let normalize = |candidate| {\n             self.tcx.infer_ctxt().enter(|ref infcx| {\n                 let normalized = infcx\n                     .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n                     .normalize(candidate)\n                     .ok();\n                 match normalized {\n-                    Some(normalized) => format!(\"\\n  {}\", normalized.value),\n-                    None => format!(\"\\n  {}\", candidate),\n+                    Some(normalized) => normalized.value,\n+                    None => candidate,\n                 }\n             })\n         };\n@@ -1834,7 +1853,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         //\n         // Prefer more similar candidates first, then sort lexicographically\n         // by their normalized string representation.\n-        let first_candidate = impl_candidates.get(0).map(|candidate| candidate.trait_ref);\n         let mut normalized_impl_candidates_and_similarities = impl_candidates\n             .into_iter()\n             .map(|ImplCandidate { trait_ref, similarity }| {\n@@ -1850,26 +1868,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             .map(|(_, normalized)| normalized)\n             .collect::<Vec<_>>();\n \n-        if normalized_impl_candidates.len() == 1 {\n-            err.highlighted_help(vec![\n-                (\n-                    format!(\n-                        \"the trait `{}` is implemented for `\",\n-                        first_candidate.unwrap().print_only_trait_path()\n-                    ),\n-                    Style::NoStyle,\n-                ),\n-                (first_candidate.unwrap().self_ty().to_string(), Style::Highlight),\n-                (\"`\".to_string(), Style::NoStyle),\n-            ]);\n-        } else {\n-            err.help(&format!(\n-                \"the following implementations were found:{}{}\",\n-                normalized_impl_candidates[..end].join(\"\"),\n-                if len > 9 { format!(\"\\nand {} others\", len - 8) } else { String::new() }\n-            ));\n-        }\n-        true\n+        report(normalized_impl_candidates, err)\n     }\n \n     /// Gets the parent trait chain start"}, {"sha": "16ecca254c7b0163de33a9a401c30b2f86ee7652", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -557,8 +557,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 } else if real_trait_pred != trait_pred {\n                     // This branch addresses #87437.\n-                    let obligation =\n-                        self.mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred, base_ty);\n+                    let obligation = self.mk_trait_obligation_with_new_self_ty(\n+                        param_env,\n+                        real_trait_pred,\n+                        base_ty,\n+                    );\n                     if self.predicate_may_hold(&obligation) {\n                         err.span_suggestion_verbose(\n                             span.shrink_to_lo(),"}, {"sha": "453333fb56a87d4a9740f86063ed30695cd1017a", "filename": "src/test/ui/binop/binop-mul-i32-f32.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,15 +5,15 @@ LL |     x * y\n    |       ^ no implementation for `i32 * f32`\n    |\n    = help: the trait `Mul<f32>` is not implemented for `i32`\n-   = help: the following implementations were found:\n-             <&'a i32 as Mul<i32>>\n-             <&i32 as Mul<&i32>>\n-             <i32 as Mul<&i32>>\n-             <i32 as Mul>\n+   = help: the following other types implement trait `Mul`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n              <&'a i16 as Mul<i16>>\n+             <&'a i32 as Mul<i32>>\n+             <&'a i64 as Mul<i64>>\n+             <&'a i8 as Mul<i8>>\n+             <&'a isize as Mul<isize>>\n            and 49 others\n \n error: aborting due to previous error"}, {"sha": "95ee51a88261aaefc28eb8ddc293de1a00a2bc33", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -16,15 +16,15 @@ LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = help: the following implementations were found:\n-             <extern \"C\" fn() -> Ret as Debug>\n-             <extern \"C\" fn(A) -> Ret as Debug>\n-             <extern \"C\" fn(A, ...) -> Ret as Debug>\n-             <extern \"C\" fn(A, B) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, ...) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, C) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, C, ...) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, C, D) -> Ret as Debug>\n+   = help: the following other types implement trait `Debug`:\n+             extern \"C\" fn() -> Ret\n+             extern \"C\" fn(A) -> Ret\n+             extern \"C\" fn(A, ...) -> Ret\n+             extern \"C\" fn(A, B) -> Ret\n+             extern \"C\" fn(A, B, ...) -> Ret\n+             extern \"C\" fn(A, B, C) -> Ret\n+             extern \"C\" fn(A, B, C, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D) -> Ret\n            and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "bb0bb63b22df5068898a95ac19d33593ca27e9db", "filename": "src/test/ui/binop/shift-various-bad-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fshift-various-bad-types.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,7 +5,7 @@ LL |     22 >> p.char;\n    |        ^^ no implementation for `{integer} >> char`\n    |\n    = help: the trait `Shr<char>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Shr`:\n              <&'a i128 as Shr<i128>>\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>\n@@ -23,7 +23,7 @@ LL |     22 >> p.str;\n    |        ^^ no implementation for `{integer} >> &str`\n    |\n    = help: the trait `Shr<&str>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Shr`:\n              <&'a i128 as Shr<i128>>\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>\n@@ -41,7 +41,7 @@ LL |     22 >> p;\n    |        ^^ no implementation for `{integer} >> &Panolpy`\n    |\n    = help: the trait `Shr<&Panolpy>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Shr`:\n              <&'a i128 as Shr<i128>>\n              <&'a i128 as Shr<i16>>\n              <&'a i128 as Shr<i32>>"}, {"sha": "343c0a31862b9969ad97657e95664f3173389868", "filename": "src/test/ui/chalkify/chalk_initial_program.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,9 +4,9 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL |     gimme::<f32>();\n    |             ^^^ the trait `Foo` is not implemented for `f32`\n    |\n-   = help: the following implementations were found:\n-             <i32 as Foo>\n-             <u32 as Foo>\n+   = help: the following other types implement trait `Foo`:\n+             i32\n+             u32\n note: required by a bound in `gimme`\n   --> $DIR/chalk_initial_program.rs:9:13\n    |"}, {"sha": "508a6dd1388cbb08463d1f034d3cc3d7f27429f7", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -6,9 +6,9 @@ LL |     only_bar(x);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <i32 as Bar>\n-             <u32 as Bar>\n+   = help: the following other types implement trait `Bar`:\n+             i32\n+             u32\n note: required by a bound in `only_bar`\n   --> $DIR/type_inference.rs:12:16\n    |"}, {"sha": "4c9ab6901b1f58b53085a5f308c8e60405219058", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -25,7 +25,7 @@ error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n    |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Traitor<N, 2_u8>`:\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n@@ -50,9 +50,9 @@ error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n LL | fn owo() -> impl Traitor {\n    |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n    |\n-   = help: the following implementations were found:\n-             <u64 as Traitor<1_u8, 2_u8>>\n+   = help: the following other types implement trait `Traitor<N, 2_u8>`:\n              <u32 as Traitor<N, 2_u8>>\n+             <u64 as Traitor<1_u8, 2_u8>>\n \n error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:24:26"}, {"sha": "5613ed27cb2346db1b39ad0e0103548012f21587", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n LL |     <() as Foo<N>>::test()\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Foo<0_u8>`:\n              <() as Foo<0_u8>>\n              <() as Foo<100_u8>>\n              <() as Foo<101_u8>>"}, {"sha": "c7be8e14a10d5889b440a92fb47a3b02c11fbe13", "filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,9 +4,9 @@ error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n LL |     <u8 as Baz>::Quaks: Bar,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n-   = help: the following implementations were found:\n-             <[[u16; 3]; 3] as Bar>\n-             <[u16; 4] as Bar>\n+   = help: the following other types implement trait `Bar`:\n+             [[u16; 3]; 3]\n+             [u16; 4]\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -16,9 +16,9 @@ error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n-   = help: the following implementations were found:\n-             <[[u16; 3]; 3] as Bar>\n-             <[u16; 4] as Bar>\n+   = help: the following other types implement trait `Bar`:\n+             [[u16; 3]; 3]\n+             [u16; 4]\n    = help: see issue #48214\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n@@ -28,9 +28,9 @@ error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n-   = help: the following implementations were found:\n-             <[[u16; 3]; 3] as Bar>\n-             <[u16; 4] as Bar>\n+   = help: the following other types implement trait `Bar`:\n+             [[u16; 3]; 3]\n+             [u16; 4]\n note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:15:25\n    |\n@@ -46,9 +46,9 @@ error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n-   = help: the following implementations were found:\n-             <[[u16; 3]; 3] as Bar>\n-             <[u16; 4] as Bar>\n+   = help: the following other types implement trait `Bar`:\n+             [[u16; 3]; 3]\n+             [u16; 4]\n note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:14:30\n    |\n@@ -64,9 +64,9 @@ error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n-   = help: the following implementations were found:\n-             <[[u16; 3]; 3] as Bar>\n-             <[u16; 4] as Bar>\n+   = help: the following other types implement trait `Bar`:\n+             [[u16; 3]; 3]\n+             [u16; 4]\n note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:14:30\n    |\n@@ -82,9 +82,9 @@ error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n-   = help: the following implementations were found:\n-             <[[u16; 3]; 3] as Bar>\n-             <[u16; 4] as Bar>\n+   = help: the following other types implement trait `Bar`:\n+             [[u16; 3]; 3]\n+             [u16; 4]\n note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:15:25\n    |"}, {"sha": "8431d989278bafb57889ca9247c0a0d0793c9e3a", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `A<{_: usize}>: Bar<{_: usize}>` is not satisfied\n LL |     let _ = A;\n    |             ^ the trait `Bar<{_: usize}>` is not implemented for `A<{_: usize}>`\n    |\n-   = help: the trait `Bar<N>` is implemented for `A<{ 6 + 1 }>`\n+   = help: the trait `Bar<N>` is implemented for `A<7_usize>`\n note: required by a bound in `A`\n   --> $DIR/unused-substs-1.rs:9:11\n    |"}, {"sha": "5fde557a32ad78cb066b2136fd626abeb31956ef", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -11,15 +11,15 @@ LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                    ^ no implementation for `i8 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i8`\n-   = help: the following implementations were found:\n-             <&'a i8 as Add<i8>>\n-             <&i8 as Add<&i8>>\n-             <i8 as Add<&i8>>\n-             <i8 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to 2 previous errors"}, {"sha": "3c192eef14f11f2475e5fec4baa3e9948a9aeb1e", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -11,15 +11,15 @@ LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                            ^ no implementation for `i8 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i8`\n-   = help: the following implementations were found:\n-             <&'a i8 as Add<i8>>\n-             <&i8 as Add<&i8>>\n-             <i8 as Add<&i8>>\n-             <i8 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error[E0604]: only `u8` can be cast as `char`, not `i8`"}, {"sha": "5544350c34cba37e37db1321add88db3dabbcb42", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -21,7 +21,7 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |                              ^^ no implementation for `[{integer}; _] == [{integer}; 0]`\n    |\n    = help: the trait `PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; _]`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `PartialEq<[B; N]>`:\n              <&[B] as PartialEq<[A; N]>>\n              <&[T] as PartialEq<Vec<U, A>>>\n              <&mut [B] as PartialEq<[A; N]>>"}, {"sha": "1c83f75ffb937ed90b01951fdd30902886f21c54", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n LL |     f1.foo(1usize);\n    |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Foo<i32>`:\n              <Bar as Foo<i32>>\n              <Bar as Foo<u8>>\n "}, {"sha": "85f3eba927d06a9b58bd09430f33b02797dd1f14", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n LL |     f1.foo(1usize);\n    |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Foo<i8>`:\n              <Bar as Foo<i16>>\n              <Bar as Foo<i32>>\n              <Bar as Foo<i8>>"}, {"sha": "e1d80313bc46b394c7351cd2a3c4d95e7158943c", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -6,7 +6,7 @@ LL |     Foo::<i32>::bar(&1i8);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Foo<bool>`:\n              <i8 as Foo<bool>>\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n@@ -25,16 +25,16 @@ LL |     Foo::<i32>::bar(&1u8);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <u8 as Foo<bool>>\n-             <u8 as Foo<u16>>\n-             <u8 as Foo<u32>>\n-             <u8 as Foo<u64>>\n+   = help: the following other types implement trait `Foo<bool>`:\n              <i8 as Foo<bool>>\n              <i8 as Foo<u16>>\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<u8>>\n+             <u8 as Foo<bool>>\n+             <u8 as Foo<u16>>\n+             <u8 as Foo<u32>>\n+             <u8 as Foo<u64>>\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:21\n@@ -44,7 +44,7 @@ LL |     Foo::<i32>::bar(&true);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Foo<bool>`:\n              <bool as Foo<bool>>\n              <bool as Foo<i8>>\n              <bool as Foo<u16>>"}, {"sha": "15af2c26e8fca67597b7c750f2faaaa2d21f41c3", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -22,7 +22,7 @@ LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\n    |                                                     ^ no implementation for `{float} - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `{float}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>"}, {"sha": "98c304cc90b53a02554e57c8c7591000d6784739", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not s\n LL |     test(Foo);\n    |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n    |\n-   = help: the trait `for<'a> Marker` is implemented for `()`\n+   = help: the trait `Marker` is implemented for `()`\n note: required by a bound in `test`\n   --> $DIR/issue-88460.rs:17:27\n    |"}, {"sha": "48cfcb4ad3e0a9c8420a8b81b4888c3c3c53742d", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -24,15 +24,15 @@ LL |         n + sum_to(n - 1)\n    |           ^ no implementation for `u32 + impl Foo`\n    |\n    = help: the trait `Add<impl Foo>` is not implemented for `u32`\n-   = help: the following implementations were found:\n-             <&'a u32 as Add<u32>>\n-             <&u32 as Add<&u32>>\n-             <u32 as Add<&u32>>\n-             <u32 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to 2 previous errors; 1 warning emitted"}, {"sha": "ef15aa58404829c319c54e9dab3983e741e58e05", "filename": "src/test/ui/issues/issue-11771.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11771.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,7 +5,7 @@ LL |     1 +\n    |       ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -23,7 +23,7 @@ LL |     1 +\n    |       ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "1fa2d356c68ef5685e4b47edb95eb5ae95a543cf", "filename": "src/test/ui/issues/issue-24352.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24352.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,15 +5,15 @@ LL |     1.0f64 - 1\n    |            ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Sub<f64>>\n-             <&f64 as Sub<&f64>>\n-             <f64 as Sub<&f64>>\n-             <f64 as Sub>\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n+             <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n              <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |"}, {"sha": "d4e29030c1648f24df5c6e10ee45d068dce1fe84", "filename": "src/test/ui/issues/issue-50582.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50582.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -14,7 +14,7 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |                  ^ no implementation for `{integer} + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>"}, {"sha": "76a47c49bbafb40be760823fffec771f98d4fc3d", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -94,15 +94,15 @@ LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n-   = help: the following implementations were found:\n-             <extern \"C\" fn() -> Ret as Debug>\n-             <extern \"C\" fn(A) -> Ret as Debug>\n-             <extern \"C\" fn(A, ...) -> Ret as Debug>\n-             <extern \"C\" fn(A, B) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, ...) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, C) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, C, ...) -> Ret as Debug>\n-             <extern \"C\" fn(A, B, C, D) -> Ret as Debug>\n+   = help: the following other types implement trait `Debug`:\n+             extern \"C\" fn() -> Ret\n+             extern \"C\" fn(A) -> Ret\n+             extern \"C\" fn(A, ...) -> Ret\n+             extern \"C\" fn(A, B) -> Ret\n+             extern \"C\" fn(A, B, ...) -> Ret\n+             extern \"C\" fn(A, B, C) -> Ret\n+             extern \"C\" fn(A, B, C, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D) -> Ret\n            and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "1c61c85368be9e9f5626eb784e40d22ef52bf470", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `&'static mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n-   = help: the following implementations were found:\n-             <isize as Copy>\n-             <f32 as Copy>\n-             <f64 as Copy>\n-             <i128 as Copy>\n-             <i16 as Copy>\n-             <i32 as Copy>\n-             <i64 as Copy>\n-             <i8 as Copy>\n+   = help: the following other types implement trait `Copy`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n@@ -26,15 +26,15 @@ error[E0277]: the trait bound `&'a mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n-   = help: the following implementations were found:\n-             <isize as Copy>\n-             <f32 as Copy>\n-             <f64 as Copy>\n-             <i128 as Copy>\n-             <i16 as Copy>\n-             <i32 as Copy>\n-             <i64 as Copy>\n-             <i8 as Copy>\n+   = help: the following other types implement trait `Copy`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18"}, {"sha": "199958bc7e416e4a9256c754cab4d64fb1b6f2dd", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -38,15 +38,15 @@ LL |     if x == y {}\n    |          ^^ no implementation for `&str == char`\n    |\n    = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `PartialEq<Cow<'a, str>>`:\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n+             <String as PartialEq<&'a str>>\n+             <String as PartialEq<Cow<'a, str>>>\n+             <String as PartialEq<str>>\n+             <String as PartialEq>\n              <str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<OsStr>>\n-             <str as PartialEq<OsString>>\n-             <str as PartialEq<String>>\n-             <str as PartialEq>\n            and 4 others\n \n error[E0308]: mismatched types\n@@ -64,15 +64,15 @@ LL |     if x == z {}\n    |          ^^ no implementation for `&str == char`\n    |\n    = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `PartialEq<Cow<'a, str>>`:\n              <&'a str as PartialEq<OsString>>\n              <&'a str as PartialEq<String>>\n              <&'b str as PartialEq<Cow<'a, str>>>\n+             <String as PartialEq<&'a str>>\n+             <String as PartialEq<Cow<'a, str>>>\n+             <String as PartialEq<str>>\n+             <String as PartialEq>\n              <str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<OsStr>>\n-             <str as PartialEq<OsString>>\n-             <str as PartialEq<String>>\n-             <str as PartialEq>\n            and 4 others\n \n error: aborting due to 6 previous errors"}, {"sha": "16d12228993407d49f7200fc37982a7c0b4f27c6", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,7 +5,7 @@ LL |     1 + Some(1);\n    |       ^ no implementation for `{integer} + Option<{integer}>`\n    |\n    = help: the trait `Add<Option<{integer}>>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n@@ -23,15 +23,15 @@ LL |     2 as usize - Some(1);\n    |                ^ no implementation for `usize - Option<{integer}>`\n    |\n    = help: the trait `Sub<Option<{integer}>>` is not implemented for `usize`\n-   = help: the following implementations were found:\n-             <&'a usize as Sub<usize>>\n-             <&usize as Sub<&usize>>\n-             <usize as Sub<&usize>>\n-             <usize as Sub>\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n \n error[E0277]: cannot multiply `{integer}` by `()`\n@@ -41,7 +41,7 @@ LL |     3 * ();\n    |       ^ no implementation for `{integer} * ()`\n    |\n    = help: the trait `Mul<()>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Mul`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n@@ -59,7 +59,7 @@ LL |     4 / \"\";\n    |       ^ no implementation for `{integer} / &str`\n    |\n    = help: the trait `Div<&str>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Div`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n@@ -77,15 +77,15 @@ LL |     5 < String::new();\n    |       ^ no implementation for `{integer} < String` and `{integer} > String`\n    |\n    = help: the trait `PartialOrd<String>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n-             <f32 as PartialOrd>\n-             <f64 as PartialOrd>\n-             <i128 as PartialOrd>\n-             <i16 as PartialOrd>\n-             <i32 as PartialOrd>\n-             <i64 as PartialOrd>\n-             <i8 as PartialOrd>\n-             <isize as PartialOrd>\n+   = help: the following other types implement trait `PartialOrd`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error[E0277]: can't compare `{integer}` with `Result<{integer}, _>`\n@@ -95,15 +95,15 @@ LL |     6 == Ok(1);\n    |       ^^ no implementation for `{integer} == Result<{integer}, _>`\n    |\n    = help: the trait `PartialEq<Result<{integer}, _>>` is not implemented for `{integer}`\n-   = help: the following implementations were found:\n-             <f32 as PartialEq>\n-             <f64 as PartialEq>\n-             <i128 as PartialEq>\n-             <i16 as PartialEq>\n-             <i32 as PartialEq>\n-             <i64 as PartialEq>\n-             <i8 as PartialEq>\n-             <isize as PartialEq>\n+   = help: the following other types implement trait `PartialEq`:\n+             f32\n+             f64\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n            and 6 others\n \n error: aborting due to 6 previous errors"}, {"sha": "449b0756012dea2283a51b7776a85e503f080efa", "filename": "src/test/ui/never_type/issue-13352.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-13352.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,15 +5,15 @@ LL |     2_usize + (loop {});\n    |             ^ no implementation for `usize + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `usize`\n-   = help: the following implementations were found:\n-             <&'a usize as Add<usize>>\n-             <&usize as Add<&usize>>\n-             <usize as Add<&usize>>\n-             <usize as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to previous error"}, {"sha": "72cc4f6ec6469c90c1c8cfd69a75e9962e6791db", "filename": "src/test/ui/numbers-arithmetic/not-suggest-float-literal.stderr", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnot-suggest-float-literal.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,15 +5,15 @@ LL |     x + 100.0\n    |       ^ no implementation for `u8 + {float}`\n    |\n    = help: the trait `Add<{float}>` is not implemented for `u8`\n-   = help: the following implementations were found:\n-             <&'a u8 as Add<u8>>\n-             <&u8 as Add<&u8>>\n-             <u8 as Add<&u8>>\n-             <u8 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error[E0277]: cannot add `&str` to `f64`\n@@ -23,15 +23,15 @@ LL |     x + \"foo\"\n    |       ^ no implementation for `f64 + &str`\n    |\n    = help: the trait `Add<&str>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Add<f64>>\n-             <&f64 as Add<&f64>>\n-             <f64 as Add<&f64>>\n-             <f64 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error[E0277]: cannot add `{integer}` to `f64`\n@@ -41,15 +41,15 @@ LL |     x + y\n    |       ^ no implementation for `f64 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Add<f64>>\n-             <&f64 as Add<&f64>>\n-             <f64 as Add<&f64>>\n-             <f64 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error[E0277]: cannot subtract `{float}` from `u8`\n@@ -59,15 +59,15 @@ LL |     x - 100.0\n    |       ^ no implementation for `u8 - {float}`\n    |\n    = help: the trait `Sub<{float}>` is not implemented for `u8`\n-   = help: the following implementations were found:\n-             <&'a u8 as Sub<u8>>\n-             <&u8 as Sub<&u8>>\n-             <u8 as Sub<&u8>>\n-             <u8 as Sub>\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n+             <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n \n error[E0277]: cannot subtract `&str` from `f64`\n@@ -77,15 +77,15 @@ LL |     x - \"foo\"\n    |       ^ no implementation for `f64 - &str`\n    |\n    = help: the trait `Sub<&str>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Sub<f64>>\n-             <&f64 as Sub<&f64>>\n-             <f64 as Sub<&f64>>\n-             <f64 as Sub>\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n+             <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n              <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n \n error[E0277]: cannot subtract `{integer}` from `f64`\n@@ -95,15 +95,15 @@ LL |     x - y\n    |       ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Sub<f64>>\n-             <&f64 as Sub<&f64>>\n-             <f64 as Sub<&f64>>\n-             <f64 as Sub>\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n+             <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n              <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n \n error[E0277]: cannot multiply `u8` by `{float}`\n@@ -113,15 +113,15 @@ LL |     x * 100.0\n    |       ^ no implementation for `u8 * {float}`\n    |\n    = help: the trait `Mul<{float}>` is not implemented for `u8`\n-   = help: the following implementations were found:\n-             <&'a u8 as Mul<u8>>\n-             <&u8 as Mul<&u8>>\n-             <u8 as Mul<&u8>>\n-             <u8 as Mul>\n+   = help: the following other types implement trait `Mul`:\n              <&'a f32 as Mul<f32>>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n              <&'a i16 as Mul<i16>>\n+             <&'a i32 as Mul<i32>>\n+             <&'a i64 as Mul<i64>>\n+             <&'a i8 as Mul<i8>>\n+             <&'a isize as Mul<isize>>\n            and 49 others\n \n error[E0277]: cannot multiply `f64` by `&str`\n@@ -131,15 +131,15 @@ LL |     x * \"foo\"\n    |       ^ no implementation for `f64 * &str`\n    |\n    = help: the trait `Mul<&str>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Mul<f64>>\n-             <&f64 as Mul<&f64>>\n-             <f64 as Mul<&f64>>\n-             <f64 as Mul>\n+   = help: the following other types implement trait `Mul`:\n              <&'a f32 as Mul<f32>>\n+             <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n              <&'a i16 as Mul<i16>>\n              <&'a i32 as Mul<i32>>\n+             <&'a i64 as Mul<i64>>\n+             <&'a i8 as Mul<i8>>\n+             <&'a isize as Mul<isize>>\n            and 49 others\n \n error[E0277]: cannot multiply `f64` by `{integer}`\n@@ -149,15 +149,15 @@ LL |     x * y\n    |       ^ no implementation for `f64 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Mul<f64>>\n-             <&f64 as Mul<&f64>>\n-             <f64 as Mul<&f64>>\n-             <f64 as Mul>\n+   = help: the following other types implement trait `Mul`:\n              <&'a f32 as Mul<f32>>\n+             <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n              <&'a i16 as Mul<i16>>\n              <&'a i32 as Mul<i32>>\n+             <&'a i64 as Mul<i64>>\n+             <&'a i8 as Mul<i8>>\n+             <&'a isize as Mul<isize>>\n            and 49 others\n \n error[E0277]: cannot divide `u8` by `{float}`\n@@ -167,15 +167,15 @@ LL |     x / 100.0\n    |       ^ no implementation for `u8 / {float}`\n    |\n    = help: the trait `Div<{float}>` is not implemented for `u8`\n-   = help: the following implementations were found:\n-             <&'a u8 as Div<u8>>\n-             <&u8 as Div<&u8>>\n-             <u8 as Div<&u8>>\n-             <u8 as Div<NonZeroU8>>\n-             <u8 as Div>\n+   = help: the following other types implement trait `Div`:\n              <&'a f32 as Div<f32>>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n+             <&'a i16 as Div<i16>>\n+             <&'a i32 as Div<i32>>\n+             <&'a i64 as Div<i64>>\n+             <&'a i8 as Div<i8>>\n+             <&'a isize as Div<isize>>\n            and 54 others\n \n error[E0277]: cannot divide `f64` by `&str`\n@@ -185,15 +185,15 @@ LL |     x / \"foo\"\n    |       ^ no implementation for `f64 / &str`\n    |\n    = help: the trait `Div<&str>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Div<f64>>\n-             <&f64 as Div<&f64>>\n-             <f64 as Div<&f64>>\n-             <f64 as Div>\n+   = help: the following other types implement trait `Div`:\n              <&'a f32 as Div<f32>>\n+             <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n              <&'a i16 as Div<i16>>\n              <&'a i32 as Div<i32>>\n+             <&'a i64 as Div<i64>>\n+             <&'a i8 as Div<i8>>\n+             <&'a isize as Div<isize>>\n            and 54 others\n \n error[E0277]: cannot divide `f64` by `{integer}`\n@@ -203,15 +203,15 @@ LL |     x / y\n    |       ^ no implementation for `f64 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Div<f64>>\n-             <&f64 as Div<&f64>>\n-             <f64 as Div<&f64>>\n-             <f64 as Div>\n+   = help: the following other types implement trait `Div`:\n              <&'a f32 as Div<f32>>\n+             <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n              <&'a i16 as Div<i16>>\n              <&'a i32 as Div<i32>>\n+             <&'a i64 as Div<i64>>\n+             <&'a i8 as Div<i8>>\n+             <&'a isize as Div<isize>>\n            and 54 others\n \n error: aborting due to 12 previous errors"}, {"sha": "fd3996416b67a398a95e594e2f071468b2d1f701", "filename": "src/test/ui/numbers-arithmetic/suggest-float-literal.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsuggest-float-literal.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,15 +5,15 @@ LL |     x + 100\n    |       ^ no implementation for `f32 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f32`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n-             <&f32 as Add<&f32>>\n-             <f32 as Add<&f32>>\n-             <f32 as Add>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -27,15 +27,15 @@ LL |     x + 100\n    |       ^ no implementation for `f64 + {integer}`\n    |\n    = help: the trait `Add<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Add<f64>>\n-             <&f64 as Add<&f64>>\n-             <f64 as Add<&f64>>\n-             <f64 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n              <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -49,15 +49,15 @@ LL |     x - 100\n    |       ^ no implementation for `f32 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f32`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n-             <&f32 as Sub<&f32>>\n-             <f32 as Sub<&f32>>\n-             <f32 as Sub>\n              <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n              <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -71,15 +71,15 @@ LL |     x - 100\n    |       ^ no implementation for `f64 - {integer}`\n    |\n    = help: the trait `Sub<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Sub<f64>>\n-             <&f64 as Sub<&f64>>\n-             <f64 as Sub<&f64>>\n-             <f64 as Sub>\n+   = help: the following other types implement trait `Sub`:\n              <&'a f32 as Sub<f32>>\n+             <&'a f64 as Sub<f64>>\n              <&'a i128 as Sub<i128>>\n              <&'a i16 as Sub<i16>>\n              <&'a i32 as Sub<i32>>\n+             <&'a i64 as Sub<i64>>\n+             <&'a i8 as Sub<i8>>\n+             <&'a isize as Sub<isize>>\n            and 48 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -93,15 +93,15 @@ LL |     x * 100\n    |       ^ no implementation for `f32 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f32`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Mul`:\n              <&'a f32 as Mul<f32>>\n-             <&f32 as Mul<&f32>>\n-             <f32 as Mul<&f32>>\n-             <f32 as Mul>\n              <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n              <&'a i16 as Mul<i16>>\n              <&'a i32 as Mul<i32>>\n+             <&'a i64 as Mul<i64>>\n+             <&'a i8 as Mul<i8>>\n+             <&'a isize as Mul<isize>>\n            and 49 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -115,15 +115,15 @@ LL |     x * 100\n    |       ^ no implementation for `f64 * {integer}`\n    |\n    = help: the trait `Mul<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Mul<f64>>\n-             <&f64 as Mul<&f64>>\n-             <f64 as Mul<&f64>>\n-             <f64 as Mul>\n+   = help: the following other types implement trait `Mul`:\n              <&'a f32 as Mul<f32>>\n+             <&'a f64 as Mul<f64>>\n              <&'a i128 as Mul<i128>>\n              <&'a i16 as Mul<i16>>\n              <&'a i32 as Mul<i32>>\n+             <&'a i64 as Mul<i64>>\n+             <&'a i8 as Mul<i8>>\n+             <&'a isize as Mul<isize>>\n            and 49 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -137,15 +137,15 @@ LL |     x / 100\n    |       ^ no implementation for `f32 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f32`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Div`:\n              <&'a f32 as Div<f32>>\n-             <&f32 as Div<&f32>>\n-             <f32 as Div<&f32>>\n-             <f32 as Div>\n              <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n              <&'a i16 as Div<i16>>\n              <&'a i32 as Div<i32>>\n+             <&'a i64 as Div<i64>>\n+             <&'a i8 as Div<i8>>\n+             <&'a isize as Div<isize>>\n            and 54 others\n help: consider using a floating-point literal by writing it with `.0`\n    |\n@@ -159,15 +159,15 @@ LL |     x / 100\n    |       ^ no implementation for `f64 / {integer}`\n    |\n    = help: the trait `Div<{integer}>` is not implemented for `f64`\n-   = help: the following implementations were found:\n-             <&'a f64 as Div<f64>>\n-             <&f64 as Div<&f64>>\n-             <f64 as Div<&f64>>\n-             <f64 as Div>\n+   = help: the following other types implement trait `Div`:\n              <&'a f32 as Div<f32>>\n+             <&'a f64 as Div<f64>>\n              <&'a i128 as Div<i128>>\n              <&'a i16 as Div<i16>>\n              <&'a i32 as Div<i32>>\n+             <&'a i64 as Div<i64>>\n+             <&'a i8 as Div<i8>>\n+             <&'a isize as Div<isize>>\n            and 54 others\n help: consider using a floating-point literal by writing it with `.0`\n    |"}, {"sha": "ebe7f1f7a34a39cf9e613a55c21b41867c4b0d49", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -7,7 +7,7 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Index<Foo<usize>>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -20,7 +20,7 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Index<Foo<usize>>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -33,7 +33,7 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Index<Foo<usize>>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -44,7 +44,7 @@ LL |     Index::index(&[] as &[i32], 2u32);\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Index<Foo<usize>>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -55,7 +55,7 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Index<Foo<usize>>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n@@ -66,7 +66,7 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Index<Foo<usize>>`:\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n "}, {"sha": "e90d08187ed906d2e8fe3381cad0cc194ed7f523", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -15,7 +15,7 @@ LL |     x[..1i32];\n    |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `RangeTo<i32>`\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `SliceIndex<str>`:\n              <RangeTo<usize> as SliceIndex<[T]>>\n              <RangeTo<usize> as SliceIndex<str>>\n    = note: required because of the requirements on the impl of `Index<RangeTo<i32>>` for `[i32]`"}, {"sha": "96a899ecca581c929ca1d7fa19837e99d7acf6bc", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -9,10 +9,10 @@ LL | | }\n    | |_^ `main` can only return types that implement `Termination`\n    |\n    = help: the trait `Termination` is not implemented for `Result<f32, ParseFloatError>`\n-   = help: the following implementations were found:\n-             <Result<!, E> as Termination>\n-             <Result<(), E> as Termination>\n-             <Result<Infallible, E> as Termination>\n+   = help: the following other types implement trait `Termination`:\n+             Result<!, E>\n+             Result<(), E>\n+             Result<Infallible, E>\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL\n    |"}, {"sha": "81dd7d03f919cd2cc6d1ae75344ee870dd9fdd3b", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,15 +5,15 @@ LL |     foo(1 as u32 +\n    |                  ^ no implementation for `u32 + ()`\n    |\n    = help: the trait `Add<()>` is not implemented for `u32`\n-   = help: the following implementations were found:\n-             <&'a u32 as Add<u32>>\n-             <&u32 as Add<&u32>>\n-             <u32 as Add<&u32>>\n-             <u32 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to previous error"}, {"sha": "b7b92e0353485c2994bb9ce271f5ee4c31ab8a9e", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -7,7 +7,7 @@ LL |     foo(String::new());\n    |     required by a bound introduced by this call\n    |\n    = note: to coerce a `String` into a `&str`, use `&*` as a prefix\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `From<char>`:\n              <String as From<&String>>\n              <String as From<&mut str>>\n              <String as From<&str>>"}, {"sha": "0f3d0e59e19bc69bd91d4d139cbff58e657590fa", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `&[i8]: From<&[u8]>` is not satisfied\n LL |     let _: &[i8] = data.into();\n    |                         ^^^^ the trait `From<&[u8]>` is not implemented for `&[i8]`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `From<Mask<T, LANES>>`:\n              <[T; LANES] as From<Simd<T, LANES>>>\n              <[bool; LANES] as From<Mask<T, LANES>>>\n    = note: required because of the requirements on the impl of `Into<&[i8]>` for `&[u8]`"}, {"sha": "1d234518056fd309e8650f8e0ee568381887e604", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ fn strip_lf(s: &str) -> &str {\n     //~| NOTE expected an `FnMut<(char,)>` closure, found `u8`\n     //~| NOTE required by a bound introduced by this call\n     //~| HELP the trait `FnMut<(char,)>` is not implemented for `u8`\n-    //~| HELP the following other types implement trait `Pattern<'_>`:\n+    //~| HELP the following other types implement trait `Pattern<'a>`:\n     //~| NOTE required because of the requirements on the impl of `Pattern<'_>` for `u8`\n \n }"}, {"sha": "115539a6dc28d9cd083bee7f273f94d865436637", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -7,7 +7,7 @@ LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n    |       required by a bound introduced by this call\n    |\n    = help: the trait `FnMut<(char,)>` is not implemented for `u8`\n-   = help: the following other types implement trait `Pattern<'_>`:\n+   = help: the following other types implement trait `Pattern<'a>`:\n              &'b String\n              &'b [char; N]\n              &'b [char]"}, {"sha": "0220cf4127ebf4dfa52cb48729f2ded57d00d452", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,9 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n LL |     c.same_as(22)\n    |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n    |\n-   = help: the trait `CompareTo<i32>` is implemented for `i64`\n+   = help: the following other types implement trait `CompareTo<i64>`:\n+             <i64 as CompareTo<i64>>\n+             <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:30:7\n@@ -23,7 +25,9 @@ error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfi\n LL |     <dyn CompareToInts>::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n    |\n-   = help: the trait `CompareTo<i32>` is implemented for `i64`\n+   = help: the following other types implement trait `CompareTo<i64>`:\n+             <i64 as CompareTo<i64>>\n+             <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/repeated-supertrait-ambig.rs:38:5\n@@ -42,7 +46,7 @@ error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n LL |     assert_eq!(22_i64.same_as(22), true);\n    |                       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `i64`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `CompareTo<i64>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n "}, {"sha": "cf2e4edf9f0a9081e113ee2fec115b9c74ba6d07", "filename": "src/test/ui/traits/issue-79458.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-79458.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -7,10 +7,10 @@ LL | struct Foo<'a, T> {\n LL |     bar: &'a mut T\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `&mut T`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n-             <*const T as Clone>\n-             <*mut T as Clone>\n+   = help: the following other types implement trait `Clone`:\n+             &T\n+             *const T\n+             *mut T\n    = note: `Clone` is implemented for `&T`, but not for `&mut T`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a4686edb7175745ecab4d93a0ce30c3d60fb045c", "filename": "src/test/ui/traits/map-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmap-types.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Box<dyn Map<isize, isize>>: Map<usize, isize>` is\n LL |     let y: Box<dyn Map<usize, isize>> = Box::new(x);\n    |                                         ^^^^^^^^^^^ the trait `Map<usize, isize>` is not implemented for `Box<dyn Map<isize, isize>>`\n    |\n-   = help: the trait `Map<usize, isize>` is implemented for `HashMap<K, V>`\n+   = help: the trait `Map<K, V>` is implemented for `HashMap<K, V>`\n    = note: required for the cast to the object type `dyn Map<usize, isize>`\n \n error: aborting due to previous error"}, {"sha": "1b46252ae89ec03682b763d875e6fa34b8ad94d7", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -7,15 +7,15 @@ LL |     Ok(Err(123_i32)?)\n    |                    ^ the trait `From<i32>` is not implemented for `u8`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = help: the following implementations were found:\n-             <u8 as From<NonZeroU8>>\n-             <u8 as From<bool>>\n+   = help: the following other types implement trait `From<bool>`:\n              <f32 as From<i16>>\n              <f32 as From<i8>>\n              <f32 as From<u16>>\n              <f32 as From<u8>>\n              <f64 as From<f32>>\n              <f64 as From<i16>>\n+             <f64 as From<i32>>\n+             <f64 as From<i8>>\n            and 67 others\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n "}, {"sha": "2fe115927c036759c0b6d5216c6193ae954666bb", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n LL | fn foo() -> impl Foo<FooX> {\n    |             ^^^^^^^^^^^^^^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `Foo<u32>`:\n              <() as Foo<()>>\n              <() as Foo<u32>>\n "}, {"sha": "15deade2cd8f1bcb22ef04c778fd35ddb2970d59", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -65,15 +65,15 @@ LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    |                                                                  ^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `Add<u8>` is not implemented for `i32`\n-   = help: the following implementations were found:\n-             <&'a i32 as Add<i32>>\n-             <&i32 as Add<&i32>>\n-             <i32 as Add<&i32>>\n-             <i32 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to 7 previous errors"}, {"sha": "00f490c4653454585915322cc98a842727dadfb4", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -20,15 +20,15 @@ LL |     a = c + b * 5;\n    |           ^ no implementation for `usize + u16`\n    |\n    = help: the trait `Add<u16>` is not implemented for `usize`\n-   = help: the following implementations were found:\n-             <&'a usize as Add<usize>>\n-             <&usize as Add<&usize>>\n-             <usize as Add<&usize>>\n-             <usize as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error: aborting due to 3 previous errors"}, {"sha": "b6d02285bd237ecd49852af1e1f9352ffdef5729", "filename": "src/test/ui/typeck/issue-90101.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -6,7 +6,7 @@ LL |     func(Path::new(\"hello\").to_path_buf().to_string_lossy(), \"world\")\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n+   = help: the following other types implement trait `From<Box<Path>>`:\n              <PathBuf as From<&T>>\n              <PathBuf as From<Box<Path>>>\n              <PathBuf as From<Cow<'a, Path>>>"}, {"sha": "09208527210f987e4606c177a8638dca1d39124e", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef91519b45d2bbf0ce8c0180118160562eaaa0ca/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=ef91519b45d2bbf0ce8c0180118160562eaaa0ca", "patch": "@@ -5,15 +5,15 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n-   = help: the following implementations were found:\n-             <&'a i32 as Add<i32>>\n-             <&i32 as Add<&i32>>\n-             <i32 as Add<&i32>>\n-             <i32 as Add>\n+   = help: the following other types implement trait `Add`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>\n              <&'a i128 as Add<i128>>\n              <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n            and 48 others\n \n error[E0308]: mismatched types"}]}