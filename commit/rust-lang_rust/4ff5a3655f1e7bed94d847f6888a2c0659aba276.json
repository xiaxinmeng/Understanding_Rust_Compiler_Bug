{"sha": "4ff5a3655f1e7bed94d847f6888a2c0659aba276", "node_id": "C_kwDOAAsO6NoAKDRmZjVhMzY1NWYxZTdiZWQ5NGQ4NDdmNjg4OGEyYzA2NTlhYmEyNzY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-09T03:15:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-11T21:59:27Z"}, "message": "Speed up the \"builtin lints only\" case.\n\nThis commit partly undoes #104863, which combined the builtin lints pass\nwith other lints. This caused a slowdown, because often there are no\nother lints, and it's faster to do a pass with a single lint directly\nthan it is to do a combined pass with a `passes` vector containing a\nsingle lint.", "tree": {"sha": "91841931c3108d27071d548086276a1de54b8b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91841931c3108d27071d548086276a1de54b8b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff5a3655f1e7bed94d847f6888a2c0659aba276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff5a3655f1e7bed94d847f6888a2c0659aba276", "html_url": "https://github.com/rust-lang/rust/commit/4ff5a3655f1e7bed94d847f6888a2c0659aba276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff5a3655f1e7bed94d847f6888a2c0659aba276/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c53781800e50b2abc72c5b1542400eff48a8126", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c53781800e50b2abc72c5b1542400eff48a8126", "html_url": "https://github.com/rust-lang/rust/commit/3c53781800e50b2abc72c5b1542400eff48a8126"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "5f84d5c8b949575394d401a287bbe1b025563376", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ff5a3655f1e7bed94d847f6888a2c0659aba276/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff5a3655f1e7bed94d847f6888a2c0659aba276/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=4ff5a3655f1e7bed94d847f6888a2c0659aba276", "patch": "@@ -393,12 +393,27 @@ pub fn check_ast_node<'a>(\n         lint_buffer.unwrap_or_default(),\n     );\n \n+    // Note: `passes` is often empty. In that case, it's faster to run\n+    // `builtin_lints` directly rather than bundling it up into the\n+    // `RuntimeCombinedEarlyLintPass`.\n     let passes =\n         if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n-    let mut passes: Vec<EarlyLintPassObject> = passes.iter().map(|mk_pass| (mk_pass)()).collect();\n-    passes.push(Box::new(builtin_lints));\n-    let pass = RuntimeCombinedEarlyLintPass { passes: &mut passes[..] };\n+    if passes.is_empty() {\n+        check_ast_node_inner(sess, check_node, context, builtin_lints);\n+    } else {\n+        let mut passes: Vec<_> = passes.iter().map(|mk_pass| (mk_pass)()).collect();\n+        passes.push(Box::new(builtin_lints));\n+        let pass = RuntimeCombinedEarlyLintPass { passes: &mut passes[..] };\n+        check_ast_node_inner(sess, check_node, context, pass);\n+    }\n+}\n \n+pub fn check_ast_node_inner<'a, T: EarlyLintPass>(\n+    sess: &Session,\n+    check_node: impl EarlyCheckNode<'a>,\n+    context: EarlyContext<'_>,\n+    pass: T,\n+) {\n     let mut cx = EarlyContextAndPass { context, pass };\n \n     cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));"}, {"sha": "e2876938d70566477329cc94541c81478a3894f1", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4ff5a3655f1e7bed94d847f6888a2c0659aba276/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff5a3655f1e7bed94d847f6888a2c0659aba276/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=4ff5a3655f1e7bed94d847f6888a2c0659aba276", "patch": "@@ -349,11 +349,26 @@ pub(super) fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n         only_module: true,\n     };\n \n+    // Note: `passes` is often empty. In that case, it's faster to run\n+    // `builtin_lints` directly rather than bundling it up into the\n+    // `RuntimeCombinedLateLintPass`.\n     let mut passes: Vec<_> =\n         unerased_lint_store(tcx).late_module_passes.iter().map(|mk_pass| (mk_pass)(tcx)).collect();\n-    passes.push(Box::new(builtin_lints));\n-    let pass = RuntimeCombinedLateLintPass { passes: &mut passes[..] };\n+    if passes.is_empty() {\n+        late_lint_mod_inner(tcx, module_def_id, context, builtin_lints);\n+    } else {\n+        passes.push(Box::new(builtin_lints));\n+        let pass = RuntimeCombinedLateLintPass { passes: &mut passes[..] };\n+        late_lint_mod_inner(tcx, module_def_id, context, pass);\n+    }\n+}\n \n+fn late_lint_mod_inner<'tcx, T: LateLintPass<'tcx>>(\n+    tcx: TyCtxt<'tcx>,\n+    module_def_id: LocalDefId,\n+    context: LateContext<'tcx>,\n+    pass: T,\n+) {\n     let mut cx = LateContextAndPass { context, pass };\n \n     let (module, _span, hir_id) = tcx.hir().get_module(module_def_id);\n@@ -380,11 +395,25 @@ fn late_lint_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(tcx: TyCtxt<'tcx>, builti\n         only_module: false,\n     };\n \n+    // Note: `passes` is often empty. In that case, it's faster to run\n+    // `builtin_lints` directly rather than bundling it up into the\n+    // `RuntimeCombinedLateLintPass`.\n     let mut passes: Vec<_> =\n         unerased_lint_store(tcx).late_passes.iter().map(|mk_pass| (mk_pass)(tcx)).collect();\n-    passes.push(Box::new(builtin_lints));\n-    let pass = RuntimeCombinedLateLintPass { passes: &mut passes[..] };\n+    if passes.is_empty() {\n+        late_lint_crate_inner(tcx, context, builtin_lints);\n+    } else {\n+        passes.push(Box::new(builtin_lints));\n+        let pass = RuntimeCombinedLateLintPass { passes: &mut passes[..] };\n+        late_lint_crate_inner(tcx, context, pass);\n+    }\n+}\n \n+fn late_lint_crate_inner<'tcx, T: LateLintPass<'tcx>>(\n+    tcx: TyCtxt<'tcx>,\n+    context: LateContext<'tcx>,\n+    pass: T,\n+) {\n     let mut cx = LateContextAndPass { context, pass };\n \n     // Visit the whole crate."}]}