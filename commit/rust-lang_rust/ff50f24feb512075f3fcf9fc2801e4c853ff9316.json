{"sha": "ff50f24feb512075f3fcf9fc2801e4c853ff9316", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNTBmMjRmZWI1MTIwNzVmM2ZjZjlmYzI4MDFlNGM4NTNmZjkzMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-03T03:57:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-03T03:57:18Z"}, "message": "auto merge of #17753 : aturon/rust/error-interop, r=alexcrichton\n\nThis PR:\r\n\r\n* Adds the error interoperation traits (`Error` and `FromError`) to a new module, `std::error`, as per [RFC 70](https://github.com/rust-lang/rfcs/blob/master/active/0070-error-chaining.md). Note that this module must live in `std` in order to refer to `String`.\r\n\r\n    Note that, until multidispatch lands, the `FromError` trait cannot be\r\nusefully implemented outside of the blanket impl given here.\r\n\r\n* Incorporates `std::error::FromError` into the `try!` macro.\r\n\r\n* Implements `Error` for most existing error enumerations.\r\n\r\nCloses #17747", "tree": {"sha": "9842337cf63e33f73bed8ba4ee681a6a3e9549f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9842337cf63e33f73bed8ba4ee681a6a3e9549f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff50f24feb512075f3fcf9fc2801e4c853ff9316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff50f24feb512075f3fcf9fc2801e4c853ff9316", "html_url": "https://github.com/rust-lang/rust/commit/ff50f24feb512075f3fcf9fc2801e4c853ff9316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff50f24feb512075f3fcf9fc2801e4c853ff9316/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc5c3b31b294a19c369e7b1926528610230686d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc5c3b31b294a19c369e7b1926528610230686d", "html_url": "https://github.com/rust-lang/rust/commit/dcc5c3b31b294a19c369e7b1926528610230686d"}, {"sha": "38e0745e3f5e6c772c973c1d0b73abb0b20faba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e0745e3f5e6c772c973c1d0b73abb0b20faba0", "html_url": "https://github.com/rust-lang/rust/commit/38e0745e3f5e6c772c973c1d0b73abb0b20faba0"}], "stats": {"total": 198, "additions": 191, "deletions": 7}, "files": [{"sha": "0d4979a357512974ea7d07c9915325392e0c0dc0", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -37,8 +37,6 @@ pub use ops::{Shl, Shr};\n pub use ops::{Index, IndexMut};\n pub use ops::{Slice, SliceMut};\n pub use ops::{Fn, FnMut, FnOnce};\n-pub use option::{Option, Some, None};\n-pub use result::{Result, Ok, Err};\n \n // Reexported functions\n pub use iter::range;\n@@ -56,7 +54,9 @@ pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Signed, Unsigned, Float};\n pub use num::{Primitive, Int, ToPrimitive, FromPrimitive};\n+pub use option::{Option, Some, None};\n pub use ptr::RawPtr;\n+pub use result::{Result, Ok, Err};\n pub use str::{Str, StrSlice};\n pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};"}, {"sha": "d3ed0dbd99eff3fc17654bbc6739a9358acbdf45", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -660,7 +660,7 @@ fn write_out_deps(sess: &Session,\n         _ => return,\n     };\n \n-    let result = (|| {\n+    let result = (|| -> io::IoResult<()> {\n         // Build a list of files used to compile the output and\n         // write Makefile-compatible dependency rules\n         let files: Vec<String> = sess.codemap().files.borrow()"}, {"sha": "e69a0ea7929cba65db2209c715fba478bcc1495c", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -13,6 +13,7 @@\n //! Base64 binary-to-text encoding\n use std::fmt;\n use std::string;\n+use std::error;\n \n /// Available encoding character sets\n pub enum CharacterSet {\n@@ -178,6 +179,19 @@ impl fmt::Show for FromBase64Error {\n     }\n }\n \n+impl error::Error for FromBase64Error {\n+    fn description(&self) -> &str {\n+        match *self {\n+            InvalidBase64Byte(_, _) => \"invalid character\",\n+            InvalidBase64Length => \"invalid length\",\n+        }\n+    }\n+\n+    fn detail(&self) -> Option<String> {\n+        Some(self.to_string())\n+    }\n+}\n+\n impl<'a> FromBase64 for &'a str {\n     /**\n      * Convert any base64 encoded string (literal, `@`, `&`, or `~`)"}, {"sha": "b591d35c67c09b2de4c7ee2251c10a2b598d24c0", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -13,6 +13,7 @@\n //! Hex binary-to-text encoding\n use std::fmt;\n use std::string;\n+use std::error;\n \n /// A trait for converting a value to hexadecimal encoding\n pub trait ToHex {\n@@ -77,6 +78,20 @@ impl fmt::Show for FromHexError {\n     }\n }\n \n+impl error::Error for FromHexError {\n+    fn description(&self) -> &str {\n+        match *self {\n+            InvalidHexCharacter(_, _) => \"invalid character\",\n+            InvalidHexLength => \"invalid length\",\n+        }\n+    }\n+\n+    fn detail(&self) -> Option<String> {\n+        Some(self.to_string())\n+    }\n+}\n+\n+\n impl<'a> FromHex for &'a str {\n     /**\n      * Convert any hexadecimal encoded string (literal, `@`, `&`, or `~`)"}, {"sha": "cde2dfac3782159ee204c423f09e2e17c3b4cfda", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -313,6 +313,11 @@ fn io_error_to_error(io: io::IoError) -> ParserError {\n     IoError(io.kind, io.desc)\n }\n \n+impl std::error::Error for DecoderError {\n+    fn description(&self) -> &str { \"decoder error\" }\n+    fn detail(&self) -> Option<std::string::String> { Some(self.to_string()) }\n+}\n+\n pub type EncodeResult = io::IoResult<()>;\n pub type DecodeResult<T> = Result<T, DecoderError>;\n "}, {"sha": "6bb9f4b473bc1931cc6ba98d2d6fec4c7de6b4b1", "filename": "src/libstd/error.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -0,0 +1,111 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Traits for working with Errors.\n+//!\n+//! # The `Error` trait\n+//!\n+//! `Error` is a trait representing the basic expectations for error values,\n+//! i.e. values of type `E` in `Result<T, E>`. At a minimum, errors must provide\n+//! a description, but they may optionally provide additional detail and cause\n+//! chain information:\n+//!\n+//! ```\n+//! trait Error: Send {\n+//!     fn description(&self) -> &str;\n+//!\n+//!     fn detail(&self) -> Option<String> { None }\n+//!     fn cause(&self) -> Option<&Error> { None }\n+//! }\n+//! ```\n+//!\n+//! The `cause` method is generally used when errors cross \"abstraction\n+//! boundaries\", i.e.  when a one module must report an error that is \"caused\"\n+//! by an error from a lower-level module. This setup makes it possible for the\n+//! high-level module to provide its own errors that do not commit to any\n+//! particular implementation, but also reveal some of its implementation for\n+//! debugging via `cause` chains.\n+//!\n+//! The trait inherits from `Any` to allow *downcasting*: converting from a\n+//! trait object to a specific concrete type when applicable.\n+//!\n+//! # The `FromError` trait\n+//!\n+//! `FromError` is a simple trait that expresses conversions between different\n+//! error types. To provide maximum flexibility, it does not require either of\n+//! the types to actually implement the `Error` trait, although this will be the\n+//! common case.\n+//!\n+//! The main use of this trait is in the `try!` macro, which uses it to\n+//! automatically convert a given error to the error specified in a function's\n+//! return type.\n+//!\n+//! For example,\n+//!\n+//! ```\n+//! use std::error::FromError;\n+//! use std::io::{File, IoError};\n+//! use std::os::{MemoryMap, MapError};\n+//! use std::path::Path;\n+//!\n+//! enum MyError {\n+//!     Io(IoError),\n+//!     Map(MapError)\n+//! }\n+//!\n+//! impl FromError<IoError> for MyError {\n+//!     fn from_error(err: IoError) -> MyError {\n+//!         Io(err)\n+//!     }\n+//! }\n+//!\n+//! impl FromError<MapError> for MyError {\n+//!     fn from_error(err: MapError) -> MyError {\n+//!         Map(err)\n+//!     }\n+//! }\n+//!\n+//! #[allow(unused_variables)]\n+//! fn open_and_map() -> Result<(), MyError> {\n+//!     let f = try!(File::open(&Path::new(\"foo.txt\")));\n+//!     let m = try!(MemoryMap::new(0, &[]));\n+//!     // do something interesting here...\n+//!     Ok(())\n+//! }\n+//! ```\n+\n+use option::{Option, None};\n+use kinds::Send;\n+use string::String;\n+\n+/// Base functionality for all errors in Rust.\n+pub trait Error: Send {\n+    /// A short description of the error; usually a static string.\n+    fn description(&self) -> &str;\n+\n+    /// A detailed description of the error, usually including dynamic information.\n+    fn detail(&self) -> Option<String> { None }\n+\n+    /// The lower-level cause of this error, if any.\n+    fn cause(&self) -> Option<&Error> { None }\n+}\n+\n+/// A trait for types that can be converted from a given error type `E`.\n+pub trait FromError<E> {\n+    /// Perform the conversion.\n+    fn from_error(err: E) -> Self;\n+}\n+\n+// Any type is convertable from itself\n+impl<E> FromError<E> for E {\n+    fn from_error(err: E) -> E {\n+        err\n+    }\n+}"}, {"sha": "3dcd8d792a4d8f0d6f1248afe165e74618797a68", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -222,7 +222,9 @@ responding to errors that may occur while attempting to read the numbers.\n #![deny(unused_must_use)]\n \n use char::Char;\n+use clone::Clone;\n use default::Default;\n+use error::{FromError, Error};\n use fmt;\n use int;\n use iter::Iterator;\n@@ -433,6 +435,22 @@ impl fmt::Show for IoError {\n     }\n }\n \n+impl Error for IoError {\n+    fn description(&self) -> &str {\n+        self.desc\n+    }\n+\n+    fn detail(&self) -> Option<String> {\n+        self.detail.clone()\n+    }\n+}\n+\n+impl FromError<IoError> for Box<Error> {\n+    fn from_error(err: IoError) -> Box<Error> {\n+        box err\n+    }\n+}\n+\n /// A list specifying general categories of I/O error.\n #[deriving(PartialEq, Eq, Clone, Show)]\n pub enum IoErrorKind {"}, {"sha": "f10a1d5e5edc7a16bdb00a3ffd558549f4afb901", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -218,6 +218,7 @@ pub mod time;\n \n /* Common traits */\n \n+pub mod error;\n pub mod from_str;\n pub mod num;\n pub mod to_string;\n@@ -257,6 +258,7 @@ mod std {\n     pub use hash;\n \n     pub use comm; // used for select!()\n+    pub use error; // used for try!()\n     pub use fmt; // used for any formatting strings\n     pub use io; // used for println!()\n     pub use local_data; // used for local_data_key!()"}, {"sha": "55e364b1961a2ae825ff064d508ecc944f925a57", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -317,8 +317,13 @@ macro_rules! local_data_key(\n /// error if the value of the expression is `Err`. For more information, see\n /// `std::io`.\n #[macro_export]\n-macro_rules! try(\n-    ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n+macro_rules! try (\n+    ($expr:expr) => ({\n+        match $expr {\n+            Ok(val) => val,\n+            Err(err) => return Err(::std::error::FromError::from_error(err))\n+        }\n+    })\n )\n \n /// Create a `std::vec::Vec` containing the arguments."}, {"sha": "9846f7b653e2b254471aae448810dc559b50beaf", "filename": "src/libstd/os.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -32,11 +32,13 @@\n #![allow(non_snake_case)]\n \n use clone::Clone;\n+use error::{FromError, Error};\n use fmt;\n use io::{IoResult, IoError};\n use iter::Iterator;\n use libc::{c_void, c_int};\n use libc;\n+use boxed::Box;\n use ops::Drop;\n use option::{Some, None, Option};\n use os;\n@@ -48,6 +50,7 @@ use slice::{AsSlice, ImmutableSlice, MutableSlice, ImmutablePartialEqSlice};\n use slice::CloneableVector;\n use str::{Str, StrSlice, StrAllocating};\n use string::String;\n+use to_string::ToString;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use vec::Vec;\n \n@@ -1437,6 +1440,17 @@ impl fmt::Show for MapError {\n     }\n }\n \n+impl Error for MapError {\n+    fn description(&self) -> &str { \"memory map error\" }\n+    fn detail(&self) -> Option<String> { Some(self.to_string()) }\n+}\n+\n+impl FromError<MapError> for Box<Error> {\n+    fn from_error(err: MapError) -> Box<Error> {\n+        box err\n+    }\n+}\n+\n #[cfg(unix)]\n impl MemoryMap {\n     /// Create a new mapping with the given `options`, at least `min_len` bytes"}, {"sha": "47befb2286bde15ec26f7a839c6f9420bf40beb0", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff50f24feb512075f3fcf9fc2801e4c853ff9316/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=ff50f24feb512075f3fcf9fc2801e4c853ff9316", "patch": "@@ -48,8 +48,6 @@\n #[doc(no_inline)] pub use ops::{Index, IndexMut};\n #[doc(no_inline)] pub use ops::{Slice, SliceMut};\n #[doc(no_inline)] pub use ops::{Fn, FnMut, FnOnce};\n-#[doc(no_inline)] pub use option::{Option, Some, None};\n-#[doc(no_inline)] pub use result::{Result, Ok, Err};\n \n // Reexported functions\n #[doc(no_inline)] pub use from_str::from_str;\n@@ -73,8 +71,10 @@\n #[doc(no_inline)] pub use num::{Signed, Unsigned, Primitive, Int, Float};\n #[doc(no_inline)] pub use num::{FloatMath, ToPrimitive, FromPrimitive};\n #[doc(no_inline)] pub use boxed::Box;\n+#[doc(no_inline)] pub use option::{Option, Some, None};\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n #[doc(no_inline)] pub use ptr::{RawPtr, RawMutPtr};\n+#[doc(no_inline)] pub use result::{Result, Ok, Err};\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek};\n #[doc(no_inline)] pub use str::{Str, StrVector, StrSlice};\n #[doc(no_inline)] pub use str::{IntoMaybeOwned, StrAllocating, UnicodeStrSlice};"}]}