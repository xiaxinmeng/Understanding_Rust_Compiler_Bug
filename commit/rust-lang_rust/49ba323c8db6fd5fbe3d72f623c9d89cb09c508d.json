{"sha": "49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YmEzMjNjOGRiNmZkNWZiZTNkNzJmNjIzYzlkODljYjA5YzUwOGQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-28T23:57:49Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-30T17:44:21Z"}, "message": "spec. graph: track defining and finalizing impls", "tree": {"sha": "a16b9ed8506b9d796235893dd1941c0903f056ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16b9ed8506b9d796235893dd1941c0903f056ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "html_url": "https://github.com/rust-lang/rust/commit/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1e7495a41bac25797a7b82aee18f350e406bc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e7495a41bac25797a7b82aee18f350e406bc2a", "html_url": "https://github.com/rust-lang/rust/commit/a1e7495a41bac25797a7b82aee18f350e406bc2a"}], "stats": {"total": 156, "additions": 93, "deletions": 63}, "files": [{"sha": "d47e2d75fba355434e13eba76d77f6a34455fc0b", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -6,6 +6,7 @@ pub mod query;\n pub mod select;\n pub mod specialization_graph;\n mod structural_impls;\n+pub mod util;\n \n use crate::mir::interpret::ErrorHandled;\n use crate::ty::subst::SubstsRef;"}, {"sha": "f66f94fe8c16860d9888731ef57af44e8f67ed33", "filename": "src/librustc_middle/traits/specialization_graph.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -154,9 +154,45 @@ impl Iterator for Ancestors<'_> {\n     }\n }\n \n-pub struct NodeItem {\n-    pub node: Node,\n+/// Information about the most specialized definition of an associated item.\n+pub struct LeafDef {\n+    /// The associated item described by this `LeafDef`.\n     pub item: ty::AssocItem,\n+\n+    /// The node in the specialization graph containing the definition of `item`.\n+    pub defining_node: Node,\n+\n+    /// The \"top-most\" (ie. least specialized) specialization graph node that finalized the\n+    /// definition of `item`.\n+    ///\n+    /// Example:\n+    ///\n+    /// ```\n+    /// trait Tr {\n+    ///     fn assoc(&self);\n+    /// }\n+    ///\n+    /// impl<T> Tr for T {\n+    ///     default fn assoc(&self) {}\n+    /// }\n+    ///\n+    /// impl Tr for u8 {}\n+    /// ```\n+    ///\n+    /// If we start the leaf definition search at `impl Tr for u8`, that impl will be the\n+    /// `finalizing_node`, while `defining_node` will be the generic impl.\n+    ///\n+    /// If the leaf definition search is started at the generic impl, `finalizing_node` will be\n+    /// `None`, since the most specialized impl we found still allows overriding the method\n+    /// (doesn't finalize it).\n+    pub finalizing_node: Option<Node>,\n+}\n+\n+impl LeafDef {\n+    /// Returns whether this definition is known to not be further specializable.\n+    pub fn is_final(&self) -> bool {\n+        self.finalizing_node.is_some()\n+    }\n }\n \n impl<'tcx> Ancestors<'tcx> {\n@@ -167,11 +203,27 @@ impl<'tcx> Ancestors<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         trait_item_name: Ident,\n         trait_item_kind: ty::AssocKind,\n-    ) -> Option<NodeItem> {\n+    ) -> Option<LeafDef> {\n         let trait_def_id = self.trait_def_id;\n+        let mut finalizing_node = None;\n+\n         self.find_map(|node| {\n-            node.item(tcx, trait_item_name, trait_item_kind, trait_def_id)\n-                .map(|item| NodeItem { node, item })\n+            if let Some(item) = node.item(tcx, trait_item_name, trait_item_kind, trait_def_id) {\n+                if finalizing_node.is_none() {\n+                    let is_specializable = item.defaultness.is_default()\n+                        || super::util::impl_is_default(tcx, node.def_id());\n+\n+                    if !is_specializable {\n+                        finalizing_node = Some(node);\n+                    }\n+                }\n+\n+                Some(LeafDef { item, defining_node: node, finalizing_node })\n+            } else {\n+                // Item not mentioned. This \"finalizes\" any defaulted item provided by an ancestor.\n+                finalizing_node = Some(node);\n+                None\n+            }\n         })\n     }\n }"}, {"sha": "cb29cf0760ebc384b4f0f4f3ca81e9e2770b2c01", "filename": "src/librustc_middle/traits/util.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_middle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_middle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Futil.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -0,0 +1,17 @@\n+use crate::ty::TyCtxt;\n+use rustc_hir as hir;\n+use rustc_hir::def_id::DefId;\n+\n+pub fn impl_is_default(tcx: TyCtxt<'_>, node_item_def_id: DefId) -> bool {\n+    match tcx.hir().as_local_hir_id(node_item_def_id) {\n+        Some(hir_id) => {\n+            let item = tcx.hir().expect_item(hir_id);\n+            if let hir::ItemKind::Impl { defaultness, .. } = item.kind {\n+                defaultness.is_default()\n+            } else {\n+                false\n+            }\n+        }\n+        None => tcx.impl_defaultness(node_item_def_id).is_default(),\n+    }\n+}"}, {"sha": "d6204975a7bf23f0d3a43dd23470ff59390b56b8", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -64,8 +64,7 @@ pub use self::structural_match::NonStructuralMatchTy;\n pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{\n-    get_vtable_index_of_object_method, impl_is_default, impl_item_is_final,\n-    predicate_for_trait_def, upcast_choices,\n+    get_vtable_index_of_object_method, impl_item_is_final, predicate_for_trait_def, upcast_choices,\n };\n pub use self::util::{\n     supertrait_def_ids, supertraits, transitive_bounds, SupertraitDefIds, Supertraits,"}, {"sha": "cd89111a17712a3d7d8f1cd7efe0110e2627d510", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -1015,49 +1015,21 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     assoc_ty_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)\n                         .map_err(|ErrorReported| ())?;\n \n-                let is_default = if node_item.node.is_from_trait() {\n-                    // If true, the impl inherited a `type Foo = Bar`\n-                    // given in the trait, which is implicitly default.\n-                    // Otherwise, the impl did not specify `type` and\n-                    // neither did the trait:\n-                    //\n-                    // ```rust\n-                    // trait Foo { type T; }\n-                    // impl Foo for Bar { }\n-                    // ```\n-                    //\n-                    // This is an error, but it will be\n-                    // reported in `check_impl_items_against_trait`.\n-                    // We accept it here but will flag it as\n-                    // an error when we confirm the candidate\n-                    // (which will ultimately lead to `normalize_to_error`\n-                    // being invoked).\n-                    false\n-                } else {\n-                    // If we're looking at a trait *impl*, the item is\n-                    // specializable if the impl or the item are marked\n-                    // `default`.\n-                    node_item.item.defaultness.is_default()\n-                        || super::util::impl_is_default(selcx.tcx(), node_item.node.def_id())\n-                };\n-\n-                match is_default {\n+                if node_item.is_final() {\n                     // Non-specializable items are always projectable\n-                    false => true,\n-\n+                    true\n+                } else {\n                     // Only reveal a specializable default if we're past type-checking\n                     // and the obligation is monomorphic, otherwise passes such as\n                     // transmute checking and polymorphic MIR optimizations could\n                     // get a result which isn't correct for all monomorphizations.\n-                    true if obligation.param_env.reveal == Reveal::All => {\n+                    if obligation.param_env.reveal == Reveal::All {\n                         // NOTE(eddyb) inference variables can resolve to parameters, so\n                         // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n                         let poly_trait_ref =\n                             selcx.infcx().resolve_vars_if_possible(&poly_trait_ref);\n                         !poly_trait_ref.needs_infer() && !poly_trait_ref.needs_subst()\n-                    }\n-\n-                    true => {\n+                    } else {\n                         debug!(\n                             \"assemble_candidates_from_impls: not eligible due to default: \\\n                              assoc_ty={} predicate={}\",\n@@ -1422,7 +1394,8 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         return Progress { ty: tcx.types.err, obligations: nested };\n     }\n     let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n-    let substs = translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.node);\n+    let substs =\n+        translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);\n     let ty = if let ty::AssocKind::OpaqueTy = assoc_ty.item.kind {\n         let item_substs = InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         tcx.mk_opaque(assoc_ty.item.def_id, item_substs)\n@@ -1447,7 +1420,7 @@ fn assoc_ty_def(\n     selcx: &SelectionContext<'_, '_>,\n     impl_def_id: DefId,\n     assoc_ty_def_id: DefId,\n-) -> Result<specialization_graph::NodeItem, ErrorReported> {\n+) -> Result<specialization_graph::LeafDef, ErrorReported> {\n     let tcx = selcx.tcx();\n     let assoc_ty_name = tcx.associated_item(assoc_ty_def_id).ident;\n     let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;\n@@ -1464,9 +1437,10 @@ fn assoc_ty_def(\n         if matches!(item.kind, ty::AssocKind::Type | ty::AssocKind::OpaqueTy)\n             && tcx.hygienic_eq(item.ident, assoc_ty_name, trait_def_id)\n         {\n-            return Ok(specialization_graph::NodeItem {\n-                node: specialization_graph::Node::Impl(impl_def_id),\n+            return Ok(specialization_graph::LeafDef {\n                 item: *item,\n+                defining_node: impl_node,\n+                finalizing_node: if item.defaultness.is_default() { None } else { Some(impl_node) },\n             });\n         }\n     }"}, {"sha": "f98d8f2fabf6ad3cba2dbbd3399ec8522f09be3e", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -141,7 +141,7 @@ pub fn find_associated_item<'tcx>(\n                         param_env,\n                         impl_data.impl_def_id,\n                         substs,\n-                        node_item.node,\n+                        node_item.defining_node,\n                     );\n                     infcx.tcx.erase_regions(&substs)\n                 });"}, {"sha": "c28628678a9354c56ac92d32fea35fff9b17d2ff", "filename": "src/librustc_trait_selection/traits/util.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -4,11 +4,11 @@ use smallvec::smallvec;\n use smallvec::SmallVec;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n+use rustc_middle::traits::util::impl_is_default;\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n \n@@ -651,20 +651,6 @@ pub fn generator_trait_ref_and_outputs(\n     ty::Binder::bind((trait_ref, sig.skip_binder().yield_ty, sig.skip_binder().return_ty))\n }\n \n-pub fn impl_is_default(tcx: TyCtxt<'_>, node_item_def_id: DefId) -> bool {\n-    match tcx.hir().as_local_hir_id(node_item_def_id) {\n-        Some(hir_id) => {\n-            let item = tcx.hir().expect_item(hir_id);\n-            if let hir::ItemKind::Impl { defaultness, .. } = item.kind {\n-                defaultness.is_default()\n-            } else {\n-                false\n-            }\n-        }\n-        None => tcx.impl_defaultness(node_item_def_id).is_default(),\n-    }\n-}\n-\n pub fn impl_item_is_final(tcx: TyCtxt<'_>, assoc_item: &ty::AssocItem) -> bool {\n     assoc_item.defaultness.is_final() && !impl_is_default(tcx, assoc_item.container.id())\n }"}, {"sha": "c85b5a4f2a258f23e2286fdb223fe8794d1b5948", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ba323c8db6fd5fbe3d72f623c9d89cb09c508d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=49ba323c8db6fd5fbe3d72f623c9d89cb09c508d", "patch": "@@ -110,6 +110,7 @@ use rustc_infer::infer::{self, InferCtxt, InferOk, InferResult, TyCtxtInferExt};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::traits::util::impl_is_default;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n@@ -1942,7 +1943,7 @@ fn check_specialization_validity<'tcx>(\n             // grandparent. In that case, if parent is a `default impl`, inherited items use the\n             // \"defaultness\" from the grandparent, else they are final.\n             None => {\n-                if traits::impl_is_default(tcx, parent_impl.def_id()) {\n+                if impl_is_default(tcx, parent_impl.def_id()) {\n                     None\n                 } else {\n                     Some(Err(parent_impl.def_id()))\n@@ -2114,10 +2115,10 @@ fn check_impl_items_against_trait<'tcx>(\n         for trait_item in tcx.associated_items(impl_trait_ref.def_id).in_definition_order() {\n             let is_implemented = ancestors\n                 .leaf_def(tcx, trait_item.ident, trait_item.kind)\n-                .map(|node_item| !node_item.node.is_from_trait())\n+                .map(|node_item| !node_item.defining_node.is_from_trait())\n                 .unwrap_or(false);\n \n-            if !is_implemented && !traits::impl_is_default(tcx, impl_id) {\n+            if !is_implemented && !impl_is_default(tcx, impl_id) {\n                 if !trait_item.defaultness.has_value() {\n                     missing_items.push(*trait_item);\n                 }"}]}