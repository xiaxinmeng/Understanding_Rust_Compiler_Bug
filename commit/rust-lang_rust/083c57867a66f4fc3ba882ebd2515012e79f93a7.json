{"sha": "083c57867a66f4fc3ba882ebd2515012e79f93a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4M2M1Nzg2N2E2NmY0ZmMzYmE4ODJlYmQyNTE1MDEyZTc5ZjkzYTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-27T11:46:21Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-27T11:46:21Z"}, "message": "refactor transmute lints into a single match", "tree": {"sha": "b70c1bf7aa9f04a322c5caa6e372b34ca6afef9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b70c1bf7aa9f04a322c5caa6e372b34ca6afef9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083c57867a66f4fc3ba882ebd2515012e79f93a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXcRINAAoJEFbW7qD8Z6xGtvQP/3GsU/HRFWNRyg24JcN7J4Md\n42F1LBQL+pVG5w/uWiW/rnSKkDa1p6r2eTDXTgaMAFjHAmxZvZaXtzM+9aRNTMW6\nt/SGyhYOi7wPj1FFpYkwA72OGrZdu1t/9r6DlajnaLWYROlUn/ruQhw1107V4eCn\n+m1i5xhVNDSj/pU6hH2H+/kypmd1kX4PvJtMGYBcUhR9hyfJOc7K+yJSL4/601Gm\nYg1jV9c/TGFO4MtfTUcfWNOVmVXgOvmO43YDZOSne21FM4kzvxri1ZzgFMTycLZe\nRUnS/MpjP1fX17y5JjfbKM5jpqJOjIBW94P0Iw7vYJ6dxBQS3j0n9mw/9lX9JHEi\n7TQjkxuReaztLKBWYuMqlJ/vMwdbMS6sxMiJ3b8dpUKONhjlRP/wWO09uTEFCdDn\nK4IIChoiEvoXcONY9u/ugCjSpAOHv5tJ96kGjGj0FiU5/o63JpTRZetQqZ9GRmaK\nglsfHKBSbrwjY1L1wbomdvXAHh5JupPcV2ZLmQdNC3+kC7+JWwOGpT90Chkw3N2c\nm8Sdt1wDH6G93Ne/lIorSyXbpLQZbxp1OIYPtQcVSE5UoMXKYW483cIKAWZ3kCd/\ns8P7CpwXxP4BsiG/1W1qAcF8VMXlJlk3j69bk23pPxQHZiQGpPMnLZI8704j2mG1\n5rwCdgfvr2SBPFyloMjT\n=NCOI\n-----END PGP SIGNATURE-----", "payload": "tree b70c1bf7aa9f04a322c5caa6e372b34ca6afef9b\nparent 60cc87baba4f5ea457f4b696c00fb15031bfecb6\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467027981 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467027981 +0200\n\nrefactor transmute lints into a single match"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083c57867a66f4fc3ba882ebd2515012e79f93a7", "html_url": "https://github.com/rust-lang/rust/commit/083c57867a66f4fc3ba882ebd2515012e79f93a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083c57867a66f4fc3ba882ebd2515012e79f93a7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60cc87baba4f5ea457f4b696c00fb15031bfecb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60cc87baba4f5ea457f4b696c00fb15031bfecb6", "html_url": "https://github.com/rust-lang/rust/commit/60cc87baba4f5ea457f4b696c00fb15031bfecb6"}], "stats": {"total": 104, "additions": 48, "deletions": 56}, "files": [{"sha": "718111bee654a8d8a6802420ac7783c8c2603acf", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 48, "deletions": 56, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/083c57867a66f4fc3ba882ebd2515012e79f93a7/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083c57867a66f4fc3ba882ebd2515012e79f93a7/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=083c57867a66f4fc3ba882ebd2515012e79f93a7", "patch": "@@ -1,6 +1,5 @@\n use rustc::lint::*;\n use rustc::ty::TypeVariants::{TyRawPtr, TyRef};\n-use rustc::ty;\n use rustc::hir::*;\n use utils::{match_def_path, paths, snippet_opt, span_lint, span_lint_and_then};\n \n@@ -66,66 +65,59 @@ impl LateLintPass for Transmute {\n                     let from_ty = cx.tcx.expr_ty(&args[0]);\n                     let to_ty = cx.tcx.expr_ty(e);\n \n-                    if from_ty == to_ty {\n-                        span_lint(cx,\n-                                  USELESS_TRANSMUTE,\n-                                  e.span,\n-                                  &format!(\"transmute from a type (`{}`) to itself\", from_ty));\n-                    } else if is_ptr_to(to_ty, from_ty) {\n-                        span_lint(cx,\n-                                  CROSSPOINTER_TRANSMUTE,\n-                                  e.span,\n-                                  &format!(\"transmute from a type (`{}`) to a pointer to that type (`{}`)\",\n-                                           from_ty,\n-                                           to_ty));\n-                    } else if is_ptr_to(from_ty, to_ty) {\n-                        span_lint(cx,\n-                                  CROSSPOINTER_TRANSMUTE,\n-                                  e.span,\n-                                  &format!(\"transmute from a type (`{}`) to the type that it points to (`{}`)\",\n-                                           from_ty,\n-                                           to_ty));\n-                    } else {\n-                        check_ptr_to_ref(cx, from_ty, to_ty, e, &args[0]);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n+                    match (&from_ty.sty, &to_ty.sty) {\n+                        _ if from_ty == to_ty => span_lint(\n+                            cx,\n+                            USELESS_TRANSMUTE,\n+                            e.span,\n+                            &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n+                        ),\n+                        (&TyRawPtr(from_ptr), _) if from_ptr.ty == to_ty => span_lint(\n+                            cx,\n+                            CROSSPOINTER_TRANSMUTE,\n+                            e.span,\n+                            &format!(\"transmute from a type (`{}`) to the type that it points to (`{}`)\",\n+                                     from_ty,\n+                                     to_ty),\n+                        ),\n+                        (_, &TyRawPtr(to_ptr)) if to_ptr.ty == from_ty => span_lint(\n+                            cx,\n+                            CROSSPOINTER_TRANSMUTE,\n+                            e.span,\n+                            &format!(\"transmute from a type (`{}`) to a pointer to that type (`{}`)\",\n+                                     from_ty,\n+                                     to_ty),\n+                        ),\n+                        (&TyRawPtr(from_pty), &TyRef(_, to_rty)) => span_lint_and_then(\n+                            cx,\n+                            TRANSMUTE_PTR_TO_REF,\n+                            e.span,\n+                            &format!(\"transmute from a pointer type (`{}`) to a reference type (`{}`)\",\n+                                    from_ty,\n+                                    to_ty),\n+                            |db| {\n+                                if let Some(arg) = snippet_opt(cx, args[0].span) {\n+                                    let (deref, cast) = if to_rty.mutbl == Mutability::MutMutable {\n+                                        (\"&mut *\", \"*mut\")\n+                                    } else {\n+                                        (\"&*\", \"*const\")\n+                                    };\n \n-fn is_ptr_to(from: ty::Ty, to: ty::Ty) -> bool {\n-    if let TyRawPtr(from_ptr) = from.sty {\n-        from_ptr.ty == to\n-    } else {\n-        false\n-    }\n-}\n-\n-fn check_ptr_to_ref<'tcx>(cx: &LateContext, from_ty: ty::Ty<'tcx>, to_ty: ty::Ty<'tcx>, e: &Expr, arg: &Expr) {\n-    if let TyRawPtr(ref from_pty) = from_ty.sty {\n-        if let TyRef(_, ref to_rty) = to_ty.sty {\n-            let mess = format!(\"transmute from a pointer type (`{}`) to a reference type (`{}`)\",\n-                               from_ty,\n-                               to_ty);\n-            span_lint_and_then(cx, TRANSMUTE_PTR_TO_REF, e.span, &mess, |db| {\n-                if let Some(arg) = snippet_opt(cx, arg.span) {\n-                    let (deref, cast) = if to_rty.mutbl == Mutability::MutMutable {\n-                        (\"&mut *\", \"*mut\")\n-                    } else {\n-                        (\"&*\", \"*const\")\n-                    };\n \n+                                    let sugg = if from_pty.ty == to_rty.ty {\n+                                        format!(\"{}{}\", deref, arg)\n+                                    } else {\n+                                        format!(\"{}({} as {} {})\", deref, arg, cast, to_rty.ty)\n+                                    };\n \n-                    let sugg = if from_pty.ty == to_rty.ty {\n-                        format!(\"{}{}\", deref, arg)\n-                    } else {\n-                        format!(\"{}({} as {} {})\", deref, arg, cast, to_rty.ty)\n+                                    db.span_suggestion(e.span, \"try\", sugg);\n+                                }\n+                            },\n+                        ),\n+                        _ => return,\n                     };\n-\n-                    db.span_suggestion(e.span, \"try\", sugg);\n                 }\n-            });\n+            }\n         }\n     }\n }"}]}