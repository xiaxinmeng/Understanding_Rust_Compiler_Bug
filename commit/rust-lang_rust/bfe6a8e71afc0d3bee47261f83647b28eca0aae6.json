{"sha": "bfe6a8e71afc0d3bee47261f83647b28eca0aae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZTZhOGU3MWFmYzBkM2JlZTQ3MjYxZjgzNjQ3YjI4ZWNhMGFhZTY=", "commit": {"author": {"name": "Jesse Bakker", "email": "github@jessebakker.com", "date": "2021-01-02T14:33:23Z"}, "committer": {"name": "Jesse Bakker", "email": "github@jessebakker.com", "date": "2021-01-02T16:10:46Z"}, "message": "Add support for MatchExpr to extract_assigment assist", "tree": {"sha": "963ce272982317b1cdaafb1640a3e07a9b1784e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963ce272982317b1cdaafb1640a3e07a9b1784e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe6a8e71afc0d3bee47261f83647b28eca0aae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe6a8e71afc0d3bee47261f83647b28eca0aae6", "html_url": "https://github.com/rust-lang/rust/commit/bfe6a8e71afc0d3bee47261f83647b28eca0aae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe6a8e71afc0d3bee47261f83647b28eca0aae6/comments", "author": {"login": "Jesse-Bakker", "id": 22473248, "node_id": "MDQ6VXNlcjIyNDczMjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/22473248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jesse-Bakker", "html_url": "https://github.com/Jesse-Bakker", "followers_url": "https://api.github.com/users/Jesse-Bakker/followers", "following_url": "https://api.github.com/users/Jesse-Bakker/following{/other_user}", "gists_url": "https://api.github.com/users/Jesse-Bakker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jesse-Bakker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jesse-Bakker/subscriptions", "organizations_url": "https://api.github.com/users/Jesse-Bakker/orgs", "repos_url": "https://api.github.com/users/Jesse-Bakker/repos", "events_url": "https://api.github.com/users/Jesse-Bakker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jesse-Bakker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jesse-Bakker", "id": 22473248, "node_id": "MDQ6VXNlcjIyNDczMjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/22473248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jesse-Bakker", "html_url": "https://github.com/Jesse-Bakker", "followers_url": "https://api.github.com/users/Jesse-Bakker/followers", "following_url": "https://api.github.com/users/Jesse-Bakker/following{/other_user}", "gists_url": "https://api.github.com/users/Jesse-Bakker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jesse-Bakker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jesse-Bakker/subscriptions", "organizations_url": "https://api.github.com/users/Jesse-Bakker/orgs", "repos_url": "https://api.github.com/users/Jesse-Bakker/repos", "events_url": "https://api.github.com/users/Jesse-Bakker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jesse-Bakker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31204e3590a59a6c0cbae53d111b699d92fb229f", "url": "https://api.github.com/repos/rust-lang/rust/commits/31204e3590a59a6c0cbae53d111b699d92fb229f", "html_url": "https://github.com/rust-lang/rust/commit/31204e3590a59a6c0cbae53d111b699d92fb229f"}], "stats": {"total": 101, "additions": 94, "deletions": 7}, "files": [{"sha": "281cf5d24e225c4c838372792bf2b55ff38f84ff", "filename": "crates/assists/src/handlers/extract_assignment.rs", "status": "modified", "additions": 94, "deletions": 7, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/bfe6a8e71afc0d3bee47261f83647b28eca0aae6/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe6a8e71afc0d3bee47261f83647b28eca0aae6/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs?ref=bfe6a8e71afc0d3bee47261f83647b28eca0aae6", "patch": "@@ -40,25 +40,52 @@ use crate::{\n pub(crate) fn extract_assigment(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let name = ctx.find_node_at_offset::<ast::NameRef>()?.as_name();\n \n-    let if_statement = ctx.find_node_at_offset::<ast::IfExpr>()?;\n+    let (old_stmt, new_stmt) = if let Some(if_expr) = ctx.find_node_at_offset::<ast::IfExpr>() {\n+        (\n+            ast::Expr::cast(if_expr.syntax().to_owned())?,\n+            exprify_if(&if_expr, &name)?.indent(if_expr.indent_level()),\n+        )\n+    } else if let Some(match_expr) = ctx.find_node_at_offset::<ast::MatchExpr>() {\n+        (ast::Expr::cast(match_expr.syntax().to_owned())?, exprify_match(&match_expr, &name)?)\n+    } else {\n+        return None;\n+    };\n \n-    let new_stmt = exprify_if(&if_statement, &name)?.indent(if_statement.indent_level());\n     let expr_stmt = make::expr_stmt(new_stmt);\n \n     acc.add(\n         AssistId(\"extract_assignment\", AssistKind::RefactorExtract),\n         \"Extract assignment\",\n-        if_statement.syntax().text_range(),\n+        old_stmt.syntax().text_range(),\n         move |edit| {\n-            edit.replace(if_statement.syntax().text_range(), format!(\"{} = {};\", name, expr_stmt));\n+            edit.replace(old_stmt.syntax().text_range(), format!(\"{} = {};\", name, expr_stmt));\n         },\n     )\n }\n \n+fn exprify_match(match_expr: &ast::MatchExpr, name: &hir::Name) -> Option<ast::Expr> {\n+    let new_arm_list = match_expr\n+        .match_arm_list()?\n+        .arms()\n+        .map(|arm| {\n+            if let ast::Expr::BlockExpr(block) = arm.expr()? {\n+                let new_block = exprify_block(&block, name)?.indent(block.indent_level());\n+                Some(arm.replace_descendant(block, new_block))\n+            } else {\n+                None\n+            }\n+        })\n+        .collect::<Option<Vec<_>>>()?;\n+    let new_arm_list = match_expr\n+        .match_arm_list()?\n+        .replace_descendants(match_expr.match_arm_list()?.arms().zip(new_arm_list));\n+    Some(make::expr_match(match_expr.expr()?, new_arm_list))\n+}\n+\n fn exprify_if(statement: &ast::IfExpr, name: &hir::Name) -> Option<ast::Expr> {\n     let then_branch = exprify_block(&statement.then_branch()?, name)?;\n     let else_branch = match statement.else_branch()? {\n-        ast::ElseBranch::Block(block) => ast::ElseBranch::Block(exprify_block(&block, name)?),\n+        ast::ElseBranch::Block(ref block) => ast::ElseBranch::Block(exprify_block(block, name)?),\n         ast::ElseBranch::IfExpr(expr) => {\n             mark::hit!(test_extract_assigment_chained_if);\n             ast::ElseBranch::IfExpr(ast::IfExpr::cast(\n@@ -97,7 +124,7 @@ mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     #[test]\n-    fn test_extract_assignment() {\n+    fn test_extract_assignment_if() {\n         check_assist(\n             extract_assigment,\n             r#\"\n@@ -123,6 +150,45 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_extract_assignment_match() {\n+        check_assist(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    match 1 {\n+        1 => {\n+            <|>a = 2;\n+        },\n+        2 => {\n+            a = 3;\n+        },\n+        3 => {\n+            a = 4;\n+        }\n+    }\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    a = match 1 {\n+        1 => {\n+            2\n+        },\n+        2 => {\n+            3\n+        },\n+        3 => {\n+            4\n+        }\n+    };\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_assignment_not_last_not_applicable() {\n         check_assist_not_applicable(\n@@ -222,7 +288,7 @@ fn foo() {\n     }\n \n     #[test]\n-    fn extract_assignment_missing_assigment_not_applicable() {\n+    fn extract_assignment_if_missing_assigment_not_applicable() {\n         check_assist_not_applicable(\n             extract_assigment,\n             r#\"\n@@ -232,6 +298,27 @@ fn foo() {\n     if true {\n         <|>a = 2;\n     } else {}\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_assignment_match_missing_assigment_not_applicable() {\n+        check_assist_not_applicable(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    match 1 {\n+        1 => {\n+            <|>a = 2;\n+        },\n+        2 => {\n+            a = 3;\n+        },\n+        3 => {},\n+    }\n }\"#,\n         )\n     }"}]}