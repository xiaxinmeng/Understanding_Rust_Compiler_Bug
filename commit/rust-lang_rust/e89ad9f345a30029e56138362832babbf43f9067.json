{"sha": "e89ad9f345a30029e56138362832babbf43f9067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OWFkOWYzNDVhMzAwMjllNTYxMzgzNjI4MzJiYWJiZjQzZjkwNjc=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-08-09T09:30:05Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-08-09T09:30:05Z"}, "message": "Allow ambiguous autoderef with defininte guidance.\n\nThis enables autoderefing types with inference variables inside.", "tree": {"sha": "ad267c77e92858fa5d1fd027ebf0bab48249f44e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad267c77e92858fa5d1fd027ebf0bab48249f44e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89ad9f345a30029e56138362832babbf43f9067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89ad9f345a30029e56138362832babbf43f9067", "html_url": "https://github.com/rust-lang/rust/commit/e89ad9f345a30029e56138362832babbf43f9067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89ad9f345a30029e56138362832babbf43f9067/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14898729f403109cfe890c1d1e8fe1da346546f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/14898729f403109cfe890c1d1e8fe1da346546f8", "html_url": "https://github.com/rust-lang/rust/commit/14898729f403109cfe890c1d1e8fe1da346546f8"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "0be337fc2df88c81fc8dde89343cecae73a641de", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e89ad9f345a30029e56138362832babbf43f9067/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89ad9f345a30029e56138362832babbf43f9067/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=e89ad9f345a30029e56138362832babbf43f9067", "patch": "@@ -14,8 +14,8 @@ use log::{info, warn};\n \n use crate::{\n     db::HirDatabase, static_lifetime, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds,\n-    DebruijnIndex, Environment, InEnvironment, Interner, ProjectionTyExt, Solution, Substitution,\n-    Ty, TyBuilder, TyKind,\n+    ConstrainedSubst, DebruijnIndex, Environment, Guidance, InEnvironment, Interner,\n+    ProjectionTyExt, Solution, Substitution, Ty, TyBuilder, TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: Limit = Limit::new(10);\n@@ -187,7 +187,8 @@ fn deref_by_trait(\n     let solution = db.trait_solve(krate, canonical)?;\n \n     match &solution {\n-        Solution::Unique(vars) => {\n+        Solution::Unique(Canonical { value: ConstrainedSubst { subst, .. }, binders })\n+        | Solution::Ambig(Guidance::Definite(Canonical { value: subst, binders })) => {\n             // FIXME: vars may contain solutions for any inference variables\n             // that happened to be inside ty. To correctly handle these, we\n             // would have to pass the solution up to the inference context, but\n@@ -203,8 +204,8 @@ fn deref_by_trait(\n             // assumptions will be broken. We would need to properly introduce\n             // new variables in that case\n \n-            for i in 1..vars.binders.len(&Interner) {\n-                if vars.value.subst.at(&Interner, i - 1).assert_ty_ref(&Interner).kind(&Interner)\n+            for i in 1..binders.len(&Interner) {\n+                if subst.at(&Interner, i - 1).assert_ty_ref(&Interner).kind(&Interner)\n                     != &TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, i - 1))\n                 {\n                     warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty.goal, solution);\n@@ -214,13 +215,11 @@ fn deref_by_trait(\n             // FIXME: we remove lifetime variables here since they can confuse\n             // the method resolution code later\n             Some(fixup_lifetime_variables(Canonical {\n-                value: vars\n-                    .value\n-                    .subst\n-                    .at(&Interner, vars.value.subst.len(&Interner) - 1)\n+                value: subst\n+                    .at(&Interner, subst.len(&Interner) - 1)\n                     .assert_ty_ref(&Interner)\n                     .clone(),\n-                binders: vars.binders.clone(),\n+                binders: binders.clone(),\n             }))\n         }\n         Solution::Ambig(_) => {"}, {"sha": "de1b0e9f298069600c9bf0ba4bfbc35eae053347", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e89ad9f345a30029e56138362832babbf43f9067/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89ad9f345a30029e56138362832babbf43f9067/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=e89ad9f345a30029e56138362832babbf43f9067", "patch": "@@ -648,6 +648,25 @@ fn test(s: Arc<S>) {\n     );\n }\n \n+#[test]\n+fn deref_trait_with_implicit_sized_requirement_on_inference_var() {\n+    check_types(\n+        r#\"\n+//- minicore: deref\n+struct Foo<T>;\n+impl<T> core::ops::Deref for Foo<T> {\n+    type Target = ();\n+}\n+fn test() {\n+    let foo = Foo;\n+    *foo;\n+  //^^^^ ()\n+    let _: Foo<u8> = foo;\n+}\n+\"#,\n+    )\n+}\n+\n #[test]\n fn obligation_from_function_clause() {\n     check_types("}]}