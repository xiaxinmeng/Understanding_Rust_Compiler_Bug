{"sha": "403cdd84a4e9f01848445255078cce6bcebae8e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwM2NkZDg0YTRlOWYwMTg0ODQ0NTI1NTA3OGNjZTZiY2ViYWU4ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-13T13:01:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-13T13:01:31Z"}, "message": "auto merge of #7765 : blake2-ppc/rust/ord-default-methods, r=huonw\n\nRust will allow to supply default methods for all four methods, but we\r\ndon't have any nice error reporting for the case where at least one\r\nmethod must be implemented, but it's arbitrary which.\r\n\r\nSo in this case, we require `lt`, but allow implementing the others if needed.", "tree": {"sha": "36e91c61a895424f6ad72f061316ad82f6d64c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36e91c61a895424f6ad72f061316ad82f6d64c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/403cdd84a4e9f01848445255078cce6bcebae8e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/403cdd84a4e9f01848445255078cce6bcebae8e3", "html_url": "https://github.com/rust-lang/rust/commit/403cdd84a4e9f01848445255078cce6bcebae8e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/403cdd84a4e9f01848445255078cce6bcebae8e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9eb86823049c2eff98e74fcac8ae75cc8760f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9eb86823049c2eff98e74fcac8ae75cc8760f33", "html_url": "https://github.com/rust-lang/rust/commit/a9eb86823049c2eff98e74fcac8ae75cc8760f33"}, {"sha": "36f20423c31601c7b2e4f94368e79f44146cb064", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f20423c31601c7b2e4f94368e79f44146cb064", "html_url": "https://github.com/rust-lang/rust/commit/36f20423c31601c7b2e4f94368e79f44146cb064"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "77d4e945aae1706cf58d7b80caf23a13b32c2f5f", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/403cdd84a4e9f01848445255078cce6bcebae8e3/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403cdd84a4e9f01848445255078cce6bcebae8e3/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=403cdd84a4e9f01848445255078cce6bcebae8e3", "patch": "@@ -157,19 +157,20 @@ pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n /**\n * Trait for values that can be compared for a sort-order.\n *\n-* Eventually this may be simplified to only require\n-* an `le` method, with the others generated from\n-* default implementations. However it should remain\n-* possible to implement the others separately, for\n-* compatibility with floating-point NaN semantics\n+* Ord only requires implementation of the `lt` method,\n+* with the others generated from default implementations.\n+*\n+* However it remains possible to implement the others separately,\n+* for compatibility with floating-point NaN semantics\n * (cf. IEEE 754-2008 section 5.11).\n */\n+#[allow(default_methods)] // NOTE: Remove when allowed in stage0\n #[lang=\"ord\"]\n pub trait Ord {\n     fn lt(&self, other: &Self) -> bool;\n-    fn le(&self, other: &Self) -> bool;\n-    fn ge(&self, other: &Self) -> bool;\n-    fn gt(&self, other: &Self) -> bool;\n+    fn le(&self, other: &Self) -> bool { !other.lt(self) }\n+    fn gt(&self, other: &Self) -> bool {  other.lt(self) }\n+    fn ge(&self, other: &Self) -> bool { !self.lt(other) }\n }\n \n /// The equivalence relation. Two values may be equivalent even if they are"}, {"sha": "9a3fff453f3a0cee5089ced283494485d68c233c", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/403cdd84a4e9f01848445255078cce6bcebae8e3/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403cdd84a4e9f01848445255078cce6bcebae8e3/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=403cdd84a4e9f01848445255078cce6bcebae8e3", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n struct thing(uint);\n-impl Ord for thing { //~ ERROR missing method `gt`\n-    fn lt(&self, other: &thing) -> bool { **self < **other }\n+impl Ord for thing { //~ ERROR missing method `lt`\n     fn le(&self, other: &thing) -> bool { **self < **other }\n     fn ge(&self, other: &thing) -> bool { **self < **other }\n }"}, {"sha": "0dc5e7eb6ce22956afd97e63b786eb95113f9ca5", "filename": "src/test/run-pass/cmp-default.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/403cdd84a4e9f01848445255078cce6bcebae8e3/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403cdd84a4e9f01848445255078cce6bcebae8e3/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=403cdd84a4e9f01848445255078cce6bcebae8e3", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test default methods in Ord\n+//\n+struct Int(int);\n+\n+impl Ord for Int {\n+    fn lt(&self, other: &Int) -> bool {\n+        **self < **other\n+    }\n+}\n+\n+struct RevInt(int);\n+\n+impl Ord for RevInt {\n+    fn lt(&self, other: &RevInt) -> bool {\n+        **self > **other\n+    }\n+}\n+\n+pub fn main() {\n+    assert!(Int(2) >  Int(1));\n+    assert!(Int(2) >= Int(1));\n+    assert!(Int(1) >= Int(1));\n+    assert!(Int(1) <  Int(2));\n+    assert!(Int(1) <= Int(2));\n+    assert!(Int(1) <= Int(1));\n+\n+    assert!(RevInt(2) <  RevInt(1));\n+    assert!(RevInt(2) <= RevInt(1));\n+    assert!(RevInt(1) <= RevInt(1));\n+    assert!(RevInt(1) >  RevInt(2));\n+    assert!(RevInt(1) >= RevInt(2));\n+    assert!(RevInt(1) >= RevInt(1));\n+}"}]}