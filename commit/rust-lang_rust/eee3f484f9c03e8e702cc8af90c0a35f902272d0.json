{"sha": "eee3f484f9c03e8e702cc8af90c0a35f902272d0", "node_id": "C_kwDOAAsO6NoAKGVlZTNmNDg0ZjljMDNlOGU3MDJjYzhhZjkwYzBhMzVmOTAyMjcyZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-28T05:01:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-28T05:01:08Z"}, "message": "Rollup merge of #109565 - WaffleLapkin:better_docs_for_e0223, r=oli-obk\n\nImprove documentation for E0223\n\nSee discussion in https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Inconsistency.20in.20prohibiting.20.60Type.3A.3AAssocType.60", "tree": {"sha": "5e8221182055846234a0c76a6a76500ee19a1fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e8221182055846234a0c76a6a76500ee19a1fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eee3f484f9c03e8e702cc8af90c0a35f902272d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkInSUCRBK7hj4Ov3rIwAA6f4IAJ5xK/v2kaxCwKIM2djxswql\nwgjySRpHtHToCfuUGRBYCCBWW3DxRRhlVO8f3oyipAtMDkL9I7KMu9emMxY6LCyc\ntS8OZ7yi+5WIehRKAuxPPlWwhq6Fp+HBwakOBn8Yu8HUjmWKsS3lAT0qC8d5FRIn\nEfWGNsY0bWAEhEJq4Z+HBSYexJkIue2jsoy4L9+dADODDxG8f/b04UlQoWhgPj3D\n6u8MLBvk2j/hEedHuiClnHE25Y7ON7sz2u+bY7gxH4hHsxNngyrkIN/DqpQ36JEI\nnyPoNvj/KygGad8AcR//oyQB2gMELqhfxGSZxITx9yZGN+Iz9CWy1lfvGD5xTYE=\n=6zLq\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e8221182055846234a0c76a6a76500ee19a1fbf\nparent a7c07cf7315c8ed74723d0e251ef01847e75a892\nparent 3c4fabc341c1fa854104b95a8daf8465a3c50a7a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679979668 +0200\ncommitter GitHub <noreply@github.com> 1679979668 +0200\n\nRollup merge of #109565 - WaffleLapkin:better_docs_for_e0223, r=oli-obk\n\nImprove documentation for E0223\n\nSee discussion in https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Inconsistency.20in.20prohibiting.20.60Type.3A.3AAssocType.60\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eee3f484f9c03e8e702cc8af90c0a35f902272d0", "html_url": "https://github.com/rust-lang/rust/commit/eee3f484f9c03e8e702cc8af90c0a35f902272d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eee3f484f9c03e8e702cc8af90c0a35f902272d0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c07cf7315c8ed74723d0e251ef01847e75a892", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c07cf7315c8ed74723d0e251ef01847e75a892", "html_url": "https://github.com/rust-lang/rust/commit/a7c07cf7315c8ed74723d0e251ef01847e75a892"}, {"sha": "3c4fabc341c1fa854104b95a8daf8465a3c50a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4fabc341c1fa854104b95a8daf8465a3c50a7a", "html_url": "https://github.com/rust-lang/rust/commit/3c4fabc341c1fa854104b95a8daf8465a3c50a7a"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "ba5f00528218d155859d827152bcebf66942018d", "filename": "compiler/rustc_error_codes/src/error_codes/E0223.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eee3f484f9c03e8e702cc8af90c0a35f902272d0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0223.md", "raw_url": "https://github.com/rust-lang/rust/raw/eee3f484f9c03e8e702cc8af90c0a35f902272d0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0223.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0223.md?ref=eee3f484f9c03e8e702cc8af90c0a35f902272d0", "patch": "@@ -3,31 +3,33 @@ An attempt was made to retrieve an associated type, but the type was ambiguous.\n Erroneous code example:\n \n ```compile_fail,E0223\n-trait MyTrait {type X; }\n+trait Trait { type X; }\n \n fn main() {\n-    let foo: MyTrait::X;\n+    let foo: Trait::X;\n }\n ```\n \n-The problem here is that we're attempting to take the type of X from MyTrait.\n-Unfortunately, the type of X is not defined, because it's only made concrete in\n-implementations of the trait. A working version of this code might look like:\n+The problem here is that we're attempting to take the associated type of `X`\n+from `Trait`. Unfortunately, the type of `X` is not defined, because it's only\n+made concrete in implementations of the trait. A working version of this code\n+might look like:\n \n ```\n-trait MyTrait {type X; }\n-struct MyStruct;\n+trait Trait { type X; }\n \n-impl MyTrait for MyStruct {\n+struct Struct;\n+impl Trait for Struct {\n     type X = u32;\n }\n \n fn main() {\n-    let foo: <MyStruct as MyTrait>::X;\n+    let foo: <Struct as Trait>::X;\n }\n ```\n \n-This syntax specifies that we want the X type from MyTrait, as made concrete in\n-MyStruct. The reason that we cannot simply use `MyStruct::X` is that MyStruct\n-might implement two different traits with identically-named associated types.\n-This syntax allows disambiguation between the two.\n+This syntax specifies that we want the associated type `X` from `Struct`'s\n+implementation of `Trait`.\n+\n+Due to internal limitations of the current compiler implementation we cannot\n+simply use `Struct::X`."}]}