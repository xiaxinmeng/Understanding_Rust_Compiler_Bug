{"sha": "541aa8a27039b196df626193886f39373dd09b0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MWFhOGEyNzAzOWIxOTZkZjYyNjE5Mzg4NmYzOTM3M2RkMDliMGI=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2017-02-06T20:26:32Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2017-02-07T02:13:50Z"}, "message": "Introduce ReprOptions, a struct for holding info from the repr attributes.  This effectively deprecates lookup_repr_hints.", "tree": {"sha": "5a757e7f14830df3154eb8b105d4d1b3eb98bdcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a757e7f14830df3154eb8b105d4d1b3eb98bdcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/541aa8a27039b196df626193886f39373dd09b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/541aa8a27039b196df626193886f39373dd09b0b", "html_url": "https://github.com/rust-lang/rust/commit/541aa8a27039b196df626193886f39373dd09b0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/541aa8a27039b196df626193886f39373dd09b0b/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324b175174c19b8be4592df11e65e0c4b6fee9d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/324b175174c19b8be4592df11e65e0c4b6fee9d3", "html_url": "https://github.com/rust-lang/rust/commit/324b175174c19b8be4592df11e65e0c4b6fee9d3"}], "stats": {"total": 108, "additions": 77, "deletions": 31}, "files": [{"sha": "6203679a510585ef03ae82a7e475d5d44a022725", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=541aa8a27039b196df626193886f39373dd09b0b", "patch": "@@ -26,6 +26,7 @@ use middle::resolve_lifetime;\n use middle::stability;\n use mir::Mir;\n use ty::subst::{Kind, Substs};\n+use ty::ReprOptions;\n use traits;\n use ty::{self, TraitRef, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants, Slice};\n@@ -672,9 +673,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn alloc_adt_def(self,\n                          did: DefId,\n                          kind: AdtKind,\n-                         variants: Vec<ty::VariantDef>)\n+                         variants: Vec<ty::VariantDef>,\n+                         repr: ReprOptions)\n                          -> &'gcx ty::AdtDef {\n-        let def = ty::AdtDef::new(self, did, kind, variants);\n+        let def = ty::AdtDef::new(self, did, kind, variants, repr);\n         self.global_arenas.adt_def.alloc(def)\n     }\n "}, {"sha": "beb286108a034cfd7e86181a6c04aa939a76fd35", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=541aa8a27039b196df626193886f39373dd09b0b", "patch": "@@ -1327,7 +1327,8 @@ pub struct AdtDef {\n     pub did: DefId,\n     pub variants: Vec<VariantDef>,\n     destructor: Cell<Option<DefId>>,\n-    flags: Cell<AdtFlags>\n+    flags: Cell<AdtFlags>,\n+    pub repr: ReprOptions,\n }\n \n impl PartialEq for AdtDef {\n@@ -1356,11 +1357,38 @@ impl<'tcx> serialize::UseSpecializedDecodable for &'tcx AdtDef {}\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum AdtKind { Struct, Union, Enum }\n \n+/// Represents the repr options provided by the user,\n+#[derive(Copy, Clone, Eq, PartialEq, RustcEncodable, RustcDecodable, Default)]\n+pub struct ReprOptions {\n+    pub c: bool,\n+    pub packed: bool,\n+    pub simd: bool,\n+    pub int: Option<attr::IntType>,\n+}\n+\n+impl ReprOptions {\n+    pub fn new<'a, 'gcx, 'tcx>(tcx: &TyCtxt<'a, 'gcx, 'tcx>, did: DefId) -> ReprOptions {\n+        let mut ret = ReprOptions::default();\n+        let attrs = tcx.lookup_repr_hints(did);\n+        for r in attrs.iter() {\n+            match *r {\n+                attr::ReprExtern => ret.c = true,\n+                attr::ReprPacked => ret.packed = true,\n+                attr::ReprSimd => ret.simd = true,\n+                attr::ReprInt(i) => ret.int = Some(i),\n+                attr::ReprAny => (),\n+            }\n+        }\n+        ret\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> AdtDef {\n     fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n            did: DefId,\n            kind: AdtKind,\n-           variants: Vec<VariantDef>) -> Self {\n+           variants: Vec<VariantDef>,\n+           repr: ReprOptions) -> Self {\n         let mut flags = AdtFlags::NO_ADT_FLAGS;\n         let attrs = tcx.get_attrs(did);\n         if attr::contains_name(&attrs, \"fundamental\") {\n@@ -1385,6 +1413,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             variants: variants,\n             flags: Cell::new(flags),\n             destructor: Cell::new(None),\n+            repr: repr,\n         }\n     }\n "}, {"sha": "bb99be20f64d30ed46e4c0e1a6f53bc7605782ea", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=541aa8a27039b196df626193886f39373dd09b0b", "patch": "@@ -425,8 +425,8 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::ForeignImmStatic => Def::Static(did, false),\n             EntryKind::MutStatic |\n             EntryKind::ForeignMutStatic => Def::Static(did, true),\n-            EntryKind::Struct(_) => Def::Struct(did),\n-            EntryKind::Union(_) => Def::Union(did),\n+            EntryKind::Struct(_, _) => Def::Struct(did),\n+            EntryKind::Union(_, _) => Def::Union(did),\n             EntryKind::Fn(_) |\n             EntryKind::ForeignFn(_) => Def::Fn(did),\n             EntryKind::Method(_) => Def::Method(did),\n@@ -435,7 +435,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Mod(_) => Def::Mod(did),\n             EntryKind::Variant(_) => Def::Variant(did),\n             EntryKind::Trait(_) => Def::Trait(did),\n-            EntryKind::Enum => Def::Enum(did),\n+            EntryKind::Enum(_) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did),\n \n             EntryKind::ForeignMod |\n@@ -519,8 +519,8 @@ impl<'a, 'tcx> CrateMetadata {\n                    -> (ty::VariantDef, Option<DefIndex>) {\n         let data = match item.kind {\n             EntryKind::Variant(data) |\n-            EntryKind::Struct(data) |\n-            EntryKind::Union(data) => data.decode(self),\n+            EntryKind::Struct(data, _) |\n+            EntryKind::Union(data, _) => data.decode(self),\n             _ => bug!(),\n         };\n \n@@ -547,7 +547,7 @@ impl<'a, 'tcx> CrateMetadata {\n         let item = self.entry(item_id);\n         let did = self.local_def_id(item_id);\n         let mut ctor_index = None;\n-        let variants = if let EntryKind::Enum = item.kind {\n+        let variants = if let EntryKind::Enum(_) = item.kind {\n             item.children\n                 .decode(self)\n                 .map(|index| {\n@@ -561,14 +561,14 @@ impl<'a, 'tcx> CrateMetadata {\n             ctor_index = struct_ctor;\n             vec![variant]\n         };\n-        let kind = match item.kind {\n-            EntryKind::Enum => ty::AdtKind::Enum,\n-            EntryKind::Struct(_) => ty::AdtKind::Struct,\n-            EntryKind::Union(_) => ty::AdtKind::Union,\n+        let (kind, repr) = match item.kind {\n+            EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),\n+            EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),\n+            EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n \n-        let adt = tcx.alloc_adt_def(did, kind, variants);\n+        let adt = tcx.alloc_adt_def(did, kind, variants, repr);\n         if let Some(ctor_index) = ctor_index {\n             // Make adt definition available through constructor id as well.\n             tcx.adt_defs.borrow_mut().insert(self.local_def_id(ctor_index), adt);\n@@ -881,16 +881,16 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind {\n         match self.entry(node_id).kind {\n-            EntryKind::Struct(data) |\n-            EntryKind::Union(data) |\n+            EntryKind::Struct(data, _) |\n+            EntryKind::Union(data, _) |\n             EntryKind::Variant(data) => data.decode(self).ctor_kind,\n             _ => CtorKind::Fictive,\n         }\n     }\n \n     pub fn get_struct_ctor_def_id(&self, node_id: DefIndex) -> Option<DefId> {\n         match self.entry(node_id).kind {\n-            EntryKind::Struct(data) => {\n+            EntryKind::Struct(data, _) => {\n                 data.decode(self).struct_ctor.map(|index| self.local_def_id(index))\n             }\n             _ => None,"}, {"sha": "f4ff5f4626f3587e9a36ec97e7a61cd3352bacc4", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=541aa8a27039b196df626193886f39373dd09b0b", "patch": "@@ -20,7 +20,7 @@ use rustc::middle::dependency_format::Linkage;\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::traits::specialization_graph;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, ReprOptions};\n \n use rustc::session::config::{self, CrateTypeProcMacro};\n use rustc::util::nodemap::{FxHashMap, NodeSet};\n@@ -401,8 +401,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n         }\n \n+        let repr_options = get_repr_options(&tcx, adt_def_id);\n+\n         Entry {\n-            kind: EntryKind::Struct(self.lazy(&data)),\n+            kind: EntryKind::Struct(self.lazy(&data), repr_options),\n             visibility: self.lazy(&ctor_vis),\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: LazySeq::empty(),\n@@ -659,7 +661,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemForeignMod(_) => EntryKind::ForeignMod,\n             hir::ItemTy(..) => EntryKind::Type,\n-            hir::ItemEnum(..) => EntryKind::Enum,\n+            hir::ItemEnum(..) => EntryKind::Enum(get_repr_options(&tcx, def_id)),\n             hir::ItemStruct(ref struct_def, _) => {\n                 let variant = tcx.lookup_adt_def(def_id).struct_variant();\n \n@@ -671,20 +673,24 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 } else {\n                     None\n                 };\n+\n+                let repr_options = get_repr_options(&tcx, def_id);\n+\n                 EntryKind::Struct(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n                     disr: variant.disr_val.to_u128_unchecked(),\n                     struct_ctor: struct_ctor,\n-                }))\n+                }), repr_options)\n             }\n             hir::ItemUnion(..) => {\n                 let variant = tcx.lookup_adt_def(def_id).struct_variant();\n+                let repr_options = get_repr_options(&tcx, def_id);\n \n                 EntryKind::Union(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n                     disr: variant.disr_val.to_u128_unchecked(),\n                     struct_ctor: None,\n-                }))\n+                }), repr_options)\n             }\n             hir::ItemDefaultImpl(..) => {\n                 let data = ImplData {\n@@ -1419,3 +1425,11 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     result\n }\n+\n+pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: &TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {\n+    let ty = tcx.item_type(did);\n+    match ty.sty {\n+        ty::TyAdt(ref def, _) => return def.repr,\n+        _ => bug!(\"{} is not an ADT\", ty),\n+    }\n+}"}, {"sha": "10aa4784aa2e13611efd3d0f50cdd67833f360b1", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=541aa8a27039b196df626193886f39373dd09b0b", "patch": "@@ -18,7 +18,7 @@ use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n use rustc::middle::lang_items;\n use rustc::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc::mir;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, ReprOptions};\n use rustc_back::PanicStrategy;\n \n use rustc_serialize as serialize;\n@@ -228,11 +228,11 @@ pub enum EntryKind<'tcx> {\n     ForeignMutStatic,\n     ForeignMod,\n     Type,\n-    Enum,\n+    Enum(ReprOptions),\n     Field,\n     Variant(Lazy<VariantData>),\n-    Struct(Lazy<VariantData>),\n-    Union(Lazy<VariantData>),\n+    Struct(Lazy<VariantData>, ReprOptions),\n+    Union(Lazy<VariantData>, ReprOptions),\n     Fn(Lazy<FnData>),\n     ForeignFn(Lazy<FnData>),\n     Mod(Lazy<ModData>),"}, {"sha": "7936db65c44acd2a2b54e1ee7f9f83d4c50ae005", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541aa8a27039b196df626193886f39373dd09b0b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=541aa8a27039b196df626193886f39373dd09b0b", "patch": "@@ -65,7 +65,7 @@ use middle::const_val::ConstVal;\n use rustc_const_eval::EvalHint::UncheckedExprHint;\n use rustc_const_eval::{ConstContext, report_const_eval_err};\n use rustc::ty::subst::Substs;\n-use rustc::ty::{ToPredicate, ImplContainer, AssociatedItemContainer, TraitContainer};\n+use rustc::ty::{ToPredicate, ImplContainer, AssociatedItemContainer, TraitContainer, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::util::IntTypeExt;\n use rustc::dep_graph::DepNode;\n@@ -1006,7 +1006,8 @@ fn convert_struct_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let ctor_id = if !def.is_struct() { Some(ccx.tcx.hir.local_def_id(def.id())) } else { None };\n     let variants = vec![convert_struct_variant(ccx, ctor_id.unwrap_or(did), it.name,\n                                                ConstInt::Infer(0), def)];\n-    let adt = ccx.tcx.alloc_adt_def(did, AdtKind::Struct, variants);\n+    let adt = ccx.tcx.alloc_adt_def(did, AdtKind::Struct, variants,\n+        ReprOptions::new(&ccx.tcx, did));\n     if let Some(ctor_id) = ctor_id {\n         // Make adt definition available through constructor id as well.\n         ccx.tcx.adt_defs.borrow_mut().insert(ctor_id, adt);\n@@ -1024,7 +1025,7 @@ fn convert_union_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let did = ccx.tcx.hir.local_def_id(it.id);\n     let variants = vec![convert_struct_variant(ccx, did, it.name, ConstInt::Infer(0), def)];\n \n-    let adt = ccx.tcx.alloc_adt_def(did, AdtKind::Union, variants);\n+    let adt = ccx.tcx.alloc_adt_def(did, AdtKind::Union, variants, ReprOptions::new(&ccx.tcx, did));\n     ccx.tcx.adt_defs.borrow_mut().insert(did, adt);\n     adt\n }\n@@ -1112,7 +1113,7 @@ fn convert_enum_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         convert_struct_variant(ccx, did, v.node.name, disr, &v.node.data)\n     }).collect();\n \n-    let adt = tcx.alloc_adt_def(did, AdtKind::Enum, variants);\n+    let adt = tcx.alloc_adt_def(did, AdtKind::Enum, variants, ReprOptions::new(&ccx.tcx, did));\n     tcx.adt_defs.borrow_mut().insert(did, adt);\n     adt\n }"}]}