{"sha": "970276b5594a6205709b0f2d0f6af9b6a0121683", "node_id": "C_kwDOAAsO6NoAKDk3MDI3NmI1NTk0YTYyMDU3MDliMGYyZDBmNmFmOWI2YTAxMjE2ODM", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-26T14:25:10Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-05-03T10:59:12Z"}, "message": "'inference': collect RPIT obligations\n\nCollect obligations from RPITs (Return Position `impl Trait`) of a function which is being inferred.\nThis allows inferring {unknown}s from RPIT bounds.", "tree": {"sha": "79b978cfbdb81785da4154786996ffe1f5a8c814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b978cfbdb81785da4154786996ffe1f5a8c814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/970276b5594a6205709b0f2d0f6af9b6a0121683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/970276b5594a6205709b0f2d0f6af9b6a0121683", "html_url": "https://github.com/rust-lang/rust/commit/970276b5594a6205709b0f2d0f6af9b6a0121683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/970276b5594a6205709b0f2d0f6af9b6a0121683/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6262b60153d56dc40c41c055b9d200c0ce03be7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6262b60153d56dc40c41c055b9d200c0ce03be7a", "html_url": "https://github.com/rust-lang/rust/commit/6262b60153d56dc40c41c055b9d200c0ce03be7a"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "2a11c9d9bf15c5a58ca1bd8b17d272057931e485", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/970276b5594a6205709b0f2d0f6af9b6a0121683/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970276b5594a6205709b0f2d0f6af9b6a0121683/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=970276b5594a6205709b0f2d0f6af9b6a0121683", "patch": "@@ -19,7 +19,7 @@ use std::sync::Arc;\n use chalk_ir::{cast::Cast, ConstValue, DebruijnIndex, Mutability, Safety, Scalar, TypeFlags};\n use hir_def::{\n     body::Body,\n-    data::{ConstData, FunctionData, StaticData},\n+    data::{ConstData, StaticData},\n     expr::{BindingAnnotation, ExprId, PatId},\n     lang_item::LangItemTarget,\n     path::{path, Path},\n@@ -32,12 +32,13 @@ use hir_expand::name::{name, Name};\n use itertools::Either;\n use la_arena::ArenaMap;\n use rustc_hash::FxHashMap;\n-use stdx::impl_from;\n+use stdx::{always, impl_from};\n \n use crate::{\n-    db::HirDatabase, fold_tys_and_consts, infer::coerce::CoerceMany, lower::ImplTraitLoweringMode,\n-    to_assoc_type_id, AliasEq, AliasTy, Const, DomainGoal, GenericArg, Goal, InEnvironment,\n-    Interner, ProjectionTy, Substitution, TraitEnvironment, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n+    db::HirDatabase, fold_tys, fold_tys_and_consts, infer::coerce::CoerceMany,\n+    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Const, DomainGoal,\n+    GenericArg, Goal, ImplTraitId, InEnvironment, Interner, ProjectionTy, Substitution,\n+    TraitEnvironment, TraitRef, Ty, TyBuilder, TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -64,7 +65,7 @@ pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<Infer\n \n     match def {\n         DefWithBodyId::ConstId(c) => ctx.collect_const(&db.const_data(c)),\n-        DefWithBodyId::FunctionId(f) => ctx.collect_fn(&db.function_data(f)),\n+        DefWithBodyId::FunctionId(f) => ctx.collect_fn(f),\n         DefWithBodyId::StaticId(s) => ctx.collect_static(&db.static_data(s)),\n     }\n \n@@ -457,7 +458,8 @@ impl<'a> InferenceContext<'a> {\n         self.return_ty = self.make_ty(&data.type_ref);\n     }\n \n-    fn collect_fn(&mut self, data: &FunctionData) {\n+    fn collect_fn(&mut self, func: FunctionId) {\n+        let data = self.db.function_data(func);\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n             .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n         let param_tys =\n@@ -474,8 +476,42 @@ impl<'a> InferenceContext<'a> {\n         } else {\n             &*data.ret_type\n         };\n-        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Disallowed); // FIXME implement RPIT\n+        let return_ty = self.make_ty_with_mode(return_ty, ImplTraitLoweringMode::Opaque);\n         self.return_ty = return_ty;\n+\n+        if let Some(rpits) = self.db.return_type_impl_traits(func) {\n+            // RPIT opaque types use substitution of their parent function.\n+            let fn_placeholders = TyBuilder::placeholder_subst(self.db, func);\n+            self.return_ty = fold_tys(\n+                self.return_ty.clone(),\n+                |ty, _| {\n+                    let opaque_ty_id = match ty.kind(Interner) {\n+                        TyKind::OpaqueType(opaque_ty_id, _) => *opaque_ty_id,\n+                        _ => return ty,\n+                    };\n+                    let idx = match self.db.lookup_intern_impl_trait_id(opaque_ty_id.into()) {\n+                        ImplTraitId::ReturnTypeImplTrait(_, idx) => idx,\n+                        _ => unreachable!(),\n+                    };\n+                    let bounds = (*rpits).map_ref(|rpits| {\n+                        rpits.impl_traits[idx as usize].bounds.map_ref(|it| it.into_iter())\n+                    });\n+                    let var = self.table.new_type_var();\n+                    let var_subst = Substitution::from1(Interner, var.clone());\n+                    for bound in bounds {\n+                        let predicate =\n+                            bound.map(|it| it.cloned()).substitute(Interner, &fn_placeholders);\n+                        let (var_predicate, binders) = predicate\n+                            .substitute(Interner, &var_subst)\n+                            .into_value_and_skipped_binders();\n+                        always!(binders.len(Interner) == 0); // quantified where clauses not yet handled\n+                        self.push_obligation(var_predicate.cast(Interner));\n+                    }\n+                    var\n+                },\n+                DebruijnIndex::INNERMOST,\n+            );\n+        }\n     }\n \n     fn infer_body(&mut self) {"}, {"sha": "0b08aa4711ca34ac8b7d55c2687fab3e25c2f6ae", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/970276b5594a6205709b0f2d0f6af9b6a0121683/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970276b5594a6205709b0f2d0f6af9b6a0121683/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=970276b5594a6205709b0f2d0f6af9b6a0121683", "patch": "@@ -1255,6 +1255,32 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_from_return_pos_impl_trait() {\n+    check_infer_with_mismatches(\n+        r#\"\n+//- minicore: fn, sized\n+trait Trait<T> {}\n+struct Bar<T>(T);\n+impl<T> Trait<T> for Bar<T> {}\n+fn foo<const C: u8, T>() -> (impl FnOnce(&str, T), impl Trait<u8>) {\n+    (|input, t| {}, Bar(C))\n+}\n+\"#,\n+        expect![[r#\"\n+            134..165 '{     ...(C)) }': (|&str, T| -> (), Bar<u8>)\n+            140..163 '(|inpu...ar(C))': (|&str, T| -> (), Bar<u8>)\n+            141..154 '|input, t| {}': |&str, T| -> ()\n+            142..147 'input': &str\n+            149..150 't': T\n+            152..154 '{}': ()\n+            156..159 'Bar': Bar<u8>(u8) -> Bar<u8>\n+            156..162 'Bar(C)': Bar<u8>\n+            160..161 'C': u8\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn dyn_trait() {\n     check_infer(\n@@ -2392,7 +2418,7 @@ fn test() -> impl Trait<i32> {\n             171..182 '{ loop {} }': T\n             173..180 'loop {}': !\n             178..180 '{}': ()\n-            213..309 '{     ...t()) }': S<{unknown}>\n+            213..309 '{     ...t()) }': S<i32>\n             223..225 's1': S<u32>\n             228..229 'S': S<u32>(u32) -> S<u32>\n             228..240 'S(default())': S<u32>\n@@ -2408,10 +2434,10 @@ fn test() -> impl Trait<i32> {\n             276..288 'S(default())': S<i32>\n             278..285 'default': fn default<i32>() -> i32\n             278..287 'default()': i32\n-            295..296 'S': S<{unknown}>({unknown}) -> S<{unknown}>\n-            295..307 'S(default())': S<{unknown}>\n-            297..304 'default': fn default<{unknown}>() -> {unknown}\n-            297..306 'default()': {unknown}\n+            295..296 'S': S<i32>(i32) -> S<i32>\n+            295..307 'S(default())': S<i32>\n+            297..304 'default': fn default<i32>() -> i32\n+            297..306 'default()': i32\n         \"#]],\n     );\n }"}]}