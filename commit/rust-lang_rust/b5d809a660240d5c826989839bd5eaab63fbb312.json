{"sha": "b5d809a660240d5c826989839bd5eaab63fbb312", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZDgwOWE2NjAyNDBkNWM4MjY5ODk4MzliZDVlYWFiNjNmYmIzMTI=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-04T14:47:30Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:40:00Z"}, "message": "move wrong_self_convention to its own module", "tree": {"sha": "990cb8b36a1e1576029b44747514bc47ab59260c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990cb8b36a1e1576029b44747514bc47ab59260c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d809a660240d5c826989839bd5eaab63fbb312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d809a660240d5c826989839bd5eaab63fbb312", "html_url": "https://github.com/rust-lang/rust/commit/b5d809a660240d5c826989839bd5eaab63fbb312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d809a660240d5c826989839bd5eaab63fbb312/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5912ca986c52041d01384393cbf2da10270738ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/5912ca986c52041d01384393cbf2da10270738ee", "html_url": "https://github.com/rust-lang/rust/commit/5912ca986c52041d01384393cbf2da10270738ee"}], "stats": {"total": 157, "additions": 86, "deletions": 71}, "files": [{"sha": "3cd720bc9ca70c8f7082eda786e66b1bc6535331", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 71, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/b5d809a660240d5c826989839bd5eaab63fbb312/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d809a660240d5c826989839bd5eaab63fbb312/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b5d809a660240d5c826989839bd5eaab63fbb312", "patch": "@@ -25,10 +25,10 @@ mod uninit_assumed_init;\n mod unnecessary_filter_map;\n mod unnecessary_lazy_eval;\n mod unwrap_used;\n+mod wrong_self_convention;\n mod zst_offset;\n \n use std::borrow::Cow;\n-use std::fmt;\n use std::iter;\n \n use bind_instead_of_map::BindInsteadOfMap;\n@@ -1868,7 +1868,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     }\n                 }\n \n-                lint_wrong_self_convention(\n+                wrong_self_convention::check(\n                     cx,\n                     &name,\n                     item.vis.node.is_pub(),\n@@ -1924,7 +1924,14 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n \n             then {\n-                lint_wrong_self_convention(cx, &item.ident.name.as_str(), false, self_ty, first_arg_ty, first_arg_span);\n+                wrong_self_convention::check(\n+                    cx,\n+                    &item.ident.name.as_str(),\n+                    false,\n+                    self_ty,\n+                    first_arg_ty,\n+                    first_arg_span\n+                );\n             }\n         }\n \n@@ -1949,39 +1956,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n     extract_msrv_attr!(LateContext);\n }\n \n-fn lint_wrong_self_convention<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    item_name: &str,\n-    is_pub: bool,\n-    self_ty: &'tcx TyS<'tcx>,\n-    first_arg_ty: &'tcx TyS<'tcx>,\n-    first_arg_span: Span,\n-) {\n-    let lint = if is_pub {\n-        WRONG_PUB_SELF_CONVENTION\n-    } else {\n-        WRONG_SELF_CONVENTION\n-    };\n-    if let Some((ref conv, self_kinds)) = &CONVENTIONS.iter().find(|(ref conv, _)| conv.check(item_name)) {\n-        if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n-            span_lint(\n-                cx,\n-                lint,\n-                first_arg_span,\n-                &format!(\n-                    \"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n-                    conv,\n-                    &self_kinds\n-                        .iter()\n-                        .map(|k| k.description())\n-                        .collect::<Vec<_>>()\n-                        .join(\" or \")\n-                ),\n-            );\n-        }\n-    }\n-}\n-\n /// Checks for the `OR_FUN_CALL` lint.\n #[allow(clippy::too_many_lines)]\n fn lint_or_fun_call<'tcx>(\n@@ -3415,22 +3389,6 @@ fn lint_into_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, self_ref_ty: Ty<'_\n     }\n }\n \n-enum Convention {\n-    Eq(&'static str),\n-    StartsWith(&'static str),\n-}\n-\n-#[rustfmt::skip]\n-const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n-    (Convention::Eq(\"new\"), &[SelfKind::No]),\n-    (Convention::StartsWith(\"as_\"), &[SelfKind::Ref, SelfKind::RefMut]),\n-    (Convention::StartsWith(\"from_\"), &[SelfKind::No]),\n-    (Convention::StartsWith(\"into_\"), &[SelfKind::Value]),\n-    (Convention::StartsWith(\"is_\"), &[SelfKind::Ref, SelfKind::No]),\n-    (Convention::Eq(\"to_mut\"), &[SelfKind::RefMut]),\n-    (Convention::StartsWith(\"to_\"), &[SelfKind::Ref]),\n-];\n-\n const FN_HEADER: hir::FnHeader = hir::FnHeader {\n     unsafety: hir::Unsafety::Normal,\n     constness: hir::Constness::NotConst,\n@@ -3602,25 +3560,6 @@ impl SelfKind {\n     }\n }\n \n-impl Convention {\n-    #[must_use]\n-    fn check(&self, other: &str) -> bool {\n-        match *self {\n-            Self::Eq(this) => this == other,\n-            Self::StartsWith(this) => other.starts_with(this) && this != other,\n-        }\n-    }\n-}\n-\n-impl fmt::Display for Convention {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        match *self {\n-            Self::Eq(this) => this.fmt(f),\n-            Self::StartsWith(this) => this.fmt(f).and_then(|_| '*'.fmt(f)),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy)]\n enum OutType {\n     Unit,"}, {"sha": "90fab577436618a231b527c75b4e9fede9bc2413", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b5d809a660240d5c826989839bd5eaab63fbb312/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d809a660240d5c826989839bd5eaab63fbb312/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=b5d809a660240d5c826989839bd5eaab63fbb312", "patch": "@@ -0,0 +1,76 @@\n+use crate::methods::SelfKind;\n+use crate::utils::span_lint;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::TyS;\n+use rustc_span::source_map::Span;\n+use std::fmt;\n+\n+use super::WRONG_PUB_SELF_CONVENTION;\n+use super::WRONG_SELF_CONVENTION;\n+\n+#[rustfmt::skip]\n+const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n+    (Convention::Eq(\"new\"), &[SelfKind::No]),\n+    (Convention::StartsWith(\"as_\"), &[SelfKind::Ref, SelfKind::RefMut]),\n+    (Convention::StartsWith(\"from_\"), &[SelfKind::No]),\n+    (Convention::StartsWith(\"into_\"), &[SelfKind::Value]),\n+    (Convention::StartsWith(\"is_\"), &[SelfKind::Ref, SelfKind::No]),\n+    (Convention::Eq(\"to_mut\"), &[SelfKind::RefMut]),\n+    (Convention::StartsWith(\"to_\"), &[SelfKind::Ref]),\n+];\n+enum Convention {\n+    Eq(&'static str),\n+    StartsWith(&'static str),\n+}\n+\n+impl Convention {\n+    #[must_use]\n+    fn check(&self, other: &str) -> bool {\n+        match *self {\n+            Self::Eq(this) => this == other,\n+            Self::StartsWith(this) => other.starts_with(this) && this != other,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Convention {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n+        match *self {\n+            Self::Eq(this) => this.fmt(f),\n+            Self::StartsWith(this) => this.fmt(f).and_then(|_| '*'.fmt(f)),\n+        }\n+    }\n+}\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    item_name: &str,\n+    is_pub: bool,\n+    self_ty: &'tcx TyS<'tcx>,\n+    first_arg_ty: &'tcx TyS<'tcx>,\n+    first_arg_span: Span,\n+) {\n+    let lint = if is_pub {\n+        WRONG_PUB_SELF_CONVENTION\n+    } else {\n+        WRONG_SELF_CONVENTION\n+    };\n+    if let Some((ref conv, self_kinds)) = &CONVENTIONS.iter().find(|(ref conv, _)| conv.check(item_name)) {\n+        if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n+            span_lint(\n+                cx,\n+                lint,\n+                first_arg_span,\n+                &format!(\n+                    \"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n+                    conv,\n+                    &self_kinds\n+                        .iter()\n+                        .map(|k| k.description())\n+                        .collect::<Vec<_>>()\n+                        .join(\" or \")\n+                ),\n+            );\n+        }\n+    }\n+}"}]}