{"sha": "3bb02f2329623f1bb83512135746ce77ecb72b0b", "node_id": "C_kwDOAAsO6NoAKDNiYjAyZjIzMjk2MjNmMWJiODM1MTIxMzU3NDZjZTc3ZWNiNzJiMGI", "commit": {"author": {"name": "Felici\u00e1n N\u00e9meth", "email": "felician.nemeth@gmail.com", "date": "2022-03-27T08:49:00Z"}, "committer": {"name": "Felici\u00e1n N\u00e9meth", "email": "felician.nemeth@gmail.com", "date": "2022-05-22T08:40:37Z"}, "message": "feat: Add on-typing handler for left angle\n\nOnly advertise this feature in the server capabilities when the client\nsupports SnippetTextEdit.\n\nClose #11398.\n\nCo-authored-by: unexge <unexge@gmail.com>", "tree": {"sha": "2154ec7e45c82e93bf5b2d9c664cacfb642f4538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2154ec7e45c82e93bf5b2d9c664cacfb642f4538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb02f2329623f1bb83512135746ce77ecb72b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb02f2329623f1bb83512135746ce77ecb72b0b", "html_url": "https://github.com/rust-lang/rust/commit/3bb02f2329623f1bb83512135746ce77ecb72b0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb02f2329623f1bb83512135746ce77ecb72b0b/comments", "author": {"login": "nemethf", "id": 1453824, "node_id": "MDQ6VXNlcjE0NTM4MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1453824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemethf", "html_url": "https://github.com/nemethf", "followers_url": "https://api.github.com/users/nemethf/followers", "following_url": "https://api.github.com/users/nemethf/following{/other_user}", "gists_url": "https://api.github.com/users/nemethf/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemethf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemethf/subscriptions", "organizations_url": "https://api.github.com/users/nemethf/orgs", "repos_url": "https://api.github.com/users/nemethf/repos", "events_url": "https://api.github.com/users/nemethf/events{/privacy}", "received_events_url": "https://api.github.com/users/nemethf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nemethf", "id": 1453824, "node_id": "MDQ6VXNlcjE0NTM4MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1453824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nemethf", "html_url": "https://github.com/nemethf", "followers_url": "https://api.github.com/users/nemethf/followers", "following_url": "https://api.github.com/users/nemethf/following{/other_user}", "gists_url": "https://api.github.com/users/nemethf/gists{/gist_id}", "starred_url": "https://api.github.com/users/nemethf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nemethf/subscriptions", "organizations_url": "https://api.github.com/users/nemethf/orgs", "repos_url": "https://api.github.com/users/nemethf/repos", "events_url": "https://api.github.com/users/nemethf/events{/privacy}", "received_events_url": "https://api.github.com/users/nemethf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "636d4880c4b9403aa45d837c62f4b812d0520cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/636d4880c4b9403aa45d837c62f4b812d0520cf0", "html_url": "https://github.com/rust-lang/rust/commit/636d4880c4b9403aa45d837c62f4b812d0520cf0"}], "stats": {"total": 226, "additions": 220, "deletions": 6}, "files": [{"sha": "be1a6da7ea8d068a6b3e13806eb3c6a5abedd3d2", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 207, "deletions": 5, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/3bb02f2329623f1bb83512135746ce77ecb72b0b/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb02f2329623f1bb83512135746ce77ecb72b0b/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=3bb02f2329623f1bb83512135746ce77ecb72b0b", "patch": "@@ -20,9 +20,9 @@ use ide_db::{\n     RootDatabase,\n };\n use syntax::{\n-    algo::find_node_at_offset,\n+    algo::{ancestors_at_offset, find_node_at_offset},\n     ast::{self, edit::IndentLevel, AstToken},\n-    AstNode, Parse, SourceFile, SyntaxKind, TextRange, TextSize,\n+    AstNode, Parse, SourceFile, SyntaxKind, TextRange, TextSize, T,\n };\n \n use text_edit::{Indel, TextEdit};\n@@ -32,7 +32,7 @@ use crate::SourceChange;\n pub(crate) use on_enter::on_enter;\n \n // Don't forget to add new trigger characters to `server_capabilities` in `caps.rs`.\n-pub(crate) const TRIGGER_CHARS: &str = \".=>{\";\n+pub(crate) const TRIGGER_CHARS: &str = \".=<>{\";\n \n struct ExtendedTextEdit {\n     edit: TextEdit,\n@@ -92,7 +92,8 @@ fn on_char_typed_inner(\n     match char_typed {\n         '.' => conv(on_dot_typed(&file.tree(), offset)),\n         '=' => conv(on_eq_typed(&file.tree(), offset)),\n-        '>' => conv(on_arrow_typed(&file.tree(), offset)),\n+        '<' => on_left_angle_typed(&file.tree(), offset),\n+        '>' => conv(on_right_angle_typed(&file.tree(), offset)),\n         '{' => conv(on_opening_brace_typed(file, offset)),\n         _ => unreachable!(),\n     }\n@@ -312,8 +313,40 @@ fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     Some(TextEdit::replace(TextRange::new(offset - current_indent_len, offset), target_indent))\n }\n \n+/// Add closing `>` for generic arguments/parameters.\n+fn on_left_angle_typed(file: &SourceFile, offset: TextSize) -> Option<ExtendedTextEdit> {\n+    let file_text = file.syntax().text();\n+    if !stdx::always!(file_text.char_at(offset) == Some('<')) {\n+        return None;\n+    }\n+    let range = TextRange::at(offset, TextSize::of('<'));\n+\n+    if let Some(t) = file.syntax().token_at_offset(offset).left_biased() {\n+        if T![impl] == t.kind() {\n+            return Some(ExtendedTextEdit {\n+                edit: TextEdit::replace(range, \"<$0>\".to_string()),\n+                is_snippet: true,\n+            });\n+        }\n+    }\n+\n+    if ancestors_at_offset(file.syntax(), offset)\n+        .find(|n| {\n+            ast::GenericParamList::can_cast(n.kind()) || ast::GenericArgList::can_cast(n.kind())\n+        })\n+        .is_some()\n+    {\n+        return Some(ExtendedTextEdit {\n+            edit: TextEdit::replace(range, \"<$0>\".to_string()),\n+            is_snippet: true,\n+        });\n+    }\n+\n+    None\n+}\n+\n /// Adds a space after an arrow when `fn foo() { ... }` is turned into `fn foo() -> { ... }`\n-fn on_arrow_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+fn on_right_angle_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     let file_text = file.syntax().text();\n     if !stdx::always!(file_text.char_at(offset) == Some('>')) {\n         return None;\n@@ -335,6 +368,12 @@ mod tests {\n \n     use super::*;\n \n+    impl ExtendedTextEdit {\n+        fn apply(&self, text: &mut String) {\n+            self.edit.apply(text);\n+        }\n+    }\n+\n     fn do_type_char(char_typed: char, before: &str) -> Option<String> {\n         let (offset, mut before) = extract_offset(before);\n         let edit = TextEdit::insert(offset, char_typed.to_string());\n@@ -879,6 +918,169 @@ use some::pa$0th::to::Item;\n         );\n     }\n \n+    #[test]\n+    fn adds_closing_angle_bracket_for_generic_args() {\n+        type_char(\n+            '<',\n+            r#\"\n+fn foo() {\n+    bar::$0\n+}\n+            \"#,\n+            r#\"\n+fn foo() {\n+    bar::<$0>\n+}\n+            \"#,\n+        );\n+\n+        type_char(\n+            '<',\n+            r#\"\n+fn foo(bar: &[u64]) {\n+    bar.iter().collect::$0();\n+}\n+            \"#,\n+            r#\"\n+fn foo(bar: &[u64]) {\n+    bar.iter().collect::<$0>();\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn adds_closing_angle_bracket_for_generic_params() {\n+        type_char(\n+            '<',\n+            r#\"\n+fn foo$0() {}\n+            \"#,\n+            r#\"\n+fn foo<$0>() {}\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+fn foo$0\n+            \"#,\n+            r#\"\n+fn foo<$0>\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+struct Foo$0 {}\n+            \"#,\n+            r#\"\n+struct Foo<$0> {}\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+struct Foo$0();\n+            \"#,\n+            r#\"\n+struct Foo<$0>();\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+struct Foo$0\n+            \"#,\n+            r#\"\n+struct Foo<$0>\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+enum Foo$0\n+            \"#,\n+            r#\"\n+enum Foo<$0>\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+trait Foo$0\n+            \"#,\n+            r#\"\n+trait Foo<$0>\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+type Foo$0 = Bar;\n+            \"#,\n+            r#\"\n+type Foo<$0> = Bar;\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+impl$0 Foo {}\n+            \"#,\n+            r#\"\n+impl<$0> Foo {}\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+impl<T> Foo$0 {}\n+            \"#,\n+            r#\"\n+impl<T> Foo<$0> {}\n+            \"#,\n+        );\n+        type_char(\n+            '<',\n+            r#\"\n+impl Foo$0 {}\n+            \"#,\n+            r#\"\n+impl Foo<$0> {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn dont_add_closing_angle_bracket_for_comparison() {\n+        type_char_noop(\n+            '<',\n+            r#\"\n+fn main() {\n+    42$0\n+}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+fn main() {\n+    42 $0\n+}\n+            \"#,\n+        );\n+        type_char_noop(\n+            '<',\n+            r#\"\n+fn main() {\n+    let foo = 42;\n+    foo $0\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn regression_629() {\n         type_char_noop("}, {"sha": "58b1f29df544ca321b1fa1ecaa99415a0ce934d1", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bb02f2329623f1bb83512135746ce77ecb72b0b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb02f2329623f1bb83512135746ce77ecb72b0b/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=3bb02f2329623f1bb83512135746ce77ecb72b0b", "patch": "@@ -56,7 +56,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n         },\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),\n-            more_trigger_character: Some(vec![\".\".to_string(), \">\".to_string(), \"{\".to_string()]),\n+            more_trigger_character: Some(more_trigger_character(&config)),\n         }),\n         selection_range_provider: Some(SelectionRangeProviderCapability::Simple(true)),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),\n@@ -189,3 +189,11 @@ fn code_action_capabilities(client_caps: &ClientCapabilities) -> CodeActionProvi\n             })\n         })\n }\n+\n+fn more_trigger_character(config: &Config) -> Vec<String> {\n+    let mut res = vec![\".\".to_string(), \">\".to_string(), \"{\".to_string()];\n+    if config.snippet_cap() {\n+        res.push(\"<\".to_string());\n+    }\n+    res\n+}"}, {"sha": "c53f7e8c5921b64c586ac6965c17ea040e6dd483", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bb02f2329623f1bb83512135746ce77ecb72b0b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb02f2329623f1bb83512135746ce77ecb72b0b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=3bb02f2329623f1bb83512135746ce77ecb72b0b", "patch": "@@ -1070,6 +1070,10 @@ impl Config {\n         }\n     }\n \n+    pub fn snippet_cap(&self) -> bool {\n+        self.experimental(\"snippetTextEdit\")\n+    }\n+\n     pub fn assist(&self) -> AssistConfig {\n         AssistConfig {\n             snippet_cap: SnippetCap::new(self.experimental(\"snippetTextEdit\")),"}]}