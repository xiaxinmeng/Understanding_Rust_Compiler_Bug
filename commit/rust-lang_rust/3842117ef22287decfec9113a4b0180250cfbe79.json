{"sha": "3842117ef22287decfec9113a4b0180250cfbe79", "node_id": "C_kwDOAAsO6NoAKDM4NDIxMTdlZjIyMjg3ZGVjZmVjOTExM2E0YjAxODAyNTBjZmJlNzk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-22T06:15:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T06:15:42Z"}, "message": "Rollup merge of #99915 - WaffleLapkin:recover_keyword_bounds, r=compiler-errors\n\nRecover keywords in trait bounds\n\n(_this pr was inspired by [this tweet](https://twitter.com/Azumanga/status/1552982326409367561)_)\n\nRecover keywords in trait bound, motivational example:\n```rust\nfn f(_: impl fn()) {} // mistyped, meant `Fn`\n```\n\n<details><summary>Current nightly (3 needless and confusing errors!)</summary>\n<p>\n\n```text\nerror: expected identifier, found keyword `fn`\n --> ./t.rs:1:15\n  |\n1 | fn _f(_: impl fn()) {}\n  |               ^^ expected identifier, found keyword\n  |\nhelp: escape `fn` to use it as an identifier\n  |\n1 | fn _f(_: impl r#fn()) {}\n  |               ++\n\nerror: expected one of `:` or `|`, found `)`\n --> ./t.rs:1:19\n  |\n1 | fn _f(_: impl fn()) {}\n  |                   ^ expected one of `:` or `|`\n\nerror: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found keyword `fn`\n --> ./t.rs:1:15\n  |\n1 | fn _f(_: impl fn()) {}\n  |              -^^ expected one of 9 possible tokens\n  |              |\n  |              help: missing `,`\n\nerror: at least one trait must be specified\n --> ./t.rs:1:10\n  |\n1 | fn _f(_: impl fn()) {}\n  |          ^^^^\n```\n\n</p>\n</details>\n\nThis PR:\n```text\nerror: expected identifier, found keyword `fn`\n --> ./t.rs:1:15\n  |\n1 | fn _f(_: impl fn()) {}\n  |               ^^ expected identifier, found keyword\n  |\nhelp: escape `fn` to use it as an identifier\n  |\n1 | fn _f(_: impl r#fn()) {}\n  |               ++\n\nerror[E0405]: cannot find trait `r#fn` in this scope\n  --> ./t.rs:1:15\n   |\n1  | fn _f(_: impl fn()) {}\n   |               ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n   |\n  ::: /home/waffle/projects/repos/rust/library/core/src/ops/function.rs:74:1\n   |\n74 | pub trait Fn<Args>: FnMut<Args> {\n   | ------------------------------- similarly named trait `Fn` defined here\n```\n\nIt would be nice to have suggestion in the first error like \"have you meant `Fn` trait\", instead of a separate error, but the recovery is deep inside ident parsing, which makes it a lot harder to do.\n\nr? `@compiler-errors`", "tree": {"sha": "b25465ca27dde98259882b7f508cef0ab24c50c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25465ca27dde98259882b7f508cef0ab24c50c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3842117ef22287decfec9113a4b0180250cfbe79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAx8OCRBK7hj4Ov3rIwAAxvYIAIgB8OIldv8geOGQyMTCQlAP\nUJB/SM2ljYMwIrgOhAXgEz3rV8oLXpZ64eGGqa4V/dIhiWHDjV+NI18mLQT9YgtG\nWRjdx67yglv7dM4d08y7RLc+RocHmtBCBcLFnpGQdMDx2aUWquvM45Hp1BEMyrM/\nKQOEOiMtzISdrMcozh2Pi5BTS8UVcjJ48BQQvsSt+U4vsNXDxu8PjmHRd2zuVfpJ\neT76Dojhk8F7k/9SeHlrbHMUnXsLhw/TomXPLbsWJJ/PsZI2YqssvO4h5SjqlpVW\nqgpAhW3uKlQyOocS65/8A4bNQ37OuTuM44EKKiWwpwXUIucjTLhuMfgwHXp7r9s=\n=Kane\n-----END PGP SIGNATURE-----\n", "payload": "tree b25465ca27dde98259882b7f508cef0ab24c50c3\nparent 33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f\nparent 5d5e451618d3f364ce4a19d1d2c4f8903bc30dde\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661148942 +0530\ncommitter GitHub <noreply@github.com> 1661148942 +0530\n\nRollup merge of #99915 - WaffleLapkin:recover_keyword_bounds, r=compiler-errors\n\nRecover keywords in trait bounds\n\n(_this pr was inspired by [this tweet](https://twitter.com/Azumanga/status/1552982326409367561)_)\n\nRecover keywords in trait bound, motivational example:\n```rust\nfn f(_: impl fn()) {} // mistyped, meant `Fn`\n```\n\n<details><summary>Current nightly (3 needless and confusing errors!)</summary>\n<p>\n\n```text\nerror: expected identifier, found keyword `fn`\n --> ./t.rs:1:15\n  |\n1 | fn _f(_: impl fn()) {}\n  |               ^^ expected identifier, found keyword\n  |\nhelp: escape `fn` to use it as an identifier\n  |\n1 | fn _f(_: impl r#fn()) {}\n  |               ++\n\nerror: expected one of `:` or `|`, found `)`\n --> ./t.rs:1:19\n  |\n1 | fn _f(_: impl fn()) {}\n  |                   ^ expected one of `:` or `|`\n\nerror: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found keyword `fn`\n --> ./t.rs:1:15\n  |\n1 | fn _f(_: impl fn()) {}\n  |              -^^ expected one of 9 possible tokens\n  |              |\n  |              help: missing `,`\n\nerror: at least one trait must be specified\n --> ./t.rs:1:10\n  |\n1 | fn _f(_: impl fn()) {}\n  |          ^^^^\n```\n\n</p>\n</details>\n\nThis PR:\n```text\nerror: expected identifier, found keyword `fn`\n --> ./t.rs:1:15\n  |\n1 | fn _f(_: impl fn()) {}\n  |               ^^ expected identifier, found keyword\n  |\nhelp: escape `fn` to use it as an identifier\n  |\n1 | fn _f(_: impl r#fn()) {}\n  |               ++\n\nerror[E0405]: cannot find trait `r#fn` in this scope\n  --> ./t.rs:1:15\n   |\n1  | fn _f(_: impl fn()) {}\n   |               ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n   |\n  ::: /home/waffle/projects/repos/rust/library/core/src/ops/function.rs:74:1\n   |\n74 | pub trait Fn<Args>: FnMut<Args> {\n   | ------------------------------- similarly named trait `Fn` defined here\n```\n\nIt would be nice to have suggestion in the first error like \"have you meant `Fn` trait\", instead of a separate error, but the recovery is deep inside ident parsing, which makes it a lot harder to do.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3842117ef22287decfec9113a4b0180250cfbe79", "html_url": "https://github.com/rust-lang/rust/commit/3842117ef22287decfec9113a4b0180250cfbe79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3842117ef22287decfec9113a4b0180250cfbe79/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f", "html_url": "https://github.com/rust-lang/rust/commit/33b5ce6433c58d4101118d58c3ae6aae0b9b1a5f"}, {"sha": "5d5e451618d3f364ce4a19d1d2c4f8903bc30dde", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5e451618d3f364ce4a19d1d2c4f8903bc30dde", "html_url": "https://github.com/rust-lang/rust/commit/5d5e451618d3f364ce4a19d1d2c4f8903bc30dde"}], "stats": {"total": 248, "additions": 244, "deletions": 4}, "files": [{"sha": "4a2cf74905bf593617d8a3b40b05b449ae2db664", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3842117ef22287decfec9113a4b0180250cfbe79/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3842117ef22287decfec9113a4b0180250cfbe79/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=3842117ef22287decfec9113a4b0180250cfbe79", "patch": "@@ -640,7 +640,13 @@ impl<'a> Parser<'a> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n \n-        while self.can_begin_bound() || self.token.is_keyword(kw::Dyn) {\n+        while self.can_begin_bound()\n+            // Continue even if we find a keyword.\n+            // This is necessary for error recover on, for example, `impl fn()`.\n+            //\n+            // The only keyword that can go after generic bounds is `where`, so stop if it's it.\n+            || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))\n+        {\n             if self.token.is_keyword(kw::Dyn) {\n                 // Account for `&dyn Trait + dyn Other`.\n                 self.struct_span_err(self.token.span, \"invalid `dyn` keyword\")\n@@ -803,6 +809,20 @@ impl<'a> Parser<'a> {\n             self.expect_keyword(kw::Const)?;\n             let span = tilde.to(self.prev_token.span);\n             self.sess.gated_spans.gate(sym::const_trait_impl, span);\n+            Some(span)\n+        } else if self.eat_keyword(kw::Const) {\n+            let span = self.prev_token.span;\n+            self.sess.gated_spans.gate(sym::const_trait_impl, span);\n+\n+            self.struct_span_err(span, \"const bounds must start with `~`\")\n+                .span_suggestion(\n+                    span.shrink_to_lo(),\n+                    \"add `~`\",\n+                    \"~\",\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+\n             Some(span)\n         } else {\n             None"}, {"sha": "fa037e5937dcaccfed179d0277b30eb85efe5c21", "filename": "src/test/ui/parser/kw-in-trait-bounds.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs?ref=3842117ef22287decfec9113a4b0180250cfbe79", "patch": "@@ -0,0 +1,47 @@\n+// edition:2018\n+\n+fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n+//~^ ERROR expected identifier, found keyword `fn`\n+//~| ERROR expected identifier, found keyword `fn`\n+//~| ERROR expected identifier, found keyword `fn`\n+//~| ERROR cannot find trait `r#fn` in this scope\n+//~| ERROR cannot find trait `r#fn` in this scope\n+//~| ERROR cannot find trait `r#fn` in this scope\n+//~| HELP  a trait with a similar name exists\n+//~| HELP  a trait with a similar name exists\n+//~| HELP  a trait with a similar name exists\n+//~| HELP  escape `fn` to use it as an identifier\n+//~| HELP  escape `fn` to use it as an identifier\n+//~| HELP  escape `fn` to use it as an identifier\n+where\n+G: fn(),\n+    //~^ ERROR expected identifier, found keyword `fn`\n+    //~| ERROR cannot find trait `r#fn` in this scope\n+    //~| HELP  a trait with a similar name exists\n+    //~| HELP  escape `fn` to use it as an identifier\n+{}\n+\n+fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n+//~^ ERROR expected identifier, found keyword `struct`\n+//~| ERROR expected identifier, found keyword `struct`\n+//~| ERROR expected identifier, found keyword `struct`\n+//~| ERROR cannot find trait `r#struct` in this scope\n+//~| ERROR cannot find trait `r#struct` in this scope\n+//~| ERROR cannot find trait `r#struct` in this scope\n+//~| HELP  a trait with a similar name exists\n+//~| HELP  a trait with a similar name exists\n+//~| HELP  a trait with a similar name exists\n+//~| HELP  escape `struct` to use it as an identifier\n+//~| HELP  escape `struct` to use it as an identifier\n+//~| HELP  escape `struct` to use it as an identifier\n+where\n+    B: struct,\n+    //~^ ERROR expected identifier, found keyword `struct`\n+    //~| ERROR cannot find trait `r#struct` in this scope\n+    //~| HELP  a trait with a similar name exists\n+    //~| HELP  escape `struct` to use it as an identifier\n+{}\n+\n+trait Struct {}\n+\n+fn main() {}"}, {"sha": "28196c7ce2de838d1b9d557bb547179014be2994", "filename": "src/test/ui/parser/kw-in-trait-bounds.stderr", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr?ref=3842117ef22287decfec9113a4b0180250cfbe79", "patch": "@@ -0,0 +1,171 @@\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/kw-in-trait-bounds.rs:3:10\n+   |\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n+   |          ^^ expected identifier, found keyword\n+   |\n+help: escape `fn` to use it as an identifier\n+   |\n+LL | fn _f<F: r#fn(), G>(_: impl fn(), _: &dyn fn())\n+   |          ++\n+\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/kw-in-trait-bounds.rs:3:27\n+   |\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n+   |                           ^^ expected identifier, found keyword\n+   |\n+help: escape `fn` to use it as an identifier\n+   |\n+LL | fn _f<F: fn(), G>(_: impl r#fn(), _: &dyn fn())\n+   |                           ++\n+\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/kw-in-trait-bounds.rs:3:41\n+   |\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n+   |                                         ^^ expected identifier, found keyword\n+   |\n+help: escape `fn` to use it as an identifier\n+   |\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn r#fn())\n+   |                                         ++\n+\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/kw-in-trait-bounds.rs:17:4\n+   |\n+LL | G: fn(),\n+   |    ^^ expected identifier, found keyword\n+   |\n+help: escape `fn` to use it as an identifier\n+   |\n+LL | G: r#fn(),\n+   |    ++\n+\n+error: expected identifier, found keyword `struct`\n+  --> $DIR/kw-in-trait-bounds.rs:24:10\n+   |\n+LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n+   |          ^^^^^^ expected identifier, found keyword\n+   |\n+help: escape `struct` to use it as an identifier\n+   |\n+LL | fn _g<A: r#struct, B>(_: impl struct, _: &dyn struct)\n+   |          ++\n+\n+error: expected identifier, found keyword `struct`\n+  --> $DIR/kw-in-trait-bounds.rs:24:29\n+   |\n+LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n+   |                             ^^^^^^ expected identifier, found keyword\n+   |\n+help: escape `struct` to use it as an identifier\n+   |\n+LL | fn _g<A: struct, B>(_: impl r#struct, _: &dyn struct)\n+   |                             ++\n+\n+error: expected identifier, found keyword `struct`\n+  --> $DIR/kw-in-trait-bounds.rs:24:45\n+   |\n+LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n+   |                                             ^^^^^^ expected identifier, found keyword\n+   |\n+help: escape `struct` to use it as an identifier\n+   |\n+LL | fn _g<A: struct, B>(_: impl struct, _: &dyn r#struct)\n+   |                                             ++\n+\n+error: expected identifier, found keyword `struct`\n+  --> $DIR/kw-in-trait-bounds.rs:38:8\n+   |\n+LL |     B: struct,\n+   |        ^^^^^^ expected identifier, found keyword\n+   |\n+help: escape `struct` to use it as an identifier\n+   |\n+LL |     B: r#struct,\n+   |        ++\n+\n+error[E0405]: cannot find trait `r#fn` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:3:10\n+   |\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n+   |          ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+   |\n+  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args>: FnMut<Args> {\n+   | ------------------------------- similarly named trait `Fn` defined here\n+\n+error[E0405]: cannot find trait `r#fn` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:17:4\n+   |\n+LL | G: fn(),\n+   |    ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+   |\n+  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args>: FnMut<Args> {\n+   | ------------------------------- similarly named trait `Fn` defined here\n+\n+error[E0405]: cannot find trait `r#fn` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:3:27\n+   |\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n+   |                           ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+   |\n+  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args>: FnMut<Args> {\n+   | ------------------------------- similarly named trait `Fn` defined here\n+\n+error[E0405]: cannot find trait `r#fn` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:3:41\n+   |\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n+   |                                         ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n+   |\n+  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args>: FnMut<Args> {\n+   | ------------------------------- similarly named trait `Fn` defined here\n+\n+error[E0405]: cannot find trait `r#struct` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:24:10\n+   |\n+LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n+   |          ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n+...\n+LL | trait Struct {}\n+   | ------------ similarly named trait `Struct` defined here\n+\n+error[E0405]: cannot find trait `r#struct` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:38:8\n+   |\n+LL |     B: struct,\n+   |        ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n+...\n+LL | trait Struct {}\n+   | ------------ similarly named trait `Struct` defined here\n+\n+error[E0405]: cannot find trait `r#struct` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:24:29\n+   |\n+LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n+   |                             ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n+...\n+LL | trait Struct {}\n+   | ------------ similarly named trait `Struct` defined here\n+\n+error[E0405]: cannot find trait `r#struct` in this scope\n+  --> $DIR/kw-in-trait-bounds.rs:24:45\n+   |\n+LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n+   |                                             ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n+...\n+LL | trait Struct {}\n+   | ------------ similarly named trait `Struct` defined here\n+\n+error: aborting due to 16 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}, {"sha": "d63381b5f2cc9a8b92121c8ad7af9b9a205b943f", "filename": "src/test/ui/rfc-2632-const-trait-impl/without-tilde.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.rs?ref=3842117ef22287decfec9113a4b0180250cfbe79", "patch": "@@ -3,4 +3,4 @@\n #![feature(const_trait_impl)]\n \n struct S<T: const Tr>;\n-//~^ ERROR expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, `~`, lifetime, or path\n+//~^ ERROR const bounds must start with `~`"}, {"sha": "31300354a573791ff479ab8421229be97734e27d", "filename": "src/test/ui/rfc-2632-const-trait-impl/without-tilde.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3842117ef22287decfec9113a4b0180250cfbe79/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fwithout-tilde.stderr?ref=3842117ef22287decfec9113a4b0180250cfbe79", "patch": "@@ -1,8 +1,10 @@\n-error: expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, `~`, lifetime, or path, found keyword `const`\n+error: const bounds must start with `~`\n   --> $DIR/without-tilde.rs:5:13\n    |\n LL | struct S<T: const Tr>;\n-   |             ^^^^^ expected one of 10 possible tokens\n+   |             -^^^^\n+   |             |\n+   |             help: add `~`: `~`\n \n error: aborting due to previous error\n "}]}