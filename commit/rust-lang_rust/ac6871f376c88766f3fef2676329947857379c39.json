{"sha": "ac6871f376c88766f3fef2676329947857379c39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjg3MWYzNzZjODg3NjZmM2ZlZjI2NzYzMjk5NDc4NTczNzljMzk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-24T02:22:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-24T02:22:01Z"}, "message": "Merge pull request #3048 from emilio/merged-comments\n\nlists: Detect block comment by starting from the end.", "tree": {"sha": "8e1a90b9ec02d1ded80887ad6d614501ab31b48a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1a90b9ec02d1ded80887ad6d614501ab31b48a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac6871f376c88766f3fef2676329947857379c39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbqEpJCRBK7hj4Ov3rIwAAdHIIAB7OrwnnuN2xnoJfHkdGPrWr\nSgLFvEBAR8nqU3GaWgGQhiJpFlgU/zRl7UZ7eDm9akqhf/HvWpCDVveRrlpJsSxa\n9qNjKamTRvCeKFSwv2vBzVToHiU1AoZ5wjpeIJtuzlu4dKSWBkTEcjZdLgeuA6FX\nE4oRUrul8QioTlUcn8Wvx7Tldm1QcuYNOrAD3yavT7E/gGUr1WtxOytvucGNMiym\n+SjwqqcJ0fHFEABTr+tj5xz/qYG+57RlwpAxbZh7q/mcA2SYqL6HPemdIg/9zE5g\nN7AvovIKtRBYbUUkIjyk0zNMKUw5a2P1ENul7z7oCGQiOm/H4tI7qFJ5mhtl/Tk=\n=Qmyb\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e1a90b9ec02d1ded80887ad6d614501ab31b48a\nparent 1e60c6118edd2c8606513cbd6576a935f476049e\nparent 66c15e46ba1c3cb0f48b65bd2e3ab2d2bb09fc99\nauthor Nick Cameron <nrc@ncameron.org> 1537755721 +1200\ncommitter GitHub <noreply@github.com> 1537755721 +1200\n\nMerge pull request #3048 from emilio/merged-comments\n\nlists: Detect block comment by starting from the end."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6871f376c88766f3fef2676329947857379c39", "html_url": "https://github.com/rust-lang/rust/commit/ac6871f376c88766f3fef2676329947857379c39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac6871f376c88766f3fef2676329947857379c39/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e60c6118edd2c8606513cbd6576a935f476049e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e60c6118edd2c8606513cbd6576a935f476049e", "html_url": "https://github.com/rust-lang/rust/commit/1e60c6118edd2c8606513cbd6576a935f476049e"}, {"sha": "66c15e46ba1c3cb0f48b65bd2e3ab2d2bb09fc99", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c15e46ba1c3cb0f48b65bd2e3ab2d2bb09fc99", "html_url": "https://github.com/rust-lang/rust/commit/66c15e46ba1c3cb0f48b65bd2e3ab2d2bb09fc99"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "57f778896d3002020c89db427060b20fe99e77bc", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac6871f376c88766f3fef2676329947857379c39/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6871f376c88766f3fef2676329947857379c39/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=ac6871f376c88766f3fef2676329947857379c39", "patch": "@@ -566,14 +566,9 @@ where\n \n pub fn extract_pre_comment(pre_snippet: &str) -> (Option<String>, ListItemCommentStyle) {\n     let trimmed_pre_snippet = pre_snippet.trim();\n+    let has_block_comment = trimmed_pre_snippet.ends_with(\"*/\");\n     let has_single_line_comment = trimmed_pre_snippet.starts_with(\"//\");\n-    let has_block_comment = trimmed_pre_snippet.starts_with(\"/*\");\n-    if has_single_line_comment {\n-        (\n-            Some(trimmed_pre_snippet.to_owned()),\n-            ListItemCommentStyle::DifferentLine,\n-        )\n-    } else if has_block_comment {\n+    if has_block_comment {\n         let comment_end = pre_snippet.chars().rev().position(|c| c == '/').unwrap();\n         if pre_snippet\n             .chars()\n@@ -591,6 +586,11 @@ pub fn extract_pre_comment(pre_snippet: &str) -> (Option<String>, ListItemCommen\n                 ListItemCommentStyle::SameLine,\n             )\n         }\n+    } else if has_single_line_comment {\n+        (\n+            Some(trimmed_pre_snippet.to_owned()),\n+            ListItemCommentStyle::DifferentLine,\n+        )\n     } else {\n         (None, ListItemCommentStyle::None)\n     }"}, {"sha": "a3e6100b7f222aefc48da4a7f1399867076690c3", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ac6871f376c88766f3fef2676329947857379c39/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6871f376c88766f3fef2676329947857379c39/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=ac6871f376c88766f3fef2676329947857379c39", "patch": "@@ -280,6 +280,21 @@ fn issue_1862() {\n     )\n }\n \n+fn issue_3025() {\n+    foo(\n+        // This describes the argument below.\n+        /* bar = */ None ,\n+        // This describes the argument below.\n+        something_something,\n+        // This describes the argument below. */\n+        None ,\n+        // This describes the argument below.\n+        /* This comment waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay too long to be kept on the same line */ None ,\n+        // This describes the argument below.\n+        /* com */ this_last_arg_is_tooooooooooooooooooooooooooooooooo_long_to_be_kept_with_the_pre_comment ,\n+    )\n+}\n+\n fn issue_1878() {\n     let channel: &str = seq.next_element()?.ok_or_else(|| de::Error::invalid_length(2, &self))?;\n }"}, {"sha": "c5770065087337c0ef82f776df485611b7a0cd9d", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ac6871f376c88766f3fef2676329947857379c39/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac6871f376c88766f3fef2676329947857379c39/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=ac6871f376c88766f3fef2676329947857379c39", "patch": "@@ -281,6 +281,23 @@ fn issue_1862() {\n     )\n }\n \n+fn issue_3025() {\n+    foo(\n+        // This describes the argument below.\n+        /* bar = */ None,\n+        // This describes the argument below.\n+        something_something,\n+        // This describes the argument below. */\n+        None,\n+        // This describes the argument below.\n+        /* This comment waaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaay too long to be kept on the same line */\n+        None,\n+        // This describes the argument below.\n+        /* com */\n+        this_last_arg_is_tooooooooooooooooooooooooooooooooo_long_to_be_kept_with_the_pre_comment,\n+    )\n+}\n+\n fn issue_1878() {\n     let channel: &str = seq\n         .next_element()?"}]}