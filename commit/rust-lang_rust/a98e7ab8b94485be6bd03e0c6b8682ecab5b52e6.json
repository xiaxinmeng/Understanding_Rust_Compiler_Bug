{"sha": "a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "node_id": "C_kwDOAAsO6NoAKGE5OGU3YWI4Yjk0NDg1YmU2YmQwM2UwYzZiODY4MmVjYWI1YjUyZTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-27T13:48:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-27T13:48:23Z"}, "message": "Auto merge of #8359 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "f27400417133d522c32c3e1e8f6f1b52cb3f5273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f27400417133d522c32c3e1e8f6f1b52cb3f5273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "html_url": "https://github.com/rust-lang/rust/commit/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea4db3a6c6fdd30abb0b746f7a68d403a07d24bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4db3a6c6fdd30abb0b746f7a68d403a07d24bf", "html_url": "https://github.com/rust-lang/rust/commit/ea4db3a6c6fdd30abb0b746f7a68d403a07d24bf"}, {"sha": "b96e76869d11df8bbbae37b9aa4edd842aecef7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96e76869d11df8bbbae37b9aa4edd842aecef7a", "html_url": "https://github.com/rust-lang/rust/commit/b96e76869d11df8bbbae37b9aa4edd842aecef7a"}], "stats": {"total": 1274, "additions": 479, "deletions": 795}, "files": [{"sha": "e109ee0009ee0f624e725acad27ca90dbfc36995", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol;"}, {"sha": "88b91d589074d85e300c79979bab0d89269e1b6a", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -48,7 +48,7 @@ declare_lint_pass!(AsConversions => [AS_CONVERSIONS]);\n \n impl EarlyLintPass for AsConversions {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "12c1bddf79d5d23e21913616a6dbefed03611682", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -6,9 +6,8 @@ use clippy_utils::{eq_expr_value, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -220,16 +219,11 @@ struct ExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if eq_expr_value(self.cx, self.assignee, expr) {\n             self.counter += 1;\n         }\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "c4956bacf43617a3de0ed2a747e6d377af022430", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::ty::implements_trait;\n use clippy_utils::{differing_macro_contexts, get_parent_expr};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -55,14 +54,12 @@ struct ExVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if let ExprKind::Closure(_, _, eid, _, _) = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);\n-                if let ExprKind::MethodCall(_, _, [self_arg, ..], _) = &parent.kind;\n+                if let ExprKind::MethodCall(_, [self_arg, ..], _) = &parent.kind;\n                 let caller = self.cx.typeck_results().expr_ty(self_arg);\n                 if let Some(iter_id) = self.cx.tcx.get_diagnostic_item(sym::Iterator);\n                 if implements_trait(self.cx, caller, iter_id, &[]);\n@@ -82,9 +79,6 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         }\n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression condition\";"}, {"sha": "f7449c8dc72ed584a839c418bf2dd25de2c31d37", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::{eq_expr_value, get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -260,7 +259,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n                 ))\n             })\n         },\n-        ExprKind::MethodCall(path, _, args, _) if args.len() == 1 => {\n+        ExprKind::MethodCall(path, args, _) if args.len() == 1 => {\n             let type_of_receiver = cx.typeck_results().expr_ty(&args[0]);\n             if !is_type_diagnostic_item(cx, type_of_receiver, sym::Option)\n                 && !is_type_diagnostic_item(cx, type_of_receiver, sym::Result)\n@@ -452,8 +451,6 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         if !e.span.from_expansion() {\n             match &e.kind {\n@@ -470,9 +467,6 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         }\n         walk_expr(self, e);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn implements_ord<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n@@ -485,8 +479,6 @@ struct NotSimplificationVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind {\n             if let Some(suggestion) = simplify_not(self.cx, inner) {\n@@ -504,7 +496,4 @@ impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "9f8eb488c29ba049cf25619ac4e6902d137415fb", "filename": "clippy_lints/src/borrow_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, TyKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n "}, {"sha": "02d97bf43df83d50587d50b9669ee205230766a4", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -41,9 +41,9 @@ declare_lint_pass!(ByteCount => [NAIVE_BYTECOUNT]);\n impl<'tcx> LateLintPass<'tcx> for ByteCount {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(count, _, [count_recv], _) = expr.kind;\n+            if let ExprKind::MethodCall(count, [count_recv], _) = expr.kind;\n             if count.ident.name == sym::count;\n-            if let ExprKind::MethodCall(filter, _, [filter_recv, filter_arg], _) = count_recv.kind;\n+            if let ExprKind::MethodCall(filter, [filter_recv, filter_arg], _) = count_recv.kind;\n             if filter.ident.name == sym!(filter);\n             if let ExprKind::Closure(_, _, body_id, _, _) = filter_arg.kind;\n             let body = cx.tcx.hir().body(body_id);\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n             if ty::Uint(UintTy::U8) == *cx.typeck_results().expr_ty(needle).peel_refs().kind();\n             if !is_local_used(cx, needle, arg_id);\n             then {\n-                let haystack = if let ExprKind::MethodCall(path, _, args, _) =\n+                let haystack = if let ExprKind::MethodCall(path, args, _) =\n                         filter_recv.kind {\n                     let p = path.ident.name;\n                     if (p == sym::iter || p == sym!(iter_mut)) && args.len() == 1 {"}, {"sha": "e71f110820c0b83111e7ce23824e9f3fd98c4430", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -37,7 +37,7 @@ declare_lint_pass!(CaseSensitiveFileExtensionComparisons => [CASE_SENSITIVE_FILE\n \n fn check_case_sensitive_file_extension_comparison(ctx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Span> {\n     if_chain! {\n-        if let ExprKind::MethodCall(PathSegment { ident, .. }, _, [obj, extension, ..], span) = expr.kind;\n+        if let ExprKind::MethodCall(PathSegment { ident, .. }, [obj, extension, ..], span) = expr.kind;\n         if ident.as_str() == \"ends_with\";\n         if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = extension.kind;\n         if (2..=6).contains(&ext_literal.as_str().len());"}, {"sha": "ea74d5acbda0528ade62cc8b1d0aca92cf2fc7f4", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -43,7 +43,7 @@ fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: b\n             },\n             _ => nbits,\n         },\n-        ExprKind::MethodCall(method, _, [left, right], _) => {\n+        ExprKind::MethodCall(method, [left, right], _) => {\n             if signed {\n                 return nbits;\n             }\n@@ -54,7 +54,7 @@ fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: b\n             };\n             apply_reductions(cx, nbits, left, signed).min(max_bits.unwrap_or(u64::max_value()))\n         },\n-        ExprKind::MethodCall(method, _, [_, lo, hi], _) => {\n+        ExprKind::MethodCall(method, [_, lo, hi], _) => {\n             if method.ident.as_str() == \"clamp\" {\n                 //FIXME: make this a diagnostic item\n                 if let (Some(lo_bits), Some(hi_bits)) = (get_constant_bits(cx, lo), get_constant_bits(cx, hi)) {\n@@ -63,7 +63,7 @@ fn apply_reductions(cx: &LateContext<'_>, nbits: u64, expr: &Expr<'_>, signed: b\n             }\n             nbits\n         },\n-        ExprKind::MethodCall(method, _, [_value], _) => {\n+        ExprKind::MethodCall(method, [_value], _) => {\n             if method.ident.name.as_str() == \"signum\" {\n                 0 // do not lint if cast comes from a `signum` function\n             } else {"}, {"sha": "079b7ff0675b4b34ad1b8d96e7a5e7810a2bf811", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             cx.typeck_results().expr_ty(expr),\n         );\n         lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n-    } else if let ExprKind::MethodCall(method_path, _, [self_arg, ..], _) = &expr.kind {\n+    } else if let ExprKind::MethodCall(method_path, [self_arg, ..], _) = &expr.kind {\n         if_chain! {\n             if method_path.ident.name == sym!(cast);\n             if let Some(generic_args) = method_path.args;"}, {"sha": "75f70b77ed4e7d34a07a52467ab4c7f61e563053", "filename": "clippy_lints/src/casts/cast_sign_loss.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -41,14 +41,14 @@ fn should_lint(cx: &LateContext<'_>, cast_op: &Expr<'_>, cast_from: Ty<'_>, cast\n             }\n \n             // Don't lint for the result of methods that always return non-negative values.\n-            if let ExprKind::MethodCall(path, _, _, _) = cast_op.kind {\n+            if let ExprKind::MethodCall(path, _, _) = cast_op.kind {\n                 let mut method_name = path.ident.name.as_str();\n                 let allowed_methods = [\"abs\", \"checked_abs\", \"rem_euclid\", \"checked_rem_euclid\"];\n \n                 if_chain! {\n                     if method_name == \"unwrap\";\n                     if let Some(arglist) = method_chain_args(cast_op, &[\"unwrap\"]);\n-                    if let ExprKind::MethodCall(inner_path, _, _, _) = &arglist[0][0].kind;\n+                    if let ExprKind::MethodCall(inner_path, _, _) = &arglist[0][0].kind;\n                     then {\n                         method_name = inner_path.ident.name.as_str();\n                     }"}, {"sha": "85f952375491f213556d9f3fa606e8ad17edf044", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::LimitStack;\n use rustc_ast::ast::Attribute;\n-use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n@@ -149,8 +148,6 @@ struct CcHelper {\n }\n \n impl<'tcx> Visitor<'tcx> for CcHelper {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         walk_expr(self, e);\n         match e.kind {\n@@ -167,7 +164,4 @@ impl<'tcx> Visitor<'tcx> for CcHelper {\n             _ => {},\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "8b79f1600aeb0ab7542ea6d3286b68d8d1159f45", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -7,10 +7,10 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n use std::borrow::Cow;\n@@ -566,10 +566,10 @@ impl<'a, 'tcx> UsedValueFinderVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UsedValueFinderVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_local(&mut self, l: &'tcx rustc_hir::Local<'tcx>) {"}, {"sha": "fb201d2c012b19f9927a8f371ad91cabaa886c96", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,12 +5,11 @@ use if_chain::if_chain;\n use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    intravisit::{walk_expr, walk_stmt, NestedVisitorMap, Visitor},\n+    intravisit::{walk_expr, walk_stmt, Visitor},\n     Body, Expr, ExprKind, HirId, Lit, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::{\n-    hir::map::Map,\n     lint::in_external_macro,\n     ty::{self, FloatTy, IntTy, PolyFnSig, Ty},\n };\n@@ -117,8 +116,6 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n@@ -134,7 +131,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                 }\n             },\n \n-            ExprKind::MethodCall(_, _, args, _) => {\n+            ExprKind::MethodCall(_, args, _) => {\n                 if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n                     for (expr, bound) in iter::zip(*args, fn_sig.inputs()) {\n@@ -209,10 +206,6 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n         walk_stmt(self, stmt);\n         self.ty_bounds.pop();\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'tcx>> {"}, {"sha": "c0adab790f0d51a2971311113ed506fa244190da", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -420,7 +420,7 @@ fn try_parse_ref_op<'tcx>(\n     expr: &'tcx Expr<'_>,\n ) -> Option<(RefOp, &'tcx Expr<'tcx>)> {\n     let (def_id, arg) = match expr.kind {\n-        ExprKind::MethodCall(_, _, [arg], _) => (typeck.type_dependent_def_id(expr.hir_id)?, arg),\n+        ExprKind::MethodCall(_, [arg], _) => (typeck.type_dependent_def_id(expr.hir_id)?, arg),\n         ExprKind::Call(\n             Expr {\n                 kind: ExprKind::Path(path),\n@@ -467,7 +467,7 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n     match parent.kind {\n         // Leave deref calls in the middle of a method chain.\n         // e.g. x.deref().foo()\n-        ExprKind::MethodCall(_, _, [self_arg, ..], _) if self_arg.hir_id == child_id => false,\n+        ExprKind::MethodCall(_, [self_arg, ..], _) if self_arg.hir_id == child_id => false,\n \n         // Leave deref calls resulting in a called function\n         // e.g. (x.deref())()\n@@ -508,7 +508,6 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n         | ExprKind::Continue(..)\n         | ExprKind::Ret(..)\n         | ExprKind::InlineAsm(..)\n-        | ExprKind::LlvmInlineAsm(..)\n         | ExprKind::Struct(..)\n         | ExprKind::Repeat(..)\n         | ExprKind::Yield(..) => true,\n@@ -529,7 +528,7 @@ fn is_auto_reborrow_position(parent: Option<Node<'_>>) -> bool {\n fn is_auto_borrow_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n     if let Some(Node::Expr(parent)) = parent {\n         match parent.kind {\n-            ExprKind::MethodCall(_, _, [self_arg, ..], _) => self_arg.hir_id == child_id,\n+            ExprKind::MethodCall(_, [self_arg, ..], _) => self_arg.hir_id == child_id,\n             ExprKind::Field(..) => true,\n             ExprKind::Call(f, _) => f.hir_id == child_id,\n             _ => false,"}, {"sha": "6d3df260ca25592a59a43e5d75751200c20f7591", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,12 +3,12 @@ use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n use clippy_utils::{get_trait_def_id, is_automatically_derived, is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n     BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -382,7 +382,7 @@ struct UnsafeVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, span: Span, id: HirId) {\n         if self.has_unsafe {\n@@ -414,7 +414,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "0c27c3f9255f28585175bf42c52833860a1d5760", "filename": "clippy_lints/src/disallowed_script_idents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_lint::{EarlyContext, EarlyLintPass, Level};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Level, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use unicode_script::{Script, UnicodeScript};\n \n@@ -72,7 +72,7 @@ impl EarlyLintPass for DisallowedScriptIdents {\n             return;\n         }\n \n-        let symbols = cx.sess.parse_sess.symbol_gallery.symbols.lock();\n+        let symbols = cx.sess().parse_sess.symbol_gallery.symbols.lock();\n         // Sort by `Span` so that error messages make sense with respect to the\n         // order of identifier locations in the code.\n         let mut symbols: Vec<_> = symbols.iter().collect();"}, {"sha": "a00361e6062ad4ab1faee890838dd36a9f54328a", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -13,10 +13,10 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n use rustc_errors::{Applicability, Handler, SuggestionStyle};\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AnonConst, Expr};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n@@ -799,7 +799,7 @@ struct FindPanicUnwrap<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.panic_span.is_some() {\n@@ -834,7 +834,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n     // Panics in const blocks will cause compilation to fail.\n     fn visit_anon_const(&mut self, _: &'tcx AnonConst) {}\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "24e32c09f44b3252d158653ef366eb8bb66a8e28", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if let ExprKind::Binary(Spanned { node: BinOpKind::Div, .. }, left, right) = expr.kind;\n-            if let ExprKind::MethodCall(method_path, _ , args, _) = left.kind;\n+            if let ExprKind::MethodCall(method_path, args, _) = left.kind;\n             if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n             then {"}, {"sha": "0b9f54231c59bc8566e06b8599ec04e9242893ac", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -50,7 +50,7 @@ declare_lint_pass!(ElseIfWithoutElse => [ELSE_IF_WITHOUT_ELSE]);\n \n impl EarlyLintPass for ElseIfWithoutElse {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, mut item: &Expr) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n "}, {"sha": "1ae2e20c1e060e78aa206ee20a25f31c05f59c65", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -10,7 +10,7 @@ use core::fmt::Write;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     hir_id::HirIdSet,\n-    intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n+    intravisit::{walk_expr, Visitor},\n     Block, Expr, ExprKind, Guard, HirId, Pat, Stmt, StmtKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -244,7 +244,6 @@ fn try_parse_contains<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Optio\n     });\n     match expr.kind {\n         ExprKind::MethodCall(\n-            _,\n             _,\n             [\n                 map,\n@@ -281,7 +280,7 @@ struct InsertExpr<'tcx> {\n     value: &'tcx Expr<'tcx>,\n }\n fn try_parse_insert<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<InsertExpr<'tcx>> {\n-    if let ExprKind::MethodCall(_, _, [map, key, value], _) = expr.kind {\n+    if let ExprKind::MethodCall(_, [map, key, value], _) = expr.kind {\n         let id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;\n         if match_def_path(cx, id, &paths::BTREEMAP_INSERT) || match_def_path(cx, id, &paths::HASHMAP_INSERT) {\n             Some(InsertExpr { map, key, value })\n@@ -370,11 +369,6 @@ impl<'tcx> InsertSearcher<'_, 'tcx> {\n     }\n }\n impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n-    type Map = ErasedMap<'tcx>;\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n             StmtKind::Semi(e) => {\n@@ -504,7 +498,7 @@ impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n                     self.loops.pop();\n                 },\n                 ExprKind::Block(block, _) => self.visit_block(block),\n-                ExprKind::InlineAsm(_) | ExprKind::LlvmInlineAsm(_) => {\n+                ExprKind::InlineAsm(_) => {\n                     self.can_use_entry = false;\n                 },\n                 _ => {"}, {"sha": "af591dd71aa1d37d383570065195df3d6b637821", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         }\n \n         let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-        let parent_node = cx.tcx.hir().find(parent_id);\n+        let parent_node = cx.tcx.hir().find_by_def_id(parent_id);\n \n         let mut trait_self_ty = None;\n         if let Some(Node::Item(item)) = parent_node {\n@@ -175,8 +175,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                 // skip if there is a `self` parameter binding to a type\n                 // that contains `Self` (i.e.: `self: Box<Self>`), see #4804\n                 if let Some(trait_self_ty) = self.trait_self_ty {\n-                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(self.cx.tcx, cmt.place.ty(), trait_self_ty)\n-                    {\n+                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(cmt.place.ty(), trait_self_ty) {\n                         return;\n                     }\n                 }"}, {"sha": "263bff4873caf4cb45af2f3efdd8bb95dd31bbf1", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -144,7 +144,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n         );\n \n         if_chain!(\n-            if let ExprKind::MethodCall(path, _, args, _) = body.value.kind;\n+            if let ExprKind::MethodCall(path, args, _) = body.value.kind;\n             if check_inputs(cx, body.params, args);\n             let method_def_id = cx.typeck_results().type_dependent_def_id(body.value.hir_id).unwrap();\n             let substs = cx.typeck_results().node_substs(body.value.hir_id);"}, {"sha": "65599a0587d449ab2150abdb280442d808e6a48c", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_note};\n use clippy_utils::{get_parent_expr, path_to_local, path_to_local_id};\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, Guard, HirId, Local, Node, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -133,8 +132,6 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         match e.kind {\n             ExprKind::Continue(_) | ExprKind::Break(_, _) | ExprKind::Ret(_) => self.report_diverging_sub_expr(e),\n@@ -167,9 +164,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, _: &'tcx Block<'_>) {\n         // don't continue over blocks, LateLintPass already does that\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Walks up the AST from the given write expression (`vis.write_expr`) looking\n@@ -299,8 +293,6 @@ struct ReadVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if expr.hir_id == self.last_expr.hir_id {\n             return;\n@@ -343,9 +335,6 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Returns `true` if `expr` is the LHS of an assignment, like `expr = ...`."}, {"sha": "cbf52d19334c0f79a15a7fdc4b876dcca6d973b5", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -34,11 +34,10 @@ impl<'tcx> LateLintPass<'tcx> for Exit {\n             if let Some(def_id) = cx.qpath_res(path, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::EXIT);\n             let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n-            if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find(parent);\n+            if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find_by_def_id(parent);\n             // If the next item up is a function we check if it is an entry point\n             // and only then emit a linter warning\n-            let def_id = cx.tcx.hir().local_def_id(parent);\n-            if !is_entrypoint_fn(cx, def_id.to_def_id());\n+            if !is_entrypoint_fn(cx, parent.to_def_id());\n             then {\n                 span_lint(cx, EXIT, e.span, \"usage of `process::exit`\");\n             }"}, {"sha": "f326fd83d18e70a16c17de0a8ca5681f5562ee58", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -35,10 +35,10 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // match call to unwrap\n-            if let ExprKind::MethodCall(unwrap_fun, _, [write_call], _) = expr.kind;\n+            if let ExprKind::MethodCall(unwrap_fun, [write_call], _) = expr.kind;\n             if unwrap_fun.ident.name == sym::unwrap;\n             // match call to write_fmt\n-            if let ExprKind::MethodCall(write_fun, _, [write_recv, write_arg], _) = write_call.kind;\n+            if let ExprKind::MethodCall(write_fun, [write_recv, write_arg], _) = write_call.kind;\n             if write_fun.ident.name == sym!(write_fmt);\n             // match calls to std::io::stdout() / std::io::stderr ()\n             if let Some(dest_name) = if match_function_call(cx, write_recv, &paths::STDOUT).is_some() {"}, {"sha": "574678b5542111d4c3132b825139c56356254e25", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,7 +5,6 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n@@ -68,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n }\n \n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n-    use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+    use rustc_hir::intravisit::{self, Visitor};\n     use rustc_hir::{Expr, ImplItemKind};\n \n     struct FindPanicUnwrap<'a, 'tcx> {\n@@ -78,8 +77,6 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n     }\n \n     impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n-        type Map = Map<'tcx>;\n-\n         fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n             if let Some(macro_call) = root_macro_call_first_node(self.lcx, expr) {\n                 if is_panic(self.lcx, macro_call.def_id) {\n@@ -100,10 +97,6 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n             // and check sub-expressions\n             intravisit::walk_expr(self, expr);\n         }\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n     }\n \n     for impl_item in impl_items {"}, {"sha": "79ce53f7a5f23f2cd3f3f0f64f36541b28bb453b", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -303,7 +303,7 @@ fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n         if value == Int(2) {\n             if let Some(parent) = get_parent_expr(cx, expr) {\n                 if let Some(grandparent) = get_parent_expr(cx, parent) {\n-                    if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = grandparent.kind {\n+                    if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, args, _) = grandparent.kind {\n                         if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n                             return;\n                         }\n@@ -364,13 +364,11 @@ fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n         if_chain! {\n             if let ExprKind::MethodCall(\n                 PathSegment { ident: lmethod_name, .. },\n-                _lspan,\n                 [largs_0, largs_1, ..],\n                 _\n             ) = &add_lhs.kind;\n             if let ExprKind::MethodCall(\n                 PathSegment { ident: rmethod_name, .. },\n-                _rspan,\n                 [rargs_0, rargs_1, ..],\n                 _\n             ) = &add_rhs.kind;\n@@ -409,7 +407,7 @@ fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if cx.typeck_results().expr_ty(lhs).is_floating_point();\n         if let Some((value, _)) = constant(cx, cx.typeck_results(), rhs);\n         if F32(1.0) == value || F64(1.0) == value;\n-        if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &lhs.kind;\n+        if let ExprKind::MethodCall(path, [self_arg, ..], _) = &lhs.kind;\n         if cx.typeck_results().expr_ty(self_arg).is_floating_point();\n         if path.ident.name.as_str() == \"exp\";\n         then {\n@@ -453,7 +451,7 @@ fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     ) = &expr.kind\n     {\n         if let Some(parent) = get_parent_expr(cx, expr) {\n-            if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = parent.kind {\n+            if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, args, _) = parent.kind {\n                 if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n                     return;\n                 }\n@@ -589,8 +587,8 @@ fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n \n fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(PathSegment { ident: method_name_a, .. }, _, args_a, _) = expr_a.kind;\n-        if let ExprKind::MethodCall(PathSegment { ident: method_name_b, .. }, _, args_b, _) = expr_b.kind;\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_a, .. }, args_a, _) = expr_a.kind;\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_b, .. }, args_b, _) = expr_b.kind;\n         then {\n             return method_name_a.as_str() == method_name_b.as_str() &&\n                 args_a.len() == args_b.len() &&\n@@ -615,8 +613,8 @@ fn check_log_division(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             rhs,\n         ) = &expr.kind;\n         if are_same_base_logs(cx, lhs, rhs);\n-        if let ExprKind::MethodCall(_, _, [largs_self, ..], _) = &lhs.kind;\n-        if let ExprKind::MethodCall(_, _, [rargs_self, ..], _) = &rhs.kind;\n+        if let ExprKind::MethodCall(_, [largs_self, ..], _) = &lhs.kind;\n+        if let ExprKind::MethodCall(_, [rargs_self, ..], _) = &rhs.kind;\n         then {\n             span_lint_and_sugg(\n                 cx,\n@@ -714,7 +712,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n             return;\n         }\n \n-        if let ExprKind::MethodCall(path, _, args, _) = &expr.kind {\n+        if let ExprKind::MethodCall(path, args, _) = &expr.kind {\n             let recv_ty = cx.typeck_results().expr_ty(&args[0]);\n \n             if recv_ty.is_floating_point() {"}, {"sha": "17b0749a4a990f91594d704f325ec5e25f16fcde", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -149,7 +149,7 @@ fn check_format_in_format_args(cx: &LateContext<'_>, call_site: Span, name: Symb\n fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Expr<'_>) {\n     if_chain! {\n         if !value.span.from_expansion();\n-        if let ExprKind::MethodCall(_, _, [receiver], _) = value.kind;\n+        if let ExprKind::MethodCall(_, [receiver], _) = value.kind;\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(value.hir_id);\n         if is_diag_trait_item(cx, method_def_id, sym::ToString);\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);"}, {"sha": "ae18f8081bcc870d2b90f8a6e0f27a16f68176c5", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::differing_macro_contexts;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -207,7 +207,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n         if let ExprKind::If(_, then, Some(else_)) = &expr.kind;\n         if is_block(else_) || is_if(else_);\n         if !differing_macro_contexts(then.span, else_.span);\n-        if !then.span.from_expansion() && !in_external_macro(cx.sess, expr.span);\n+        if !then.span.from_expansion() && !in_external_macro(cx.sess(), expr.span);\n \n         // workaround for rust-lang/rust#43081\n         if expr.span.lo().0 != 0 && expr.span.hi().0 != 0;\n@@ -259,7 +259,7 @@ fn has_unary_equivalent(bin_op: BinOpKind) -> bool {\n }\n \n fn indentation(cx: &EarlyContext<'_>, span: Span) -> usize {\n-    cx.sess.source_map().lookup_char_pos(span.lo()).col.0\n+    cx.sess().source_map().lookup_char_pos(span.lo()).col.0\n }\n \n /// Implementation of the `POSSIBLE_MISSING_COMMA` lint for array"}, {"sha": "c2f52605151ed2e0f750a050695d57c87efe6122", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;"}, {"sha": "3e3718b9445f7a0e645f2e1a96084953c061e774", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -4,7 +4,6 @@ use rustc_hir::def_id::{DefIdSet, LocalDefId};\n use rustc_hir::{self as hir, def::Res, intravisit, QPath};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::{\n-    hir::map::Map,\n     lint::in_external_macro,\n     ty::{self, Ty},\n };\n@@ -48,7 +47,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attr = must_use_attr(attrs);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.hir_id()).is_none() {\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n@@ -211,16 +210,14 @@ struct StaticMutVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         use hir::ExprKind::{AddrOf, Assign, AssignOp, Call, MethodCall};\n \n         if self.mutates_static {\n             return;\n         }\n         match expr.kind {\n-            Call(_, args) | MethodCall(_, _, args, _) => {\n+            Call(_, args) | MethodCall(_, args, _) => {\n                 let mut tys = DefIdSet::default();\n                 for arg in args {\n                     if self.cx.tcx.has_typeck_results(arg.hir_id.owner.to_def_id())\n@@ -244,10 +241,6 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n             _ => {},\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }\n \n fn is_mutated_static(e: &hir::Expr<'_>) -> bool {"}, {"sha": "830e3b32cfa2fac80d26726df67d353a835ea145", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,6 +1,6 @@\n use rustc_hir::{self as hir, intravisit, HirIdSet};\n use rustc_lint::LateContext;\n-use rustc_middle::{hir::map::Map, ty};\n+use rustc_middle::ty;\n use rustc_span::def_id::LocalDefId;\n \n use clippy_utils::diagnostics::span_lint;\n@@ -77,8 +77,6 @@ struct DerefVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Call(f, args) => {\n@@ -90,7 +88,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                     }\n                 }\n             },\n-            hir::ExprKind::MethodCall(_, _, args, _) => {\n+            hir::ExprKind::MethodCall(_, args, _) => {\n                 let def_id = self.typeck_results.type_dependent_def_id(expr.hir_id).unwrap();\n                 let base_type = self.cx.tcx.type_of(def_id);\n \n@@ -106,10 +104,6 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n \n         intravisit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }\n \n impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {"}, {"sha": "120fcb2619c7c66dd59dd58bdb3b7c1ea8b30170", "filename": "clippy_lints/src/functions/result_unit_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'_>, item: &hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n+        if is_public && trait_ref_of_method(cx, item.def_id).is_none() {\n             check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n         }\n     }"}, {"sha": "df29d9308e7124da07b112998729023abbba7e17", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for GetLastWithLen {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // Is a method call\n-            if let ExprKind::MethodCall(path, _, args, _) = expr.kind;\n+            if let ExprKind::MethodCall(path, args, _) = expr.kind;\n \n             // Method name is \"get\"\n             if path.ident.name == sym!(get);\n@@ -73,7 +73,7 @@ impl<'tcx> LateLintPass<'tcx> for GetLastWithLen {\n             ) = &get_index_arg.kind;\n \n             // LHS of subtraction is \"x.len()\"\n-            if let ExprKind::MethodCall(arg_lhs_path, _, lhs_args, _) = &lhs.kind;\n+            if let ExprKind::MethodCall(arg_lhs_path, lhs_args, _) = &lhs.kind;\n             if arg_lhs_path.ident.name == sym::len;\n             if let Some(arg_lhs_struct) = lhs_args.get(0);\n "}, {"sha": "e9501700784931c25ac97277fafa0b825ceac596", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,10 +3,9 @@ use clippy_utils::higher;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::SpanlessEq;\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{self as visit, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self as visit, Visitor};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -91,8 +90,6 @@ pub struct OppVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for OppVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if let Some(mutex) = is_mutex_lock_call(self.cx, expr) {\n             self.found_mutex = Some(mutex);\n@@ -101,10 +98,6 @@ impl<'tcx> Visitor<'tcx> for OppVisitor<'_, 'tcx> {\n         }\n         visit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Checks if `Mutex::lock` is called in any of the branches.\n@@ -115,8 +108,6 @@ pub struct ArmVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for ArmVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if let Some(mutex) = is_mutex_lock_call(self.cx, expr) {\n             self.found_mutex = Some(mutex);\n@@ -125,10 +116,6 @@ impl<'tcx> Visitor<'tcx> for ArmVisitor<'_, 'tcx> {\n         }\n         visit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n@@ -140,7 +127,7 @@ impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n \n fn is_mutex_lock_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if_chain! {\n-        if let ExprKind::MethodCall(path, _span, [self_arg, ..], _) = &expr.kind;\n+        if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n         if path.ident.as_str() == \"lock\";\n         let ty = cx.typeck_results().expr_ty(self_arg);\n         if is_type_diagnostic_item(cx, ty, sym::Mutex);"}, {"sha": "eed25e9bc0ea8c7458a18480a2d956af5f9b1aaa", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,10 +3,10 @@ use std::collections::BTreeMap;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{Ty, TyS, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -294,8 +294,6 @@ impl<'a, 'tcx> ImplicitHasherTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n         if let Some(target) = ImplicitHasherType::new(self.cx, t) {\n             self.found.push(target);\n@@ -311,10 +309,6 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n \n         walk_inf(self, inf);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Looks for default-hasher-dependent constructors like `HashMap::new`.\n@@ -337,7 +331,7 @@ impl<'a, 'b, 'tcx> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_body(&mut self, body: &'tcx Body<'_>) {\n         let old_maybe_typeck_results = self.maybe_typeck_results.replace(self.cx.tcx.typeck_body(body.id()));\n@@ -389,7 +383,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n         walk_expr(self, e);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "667652106987a6bff185c95d32c0334f2ed1c90e", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -7,9 +7,9 @@ use if_chain::if_chain;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -230,10 +230,10 @@ struct SliceIndexLintingVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for SliceIndexLintingVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {"}, {"sha": "3008e86ef8b296da25d2a4e5adc78c614ceed059", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -145,7 +145,7 @@ const HEURISTICS: [(&str, usize, Heuristic, Finiteness); 19] = [\n \n fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n     match expr.kind {\n-        ExprKind::MethodCall(method, _, args, _) => {\n+        ExprKind::MethodCall(method, args, _) => {\n             for &(name, len, heuristic, cap) in &HEURISTICS {\n                 if method.ident.name.as_str() == name && args.len() == len {\n                     return (match heuristic {\n@@ -221,7 +221,7 @@ const INFINITE_COLLECTORS: &[Symbol] = &[\n \n fn complete_infinite_iter(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n     match expr.kind {\n-        ExprKind::MethodCall(method, _, args, _) => {\n+        ExprKind::MethodCall(method, args, _) => {\n             for &(name, len) in &COMPLETING_METHODS {\n                 if method.ident.name.as_str() == name && args.len() == len {\n                     return is_infinite(cx, &args[0]);"}, {"sha": "55c04a1186fc3376fce1d70124b972727d9e0163", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.hir_id()).is_none();\n+            if trait_ref_of_method(cx, impl_item.def_id).is_none();\n \n             then {\n                 show_lint(cx, impl_item);"}, {"sha": "cdefe627efdaad877d2c95150a8ddc6ad036f984", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,7 +2,7 @@\n \n use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{Block, ItemKind, StmtKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -55,7 +55,7 @@ declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n \n@@ -69,7 +69,7 @@ impl EarlyLintPass for ItemsAfterStatements {\n         // lint on all further items\n         for stmt in stmts {\n             if let StmtKind::Item(ref it) = *stmt {\n-                if in_external_macro(cx.sess, it.span) {\n+                if in_external_macro(cx.sess(), it.span) {\n                     return;\n                 }\n                 if let ItemKind::MacroDef(..) = it.kind {"}, {"sha": "530b0a90ebd8a8245fb129d1317dd06f64cd71fd", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -370,7 +370,7 @@ fn check_for_is_empty(\n }\n \n fn check_cmp(cx: &LateContext<'_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>, op: &str, compare_to: u32) {\n-    if let (&ExprKind::MethodCall(method_path, _, args, _), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind) {\n+    if let (&ExprKind::MethodCall(method_path, args, _), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind) {\n         // check if we are in an is_empty() method\n         if let Some(name) = get_item_name(cx, method) {\n             if name.as_str() == \"is_empty\" {"}, {"sha": "cb1ef01f5ba9da535914e20717219b40ef8c33af", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if let Some(init) = local.init;\n             then {\n                 let init_ty = cx.typeck_results().expr_ty(init);\n-                let contains_sync_guard = init_ty.walk(cx.tcx).any(|inner| match inner.unpack() {\n+                let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n                     GenericArgKind::Type(inner_ty) => {\n                         SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n                     },"}, {"sha": "b09c23f31e97049cbf539d9143593d794d65a9c2", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,8 +2,7 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::trait_ref_of_method;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::intravisit::{\n-    walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty,\n-    NestedVisitorMap, Visitor,\n+    walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty, Visitor,\n };\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n@@ -12,7 +11,6 @@ use rustc_hir::{\n     TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WhereClause, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -91,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id()).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id).is_none();\n             check_fn_inner(\n                 cx,\n                 sig.decl,\n@@ -390,8 +388,6 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         self.record(&Some(*lifetime));\n@@ -445,9 +441,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         }\n         walk_ty(self, ty);\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Are any lifetimes mentioned in the `where` clause? If so, we don't try to\n@@ -493,8 +486,6 @@ struct LifetimeChecker {\n }\n \n impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n-    type Map = Map<'tcx>;\n-\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         self.map.remove(&lifetime.name.ident().name);\n@@ -510,9 +501,6 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n             walk_generic_param(self, param);\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>, generics: &'tcx Generics<'_>) {\n@@ -544,16 +532,10 @@ struct BodyLifetimeChecker {\n }\n \n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n-    type Map = Map<'tcx>;\n-\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         if lifetime.name.ident().name != kw::Empty && lifetime.name.ident().name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "b7430f49229ae6e673a98fd596f717b3324418c0", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use std::iter;\n@@ -225,7 +225,7 @@ impl_lint_pass!(LiteralDigitGrouping => [\n \n impl EarlyLintPass for LiteralDigitGrouping {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n \n@@ -418,7 +418,7 @@ impl_lint_pass!(DecimalLiteralRepresentation => [DECIMAL_LITERAL_REPRESENTATION]\n \n impl EarlyLintPass for DecimalLiteralRepresentation {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "ef0221639aa940414ea29f146b3c53f9511d8067", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -119,7 +119,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n \n     let print_limit = |end: &Expr<'_>, end_str: &str, base: &Expr<'_>, sugg: MinifyingSugg<'static>| {\n         if_chain! {\n-            if let ExprKind::MethodCall(method, _, len_args, _) = end.kind;\n+            if let ExprKind::MethodCall(method, len_args, _) = end.kind;\n             if method.ident.name == sym::len;\n             if len_args.len() == 1;\n             if let Some(arg) = len_args.get(0);\n@@ -343,7 +343,7 @@ fn get_slice_like_element_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Opti\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, _, args, _) = expr.kind;\n+        if let ExprKind::MethodCall(method, args, _) = expr.kind;\n         if method.ident.name == sym::clone;\n         if args.len() == 1;\n         if let Some(arg) = args.get(0);"}, {"sha": "5bc32acf56eccd1a22a64fb19011b5946b68e045", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -658,7 +658,7 @@ fn check_for_loop<'tcx>(\n fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n-    if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n+    if let ExprKind::MethodCall(method, [self_arg], _) = arg.kind {\n         let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {"}, {"sha": "9d8679d77c6d02590737d25a19de817cb6e6f679", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,11 +2,10 @@ use super::MUT_RANGE_BOUND;\n use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::{get_enclosing_block, higher, path_to_local};\n use if_chain::if_chain;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n@@ -148,12 +147,6 @@ impl BreakAfterExprVisitor {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for BreakAfterExprVisitor {\n-    type Map = Map<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if self.past_candidate {\n             return;"}, {"sha": "f57dcc2f5c453ead3d76b1d2f31e23678bb36dad", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -7,10 +7,10 @@ use clippy_utils::{can_move_expr_to_closure, is_trait_method, path_to_local, pat\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId, HirIdSet, Local, Mutability, Node, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, TyS};\n use rustc_span::sym;\n@@ -24,8 +24,8 @@ pub(super) fn check<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n }\n fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, _, args, _) = expr.kind;\n-        if let ExprKind::MethodCall(chain_method, method0_span, _, _) = args[0].kind;\n+        if let ExprKind::MethodCall(method, args, _) = expr.kind;\n+        if let ExprKind::MethodCall(chain_method, _, _) = args[0].kind;\n         if chain_method.ident.name == sym!(collect) && is_trait_method(cx, &args[0], sym::Iterator);\n         then {\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n@@ -62,7 +62,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             span_lint_and_sugg(\n                 cx,\n                 NEEDLESS_COLLECT,\n-                method0_span.with_hi(expr.span.hi()),\n+                chain_method.ident.span.with_hi(expr.span.hi()),\n                 NEEDLESS_COLLECT_MSG,\n                 \"replace with\",\n                 sugg,\n@@ -79,7 +79,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let StmtKind::Local(local) = stmt.kind;\n                 if let PatKind::Binding(_, id, ..) = local.pat.kind;\n                 if let Some(init_expr) = local.init;\n-                if let ExprKind::MethodCall(method_name, collect_span, &[ref iter_source], ..) = init_expr.kind;\n+                if let ExprKind::MethodCall(method_name, &[ref iter_source], ..) = init_expr.kind;\n                 if method_name.ident.name == sym!(collect) && is_trait_method(cx, init_expr, sym::Iterator);\n                 let ty = cx.typeck_results().expr_ty(init_expr);\n                 if is_type_diagnostic_item(cx, ty, sym::Vec) ||\n@@ -101,7 +101,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                     }\n \n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n-                    let mut span = MultiSpan::from_span(collect_span);\n+                    let mut span = MultiSpan::from_span(method_name.ident.span);\n                     span.push_span_label(iter_call.span, \"the iterator could be used here instead\".into());\n                     span_lint_hir_and_then(\n                         cx,\n@@ -193,7 +193,7 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         // Check function calls on our collection\n-        if let ExprKind::MethodCall(method_name, _, [recv, args @ ..], _) = &expr.kind {\n+        if let ExprKind::MethodCall(method_name, [recv, args @ ..], _) = &expr.kind {\n             if method_name.ident.name == sym!(collect) && is_trait_method(self.cx, expr, sym::Iterator) {\n                 self.current_mutably_captured_ids = get_captured_ids(self.cx, self.cx.typeck_results().expr_ty(recv));\n                 self.visit_expr(recv);\n@@ -262,11 +262,6 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n             walk_expr(self, expr);\n         }\n     }\n-\n-    type Map = Map<'tcx>;\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n impl<'tcx> IterFunctionVisitor<'_, 'tcx> {\n@@ -298,7 +293,7 @@ struct UsedCountVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if path_to_local_id(expr, self.id) {\n@@ -308,8 +303,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "9d335073e4fb2c524999ad6ec75ceba81b76b6dd", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -8,10 +8,9 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Symbol};\n@@ -58,8 +57,7 @@ pub(super) fn check<'tcx>(\n \n                 // ensure that the indexed variable was declared before the loop, see #601\n                 if let Some(indexed_extent) = indexed_extent {\n-                    let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-                    let parent_def_id = cx.tcx.hir().local_def_id(parent_id);\n+                    let parent_def_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n                     let region_scope_tree = cx.tcx.region_scope_tree(parent_def_id);\n                     let pat_extent = region_scope_tree.var_scope(pat.hir_id.local_id);\n                     if region_scope_tree.is_subscope_of(indexed_extent, pat_extent) {\n@@ -188,7 +186,7 @@ pub(super) fn check<'tcx>(\n \n fn is_len_call(expr: &Expr<'_>, var: Symbol) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, _, len_args, _) = expr.kind;\n+        if let ExprKind::MethodCall(method, len_args, _) = expr.kind;\n         if len_args.len() == 1;\n         if method.ident.name == sym::len;\n         if let ExprKind::Path(QPath::Resolved(_, path)) = len_args[0].kind;\n@@ -263,8 +261,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                 let res = self.cx.qpath_res(seqpath, seqexpr.hir_id);\n                 match res {\n                     Res::Local(hir_id) => {\n-                        let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                        let parent_def_id = self.cx.tcx.hir().local_def_id(parent_id);\n+                        let parent_def_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n                         let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n                         if index_used_directly {\n                             self.indexed_directly.insert(\n@@ -296,12 +293,10 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // a range index op\n-            if let ExprKind::MethodCall(meth, _, [args_0, args_1, ..], _) = &expr.kind;\n+            if let ExprKind::MethodCall(meth, [args_0, args_1, ..], _) = &expr.kind;\n             if (meth.ident.name == sym::index && match_trait_method(self.cx, expr, &paths::INDEX))\n                 || (meth.ident.name == sym::index_mut && match_trait_method(self.cx, expr, &paths::INDEX_MUT));\n             if !self.check(args_1, args_0, expr);\n@@ -356,7 +351,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::MethodCall(_, _, args, _) => {\n+            ExprKind::MethodCall(_, args, _) => {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n                 for (ty, expr) in iter::zip(self.cx.tcx.fn_sig(def_id).inputs().skip_binder(), args) {\n                     self.prefer_mutable = false;\n@@ -376,7 +371,4 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n         }\n         self.prefer_mutable = old;\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "a0b2302662e64b8b6bf6a476fc4439338c6bd95d", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -121,7 +121,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Repeat(e, _)\n         | ExprKind::DropTemps(e) => never_loop_expr(e, main_loop_id),\n         ExprKind::Let(let_expr) => never_loop_expr(let_expr.init, main_loop_id),\n-        ExprKind::Array(es) | ExprKind::MethodCall(_, _, es, _) | ExprKind::Tup(es) => {\n+        ExprKind::Array(es) | ExprKind::MethodCall(_, es, _) | ExprKind::Tup(es) => {\n             never_loop_expr_all(&mut es.iter(), main_loop_id)\n         },\n         ExprKind::Call(e, es) => never_loop_expr_all(&mut once(e).chain(es.iter()), main_loop_id),\n@@ -181,7 +181,6 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n         | ExprKind::Closure(_, _, _, _, _)\n-        | ExprKind::LlvmInlineAsm(_)\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)"}, {"sha": "e048d744fc3ba89714466632729338dd06670d59", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -6,10 +6,9 @@ use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Node, Pat, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_span::symbol::sym;\n use std::iter::Iterator;\n \n@@ -49,7 +48,7 @@ pub(super) fn check<'tcx>(\n         if same_item_push_visitor.should_lint();\n         if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push;\n         let vec_ty = cx.typeck_results().expr_ty(vec);\n-        let ty = vec_ty.walk(cx.tcx).nth(1).unwrap().expect_ty();\n+        let ty = vec_ty.walk().nth(1).unwrap().expect_ty();\n         if cx\n             .tcx\n             .lang_items()\n@@ -134,8 +133,6 @@ impl<'a, 'tcx> SameItemPushVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             // Non-determinism may occur ... don't give a lint\n@@ -175,10 +172,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n // Given some statement, determine if that statement is a push on a Vec. If it is, return\n@@ -187,7 +180,7 @@ fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&\n     if_chain! {\n             // Extract method being called\n             if let StmtKind::Semi(semi_stmt) = &stmt.kind;\n-            if let ExprKind::MethodCall(path, _, args, _) = &semi_stmt.kind;\n+            if let ExprKind::MethodCall(path, args, _) = &semi_stmt.kind;\n             // Figure out the parameters for the method call\n             if let Some(self_expr) = args.get(0);\n             if let Some(pushed_item) = args.get(1);"}, {"sha": "15f419e4410ca86ccdf83c2843c58b63625122bb", "filename": "clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -16,7 +16,7 @@ pub(super) fn check<'tcx>(\n ) {\n     let arg_expr = match arg.kind {\n         ExprKind::AddrOf(BorrowKind::Ref, _, ref_arg) => ref_arg,\n-        ExprKind::MethodCall(method, _, args, _) if args.len() == 1 && method.ident.name == rustc_span::sym::iter => {\n+        ExprKind::MethodCall(method, args, _) if args.len() == 1 && method.ident.name == rustc_span::sym::iter => {\n             &args[0]\n         },\n         _ => return,"}, {"sha": "eac0f03b142a821c56ade84d17f2ea5fe8264f04", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,10 +3,10 @@ use clippy_utils::{get_parent_expr, is_integer_const, path_to_local, path_to_loc\n use if_chain::if_chain;\n use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor};\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::Ty;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Symbol};\n@@ -50,8 +50,6 @@ impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.done {\n             return;\n@@ -102,9 +100,6 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n             walk_expr(self, expr);\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n enum InitializeVisitorState<'hir> {\n@@ -151,7 +146,7 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_local(&mut self, l: &'tcx Local<'_>) {\n         // Look for declarations of the variable\n@@ -254,8 +249,8 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n \n@@ -283,8 +278,6 @@ pub(super) struct LoopNestVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         if stmt.hir_id == self.hir_id {\n             self.nesting = LookFurther;\n@@ -323,10 +316,6 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n         }\n         walk_pat(self, pat);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// If `arg` was the argument to a `for` loop, return the \"cleanest\" way of writing the"}, {"sha": "5dcfed65c78ac7829e004564ce8b1957c81d4866", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,11 +5,10 @@ use clippy_utils::usage::mutated_variables;\n use if_chain::if_chain;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefIdMap;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::HirIdSet;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n     if constant(cx, cx.typeck_results(), cond).is_some() {\n@@ -67,8 +66,6 @@ struct HasBreakOrReturnVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.has_break_or_return {\n             return;\n@@ -84,10 +81,6 @@ impl<'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Collects the set of variables in an expression\n@@ -123,8 +116,6 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::Path(_) => self.insert_def_id(ex),\n@@ -134,8 +125,4 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n             _ => walk_expr(self, ex),\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "20a8294a0d1acf0132adf4222149a3baec66ddf4", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::{\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let Res::Def(_, pat_did) = pat_path.res;\n         if match_def_path(cx, pat_did, &paths::OPTION_SOME);\n         // check for call to `Iterator::next`\n-        if let ExprKind::MethodCall(method_name, _, [iter_expr], _) = let_expr.kind;\n+        if let ExprKind::MethodCall(method_name, [iter_expr], _) = let_expr.kind;\n         if method_name.ident.name == sym::next;\n         if is_trait_method(cx, let_expr, sym::Iterator);\n         if let Some(iter_expr_struct) = try_parse_iter_expr(cx, iter_expr);\n@@ -211,11 +211,6 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n         uses_iter: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, '_, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if self.uses_iter {\n                 // return\n@@ -254,11 +249,6 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_iter: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for AfterLoopVisitor<'_, '_, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if self.used_iter {\n                 return;\n@@ -293,12 +283,6 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_after: bool,\n     }\n     impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_local(&mut self, l: &'tcx Local<'_>) {\n             if !self.after_loop {\n                 l.pat.each_binding_or_first(&mut |_, id, _, _| {"}, {"sha": "babc6fab3c0fb03d5c617c001001bdb80df97fe2", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n-    IsAsync, ItemKind, LifetimeName, TraitRef, Ty, TyKind, TypeBindingKind,\n+    IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -140,7 +140,7 @@ fn future_output_ty<'tcx>(trait_ref: &'tcx TraitRef<'tcx>) -> Option<&'tcx Ty<'t\n         if args.bindings.len() == 1;\n         let binding = &args.bindings[0];\n         if binding.ident.name == sym::Output;\n-        if let TypeBindingKind::Equality{ty: output} = binding.kind;\n+        if let TypeBindingKind::Equality{term: Term::Ty(output)} = binding.kind;\n         then {\n             return Some(output)\n         }"}, {"sha": "809aa168a7a0ee2f8152dc3f0b7884a9f20dba5e", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::{match_def_path, meets_msrv, msrvs, paths};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, GenericArg, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "33d1bb2985f43fdcd4dcd525abf8d0fb16082c78", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_ast::ast::{FieldDef, Item, ItemKind, Variant, VariantData, VisibilityKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n@@ -116,7 +116,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n                 |diag| {\n                     if_chain! {\n                         if !item.attrs.iter().any(|attr| attr.has_name(sym::non_exhaustive));\n-                        let header_span = cx.sess.source_map().span_until_char(item.span, '{');\n+                        let header_span = cx.sess().source_map().span_until_char(item.span, '{');\n                         if let Some(snippet) = snippet_opt(cx, header_span);\n                         then {\n                             diag.span_suggestion(\n@@ -149,7 +149,7 @@ fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data:\n             VariantData::Unit(_) => unreachable!(\"`VariantData::Unit` is already handled above\"),\n         };\n \n-        cx.sess.source_map().span_until_char(item.span, delimiter)\n+        cx.sess().source_map().span_until_char(item.span, delimiter)\n     }\n \n     let fields = data.fields();"}, {"sha": "bf4ab29d90876aa66c393904942f6ff87983dde1", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualOkOr {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(method_segment, _, args, _) = scrutinee.kind;\n+            if let ExprKind::MethodCall(method_segment, args, _) = scrutinee.kind;\n             if method_segment.ident.name == sym!(map_or);\n             if args.len() == 3;\n             let method_receiver = &args[0];"}, {"sha": "aacabf303a7025dd6f7c841ee9acb1589ecb495f", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -6,11 +6,10 @@ use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, msrvs, pat\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -75,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n \n         if_chain! {\n             if let Some(higher::If { cond, then, .. }) = higher::If::hir(expr);\n-            if let ExprKind::MethodCall(_, _, [target_arg, pattern], _) = cond.kind;\n+            if let ExprKind::MethodCall(_, [target_arg, pattern], _) = cond.kind;\n             if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(cond.hir_id);\n             if let ExprKind::Path(target_path) = &target_arg.kind;\n             then {\n@@ -133,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n // Returns `Some(arg)` if `expr` matches `arg.len()` and `None` otherwise.\n fn len_arg<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if_chain! {\n-        if let ExprKind::MethodCall(_, _, [arg], _) = expr.kind;\n+        if let ExprKind::MethodCall(_, [arg], _) = expr.kind;\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if match_def_path(cx, method_def_id, &paths::STR_LEN);\n         then {\n@@ -203,11 +202,6 @@ fn find_stripping<'tcx>(\n     }\n \n     impl<'a, 'tcx> Visitor<'tcx> for StrippingFinder<'a, 'tcx> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n             if_chain! {\n                 if is_ref_str(self.cx, ex);"}, {"sha": "3f8eeb736fbd2e5c155054c7176c04dc0abe8bc4", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_trait_method, meets_msrv, msrvs, peel_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::Adjust;\n@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n         }\n \n         if_chain! {\n-            if let hir::ExprKind::MethodCall(method, _, args, _) = e.kind;\n+            if let hir::ExprKind::MethodCall(method, args, _) = e.kind;\n             if args.len() == 2;\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n                                     }\n                                 }\n                             },\n-                            hir::ExprKind::MethodCall(method, _, [obj], _) => if_chain! {\n+                            hir::ExprKind::MethodCall(method, [obj], _) => if_chain! {\n                                 if ident_eq(name, obj) && method.ident.name == sym::clone;\n                                 if let Some(fn_id) = cx.typeck_results().type_dependent_def_id(closure_expr.hir_id);\n                                 if let Some(trait_id) = cx.tcx.trait_of_item(fn_id);"}, {"sha": "e3a42de0b7c10c183299aaa5b18de8efc6b1c6ab", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n         }\n \n         // check if this is a method call (e.g. x.foo())\n-        if let ExprKind::MethodCall(method, _t_span, args, _) = e.kind {\n+        if let ExprKind::MethodCall(method, args, _) = e.kind {\n             // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n             // Enum::Variant[2]))\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {"}, {"sha": "0f6ac47843241d9cc3718d8548eea50ecb746b9b", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -129,7 +129,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) ->\n     }\n \n     match expr.kind {\n-        hir::ExprKind::Call(_, _) | hir::ExprKind::MethodCall(_, _, _, _) => {\n+        hir::ExprKind::Call(_, _) | hir::ExprKind::MethodCall(..) => {\n             // Calls can't be reduced any more\n             Some(expr.span)\n         },"}, {"sha": "77a4917ec58f0a80afd66d1d8e4e8841a94ad96b", "filename": "clippy_lints/src/match_result_ok.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n             };\n \n         if_chain! {\n-            if let ExprKind::MethodCall(_, ok_span, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n+            if let ExprKind::MethodCall(ok_path, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n             if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n             if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::Result);\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n \n                 let mut applicability = Applicability::MachineApplicable;\n                 let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n-                let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_span), \"\", &mut applicability);\n+                let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_path.ident.span), \"\", &mut applicability);\n                 let sugg = format!(\n                     \"{} let Ok({}) = {}\",\n                     ifwhile,"}, {"sha": "85aec93670b95642ef3f2f51883fc185984ad2b1", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,10 +2,9 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -86,16 +85,9 @@ struct MatchExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n-            ExprKind::MethodCall(segment, _, [receiver], _) if self.case_altered(segment.ident.as_str(), receiver) => {\n-            },\n+            ExprKind::MethodCall(segment, [receiver], _) if self.case_altered(segment.ident.as_str(), receiver) => {},\n             _ => walk_expr(self, ex),\n         }\n     }"}, {"sha": "2579404fb18cc5b152fd8448903475d4e1ba5bbf", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -25,7 +25,7 @@ use rustc_hir::{\n     Mutability, Node, Pat, PatKind, PathSegment, QPath, RangeEnd, TyKind,\n };\n use rustc_hir::{HirIdMap, HirIdSet};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -1776,7 +1776,7 @@ mod redundant_pattern_match {\n     use rustc_errors::Applicability;\n     use rustc_hir::LangItem::{OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n     use rustc_hir::{\n-        intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n+        intravisit::{walk_expr, Visitor},\n         Arm, Block, Expr, ExprKind, LangItem, MatchSource, Node, Pat, PatKind, QPath, UnOp,\n     };\n     use rustc_lint::LateContext;\n@@ -1880,11 +1880,6 @@ mod redundant_pattern_match {\n             res: bool,\n         }\n         impl<'a, 'tcx> Visitor<'tcx> for V<'a, 'tcx> {\n-            type Map = ErasedMap<'tcx>;\n-            fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-                NestedVisitorMap::None\n-            }\n-\n             fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n                 match expr.kind {\n                     // Taking the reference of a value leaves a temporary\n@@ -1914,7 +1909,7 @@ mod redundant_pattern_match {\n                     },\n                     // Method calls can take self by reference.\n                     // e.g. In `String::new().len()` the string is a temporary value.\n-                    ExprKind::MethodCall(_, _, [self_arg, args @ ..], _) => {\n+                    ExprKind::MethodCall(_, [self_arg, args @ ..], _) => {\n                         if !matches!(self_arg.kind, ExprKind::Path(_)) {\n                             let self_by_ref = self\n                                 .cx\n@@ -2025,7 +2020,7 @@ mod redundant_pattern_match {\n         // check that `while_let_on_iterator` lint does not trigger\n         if_chain! {\n             if keyword == \"while\";\n-            if let ExprKind::MethodCall(method_path, _, _, _) = let_expr.kind;\n+            if let ExprKind::MethodCall(method_path, _, _) = let_expr.kind;\n             if method_path.ident.name == sym::next;\n             if is_trait_method(cx, let_expr, sym::Iterator);\n             then {"}, {"sha": "a184806d021bcfcf86617c9fff35eaba84cff16a", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "ce958b8ac9f5991a82de380f4ce71575ac60381c", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -121,9 +121,9 @@ pub(crate) trait BindInsteadOfMap {\n         });\n         let (span, msg) = if_chain! {\n             if can_sugg;\n-            if let hir::ExprKind::MethodCall(_, span, ..) = expr.kind;\n+            if let hir::ExprKind::MethodCall(segment, ..) = expr.kind;\n             if let Some(msg) = Self::lint_msg(cx);\n-            then { (span, msg) } else { return false; }\n+            then { (segment.ident.span, msg) } else { return false; }\n         };\n         span_lint_and_then(cx, BIND_INSTEAD_OF_MAP, expr.span, &msg, |diag| {\n             multispan_sugg_with_applicability("}, {"sha": "0b38a07204e86cec08a825a3d00b5e7b3dc09c46", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -81,12 +81,12 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                 // &*x is a nop, &x.clone() is not\n                 ExprKind::AddrOf(..) => return,\n                 // (*x).func() is useless, x.clone().func() can work in case func borrows self\n-                ExprKind::MethodCall(_, _, [self_arg, ..], _)\n+                ExprKind::MethodCall(_, [self_arg, ..], _)\n                     if expr.hir_id == self_arg.hir_id && ty != cx.typeck_results().expr_ty_adjusted(expr) =>\n                 {\n                     return;\n                 },\n-                ExprKind::MethodCall(_, _, [self_arg, ..], _) if expr.hir_id == self_arg.hir_id => true,\n+                ExprKind::MethodCall(_, [self_arg, ..], _) if expr.hir_id == self_arg.hir_id => true,\n                 ExprKind::Match(_, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)\n                 | ExprKind::Field(..)\n                 | ExprKind::Index(..) => true,"}, {"sha": "d813edab687e87a47fe08b6dc9fa46ecc00b42a0", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -28,9 +28,9 @@ pub(super) fn check<'tcx>(\n         loop {\n             arg_root = match &arg_root.kind {\n                 hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, expr) => expr,\n-                hir::ExprKind::MethodCall(method_name, _, call_args, _) => {\n+                hir::ExprKind::MethodCall(method_name, call_args, _) => {\n                     if call_args.len() == 1\n-                        && (method_name.ident.name == sym::as_str || method_name.ident.name == sym!(as_ref))\n+                        && (method_name.ident.name == sym::as_str || method_name.ident.name == sym::as_ref)\n                         && {\n                             let arg_type = cx.typeck_results().expr_ty(&call_args[0]);\n                             let base_type = arg_type.peel_refs();"}, {"sha": "a15fe609402251db53e17ba0ba32c8c3fee7d45b", "filename": "clippy_lints/src/methods/extend_with_drain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fextend_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fextend_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fextend_with_drain.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg:\n     if_chain! {\n         if is_type_diagnostic_item(cx, ty, sym::Vec);\n         //check source object\n-        if let ExprKind::MethodCall(src_method, _, [drain_vec, drain_arg], _) = &arg.kind;\n+        if let ExprKind::MethodCall(src_method, [drain_vec, drain_arg], _) = &arg.kind;\n         if src_method.ident.as_str() == \"drain\";\n         let src_ty = cx.typeck_results().expr_ty(drain_vec);\n         //check if actual src type is mutable for code suggestion"}, {"sha": "ba1af9f3d62be9a38934c24790f9bbb7b4bdc98c", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -28,7 +28,7 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n             let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n-                hir::ExprKind::MethodCall(hir::PathSegment { ident, .. }, _, args, _) => {\n+                hir::ExprKind::MethodCall(hir::PathSegment { ident, .. }, args, _) => {\n                     if_chain! {\n                     if ident.name == method_name;\n                     if let hir::ExprKind::Path(path) = &args[0].kind;\n@@ -118,7 +118,7 @@ pub(super) fn check<'tcx>(\n             };\n             // closure ends with is_some() or is_ok()\n             if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n-            if let ExprKind::MethodCall(path, _, [filter_arg], _) = filter_body.value.kind;\n+            if let ExprKind::MethodCall(path, [filter_arg], _) = filter_body.value.kind;\n             if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).ty_adt_def();\n             if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did) {\n                 Some(false)\n@@ -135,7 +135,7 @@ pub(super) fn check<'tcx>(\n             if let [map_param] = map_body.params;\n             if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;\n             // closure ends with expect() or unwrap()\n-            if let ExprKind::MethodCall(seg, _, [map_arg, ..], _) = map_body.value.kind;\n+            if let ExprKind::MethodCall(seg, [map_arg, ..], _) = map_body.value.kind;\n             if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n \n             let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {"}, {"sha": "4b43448bf7b98a39f30d39ca9e1e76097e03f6ed", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2039,10 +2039,10 @@ impl_lint_pass!(Methods => [\n \n /// Extracts a method call name, args, and `Span` of the method name.\n fn method_call<'tcx>(recv: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx str, &'tcx [hir::Expr<'tcx>], Span)> {\n-    if let ExprKind::MethodCall(path, span, args, _) = recv.kind {\n+    if let ExprKind::MethodCall(path, args, _) = recv.kind {\n         if !args.iter().any(|e| e.span.from_expansion()) {\n             let name = path.ident.name.as_str();\n-            return Some((name, args, span));\n+            return Some((name, args, path.ident.span));\n         }\n     }\n     None\n@@ -2060,14 +2060,15 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             hir::ExprKind::Call(func, args) => {\n                 from_iter_instead_of_collect::check(cx, expr, args, func);\n             },\n-            hir::ExprKind::MethodCall(method_call, ref method_span, args, _) => {\n-                or_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n-                expect_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n+            hir::ExprKind::MethodCall(method_call, args, _) => {\n+                let method_span = method_call.ident.span;\n+                or_fun_call::check(cx, expr, method_span, method_call.ident.as_str(), args);\n+                expect_fun_call::check(cx, expr, method_span, method_call.ident.as_str(), args);\n                 clone_on_copy::check(cx, expr, method_call.ident.name, args);\n                 clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n                 inefficient_to_string::check(cx, expr, method_call.ident.name, args);\n                 single_char_add_str::check(cx, expr, args);\n-                into_iter_on_ref::check(cx, expr, *method_span, method_call.ident.name, args);\n+                into_iter_on_ref::check(cx, expr, method_span, method_call.ident.name, args);\n                 single_char_pattern::check(cx, expr, method_call.ident.name, args);\n                 unnecessary_to_owned::check(cx, expr, method_call.ident.name, args);\n             },\n@@ -2090,7 +2091,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n@@ -2166,10 +2167,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             // walk the return type and check for Self (this does not check associated types)\n             if let Some(self_adt) = self_ty.ty_adt_def() {\n-                if contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n+                if contains_adt_constructor(ret_ty, self_adt) {\n                     return;\n                 }\n-            } else if contains_ty(cx.tcx, ret_ty, self_ty) {\n+            } else if contains_ty(ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -2178,12 +2179,16 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n+                        let assoc_ty = match projection_predicate.term {\n+                            ty::Term::Ty(ty) => ty,\n+                            ty::Term::Const(_c) => continue,\n+                        };\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(cx.tcx, projection_predicate.ty, self_adt) {\n+                            if contains_adt_constructor(assoc_ty, self_adt) {\n                                 return;\n                             }\n-                        } else if contains_ty(cx.tcx, projection_predicate.ty, self_ty) {\n+                        } else if contains_ty(assoc_ty, self_ty) {\n                             return;\n                         }\n                     }\n@@ -2232,7 +2237,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n             let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n-            if !contains_ty(cx.tcx, ret_ty, self_ty);\n+            if !contains_ty(ret_ty, self_ty);\n \n             then {\n                 span_lint("}, {"sha": "ba2d2914315f9d0be879665f1d55d0b81e41f6ef", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -56,7 +56,7 @@ pub(super) fn check<'tcx>(\n             let closure_expr = peel_blocks(&closure_body.value);\n \n             match &closure_expr.kind {\n-                hir::ExprKind::MethodCall(_, _, args, _) => {\n+                hir::ExprKind::MethodCall(_, args, _) => {\n                     if_chain! {\n                         if args.len() == 1;\n                         if path_to_local_id(&args[0], closure_body.params[0].pat.hir_id);"}, {"sha": "9c6f421103185c7f02437bc63372256642fa3111", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,10 +5,10 @@ use clippy_utils::ty::is_copy;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_path, Visitor};\n use rustc_hir::{self, HirId, Path};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n \n@@ -97,15 +97,15 @@ struct UnwrapVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n \n@@ -116,7 +116,7 @@ struct MapExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n@@ -126,8 +126,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "b2f624ed480e4cc903fcbebc08722105a9449037", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -132,7 +132,7 @@ fn parse_iter_usage<'tcx>(\n ) -> Option<IterUsage> {\n     let (kind, span) = match iter.next() {\n         Some((_, Node::Expr(e))) if e.span.ctxt() == ctxt => {\n-            let (name, args) = if let ExprKind::MethodCall(name, _, [_, args @ ..], _) = e.kind {\n+            let (name, args) = if let ExprKind::MethodCall(name, [_, args @ ..], _) = e.kind {\n                 (name, args)\n             } else {\n                 return None;\n@@ -173,7 +173,7 @@ fn parse_iter_usage<'tcx>(\n                         } else {\n                             if_chain! {\n                                 if let Some((_, Node::Expr(next_expr))) = iter.next();\n-                                if let ExprKind::MethodCall(next_name, _, [_], _) = next_expr.kind;\n+                                if let ExprKind::MethodCall(next_name, [_], _) = next_expr.kind;\n                                 if next_name.ident.name == sym::next;\n                                 if next_expr.span.ctxt() == ctxt;\n                                 if let Some(next_id) = cx.typeck_results().type_dependent_def_id(next_expr.hir_id);\n@@ -217,7 +217,7 @@ fn parse_iter_usage<'tcx>(\n                 }\n             },\n             _ if e.span.ctxt() != ctxt => (None, span),\n-            ExprKind::MethodCall(name, _, [_], _)\n+            ExprKind::MethodCall(name, [_], _)\n                 if name.ident.name == sym::unwrap\n                     && cx\n                         .typeck_results()\n@@ -289,7 +289,7 @@ fn check_iter<'tcx>(\n ) -> bool {\n     match iter.next() {\n         Some((_, Node::Expr(e))) if e.span.ctxt() == ctxt => {\n-            let (name, args) = if let ExprKind::MethodCall(name, _, [_, args @ ..], _) = e.kind {\n+            let (name, args) = if let ExprKind::MethodCall(name, [_, args @ ..], _) = e.kind {\n                 (name, args)\n             } else {\n                 return false;"}, {"sha": "784014f0d87433de6b4b373052c7ffe4eb0e1fb3", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,10 +2,9 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::usage::mutated_variables;\n use clippy_utils::{is_lang_ctor, is_trait_method, path_to_local_id};\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::LangItem::{OptionNone, OptionSome};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, TyS};\n use rustc_span::sym;\n \n@@ -113,8 +112,6 @@ impl<'a, 'tcx> ReturnVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReturnVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if let hir::ExprKind::Ret(Some(expr)) = &expr.kind {\n             let (found_mapping, found_filtering) = check_expression(self.cx, self.arg_id, expr);\n@@ -124,8 +121,4 @@ impl<'a, 'tcx> Visitor<'tcx> for ReturnVisitor<'a, 'tcx> {\n             walk_expr(self, expr);\n         }\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "65e94c5f44a9f0ae35a0023251bb3cfbf12f88f4", "filename": "clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -4,10 +4,11 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait};\n use clippy_utils::{fn_def_id, get_parent_expr, path_to_local_id, usage};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, HirId, LangItem, Mutability, Pat};\n use rustc_lint::LateContext;\n-use rustc_middle::{hir::map::Map, ty};\n+use rustc_middle::hir::nested_filter;\n+use rustc_middle::ty;\n use rustc_span::{sym, Symbol};\n \n use super::UNNECESSARY_TO_OWNED;\n@@ -44,7 +45,7 @@ pub fn check_for_loop_iter(\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n             let snippet = if_chain! {\n-                if let ExprKind::MethodCall(maybe_iter_method_name, _, [collection], _) = receiver.kind;\n+                if let ExprKind::MethodCall(maybe_iter_method_name, [collection], _) = receiver.kind;\n                 if maybe_iter_method_name.ident.name == sym::iter;\n \n                 if let Some(iterator_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n@@ -139,10 +140,10 @@ struct CloneOrCopyVisitor<'cx, 'tcx> {\n }\n \n impl<'cx, 'tcx> Visitor<'tcx> for CloneOrCopyVisitor<'cx, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n@@ -154,7 +155,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for CloneOrCopyVisitor<'cx, 'tcx> {\n                         self.addr_of_exprs.push(parent);\n                         return;\n                     },\n-                    ExprKind::MethodCall(_, _, args, _) => {\n+                    ExprKind::MethodCall(_, args, _) => {\n                         if_chain! {\n                             if args.iter().skip(1).all(|arg| !self.is_binding(arg));\n                             if let Some(method_def_id) = self.cx.typeck_results().type_dependent_def_id(parent.hir_id);"}, {"sha": "b67bfb6597b0489d243987669f3fab4600390e0c", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -243,9 +243,10 @@ fn check_other_call_arg<'tcx>(\n         if if trait_predicate.def_id() == deref_trait_id {\n             if let [projection_predicate] = projection_predicates[..] {\n                 let normalized_ty =\n-                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.ty);\n+                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n-                    && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\") == Some(normalized_ty)\n+                    && get_associated_type(cx, receiver_ty, deref_trait_id,\n+                    \"Target\").map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n             } else {\n                 false\n             }\n@@ -312,7 +313,7 @@ fn get_callee_substs_and_args<'tcx>(\n         }\n     }\n     if_chain! {\n-        if let ExprKind::MethodCall(_, _, args, _) = expr.kind;\n+        if let ExprKind::MethodCall(_, args, _) = expr.kind;\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         then {\n             let substs = cx.typeck_results().node_substs(expr.hir_id);"}, {"sha": "ca5d33ee8b07fc8043560f042fff75932830a528", "filename": "clippy_lints/src/methods/useless_asref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -23,8 +23,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str,\n             // allow the `as_ref` or `as_mut` if it is followed by another method call\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(cx, expr);\n-                if let hir::ExprKind::MethodCall(_, ref span, _, _) = parent.kind;\n-                if span != &expr.span;\n+                if let hir::ExprKind::MethodCall(segment, ..) = parent.kind;\n+                if segment.ident.span != expr.span;\n                 then {\n                     return;\n                 }"}, {"sha": "c4cf994aacaa9f8aba2d595ed50a4aa2e5b3dbca", "filename": "clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -24,7 +24,7 @@ pub(super) fn derefs_to_slice<'tcx>(\n         }\n     }\n \n-    if let hir::ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind {\n+    if let hir::ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind {\n         if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(self_arg)) {\n             Some(self_arg)\n         } else {"}, {"sha": "cf9770f5c1fd320af91b3d297424fd33bb20388b", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -86,7 +86,7 @@ fn min_max<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(MinMax, Cons\n                 None\n             }\n         },\n-        ExprKind::MethodCall(path, _, args, _) => {\n+        ExprKind::MethodCall(path, args, _) => {\n             if_chain! {\n                 if let [obj, _] = args;\n                 if cx.typeck_results().expr_ty(obj).is_floating_point() || match_trait_method(cx, expr, &paths::ORD);"}, {"sha": "3918bdbdf4387cc7e5bc926df8d5519bfdd684b8", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -523,7 +523,7 @@ fn is_signum(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     }\n \n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, _, [ref self_arg, ..], _) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, [ref self_arg, ..], _) = expr.kind;\n         if sym!(signum) == method_name.ident.name;\n         // Check that the receiver of the signum() is a float (expressions[0] is the receiver of\n         // the method call)"}, {"sha": "d955fad7d41a2fb12295dc352f901dfa19c883bf", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -12,7 +12,7 @@ use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{Expr, ExprKind, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -342,7 +342,7 @@ impl EarlyLintPass for MiscEarlyLints {\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "bad9e0be82e61e026a25b715d2b20e50d18c960a", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msr\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if trait_ref_of_method(cx, hir_id).is_some()\n+                if trait_ref_of_method(cx, def_id).is_some()\n                     || already_const(sig.header)\n                     || method_accepts_dropable(cx, sig.decl.inputs)\n                 {"}, {"sha": "b8dfe996880661e118ec06aa357a4606a4d1815b", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -80,9 +80,9 @@ impl EarlyLintPass for ModStyle {\n             return;\n         }\n \n-        let files = cx.sess.source_map().files();\n+        let files = cx.sess().source_map().files();\n \n-        let trim_to_src = if let RealFileName::LocalPath(p) = &cx.sess.opts.working_dir {\n+        let trim_to_src = if let RealFileName::LocalPath(p) = &cx.sess().opts.working_dir {\n             p.to_string_lossy()\n         } else {\n             return;"}, {"sha": "1bdd805f658549801dec79a6bfd63d1d14e6e66f", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.hir_id()).is_none() {\n+            if trait_ref_of_method(cx, item.def_id).is_none() {\n                 check_sig(cx, item.hir_id(), sig.decl);\n             }\n         }"}, {"sha": "cb16f00047a394b06b147151fd0244f9bde86274", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::higher;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -47,8 +46,6 @@ pub struct MutVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if in_external_macro(self.cx.sess(), expr.span) {\n             return;\n@@ -114,7 +111,4 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n \n         intravisit::walk_ty(self, ty);\n     }\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }"}, {"sha": "7871be41d62946b94dbf2cb3c43a731f6be555b4", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -49,7 +49,7 @@ declare_lint_pass!(MutMutexLock => [MUT_MUTEX_LOCK]);\n impl<'tcx> LateLintPass<'tcx> for MutMutexLock {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, method_span, [self_arg, ..], _) = &ex.kind;\n+            if let ExprKind::MethodCall(path, [self_arg, ..], _) = &ex.kind;\n             if path.ident.name == sym!(lock);\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, inner_ty, Mutability::Mut) = ty.kind();\n@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for MutMutexLock {\n                 span_lint_and_sugg(\n                     cx,\n                     MUT_MUTEX_LOCK,\n-                    *method_span,\n+                    path.ident.span,\n                     \"calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference\",\n                     \"change this to\",\n                     \"get_mut\".to_owned(),"}, {"sha": "5c3e505c06c47821976f3377b1606a4d71c5d83e", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n                     );\n                 }\n             },\n-            ExprKind::MethodCall(path, _, arguments, _) => {\n+            ExprKind::MethodCall(path, arguments, _) => {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);"}, {"sha": "4ba68c8eacd2474f7cbb00c27212e21793f771cf", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::macros::{find_assert_eq_args, root_macro_call_first_node};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{BorrowKind, Expr, ExprKind, MatchSource, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -84,7 +84,7 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match expr.kind {\n@@ -111,7 +111,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }"}, {"sha": "6cf513b214e6dd14559216f4e49aefb4cd0c2992", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,10 +1,9 @@\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    intravisit::{walk_expr, NestedVisitorMap, Visitor},\n+    intravisit::{walk_expr, Visitor},\n     Expr, ExprKind, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{source_map::Span, sym, Symbol};\n \n@@ -57,12 +56,12 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n \n         if_chain! {\n             // Check the method name is `for_each`.\n-            if let ExprKind::MethodCall(method_name, _, [for_each_recv, for_each_arg], _) = expr.kind;\n+            if let ExprKind::MethodCall(method_name, [for_each_recv, for_each_arg], _) = expr.kind;\n             if method_name.ident.name == Symbol::intern(\"for_each\");\n             // Check `for_each` is an associated function of `Iterator`.\n             if is_trait_method(cx, expr, sym::Iterator);\n             // Checks the receiver of `for_each` is also a method call.\n-            if let ExprKind::MethodCall(_, _, [iter_recv], _) = for_each_recv.kind;\n+            if let ExprKind::MethodCall(_, [iter_recv], _) = for_each_recv.kind;\n             // Skip the lint if the call chain is too long. e.g. `v.field.iter().for_each()` or\n             // `v.foo().iter().for_each()` must be skipped.\n             if matches!(\n@@ -136,8 +135,6 @@ struct RetCollector {\n }\n \n impl<'tcx> Visitor<'tcx> for RetCollector {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &Expr<'_>) {\n         match expr.kind {\n             ExprKind::Ret(..) => {\n@@ -160,8 +157,4 @@ impl<'tcx> Visitor<'tcx> for RetCollector {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "21d8263390af3c813d2ae842d8bfa5f167fa0698", "filename": "clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n \n         if_chain! {\n             if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n-            if let ExprKind::MethodCall(path, _, [sub_expr], _) = expr.kind;\n+            if let ExprKind::MethodCall(path, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n             if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n             if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );"}, {"sha": "ebd4fb0bf51ccb4390a4fa96fdf7e9c5c42f1549", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -118,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds().iter())\n-            .filter(|p| !p.is_global(cx.tcx))\n+            .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n                 match obligation.predicate.kind().no_bound_vars() {"}, {"sha": "aec95530bba67ea3b3d2faaeaf93cec7b9612c44", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n                             if cx.access_levels.is_reachable(impl_item.def_id);\n-                            let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n+                            let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if TyS::same_type(self_ty, return_ty(cx, id));\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);"}, {"sha": "21ac6548b0179cafa486608e4f7153d04e137080", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_def_id = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+            let item_def_id = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n             let item = cx.tcx.hir().expect_item(item_def_id);\n \n             match &item.kind {"}, {"sha": "0d0c88b02c78b6d5adabe7ed4a6b8bc41b599507", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ast::{\n     self, Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n@@ -356,7 +356,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n \n impl EarlyLintPass for NonExpressiveNames {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n \n@@ -371,7 +371,7 @@ impl EarlyLintPass for NonExpressiveNames {\n     }\n \n     fn check_impl_item(&mut self, cx: &EarlyContext<'_>, item: &AssocItem) {\n-        if in_external_macro(cx.sess, item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n "}, {"sha": "ed022b9d5291cbf3ad6cdf3df582a6ced7b25440", "filename": "clippy_lints/src/non_octal_unix_permissions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -43,7 +43,7 @@ declare_lint_pass!(NonOctalUnixPermissions => [NON_OCTAL_UNIX_PERMISSIONS]);\n impl<'tcx> LateLintPass<'tcx> for NonOctalUnixPermissions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         match &expr.kind {\n-            ExprKind::MethodCall(path, _, [func, param], _) => {\n+            ExprKind::MethodCall(path, [func, param], _) => {\n                 let obj_ty = cx.typeck_results().expr_ty(func).peel_refs();\n \n                 if_chain! {"}, {"sha": "ab1559c85d8b1f431946778eeb03991ffa925aa9", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                                 non_send_fields.push(NonSendField {\n                                     def: field_def,\n                                     ty: field_ty,\n-                                    generic_params: collect_generic_params(cx, field_ty),\n+                                    generic_params: collect_generic_params(field_ty),\n                                 })\n                             }\n                         }\n@@ -171,8 +171,8 @@ impl<'tcx> NonSendField<'tcx> {\n \n /// Given a type, collect all of its generic parameters.\n /// Example: `MyStruct<P, Box<Q, R>>` => `vec![P, Q, R]`\n-fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n-    ty.walk(cx.tcx)\n+fn collect_generic_params(ty: Ty<'_>) -> Vec<Ty<'_>> {\n+    ty.walk()\n         .filter_map(|inner| match inner.unpack() {\n             GenericArgKind::Type(inner_ty) => Some(inner_ty),\n             _ => None,\n@@ -226,7 +226,7 @@ fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'t\n \n /// Checks if the type contains any pointer-like types in substs (including nested ones)\n fn contains_pointer_like<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n-    for ty_node in target_ty.walk(cx.tcx) {\n+    for ty_node in target_ty.walk() {\n         if let GenericArgKind::Type(inner_ty) = ty_node.unpack() {\n             match inner_ty.kind() {\n                 ty::RawPtr(_) => {"}, {"sha": "c19cea661042d4c81a34572ec178f25aed6839d3", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_ast::token::{Lit, LitKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -51,7 +51,7 @@ declare_lint_pass!(OctalEscapes => [OCTAL_ESCAPES]);\n \n impl EarlyLintPass for OctalEscapes {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n "}, {"sha": "5a0b5042018ba6c68fecc751faa8fac11087f341", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -32,7 +32,7 @@ declare_lint_pass!(OpenOptions => [NONSENSICAL_OPEN_OPTIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for OpenOptions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &e.kind {\n+        if let ExprKind::MethodCall(path, [self_arg, ..], _) = &e.kind {\n             let obj_ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n             if path.ident.name == sym!(open) && match_type(cx, obj_ty, &paths::OPEN_OPTIONS) {\n                 let mut options = Vec::new();\n@@ -60,7 +60,7 @@ enum OpenOption {\n }\n \n fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec<(OpenOption, Argument)>) {\n-    if let ExprKind::MethodCall(path, _, arguments, _) = argument.kind {\n+    if let ExprKind::MethodCall(path, arguments, _) = argument.kind {\n         let obj_ty = cx.typeck_results().expr_ty(&arguments[0]).peel_refs();\n \n         // Only proceed if this is a call on some object of type std::fs::OpenOptions"}, {"sha": "c9f807f2aa3aadfe756369ac9e889dc8cafaf182", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -68,7 +68,7 @@ declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n \n /// Returns true iff the given expression is the result of calling `Result::ok`\n fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n-    if let ExprKind::MethodCall(path, _, &[ref receiver], _) = &expr.kind {\n+    if let ExprKind::MethodCall(path, &[ref receiver], _) = &expr.kind {\n         path.ident.name.as_str() == \"ok\"\n             && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(receiver), sym::Result)\n     } else {"}, {"sha": "3f940ce61c03e2c935d9870745384caa79aaa208", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -46,7 +46,7 @@ declare_lint_pass!(PathBufPushOverwrite => [PATH_BUF_PUSH_OVERWRITE]);\n impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, args, _) = expr.kind;\n+            if let ExprKind::MethodCall(path, args, _) = expr.kind;\n             if path.ident.name == sym!(push);\n             if args.len() == 2;\n             if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), sym::PathBuf);"}, {"sha": "b5d65542de0bf1c068279149bb67df8615006a81", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -10,14 +10,14 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdMap;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{\n     self as hir, AnonConst, BinOpKind, BindingAnnotation, Body, Expr, ExprKind, FnDecl, FnRetTy, GenericArg,\n     ImplItemKind, ItemKind, Lifetime, LifetimeName, Mutability, Node, Param, ParamName, PatKind, QPath, TraitFn,\n     TraitItem, TraitItemKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, AssocItems, AssocKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -519,9 +519,9 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n         skip_count: usize,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n         }\n \n         fn visit_anon_const(&mut self, _: &'tcx AnonConst) {}\n@@ -572,7 +572,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             set_skip_flag();\n                         }\n                     },\n-                    ExprKind::MethodCall(name, _, expr_args @ [self_arg, ..], _) => {\n+                    ExprKind::MethodCall(name, expr_args @ [self_arg, ..], _) => {\n                         let i = expr_args.iter().position(|arg| arg.hir_id == child_id).unwrap_or(0);\n                         if i == 0 {\n                             // Check if the method can be renamed."}, {"sha": "b907f38afbb92f96dfb27efe3659872e239bac34", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -93,7 +93,7 @@ fn expr_as_ptr_offset_call<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'_>,\n ) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>, Method)> {\n-    if let ExprKind::MethodCall(path_segment, _, [arg_0, arg_1, ..], _) = &expr.kind {\n+    if let ExprKind::MethodCall(path_segment, [arg_0, arg_1, ..], _) = &expr.kind {\n         if is_expr_ty_raw_ptr(cx, arg_0) {\n             if path_segment.ident.name == sym::offset {\n                 return Some((arg_0, arg_1, Method::Offset));"}, {"sha": "6f634ded5fef700ffcc8a08ce79fe92be7156f34", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -58,7 +58,7 @@ impl QuestionMark {\n     fn check_is_none_or_err_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n             if let Some(higher::If { cond, then, r#else }) = higher::If::hir(expr);\n-            if let ExprKind::MethodCall(segment, _, args, _) = &cond.kind;\n+            if let ExprKind::MethodCall(segment, args, _) = &cond.kind;\n             if let Some(subject) = args.get(0);\n             if (Self::option_check_and_early_return(cx, subject, then) && segment.ident.name == sym!(is_none)) ||\n                 (Self::result_check_and_early_return(cx, subject, then) && segment.ident.name == sym!(is_err));"}, {"sha": "8065ed3ffc55b44107959277d1260c16d3907b27", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -8,7 +8,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, QPath};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -190,7 +190,7 @@ impl_lint_pass!(Ranges => [\n impl<'tcx> LateLintPass<'tcx> for Ranges {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         match expr.kind {\n-            ExprKind::MethodCall(path, _, args, _) => {\n+            ExprKind::MethodCall(path, args, _) => {\n                 check_range_zip_with_len(cx, path, args, expr.span);\n             },\n             ExprKind::Binary(ref op, l, r) => {\n@@ -331,13 +331,13 @@ fn check_range_zip_with_len(cx: &LateContext<'_>, path: &PathSegment<'_>, args:\n         if path.ident.as_str() == \"zip\";\n         if let [iter, zip_arg] = args;\n         // `.iter()` call\n-        if let ExprKind::MethodCall(iter_path, _, iter_args, _) = iter.kind;\n+        if let ExprKind::MethodCall(iter_path, iter_args, _) = iter.kind;\n         if iter_path.ident.name == sym::iter;\n         // range expression in `.zip()` call: `0..x.len()`\n         if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::Range::hir(zip_arg);\n         if is_integer_const(cx, start, 0);\n         // `.len()` call\n-        if let ExprKind::MethodCall(len_path, _, len_args, _) = end.kind;\n+        if let ExprKind::MethodCall(len_path, len_args, _) = end.kind;\n         if len_path.ident.name == sym::len && len_args.len() == 1;\n         // `.iter()` and `.len()` called on same `Path`\n         if let ExprKind::Path(QPath::Resolved(_, iter_path)) = iter_args[0].kind;"}, {"sha": "3e0e32857f1dad1e0c02b49426f0e485e397982b", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n     Mutability,\n };\n-use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n+use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n@@ -575,7 +575,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 self.possible_borrower.add(borrowed.local, lhs);\n             },\n             other => {\n-                if ContainsRegion(self.cx.tcx)\n+                if ContainsRegion\n                     .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n                     .is_continue()\n                 {\n@@ -624,10 +624,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 .flat_map(HybridBitSet::iter)\n                 .collect();\n \n-            if ContainsRegion(self.cx.tcx)\n-                .visit_ty(self.body.local_decls[*dest].ty)\n-                .is_break()\n-            {\n+            if ContainsRegion.visit_ty(self.body.local_decls[*dest].ty).is_break() {\n                 mutable_variables.push(*dest);\n             }\n \n@@ -703,15 +700,12 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleOriginVisitor<'a, 'tcx> {\n     }\n }\n \n-struct ContainsRegion<'tcx>(TyCtxt<'tcx>);\n+struct ContainsRegion;\n \n-impl<'tcx> TypeVisitor<'tcx> for ContainsRegion<'tcx> {\n+impl TypeVisitor<'_> for ContainsRegion {\n     type BreakTy = ();\n-    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n-        Some(self.0)\n-    }\n \n-    fn visit_region(&mut self, _: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::BREAK\n     }\n }"}, {"sha": "5a25008e95e5bceae5bc16f9311c8b9bc87b78f4", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -8,8 +8,8 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor as HirVisitor;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -62,7 +62,7 @@ impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n \n impl EarlyLintPass for RedundantClosureCall {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n         if_chain! {\n@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                 count: usize,\n             }\n             impl<'a, 'tcx> hir_visit::Visitor<'tcx> for ClosureUsageCount<'a, 'tcx> {\n-                type Map = Map<'tcx>;\n+                type NestedFilter = nested_filter::OnlyBodies;\n \n                 fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n                     if_chain! {\n@@ -121,8 +121,8 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                     hir_visit::walk_expr(self, expr);\n                 }\n \n-                fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n-                    hir_visit::NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+                fn nested_visit_map(&mut self) -> Self::Map {\n+                    self.cx.tcx.hir()\n                 }\n             }\n             let mut closure_usage_count = ClosureUsageCount { cx, path, count: 0 };"}, {"sha": "73088ce1a87e74effa4a4b256e2e2f13b27c5993", "filename": "clippy_lints/src/redundant_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_else.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Block, Expr, ExprKind, Stmt, StmtKind};\n use rustc_ast::visit::{walk_expr, Visitor};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -46,7 +46,7 @@ declare_lint_pass!(RedundantElse => [REDUNDANT_ELSE]);\n \n impl EarlyLintPass for RedundantElse {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n-        if in_external_macro(cx.sess, stmt.span) {\n+        if in_external_macro(cx.sess(), stmt.span) {\n             return;\n         }\n         // Only look at expressions that are a whole statement"}, {"sha": "40a62fd6d20133382f1cfc40d4b12d7658f0c02c", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -55,7 +55,7 @@ impl EarlyLintPass for RedundantFieldNames {\n             return;\n         }\n \n-        if in_external_macro(cx.sess, expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n         if let ExprKind::Struct(ref se) = expr.kind {"}, {"sha": "898c70ace66f35776c42c3b6a866022af81c7751", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -46,7 +46,7 @@ declare_lint_pass!(RepeatOnce => [REPEAT_ONCE]);\n impl<'tcx> LateLintPass<'tcx> for RepeatOnce {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, [receiver, count], _) = &expr.kind;\n+            if let ExprKind::MethodCall(path, [receiver, count], _) = &expr.kind;\n             if path.ident.name == sym!(repeat);\n             if constant_context(cx, cx.typeck_results()).expr(count) == Some(Constant::Int(1));\n             if !receiver.span.from_expansion();"}, {"sha": "8068fa22d9ccf8eea0fb4801d0d9b3f92193184a", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -4,10 +4,9 @@ use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{Block, Body, Expr, ExprKind, FnDecl, HirId, MatchSource, PatKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -287,8 +286,6 @@ struct BorrowVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.borrows {\n             return;\n@@ -301,14 +298,10 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n                 .fn_sig(def_id)\n                 .output()\n                 .skip_binder()\n-                .walk(self.cx.tcx)\n+                .walk()\n                 .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n         }\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "22b458969551272c8083bf6cf97559055947c65c", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                         .filter(|assoc_item| {\n                                             matches!(assoc_item.kind, AssocKind::Fn)\n                                         })\n-                                        .map(|assoc_item| assoc_item.ident.name)\n+                                        .map(|assoc_item| assoc_item.name)\n                                         .collect()\n                                 }else{\n                                     BTreeSet::new()"}, {"sha": "123d0ad0457d1f1d5c2dff1f13c3f5eee0f6eb28", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             _ => return,\n         }\n \n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n         let ret_ty = return_ty(cx, impl_item.hir_id());\n@@ -63,10 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         // Ensure method is constructor-like\n         if let Some(self_adt) = self_ty.ty_adt_def() {\n-            if !contains_adt_constructor(cx.tcx, ret_ty, self_adt) {\n+            if !contains_adt_constructor(ret_ty, self_adt) {\n                 return;\n             }\n-        } else if !contains_ty(cx.tcx, ret_ty, self_ty) {\n+        } else if !contains_ty(ret_ty, self_ty) {\n             return;\n         }\n "}, {"sha": "aa306a630c467fea479790e580ba57389298da36", "filename": "clippy_lints/src/single_char_lifetime_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{GenericParam, GenericParamKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -43,7 +43,7 @@ declare_lint_pass!(SingleCharLifetimeNames => [SINGLE_CHAR_LIFETIME_NAMES]);\n \n impl EarlyLintPass for SingleCharLifetimeNames {\n     fn check_generic_param(&mut self, ctx: &EarlyContext<'_>, param: &GenericParam) {\n-        if in_external_macro(ctx.sess, param.ident.span) {\n+        if in_external_macro(ctx.sess(), param.ident.span) {\n             return;\n         }\n "}, {"sha": "961cdb317e76cd0abd0c26a240567533869f72c5", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind, VisibilityKind};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{edition::Edition, symbol::kw, Span, Symbol};\n \n@@ -37,7 +37,7 @@ declare_lint_pass!(SingleComponentPathImports => [SINGLE_COMPONENT_PATH_IMPORTS]\n \n impl EarlyLintPass for SingleComponentPathImports {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &Crate) {\n-        if cx.sess.opts.edition < Edition::Edition2018 {\n+        if cx.sess().opts.edition < Edition::Edition2018 {\n             return;\n         }\n         check_mod(cx, &krate.items);"}, {"sha": "c7c57ab426d9d8f82072f4010345deac8d98787d", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -108,7 +108,7 @@ fn get_pointee_ty_and_count_expr<'tcx>(\n     };\n     if_chain! {\n         // Find calls to copy_{from,to}{,_nonoverlapping} and write_bytes methods\n-        if let ExprKind::MethodCall(method_path, _, [ptr_self, .., count], _) = expr.kind;\n+        if let ExprKind::MethodCall(method_path, [ptr_self, .., count], _) = expr.kind;\n         let method_ident = method_path.ident.as_str();\n         if METHODS.iter().any(|m| *m == &*method_ident);\n "}, {"sha": "b4ad5dcbe3e9a265feaace30158ae5a227a7e2d3", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -5,10 +5,9 @@ use clippy_utils::{get_enclosing_block, is_expr_path_def_path, path_to_local, pa\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_block, walk_expr, walk_stmt, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -198,7 +197,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     fn search_slow_extend_filling(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if self.initialization_found;\n-            if let ExprKind::MethodCall(path, _, [self_arg, extend_arg], _) = expr.kind;\n+            if let ExprKind::MethodCall(path, [self_arg, extend_arg], _) = expr.kind;\n             if path_to_local_id(self_arg, self.vec_alloc.local_id);\n             if path.ident.name == sym!(extend);\n             if self.is_repeat_take(extend_arg);\n@@ -213,7 +212,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     fn search_slow_resize_filling(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if self.initialization_found;\n-            if let ExprKind::MethodCall(path, _, [self_arg, len_arg, fill_arg], _) = expr.kind;\n+            if let ExprKind::MethodCall(path, [self_arg, len_arg, fill_arg], _) = expr.kind;\n             if path_to_local_id(self_arg, self.vec_alloc.local_id);\n             if path.ident.name == sym!(resize);\n \n@@ -233,7 +232,7 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     /// Returns `true` if give expression is `repeat(0).take(...)`\n     fn is_repeat_take(&self, expr: &Expr<'_>) -> bool {\n         if_chain! {\n-            if let ExprKind::MethodCall(take_path, _, take_args, _) = expr.kind;\n+            if let ExprKind::MethodCall(take_path, take_args, _) = expr.kind;\n             if take_path.ident.name == sym!(take);\n \n             // Check that take is applied to `repeat(0)`\n@@ -270,8 +269,6 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         if self.initialization_found {\n             match stmt.kind {\n@@ -308,8 +305,4 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "bcd28b429784a488520f6107255ab106f23b7ecf", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -87,7 +87,7 @@ struct LintDetection {\n \n fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintDetection> {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n+        if let ExprKind::MethodCall(method_name, args, _) = &expr.kind;\n         if let Some(slice) = &args.get(0);\n         if let Some(method) = SortingKind::from_stable_name(method_name.ident.name.as_str());\n         if let Some(slice_type) = is_slice_of_primitives(cx, slice);"}, {"sha": "3573f632a3671e6adde5cd641030f8beb9d85e6e", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -282,7 +282,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, args, _) = &e.kind;\n+            if let ExprKind::MethodCall(path, args, _) = &e.kind;\n             if path.ident.name == sym!(as_bytes);\n             if let ExprKind::Lit(lit) = &args[0].kind;\n             if let LitKind::Str(lit_content, _) = &lit.node;\n@@ -324,9 +324,9 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, [recv], _) = &e.kind;\n+            if let ExprKind::MethodCall(path, [recv], _) = &e.kind;\n             if path.ident.name == sym!(into_bytes);\n-            if let ExprKind::MethodCall(path, _, [recv], _) = &recv.kind;\n+            if let ExprKind::MethodCall(path, [recv], _) = &recv.kind;\n             if matches!(path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n             if let ExprKind::Lit(lit) = &recv.kind;\n             if let LitKind::Str(lit_content, _) = &lit.node;\n@@ -384,7 +384,7 @@ declare_lint_pass!(StrToString => [STR_TO_STRING]);\n impl<'tcx> LateLintPass<'tcx> for StrToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n+            if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n             if path.ident.name == sym!(to_string);\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, ty, ..) = ty.kind();\n@@ -434,7 +434,7 @@ declare_lint_pass!(StringToString => [STRING_TO_STRING]);\n impl<'tcx> LateLintPass<'tcx> for StringToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n+            if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n             if path.ident.name == sym!(to_string);\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if is_type_diagnostic_item(cx, ty, sym::String);"}, {"sha": "7bc9cf742e6549e7dbbcffa91b499da3766d61bb", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for StrlenOnCStrings {\n             if let ExprKind::Path(path) = &func.kind;\n             if let Some(did) = cx.qpath_res(path, func.hir_id).opt_def_id();\n             if match_libc_symbol(cx, did, \"strlen\");\n-            if let ExprKind::MethodCall(path, _, [self_arg], _) = recv.kind;\n+            if let ExprKind::MethodCall(path, [self_arg], _) = recv.kind;\n             if !recv.span.from_expansion();\n             if path.ident.name == sym::as_ptr;\n             then {"}, {"sha": "c3d984fb5ae10b3d57314fedc1f4940dacf75e8e", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -567,7 +567,6 @@ fn ident_difference_expr_with_base_location(\n         | (Repeat(_, _), Repeat(_, _))\n         | (Struct(_), Struct(_))\n         | (MacCall(_), MacCall(_))\n-        | (LlvmInlineAsm(_), LlvmInlineAsm(_))\n         | (InlineAsm(_), InlineAsm(_))\n         | (Ret(_), Ret(_))\n         | (Continue(_), Continue(_))"}, {"sha": "4294464dbf61a5fffbda1a1d728a9c3a71608f9d", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,9 +2,8 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::{binop_traits, trait_ref_of_method, BINOP_TRAITS, OP_ASSIGN_TRAITS};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -66,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n             let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n-            if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get(parent_fn);\n+            if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get_by_def_id(parent_fn);\n             if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n             let body = cx.tcx.hir().body(body_id);\n             let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n@@ -104,8 +103,6 @@ struct BinaryExprVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n@@ -116,8 +113,4 @@ impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n \n         walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "aa6c01b3a7cd935a3a9835ab79088a8c2cdaf6bc", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -39,12 +39,12 @@ declare_lint_pass!(ToDigitIsSome => [TO_DIGIT_IS_SOME]);\n impl<'tcx> LateLintPass<'tcx> for ToDigitIsSome {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n-            if let hir::ExprKind::MethodCall(is_some_path, _, is_some_args, _) = &expr.kind;\n+            if let hir::ExprKind::MethodCall(is_some_path, is_some_args, _) = &expr.kind;\n             if is_some_path.ident.name.as_str() == \"is_some\";\n             if let [to_digit_expr] = &**is_some_args;\n             then {\n                 let match_result = match &to_digit_expr.kind {\n-                    hir::ExprKind::MethodCall(to_digits_path, _, to_digit_args, _) => {\n+                    hir::ExprKind::MethodCall(to_digits_path, to_digit_args, _) => {\n                         if_chain! {\n                             if let [char_arg, radix_arg] = &**to_digit_args;\n                             if to_digits_path.ident.name.as_str() == \"to_digit\";"}, {"sha": "03060d78fc5af39d325068a721a991b9e96a7e83", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -93,7 +93,7 @@ impl LateLintPass<'_> for ToStringInDisplay {\n         if_chain! {\n             if self.in_display_impl;\n             if let Some(self_hir_id) = self.self_hir_id;\n-            if let ExprKind::MethodCall(path, _, [ref self_arg, ..], _) = expr.kind;\n+            if let ExprKind::MethodCall(path, [ref self_arg, ..], _) = expr.kind;\n             if path.ident.name == sym!(to_string);\n             if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n             if is_diag_trait_item(cx, expr_def_id, sym::ToString);"}, {"sha": "67cc8913318962f2f849ab1441a166dd7b9d9eaa", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -312,12 +312,12 @@ impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BO\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n-        let is_in_trait_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id))\n-        {\n-            matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n-        } else {\n-            false\n-        };\n+        let is_in_trait_impl =\n+            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id)) {\n+                matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n+            } else {\n+                false\n+            };\n \n         let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(id));\n \n@@ -353,7 +353,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         match item.kind {\n             ImplItemKind::Const(ty, _) => {\n                 let is_in_trait_impl = if let Some(hir::Node::Item(item)) =\n-                    cx.tcx.hir().find(cx.tcx.hir().get_parent_item(item.hir_id()))\n+                    cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()))\n                 {\n                     matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n                 } else {"}, {"sha": "5ca4023aa5c199b3d8d2296525b2f2eb5640057b", "filename": "clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,9 +1,8 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_inf, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_inf, walk_ty, Visitor};\n use rustc_hir::{GenericParamKind, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n use rustc_target::spec::abi::Abi;\n \n use super::TYPE_COMPLEXITY;\n@@ -37,8 +36,6 @@ struct TypeComplexityVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n-    type Map = Map<'tcx>;\n-\n     fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n         self.score += 1;\n         walk_inf(self, inf);\n@@ -78,7 +75,4 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n         walk_ty(self, ty);\n         self.nest -= sub_nest;\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }"}, {"sha": "e42c6c63ede0ba2e419de335318e2bcf841d4a89", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -2,11 +2,10 @@ use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::is_lint_allowed;\n use clippy_utils::source::{indent_of, reindent_multiline, snippet};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{Block, BlockCheckMode, Expr, ExprKind, HirId, Local, UnsafeSource};\n use rustc_lexer::TokenKind;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -114,12 +113,6 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n }\n \n impl<'v> Visitor<'v> for UndocumentedUnsafeBlocks {\n-    type Map = Map<'v>;\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-\n     fn visit_expr(&mut self, ex: &'v Expr<'v>) {\n         match ex.kind {\n             ExprKind::Block(_, _) => self.local_level = self.local_level.saturating_add(1),"}, {"sha": "6d909c34690d4f54148210eb0c1aea0b59551837", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -177,7 +177,7 @@ fn extract_init_or_reserve_target<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt\n                     });\n                 }\n             },\n-            ExprKind::MethodCall(path, _, [self_expr, _], _) if is_reserve(cx, path, self_expr) => {\n+            ExprKind::MethodCall(path, [self_expr, _], _) if is_reserve(cx, path, self_expr) => {\n                 return Some(TargetVec {\n                     location: VecLocation::Expr(self_expr),\n                     init_kind: None,\n@@ -211,7 +211,7 @@ fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Opt\n         }\n     });\n     match expr.kind {\n-        ExprKind::MethodCall(path, _, [self_expr, _], _) => {\n+        ExprKind::MethodCall(path, [self_expr, _], _) => {\n             let self_type = cx.typeck_results().expr_ty(self_expr).peel_refs();\n             if is_type_diagnostic_item(cx, self_type, sym::Vec) && path.ident.name.as_str() == \"set_len\" {\n                 Some((self_expr, expr.span))"}, {"sha": "88ca0cb20a12c59dc66bf903e31dd9962932f8c5", "filename": "clippy_lints/src/unit_hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_hash.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -49,7 +49,7 @@ declare_lint_pass!(UnitHash => [UNIT_HASH]);\n impl<'tcx> LateLintPass<'tcx> for UnitHash {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;\n+            if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n             if name_ident.ident.name == sym::hash;\n             if let [recv, state_param] = args;\n             if cx.typeck_results().expr_ty(recv).is_unit();"}, {"sha": "eee1229e1ef0356745ec361f76929e1570c322bf", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -98,9 +98,11 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n                         if trait_pred.self_ty() == inp;\n                         if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n                         then {\n-                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.ty) {\n+                            if ord_preds.iter().any(|ord| Some(ord.self_ty()) == return_ty_pred.term.ty()) {\n                                 args_to_check.push((i, \"Ord\".to_string()));\n-                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.ty) {\n+                            } else if partial_ord_preds.iter().any(|pord| {\n+                                pord.self_ty() == return_ty_pred.term.ty().unwrap()\n+                            }) {\n                                 args_to_check.push((i, \"PartialOrd\".to_string()));\n                             }\n                         }\n@@ -141,7 +143,7 @@ fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Spa\n \n impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::MethodCall(_, _, args, _) = expr.kind {\n+        if let ExprKind::MethodCall(_, args, _) = expr.kind {\n             let arg_indices = get_args_to_check(cx, expr);\n             for (i, trait_name) in arg_indices {\n                 if i < args.len() {"}, {"sha": "97d92f10e1cb2b039e13b6b646be14c4370e1343", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     }\n \n     match expr.kind {\n-        ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => {\n+        ExprKind::Call(_, args) | ExprKind::MethodCall(_, args, _) => {\n             let args_to_recover = args\n                 .iter()\n                 .filter(|arg| {"}, {"sha": "e6c260ed96a98837d231692a893898d69f66cd71", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -93,10 +93,7 @@ fn mirrored_exprs(\n         // The two exprs are method calls.\n         // Check to see that the function is the same and the arguments are mirrored\n         // This is enough because the receiver of the method is listed in the arguments\n-        (\n-            ExprKind::MethodCall(left_segment, _, left_args, _),\n-            ExprKind::MethodCall(right_segment, _, right_args, _),\n-        ) => {\n+        (ExprKind::MethodCall(left_segment, left_args, _), ExprKind::MethodCall(right_segment, right_args, _)) => {\n             left_segment.ident == right_segment.ident\n                 && iter::zip(*left_args, *right_args)\n                     .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n@@ -165,7 +162,7 @@ fn mirrored_exprs(\n \n fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n     if_chain! {\n-        if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;\n+        if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n         if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n@@ -175,7 +172,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n             Param { pat: Pat { kind: PatKind::Binding(_, _, left_ident, _), .. }, ..},\n             Param { pat: Pat { kind: PatKind::Binding(_, _, right_ident, _), .. }, .. }\n         ] = &closure_body.params;\n-        if let ExprKind::MethodCall(method_path, _, [ref left_expr, ref right_expr], _) = &closure_body.value.kind;\n+        if let ExprKind::MethodCall(method_path, [ref left_expr, ref right_expr], _) = &closure_body.value.kind;\n         if method_path.ident.name == sym::cmp;\n         then {\n             let (closure_body, closure_arg, reverse) = if mirrored_exprs(\n@@ -224,10 +221,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n \n fn expr_borrows(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n-    matches!(ty.kind(), ty::Ref(..))\n-        || ty\n-            .walk(cx.tcx)\n-            .any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)))\n+    matches!(ty.kind(), ty::Ref(..)) || ty.walk().any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)))\n }\n \n impl LateLintPass<'_> for UnnecessarySortBy {"}, {"sha": "2b89398ecd6ad1ea3ed6be1359814d43aa0be47c", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, FnHeader, HirId, IsAsync, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n@@ -43,7 +43,7 @@ struct AsyncFnVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         if let ExprKind::Yield(_, YieldSource::Await { .. }) = ex.kind {\n@@ -52,8 +52,8 @@ impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n         walk_expr(self, ex);\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "323cf83ffcffae0410f5ba0ec668055a70679ebe", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                     check_map_error(cx, res, expr);\n                 }\n             },\n-            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match path.ident.as_str() {\n+            hir::ExprKind::MethodCall(path, [ref arg_0, ..], _) => match path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n                     check_map_error(cx, arg_0, expr);\n                 },\n@@ -94,7 +94,7 @@ fn try_remove_await<'a>(expr: &'a hir::Expr<'a>) -> Option<&hir::Expr<'a>> {\n \n fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     let mut call = call;\n-    while let hir::ExprKind::MethodCall(path, _, args, _) = call.kind {\n+    while let hir::ExprKind::MethodCall(path, args, _) = call.kind {\n         if matches!(path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n             call = &args[0];\n         } else {\n@@ -110,7 +110,7 @@ fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<\n }\n \n fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>, is_await: bool) {\n-    if let hir::ExprKind::MethodCall(path, _, _, _) = call.kind {\n+    if let hir::ExprKind::MethodCall(path, _, _) = call.kind {\n         let symbol = path.ident.as_str();\n         let read_trait = if is_await {\n             match_trait_method(cx, call, &paths::FUTURES_IO_ASYNCREADEXT)"}, {"sha": "fd9d5b52e501f318199e5fa94ad9cf55dd79cad6", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {"}, {"sha": "e984048701341099acc25ba8b70b5981f2bb14ae", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -4,10 +4,10 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{differing_macro_contexts, path_to_local, usage::is_potentially_mutated};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, PathSegment, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -154,7 +154,7 @@ fn collect_unwrap_info<'tcx>(\n         return collect_unwrap_info(cx, if_expr, expr, branch, !invert, false);\n     } else {\n         if_chain! {\n-            if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n+            if let ExprKind::MethodCall(method_name, args, _) = &expr.kind;\n             if let Some(local_id) = path_to_local(&args[0]);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let name = method_name.ident.as_str();\n@@ -215,7 +215,7 @@ impl<'a, 'tcx> UnwrappableVariablesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // Shouldn't lint when `expr` is in macro.\n@@ -231,7 +231,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n         } else {\n             // find `unwrap[_err]()` calls:\n             if_chain! {\n-                if let ExprKind::MethodCall(method_name, _, [self_arg, ..], _) = expr.kind;\n+                if let ExprKind::MethodCall(method_name, [self_arg, ..], _) = expr.kind;\n                 if let Some(id) = path_to_local(self_arg);\n                 if [sym::unwrap, sym::expect, sym!(unwrap_err)].contains(&method_name.ident.name);\n                 let call_to_unwrap = [sym::unwrap, sym::expect].contains(&method_name.ident.name);\n@@ -297,8 +297,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "2c13f1049b59955a2e81ebb7b42dc1f5317c1fe3", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -3,10 +3,9 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{method_chain_args, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, ImplItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n@@ -81,8 +80,6 @@ struct FindExpectUnwrap<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // check for `expect`\n         if let Some(arglists) = method_chain_args(expr, &[\"expect\"]) {\n@@ -107,10 +104,6 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n         // and check sub-expressions\n         intravisit::walk_expr(self, expr);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tcx hir::ImplItem<'_>) {"}, {"sha": "be20282b3b88c53547571a7ec2f2a28443e3ab14", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -8,11 +8,10 @@ use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n-    intravisit::{walk_inf, walk_ty, NestedVisitorMap, Visitor},\n+    intravisit::{walk_inf, walk_ty, Visitor},\n     Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n };\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -170,7 +169,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 //\n                 // See also https://github.com/rust-lang/rust-clippy/issues/2894.\n                 for (impl_hir_ty, trait_sem_ty) in impl_inputs_outputs.zip(trait_method_sig.inputs_and_output) {\n-                    if trait_sem_ty.walk(cx.tcx).any(|inner| inner == self_ty.into()) {\n+                    if trait_sem_ty.walk().any(|inner| inner == self_ty.into()) {\n                         let mut visitor = SkipTyCollector::default();\n                         visitor.visit_ty(impl_hir_ty);\n                         types_to_skip.extend(visitor.types_to_skip);\n@@ -262,8 +261,6 @@ struct SkipTyCollector {\n }\n \n impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n-    type Map = Map<'tcx>;\n-\n     fn visit_infer(&mut self, inf: &hir::InferArg) {\n         self.types_to_skip.push(inf.hir_id);\n \n@@ -274,10 +271,6 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n \n         walk_ty(self, hir_ty);\n     }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n fn span_lint(cx: &LateContext<'_>, span: Span) {"}, {"sha": "d23c85c033b2f7e63ce1809f30443d055e6eb605", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -402,9 +402,9 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 self.expr(func);\n                 self.slice(args, |e| self.expr(e));\n             },\n-            ExprKind::MethodCall(method_name, _, args, _) => {\n+            ExprKind::MethodCall(method_name, args, _) => {\n                 bind!(self, method_name, args);\n-                kind!(\"MethodCall({method_name}, _, {args}, _)\");\n+                kind!(\"MethodCall({method_name}, {args}, _)\");\n                 self.ident(field!(method_name.ident));\n                 self.slice(args, |e| self.expr(e));\n             },\n@@ -547,10 +547,6 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"InlineAsm(_)\");\n                 out!(\"// unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n             },\n-            ExprKind::LlvmInlineAsm(_) => {\n-                kind!(\"LlvmInlineAsm(_)\");\n-                out!(\"// unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");\n-            },\n             ExprKind::Struct(qpath, fields, base) => {\n                 bind!(self, qpath, fields);\n                 opt_bind!(self, base);"}, {"sha": "b58325ac73ee964770ce951ffb6a25400932c234", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -149,7 +149,7 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n             }\n             print_expr(cx, init, indent + 1);\n         },\n-        hir::ExprKind::MethodCall(path, _, args, _) => {\n+        hir::ExprKind::MethodCall(path, args, _) => {\n             println!(\"{}MethodCall\", ind);\n             println!(\"{}method name: {}\", ind, path.ident.name);\n             for arg in args {\n@@ -304,19 +304,6 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 }\n             }\n         },\n-        hir::ExprKind::LlvmInlineAsm(asm) => {\n-            let inputs = &asm.inputs_exprs;\n-            let outputs = &asm.outputs_exprs;\n-            println!(\"{}LlvmInlineAsm\", ind);\n-            println!(\"{}inputs:\", ind);\n-            for e in inputs.iter() {\n-                print_expr(cx, e, indent + 1);\n-            }\n-            println!(\"{}outputs:\", ind);\n-            for e in outputs.iter() {\n-                print_expr(cx, e, indent + 1);\n-            }\n-        },\n         hir::ExprKind::Struct(path, fields, ref base) => {\n             println!(\"{}Struct\", ind);\n             println!(\"{}path: {:?}\", ind, path);"}, {"sha": "f170ff69154b6532934489e96d089d670beb32dd", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -17,13 +17,13 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::CRATE_HIR_ID;\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::{\n     BinOpKind, Block, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty, TyKind,\n     UnOp,\n };\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n@@ -544,16 +544,16 @@ struct LintCollector<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::All;\n \n     fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n \n@@ -584,7 +584,7 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n+            if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n             let fn_name = path.ident;\n             if let Some(sugg) = self.map.get(&*fn_name.as_str());\n             let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n@@ -666,7 +666,7 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n             if let ExprKind::Closure(_, _, body_id, _, _) = &and_then_args[4].kind;\n             let body = cx.tcx.hir().body(*body_id);\n             let only_expr = peel_blocks_with_stmt(&body.value);\n-            if let ExprKind::MethodCall(ps, _, span_call_args, _) = &only_expr.kind;\n+            if let ExprKind::MethodCall(ps, span_call_args, _) = &only_expr.kind;\n             then {\n                 let and_then_snippets = get_and_then_snippets(cx, and_then_args);\n                 let mut sle = SpanlessEq::new(cx).deny_side_effects();\n@@ -1098,7 +1098,7 @@ impl InterningDefinedSymbol {\n         };\n         if_chain! {\n             // is a method call\n-            if let ExprKind::MethodCall(_, _, [item], _) = call.kind;\n+            if let ExprKind::MethodCall(_, [item], _) = call.kind;\n             if let Some(did) = cx.typeck_results().type_dependent_def_id(call.hir_id);\n             let ty = cx.typeck_results().expr_ty(item);\n             // ...on either an Ident or a Symbol"}, {"sha": "3547f0b4e0ae05266096e2a214e80fea4e3b85c4", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -19,8 +19,9 @@ use rustc_hir::{\n     self as hir, def::DefKind, intravisit, intravisit::Visitor, ExprKind, Item, ItemKind, Mutability, QPath,\n };\n use rustc_lint::{CheckLintNameResult, LateContext, LateLintPass, LintContext, LintId};\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::symbol::Ident;\n use rustc_span::{sym, Loc, Span, Symbol};\n use serde::{ser::SerializeStruct, Serialize, Serializer};\n use std::collections::BinaryHeap;\n@@ -579,9 +580,11 @@ fn get_lint_group_and_level_or_lint(\n     lint_name: &str,\n     item: &Item<'_>,\n ) -> Option<(String, &'static str)> {\n-    let result = cx\n-        .lint_store\n-        .check_lint_name(cx.sess(), lint_name, Some(sym::clippy), &[]);\n+    let result = cx.lint_store.check_lint_name(\n+        lint_name,\n+        Some(sym::clippy),\n+        &[Ident::with_dummy_span(sym::clippy)].into_iter().collect(),\n+    );\n     if let CheckLintNameResult::Tool(Ok(lint_lst)) = result {\n         if let Some(group) = get_lint_group(cx, lint_lst[0]) {\n             if EXCLUDED_LINT_GROUPS.contains(&group.as_str()) {\n@@ -738,10 +741,10 @@ impl<'a, 'hir> LintResolver<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for LintResolver<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n@@ -792,10 +795,10 @@ impl<'a, 'hir> ApplicabilityResolver<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_path(&mut self, path: &'hir hir::Path<'hir>, _id: hir::HirId) {\n@@ -875,10 +878,10 @@ impl<'a, 'hir> IsMultiSpanScanner<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for IsMultiSpanScanner<'a, 'hir> {\n-    type Map = Map<'hir>;\n+    type NestedFilter = nested_filter::All;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::All(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n \n     fn visit_expr(&mut self, expr: &'hir hir::Expr<'hir>) {\n@@ -897,7 +900,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for IsMultiSpanScanner<'a, 'hir> {\n                     self.add_single_span_suggestion();\n                 }\n             },\n-            ExprKind::MethodCall(path, _path_span, arg, _arg_span) => {\n+            ExprKind::MethodCall(path, arg, _arg_span) => {\n                 let (self_ty, _) = walk_ptrs_ty_depth(self.cx.typeck_results().expr_ty(&arg[0]));\n                 if match_type(self.cx, self_ty, &paths::DIAGNOSTIC_BUILDER) {\n                     let called_method = path.ident.name.as_str().to_string();"}, {"sha": "fbf2b3e081b823220e0c1fbc792de34b1daaeba1", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n         if let Some(searcher) = self.searcher.take() {\n             if_chain! {\n                 if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind;\n-                if let ExprKind::MethodCall(path, _, [self_arg, _], _) = expr.kind;\n+                if let ExprKind::MethodCall(path, [self_arg, _], _) = expr.kind;\n                 if path_to_local_id(self_arg, searcher.local_id);\n                 if path.ident.name.as_str() == \"push\";\n                 then {"}, {"sha": "4d86abd0fa123660a564d309bbc08c4d7a37c706", "filename": "clippy_lints/src/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_resize_to_zero.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -31,7 +31,7 @@ declare_lint_pass!(VecResizeToZero => [VEC_RESIZE_TO_ZERO]);\n impl<'tcx> LateLintPass<'tcx> for VecResizeToZero {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let hir::ExprKind::MethodCall(path_segment, _, args, _) = expr.kind;\n+            if let hir::ExprKind::MethodCall(path_segment, args, _) = expr.kind;\n             if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n             if match_def_path(cx, method_def_id, &paths::VEC_RESIZE) && args.len() == 3;\n             if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = args[1].kind;"}, {"sha": "8e2ddd225fdb3bd239c2e73288e6a5a794be0bca", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for VerboseFileReads {\n \n fn is_file_read_to_end<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, _, exprs, _) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, exprs, _) = expr.kind;\n         if method_name.ident.as_str() == \"read_to_end\";\n         if let ExprKind::Path(QPath::Resolved(None, _)) = &exprs[0].kind;\n         let ty = cx.typeck_results().expr_ty(&exprs[0]);\n@@ -75,7 +75,7 @@ fn is_file_read_to_end<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) ->\n \n fn is_file_read_to_string<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, _, exprs, _) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, exprs, _) = expr.kind;\n         if method_name.ident.as_str() == \"read_to_string\";\n         if let ExprKind::Path(QPath::Resolved(None, _)) = &exprs[0].kind;\n         let ty = cx.typeck_results().expr_ty(&exprs[0]);"}, {"sha": "b0044695ea8a88388da9a655e3336873c4252a8f", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::token::{self, LitKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n use rustc_lexer::unescape::{self, EscapeError};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_parse::parser;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{kw, Symbol};\n@@ -290,7 +290,7 @@ impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &MacCall) {\n         fn is_build_script(cx: &EarlyContext<'_>) -> bool {\n             // Cargo sets the crate name for build scripts to `build_script_build`\n-            cx.sess\n+            cx.sess()\n                 .opts\n                 .crate_name\n                 .as_ref()\n@@ -529,7 +529,7 @@ impl Write {\n     /// ```\n     #[allow(clippy::too_many_lines)]\n     fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n-        let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, false, None);\n+        let mut parser = parser::Parser::new(&cx.sess().parse_sess, tts, false, None);\n         let expr = if is_write {\n             match parser\n                 .parse_expr()"}, {"sha": "70b0560e676044eef19feef0cff8f9733f5394d8", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -69,7 +69,11 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n \n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(parent_id)) {\n+    let second_parent_id = cx\n+        .tcx\n+        .hir()\n+        .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(parent_id));\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(second_parent_id) {\n         if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;\n         }"}, {"sha": "3f4043ad052a034279ec979ea0e67590dde0a19d", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -645,11 +645,19 @@ pub fn eq_generic_bound(l: &GenericBound, r: &GenericBound) -> bool {\n     }\n }\n \n-pub fn eq_assoc_constraint(l: &AssocTyConstraint, r: &AssocTyConstraint) -> bool {\n-    use AssocTyConstraintKind::*;\n+fn eq_term(l: &Term, r: &Term) -> bool {\n+    match (l, r) {\n+        (Term::Ty(l), Term::Ty(r)) => eq_ty(l, r),\n+        (Term::Const(l), Term::Const(r)) => eq_anon_const(l, r),\n+        _ => false,\n+    }\n+}\n+\n+pub fn eq_assoc_constraint(l: &AssocConstraint, r: &AssocConstraint) -> bool {\n+    use AssocConstraintKind::*;\n     eq_id(l.ident, r.ident)\n         && match (&l.kind, &r.kind) {\n-            (Equality { ty: l }, Equality { ty: r }) => eq_ty(l, r),\n+            (Equality { term: l }, Equality { term: r }) => eq_term(l, r),\n             (Bound { bounds: l }, Bound { bounds: r }) => over(l, r, eq_generic_bound),\n             _ => false,\n         }"}, {"sha": "eb9efec3f1612a8f7af66888ba3b3534e726f400", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -12,7 +12,7 @@\n use crate::ty::{all_predicates_of, is_copy};\n use crate::visitors::is_const_evaluatable;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{def_id::DefId, Block, Expr, ExprKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, PredicateKind};\n@@ -104,11 +104,6 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n     }\n \n     impl<'cx, 'tcx> Visitor<'tcx> for V<'cx, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             use EagernessSuggestion::{ForceNoChange, Lazy, NoChange};\n             if self.eagerness == ForceNoChange {\n@@ -146,7 +141,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                     self.eagerness |= NoChange;\n                     return;\n                 },\n-                ExprKind::MethodCall(name, _, args, _) => {\n+                ExprKind::MethodCall(name, args, _) => {\n                     self.eagerness |= self\n                         .cx\n                         .typeck_results()\n@@ -180,7 +175,6 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Continue(_)\n                 | ExprKind::Ret(_)\n                 | ExprKind::InlineAsm(_)\n-                | ExprKind::LlvmInlineAsm(_)\n                 | ExprKind::Yield(..)\n                 | ExprKind::Err => {\n                     self.eagerness = ForceNoChange;"}, {"sha": "ed573ad9056195c650c77e9fadfdab68856a4bbb", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -258,7 +258,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                             && self.eq_expr(l.body, r.body)\n                     })\n             },\n-            (&ExprKind::MethodCall(l_path, _, l_args, _), &ExprKind::MethodCall(r_path, _, r_args, _)) => {\n+            (&ExprKind::MethodCall(l_path, l_args, _), &ExprKind::MethodCall(r_path, r_args, _)) => {\n                 self.inner.allow_side_effects && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n             },\n             (&ExprKind::Repeat(le, ll), &ExprKind::Repeat(re, rl)) => {\n@@ -683,7 +683,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n                 self.hash_pat(pat);\n             },\n-            ExprKind::LlvmInlineAsm(..) | ExprKind::Err => {},\n+            ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);\n             },\n@@ -713,7 +713,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n                 s.hash(&mut self.s);\n             },\n-            ExprKind::MethodCall(path, ref _tys, args, ref _fn_span) => {\n+            ExprKind::MethodCall(path, args, ref _fn_span) => {\n                 self.hash_name(path.ident.name);\n                 self.hash_exprs(args);\n             },"}, {"sha": "a2f1f4696513e067febb58cc2b688faef4c04c73", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 25, "deletions": 48, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -70,9 +70,9 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n-use rustc_hir::intravisit::{walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n@@ -82,15 +82,13 @@ use rustc_hir::{\n     Target, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n-use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym;\n@@ -119,25 +117,15 @@ pub fn meets_msrv(msrv: Option<&RustcVersion>, lint_msrv: &RustcVersion) -> bool\n \n #[macro_export]\n macro_rules! extract_msrv_attr {\n-    (LateContext) => {\n-        extract_msrv_attr!(@LateContext, ());\n-    };\n-    (EarlyContext) => {\n-        extract_msrv_attr!(@EarlyContext);\n-    };\n-    (@$context:ident$(, $call:tt)?) => {\n+    ($context:ident) => {\n         fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'_>, attrs: &[rustc_ast::ast::Attribute]) {\n-            use $crate::get_unique_inner_attr;\n-            match get_unique_inner_attr(cx.sess$($call)?, attrs, \"msrv\") {\n+            let sess = rustc_lint::LintContext::sess(cx);\n+            match $crate::get_unique_inner_attr(sess, attrs, \"msrv\") {\n                 Some(msrv_attr) => {\n                     if let Some(msrv) = msrv_attr.value_str() {\n-                        self.msrv = $crate::parse_msrv(\n-                            &msrv.to_string(),\n-                            Some(cx.sess$($call)?),\n-                            Some(msrv_attr.span),\n-                        );\n+                        self.msrv = $crate::parse_msrv(&msrv.to_string(), Some(sess), Some(msrv_attr.span));\n                     } else {\n-                        cx.sess$($call)?.span_err(msrv_attr.span, \"bad clippy attribute\");\n+                        sess.span_err(msrv_attr.span, \"bad clippy attribute\");\n                     }\n                 },\n                 _ => (),\n@@ -216,7 +204,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n /// ```\n pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(id);\n-    match cx.tcx.hir().get(parent_id) {\n+    match cx.tcx.hir().get_by_def_id(parent_id) {\n         Node::Item(&Item {\n             kind: ItemKind::Const(..) | ItemKind::Static(..),\n             ..\n@@ -607,12 +595,13 @@ pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n ///     }\n /// }\n /// ```\n-pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx TraitRef<'tcx>> {\n+pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, def_id: LocalDefId) -> Option<&'tcx TraitRef<'tcx>> {\n     // Get the implemented trait for the current function\n+    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n     let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n     if_chain! {\n-        if parent_impl != hir::CRATE_HIR_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get(parent_impl);\n+        if parent_impl != CRATE_DEF_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl);\n         if let hir::ItemKind::Impl(impl_) = &item.kind;\n         then { return impl_.of_trait.as_ref(); }\n     }\n@@ -810,8 +799,7 @@ pub fn can_move_expr_to_closure_no_visit<'tcx>(\n         | ExprKind::Continue(_)\n         | ExprKind::Ret(_)\n         | ExprKind::Yield(..)\n-        | ExprKind::InlineAsm(_)\n-        | ExprKind::LlvmInlineAsm(_) => false,\n+        | ExprKind::InlineAsm(_) => false,\n         // Accessing a field of a local value can only be done if the type isn't\n         // partially moved.\n         ExprKind::Field(\n@@ -982,11 +970,6 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n         captures: HirIdMap<CaptureKind>,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n-        type Map = ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if !self.allow_closure {\n                 return;\n@@ -1009,8 +992,8 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n                         };\n                         if !self.locals.contains(&local_id) {\n                             let capture = match capture.info.capture_kind {\n-                                UpvarCapture::ByValue(_) => CaptureKind::Value,\n-                                UpvarCapture::ByRef(borrow) => match borrow.kind {\n+                                UpvarCapture::ByValue => CaptureKind::Value,\n+                                UpvarCapture::ByRef(kind) => match kind {\n                                     BorrowKind::ImmBorrow => CaptureKind::Ref(Mutability::Not),\n                                     BorrowKind::UniqueImmBorrow | BorrowKind::MutBorrow => {\n                                         CaptureKind::Ref(Mutability::Mut)\n@@ -1066,13 +1049,13 @@ pub fn method_calls<'tcx>(\n \n     let mut current = expr;\n     for _ in 0..max_depth {\n-        if let ExprKind::MethodCall(path, span, args, _) = &current.kind {\n+        if let ExprKind::MethodCall(path, args, _) = &current.kind {\n             if args.iter().any(|e| e.span.from_expansion()) {\n                 break;\n             }\n             method_names.push(path.ident.name);\n             arg_lists.push(&**args);\n-            spans.push(*span);\n+            spans.push(path.ident.span);\n             current = &args[0];\n         } else {\n             break;\n@@ -1093,7 +1076,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n     let mut matched = Vec::with_capacity(methods.len());\n     for method_name in methods.iter().rev() {\n         // method chains are stored last -> first\n-        if let ExprKind::MethodCall(path, _, args, _) = current.kind {\n+        if let ExprKind::MethodCall(path, args, _) = current.kind {\n             if path.ident.name.as_str() == *method_name {\n                 if args.iter().any(|e| e.span.from_expansion()) {\n                     return None;\n@@ -1122,14 +1105,13 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n /// Returns `true` if the expression is in the program's `#[panic_handler]`.\n pub fn is_in_panic_handler(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n-    let def_id = cx.tcx.hir().local_def_id(parent).to_def_id();\n-    Some(def_id) == cx.tcx.lang_items().panic_impl()\n+    Some(parent.to_def_id()) == cx.tcx.lang_items().panic_impl()\n }\n \n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-    match cx.tcx.hir().find(parent_id) {\n+    match cx.tcx.hir().find_by_def_id(parent_id) {\n         Some(\n             Node::Item(Item { ident, .. })\n             | Node::TraitItem(TraitItem { ident, .. })\n@@ -1145,16 +1127,11 @@ pub struct ContainsName {\n }\n \n impl<'tcx> Visitor<'tcx> for ContainsName {\n-    type Map = Map<'tcx>;\n-\n     fn visit_name(&mut self, _: Span, name: Symbol) {\n         if self.name == name {\n             self.result = true;\n         }\n     }\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n }\n \n /// Checks if an `Expr` contains a certain name.\n@@ -1639,7 +1616,7 @@ pub fn any_parent_has_attr(tcx: TyCtxt<'_>, node: HirId, symbol: Symbol) -> bool\n             return true;\n         }\n         prev_enclosing_node = Some(enclosing_node);\n-        enclosing_node = map.get_parent_item(enclosing_node);\n+        enclosing_node = map.local_def_id_to_hir_id(map.get_parent_item(enclosing_node));\n     }\n \n     false\n@@ -1793,7 +1770,7 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n                 None\n             }\n         },\n-        ExprKind::MethodCall(_, _, _, _) => cx.typeck_results().type_dependent_def_id(expr.hir_id),\n+        ExprKind::MethodCall(..) => cx.typeck_results().type_dependent_def_id(expr.hir_id),\n         _ => None,\n     };\n \n@@ -1960,7 +1937,7 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n         .predicates_of(did)\n         .predicates\n         .iter()\n-        .filter_map(|(p, _)| if p.is_global(cx.tcx) { Some(*p) } else { None });\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None });\n     traits::impossible_predicates(\n         cx.tcx,\n         traits::elaborate_predicates(cx.tcx, predicates)\n@@ -2006,15 +1983,15 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n     if is_primitive {\n         // if we have wrappers like Array, Slice or Tuple, print these\n         // and get the type enclosed in the slice ref\n-        match expr_type.peel_refs().walk(cx.tcx).nth(1).unwrap().expect_ty().kind() {\n+        match expr_type.peel_refs().walk().nth(1).unwrap().expect_ty().kind() {\n             rustc_ty::Slice(..) => return Some(\"slice\".into()),\n             rustc_ty::Array(..) => return Some(\"array\".into()),\n             rustc_ty::Tuple(..) => return Some(\"tuple\".into()),\n             _ => {\n                 // is_recursively_primitive_type() should have taken care\n                 // of the rest and we can rely on the type that is found\n                 let refs_peeled = expr_type.peel_refs();\n-                return Some(refs_peeled.walk(cx.tcx).last().unwrap().to_string());\n+                return Some(refs_peeled.walk().last().unwrap().to_string());\n             },\n         }\n     }"}, {"sha": "b7a242cf90a43369e752aa36451fd8e65b52f597", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -191,13 +191,13 @@ impl<'a> PanicExpn<'a> {\n         if !macro_backtrace(expr.span).any(|macro_call| is_panic(cx, macro_call.def_id)) {\n             return None;\n         }\n-        let ExprKind::Call(callee, [arg]) = expr.kind else { return None };\n-        let ExprKind::Path(QPath::Resolved(_, path)) = callee.kind else { return None };\n+        let ExprKind::Call(callee, [arg]) = &expr.kind else { return None };\n+        let ExprKind::Path(QPath::Resolved(_, path)) = &callee.kind else { return None };\n         let result = match path.segments.last().unwrap().ident.as_str() {\n             \"panic\" if arg.span.ctxt() == expr.span.ctxt() => Self::Empty,\n             \"panic\" | \"panic_str\" => Self::Str(arg),\n             \"panic_display\" => {\n-                let ExprKind::AddrOf(_, _, e) = arg.kind else { return None };\n+                let ExprKind::AddrOf(_, _, e) = &arg.kind else { return None };\n                 Self::Display(e)\n             },\n             \"panic_fmt\" => Self::Format(FormatArgsExpn::parse(cx, arg)?),"}, {"sha": "649b7b9940af3b067ab74f34a67a2cdb35cb762e", "filename": "clippy_utils/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fptr.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -36,7 +36,7 @@ fn extract_clone_suggestions<'tcx>(\n         if abort {\n             return false;\n         }\n-        if let ExprKind::MethodCall(seg, _, [recv], _) = expr.kind {\n+        if let ExprKind::MethodCall(seg, [recv], _) = expr.kind {\n             if path_to_local_id(recv, id) {\n                 if seg.ident.name.as_str() == \"capacity\" {\n                     abort = true;"}, {"sha": "7512039a480bb95e191d17eed4b34d3708643d42", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -86,7 +86,7 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n }\n \n fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n-    for arg in ty.walk(tcx) {\n+    for arg in ty.walk() {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n \n@@ -233,8 +233,6 @@ fn check_statement<'tcx>(\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n-        StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n-\n         StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n             check_operand(tcx, dst, span, body)?;\n             check_operand(tcx, src, span, body)?;"}, {"sha": "fa63ddff253cfd7afa686a48c2e4af3d82512079", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -147,7 +147,6 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n@@ -205,7 +204,6 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n             | ast::ExprKind::InlineAsm(..)\n-            | ast::ExprKind::LlvmInlineAsm(..)\n             | ast::ExprKind::ConstBlock(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::Loop(..)\n@@ -865,7 +863,7 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n     /// indicates whether the function from `parent_expr` takes its args by double reference\n     fn func_takes_arg_by_double_ref(&self, parent_expr: &'tcx hir::Expr<'_>, cmt_hir_id: HirId) -> bool {\n         let (call_args, inputs) = match parent_expr.kind {\n-            ExprKind::MethodCall(_, _, call_args, _) => {\n+            ExprKind::MethodCall(_, call_args, _) => {\n                 if let Some(method_did) = self.cx.typeck_results().type_dependent_def_id(parent_expr.hir_id) {\n                     (call_args, self.cx.tcx.fn_sig(method_did).skip_binder().inputs())\n                 } else {\n@@ -917,15 +915,15 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     match &parent_expr.kind {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n-                        ExprKind::MethodCall(_, _, [self_expr, ..], _) if self_expr.hir_id == cmt.hir_id => {\n+                        ExprKind::MethodCall(_, [self_expr, ..], _) if self_expr.hir_id == cmt.hir_id => {\n                             self.suggestion_start\n                                 .push_str(&format!(\"{}{}\", start_snip, ident_str_with_proj));\n                             self.next_pos = span.hi();\n                             return;\n                         },\n                         // item is used in a call\n                         // i.e.: `Call`: `|x| please(x)` or `MethodCall`: `|x| [1, 2, 3].contains(x)`\n-                        ExprKind::Call(_, [call_args @ ..]) | ExprKind::MethodCall(_, _, [_, call_args @ ..], _) => {\n+                        ExprKind::Call(_, [call_args @ ..]) | ExprKind::MethodCall(_, [_, call_args @ ..], _) => {\n                             let expr = self.cx.tcx.hir().expect_expr(cmt.hir_id);\n                             let arg_ty_kind = self.cx.typeck_results().expr_ty(expr).kind();\n "}, {"sha": "d057da73302a25bc76d3109fc13557a76daa17f9", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -40,17 +40,17 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n-    ty.walk(tcx).any(|inner| match inner.unpack() {\n+pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n }\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, adt: &'tcx AdtDef) -> bool {\n-    ty.walk(tcx).any(|inner| match inner.unpack() {\n+pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n     })\n@@ -224,7 +224,7 @@ fn is_normalizable_helper<'tcx>(\n                         .iter()\n                         .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n                 }),\n-                _ => ty.walk(cx.tcx).all(|generic_arg| match generic_arg.unpack() {\n+                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n                     GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n                         is_normalizable_helper(cx, param_env, inner_ty, cache)\n                     },\n@@ -462,7 +462,7 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n                         let output = bounds\n                             .projection_bounds()\n                             .find(|p| lang_items.fn_once_output().map_or(false, |id| id == p.item_def_id()))\n-                            .map(|p| p.map_bound(|p| p.ty));\n+                            .map(|p| p.map_bound(|p| p.term.ty().expect(\"return type was a const\")));\n                         Some(ExprFnSig::Trait(bound.map_bound(|b| b.substs.type_at(0)), output))\n                     },\n                     _ => None,\n@@ -492,7 +492,7 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n                                     && p.projection_ty.self_ty() == ty =>\n                             {\n                                 is_input = false;\n-                                Some(p.ty)\n+                                p.term.ty()\n                             },\n                             _ => None,\n                         })"}, {"sha": "405e306359bc9b2dfe46278b43c4d5e3c6307a90", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::HirIdSet;\n use rustc_hir::{Expr, ExprKind, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n@@ -96,18 +96,12 @@ impl<'tcx> ParamBindingIdCollector {\n     }\n }\n impl<'tcx> intravisit::Visitor<'tcx> for ParamBindingIdCollector {\n-    type Map = Map<'tcx>;\n-\n     fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {\n         if let hir::PatKind::Binding(_, hir_id, ..) = pat.kind {\n             self.binding_hir_ids.push(hir_id);\n         }\n         intravisit::walk_pat(self, pat);\n     }\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n }\n \n pub struct BindingUsageFinder<'a, 'tcx> {\n@@ -127,7 +121,7 @@ impl<'a, 'tcx> BindingUsageFinder<'a, 'tcx> {\n     }\n }\n impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         if !self.usage_found {\n@@ -143,8 +137,8 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n     }\n }\n "}, {"sha": "40451b17a9c63ce30693fbf2ab7147b2a020f284", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,12 +1,13 @@\n use crate::path_to_local_id;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{self, walk_block, walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, walk_block, walk_expr, Visitor};\n use rustc_hir::{\n     Arm, Block, BlockCheckMode, Body, BodyId, Expr, ExprKind, HirId, ItemId, ItemKind, Stmt, UnOp, Unsafety,\n };\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+use rustc_middle::hir::nested_filter;\n use rustc_middle::ty;\n \n /// Convenience method for creating a `Visitor` with just `visit_expr` overridden and nested\n@@ -19,9 +20,9 @@ pub fn expr_visitor<'tcx>(cx: &LateContext<'tcx>, f: impl FnMut(&'tcx Expr<'tcx>\n         f: F,\n     }\n     impl<'tcx, F: FnMut(&'tcx Expr<'tcx>) -> bool> Visitor<'tcx> for V<'tcx, F> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::OnlyBodies(self.hir)\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.hir\n         }\n \n         fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n@@ -40,11 +41,6 @@ pub fn expr_visitor<'tcx>(cx: &LateContext<'tcx>, f: impl FnMut(&'tcx Expr<'tcx>\n pub fn expr_visitor_no_bodies<'tcx>(f: impl FnMut(&'tcx Expr<'tcx>) -> bool) -> impl Visitor<'tcx> {\n     struct V<F>(F);\n     impl<'tcx, F: FnMut(&'tcx Expr<'tcx>) -> bool> Visitor<'tcx> for V<F> {\n-        type Map = intravisit::ErasedMap<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::None\n-        }\n-\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if (self.0)(e) {\n                 walk_expr(self, e);\n@@ -113,12 +109,6 @@ where\n     }\n \n     impl<'hir, F: FnMut(&'hir hir::Expr<'hir>) -> bool> intravisit::Visitor<'hir> for RetFinder<F> {\n-        type Map = Map<'hir>;\n-\n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-\n         fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n             intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt);\n         }\n@@ -237,9 +227,9 @@ pub fn is_const_evaluatable<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) ->\n         is_const: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n         }\n \n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n@@ -327,9 +317,9 @@ pub fn is_expr_unsafe<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n         is_unsafe: bool,\n     }\n     impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n-        type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-            NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n         }\n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if self.is_unsafe {"}, {"sha": "6c8a3dc418b1517f4156a7c58a0146f4b9ca2a0a", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             // Check our expr is calling a method\n-            if let hir::ExprKind::MethodCall(path, _, [_self_arg, ..], _) = &expr.kind;\n+            if let hir::ExprKind::MethodCall(path, _, [_self_arg, ..]) = &expr.kind;\n             // Check the name of this method is `some_method`\n             if path.ident.name == sym!(some_method);\n             // Optionally, check the type of the self argument."}, {"sha": "c694037021a5e518a69af67aed66340ab075ef0d", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -13,7 +13,7 @@ publish = false\n clap = \"2.33\"\n flate2 = \"1.0\"\n fs_extra = \"1.2\"\n-rayon = \"1.5\"\n+rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n tar = \"0.4\""}, {"sha": "e23dc73ab08c1233e51d9b926923e2790fbabb5c", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-01-13\"\n+channel = \"nightly-2022-01-27\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "5e78b7c9de7e3990b3e415899ccb1ae096185cd4", "filename": "tests/ui/author/struct.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/tests%2Fui%2Fauthor%2Fstruct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/tests%2Fui%2Fauthor%2Fstruct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fstruct.stdout?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -53,7 +53,7 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let ExprKind::MethodCall(method_name, _, args, _) = expr.kind;\n+    if let ExprKind::MethodCall(method_name, args, _) = expr.kind;\n     if method_name.ident.as_str() == \"test\";\n     if args.len() == 1;\n     if let ExprKind::Path(ref qpath) = args[0].kind;"}, {"sha": "80189ca1f0aeeedc70fb70c0ffe4b75d509f12c3", "filename": "tests/ui/to_string_in_display.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/tests%2Fui%2Fto_string_in_display.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6/tests%2Fui%2Fto_string_in_display.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_string_in_display.stderr?ref=a98e7ab8b94485be6bd03e0c6b8682ecab5b52e6", "patch": "@@ -6,5 +6,14 @@ LL |         write!(f, \"{}\", self.to_string())\n    |\n    = note: `-D clippy::to-string-in-display` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: unnecessary use of `to_string`\n+  --> $DIR/to_string_in_display.rs:55:50\n+   |\n+LL |             Self::E(string) => write!(f, \"E {}\", string.to_string()),\n+   |                                                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unnecessary-to-owned` implied by `-D warnings`\n+   = note: this error originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n "}]}