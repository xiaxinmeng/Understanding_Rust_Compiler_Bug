{"sha": "8379d722933eff4831fc38e158a7238a9e2d8984", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNzlkNzIyOTMzZWZmNDgzMWZjMzhlMTU4YTcyMzhhOWUyZDg5ODQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-28T00:18:54Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T04:53:02Z"}, "message": "libgetopts: remove unnecessary `to_string()` calls", "tree": {"sha": "86dff261c4f9ccdf9bd0b7fb1f4cfe7c38320743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86dff261c4f9ccdf9bd0b7fb1f4cfe7c38320743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8379d722933eff4831fc38e158a7238a9e2d8984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8379d722933eff4831fc38e158a7238a9e2d8984", "html_url": "https://github.com/rust-lang/rust/commit/8379d722933eff4831fc38e158a7238a9e2d8984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8379d722933eff4831fc38e158a7238a9e2d8984/comments", "author": null, "committer": null, "parents": [{"sha": "98ae63753bc6c2efe1c8ed50d45e665db686cde7", "url": "https://api.github.com/repos/rust-lang/rust/commits/98ae63753bc6c2efe1c8ed50d45e665db686cde7", "html_url": "https://github.com/rust-lang/rust/commit/98ae63753bc6c2efe1c8ed50d45e665db686cde7"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "daf0f7f3818d7f760876a303b27caa5f7219d764", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8379d722933eff4831fc38e158a7238a9e2d8984/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8379d722933eff4831fc38e158a7238a9e2d8984/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=8379d722933eff4831fc38e158a7238a9e2d8984", "patch": "@@ -962,19 +962,19 @@ mod tests {\n         match rs {\n           Ok(ref m) => {\n             assert!(m.opt_present(\"test\"));\n-            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\");\n             assert!(m.opt_present(\"t\"));\n-            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\");\n           }\n           _ => { panic!(\"test_reqopt failed (long arg)\"); }\n         }\n         let short_args = vec!(\"-t\".to_string(), \"20\".to_string());\n         match getopts(short_args.as_slice(), opts.as_slice()) {\n           Ok(ref m) => {\n             assert!((m.opt_present(\"test\")));\n-            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\");\n             assert!((m.opt_present(\"t\")));\n-            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\");\n           }\n           _ => { panic!(\"test_reqopt failed (short arg)\"); }\n         }\n@@ -1027,19 +1027,19 @@ mod tests {\n         match rs {\n           Ok(ref m) => {\n             assert!(m.opt_present(\"test\"));\n-            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\");\n             assert!((m.opt_present(\"t\")));\n-            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\");\n           }\n           _ => panic!()\n         }\n         let short_args = vec!(\"-t\".to_string(), \"20\".to_string());\n         match getopts(short_args.as_slice(), opts.as_slice()) {\n           Ok(ref m) => {\n             assert!((m.opt_present(\"test\")));\n-            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\");\n             assert!((m.opt_present(\"t\")));\n-            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\");\n           }\n           _ => panic!()\n         }\n@@ -1154,7 +1154,7 @@ mod tests {\n           Ok(ref m) => {\n             // The next variable after the flag is just a free argument\n \n-            assert!(m.free[0] == \"20\".to_string());\n+            assert!(m.free[0] == \"20\");\n           }\n           _ => panic!()\n         }\n@@ -1250,19 +1250,19 @@ mod tests {\n         match rs {\n           Ok(ref m) => {\n             assert!((m.opt_present(\"test\")));\n-            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\");\n             assert!((m.opt_present(\"t\")));\n-            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\");\n           }\n           _ => panic!()\n         }\n         let short_args = vec!(\"-t\".to_string(), \"20\".to_string());\n         match getopts(short_args.as_slice(), opts.as_slice()) {\n           Ok(ref m) => {\n             assert!((m.opt_present(\"test\")));\n-            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"test\").unwrap(), \"20\");\n             assert!((m.opt_present(\"t\")));\n-            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n+            assert_eq!(m.opt_str(\"t\").unwrap(), \"20\");\n           }\n           _ => panic!()\n         }\n@@ -1306,12 +1306,12 @@ mod tests {\n         match rs {\n           Ok(ref m) => {\n               assert!(m.opt_present(\"test\"));\n-              assert_eq!(m.opt_str(\"test\").unwrap(), \"20\".to_string());\n+              assert_eq!(m.opt_str(\"test\").unwrap(), \"20\");\n               assert!(m.opt_present(\"t\"));\n-              assert_eq!(m.opt_str(\"t\").unwrap(), \"20\".to_string());\n+              assert_eq!(m.opt_str(\"t\").unwrap(), \"20\");\n               let pair = m.opt_strs(\"test\");\n-              assert!(pair[0] == \"20\".to_string());\n-              assert!(pair[1] == \"30\".to_string());\n+              assert!(pair[0] == \"20\");\n+              assert!(pair[1] == \"30\");\n           }\n           _ => panic!()\n         }\n@@ -1363,19 +1363,19 @@ mod tests {\n         let rs = getopts(args.as_slice(), opts.as_slice());\n         match rs {\n           Ok(ref m) => {\n-            assert!(m.free[0] == \"prog\".to_string());\n-            assert!(m.free[1] == \"free1\".to_string());\n-            assert_eq!(m.opt_str(\"s\").unwrap(), \"20\".to_string());\n-            assert!(m.free[2] == \"free2\".to_string());\n+            assert!(m.free[0] == \"prog\");\n+            assert!(m.free[1] == \"free1\");\n+            assert_eq!(m.opt_str(\"s\").unwrap(), \"20\");\n+            assert!(m.free[2] == \"free2\");\n             assert!((m.opt_present(\"flag\")));\n-            assert_eq!(m.opt_str(\"long\").unwrap(), \"30\".to_string());\n+            assert_eq!(m.opt_str(\"long\").unwrap(), \"30\");\n             assert!((m.opt_present(\"f\")));\n             let pair = m.opt_strs(\"m\");\n-            assert!(pair[0] == \"40\".to_string());\n-            assert!(pair[1] == \"50\".to_string());\n+            assert!(pair[0] == \"40\");\n+            assert!(pair[1] == \"50\");\n             let pair = m.opt_strs(\"n\");\n-            assert!(pair[0] == \"-A B\".to_string());\n-            assert!(pair[1] == \"-60 70\".to_string());\n+            assert!(pair[0] == \"-A B\");\n+            assert!(pair[1] == \"-60 70\");\n             assert!((!m.opt_present(\"notpresent\")));\n           }\n           _ => panic!()\n@@ -1401,11 +1401,11 @@ mod tests {\n         assert!(!matches_single.opts_present(&[\"thing\".to_string()]));\n         assert!(!matches_single.opts_present(&[]));\n \n-        assert_eq!(matches_single.opts_str(&[\"e\".to_string()]).unwrap(), \"foo\".to_string());\n+        assert_eq!(matches_single.opts_str(&[\"e\".to_string()]).unwrap(), \"foo\");\n         assert_eq!(matches_single.opts_str(&[\"e\".to_string(), \"encrypt\".to_string()]).unwrap(),\n-                   \"foo\".to_string());\n+                   \"foo\");\n         assert_eq!(matches_single.opts_str(&[\"encrypt\".to_string(), \"e\".to_string()]).unwrap(),\n-                   \"foo\".to_string());\n+                   \"foo\");\n \n         let args_both = vec!(\"-e\".to_string(), \"foo\".to_string(), \"--encrypt\".to_string(),\n                              \"foo\".to_string());\n@@ -1422,12 +1422,12 @@ mod tests {\n         assert!(!matches_both.opts_present(&[\"thing\".to_string()]));\n         assert!(!matches_both.opts_present(&[]));\n \n-        assert_eq!(matches_both.opts_str(&[\"e\".to_string()]).unwrap(), \"foo\".to_string());\n-        assert_eq!(matches_both.opts_str(&[\"encrypt\".to_string()]).unwrap(), \"foo\".to_string());\n+        assert_eq!(matches_both.opts_str(&[\"e\".to_string()]).unwrap(), \"foo\");\n+        assert_eq!(matches_both.opts_str(&[\"encrypt\".to_string()]).unwrap(), \"foo\");\n         assert_eq!(matches_both.opts_str(&[\"e\".to_string(), \"encrypt\".to_string()]).unwrap(),\n-                   \"foo\".to_string());\n+                   \"foo\");\n         assert_eq!(matches_both.opts_str(&[\"encrypt\".to_string(), \"e\".to_string()]).unwrap(),\n-                   \"foo\".to_string());\n+                   \"foo\");\n     }\n \n     #[test]\n@@ -1440,9 +1440,9 @@ mod tests {\n           result::Err(_) => panic!()\n         };\n         assert!(matches.opts_present(&[\"L\".to_string()]));\n-        assert_eq!(matches.opts_str(&[\"L\".to_string()]).unwrap(), \"foo\".to_string());\n+        assert_eq!(matches.opts_str(&[\"L\".to_string()]).unwrap(), \"foo\");\n         assert!(matches.opts_present(&[\"M\".to_string()]));\n-        assert_eq!(matches.opts_str(&[\"M\".to_string()]).unwrap(), \".\".to_string());\n+        assert_eq!(matches.opts_str(&[\"M\".to_string()]).unwrap(), \".\");\n \n     }\n \n@@ -1456,7 +1456,7 @@ mod tests {\n           result::Err(e) => panic!( \"{}\", e )\n         };\n         assert!(matches.opts_present(&[\"L\".to_string()]));\n-        assert_eq!(matches.opts_str(&[\"L\".to_string()]).unwrap(), \"verbose\".to_string());\n+        assert_eq!(matches.opts_str(&[\"L\".to_string()]).unwrap(), \"verbose\");\n         assert!(matches.opts_present(&[\"v\".to_string()]));\n         assert_eq!(3, matches.opt_count(\"v\"));\n     }\n@@ -1510,7 +1510,7 @@ Options:\n     -k --kiwi           Desc\n     -p [VAL]            Desc\n     -l VAL              Desc\n-\".to_string();\n+\";\n \n         let generated_usage = usage(\"Usage: fruits\", optgroups.as_slice());\n \n@@ -1537,7 +1537,7 @@ Options:\n     -k --kiwi           This is a long description which won't be wrapped..+..\n     -a --apple          This is a long description which _will_ be\n                         wrapped..+..\n-\".to_string();\n+\";\n \n         let usage = usage(\"Usage: fruits\", optgroups.as_slice());\n \n@@ -1563,7 +1563,7 @@ Options:\n     -a --apple          This \u201cdescription\u201d has some characters that could\n                         confuse the line wrapping; an apple costs 0.51\u20ac in\n                         some parts of Europe.\n-\".to_string();\n+\";\n \n         let usage = usage(\"Usage: fruits\", optgroups.as_slice());\n "}]}