{"sha": "c28af2625870b2117e73fc8bee83a1704cff7414", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOGFmMjYyNTg3MGIyMTE3ZTczZmM4YmVlODNhMTcwNGNmZjc0MTQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-23T20:50:12Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T19:12:25Z"}, "message": "Refactor the bounded pingpong example to avoid needing to generate unsafe code.\n\nTook some steps towards bounded codegen.", "tree": {"sha": "527e545ec40d478f69943a745d220f465190078c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/527e545ec40d478f69943a745d220f465190078c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28af2625870b2117e73fc8bee83a1704cff7414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28af2625870b2117e73fc8bee83a1704cff7414", "html_url": "https://github.com/rust-lang/rust/commit/c28af2625870b2117e73fc8bee83a1704cff7414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28af2625870b2117e73fc8bee83a1704cff7414/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88877effa8661d20e285aa82a4a5015a4a4c871c", "url": "https://api.github.com/repos/rust-lang/rust/commits/88877effa8661d20e285aa82a4a5015a4a4c871c", "html_url": "https://github.com/rust-lang/rust/commit/88877effa8661d20e285aa82a4a5015a4a4c871c"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "82b2d31a0be6072a06a6d073b8c1ac9602c224eb", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=c28af2625870b2117e73fc8bee83a1704cff7414", "patch": "@@ -8,7 +8,7 @@ import arc::methods;\n // Things used by code generated by the pipe compiler.\n export entangle, get_buffer, drop_buffer;\n export send_packet_buffered, recv_packet_buffered;\n-export mk_packet;\n+export mk_packet, entangle_buffer, has_buffer;\n \n // export these so we can find them in the buffer_resource\n // destructor. This is probably another metadata bug.\n@@ -151,6 +151,16 @@ type packet<T: send> = {\n     mut payload: option<T>,\n };\n \n+trait has_buffer {\n+    fn set_buffer(b: *libc::c_void);\n+}\n+\n+impl methods<T: send> of has_buffer for packet<T> {\n+    fn set_buffer(b: *libc::c_void) {\n+        self.header.buffer = b;\n+    }\n+}\n+\n fn mk_packet<T: send>() -> packet<T> {\n     {\n         header: packet_header(),\n@@ -182,6 +192,16 @@ fn packet<T: send>() -> *packet<T> {\n     p\n }\n \n+fn entangle_buffer<T: send, Tstart: send>(\n+    -buffer: ~buffer<T>,\n+    init: fn(*libc::c_void, x: &T) -> *packet<Tstart>)\n+    -> (send_packet_buffered<Tstart, T>, recv_packet_buffered<Tstart, T>)\n+{\n+    let p = init(unsafe { reinterpret_cast(buffer) }, &buffer.data);\n+    unsafe { forget(buffer) }\n+    (send_packet_buffered(p), recv_packet_buffered(p))\n+}\n+\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     fn atomic_xchng(&dst: int, src: int) -> int;"}, {"sha": "d8467e36c84e2b9e7579deaa0d2816c0eac3b0b9", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=c28af2625870b2117e73fc8bee83a1704cff7414", "patch": "@@ -84,8 +84,11 @@ fn analyze(proto: protocol, _cx: ext_ctxt) {\n         //                    involving these states: %s\",\n         //                   *proto.name,\n         //                   states));\n+\n+        proto.bounded = some(false);\n     }\n     else {\n         #debug(\"protocol %s is bounded. yay!\", *proto.name);\n+        proto.bounded = some(true);\n     }\n }\n\\ No newline at end of file"}, {"sha": "8a535e85188872621e0aa250a62a71049a40103e", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=c28af2625870b2117e73fc8bee83a1704cff7414", "patch": "@@ -98,23 +98,23 @@ impl methods for state {\n     }\n }\n \n-enum protocol {\n-    protocol_(@{\n-        name: ident,\n-        states: dvec<state>,\n-    }),\n-}\n+type protocol = @protocol_;\n \n-fn protocol(name: ident) -> protocol {\n-    protocol_(@{name: name, states: dvec()})\n-}\n+fn protocol(name: ident) -> protocol { @protocol_(name) }\n \n-impl methods for protocol {\n-    fn add_state(name: ident, dir: direction) -> state {\n-        self.add_state_poly(name, dir, ~[])\n+class protocol_ {\n+    let name: ident;\n+    let states: dvec<state>;\n+\n+    let mut bounded: option<bool>;\n+\n+    new(name: ident) {\n+        self.name = name;\n+        self.states = dvec();\n+        self.bounded = none;\n     }\n \n-    /// Get or create a state.\n+    /// Get a state.\n     fn get_state(name: ident) -> state {\n         self.states.find(|i| i.name == name).get()\n     }\n@@ -125,6 +125,20 @@ impl methods for protocol {\n         self.states.find(|i| i.name == name) != none\n     }\n \n+    fn filename() -> ~str {\n+        ~\"proto://\" + *self.name\n+    }\n+\n+    fn num_states() -> uint { self.states.len() }\n+\n+    fn is_bounded() -> bool { self.bounded.get() }\n+}\n+\n+impl methods for protocol {\n+    fn add_state(name: ident, dir: direction) -> state {\n+        self.add_state_poly(name, dir, ~[])\n+    }\n+\n     fn add_state_poly(name: ident, dir: direction,\n                       +ty_params: ~[ast::ty_param]) -> state {\n         let messages = dvec();\n@@ -141,12 +155,6 @@ impl methods for protocol {\n         self.states.push(state);\n         state\n     }\n-\n-    fn filename() -> ~str {\n-        ~\"proto://\" + *self.name\n-    }\n-\n-    fn num_states() -> uint { self.states.len() }\n }\n \n trait visitor<Tproto, Tstate, Tmessage> {"}, {"sha": "c8b0dc3006a70bfb25844926cb5e1d838973dc16", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28af2625870b2117e73fc8bee83a1704cff7414/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=c28af2625870b2117e73fc8bee83a1704cff7414", "patch": "@@ -22,13 +22,11 @@ mod pingpong {\n                 pong: mk_packet::<pong>()\n             }\n         };\n-        unsafe {\n-            buffer.data.ping.header.set_buffer(buffer);\n-            buffer.data.pong.header.set_buffer(buffer);\n+        do pipes::entangle_buffer(buffer) |buffer, data| {\n+            data.ping.set_buffer(buffer);\n+            data.pong.set_buffer(buffer);\n+            ptr::addr_of(data.ping)\n         }\n-        let client = send_packet_buffered(ptr::addr_of(buffer.data.ping));\n-        let server = recv_packet_buffered(ptr::addr_of(buffer.data.ping));\n-        (client, server)\n     }\n     enum ping = server::pong;\n     enum pong = client::ping;"}]}