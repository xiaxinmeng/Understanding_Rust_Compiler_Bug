{"sha": "c038b454239a30cb8a734bcb2ff8a7e5e543939a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMzhiNDU0MjM5YTMwY2I4YTczNGJjYjJmZjhhN2U1ZTU0MzkzOWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-06T12:54:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-26T08:11:58Z"}, "message": "Address review comments", "tree": {"sha": "978a7e11ebc682cb15f3f3decb256c0ae2ea15cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978a7e11ebc682cb15f3f3decb256c0ae2ea15cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c038b454239a30cb8a734bcb2ff8a7e5e543939a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c038b454239a30cb8a734bcb2ff8a7e5e543939a", "html_url": "https://github.com/rust-lang/rust/commit/c038b454239a30cb8a734bcb2ff8a7e5e543939a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c038b454239a30cb8a734bcb2ff8a7e5e543939a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69aeaf662c637b454e8c7a5ddbd69b4978ec211", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69aeaf662c637b454e8c7a5ddbd69b4978ec211", "html_url": "https://github.com/rust-lang/rust/commit/d69aeaf662c637b454e8c7a5ddbd69b4978ec211"}], "stats": {"total": 566, "additions": 355, "deletions": 211}, "files": [{"sha": "dff17d8c17bd148fd8948123255e738201ea5859", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -539,7 +539,7 @@ pub enum PatKind {\n     Struct(Path, HirVec<Spanned<FieldPat>>, bool),\n \n     /// A tuple struct/variant pattern `Variant(x, y, .., z)`.\n-    /// If the `..` pattern fragment presents, then `Option<usize>` denotes its position.\n+    /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// 0 <= position <= subpats.len()\n     TupleStruct(Path, HirVec<P<Pat>>, Option<usize>),\n \n@@ -554,7 +554,7 @@ pub enum PatKind {\n     QPath(QSelf, Path),\n \n     /// A tuple pattern `(a, b)`.\n-    /// If the `..` pattern fragment presents, then `Option<usize>` denotes its position.\n+    /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// 0 <= position <= subpats.len()\n     Tuple(HirVec<P<Pat>>, Option<usize>),\n     /// A `box` pattern"}, {"sha": "cf4842a25d6ee0ea493a819c8a440165150ebca5", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -22,12 +22,12 @@ use std::cell::RefCell;\n pub type PatIdMap = FnvHashMap<ast::Name, ast::NodeId>;\n \n #[derive(Clone, Copy)]\n-pub struct AjustPos {\n+pub struct AdjustPos {\n     gap_pos: usize,\n     gap_len: usize,\n }\n \n-impl FnOnce<(usize,)> for AjustPos {\n+impl FnOnce<(usize,)> for AdjustPos {\n     type Output = usize;\n     extern \"rust-call\" fn call_once(self, (i,): (usize,)) -> usize {\n         if i < self.gap_pos { i } else { i + self.gap_len }\n@@ -36,8 +36,8 @@ impl FnOnce<(usize,)> for AjustPos {\n \n // Returns a functional object used to adjust tuple pattern indexes. Example: for 5-tuple and\n // pattern (a, b, .., c) expected_len is 5, actual_len is 3 and gap_pos is Some(2).\n-pub fn pat_adjust_pos(expected_len: usize, actual_len: usize, gap_pos: Option<usize>) -> AjustPos {\n-    AjustPos {\n+pub fn pat_adjust_pos(expected_len: usize, actual_len: usize, gap_pos: Option<usize>) -> AdjustPos {\n+    AdjustPos {\n         gap_pos: if let Some(gap_pos) = gap_pos { gap_pos } else { expected_len },\n         gap_len: expected_len - actual_len,\n     }"}, {"sha": "7c3c33c28f6f715e828a41faef7f44958b5479c2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -631,7 +631,7 @@ pub enum PatKind {\n     Struct(Path, Vec<Spanned<FieldPat>>, bool),\n \n     /// A tuple struct/variant pattern `Variant(x, y, .., z)`.\n-    /// If the `..` pattern fragment presents, then `Option<usize>` denotes its position.\n+    /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// 0 <= position <= subpats.len()\n     TupleStruct(Path, Vec<P<Pat>>, Option<usize>),\n \n@@ -646,7 +646,7 @@ pub enum PatKind {\n     QPath(QSelf, Path),\n \n     /// A tuple pattern `(a, b)`.\n-    /// If the `..` pattern fragment presents, then `Option<usize>` denotes its position.\n+    /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// 0 <= position <= subpats.len()\n     Tuple(Vec<P<Pat>>, Option<usize>),\n     /// A `box` pattern"}, {"sha": "943910b15700dc5c1d0c50f5ab3ee385c3992f25", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -3426,6 +3426,10 @@ impl<'a> Parser<'a> {\n                     // `..` needs to be followed by `)` or `, pat`, `..,)` is disallowed.\n                     fields.push(self.parse_pat()?);\n                 }\n+            } else if ddpos.is_some() && self.eat(&token::DotDot) {\n+                // Emit a friendly error, ignore `..` and continue parsing\n+                self.span_err(self.last_span, \"`..` can only be used once per \\\n+                                               tuple or tuple struct pattern\");\n             } else {\n                 fields.push(self.parse_pat()?);\n             }"}, {"sha": "029dc7a295678494ac52bffed45165de1b4535fd", "filename": "src/test/parse-fail/pat-tuple-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Fparse-fail%2Fpat-tuple-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Fparse-fail%2Fpat-tuple-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fpat-tuple-3.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     match 0 {\n-        (.., pat, ..) => {} //~ ERROR expected pattern, found `..`\n+        (.., pat, ..) => {} //~ ERROR `..` can only be used once per tuple or tuple struct pattern\n     }\n }"}, {"sha": "c3796210a8e5b9070f06a63511b713e23e69cdaa", "filename": "src/test/run-pass/pat-tuple-1.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpat-tuple-1.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(dotdot_in_tuple_patterns)]\n+\n+fn tuple() {\n+    let x = (1, 2, 3);\n+    match x {\n+        (a, b, ..) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+        }\n+    }\n+    match x {\n+        (.., b, c) => {\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        (a, .., c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        (a, b, c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        (a, b, c, ..) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        (.., a, b, c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+}\n+\n+fn tuple_struct() {\n+    struct S(u8, u8, u8);\n+\n+    let x = S(1, 2, 3);\n+    match x {\n+        S(a, b, ..) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+        }\n+    }\n+    match x {\n+        S(.., b, c) => {\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        S(a, .., c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        S(a, b, c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        S(a, b, c, ..) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+    match x {\n+        S(.., a, b, c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    tuple();\n+    tuple_struct();\n+}"}, {"sha": "881e96a9d788ca41a3e5ff0ce0342fb4e7f4c9ee", "filename": "src/test/run-pass/pat-tuple-2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpat-tuple-2.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(dotdot_in_tuple_patterns)]\n+\n+fn tuple() {\n+    let x = (1,);\n+    match x {\n+        (2, ..) => panic!(),\n+        (..) => ()\n+    }\n+}\n+\n+fn tuple_struct() {\n+    struct S(u8);\n+\n+    let x = S(1);\n+    match x {\n+        S(2, ..) => panic!(),\n+        S(..) => ()\n+    }\n+}\n+\n+fn main() {\n+    tuple();\n+    tuple_struct();\n+}"}, {"sha": "94d33d41899a413c992ff7e13e462d1634ebe8ae", "filename": "src/test/run-pass/pat-tuple-3.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpat-tuple-3.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(dotdot_in_tuple_patterns)]\n+\n+fn tuple() {\n+    let x = (1, 2, 3);\n+    let branch = match x {\n+        (1, 1, ..) => 0,\n+        (1, 2, 3, ..) => 1,\n+        (1, 2, ..) => 2,\n+        _ => 3\n+    };\n+    assert_eq!(branch, 1);\n+}\n+\n+fn tuple_struct() {\n+    struct S(u8, u8, u8);\n+\n+    let x = S(1, 2, 3);\n+    let branch = match x {\n+        S(1, 1, ..) => 0,\n+        S(1, 2, 3, ..) => 1,\n+        S(1, 2, ..) => 2,\n+        _ => 3\n+    };\n+    assert_eq!(branch, 1);\n+}\n+\n+fn main() {\n+    tuple();\n+    tuple_struct();\n+}"}, {"sha": "ffd82fea99622ac58d87ff7352a44e18f53b187c", "filename": "src/test/run-pass/pat-tuple-4.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpat-tuple-4.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(dotdot_in_tuple_patterns)]\n+\n+fn tuple() {\n+    let x = (1, 2, 3);\n+    match x {\n+        (1, 2, 4) => unreachable!(),\n+        (0, 2, 3, ..) => unreachable!(),\n+        (0, .., 3) => unreachable!(),\n+        (0, ..) => unreachable!(),\n+        (1, 2, 3) => (),\n+        (_, _, _) => unreachable!(),\n+    }\n+    match x {\n+        (..) => (),\n+    }\n+    match x {\n+        (_, _, _, ..) => (),\n+    }\n+    match x {\n+        (a, b, c) => {\n+            assert_eq!(1, a);\n+            assert_eq!(2, b);\n+            assert_eq!(3, c);\n+        }\n+    }\n+}\n+\n+fn tuple_struct() {\n+    struct S(u8, u8, u8);\n+\n+    let x = S(1, 2, 3);\n+    match x {\n+        S(1, 2, 4) => unreachable!(),\n+        S(0, 2, 3, ..) => unreachable!(),\n+        S(0, .., 3) => unreachable!(),\n+        S(0, ..) => unreachable!(),\n+        S(1, 2, 3) => (),\n+        S(_, _, _) => unreachable!(),\n+    }\n+    match x {\n+        S(..) => (),\n+    }\n+    match x {\n+        S(_, _, _, ..) => (),\n+    }\n+    match x {\n+        S(a, b, c) => {\n+            assert_eq!(1, a);\n+            assert_eq!(2, b);\n+            assert_eq!(3, c);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    tuple();\n+    tuple_struct();\n+}"}, {"sha": "41c4d02abcbd3837f58ea57453e64acd3f9aa1af", "filename": "src/test/run-pass/pat-tuple-5.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpat-tuple-5.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(dotdot_in_tuple_patterns)]\n+\n+fn tuple() {\n+    struct S;\n+    struct Z;\n+    struct W;\n+    let x = (S, Z, W);\n+    match x { (S, ..) => {} }\n+    match x { (.., W) => {} }\n+    match x { (S, .., W) => {} }\n+    match x { (.., Z, _) => {} }\n+}\n+\n+fn tuple_struct() {\n+    struct SS(S, Z, W);\n+\n+    struct S;\n+    struct Z;\n+    struct W;\n+    let x = SS(S, Z, W);\n+    match x { SS(S, ..) => {} }\n+    match x { SS(.., W) => {} }\n+    match x { SS(S, .., W) => {} }\n+    match x { SS(.., Z, _) => {} }\n+}\n+\n+fn main() {\n+    tuple();\n+    tuple_struct();\n+}"}, {"sha": "6f3f2b3aed5507266406c66419db6c61b79857a4", "filename": "src/test/run-pass/pat-tuple-6.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c038b454239a30cb8a734bcb2ff8a7e5e543939a/src%2Ftest%2Frun-pass%2Fpat-tuple-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpat-tuple-6.rs?ref=c038b454239a30cb8a734bcb2ff8a7e5e543939a", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(dotdot_in_tuple_patterns)]\n+\n+fn tuple() {\n+    let x = (1, 2, 3, 4, 5);\n+    match x {\n+        (a, .., b, c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 4);\n+            assert_eq!(c, 5);\n+        }\n+    }\n+    match x {\n+        (a, b, c, .., d) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+            assert_eq!(d, 5);\n+        }\n+    }\n+}\n+\n+fn tuple_struct() {\n+    struct S(u8, u8, u8, u8, u8);\n+\n+    let x = S(1, 2, 3, 4, 5);\n+    match x {\n+        S(a, .., b, c) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 4);\n+            assert_eq!(c, 5);\n+        }\n+    }\n+    match x {\n+        S(a, b, c, .., d) => {\n+            assert_eq!(a, 1);\n+            assert_eq!(b, 2);\n+            assert_eq!(c, 3);\n+            assert_eq!(d, 5);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    tuple();\n+    tuple_struct();\n+}"}, {"sha": "ccea068f715a050438179e6488458b60cd1a6ca2", "filename": "src/test/run-pass/pat-tuple.rs", "status": "removed", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/d69aeaf662c637b454e8c7a5ddbd69b4978ec211/src%2Ftest%2Frun-pass%2Fpat-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69aeaf662c637b454e8c7a5ddbd69b4978ec211/src%2Ftest%2Frun-pass%2Fpat-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpat-tuple.rs?ref=d69aeaf662c637b454e8c7a5ddbd69b4978ec211", "patch": "@@ -1,202 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(dotdot_in_tuple_patterns)]\n-\n-fn b() {\n-    let x = (1, 2, 3);\n-    match x {\n-        (a, b, ..) => {\n-            assert_eq!(a, 1);\n-            assert_eq!(b, 2);\n-        }\n-    }\n-    match x {\n-        (.., b, c) => {\n-            assert_eq!(b, 2);\n-            assert_eq!(c, 3);\n-        }\n-    }\n-    match x {\n-        (a, .., c) => {\n-            assert_eq!(a, 1);\n-            assert_eq!(c, 3);\n-        }\n-    }\n-    match x {\n-        (a, b, c) => {\n-            assert_eq!(a, 1);\n-            assert_eq!(b, 2);\n-            assert_eq!(c, 3);\n-        }\n-    }\n-}\n-\n-fn bs() {\n-    struct S(u8, u8, u8);\n-\n-    let x = S(1, 2, 3);\n-    match x {\n-        S(a, b, ..) => {\n-            assert_eq!(a, 1);\n-            assert_eq!(b, 2);\n-        }\n-    }\n-    match x {\n-        S(.., b, c) => {\n-            assert_eq!(b, 2);\n-            assert_eq!(c, 3);\n-        }\n-    }\n-    match x {\n-        S(a, .., c) => {\n-            assert_eq!(a, 1);\n-            assert_eq!(c, 3);\n-        }\n-    }\n-    match x {\n-        S(a, b, c) => {\n-            assert_eq!(a, 1);\n-            assert_eq!(b, 2);\n-            assert_eq!(c, 3);\n-        }\n-    }\n-}\n-\n-fn c() {\n-    let x = (1,);\n-    match x {\n-        (2, ..) => panic!(),\n-        (..) => ()\n-    }\n-}\n-\n-fn cs() {\n-    struct S(u8);\n-\n-    let x = S(1);\n-    match x {\n-        S(2, ..) => panic!(),\n-        S(..) => ()\n-    }\n-}\n-\n-fn d() {\n-    let x = (1, 2, 3);\n-    let branch = match x {\n-        (1, 1, ..) => 0,\n-        (1, 2, 3, ..) => 1,\n-        (1, 2, ..) => 2,\n-        _ => 3\n-    };\n-    assert_eq!(branch, 1);\n-}\n-\n-fn ds() {\n-    struct S(u8, u8, u8);\n-\n-    let x = S(1, 2, 3);\n-    let branch = match x {\n-        S(1, 1, ..) => 0,\n-        S(1, 2, 3, ..) => 1,\n-        S(1, 2, ..) => 2,\n-        _ => 3\n-    };\n-    assert_eq!(branch, 1);\n-}\n-\n-fn f() {\n-    let x = (1, 2, 3);\n-    match x {\n-        (1, 2, 4) => unreachable!(),\n-        (0, 2, 3, ..) => unreachable!(),\n-        (0, .., 3) => unreachable!(),\n-        (0, ..) => unreachable!(),\n-        (1, 2, 3) => (),\n-        (_, _, _) => unreachable!(),\n-    }\n-    match x {\n-        (..) => (),\n-    }\n-    match x {\n-        (_, _, _, ..) => (),\n-    }\n-    match x {\n-        (a, b, c) => {\n-            assert_eq!(1, a);\n-            assert_eq!(2, b);\n-            assert_eq!(3, c);\n-        }\n-    }\n-}\n-\n-fn fs() {\n-    struct S(u8, u8, u8);\n-\n-    let x = S(1, 2, 3);\n-    match x {\n-        S(1, 2, 4) => unreachable!(),\n-        S(0, 2, 3, ..) => unreachable!(),\n-        S(0, .., 3) => unreachable!(),\n-        S(0, ..) => unreachable!(),\n-        S(1, 2, 3) => (),\n-        S(_, _, _) => unreachable!(),\n-    }\n-    match x {\n-        S(..) => (),\n-    }\n-    match x {\n-        S(_, _, _, ..) => (),\n-    }\n-    match x {\n-        S(a, b, c) => {\n-            assert_eq!(1, a);\n-            assert_eq!(2, b);\n-            assert_eq!(3, c);\n-        }\n-    }\n-}\n-\n-fn g() {\n-    struct S;\n-    struct Z;\n-    struct W;\n-    let x = (S, Z, W);\n-    match x { (S, ..) => {} }\n-    match x { (.., W) => {} }\n-    match x { (S, .., W) => {} }\n-    match x { (.., Z, _) => {} }\n-}\n-\n-fn gs() {\n-    struct SS(S, Z, W);\n-\n-    struct S;\n-    struct Z;\n-    struct W;\n-    let x = SS(S, Z, W);\n-    match x { SS(S, ..) => {} }\n-    match x { SS(.., W) => {} }\n-    match x { SS(S, .., W) => {} }\n-    match x { SS(.., Z, _) => {} }\n-}\n-\n-fn main() {\n-    b();\n-    bs();\n-    c();\n-    cs();\n-    d();\n-    ds();\n-    f();\n-    fs();\n-    g();\n-    gs();\n-}"}]}