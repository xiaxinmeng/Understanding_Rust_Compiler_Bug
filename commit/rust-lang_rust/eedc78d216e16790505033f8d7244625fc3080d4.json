{"sha": "eedc78d216e16790505033f8d7244625fc3080d4", "node_id": "C_kwDOAAsO6NoAKGVlZGM3OGQyMTZlMTY3OTA1MDUwMzNmOGQ3MjQ0NjI1ZmMzMDgwZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T21:08:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T21:08:56Z"}, "message": "Auto merge of #2213 - RalfJung:clippy, r=RalfJung\n\nmake clippy mandatory for bors, and silence another clippy lint\n\nWe don't currently trigger this but I saw it in a PR and I'd rather evaluate this on a case-by-case basis during review, thank you clippy.", "tree": {"sha": "80f93968e649b72122394c85de415f525442be51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f93968e649b72122394c85de415f525442be51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eedc78d216e16790505033f8d7244625fc3080d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eedc78d216e16790505033f8d7244625fc3080d4", "html_url": "https://github.com/rust-lang/rust/commit/eedc78d216e16790505033f8d7244625fc3080d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eedc78d216e16790505033f8d7244625fc3080d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba15da40183b686b98d99aa826a6f83c48ee9245", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba15da40183b686b98d99aa826a6f83c48ee9245", "html_url": "https://github.com/rust-lang/rust/commit/ba15da40183b686b98d99aa826a6f83c48ee9245"}, {"sha": "2b35dd514e249bcd7d570a3443335236b4a5d9b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b35dd514e249bcd7d570a3443335236b4a5d9b1", "html_url": "https://github.com/rust-lang/rust/commit/2b35dd514e249bcd7d570a3443335236b4a5d9b1"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "2bfc58be28d7765fa318047e3cf6141bef7f44e6", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eedc78d216e16790505033f8d7244625fc3080d4/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/eedc78d216e16790505033f8d7244625fc3080d4/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=eedc78d216e16790505033f8d7244625fc3080d4", "patch": "@@ -86,22 +86,8 @@ jobs:\n       - name: Test\n         run: bash ./ci.sh\n \n-  fmt:\n-    name: formatting (ignored by bors)\n-    runs-on: ubuntu-latest\n-    steps:\n-      - uses: actions/checkout@v3\n-      - name: Install latest nightly\n-        run: |\n-          rustup toolchain install nightly --component rustfmt\n-          rustup override set nightly\n-      - name: Formatting (miri, ui_test)\n-        run: cargo fmt --all --check\n-      - name: Formatting (cargo-miri)\n-        run: cargo fmt --manifest-path cargo-miri/Cargo.toml --all --check\n-\n   clippy:\n-    name: clippy (ignored by bors)\n+    name: clippy\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v3\n@@ -117,6 +103,20 @@ jobs:\n       - name: Clippy (cargo-miri)\n         run: cargo clippy --manifest-path cargo-miri/Cargo.toml --all-targets -- -D warnings\n \n+  fmt:\n+    name: formatting (ignored by bors)\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v3\n+      - name: Install latest nightly\n+        run: |\n+          rustup toolchain install nightly --component rustfmt\n+          rustup override set nightly\n+      - name: Formatting (miri, ui_test)\n+        run: cargo fmt --all --check\n+      - name: Formatting (cargo-miri)\n+        run: cargo fmt --manifest-path cargo-miri/Cargo.toml --all --check\n+\n   # These jobs doesn't actually test anything, but they're only used to tell\n   # bors the build completed, as there is no practical way to detect when a\n   # workflow is successful listening to webhooks only.\n@@ -126,15 +126,15 @@ jobs:\n   end-success:\n     name: bors build finished\n     runs-on: ubuntu-latest\n-    needs: [build]\n+    needs: [build, clippy]\n     if: github.event.pusher.name == 'bors' && success()\n     steps:\n       - name: mark the job as a success\n         run: exit 0\n   end-failure:\n     name: bors build finished\n     runs-on: ubuntu-latest\n-    needs: [build]\n+    needs: [build, clippy]\n     if: github.event.pusher.name == 'bors' && (failure() || cancelled())\n     steps:\n       - name: mark the job as a failure\n@@ -144,7 +144,7 @@ jobs:\n   cron-fail-notify:\n     name: cronjob failure notification\n     runs-on: ubuntu-latest\n-    needs: [build]\n+    needs: [build, clippy]\n     if: github.event_name == 'schedule' && (failure() || cancelled())\n     steps:\n       - name: Install zulip-send"}, {"sha": "7d8eb92ac58ed0012e8b52e7503812c72ca90a65", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eedc78d216e16790505033f8d7244625fc3080d4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedc78d216e16790505033f8d7244625fc3080d4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=eedc78d216e16790505033f8d7244625fc3080d4", "patch": "@@ -16,7 +16,8 @@\n     clippy::new_without_default,\n     clippy::single_match,\n     clippy::useless_format,\n-    clippy::derive_partial_eq_without_eq\n+    clippy::derive_partial_eq_without_eq,\n+    clippy::too_many_arguments\n )]\n \n extern crate rustc_apfloat;"}, {"sha": "b2791a42856641ce3012672b81943b816801a340", "filename": "tests/pass/concurrency/linux-futex.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eedc78d216e16790505033f8d7244625fc3080d4/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eedc78d216e16790505033f8d7244625fc3080d4/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs?ref=eedc78d216e16790505033f8d7244625fc3080d4", "patch": "@@ -132,7 +132,7 @@ fn wait_wake() {\n \n     static FUTEX: i32 = 0;\n \n-    thread::spawn(move || {\n+    let t = thread::spawn(move || {\n         thread::sleep(Duration::from_millis(200));\n         unsafe {\n             assert_eq!(libc::syscall(\n@@ -155,14 +155,15 @@ fn wait_wake() {\n     }\n \n     assert!((200..1000).contains(&start.elapsed().as_millis()));\n+    t.join().unwrap();\n }\n \n fn wait_wake_bitset() {\n     let start = Instant::now();\n \n     static FUTEX: i32 = 0;\n \n-    thread::spawn(move || {\n+    let t = thread::spawn(move || {\n         thread::sleep(Duration::from_millis(200));\n         unsafe {\n             assert_eq!(libc::syscall(\n@@ -202,6 +203,7 @@ fn wait_wake_bitset() {\n     }\n \n     assert!((400..1000).contains(&start.elapsed().as_millis()));\n+    t.join().unwrap();\n }\n \n fn main() {"}]}