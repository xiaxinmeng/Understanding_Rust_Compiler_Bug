{"sha": "5115069ccd46e8ce18d177f8181e06f1ae14bb44", "node_id": "C_kwDOAAsO6NoAKDUxMTUwNjljY2Q0NmU4Y2UxOGQxNzdmODE4MWUwNmYxYWUxNGJiNDQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-24T17:31:32Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-15T17:50:33Z"}, "message": "Add some more instrumentation", "tree": {"sha": "de26cb16f456f6e6a1875bd888d1e32283cf2991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de26cb16f456f6e6a1875bd888d1e32283cf2991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5115069ccd46e8ce18d177f8181e06f1ae14bb44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5115069ccd46e8ce18d177f8181e06f1ae14bb44", "html_url": "https://github.com/rust-lang/rust/commit/5115069ccd46e8ce18d177f8181e06f1ae14bb44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5115069ccd46e8ce18d177f8181e06f1ae14bb44/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16868d90962681109664e8ea5faf43fa818ea883", "url": "https://api.github.com/repos/rust-lang/rust/commits/16868d90962681109664e8ea5faf43fa818ea883", "html_url": "https://github.com/rust-lang/rust/commit/16868d90962681109664e8ea5faf43fa818ea883"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "15f41c231e0da5c29af209a75985112c69906eda", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5115069ccd46e8ce18d177f8181e06f1ae14bb44/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5115069ccd46e8ce18d177f8181e06f1ae14bb44/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=5115069ccd46e8ce18d177f8181e06f1ae14bb44", "patch": "@@ -28,13 +28,13 @@ use std::fmt;\n /// iteration to find region values which satisfy all constraints,\n /// assuming such values can be found. It returns the final values of\n /// all the variables as well as a set of errors that must be reported.\n+#[instrument(level = \"debug\", skip(region_rels, var_infos, data))]\n pub fn resolve<'tcx>(\n     region_rels: &RegionRelations<'_, 'tcx>,\n     var_infos: VarInfos,\n     data: RegionConstraintData<'tcx>,\n     mode: RegionckMode,\n ) -> (LexicalRegionResolutions<'tcx>, Vec<RegionResolutionError<'tcx>>) {\n-    debug!(\"RegionConstraintData: resolve_regions()\");\n     let mut errors = vec![];\n     let mut resolver = LexicalResolver { region_rels, var_infos, data };\n     match mode {\n@@ -266,13 +266,14 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     ///\n     /// From that list, we look for a *minimal* option `'c_min`. If we\n     /// find one, then we can enforce that `'r: 'c_min`.\n+    #[instrument(level = \"debug\", skip(self, graph, member_constraint, var_values))]\n     fn enforce_member_constraint(\n         &self,\n         graph: &RegionGraph<'tcx>,\n         member_constraint: &MemberConstraint<'tcx>,\n         var_values: &mut LexicalRegionResolutions<'tcx>,\n     ) -> bool {\n-        debug!(\"enforce_member_constraint(member_constraint={:#?})\", member_constraint);\n+        debug!(\"member_constraint={:#?}\", member_constraint);\n \n         // The constraint is some inference variable (`vid`) which\n         // must be equal to one of the options.\n@@ -311,15 +312,15 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             Some(&r) => r,\n             None => return false,\n         };\n-        debug!(\"enforce_member_constraint: least_choice={:?}\", least_choice);\n+        debug!(?least_choice);\n         for &option in options {\n-            debug!(\"enforce_member_constraint: option={:?}\", option);\n+            debug!(?option);\n             if !self.sub_concrete_regions(least_choice, option) {\n                 if self.sub_concrete_regions(option, least_choice) {\n-                    debug!(\"enforce_member_constraint: new least choice\");\n+                    debug!(\"new least choice\");\n                     least_choice = option;\n                 } else {\n-                    debug!(\"enforce_member_constraint: no least choice\");\n+                    debug!(\"no least choice\");\n                     return false;\n                 }\n             }\n@@ -461,6 +462,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     }\n \n     /// True if `a <= b`, but not defined over inference variables.\n+    #[instrument(level = \"trace\", skip(self))]\n     fn sub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> bool {\n         let tcx = self.tcx();\n         let sub_free_regions = |r1, r2| self.region_rels.free_regions.sub_free_regions(tcx, r1, r2);\n@@ -492,6 +494,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     ///\n     /// Neither `a` nor `b` may be an inference variable (hence the\n     /// term \"concrete regions\").\n+    #[instrument(level = \"trace\", skip(self))]\n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n         let r = match (a, b) {\n             (&ReLateBound(..), _) | (_, &ReLateBound(..)) | (&ReErased, _) | (_, &ReErased) => {\n@@ -562,13 +565,14 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     /// After expansion is complete, go and check upper bounds (i.e.,\n     /// cases where the region cannot grow larger than a fixed point)\n     /// and check that they are satisfied.\n+    #[instrument(skip(self, var_data, errors))]\n     fn collect_errors(\n         &self,\n         var_data: &mut LexicalRegionResolutions<'tcx>,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n     ) {\n         for (constraint, origin) in &self.data.constraints {\n-            debug!(\"collect_errors: constraint={:?} origin={:?}\", constraint, origin);\n+            debug!(?constraint, ?origin);\n             match *constraint {\n                 Constraint::RegSubVar(..) | Constraint::VarSubVar(..) => {\n                     // Expansion will ensure that these constraints hold. Ignore.\n@@ -580,7 +584,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     }\n \n                     debug!(\n-                        \"collect_errors: region error at {:?}: \\\n+                        \"region error at {:?}: \\\n                          cannot verify that {:?} <= {:?}\",\n                         origin, sub, sup\n                     );\n@@ -606,7 +610,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // collect them later.\n                     if !self.sub_concrete_regions(a_region, b_region) {\n                         debug!(\n-                            \"collect_errors: region error at {:?}: \\\n+                            \"region error at {:?}: \\\n                             cannot verify that {:?}={:?} <= {:?}\",\n                             origin, a_vid, a_region, b_region\n                         );"}]}