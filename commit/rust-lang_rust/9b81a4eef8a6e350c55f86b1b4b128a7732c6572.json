{"sha": "9b81a4eef8a6e350c55f86b1b4b128a7732c6572", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODFhNGVlZjhhNmUzNTBjNTVmODZiMWI0YjEyOGE3NzMyYzY1NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T17:51:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T17:51:05Z"}, "message": "auto merge of #16811 : nick29581/rust/dst-bug-2, r=nikomatsakis\n\ncloses #16800 \r\nr? @nikomatsakis - I'm not 100% sure this is the right approach, it is kind of ad-hoc. The trouble is we don't have any intrinsic notion of which types are sized and which are not, we only have the Sized bound, so I have nothing to validate the Sized bound against.", "tree": {"sha": "ba2596c95e58bc8430685b46158f5e822e5a9608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba2596c95e58bc8430685b46158f5e822e5a9608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b81a4eef8a6e350c55f86b1b4b128a7732c6572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b81a4eef8a6e350c55f86b1b4b128a7732c6572", "html_url": "https://github.com/rust-lang/rust/commit/9b81a4eef8a6e350c55f86b1b4b128a7732c6572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b81a4eef8a6e350c55f86b1b4b128a7732c6572/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ac4a308101f561ec90f99c7eb405c01e2a30153", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac4a308101f561ec90f99c7eb405c01e2a30153", "html_url": "https://github.com/rust-lang/rust/commit/6ac4a308101f561ec90f99c7eb405c01e2a30153"}, {"sha": "cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38", "html_url": "https://github.com/rust-lang/rust/commit/cc598e6f8e3d7eb88b4f7867484a1a4d503efc38"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "5814b6b02fe382ee6e4225bd0c7777b5e958466b", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b81a4eef8a6e350c55f86b1b4b128a7732c6572/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b81a4eef8a6e350c55f86b1b4b128a7732c6572/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=9b81a4eef8a6e350c55f86b1b4b128a7732c6572", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use middle::freevars::freevar_entry;\n use middle::freevars;\n use middle::subst;\n@@ -587,15 +586,15 @@ fn check_ty(cx: &mut Context, aty: &Ty) {\n     match aty.node {\n         TyPath(_, _, id) => {\n             match cx.tcx.item_substs.borrow().find(&id) {\n-                None => { }\n+                None => {}\n                 Some(ref item_substs) => {\n                     let def_map = cx.tcx.def_map.borrow();\n                     let did = def_map.get_copy(&id).def_id();\n                     let generics = ty::lookup_item_type(cx.tcx, did).generics;\n                     for def in generics.types.iter() {\n                         let ty = *item_substs.substs.types.get(def.space,\n                                                                def.index);\n-                        check_typaram_bounds(cx, aty.span, ty, def)\n+                        check_typaram_bounds(cx, aty.span, ty, def);\n                     }\n                 }\n             }\n@@ -668,7 +667,7 @@ fn check_bounds_on_structs_or_enums_in_type_if_possible(cx: &mut Context,\n                                                   .zip(polytype.generics\n                                                                .types\n                                                                .iter()) {\n-                    check_typaram_bounds(cx, span, *ty, type_param_def)\n+                    check_typaram_bounds(cx, span, *ty, type_param_def);\n                 }\n \n                 // Check trait bounds."}, {"sha": "de598fcc671e1b878ff02d2eb05a19a1e6f1f8c6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b81a4eef8a6e350c55f86b1b4b128a7732c6572/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b81a4eef8a6e350c55f86b1b4b128a7732c6572/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9b81a4eef8a6e350c55f86b1b4b128a7732c6572", "patch": "@@ -2410,7 +2410,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_trait(box ty::TyTrait { bounds, .. }) => {\n-                object_contents(cx, bounds) | TC::ReachesFfiUnsafe\n+                object_contents(cx, bounds) | TC::ReachesFfiUnsafe | TC::Nonsized\n             }\n \n             ty_ptr(ref mt) => {"}, {"sha": "fb9a060cb602a75e66c7e43e867c8f1e162fe70b", "filename": "src/test/compile-fail/bad-sized.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9b81a4eef8a6e350c55f86b1b4b128a7732c6572/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b81a4eef8a6e350c55f86b1b4b128a7732c6572/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=9b81a4eef8a6e350c55f86b1b4b128a7732c6572", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+use std::cell::RefCell;\n+\n+trait Trait {}\n+\n+pub fn main() {\n+    let x: Vec<Trait + Sized> = Vec::new();\n+    //~^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    let x: Vec<Box<RefCell<Trait + Sized>>> = Vec::new();\n+    //~^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+}"}]}