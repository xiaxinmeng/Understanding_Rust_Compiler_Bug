{"sha": "ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjOWM0ZmRkZTc5MWRjM2E2YzA2MDAzMWUxOTk4ODNmN2VkOGVkMDE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-14T23:29:30Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-14T23:29:30Z"}, "message": "Merge remote branch 'upstream/master'", "tree": {"sha": "2560edf0f547f0b8622d12f427719679e07b03de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2560edf0f547f0b8622d12f427719679e07b03de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "html_url": "https://github.com/rust-lang/rust/commit/ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/comments", "author": null, "committer": null, "parents": [{"sha": "e6f87a75250088e248e56d81e5a384f7b4909210", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f87a75250088e248e56d81e5a384f7b4909210", "html_url": "https://github.com/rust-lang/rust/commit/e6f87a75250088e248e56d81e5a384f7b4909210"}, {"sha": "14258b87a72003428006122a7c2ed7914a95bfb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14258b87a72003428006122a7c2ed7914a95bfb2", "html_url": "https://github.com/rust-lang/rust/commit/14258b87a72003428006122a7c2ed7914a95bfb2"}], "stats": {"total": 97, "additions": 50, "deletions": 47}, "files": [{"sha": "cba884c04b356608fa16cd25fa834b65ba21bba8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -2274,6 +2274,31 @@ fn make_free_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n     rslt.bcx.build.RetVoid();\n }\n \n+fn maybe_free_ivec_heap_part(&@block_ctxt cx, ValueRef v0, ty::t unit_ty)\n+        -> result {\n+    auto llunitty = type_of_or_i8(cx, unit_ty);\n+\n+    auto stack_len = cx.build.Load(cx.build.InBoundsGEP(v0, [C_int(0),\n+        C_uint(abi::ivec_elt_len)]));\n+    auto maybe_on_heap_cx = new_sub_block_ctxt(cx, \"maybe_on_heap\");\n+    auto next_cx = new_sub_block_ctxt(cx, \"next\");\n+    auto maybe_on_heap = cx.build.ICmp(lib::llvm::LLVMIntEQ, stack_len,\n+                                       C_int(0));\n+    cx.build.CondBr(maybe_on_heap, maybe_on_heap_cx.llbb, next_cx.llbb);\n+\n+    // Might be on the heap. Load the heap pointer and free it. (It's ok to\n+    // free a null pointer.)\n+    auto stub_ptr = maybe_on_heap_cx.build.PointerCast(v0,\n+        T_ptr(T_ivec_heap(llunitty)));\n+    auto heap_ptr = maybe_on_heap_cx.build.Load(\n+        maybe_on_heap_cx.build.InBoundsGEP(stub_ptr,\n+            [C_int(0), C_uint(abi::ivec_heap_stub_elt_ptr)]));\n+    auto after_free_cx = trans_non_gc_free(maybe_on_heap_cx, heap_ptr).bcx;\n+    after_free_cx.build.Br(next_cx.llbb);\n+\n+    ret res(next_cx, C_nil());\n+}\n+\n fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     auto rslt;\n@@ -2286,6 +2311,11 @@ fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n             rslt = decr_refcnt_maybe_free(cx, v0, v0, t);\n         }\n \n+        case (ty::ty_ivec(?tm)) {\n+            rslt = iter_structural_ty(cx, v0, t, drop_ty);\n+            rslt = maybe_free_ivec_heap_part(rslt.bcx, v0, tm.ty);\n+        }\n+\n         case (ty::ty_box(_)) {\n             rslt = decr_refcnt_maybe_free(cx, v0, v0, t);\n         }\n@@ -5885,7 +5915,7 @@ fn trans_ivec(@block_ctxt bcx, &vec[@ast::expr] args, &ast::ann ann)\n             llfirsteltptr = C_null(T_ptr(llunitty));\n         } else {\n             auto llheapsz = bcx.build.Add(llsize_of(llheapty), lllen);\n-            rslt = trans_raw_malloc(bcx, llheapty, llheapsz);\n+            rslt = trans_raw_malloc(bcx, T_ptr(llheapty), llheapsz);\n             bcx = rslt.bcx;\n             auto llheapptr = rslt.val;\n "}, {"sha": "6a7d305fa23725a782b8ff59dfeb5abc7a4bd41a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -527,7 +527,17 @@ mod collect {\n     fn ty_of_arg(@ctxt cx, &ast::arg a) -> ty::arg {\n         auto ty_mode = ast_mode_to_mode(a.mode);\n         auto f = bind getter(cx, _);\n-        ret rec(mode=ty_mode, ty=ast_ty_to_ty(cx.tcx, f, a.ty));\n+        auto tt = ast_ty_to_ty(cx.tcx, f, a.ty);\n+        if (ty::type_has_dynamic_size(cx.tcx, tt)) {\n+            alt (ty_mode) {\n+                case (mo_val) {\n+                    cx.tcx.sess.span_err(a.ty.span,\n+                      \"Dynamically sized arguments must be passed by alias\");\n+                }\n+                case (_) { }\n+            }\n+        }\n+        ret rec(mode=ty_mode, ty=tt);\n     }\n \n     fn ty_of_method(@ctxt cx, &@ast::method m) -> ty::method {"}, {"sha": "b4f156c76347a4d0dcbd5f77df4b82f37eb37b95", "filename": "src/test/compile-fail/aliasness-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Faliasness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Faliasness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faliasness-mismatch.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,6 +1,4 @@\n // -*- rust -*-\n-// xfail-stage0\n-\n // error-pattern: mismatched types\n \n fn f(&int x) { log_err x; }"}, {"sha": "b3264ab33331bc4d515a04f57e34d4dbfefb3322", "filename": "src/test/compile-fail/bad-bang-ann-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,5 +1,4 @@\n // -*- rust -*-\n-// xfail-stage0\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n "}, {"sha": "b0701321272b1faba2093c799a940b6c28bd314a", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,5 +1,4 @@\n // -*- rust -*-\n-// xfail-stage0\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n "}, {"sha": "77c6a41276971389aa059773cbb4cb3067d71da7", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,5 +1,4 @@\n // -*- rust -*-\n-// xfail-stage0\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: may return to the caller\n "}, {"sha": "e8123f24d5ca018923abd9c4d74f774625db0dc9", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern: unresolved name: a\n \n mod m1 {"}, {"sha": "111d118a0ee0bfe12f03075826139a6bd3450020", "filename": "src/test/compile-fail/bad-module.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-module.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern: unresolved import: vec\n import vec;\n "}, {"sha": "a53b8284d59e242726ffd748db757bcfa86779e4", "filename": "src/test/compile-fail/bad-name.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-name.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,7 +1,3 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-\n // error-pattern: expecting\n \n fn main() {"}, {"sha": "ccc58f1849e8338a9308a065255e711a1c0768ba", "filename": "src/test/compile-fail/constructor-as-cast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fconstructor-as-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fconstructor-as-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconstructor-as-cast.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,7 +1,4 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-// error-pattern: non-type context\n+// error-pattern: unresolved name: base\n type base =\n   obj {\n     fn foo();"}, {"sha": "3dd8fe0b62b3ce9fb77928515387e3e921af24dd", "filename": "src/test/compile-fail/direct-obj-fn-call.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,8 +1,4 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-\n-// error-pattern: is not a mod\n+// error-pattern: base type for expr_field\n \n obj x() {\n   fn hello() {"}, {"sha": "ef7115de02a990e0b5285f82f2f60a52382499b5", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,7 +1,4 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-// error-pattern: does nothing\n+// error-pattern: unresolved name: this_does_nothing_what_the\n fn main() {\n   log \"doing\";\n   this_does_nothing_what_the;"}, {"sha": "c7650aa071c80e0e3d16ba35b6ad44b420268e7d", "filename": "src/test/compile-fail/duplicate-name.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fduplicate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fduplicate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-name.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,5 +1,3 @@\n-// xfail-stage0\n-\n // error-pattern: duplicate value name: x\n \n fn main() {"}, {"sha": "dce1fb02d1c660189ed7ff19d5940123464d2225", "filename": "src/test/compile-fail/export-import.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fexport-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-import.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern: unresolved import\n \n import m::unexported;"}, {"sha": "b3bdf231c9e1ec90c7301a2939a9836ca76af1d0", "filename": "src/test/compile-fail/extfmt-no-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern:format string\n \n fn main() {"}, {"sha": "2dc8cacc4b2fcb2791172a5d1e8ab384f972a38f", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -12,7 +12,7 @@ fn bitv_to_str(fn_info enclosing, bitv::t v) -> str {\n   // error is that the value type in the hash map is var_info, not a tuple\n   for each (@tup(uint, tup(uint, uint)) p in enclosing.vars.items()) {\n     if (bitv::get(v, p._1._0)) {\n-      s += \"foo\"; // \" \" + p._1._1 + \" \" + \"[\" + p._0 + \"]\";\n+      s += \"foo\";\n     }\n   }\n   ret s;"}, {"sha": "66c706c1cc1a78687cc194a71e2e560d770c2fee", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern: unresolved import: baz\n import zed::bar;\n import zed::baz;"}, {"sha": "bdad6876e8a965bd0b358f274aee7e9a82a76d0d", "filename": "src/test/compile-fail/import3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport3.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern: unresolved modulename\n import main::bar;\n "}, {"sha": "418fdb396a8fd17fe985e41c1c515c7c39620d93", "filename": "src/test/compile-fail/infinite-vec-type-recursion.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,9 +1,6 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n // -*- rust -*-\n-\n-// error-pattern: infinite recursive type definition\n+// xfail-stage0\n+// error-pattern: illegal recursive type\n \n type x = vec[x];\n "}, {"sha": "759747e10089e3f767c6751791d4a1bd2a032782", "filename": "src/test/compile-fail/item-name-overload.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fitem-name-overload.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,9 +1,6 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n // -*- rust -*-\n-\n-// error-pattern: name\n+// xfail-stage0\n+// error-pattern: Dynamically sized arguments must be passed by alias\n \n mod foo {\n   fn bar[T](T f) -> int { ret 17; }"}, {"sha": "34fb4105b8e00620331b3e85c00149e7a50cd372", "filename": "src/test/compile-fail/missing-return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fmissing-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fmissing-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-return.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern: return\n \n fn f() -> int {"}, {"sha": "2788f4c16fc0e8fa860ac9c6aa31d1d1e107cc09", "filename": "src/test/compile-fail/missing-return2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,4 +1,3 @@\n-// xfail-stage0\n // error-pattern: return\n \n fn f() -> int {"}, {"sha": "cc61922f63ae929f270f1844c8163670e48efd1d", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec9c4fdde791dc3a6c060031e199883f7ed8ed01/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "patch": "@@ -1,5 +1,3 @@\n-// xfail-stage0\n-\n // error-pattern:cannot determine a type\n fn main() -> () {\n   auto foo = [];"}]}