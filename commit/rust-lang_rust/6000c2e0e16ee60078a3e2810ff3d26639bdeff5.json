{"sha": "6000c2e0e16ee60078a3e2810ff3d26639bdeff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDBjMmUwZTE2ZWU2MDA3OGEzZTI4MTBmZjNkMjY2MzliZGVmZjU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-11-30T21:49:43Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-11-30T21:49:43Z"}, "message": "Use visit_local to find 2PB activations", "tree": {"sha": "9612b51ee057f74f2694f31b33bfdf3529fe9369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9612b51ee057f74f2694f31b33bfdf3529fe9369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6000c2e0e16ee60078a3e2810ff3d26639bdeff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6000c2e0e16ee60078a3e2810ff3d26639bdeff5", "html_url": "https://github.com/rust-lang/rust/commit/6000c2e0e16ee60078a3e2810ff3d26639bdeff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6000c2e0e16ee60078a3e2810ff3d26639bdeff5/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5b8eace152601d20ac7d4aa3b9c9de0f45dd62", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5b8eace152601d20ac7d4aa3b9c9de0f45dd62", "html_url": "https://github.com/rust-lang/rust/commit/4f5b8eace152601d20ac7d4aa3b9c9de0f45dd62"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "947c32df0f6a3eb5d74726156a1937f2fa2ce5b3", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/6000c2e0e16ee60078a3e2810ff3d26639bdeff5/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6000c2e0e16ee60078a3e2810ff3d26639bdeff5/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=6000c2e0e16ee60078a3e2810ff3d26639bdeff5", "patch": "@@ -230,68 +230,68 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n         self.super_assign(block, assigned_place, rvalue, location)\n     }\n \n-    fn visit_place(\n+    fn visit_local(\n         &mut self,\n-        place: &mir::Place<'tcx>,\n+        temp: &Local,\n         context: PlaceContext<'tcx>,\n         location: Location,\n     ) {\n-        self.super_place(place, context, location);\n-\n-        // We found a use of some temporary TEMP...\n-        if let Place::Local(temp) = place {\n-            // ... check whether we (earlier) saw a 2-phase borrow like\n-            //\n-            //     TMP = &mut place\n-            if let Some(&borrow_index) = self.pending_activations.get(temp) {\n-                let borrow_data = &mut self.idx_vec[borrow_index];\n-\n-                // Watch out: the use of TMP in the borrow itself\n-                // doesn't count as an activation. =)\n-                if borrow_data.reserve_location == location &&\n-                    context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n-                {\n-                    return;\n-                }\n+        if !context.is_use() {\n+            return;\n+        }\n \n-                if let TwoPhaseActivation::ActivatedAt(other_location) =\n-                        borrow_data.activation_location {\n-                    span_bug!(\n-                        self.mir.source_info(location).span,\n-                        \"found two uses for 2-phase borrow temporary {:?}: \\\n-                         {:?} and {:?}\",\n-                        temp,\n-                        location,\n-                        other_location,\n-                    );\n-                }\n+        // We found a use of some temporary TMP\n+        // check whether we (earlier) saw a 2-phase borrow like\n+        //\n+        //     TMP = &mut place\n+        if let Some(&borrow_index) = self.pending_activations.get(temp) {\n+            let borrow_data = &mut self.idx_vec[borrow_index];\n \n-                // Otherwise, this is the unique later use\n-                // that we expect.\n-                borrow_data.activation_location = match context {\n-                    // The use of TMP in a shared borrow does not\n-                    // count as an actual activation.\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) =>\n-                        TwoPhaseActivation::NotActivated,\n-                    _ => {\n-                        // Double check: This borrow is indeed a two-phase borrow (that is,\n-                        // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n-                        // we've not found any other activations (checked above).\n-                        assert_eq!(\n-                            borrow_data.activation_location,\n-                            TwoPhaseActivation::NotActivated,\n-                            \"never found an activation for this borrow!\",\n-                        );\n-\n-                        self.activation_map\n-                            .entry(location)\n-                            .or_default()\n-                            .push(borrow_index);\n-                        TwoPhaseActivation::ActivatedAt(location)\n-                    }\n-                };\n+            // Watch out: the use of TMP in the borrow itself\n+            // doesn't count as an activation. =)\n+            if borrow_data.reserve_location == location &&\n+                context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n+            {\n+                return;\n             }\n+\n+            if let TwoPhaseActivation::ActivatedAt(other_location) =\n+                    borrow_data.activation_location {\n+                span_bug!(\n+                    self.mir.source_info(location).span,\n+                    \"found two uses for 2-phase borrow temporary {:?}: \\\n+                     {:?} and {:?}\",\n+                    temp,\n+                    location,\n+                    other_location,\n+                );\n+            }\n+\n+            // Otherwise, this is the unique later use\n+            // that we expect.\n+            borrow_data.activation_location = match context {\n+                // The use of TMP in a shared borrow does not\n+                // count as an actual activation.\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) =>\n+                    TwoPhaseActivation::NotActivated,\n+                _ => {\n+                    // Double check: This borrow is indeed a two-phase borrow (that is,\n+                    // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n+                    // we've not found any other activations (checked above).\n+                    assert_eq!(\n+                        borrow_data.activation_location,\n+                        TwoPhaseActivation::NotActivated,\n+                        \"never found an activation for this borrow!\",\n+                    );\n+\n+                    self.activation_map\n+                        .entry(location)\n+                        .or_default()\n+                        .push(borrow_index);\n+                    TwoPhaseActivation::ActivatedAt(location)\n+                }\n+            };\n         }\n     }\n "}]}