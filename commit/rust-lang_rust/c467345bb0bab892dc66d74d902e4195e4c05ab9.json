{"sha": "c467345bb0bab892dc66d74d902e4195e4c05ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NjczNDViYjBiYWI4OTJkYzY2ZDc0ZDkwMmU0MTk1ZTRjMDVhYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-11T22:07:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-11T22:07:25Z"}, "message": "Auto merge of #1571 - lzutao:actions, r=RalfJung\n\nAdding a working github actions template\n\nComplete adding github actions whose dummy template added in #1563 .\n\nBut it will need https://github.com/rust-lang/rust-central-station/pull/939 merged first\nto be able to gate bors on Actions CI checks.", "tree": {"sha": "e7a34fb6cc12bbfa006f097cc06c6077eb057682", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a34fb6cc12bbfa006f097cc06c6077eb057682"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c467345bb0bab892dc66d74d902e4195e4c05ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c467345bb0bab892dc66d74d902e4195e4c05ab9", "html_url": "https://github.com/rust-lang/rust/commit/c467345bb0bab892dc66d74d902e4195e4c05ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c467345bb0bab892dc66d74d902e4195e4c05ab9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098bc8b71a6ad1342069063727f49f336919867a", "url": "https://api.github.com/repos/rust-lang/rust/commits/098bc8b71a6ad1342069063727f49f336919867a", "html_url": "https://github.com/rust-lang/rust/commit/098bc8b71a6ad1342069063727f49f336919867a"}, {"sha": "6acde94931c5a7ac0f8b2abb38a91139d89c0675", "url": "https://api.github.com/repos/rust-lang/rust/commits/6acde94931c5a7ac0f8b2abb38a91139d89c0675", "html_url": "https://github.com/rust-lang/rust/commit/6acde94931c5a7ac0f8b2abb38a91139d89c0675"}], "stats": {"total": 130, "additions": 105, "deletions": 25}, "files": [{"sha": "82c668f0e75d7a5efad441b3a8fc505920809efb", "filename": ".appveyor.yml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c467345bb0bab892dc66d74d902e4195e4c05ab9/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c467345bb0bab892dc66d74d902e4195e4c05ab9/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=c467345bb0bab892dc66d74d902e4195e4c05ab9", "patch": "@@ -3,7 +3,7 @@ environment:\n   global:\n     PROJECT_NAME: miri\n   matrix:\n-    - TARGET: i686-pc-windows-msvc\n+    - HOST_TARGET: i686-pc-windows-msvc\n matrix:\n   fast_finish: true # Immediately finish build once one of the jobs fails.\n cache:\n@@ -23,7 +23,7 @@ install:\n # Install Rust. We use the \"stable\" toolchain for better caching, it is just used to build `rustup-toolchain-install-master`.\n # But we also need to take into account that the build cache might have a different, outdated default.\n - curl -sSf --retry 3 -o rustup-init.exe https://win.rustup.rs/\n-- rustup-init.exe -y --default-host %TARGET% --default-toolchain none --profile minimal\n+- rustup-init.exe -y --default-host %HOST_TARGET% --default-toolchain none --profile minimal\n - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n - rustup default stable\n - rustup toolchain uninstall beta nightly\n@@ -36,7 +36,8 @@ install:\n - cargo --version\n \n test_script:\n-- set PYTHON=C:\\msys64\\mingw64\\bin\\python3.exe\n+# Add python3 path: https://www.appveyor.com/docs/windows-images-software/#python\n+- set PATH=C:\\Python35-x64;%PATH%\n - bash ci.sh\n \n after_test:"}, {"sha": "b5ef3d861eadc5de8883101fb755d56845438e3b", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c467345bb0bab892dc66d74d902e4195e4c05ab9/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c467345bb0bab892dc66d74d902e4195e4c05ab9/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=c467345bb0bab892dc66d74d902e4195e4c05ab9", "patch": "@@ -11,13 +11,14 @@ on:\n       - 'master'\n   schedule:\n     # Use <https://crontab.guru> to conveniently edit cron schedule.\n-    - cron: \"0 7 * * *\" # At 07:00 UTC every day.\n+    - cron: '0 7 * * *' # At 07:00 UTC every day.\n \n jobs:\n   build:\n     runs-on: ${{ matrix.os }}\n     env:\n       RUST_BACKTRACE: 1\n+      HOST_TARGET: ${{ matrix.host_target }}\n     strategy:\n       matrix:\n         build: [linux64, macos, win32]\n@@ -34,6 +35,63 @@ jobs:\n     steps:\n       - uses: actions/checkout@v2\n \n+      # We install gnu-tar because BSD tar is buggy on macOS builders of GHA.\n+      # See <https://github.com/actions/cache/issues/403>.\n+      - name: Install GNU tar\n+        if: runner.os == 'macOS'\n+        run: |\n+          brew install gnu-tar\n+          echo \"/usr/local/opt/gnu-tar/libexec/gnubin\" >> $GITHUB_PATH\n+\n+      # Cache the global cargo directory, but NOT the local `target` directory which\n+      # we cannot reuse anyway when the nightly changes (and it grows quite large\n+      # over time).\n+      - name: Add cache for cargo\n+        uses: actions/cache@v2\n+        with:\n+          path: |\n+            # Taken from <https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci>.\n+            ~/.cargo/bin\n+            ~/.cargo/registry/index\n+            ~/.cargo/registry/cache\n+            ~/.cargo/git/db\n+            # contains package information of crates installed via `cargo install`.\n+            ~/.cargo/.crates.toml\n+          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n+          restore-keys: ${{ runner.os }}-cargo\n+\n+      - name: Install rustup-toolchain-install-master and xargo\n+        run: |\n+          cargo install rustup-toolchain-install-master\n+          cargo install xargo\n+        shell: bash\n+\n+      - name: Install \"master\" toolchain\n+        run: |\n+          if [[ ${{ github.event_name }} == 'schedule' ]]; then\n+            RUSTC_HASH=$(git ls-remote https://github.com/rust-lang/rust.git master | awk '{print $1}')\n+          else\n+            RUSTC_HASH=$(< rust-version)\n+          fi\n+          rustup-toolchain-install-master \\\n+            -f \\\n+            -n master \"$RUSTC_HASH\" \\\n+            -c rust-src \\\n+            -c rustc-dev \\\n+            -c llvm-tools \\\n+            --host ${{ matrix.host_target }}\n+          rustup default master\n+        shell: bash\n+\n+      - name: Show Rust version\n+        run: |\n+          rustup show\n+          rustc -Vv\n+          cargo -V\n+\n+      - name: Test\n+        run: bash ./ci.sh\n+\n   # These jobs doesn't actually test anything, but they're only used to tell\n   # bors the build completed, as there is no practical way to detect when a\n   # workflow is successful listening to webhooks only."}, {"sha": "86dcf78435b2b66ff5eaaf85c91d261d94a24eea", "filename": ".travis.yml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c467345bb0bab892dc66d74d902e4195e4c05ab9/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c467345bb0bab892dc66d74d902e4195e4c05ab9/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=c467345bb0bab892dc66d74d902e4195e4c05ab9", "patch": "@@ -1,7 +1,10 @@\n language: generic\n-os:\n-- linux\n-- osx\n+jobs:\n+  include:\n+  - os: linux\n+    env: HOST_TARGET=x86_64-unknown-linux-gnu\n+  - os: osx\n+    env: HOST_TARGET=x86_64-apple-darwin\n dist: xenial\n cache:\n   # Cache the global cargo directory, but NOT the local `target` directory which"}, {"sha": "e5efa05c389dc2805a4433c621ef67e9546a3c1a", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c467345bb0bab892dc66d74d902e4195e4c05ab9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c467345bb0bab892dc66d74d902e4195e4c05ab9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c467345bb0bab892dc66d74d902e4195e4c05ab9", "patch": "@@ -1,5 +1,11 @@\n-# Miri [![Build Status](https://travis-ci.com/rust-lang/miri.svg?branch=master)](https://travis-ci.com/rust-lang/miri) [![Windows build status](https://ci.appveyor.com/api/projects/status/github/rust-lang/miri?svg=true)](https://ci.appveyor.com/project/rust-lang-libs/miri)\n+# Miri\n \n+[![Actions build status][actions-badge]][actions-url]\n+[![Travis build status](https://travis-ci.com/rust-lang/miri.svg?branch=master)](https://travis-ci.com/rust-lang/miri)\n+[![Appveyor Windows build status](https://ci.appveyor.com/api/projects/status/github/rust-lang/miri?svg=true)](https://ci.appveyor.com/project/rust-lang-libs/miri)\n+\n+[actions-badge]: https://github.com/rust-lang/miri/workflows/CI/badge.svg?branch=master\n+[actions-url]: https://github.com/rust-lang/miri/actions\n \n An experimental interpreter for [Rust][rust]'s\n [mid-level intermediate representation][mir] (MIR).  It can run binaries and"}, {"sha": "17bc8df83e182eacab02b1ec63d16fb1177fbf5a", "filename": "ci.sh", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c467345bb0bab892dc66d74d902e4195e4c05ab9/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c467345bb0bab892dc66d74d902e4195e4c05ab9/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=c467345bb0bab892dc66d74d902e4195e4c05ab9", "patch": "@@ -23,31 +23,43 @@ function run_tests {\n   fi\n \n   ./miri test --locked\n-  if ! [ -n \"${MIRI_TEST_TARGET+exists}\" ]; then\n+  if [ -z \"${MIRI_TEST_TARGET+exists}\" ]; then\n     # Only for host architecture: tests with MIR optimizations\n     MIRIFLAGS=\"-Z mir-opt-level=3\" ./miri test --locked\n   fi\n+\n+  # On Windows, there is always \"python\", not \"python3\" or \"python2\".\n+  if command -v python3 > /dev/null; then\n+    PYTHON=python3\n+  else\n+    PYTHON=python\n+  fi\n+\n   # \"miri test\" has built the sysroot for us, now this should pass without\n   # any interactive questions.\n-  ${PYTHON:-python3} test-cargo-miri/run-test.py\n-\n+  ${PYTHON} test-cargo-miri/run-test.py\n   echo\n }\n \n # host\n run_tests\n \n-if [ \"${TRAVIS_OS_NAME:-}\" == linux ]; then\n-  MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n-  MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n-  MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n-elif [ \"${TRAVIS_OS_NAME:-}\" == osx ]; then\n-  MIRI_TEST_TARGET=mips64-unknown-linux-gnuabi64 run_tests # big-endian architecture\n-  MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n-elif [ \"${CI_WINDOWS:-}\" == True ]; then\n-  MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n-  MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n-else\n-  echo \"FATAL: unknown CI platform\"\n-  exit 1\n-fi\n+case $HOST_TARGET in\n+  x86_64-unknown-linux-gnu)\n+    MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n+    MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n+    MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n+    ;;\n+  x86_64-apple-darwin)\n+    MIRI_TEST_TARGET=mips64-unknown-linux-gnuabi64 run_tests # big-endian architecture\n+    MIRI_TEST_TARGET=x86_64-pc-windows-msvc run_tests\n+    ;;\n+  i686-pc-windows-msvc)\n+    MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n+    MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n+    ;;\n+  *)\n+    echo \"FATAL: unknown OS\"\n+    exit 1\n+    ;;\n+esac"}]}