{"sha": "d9d1f2376f9e2f092e6a01cd14235bdc0c129706", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZDFmMjM3NmY5ZTJmMDkyZTZhMDFjZDE0MjM1YmRjMGMxMjk3MDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T12:17:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-16T05:55:01Z"}, "message": "improve lower_pat_slice docs + while -> for", "tree": {"sha": "ee790f1dd53777ef903e13c39c63f5570ee98711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee790f1dd53777ef903e13c39c63f5570ee98711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9d1f2376f9e2f092e6a01cd14235bdc0c129706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d1f2376f9e2f092e6a01cd14235bdc0c129706", "html_url": "https://github.com/rust-lang/rust/commit/d9d1f2376f9e2f092e6a01cd14235bdc0c129706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9d1f2376f9e2f092e6a01cd14235bdc0c129706/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66bb978ab65f7c7e1d6c39e275baf8eb22b1a04d", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bb978ab65f7c7e1d6c39e275baf8eb22b1a04d", "html_url": "https://github.com/rust-lang/rust/commit/66bb978ab65f7c7e1d6c39e275baf8eb22b1a04d"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "ec9d6802defa305df11e09a920f8875e6bf90b64", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d9d1f2376f9e2f092e6a01cd14235bdc0c129706/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9d1f2376f9e2f092e6a01cd14235bdc0c129706/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d9d1f2376f9e2f092e6a01cd14235bdc0c129706", "patch": "@@ -2852,19 +2852,23 @@ impl<'a> LoweringContext<'a> {\n         let mut rest = None;\n \n         let mut iter = pats.iter().enumerate();\n-        while let Some((idx, pat)) = iter.next() {\n-            // Interpret the first `..` pattern as a subtuple pattern.\n+        for (idx, pat) in iter.by_ref() {\n+            // Interpret the first `..` pattern as a sub-tuple pattern.\n+            // Note that unlike for slice patterns,\n+            // where `xs @ ..` is a legal sub-slice pattern,\n+            // it is not a legal sub-tuple pattern.\n             if pat.is_rest() {\n                 rest = Some((idx, pat.span));\n                 break;\n             }\n-            // It was not a subslice pattern so lower it normally.\n+            // It was not a sub-tuple pattern so lower it normally.\n             elems.push(self.lower_pat(pat));\n         }\n \n-        while let Some((_, pat)) = iter.next() {\n-            // There was a previous subtuple pattern; make sure we don't allow more.\n+        for (_, pat) in iter {\n+            // There was a previous sub-tuple pattern; make sure we don't allow more...\n             if pat.is_rest() {\n+                // ...but there was one again, so error.\n                 self.ban_extra_rest_pat(pat.span, rest.unwrap().1, ctx);\n             } else {\n                 elems.push(self.lower_pat(pat));\n@@ -2874,36 +2878,44 @@ impl<'a> LoweringContext<'a> {\n         (elems.into(), rest.map(|(ddpos, _)| ddpos))\n     }\n \n+    /// Lower a slice pattern of form `[pat_0, ..., pat_n]` into\n+    /// `hir::PatKind::Slice(before, slice, after)`.\n+    ///\n+    /// When encountering `($binding_mode $ident @)? ..` (`slice`),\n+    /// this is interpreted as a sub-slice pattern semantically.\n+    /// Patterns that follow, which are not like `slice` -- or an error occurs, are in `after`.\n     fn lower_pat_slice(&mut self, pats: &[AstP<Pat>]) -> hir::PatKind {\n         let mut before = Vec::new();\n         let mut after = Vec::new();\n         let mut slice = None;\n         let mut prev_rest_span = None;\n \n         let mut iter = pats.iter();\n-        while let Some(pat) = iter.next() {\n-            // Interpret the first `((ref mut?)? x @)? ..` pattern as a subslice pattern.\n+        // Lower all the patterns until the first occurence of a sub-slice pattern.\n+        for pat in iter.by_ref() {\n             match pat.kind {\n+                // Found a sub-slice pattern `..`. Record, lower it to `_`, and stop here.\n                 PatKind::Rest => {\n                     prev_rest_span = Some(pat.span);\n                     slice = Some(self.pat_wild_with_node_id_of(pat));\n                     break;\n                 },\n+                // Found a sub-slice pattern `$binding_mode $ident @ ..`.\n+                // Record, lower it to `$binding_mode $ident @ _`, and stop here.\n                 PatKind::Ident(ref bm, ident, Some(ref sub)) if sub.is_rest() => {\n                     prev_rest_span = Some(sub.span);\n                     let lower_sub = |this: &mut Self| Some(this.pat_wild_with_node_id_of(sub));\n                     let node = self.lower_pat_ident(pat, bm, ident, lower_sub);\n                     slice = Some(self.pat_with_node_id_of(pat, node));\n                     break;\n                 },\n-                _ => {}\n+                // It was not a subslice pattern so lower it normally.\n+                _ => before.push(self.lower_pat(pat)),\n             }\n-\n-            // It was not a subslice pattern so lower it normally.\n-            before.push(self.lower_pat(pat));\n         }\n \n-        while let Some(pat) = iter.next() {\n+        // Lower all the patterns after the first sub-slice pattern.\n+        for pat in iter {\n             // There was a previous subslice pattern; make sure we don't allow more.\n             let rest_span = match pat.kind {\n                 PatKind::Rest => Some(pat.span),\n@@ -2915,8 +2927,10 @@ impl<'a> LoweringContext<'a> {\n                 _ => None,\n             };\n             if let Some(rest_span) = rest_span {\n+                // We have e.g., `[a, .., b, ..]`. That's no good, error!\n                 self.ban_extra_rest_pat(rest_span, prev_rest_span.unwrap(), \"slice\");\n             } else {\n+                // Lower the pattern normally.\n                 after.push(self.lower_pat(pat));\n             }\n         }"}]}