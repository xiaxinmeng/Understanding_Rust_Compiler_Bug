{"sha": "ccbb0f5c1a1100b271f9945add665c692a2bf230", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYmIwZjVjMWExMTAwYjI3MWY5OTQ1YWRkNjY1YzY5MmEyYmYyMzA=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-30T02:00:14Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-30T02:00:14Z"}, "message": "Add support for stable-const-since in docs on items (standalone or assoc)", "tree": {"sha": "c145ed354ee84b10d6231293cc42390343a841e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c145ed354ee84b10d6231293cc42390343a841e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccbb0f5c1a1100b271f9945add665c692a2bf230", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAl/EUi8ACgkQfsyTL4ss\ncx4XwBAAwhOnQJdQSBKPF3QckG9J5ra4CLV41rmr7RZ4Djn0IThS6oWrxNIg1oUZ\n2Xg0/IE3vxhXUDOagRM17UgkW0ILTqAU7mPx9ckm62EOjJDCO1t4mQYN8rtbuM9d\nZMGrlBnzHRbKN5BMWkV5F2zRCHQNtg8tJpLYyoodq1ymE8/RWKvnpG6zvCKcnUta\n2WwS5OA7PZ2+c6Dd3pHypXZLKW2CMxIxmPRBwFNLeuGe/JbLRkhnXzIHwHYAB4TB\n5kJJ4xWYBsTnVwyPk8uE8H4w0gy5+DrN13oYufkHCULJS0tXZrkQca74fszFbTLG\nzgfoy6wrYLxS1p2ASvQ3BfZshcj6QkHges1SjEMVIZZCfcjRCeKuuAipjGjjEUvL\nCkxj3eJVo7Z6/JqAbNiLr8V00ElZaFBYawvN0VUGaHebJNCoNGYTuiboMBQNEkVF\nbxwCC6y8+zCCuTFGC1Mn0AbMRvPCsOWVpy+FIeOiB4wMH8Olyf4wMzKaF+sB2idZ\n0oE02/NyldWfVG/7igSdCI223TIMvhevbIy+QPR64JhrSRr/Xt2a1hNTdxxf1ahR\nM/Mrs1+JCC4MgJI8sqogpSmJjK+23q0U+4pxGUYbAUQABmUDFcan2QQ0dE1pv+Hz\nNqGYyDWrFmOMdVP5NXuUXiXIYAfPqgTLL9kMc5h23uIZ5LONI7U=\n=S70l\n-----END PGP SIGNATURE-----", "payload": "tree c145ed354ee84b10d6231293cc42390343a841e7\nparent b776d1c3e3db8befabb123ebb1e46c3531eaed46\nauthor Rune Tynan <runetynan@gmail.com> 1606701614 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1606701614 -0500\n\nAdd support for stable-const-since in docs on items (standalone or assoc)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbb0f5c1a1100b271f9945add665c692a2bf230", "html_url": "https://github.com/rust-lang/rust/commit/ccbb0f5c1a1100b271f9945add665c692a2bf230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccbb0f5c1a1100b271f9945add665c692a2bf230/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b776d1c3e3db8befabb123ebb1e46c3531eaed46", "url": "https://api.github.com/repos/rust-lang/rust/commits/b776d1c3e3db8befabb123ebb1e46c3531eaed46", "html_url": "https://github.com/rust-lang/rust/commit/b776d1c3e3db8befabb123ebb1e46c3531eaed46"}], "stats": {"total": 117, "additions": 99, "deletions": 18}, "files": [{"sha": "8feef9c259c1396dd9027b5605d3d003e1abbf9f", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ccbb0f5c1a1100b271f9945add665c692a2bf230", "patch": "@@ -124,6 +124,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: self.cx.next_def_id(param_env_def_id.krate),\n                     stability: None,\n+                    const_stability: None,\n                     deprecation: None,\n                     kind: ImplItem(Impl {\n                         unsafety: hir::Unsafety::Normal,"}, {"sha": "33b5e84c5e07432c8f8cff3900ec424eafef55ff", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ccbb0f5c1a1100b271f9945add665c692a2bf230", "patch": "@@ -113,6 +113,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: self.cx.next_def_id(impl_def_id.krate),\n                     stability: None,\n+                    const_stability: None,\n                     deprecation: None,\n                     kind: ImplItem(Impl {\n                         unsafety: hir::Unsafety::Normal,"}, {"sha": "f3067360f0680a209fba82bac644a56e719fdbc6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ccbb0f5c1a1100b271f9945add665c692a2bf230", "patch": "@@ -483,6 +483,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         def_id: DefId::local(CRATE_DEF_INDEX),\n                         visibility: clean::Public,\n                         stability: None,\n+                        const_stability: None,\n                         deprecation: None,\n                         kind: clean::ImportItem(clean::Import::new_simple(\n                             item.ident.to_string(),"}, {"sha": "a9e433bf45842c86718ecc1825cebaa8842b3746", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ccbb0f5c1a1100b271f9945add665c692a2bf230", "patch": "@@ -2189,6 +2189,7 @@ fn clean_extern_crate(\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n         stability: None,\n+        const_stability: None,\n         deprecation: None,\n         kind: ExternCrateItem(name.clean(cx), path),\n     }]\n@@ -2259,6 +2260,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n                         visibility: self.vis.clean(cx),\n                         stability: None,\n+                        const_stability: None,\n                         deprecation: None,\n                         kind: ImportItem(Import::new_simple(\n                             self.name.clean(cx),\n@@ -2279,6 +2281,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             def_id: DefId::local(CRATE_DEF_INDEX),\n             visibility: self.vis.clean(cx),\n             stability: None,\n+            const_stability: None,\n             deprecation: None,\n             kind: ImportItem(inner),\n         }]"}, {"sha": "38d25d8d98e8560b5003c532e1b419611bca4f51", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ccbb0f5c1a1100b271f9945add665c692a2bf230", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast::{self as ast, AttrStyle};\n use rustc_ast::{FloatTy, IntTy, UintTy};\n-use rustc_attr::{Stability, StabilityLevel};\n+use rustc_attr::{ConstStability, Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n@@ -87,6 +87,7 @@ crate struct Item {\n     crate def_id: DefId,\n     crate stability: Option<Stability>,\n     crate deprecation: Option<Deprecation>,\n+    crate const_stability: Option<ConstStability>,\n }\n \n impl fmt::Debug for Item {\n@@ -155,6 +156,7 @@ impl Item {\n             visibility: cx.tcx.visibility(def_id).clean(cx),\n             stability: cx.tcx.lookup_stability(def_id).cloned(),\n             deprecation: cx.tcx.lookup_deprecation(def_id).clean(cx),\n+            const_stability: cx.tcx.lookup_const_stability(def_id).cloned(),\n         }\n     }\n \n@@ -262,6 +264,13 @@ impl Item {\n         }\n     }\n \n+    crate fn const_stable_since(&self) -> Option<SymbolStr> {\n+        match self.const_stability?.level {\n+            StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n+            StabilityLevel::Unstable { .. } => None,\n+        }\n+    }\n+\n     crate fn is_non_exhaustive(&self) -> bool {\n         self.attrs.other_attrs.iter().any(|a| a.has_name(sym::non_exhaustive))\n     }"}, {"sha": "de620a35c80d735ec41213e5f0921e12c99d070e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ccbb0f5c1a1100b271f9945add665c692a2bf230", "patch": "@@ -1692,13 +1692,13 @@ fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache)\n     debug_assert!(!item.is_stripped());\n     // Write the breadcrumb trail header for the top\n     write!(buf, \"<h1 class=\\\"fqn\\\"><span class=\\\"out-of-band\\\">\");\n-    if let Some(version) = item.stable_since() {\n-        write!(\n-            buf,\n-            \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\",\n-            version\n-        );\n-    }\n+    render_stability_since_raw(\n+        buf,\n+        item.stable_since().as_deref(),\n+        item.const_stable_since().as_deref(),\n+        None,\n+        None,\n+    );\n     write!(\n         buf,\n         \"<span id=\\\"render-detail\\\">\\\n@@ -2476,6 +2476,7 @@ fn render_implementor(\n         AssocItemLink::Anchor(None),\n         RenderMode::Normal,\n         implementor.impl_item.stable_since().as_deref(),\n+        implementor.impl_item.const_stable_since().as_deref(),\n         false,\n         Some(use_absolute),\n         false,\n@@ -2506,6 +2507,7 @@ fn render_impls(\n                 assoc_link,\n                 RenderMode::Normal,\n                 containing_item.stable_since().as_deref(),\n+                containing_item.const_stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -2756,6 +2758,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     assoc_link,\n                     RenderMode::Normal,\n                     implementor.impl_item.stable_since().as_deref(),\n+                    implementor.impl_item.const_stable_since().as_deref(),\n                     false,\n                     None,\n                     true,\n@@ -2898,10 +2901,40 @@ fn assoc_type(\n     }\n }\n \n-fn render_stability_since_raw(w: &mut Buffer, ver: Option<&str>, containing_ver: Option<&str>) {\n+fn render_stability_since_raw(\n+    w: &mut Buffer,\n+    ver: Option<&str>,\n+    const_ver: Option<&str>,\n+    containing_ver: Option<&str>,\n+    containing_const_ver: Option<&str>,\n+) {\n+    let ver = ver.and_then(|inner| if !inner.is_empty() { Some(inner) } else { None });\n+\n+    let const_ver = const_ver.and_then(|inner| if !inner.is_empty() { Some(inner) } else { None });\n+\n     if let Some(v) = ver {\n-        if containing_ver != ver && !v.is_empty() {\n-            write!(w, \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\", v)\n+        if let Some(cv) = const_ver {\n+            if const_ver != containing_const_ver {\n+                write!(\n+                    w,\n+                    \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}, const since {1}\\\">{0} (const: {1})</span>\",\n+                    v, cv\n+                );\n+            } else if ver != containing_ver {\n+                write!(\n+                    w,\n+                    \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\",\n+                    v\n+                );\n+            }\n+        } else {\n+            if ver != containing_ver {\n+                write!(\n+                    w,\n+                    \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\",\n+                    v\n+                );\n+            }\n         }\n     }\n }\n@@ -2910,7 +2943,9 @@ fn render_stability_since(w: &mut Buffer, item: &clean::Item, containing_item: &\n     render_stability_since_raw(\n         w,\n         item.stable_since().as_deref(),\n+        item.const_stable_since().as_deref(),\n         containing_item.stable_since().as_deref(),\n+        containing_item.const_stable_since().as_deref(),\n     )\n }\n \n@@ -3462,6 +3497,7 @@ fn render_assoc_items(\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n                 containing_item.stable_since().as_deref(),\n+                containing_item.const_stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -3654,6 +3690,7 @@ fn render_impl(\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n     outer_version: Option<&str>,\n+    outer_const_version: Option<&str>,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n@@ -3705,11 +3742,13 @@ fn render_impl(\n             );\n         }\n         write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-        let since = i.impl_item.stability.as_ref().and_then(|s| match s.level {\n-            StabilityLevel::Stable { since } => Some(since.as_str()),\n-            StabilityLevel::Unstable { .. } => None,\n-        });\n-        render_stability_since_raw(w, since.as_deref(), outer_version);\n+        render_stability_since_raw(\n+            w,\n+            i.impl_item.stable_since().as_deref(),\n+            i.impl_item.const_stable_since().as_deref(),\n+            outer_version,\n+            outer_const_version,\n+        );\n         write_srclink(cx, &i.impl_item, w, cache);\n         write!(w, \"</h3>\");\n \n@@ -3746,6 +3785,7 @@ fn render_impl(\n         render_mode: RenderMode,\n         is_default_item: bool,\n         outer_version: Option<&str>,\n+        outer_const_version: Option<&str>,\n         trait_: Option<&clean::Trait>,\n         show_def_docs: bool,\n         cache: &Cache,\n@@ -3775,7 +3815,13 @@ fn render_impl(\n                     write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n-                    render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n+                    render_stability_since_raw(\n+                        w,\n+                        item.stable_since().as_deref(),\n+                        item.const_stable_since().as_deref(),\n+                        outer_version,\n+                        outer_const_version,\n+                    );\n                     write_srclink(cx, item, w, cache);\n                     write!(w, \"</h4>\");\n                 }\n@@ -3791,7 +3837,13 @@ fn render_impl(\n                 write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n-                render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n+                render_stability_since_raw(\n+                    w,\n+                    item.stable_since().as_deref(),\n+                    item.const_stable_since().as_deref(),\n+                    outer_version,\n+                    outer_const_version,\n+                );\n                 write_srclink(cx, item, w, cache);\n                 write!(w, \"</h4>\");\n             }\n@@ -3854,6 +3906,7 @@ fn render_impl(\n             render_mode,\n             false,\n             outer_version,\n+            outer_const_version,\n             trait_,\n             show_def_docs,\n             cache,\n@@ -3868,6 +3921,7 @@ fn render_impl(\n         parent: &clean::Item,\n         render_mode: RenderMode,\n         outer_version: Option<&str>,\n+        outer_const_version: Option<&str>,\n         show_def_docs: bool,\n         cache: &Cache,\n     ) {\n@@ -3888,6 +3942,7 @@ fn render_impl(\n                 render_mode,\n                 true,\n                 outer_version,\n+                outer_const_version,\n                 None,\n                 show_def_docs,\n                 cache,\n@@ -3909,6 +3964,7 @@ fn render_impl(\n                 &i.impl_item,\n                 render_mode,\n                 outer_version,\n+                outer_const_version,\n                 show_def_docs,\n                 cache,\n             );"}, {"sha": "11ba68a388fba238830ff4ed3486b7b8611ba9bc", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbb0f5c1a1100b271f9945add665c692a2bf230/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=ccbb0f5c1a1100b271f9945add665c692a2bf230", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n #![crate_name = \"foo\"]\n \n #![unstable(feature = \"humans\",\n@@ -17,6 +19,7 @@ pub const unsafe fn foo() -> u32 { 42 }\n pub const fn foo2() -> u32 { 42 }\n \n // @has 'foo/fn.bar2.html' '//pre' 'pub const fn bar2() -> u32'\n+// @has - //span '1.0.0 (const: 1.0.0)'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn bar2() -> u32 { 42 }\n@@ -26,6 +29,7 @@ pub const fn bar2() -> u32 { 42 }\n pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar2_gated.html' '//pre' 'pub const unsafe fn bar2_gated() -> u32'\n+// @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.0.0)'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const unsafe fn bar2_gated() -> u32 { 42 }\n@@ -40,4 +44,10 @@ impl Foo {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const unsafe fn gated() -> u32 { 42 }\n+\n+    // @has 'foo/struct.Foo.html' '//h4[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n+    // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]\n+    pub const fn stable_impl() -> u32 { 42 }\n }"}]}