{"sha": "3625781cfe20db713158236f5d03e0c249f5137f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MjU3ODFjZmUyMGRiNzEzMTU4MjM2ZjVkMDNlMGMyNDlmNTEzN2Y=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-26T02:19:38Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:17Z"}, "message": "librustc: Fix more merge fallout.", "tree": {"sha": "aab6ff98e47094d7b5337f25189b43cee54fcc5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aab6ff98e47094d7b5337f25189b43cee54fcc5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3625781cfe20db713158236f5d03e0c249f5137f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3625781cfe20db713158236f5d03e0c249f5137f", "html_url": "https://github.com/rust-lang/rust/commit/3625781cfe20db713158236f5d03e0c249f5137f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3625781cfe20db713158236f5d03e0c249f5137f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb830558d13a8090988141c90ed49b16895c944a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb830558d13a8090988141c90ed49b16895c944a", "html_url": "https://github.com/rust-lang/rust/commit/bb830558d13a8090988141c90ed49b16895c944a"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "2f18b0562e0feb03c56dbe7b6e43017e67a4f38e", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=3625781cfe20db713158236f5d03e0c249f5137f", "patch": "@@ -229,15 +229,25 @@ impl Arena {\n     fn alloc_nonpod_inner(&mut self, n_bytes: uint, align: uint)\n                           -> (*u8, *u8) {\n         unsafe {\n-            let head = transmute_mut_region(&mut self.head);\n+            let start;\n+            let end;\n+            let tydesc_start;\n+            let after_tydesc;\n+\n+            {\n+                let head = transmute_mut_region(&mut self.head);\n+\n+                tydesc_start = head.fill;\n+                after_tydesc = head.fill + sys::size_of::<*TyDesc>();\n+                start = round_up_to(after_tydesc, align);\n+                end = start + n_bytes;\n+            }\n \n-            let tydesc_start = head.fill;\n-            let after_tydesc = head.fill + sys::size_of::<*TyDesc>();\n-            let start = round_up_to(after_tydesc, align);\n-            let end = start + n_bytes;\n             if end > at_vec::capacity(self.head.data) {\n                 return self.alloc_nonpod_grow(n_bytes, align);\n             }\n+\n+            let head = transmute_mut_region(&mut self.head);\n             head.fill = round_up_to(end, sys::pref_align_of::<*TyDesc>());\n \n             //debug!(\"idx = %u, size = %u, align = %u, fill = %u\","}, {"sha": "ba8df3a603835ab4c257f4b179eeed338257d409", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3625781cfe20db713158236f5d03e0c249f5137f", "patch": "@@ -523,10 +523,10 @@ impl<'self> EachItemContext<'self> {\n                 Mod | ForeignMod | Trait | Impl => {\n                     continue = self.each_item_of_module(def_id);\n                 }\n-                Freeze | Struct | UnsafeFn | Fn | PureFn | ForeignFn |\n-                UnsafeStaticMethod | StaticMethod | PureStaticMethod | Type |\n-                ForeignType | Variant | Enum | PublicField | PrivateField |\n-                InheritedField => {}\n+                ImmStatic | MutStatic | Struct | UnsafeFn | Fn | PureFn |\n+                ForeignFn | UnsafeStaticMethod | StaticMethod |\n+                PureStaticMethod | Type | ForeignType | Variant | Enum |\n+                PublicField | PrivateField | InheritedField => {}\n             }\n         }\n "}, {"sha": "52c01fa76476bb6b3204b1c395032b49a671b1c9", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=3625781cfe20db713158236f5d03e0c249f5137f", "patch": "@@ -452,7 +452,7 @@ impl mem_categorization_ctxt {\n           ast::def_trait(_) | ast::def_ty(_) | ast::def_prim_ty(_) |\n           ast::def_ty_param(*) | ast::def_struct(*) |\n           ast::def_typaram_binder(*) | ast::def_region(_) |\n-          ast::def_label(_) | ast::def_self_ty(*) => {\n+          ast::def_label(_) | ast::def_self_ty(*) | ast::def_method(*) => {\n               @cmt_ {\n                   id:id,\n                   span:span,"}, {"sha": "88bd9c1f6f4aa62bb3cd51149dc640500d1894a6", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=3625781cfe20db713158236f5d03e0c249f5137f", "patch": "@@ -396,7 +396,8 @@ impl ReachableContext {\n     // this properly would result in the necessity of computing *type*\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&self) {\n-        for self.tcx.destructor_for_type.each |_, destructor_def_id| {\n+        for self.tcx.destructor_for_type.iter().advance\n+                |(_, destructor_def_id)| {\n             if destructor_def_id.crate == local_crate {\n                 self.reachable_symbols.insert(destructor_def_id.node);\n             }"}, {"sha": "b2bfd9d1661b79aea40897630957c47510ff9762", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3625781cfe20db713158236f5d03e0c249f5137f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3625781cfe20db713158236f5d03e0c249f5137f", "patch": "@@ -3240,8 +3240,8 @@ impl Resolver {\n     pub fn add_exports_for_module(@mut self,\n                                   exports2: &mut ~[Export2],\n                                   module_: @mut Module) {\n-        for module_.import_resolutions.iter().advance |ident,\n-                                                       importresolution| {\n+        for module_.import_resolutions.iter().advance |(ident,\n+                                                        importresolution)| {\n             if importresolution.privacy != Public {\n                 debug!(\"(computing exports) not reexporting private `%s`\",\n                        self.session.str_of(*ident));"}]}