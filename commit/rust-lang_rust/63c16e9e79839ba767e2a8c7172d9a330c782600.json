{"sha": "63c16e9e79839ba767e2a8c7172d9a330c782600", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYzE2ZTllNzk4MzliYTc2N2UyYThjNzE3MmQ5YTMzMGM3ODI2MDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-01T04:24:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-01T08:00:17Z"}, "message": "rustdoc: Convert astsrv to pipes", "tree": {"sha": "5cd74767ca9a1e5f959f968d21ba4f2df24ba347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd74767ca9a1e5f959f968d21ba4f2df24ba347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c16e9e79839ba767e2a8c7172d9a330c782600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c16e9e79839ba767e2a8c7172d9a330c782600", "html_url": "https://github.com/rust-lang/rust/commit/63c16e9e79839ba767e2a8c7172d9a330c782600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c16e9e79839ba767e2a8c7172d9a330c782600/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e343abd0ed11227425eca16e186367eced39cd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/e343abd0ed11227425eca16e186367eced39cd82", "html_url": "https://github.com/rust-lang/rust/commit/e343abd0ed11227425eca16e186367eced39cd82"}], "stats": {"total": 229, "additions": 122, "deletions": 107}, "files": [{"sha": "a9c1630b6546b179c131ec7a23d8c749c58e2513", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -22,9 +22,10 @@ use core::prelude::*;\n use parse;\n use util;\n \n-use core::pipes::stream;\n+use core::pipes::{stream, Chan, SharedChan, Port};\n use core::oldcomm;\n use core::vec;\n+use core::ops::Drop;\n use rustc::back::link;\n use rustc::driver::driver;\n use rustc::driver::session::Session;\n@@ -55,11 +56,15 @@ enum Msg {\n }\n \n pub struct Srv {\n-    ch: oldcomm::Chan<Msg>\n+    ch: SharedChan<Msg>\n }\n \n impl Srv: Clone {\n-    fn clone(&self) -> Srv { copy *self }\n+    fn clone(&self) -> Srv {\n+        Srv {\n+            ch: self.ch.clone()\n+        }\n+    }\n }\n \n pub fn from_str<T>(source: ~str, owner: SrvOwner<T>) -> T {\n@@ -72,18 +77,22 @@ pub fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n \n fn run<T>(owner: SrvOwner<T>, source: ~str, parse: Parser) -> T {\n \n+    let (po, ch) = stream();\n+\n+    do task::spawn {\n+        act(&po, copy source, copy parse);\n+    }\n+\n     let srv_ = Srv {\n-        ch: do util::spawn_listener |copy source, move parse, po| {\n-            act(po, copy source, copy parse);\n-        }\n+        ch: SharedChan(ch)\n     };\n \n-    let res = owner(srv_);\n-    oldcomm::send(srv_.ch, Exit);\n+    let res = owner(srv_.clone());\n+    srv_.ch.send(Exit);\n     move res\n }\n \n-fn act(po: oldcomm::Port<Msg>, source: ~str, parse: Parser) {\n+fn act(po: &Port<Msg>, source: ~str, parse: Parser) {\n     let sess = build_session();\n \n     let ctxt = build_ctxt(\n@@ -93,7 +102,7 @@ fn act(po: oldcomm::Port<Msg>, source: ~str, parse: Parser) {\n \n     let mut keep_going = true;\n     while keep_going {\n-        match oldcomm::recv(po) {\n+        match po.recv() {\n           HandleRequest(f) => {\n             f(ctxt);\n           }\n@@ -112,7 +121,7 @@ pub fn exec<T:Owned>(\n     let msg = HandleRequest(fn~(move f, ctxt: Ctxt) {\n         ch.send(f(ctxt))\n     });\n-    oldcomm::send(srv.ch, move msg);\n+    srv.ch.send(move msg);\n     po.recv()\n }\n "}, {"sha": "382695e40f73a71c0fd06df665ff4d31648800a4", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -46,6 +46,7 @@ pub fn run(\n     doc: doc::Doc\n ) -> doc::Doc {\n     let fold = Fold {\n+        ctxt: srv.clone(),\n         fold_crate: fold_crate,\n         fold_item: fold_item,\n         fold_enum: fold_enum,\n@@ -61,7 +62,7 @@ fn fold_crate(\n     doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n \n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n     let doc = fold::default_seq_fold_crate(fold, doc);\n \n     let attrs = do astsrv::exec(srv) |ctxt| {\n@@ -92,7 +93,7 @@ fn fold_item(\n     doc: doc::ItemDoc\n ) -> doc::ItemDoc {\n \n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     let desc = if doc.id == ast::crate_node_id {\n@@ -159,16 +160,16 @@ fn fold_enum(\n     doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n \n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n     let doc_id = doc.id();\n     let doc = fold::default_seq_fold_enum(fold, doc);\n \n     doc::EnumDoc {\n-        variants: do par::map(doc.variants) |variant| {\n+        variants: do vec::map(doc.variants) |variant| {\n             let variant = copy *variant;\n             let desc = {\n                 let variant = copy variant;\n-                do astsrv::exec(srv) |ctxt| {\n+                do astsrv::exec(srv.clone()) |ctxt| {\n                     match ctxt.ast_map.get(doc_id) {\n                         ast_map::node_item(@ast::item {\n                             node: ast::item_enum(ref enum_definition, _), _\n@@ -216,7 +217,7 @@ fn fold_trait(\n     fold: &fold::Fold<astsrv::Srv>,\n     doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     doc::TraitDoc {\n@@ -293,7 +294,7 @@ fn fold_impl(\n     fold: &fold::Fold<astsrv::Srv>,\n     doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     doc::ImplDoc {\n@@ -328,8 +329,8 @@ mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            run(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            run(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "225b62f72cb831f762541896799aaf9ca42fefef", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -111,9 +111,9 @@ pub mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            let doc = (attr_pass::mk_pass().f)(srv, doc);\n-            run(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            run(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "c93d9f3d7c159d784abee31ebf5a573b4f6ba983", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -193,11 +193,10 @@ pub fn default_any_fold_mod<T:Owned Clone>(\n     fold: &Fold<T>,\n     doc: doc::ModDoc\n ) -> doc::ModDoc {\n-    let fold_copy = fold.clone();\n     doc::ModDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n-        items: par::map(doc.items, |ItemTag, move fold_copy| {\n-            fold_ItemTag(&fold_copy, copy *ItemTag)\n+        items: vec::map(doc.items, |ItemTag| {\n+            fold_ItemTag(fold, copy *ItemTag)\n         }),\n         .. doc\n     }\n@@ -220,11 +219,10 @@ pub fn default_par_fold_mod<T:Owned Clone>(\n     fold: &Fold<T>,\n     doc: doc::ModDoc\n ) -> doc::ModDoc {\n-    let fold_copy = fold.clone();\n     doc::ModDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n-        items: par::map(doc.items, |ItemTag, move fold_copy| {\n-            fold_ItemTag(&fold_copy, copy *ItemTag)\n+        items: vec::map(doc.items, |ItemTag| {\n+            fold_ItemTag(fold, copy *ItemTag)\n         }),\n         .. doc\n     }\n@@ -234,11 +232,10 @@ pub fn default_any_fold_nmod<T:Owned Clone>(\n     fold: &Fold<T>,\n     doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n-    let fold_copy = fold.clone();\n     doc::NmodDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n-        fns: par::map(doc.fns, |FnDoc, move fold_copy| {\n-            (fold_copy.fold_fn)(&fold_copy, copy *FnDoc)\n+        fns: vec::map(doc.fns, |FnDoc| {\n+            (fold.fold_fn)(fold, copy *FnDoc)\n         }),\n         .. doc\n     }\n@@ -261,11 +258,10 @@ pub fn default_par_fold_nmod<T:Owned Clone>(\n     fold: &Fold<T>,\n     doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n-    let fold_copy = fold.clone();\n     doc::NmodDoc {\n         item: (fold.fold_item)(fold, copy doc.item),\n-        fns: par::map(doc.fns, |FnDoc, move fold_copy| {\n-            (fold_copy.fold_fn)(&fold_copy, copy *FnDoc)\n+        fns: vec::map(doc.fns, |FnDoc| {\n+            (fold.fold_fn)(fold, copy *FnDoc)\n         }),\n         .. doc\n     }"}, {"sha": "776d2fe9083c71439881372bb182e4fce77f8a60", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -274,11 +274,11 @@ mod test {\n                 output_style: output_style,\n                 .. config::default_config(&Path(\"whatever\"))\n             };\n-            let doc = extract::from_srv(srv, ~\"\");\n-            let doc = (attr_pass::mk_pass().f)(srv, doc);\n-            let doc = (desc_to_brief_pass::mk_pass().f)(srv, doc);\n-            let doc = (path_pass::mk_pass().f)(srv, doc);\n-            run(srv, doc, config)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (desc_to_brief_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (path_pass::mk_pass().f)(srv.clone(), doc);\n+            run(srv.clone(), doc, config)\n         }\n     }\n }"}, {"sha": "b82b9b16125c76a114047941b8fb064ef18e275d", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -867,25 +867,25 @@ mod test {\n                 .. config::default_config(&Path(\"whatever\"))\n             };\n \n-            let doc = extract::from_srv(srv, ~\"\");\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n             debug!(\"doc (extract): %?\", doc);\n-            let doc = (tystr_pass::mk_pass().f)(srv, doc);\n+            let doc = (tystr_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (tystr): %?\", doc);\n-            let doc = (path_pass::mk_pass().f)(srv, doc);\n+            let doc = (path_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (path): %?\", doc);\n-            let doc = (attr_pass::mk_pass().f)(srv, doc);\n+            let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (attr): %?\", doc);\n-            let doc = (desc_to_brief_pass::mk_pass().f)(srv, doc);\n+            let doc = (desc_to_brief_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (desc_to_brief): %?\", doc);\n-            let doc = (unindent_pass::mk_pass().f)(srv, doc);\n+            let doc = (unindent_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (unindent): %?\", doc);\n-            let doc = (sectionalize_pass::mk_pass().f)(srv, doc);\n+            let doc = (sectionalize_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (trim): %?\", doc);\n-            let doc = (trim_pass::mk_pass().f)(srv, doc);\n+            let doc = (trim_pass::mk_pass().f)(srv.clone(), doc);\n             debug!(\"doc (sectionalize): %?\", doc);\n-            let doc = (markdown_index_pass::mk_pass(config).f)(srv, doc);\n+            let doc = (markdown_index_pass::mk_pass(config).f)(srv.clone(), doc);\n             debug!(\"doc (index): %?\", doc);\n-            (srv, doc)\n+            (srv.clone(), doc)\n         }\n     }\n "}, {"sha": "3b9f07d6920a6a1b72f5cf07ba991d4c3e133d03", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -279,8 +279,8 @@ mod test {\n \n     pub fn mk_doc(name: ~str, source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {\n-            let doc = extract::from_srv(srv, copy name);\n-            let doc = (path_pass::mk_pass().f)(srv, doc);\n+            let doc = extract::from_srv(srv.clone(), copy name);\n+            let doc = (path_pass::mk_pass().f)(srv.clone(), doc);\n             doc\n         }\n     }"}, {"sha": "e2122378351052114e0a212ed8e30b39334fcb05", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -196,8 +196,8 @@ mod test {\n         source: ~str\n     ) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            run(srv, doc, output_style)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            run(srv.clone(), doc, output_style)\n         }\n     }\n "}, {"sha": "91e3264db1c06a4e0bef152ec994f479ca47ffe5", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -33,7 +33,7 @@ pub fn run_passes(\n         log(debug, fmt!(\"pass #%d\", passno));\n         passno += 1;\n         do time(copy pass.name) {\n-            (pass.f)(srv, copy doc)\n+            (pass.f)(srv.clone(), copy doc)\n         }\n     }\n }\n@@ -90,7 +90,7 @@ fn test_run_passes() {\n                 f: pass2\n             }\n         ];\n-        let doc = extract::from_srv(srv, ~\"one\");\n+        let doc = extract::from_srv(srv.clone(), ~\"one\");\n         let doc = run_passes(srv, doc, passes);\n         assert doc.cratemod().name() == ~\"onetwothree\";\n     }"}, {"sha": "165ab989a2f065bfe1ba5357de7227155fb914e3", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -35,7 +35,12 @@ struct Ctxt {\n }\n \n impl Ctxt: Clone {\n-    fn clone(&self) -> Ctxt { copy *self }\n+    fn clone(&self) -> Ctxt {\n+        Ctxt {\n+            srv: self.srv.clone(),\n+            path: copy self.path\n+        }\n+    }\n }\n \n #[allow(non_implicitly_copyable_typarams)]\n@@ -45,6 +50,7 @@ fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n         mut path: ~[]\n     };\n     let fold = Fold {\n+        ctxt: ctxt.clone(),\n         fold_item: fold_item,\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n@@ -89,8 +95,8 @@ fn fold_nmod(fold: &fold::Fold<Ctxt>, doc: doc::NmodDoc) -> doc::NmodDoc {\n fn should_record_mod_paths() {\n     let source = ~\"mod a { mod b { mod c { } } mod d { mod e { } } }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = run(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = run(srv.clone(), doc);\n         assert doc.cratemod().mods()[0].mods()[0].mods()[0].path()\n             == ~[~\"a\", ~\"b\"];\n         assert doc.cratemod().mods()[0].mods()[1].mods()[0].path()\n@@ -102,8 +108,8 @@ fn should_record_mod_paths() {\n fn should_record_fn_paths() {\n     let source = ~\"mod a { fn b() { } }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = run(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = run(srv.clone(), doc);\n         assert doc.cratemod().mods()[0].fns()[0].path() == ~[~\"a\"];\n     }\n }\n@@ -112,8 +118,8 @@ fn should_record_fn_paths() {\n fn should_record_foreign_mod_paths() {\n     let source = ~\"mod a { extern mod b { } }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = run(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = run(srv.clone(), doc);\n         assert doc.cratemod().mods()[0].nmods()[0].path() == ~[~\"a\"];\n     }\n }\n@@ -122,8 +128,8 @@ fn should_record_foreign_mod_paths() {\n fn should_record_foreign_fn_paths() {\n     let source = ~\"extern mod a { fn b(); }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = run(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = run(srv.clone(), doc);\n         assert doc.cratemod().nmods()[0].fns[0].path() == ~[~\"a\"];\n     }\n }"}, {"sha": "6ca59b629eee22c4fbba0bd58ce52df60d9c1cf2", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -30,6 +30,7 @@ pub fn mk_pass() -> Pass {\n \n pub fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n+        ctxt: srv.clone(),\n         fold_mod: fold_mod,\n         .. fold::default_any_fold(srv)\n     };\n@@ -44,7 +45,7 @@ fn fold_mod(\n \n     doc::ModDoc {\n         items: do doc.items.filtered |ItemTag| {\n-            !is_hidden(fold.ctxt, ItemTag.item())\n+            !is_hidden(fold.ctxt.clone(), ItemTag.item())\n         },\n         .. doc\n     }\n@@ -78,8 +79,8 @@ pub mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            run(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            run(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "4b47b71449af2e06cfea267fbd2f90ccb7cdc5a5", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -31,6 +31,7 @@ pub fn mk_pass() -> Pass {\n \n pub fn run(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n     let fold = Fold {\n+        ctxt: srv.clone(),\n         fold_mod: fold_mod,\n         .. fold::default_any_fold(srv)\n     };\n@@ -45,7 +46,7 @@ fn fold_mod(\n \n     doc::ModDoc {\n         items: doc.items.filtered(|ItemTag| {\n-            is_visible(fold.ctxt, ItemTag.item())\n+            is_visible(fold.ctxt.clone(), ItemTag.item())\n         }),\n         .. doc\n     }\n@@ -82,8 +83,8 @@ pub mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            run(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            run(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "b3e9c43e87a1eb8aa03b5d312110555ad4fc4440", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -94,14 +94,14 @@ fn run(config: Config) {\n \n         // Just time how long it takes for the AST to become available\n         do time(~\"wait_ast\") {\n-            do astsrv::exec(srv) |_ctxt| { }\n+            do astsrv::exec(srv.clone()) |_ctxt| { }\n         };\n \n         // Extract the initial doc tree from the AST. This contains\n         // just names and node ids.\n         let doc = time(~\"extract\", || {\n             let default_name = copy source_file;\n-            extract::from_srv(srv, default_name.to_str())\n+            extract::from_srv(srv.clone(), default_name.to_str())\n         });\n \n         // Refine and publish the document"}, {"sha": "d6455c4c783fffcd56e561b7e1c1ae341d4cf62a", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -261,9 +261,9 @@ pub mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            let doc = (attr_pass::mk_pass().f)(srv, doc);\n-            run(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            run(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "946be67ee1099ed8287d9f988aed299c0dff92f8", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -28,8 +28,8 @@ pub fn mk_pass() -> Pass {\n fn test() {\n     let source = ~\"mod z { } fn y() { }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = (mk_pass().f)(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = (mk_pass().f)(srv.clone(), doc);\n         assert doc.cratemod().items[0].name() == ~\"y\";\n         assert doc.cratemod().items[1].name() == ~\"z\";\n     }"}, {"sha": "646dc12d336e9941d05e0064c4777d10958a61c4", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -55,8 +55,8 @@ fn test() {\n          type itype = int; \\\n          struct istruct { f: () }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = (mk_pass().f)(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = (mk_pass().f)(srv.clone(), doc);\n         assert doc.cratemod().items[0].name() == ~\"iconst\";\n         assert doc.cratemod().items[1].name() == ~\"itype\";\n         assert doc.cratemod().items[2].name() == ~\"ienum\";"}, {"sha": "2792508483ca151a161972172092c2b8645e8c3a", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -69,8 +69,8 @@ fn test() {\n \n     let source = ~\"mod z { mod y { } fn x() { } } mod w { }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = (mk_pass(~\"\", name_lteq).f)(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = (mk_pass(~\"\", name_lteq).f)(srv.clone(), doc);\n         assert doc.cratemod().mods()[0].name() == ~\"w\";\n         assert doc.cratemod().mods()[1].items[0].name() == ~\"x\";\n         assert doc.cratemod().mods()[1].items[1].name() == ~\"y\";\n@@ -86,11 +86,11 @@ fn should_be_stable() {\n \n     let source = ~\"mod a { mod b { } } mod c { mod d { } }\";\n     do astsrv::from_str(source) |srv| {\n-        let doc = extract::from_srv(srv, ~\"\");\n-        let doc = (mk_pass(~\"\", always_eq).f)(srv, doc);\n+        let doc = extract::from_srv(srv.clone(), ~\"\");\n+        let doc = (mk_pass(~\"\", always_eq).f)(srv.clone(), doc);\n         assert doc.cratemod().mods()[0].items[0].name() == ~\"b\";\n         assert doc.cratemod().mods()[1].items[0].name() == ~\"d\";\n-        let doc = (mk_pass(~\"\", always_eq).f)(srv, doc);\n+        let doc = (mk_pass(~\"\", always_eq).f)(srv.clone(), doc);\n         assert doc.cratemod().mods()[0].items[0].name() == ~\"b\";\n         assert doc.cratemod().mods()[1].items[0].name() == ~\"d\";\n     }"}, {"sha": "8d88f5aeae2a13a422423b9691801499f4f09226", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -306,11 +306,11 @@ mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            let doc = (attr_pass::mk_pass().f)(srv, doc);\n-            let doc = (desc_to_brief_pass::mk_pass().f)(srv, doc);\n-            let doc = (sectionalize_pass::mk_pass().f)(srv, doc);\n-            (mk_pass(~\"\", |s| str::trim(s) ).f)(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (desc_to_brief_pass::mk_pass().f)(srv.clone(), doc);\n+            let doc = (sectionalize_pass::mk_pass().f)(srv.clone(), doc);\n+            (mk_pass(~\"\", |s| str::trim(s) ).f)(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "39557a92e01eec8979d8097f9a9d22424f9917db", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -45,9 +45,9 @@ mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            let doc = (attr_pass::mk_pass().f)(srv, doc);\n-            (mk_pass().f)(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            let doc = (attr_pass::mk_pass().f)(srv.clone(), doc);\n+            (mk_pass().f)(srv.clone(), doc)\n         }\n     }\n }"}, {"sha": "417171e677381e1efe7452a90c23b03e937d0f82", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c16e9e79839ba767e2a8c7172d9a330c782600/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=63c16e9e79839ba767e2a8c7172d9a330c782600", "patch": "@@ -40,6 +40,7 @@ pub fn run(\n     doc: doc::Doc\n ) -> doc::Doc {\n     let fold = Fold {\n+        ctxt: srv.clone(),\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n@@ -57,7 +58,7 @@ fn fold_fn(\n     doc: doc::FnDoc\n ) -> doc::FnDoc {\n \n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n \n     doc::SimpleItemDoc {\n         sig: get_fn_sig(srv, doc.id()),\n@@ -100,7 +101,7 @@ fn fold_const(\n     fold: &fold::Fold<astsrv::Srv>,\n     doc: doc::ConstDoc\n ) -> doc::ConstDoc {\n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n \n     doc::SimpleItemDoc {\n         sig: Some({\n@@ -130,13 +131,13 @@ fn fold_enum(\n     doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n     let doc_id = doc.id();\n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n \n     doc::EnumDoc {\n-        variants: do par::map(doc.variants) |variant| {\n+        variants: do vec::map(doc.variants) |variant| {\n             let sig = {\n                 let variant = copy *variant;\n-                do astsrv::exec(srv) |copy variant, ctxt| {\n+                do astsrv::exec(srv.clone()) |copy variant, ctxt| {\n                     match ctxt.ast_map.get(doc_id) {\n                         ast_map::node_item(@ast::item {\n                             node: ast::item_enum(ref enum_definition, _), _\n@@ -174,7 +175,7 @@ fn fold_trait(\n     doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n     doc::TraitDoc {\n-        methods: merge_methods(fold.ctxt, doc.id(), copy doc.methods),\n+        methods: merge_methods(fold.ctxt.clone(), doc.id(), copy doc.methods),\n         .. doc\n     }\n }\n@@ -184,9 +185,9 @@ fn merge_methods(\n     item_id: doc::AstId,\n     docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n-    do par::map(docs) |doc| {\n+    do vec::map(docs) |doc| {\n         doc::MethodDoc {\n-            sig: get_method_sig(srv, item_id, copy doc.name),\n+            sig: get_method_sig(srv.clone(), item_id, copy doc.name),\n             .. copy *doc\n         }\n     }\n@@ -265,7 +266,7 @@ fn fold_impl(\n     doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n \n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n \n     let (trait_types, self_ty) = {\n         let doc = copy doc;\n@@ -289,7 +290,7 @@ fn fold_impl(\n     doc::ImplDoc {\n         trait_types: trait_types,\n         self_ty: self_ty,\n-        methods: merge_methods(fold.ctxt, doc.id(), copy doc.methods),\n+        methods: merge_methods(fold.ctxt.clone(), doc.id(), copy doc.methods),\n         .. doc\n     }\n }\n@@ -324,7 +325,7 @@ fn fold_type(\n     doc: doc::TyDoc\n ) -> doc::TyDoc {\n \n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n \n     doc::SimpleItemDoc {\n         sig: {\n@@ -362,7 +363,7 @@ fn fold_struct(\n     fold: &fold::Fold<astsrv::Srv>,\n     doc: doc::StructDoc\n ) -> doc::StructDoc {\n-    let srv = fold.ctxt;\n+    let srv = fold.ctxt.clone();\n \n     doc::StructDoc {\n         sig: {\n@@ -434,8 +435,8 @@ pub mod test {\n \n     pub fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n-            let doc = extract::from_srv(srv, ~\"\");\n-            run(srv, doc)\n+            let doc = extract::from_srv(srv.clone(), ~\"\");\n+            run(srv.clone(), doc)\n         }\n     }\n }"}]}