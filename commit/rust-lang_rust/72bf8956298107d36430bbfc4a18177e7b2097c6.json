{"sha": "72bf8956298107d36430bbfc4a18177e7b2097c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmY4OTU2Mjk4MTA3ZDM2NDMwYmJmYzRhMTgxNzdlN2IyMDk3YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T10:30:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T10:30:43Z"}, "message": "auto merge of #8854 : huonw/rust/rt-papercuts, r=brson\n\nThe only user-facing change is handling non-integer (and zero) `RUST_THREADS` more nicely:\r\n\r\n```\r\n$ RUST_THREADS=x rustc # old\r\n\r\nYou've met with a terrible fate, haven't you?\r\n\r\nfatal runtime error: runtime tls key not initialized\r\nAborted\r\n$ RUST_THREADS=x ./x86_64-unknown-linux-gnu/stage2/bin/rustc # new\r\n\r\nYou've met with a terrible fate, haven't you?\r\n\r\nfatal runtime error: `RUST_THREADS` is `x`, should be a positive integer\r\nAborted\r\n```\r\n\r\nThe other changes are converting some `for .. in range(x,y)` to `vec::from_fn` or `for .. in x.iter()` as appropriate; and removing a chain of (seemingly) unnecessary pointer casts.\r\n\r\n(Also, fixes a typo in `extra::test` from #8823.)", "tree": {"sha": "ffe5019eb5fb0badbc53893291b5973ef104435b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe5019eb5fb0badbc53893291b5973ef104435b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72bf8956298107d36430bbfc4a18177e7b2097c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72bf8956298107d36430bbfc4a18177e7b2097c6", "html_url": "https://github.com/rust-lang/rust/commit/72bf8956298107d36430bbfc4a18177e7b2097c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72bf8956298107d36430bbfc4a18177e7b2097c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f10e50a4beecbf6afa51870190458d34f216fe54", "url": "https://api.github.com/repos/rust-lang/rust/commits/f10e50a4beecbf6afa51870190458d34f216fe54", "html_url": "https://github.com/rust-lang/rust/commit/f10e50a4beecbf6afa51870190458d34f216fe54"}, {"sha": "4fea236a85b61b52fc3e16348886ff32f5b8210b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fea236a85b61b52fc3e16348886ff32f5b8210b", "html_url": "https://github.com/rust-lang/rust/commit/4fea236a85b61b52fc3e16348886ff32f5b8210b"}], "stats": {"total": 60, "additions": 27, "deletions": 33}, "files": [{"sha": "73f6d2e1bda8be85e217c8082f1bdbad9c64c2b5", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=72bf8956298107d36430bbfc4a18177e7b2097c6", "patch": "@@ -745,7 +745,7 @@ fn get_concurrency() -> uint {\n             let opt_n: Option<uint> = FromStr::from_str(s);\n             match opt_n {\n                 Some(n) if n > 0 => n,\n-                _ => fail!(\"RUST_TEST_TASKS is `%s`, should be a non-negative integer.\", s)\n+                _ => fail!(\"RUST_TEST_TASKS is `%s`, should be a positive integer.\", s)\n             }\n         }\n         None => {"}, {"sha": "e5075f8818a0b38f7d525c06e6205186743027d8", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=72bf8956298107d36430bbfc4a18177e7b2097c6", "patch": "@@ -55,10 +55,11 @@ pub fn clone() -> Option<~[~str]> {\n mod imp {\n     use libc;\n     use option::{Option, Some, None};\n-    use iterator::{Iterator, range};\n+    use iterator::Iterator;\n     use str;\n     use unstable::finally::Finally;\n     use util;\n+    use vec;\n \n     pub unsafe fn init(argc: int, argv: **u8) {\n         let args = load_argc_and_argv(argc, argv);\n@@ -111,11 +112,9 @@ mod imp {\n \n     // Copied from `os`.\n     unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> ~[~str] {\n-        let mut args = ~[];\n-        for i in range(0u, argc as uint) {\n-            args.push(str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int)));\n+        do vec::from_fn(argc as uint) |i| {\n+            str::raw::from_c_str(*(argv as **libc::c_char).offset(i as int))\n         }\n-        args\n     }\n \n     #[cfg(stage0)]"}, {"sha": "3f9b7fc83df9822b618ff658f97db38f4cad4999", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=72bf8956298107d36430bbfc4a18177e7b2097c6", "patch": "@@ -121,27 +121,20 @@ pub unsafe fn borrow<T>(f: &fn(&mut T)) {\n /// For the Scheduler pointer to be aliased\n pub unsafe fn unsafe_borrow<T>() -> *mut T {\n     let key = tls_key();\n-    let mut void_ptr: *mut c_void = tls::get(key);\n+    let void_ptr = tls::get(key);\n     if void_ptr.is_null() {\n         rtabort!(\"thread-local pointer is null. bogus!\");\n     }\n-    let ptr: *mut *mut c_void = &mut void_ptr;\n-    let ptr: *mut ~T = ptr as *mut ~T;\n-    let ptr: *mut T = &mut **ptr;\n-    return ptr;\n+    void_ptr as *mut T\n }\n \n pub unsafe fn try_unsafe_borrow<T>() -> Option<*mut T> {\n     let key = tls_key();\n-    let mut void_ptr: *mut c_void = tls::get(key);\n+    let void_ptr = tls::get(key);\n     if void_ptr.is_null() {\n-        return None;\n-    }\n-    {\n-        let ptr: *mut *mut c_void = &mut void_ptr;\n-        let ptr: *mut ~T = ptr as *mut ~T;\n-        let ptr: *mut T = &mut **ptr;\n-        return Some(ptr);\n+        None\n+    } else {\n+        Some(void_ptr as *mut T)\n     }\n }\n "}, {"sha": "14ff1fd58044f56b3b7717e556ddbbe056a4abbd", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=72bf8956298107d36430bbfc4a18177e7b2097c6", "patch": "@@ -59,7 +59,7 @@ Several modules in `core` are clients of `rt`:\n use cell::Cell;\n use clone::Clone;\n use container::Container;\n-use iterator::{Iterator, range};\n+use iterator::Iterator;\n use option::{Option, None, Some};\n use ptr::RawPtr;\n use rt::local::Local;\n@@ -71,7 +71,8 @@ use rt::work_queue::WorkQueue;\n use rt::uv::uvio::UvEventLoop;\n use unstable::atomics::{AtomicInt, SeqCst};\n use unstable::sync::UnsafeArc;\n-use vec::{OwnedVector, MutableVector};\n+use vec;\n+use vec::{OwnedVector, MutableVector, ImmutableVector};\n \n /// The global (exchange) heap.\n pub mod global_heap;\n@@ -251,25 +252,21 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n \n     // Create a work queue for each scheduler, ntimes. Create an extra\n     // for the main thread if that flag is set. We won't steal from it.\n-    let mut work_queues = ~[];\n-    for _ in range(0u, nscheds) {\n-        let work_queue: WorkQueue<~Task> = WorkQueue::new();\n-        work_queues.push(work_queue);\n-    }\n+    let work_queues: ~[WorkQueue<~Task>] = vec::from_fn(nscheds, |_| WorkQueue::new());\n \n     // The schedulers.\n     let mut scheds = ~[];\n     // Handles to the schedulers. When the main task ends these will be\n     // sent the Shutdown message to terminate the schedulers.\n     let mut handles = ~[];\n \n-    for i in range(0u, nscheds) {\n+    for work_queue in work_queues.iter() {\n         rtdebug!(\"inserting a regular scheduler\");\n \n         // Every scheduler is driven by an I/O event loop.\n         let loop_ = ~UvEventLoop::new();\n         let mut sched = ~Scheduler::new(loop_,\n-                                        work_queues[i].clone(),\n+                                        work_queue.clone(),\n                                         work_queues.clone(),\n                                         sleepers.clone());\n         let handle = sched.make_handle();\n@@ -358,9 +355,8 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n     }\n \n     // Run each remaining scheduler in a thread.\n-    while !scheds.is_empty() {\n+    for sched in scheds.move_rev_iter() {\n         rtdebug!(\"creating regular schedulers\");\n-        let sched = scheds.pop();\n         let sched_cell = Cell::new(sched);\n         let thread = do Thread::start {\n             let mut sched = sched_cell.take();"}, {"sha": "6f39cbbade3d47265aa7e4201bf7c32860b5012c", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=72bf8956298107d36430bbfc4a18177e7b2097c6", "patch": "@@ -11,7 +11,7 @@\n use container::Container;\n use from_str::FromStr;\n use libc;\n-use option::{Some, None};\n+use option::{Some, None, Option};\n use os;\n use str::StrSlice;\n use unstable::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n@@ -57,7 +57,13 @@ pub fn limit_thread_creation_due_to_osx_and_valgrind() -> bool {\n /// either `RUST_THREADS` or `num_cpus`.\n pub fn default_sched_threads() -> uint {\n     match os::getenv(\"RUST_THREADS\") {\n-        Some(nstr) => FromStr::from_str(nstr).unwrap(),\n+        Some(nstr) => {\n+            let opt_n: Option<uint> = FromStr::from_str(nstr);\n+            match opt_n {\n+                Some(n) if n > 0 => n,\n+                _ => rtabort!(\"`RUST_THREADS` is `%s`, should be a positive integer\", nstr)\n+            }\n+        }\n         None => {\n             if limit_thread_creation_due_to_osx_and_valgrind() {\n                 1"}, {"sha": "74531deb58ef6c8d18529151437202ffdd868e76", "filename": "src/test/run-fail/test-tasks-invalid-value.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bf8956298107d36430bbfc4a18177e7b2097c6/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-tasks-invalid-value.rs?ref=72bf8956298107d36430bbfc4a18177e7b2097c6", "patch": "@@ -11,7 +11,7 @@\n // This checks that RUST_TEST_TASKS not being 1, 2, ... is detected\n // properly.\n \n-// error-pattern:should be a non-negative integer\n+// error-pattern:should be a positive integer\n // compile-flags: --test\n // exec-env:RUST_TEST_TASKS=foo\n ", "previous_filename": "src/test/run-fail/test-threads-invalid-value.rs"}]}