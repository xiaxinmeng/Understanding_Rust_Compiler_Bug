{"sha": "29546dd06d733d065fc497902bbcecbbb06ce621", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NTQ2ZGQwNmQ3MzNkMDY1ZmM0OTc5MDJiYmNlY2JiYjA2Y2U2MjE=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:57:14Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:58:51Z"}, "message": "remove claim about searching through nested fields for the nullable type, even though that is how it works", "tree": {"sha": "cae1da4a903be99240a28debc02359129eaab170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cae1da4a903be99240a28debc02359129eaab170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29546dd06d733d065fc497902bbcecbbb06ce621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29546dd06d733d065fc497902bbcecbbb06ce621", "html_url": "https://github.com/rust-lang/rust/commit/29546dd06d733d065fc497902bbcecbbb06ce621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29546dd06d733d065fc497902bbcecbbb06ce621/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1319b293c67f0fa8e9504c692898d2cee1866a9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1319b293c67f0fa8e9504c692898d2cee1866a9a", "html_url": "https://github.com/rust-lang/rust/commit/1319b293c67f0fa8e9504c692898d2cee1866a9a"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "ca104ff29ace3377c7ccb9efb5d53b7c350963a8", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29546dd06d733d065fc497902bbcecbbb06ce621/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/29546dd06d733d065fc497902bbcecbbb06ce621/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=29546dd06d733d065fc497902bbcecbbb06ce621", "patch": "@@ -581,12 +581,12 @@ interfacing with C, pointers that might be `null` are often used, which would se\n require some messy `transmute`s and/or unsafe code to handle conversions to/from Rust types.\n However, the language provides a workaround.\n \n-As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it\n-contains exactly two variants, one of which contains no data and the other contains\n-a field of one of the non-nullable types listed above (or a struct containing such a type).\n-This means no extra space is required for a discriminant; rather, the empty variant is represented\n-by putting a `null` value into the non-nullable field. This is called an \"optimization\", but unlike\n-other optimizations it is guaranteed to apply to eligible types.\n+As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it contains\n+exactly two variants, one of which contains no data and the other contains a field of one of the\n+non-nullable types listed above.  This means no extra space is required for a discriminant; rather,\n+the empty variant is represented by putting a `null` value into the non-nullable field. This is\n+called an \"optimization\", but unlike other optimizations it is guaranteed to apply to eligible\n+types.\n \n The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way\n@@ -599,7 +599,9 @@ and an integer and it is supposed to run the function with the integer as a para\n we have function pointers flying across the FFI boundary in both directions.\n \n ```rust\n-use std::os::raw::c_int;\n+# #![feature(libc)]\n+extern crate libc;\n+use libc::c_int;\n \n # #[cfg(hidden)]\n extern \"C\" {"}]}