{"sha": "892ef6fa48bd20c037351e0cf8ea12c4c429a868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MmVmNmZhNDhiZDIwYzAzNzM1MWUwY2Y4ZWExMmM0YzQyOWE4Njg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-16T17:12:10Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-16T17:12:10Z"}, "message": "rustbuild: work around the stdarch cfg(bootstrap) bug.", "tree": {"sha": "3854c8a577b91fbfb7192579a3bd3b219e7bc140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3854c8a577b91fbfb7192579a3bd3b219e7bc140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/892ef6fa48bd20c037351e0cf8ea12c4c429a868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/892ef6fa48bd20c037351e0cf8ea12c4c429a868", "html_url": "https://github.com/rust-lang/rust/commit/892ef6fa48bd20c037351e0cf8ea12c4c429a868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/892ef6fa48bd20c037351e0cf8ea12c4c429a868/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f1da639d4ad18a762834069c588e89b2b252cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1da639d4ad18a762834069c588e89b2b252cab", "html_url": "https://github.com/rust-lang/rust/commit/0f1da639d4ad18a762834069c588e89b2b252cab"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "d7887f74cc1c04818f03726901f1b35e664a608e", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/892ef6fa48bd20c037351e0cf8ea12c4c429a868/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ef6fa48bd20c037351e0cf8ea12c4c429a868/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=892ef6fa48bd20c037351e0cf8ea12c4c429a868", "patch": "@@ -102,8 +102,13 @@ fn main() {\n     // FIXME: the fact that core here is excluded is due to core_arch from our stdarch submodule\n     // being broken on the beta compiler with bootstrap passed, so this is a temporary workaround\n     // (we've just snapped, so there are no cfg(bootstrap) related annotations in core).\n-    if stage == \"0\" && crate_name != Some(\"core\") {\n-        cmd.arg(\"--cfg\").arg(\"bootstrap\");\n+    if stage == \"0\" {\n+        if crate_name != Some(\"core\") {\n+            cmd.arg(\"--cfg\").arg(\"bootstrap\");\n+        } else {\n+            // NOTE(eddyb) see FIXME above, except now we need annotations again in core.\n+            cmd.arg(\"--cfg\").arg(\"boostrap_stdarch_ignore_this\");\n+        }\n     }\n \n     // Print backtrace in case of ICE"}, {"sha": "d145f2212f93a639e2c4ab50dff24b5b6b64ef57", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/892ef6fa48bd20c037351e0cf8ea12c4c429a868/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ef6fa48bd20c037351e0cf8ea12c4c429a868/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=892ef6fa48bd20c037351e0cf8ea12c4c429a868", "patch": "@@ -1293,38 +1293,38 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(bootstrap)]\n+    #[cfg(boostrap_stdarch_ignore_this)]\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(bootstrap)]\n+    #[cfg(boostrap_stdarch_ignore_this)]\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(bootstrap)]\n+    #[cfg(boostrap_stdarch_ignore_this)]\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(not(bootstrap))]\n+    #[cfg(not(boostrap_stdarch_ignore_this))]\n     pub fn wrapping_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(not(bootstrap))]\n+    #[cfg(not(boostrap_stdarch_ignore_this))]\n     pub fn wrapping_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(not(bootstrap))]\n+    #[cfg(not(boostrap_stdarch_ignore_this))]\n     pub fn wrapping_mul<T>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds."}, {"sha": "b46e06f8d8ada93b5c8089cef11cfa14dac22e71", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/892ef6fa48bd20c037351e0cf8ea12c4c429a868/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ef6fa48bd20c037351e0cf8ea12c4c429a868/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=892ef6fa48bd20c037351e0cf8ea12c4c429a868", "patch": "@@ -1112,11 +1112,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n \n-                #[cfg(not(bootstrap))] {\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n                     intrinsics::wrapping_add(self, rhs)\n                 }\n             }\n@@ -1141,11 +1141,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n \n-                #[cfg(not(bootstrap))] {\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n                     intrinsics::wrapping_sub(self, rhs)\n                 }\n             }\n@@ -1169,11 +1169,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n                     intrinsics::overflowing_mul(self, rhs)\n                 }\n \n-                #[cfg(not(bootstrap))] {\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n                     intrinsics::wrapping_mul(self, rhs)\n                 }\n             }\n@@ -3049,11 +3049,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n \n-                #[cfg(not(bootstrap))] {\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n                     intrinsics::wrapping_add(self, rhs)\n                 }\n             }\n@@ -3077,11 +3077,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(bootstrap)] {\n+                #[cfg(boostrap_stdarch_ignore_this)] {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n \n-                #[cfg(not(bootstrap))] {\n+                #[cfg(not(boostrap_stdarch_ignore_this))] {\n                     intrinsics::wrapping_sub(self, rhs)\n                 }\n             }\n@@ -3106,11 +3106,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-            #[cfg(bootstrap)] {\n+            #[cfg(boostrap_stdarch_ignore_this)] {\n                 intrinsics::overflowing_mul(self, rhs)\n             }\n \n-            #[cfg(not(bootstrap))] {\n+            #[cfg(not(boostrap_stdarch_ignore_this))] {\n                 intrinsics::wrapping_mul(self, rhs)\n             }\n         }"}]}