{"sha": "d3ce69aee3297e683691ec0123f5a2584a8075a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzY2U2OWFlZTMyOTdlNjgzNjkxZWMwMTIzZjVhMjU4NGE4MDc1YTA=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-27T12:00:08Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-27T12:08:09Z"}, "message": "Remove `TypeRef` from item opts which implement TypeAscriptionOwner", "tree": {"sha": "717f16fc401332de83230f8ae69c4320c2c714cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717f16fc401332de83230f8ae69c4320c2c714cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ce69aee3297e683691ec0123f5a2584a8075a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ce69aee3297e683691ec0123f5a2584a8075a0", "html_url": "https://github.com/rust-lang/rust/commit/d3ce69aee3297e683691ec0123f5a2584a8075a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ce69aee3297e683691ec0123f5a2584a8075a0/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52054e1140cc2af19825ebef2aea06c48cf79955", "url": "https://api.github.com/repos/rust-lang/rust/commits/52054e1140cc2af19825ebef2aea06c48cf79955", "html_url": "https://github.com/rust-lang/rust/commit/52054e1140cc2af19825ebef2aea06c48cf79955"}], "stats": {"total": 67, "additions": 24, "deletions": 43}, "files": [{"sha": "325f1d7b62f30071c4f049415c164702149b166e", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=d3ce69aee3297e683691ec0123f5a2584a8075a0", "patch": "@@ -6,7 +6,7 @@ use std::sync::Arc;\n use ra_arena::{RawId, Arena, impl_arena_id};\n use ra_syntax::{\n     TreeArc,\n-    ast::{self, NameOwner, StructFlavor}\n+    ast::{self, NameOwner, StructFlavor, TypeAscriptionOwner}\n };\n \n use crate::{\n@@ -164,7 +164,7 @@ impl VariantData {\n                     .fields()\n                     .map(|fd| StructFieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n-                        type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n+                        type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n                     })\n                     .collect();\n                 VariantDataInner::Struct(fields)"}, {"sha": "c1654b069b91735696f5ed6e87267096e2f3ae1b", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=d3ce69aee3297e683691ec0123f5a2584a8075a0", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, NameOwner};\n+use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n     Name, AsName, Function, FnSignature,\n@@ -19,7 +19,7 @@ impl FnSignature {\n         let mut has_self_param = false;\n         if let Some(param_list) = node.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n-                let self_type = if let Some(type_ref) = self_param.type_ref() {\n+                let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n                     TypeRef::from_ast(type_ref)\n                 } else {\n                     let self_type = TypeRef::Path(Name::self_type().into());\n@@ -37,7 +37,7 @@ impl FnSignature {\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(param.type_ref());\n+                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n                 params.push(type_ref);\n             }\n         }"}, {"sha": "aa39d28ed986b2d17eb13a2fbd82e8df90a1a53c", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=d3ce69aee3297e683691ec0123f5a2584a8075a0", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     SyntaxNodePtr, AstNode,\n-    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralFlavor}\n+    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralFlavor, TypeAscriptionOwner}\n };\n \n use crate::{\n@@ -709,7 +709,7 @@ impl ExprCollector {\n                 if let Some(pl) = e.param_list() {\n                     for param in pl.params() {\n                         let pat = self.collect_pat_opt(param.pat());\n-                        let type_ref = param.type_ref().map(TypeRef::from_ast);\n+                        let type_ref = param.ascribed_type().map(TypeRef::from_ast);\n                         args.push(pat);\n                         arg_types.push(type_ref);\n                     }\n@@ -790,7 +790,7 @@ impl ExprCollector {\n             .map(|s| match s.kind() {\n                 ast::StmtKind::LetStmt(stmt) => {\n                     let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref = stmt.type_ref().map(TypeRef::from_ast);\n+                    let type_ref = stmt.ascribed_type().map(TypeRef::from_ast);\n                     let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n                     Statement::Let { pat, type_ref, initializer }\n                 }"}, {"sha": "8aa8076482119de839a4b1471600553e8d253c73", "filename": "crates/ra_hir/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs?ref=d3ce69aee3297e683691ec0123f5a2584a8075a0", "patch": "@@ -1,7 +1,7 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n-use ra_syntax::ast;\n+use ra_syntax::ast::{self, TypeAscriptionOwner};\n \n use crate::Path;\n \n@@ -81,7 +81,7 @@ impl TypeRef {\n             FnPointerType(inner) => {\n                 let ret_ty = TypeRef::from_ast_opt(inner.ret_type().and_then(|rt| rt.type_ref()));\n                 let mut params = if let Some(pl) = inner.param_list() {\n-                    pl.params().map(|p| p.type_ref()).map(TypeRef::from_ast_opt).collect()\n+                    pl.params().map(|p| p.ascribed_type()).map(TypeRef::from_ast_opt).collect()\n                 } else {\n                     Vec::new()\n                 };"}, {"sha": "7572225b86c7d388134157c031e9c9cddb26f423", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=d3ce69aee3297e683691ec0123f5a2584a8075a0", "patch": "@@ -629,11 +629,7 @@ impl ast::TypeParamsOwner for ConstDef {}\n impl ast::AttrsOwner for ConstDef {}\n impl ast::DocCommentsOwner for ConstDef {}\n impl ast::TypeAscriptionOwner for ConstDef {}\n-impl ConstDef {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-}\n+impl ConstDef {}\n \n // ContinueExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -1774,10 +1770,6 @@ impl LetStmt {\n         super::child_opt(self)\n     }\n \n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-\n     pub fn initializer(&self) -> Option<&Expr> {\n         super::child_opt(self)\n     }\n@@ -2595,11 +2587,7 @@ impl ast::NameOwner for NamedFieldDef {}\n impl ast::AttrsOwner for NamedFieldDef {}\n impl ast::DocCommentsOwner for NamedFieldDef {}\n impl ast::TypeAscriptionOwner for NamedFieldDef {}\n-impl NamedFieldDef {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-}\n+impl NamedFieldDef {}\n \n // NamedFieldDefList\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -2782,10 +2770,6 @@ impl Param {\n     pub fn pat(&self) -> Option<&Pat> {\n         super::child_opt(self)\n     }\n-\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n }\n \n // ParamList\n@@ -3691,10 +3675,6 @@ impl ToOwned for SelfParam {\n \n impl ast::TypeAscriptionOwner for SelfParam {}\n impl SelfParam {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-\n     pub fn self_kw(&self) -> Option<&SelfKw> {\n         super::child_opt(self)\n     }\n@@ -3826,11 +3806,7 @@ impl ast::TypeParamsOwner for StaticDef {}\n impl ast::AttrsOwner for StaticDef {}\n impl ast::DocCommentsOwner for StaticDef {}\n impl ast::TypeAscriptionOwner for StaticDef {}\n-impl StaticDef {\n-    pub fn type_ref(&self) -> Option<&TypeRef> {\n-        super::child_opt(self)\n-    }\n-}\n+impl StaticDef {}\n \n // Stmt\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "b7a2d1c01b32496af49db9ed3f2e721a1c7c47ec", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d3ce69aee3297e683691ec0123f5a2584a8075a0/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=d3ce69aee3297e683691ec0123f5a2584a8075a0", "patch": "@@ -271,7 +271,15 @@ Grammar(\n             ]\n         ),\n         \"NamedFieldDefList\": (collections: [[\"fields\", \"NamedFieldDef\"]]),\n-        \"NamedFieldDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\", \"TypeAscriptionOwner\"], options: [\"TypeRef\"] ),\n+        \"NamedFieldDef\": (\n+            traits: [\n+                \"VisibilityOwner\",\n+                \"NameOwner\",\n+                \"AttrsOwner\",\n+                \"DocCommentsOwner\",\n+                \"TypeAscriptionOwner\"\n+            ]\n+        ),\n         \"PosFieldDefList\": (collections: [[\"fields\", \"PosFieldDef\"]]),\n         \"PosFieldDef\": ( traits: [\"VisibilityOwner\", \"AttrsOwner\"], options: [\"TypeRef\"]),\n         \"EnumDef\": ( traits: [\n@@ -301,7 +309,6 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n-            options: [\"TypeRef\"]\n         ),\n         \"StaticDef\": (\n             traits: [\n@@ -312,7 +319,6 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n-            options: [\"TypeRef\"]\n         ),\n         \"TypeAliasDef\": (\n             traits: [\n@@ -574,7 +580,6 @@ Grammar(\n         \"LetStmt\": (\n             options: [\n                 [\"pat\", \"Pat\"],\n-                [\"type_ref\", \"TypeRef\"],\n                 [\"initializer\", \"Expr\"],\n             ],\n             traits: [\n@@ -603,14 +608,14 @@ Grammar(\n             ]\n         ),\n         \"SelfParam\": (\n-            options: [\"TypeRef\", \"SelfKw\"],\n+            options: [\"SelfKw\"],\n             traits: [\n                 \"TypeAscriptionOwner\",\n             ]\n         ),\n         \"SelfKw\": (),\n         \"Param\": (\n-            options: [ \"Pat\", \"TypeRef\" ],\n+            options: [ \"Pat\" ],\n             traits: [\n                 \"TypeAscriptionOwner\",\n             ]"}]}