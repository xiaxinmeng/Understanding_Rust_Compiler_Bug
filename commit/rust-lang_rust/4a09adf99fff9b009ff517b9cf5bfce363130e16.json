{"sha": "4a09adf99fff9b009ff517b9cf5bfce363130e16", "node_id": "C_kwDOAAsO6NoAKDRhMDlhZGY5OWZmZjliMDA5ZmY1MTdiOWNmNWJmY2UzNjMxMzBlMTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T06:24:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T06:24:25Z"}, "message": "Auto merge of #101603 - matthiaskrgr:rollup-8y6kf20, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #99207 (Enable eager checks for memory sanitizer)\n - #101253 (fix the suggestion of format for asm_sub_register)\n - #101450 (Add `const_extern_fn` to 1.62 release notes.)\n - #101556 (Tweak future opaque ty pretty printing)\n - #101563 (Link UEFI target documentation from target list)\n - #101593 (Cleanup themes (tooltip))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "401c2e64b2f18f4a3679e8d2d0aac5282f5166d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401c2e64b2f18f4a3679e8d2d0aac5282f5166d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a09adf99fff9b009ff517b9cf5bfce363130e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a09adf99fff9b009ff517b9cf5bfce363130e16", "html_url": "https://github.com/rust-lang/rust/commit/4a09adf99fff9b009ff517b9cf5bfce363130e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a09adf99fff9b009ff517b9cf5bfce363130e16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab32548539ec38a939c1b58599249f3b54130026", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab32548539ec38a939c1b58599249f3b54130026", "html_url": "https://github.com/rust-lang/rust/commit/ab32548539ec38a939c1b58599249f3b54130026"}, {"sha": "8b78fa055e8fc79023334d1a3b32094fb64eb0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b78fa055e8fc79023334d1a3b32094fb64eb0b6", "html_url": "https://github.com/rust-lang/rust/commit/8b78fa055e8fc79023334d1a3b32094fb64eb0b6"}], "stats": {"total": 468, "additions": 269, "deletions": 199}, "files": [{"sha": "89fd4f2703b5d3a2dee4b205e478adc3902b5345", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -217,6 +217,7 @@ Language\n - [Fix constants not getting dropped if part of a diverging expression][94775]\n - [Support unit struct/enum variant in destructuring assignment][95380]\n - [Remove mutable_borrow_reservation_conflict lint and allow the code pattern][96268]\n+- [`const` functions may now specify `extern \"C\"` or `extern \"Rust\"`][95346]\n \n Compiler\n --------\n@@ -306,6 +307,7 @@ and related tools.\n [94872]: https://github.com/rust-lang/rust/pull/94872/\n [95006]: https://github.com/rust-lang/rust/pull/95006/\n [95035]: https://github.com/rust-lang/rust/pull/95035/\n+[95346]: https://github.com/rust-lang/rust/pull/95346/\n [95372]: https://github.com/rust-lang/rust/pull/95372/\n [95380]: https://github.com/rust-lang/rust/pull/95380/\n [95431]: https://github.com/rust-lang/rust/pull/95431/"}, {"sha": "26f5225f6b445b820518fc74c26cada13e98308f", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -19,6 +19,7 @@ use rustc_target::abi::call::ArgAbi;\n pub use rustc_target::abi::call::*;\n use rustc_target::abi::{self, HasDataLayout, Int};\n pub use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::SanitizerSet;\n \n use libc::c_uint;\n use smallvec::SmallVec;\n@@ -90,6 +91,13 @@ fn get_attrs<'ll>(this: &ArgAttributes, cx: &CodegenCx<'ll, '_>) -> SmallVec<[&'\n         if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n             attrs.push(llvm::AttributeKind::NoAlias.create_attr(cx.llcx));\n         }\n+    } else if cx.tcx.sess.opts.unstable_opts.sanitizer.contains(SanitizerSet::MEMORY) {\n+        // If we're not optimising, *but* memory sanitizer is on, emit noundef, since it affects\n+        // memory sanitizer's behavior.\n+\n+        if regular.contains(ArgAttribute::NoUndef) {\n+            attrs.push(llvm::AttributeKind::NoUndef.create_attr(cx.llcx));\n+        }\n     }\n \n     attrs"}, {"sha": "ea17c1de9b70037c48ce828ea917c16e0434f591", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -238,7 +238,6 @@ language_item_table! {\n     Future,                  sym::future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n     GeneratorState,          sym::generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n     Generator,               sym::generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n-    GeneratorReturn,         sym::generator_return,    generator_return,           Target::AssocTy,        GenericRequirement::None;\n     Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n     Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n "}, {"sha": "24e18826048983f2e51cc4f0f2546328b8aa16a4", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -134,7 +134,12 @@ extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool\n   const bool CompileKernel = false;\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n-      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n+#if LLVM_VERSION_GE(14, 0)\n+      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel, /*EagerChecks=*/true}\n+#else\n+      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}\n+#endif\n+  ));\n #else\n   report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n #endif\n@@ -930,10 +935,18 @@ LLVMRustOptimizeWithNewPassManager(\n \n   if (SanitizerOptions) {\n     if (SanitizerOptions->SanitizeMemory) {\n+#if LLVM_VERSION_GE(14, 0)\n+      MemorySanitizerOptions Options(\n+          SanitizerOptions->SanitizeMemoryTrackOrigins,\n+          SanitizerOptions->SanitizeMemoryRecover,\n+          /*CompileKernel=*/false,\n+          /*EagerChecks=*/true);\n+#else\n       MemorySanitizerOptions Options(\n           SanitizerOptions->SanitizeMemoryTrackOrigins,\n           SanitizerOptions->SanitizeMemoryRecover,\n           /*CompileKernel=*/false);\n+#endif\n       OptimizerLastEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n #if LLVM_VERSION_GE(14, 0) && LLVM_VERSION_LT(16, 0)"}, {"sha": "5166372878fe958c3e7aa94bb2a8136e7ab48b10", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -922,12 +922,14 @@ pub trait PrettyPrinter<'tcx>:\n                         // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks,\n                         // unless we can find out what generator return type it comes from.\n                         let term = if let Some(ty) = term.skip_binder().ty()\n-                            && let ty::Projection(ty::ProjectionTy { item_def_id, substs }) = ty.kind()\n-                            && Some(*item_def_id) == tcx.lang_items().generator_return()\n+                            && let ty::Projection(proj) = ty.kind()\n+                            && let assoc = tcx.associated_item(proj.item_def_id)\n+                            && assoc.trait_container(tcx) == tcx.lang_items().gen_trait()\n+                            && assoc.name == rustc_span::sym::Return\n                         {\n                             if let ty::Generator(_, substs, _) = substs.type_at(0).kind() {\n                                 let return_ty = substs.as_generator().return_ty();\n-                                if !return_ty.is_ty_infer() {\n+                                if !return_ty.is_ty_var() {\n                                     return_ty.into()\n                                 } else {\n                                     continue;"}, {"sha": "f2876344c65ede23ebd8577e2ac7753d279f0923", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -763,7 +763,6 @@ symbols! {\n         gen_future,\n         gen_kill,\n         generator,\n-        generator_return,\n         generator_state,\n         generators,\n         generic_arg_infer,"}, {"sha": "d8fe63dbf084aee940e8bfb7a283a647c6e6b754", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -333,10 +333,10 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n                         let mut err = lint.build(msg);\n                         err.span_label(expr.span, \"for this argument\");\n                         err.help(&format!(\n-                            \"use the `{suggested_modifier}` modifier to have the register formatted as `{suggested_result}`\",\n+                            \"use `{{{idx}:{suggested_modifier}}}` to have the register formatted as `{suggested_result}`\",\n                         ));\n                         err.help(&format!(\n-                            \"or use the `{default_modifier}` modifier to keep the default formatting of `{default_result}`\",\n+                            \"or use `{{{idx}:{default_modifier}}}` to keep the default formatting of `{default_result}`\",\n                         ));\n                         err.emit();\n                     },"}, {"sha": "3ebd6f8cdbdc03e598b2d2c0a1d55c2b05a1533f", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -83,7 +83,7 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n-    #[lang = \"generator_return\"]\n+    #[cfg_attr(bootstrap, lang = \"generator_return\")]\n     type Return;\n \n     /// Resumes the execution of this generator."}, {"sha": "fe090a73327ce2f538bbbafb29ddb1b138f2b9ff", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -213,7 +213,7 @@ target | std | host | notes\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n-`aarch64-unknown-uefi` | * |  | ARM64 UEFI\n+[`aarch64-unknown-uefi`](platform-support/unknown-uefi.md) | * |  | ARM64 UEFI\n `aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n `aarch64-unknown-netbsd` | \u2713 | \u2713 |\n [`aarch64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | ARM64 OpenBSD\n@@ -250,7 +250,7 @@ target | std | host | notes\n `i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n `i686-unknown-netbsd` | \u2713 | \u2713 | NetBSD/i386 with SSE2\n [`i686-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 32-bit OpenBSD\n-`i686-unknown-uefi` | * |  | 32-bit UEFI\n+[`i686-unknown-uefi`](platform-support/unknown-uefi.md) | * |  | 32-bit UEFI\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n `i686-wrs-vxworks` | ? |  |\n@@ -307,7 +307,7 @@ target | std | host | notes\n `x86_64-unknown-l4re-uclibc` | ? |  |\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n [`x86_64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 64-bit OpenBSD\n-`x86_64-unknown-uefi` | * |  | 64-bit UEFI\n+[`x86_64-unknown-uefi`](platform-support/unknown-uefi.md) | * |  | 64-bit UEFI\n `x86_64-uwp-windows-gnu` | \u2713 |  |\n `x86_64-uwp-windows-msvc` | \u2713 |  |\n `x86_64-wrs-vxworks` | ? |  |"}, {"sha": "22217a390124647e577231428547c00d5f36d487", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -1160,6 +1160,42 @@ pre.rust .question-mark {\n \tfont-weight: bold;\n }\n \n+pre.compile_fail,\n+pre.should_panic {\n+\tborder-left: 2px solid var(--codeblock-error-color);\n+}\n+\n+pre.ignore {\n+\tborder-left: 2px solid var(--codeblock-ignore-color);\n+}\n+\n+pre.compile_fail:hover, .information:hover + .example-wrap pre.compile_fail,\n+pre.should_panic:hover, .information:hover + .example-wrap pre.should_panic {\n+\tborder-left: 2px solid var(--codeblock-error-hover-color);\n+}\n+\n+pre.ignore:hover, .information:hover + .example-wrap pre.ignore {\n+\tborder-left: 2px solid var(--codeblock-ignore-hover-color);\n+}\n+\n+.tooltip.compile_fail,\n+.tooltip.should_panic {\n+\tcolor: var(--codeblock-error-color);\n+}\n+\n+.tooltip.ignore {\n+\tcolor:  var(--codeblock-ignore-color);\n+}\n+\n+.information > .compile_fail:hover,\n+.information > .should_panic:hover {\n+\tcolor: var(--codeblock-error-hover-color);\n+}\n+\n+.information > .ignore:hover {\n+\tcolor: var(--codeblock-ignore-hover-color);\n+}\n+\n a.test-arrow {\n \tdisplay: inline-block;\n \tvisibility: hidden;"}, {"sha": "74de113495c2ed017d218d5b64dea56e499463b2", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -23,6 +23,10 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--copy-path-button-color: #fff;\n \t--copy-path-img-filter: invert(70%);\n \t--copy-path-img-hover-filter: invert(100%);\n+\t--codeblock-error-hover-color: rgb(255, 0, 0);\n+\t--codeblock-error-color: rgba(255, 0, 0, .5);\n+\t--codeblock-ignore-hover-color: rgb(255, 142, 0);\n+\t--codeblock-ignore-color: rgba(255, 142, 0, .6);\n }\n \n .slider {\n@@ -244,54 +248,6 @@ a.test-arrow:hover {\n \tborder-right: 3px solid rgba(255, 180, 76, 0.85);\n }\n \n-pre.compile_fail {\n-\tborder-left: 2px solid rgba(255,0,0,.4);\n-}\n-\n-pre.compile_fail:hover, .information:hover + pre.compile_fail {\n-\tborder-left: 2px solid #f00;\n-}\n-\n-pre.should_panic {\n-\tborder-left: 2px solid rgba(255,0,0,.4);\n-}\n-\n-pre.should_panic:hover, .information:hover + pre.should_panic {\n-\tborder-left: 2px solid #f00;\n-}\n-\n-pre.ignore {\n-\tborder-left: 2px solid rgba(255,142,0,.6);\n-}\n-\n-pre.ignore:hover, .information:hover + pre.ignore {\n-\tborder-left: 2px solid #ff9200;\n-}\n-\n-.tooltip.compile_fail {\n-\tcolor: rgba(255,0,0,.5);\n-}\n-\n-.information > .compile_fail:hover {\n-\tcolor: #f00;\n-}\n-\n-.tooltip.should_panic {\n-\tcolor: rgba(255,0,0,.5);\n-}\n-\n-.information > .should_panic:hover {\n-\tcolor: #f00;\n-}\n-\n-.tooltip.ignore {\n-\tcolor: rgba(255,142,0,.6);\n-}\n-\n-.information > .ignore:hover {\n-\tcolor: #ff9200;\n-}\n-\n .search-failed a {\n \tcolor: #39AFD7;\n }"}, {"sha": "153b40f05d8de108e28fdea657dc686e4a7c01bb", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -18,6 +18,10 @@\n \t--copy-path-button-color: #999;\n \t--copy-path-img-filter: invert(50%);\n \t--copy-path-img-hover-filter: invert(65%);\n+\t--codeblock-error-hover-color: rgb(255, 0, 0);\n+\t--codeblock-error-color: rgba(255, 0, 0, .5);\n+\t--codeblock-ignore-hover-color: rgb(255, 142, 0);\n+\t--codeblock-ignore-color: rgba(255, 142, 0, .6);\n }\n \n .slider {\n@@ -194,54 +198,6 @@ a.test-arrow:hover{\n \tborder-right: 3px solid #bb7410;\n }\n \n-pre.compile_fail {\n-\tborder-left: 2px solid rgba(255,0,0,.8);\n-}\n-\n-pre.compile_fail:hover, .information:hover + pre.compile_fail {\n-\tborder-left: 2px solid #f00;\n-}\n-\n-pre.should_panic {\n-\tborder-left: 2px solid rgba(255,0,0,.8);\n-}\n-\n-pre.should_panic:hover, .information:hover + pre.should_panic {\n-\tborder-left: 2px solid #f00;\n-}\n-\n-pre.ignore {\n-\tborder-left: 2px solid rgba(255,142,0,.6);\n-}\n-\n-pre.ignore:hover, .information:hover + pre.ignore {\n-\tborder-left: 2px solid #ff9200;\n-}\n-\n-.tooltip.compile_fail {\n-\tcolor: rgba(255,0,0,.8);\n-}\n-\n-.information > .compile_fail:hover {\n-\tcolor: #f00;\n-}\n-\n-.tooltip.should_panic {\n-\tcolor: rgba(255,0,0,.8);\n-}\n-\n-.information > .should_panic:hover {\n-\tcolor: #f00;\n-}\n-\n-.tooltip.ignore {\n-\tcolor: rgba(255,142,0,.6);\n-}\n-\n-.information > .ignore:hover {\n-\tcolor: #ff9200;\n-}\n-\n .search-failed a {\n \tcolor: #0089ff;\n }"}, {"sha": "9ced9e7b5ce32ea8e4754e7fd71dba5a78a7e424", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -18,6 +18,10 @@\n \t--copy-path-button-color: #999;\n \t--copy-path-img-filter: invert(50%);\n \t--copy-path-img-hover-filter: invert(35%);\n+\t--codeblock-error-hover-color: rgb(255, 0, 0);\n+\t--codeblock-error-color: rgba(255, 0, 0, .5);\n+\t--codeblock-ignore-hover-color: rgb(255, 142, 0);\n+\t--codeblock-ignore-color: rgba(255, 142, 0, .6);\n }\n \n .slider {\n@@ -180,54 +184,6 @@ a.test-arrow:hover{\n \tborder-right: 3px solid #AD7C37;\n }\n \n-pre.compile_fail {\n-\tborder-left: 2px solid rgba(255,0,0,.5);\n-}\n-\n-pre.compile_fail:hover, .information:hover + pre.compile_fail {\n-\tborder-left: 2px solid #f00;\n-}\n-\n-pre.should_panic {\n-\tborder-left: 2px solid rgba(255,0,0,.5);\n-}\n-\n-pre.should_panic:hover, .information:hover + pre.should_panic {\n-\tborder-left: 2px solid #f00;\n-}\n-\n-pre.ignore {\n-\tborder-left: 2px solid rgba(255,142,0,.6);\n-}\n-\n-pre.ignore:hover, .information:hover + pre.ignore {\n-\tborder-left: 2px solid #ff9200;\n-}\n-\n-.tooltip.compile_fail {\n-\tcolor: rgba(255,0,0,.5);\n-}\n-\n-.information > .compile_fail:hover {\n-\tcolor: #f00;\n-}\n-\n-.tooltip.should_panic {\n-\tcolor: rgba(255,0,0,.5);\n-}\n-\n-.information > .should_panic:hover {\n-\tcolor: #f00;\n-}\n-\n-.tooltip.ignore {\n-\tcolor: rgba(255,142,0,.6);\n-}\n-\n-.information > .ignore:hover {\n-\tcolor: #ff9200;\n-}\n-\n .search-failed a {\n \tcolor: #3873AD;\n }"}, {"sha": "8d399a9a589767f21fb112d7844f11647d0ce3af", "filename": "src/test/rustdoc-gui/code-tags.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Frustdoc-gui%2Fcode-tags.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Frustdoc-gui%2Fcode-tags.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-tags.goml?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -1,9 +1,9 @@\n // This test ensures that items and documentation code blocks are wrapped in <pre><code>\n goto: file://|DOC_PATH|/test_docs/fn.foo.html\n size: (1080, 600)\n-// There should be three doc codeblocks\n+// There should be four doc codeblocks.\n // Check that their content is inside <pre><code>\n-assert-count: (\".example-wrap pre > code\", 3)\n+assert-count: (\".example-wrap pre > code\", 4)\n // Check that function signature is inside <pre><code>\n assert: \"pre.rust.fn > code\"\n "}, {"sha": "a0bb40fce8e72de8c6fed0801b4af86f62d32db6", "filename": "src/test/rustdoc-gui/codeblock-tooltip.goml", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -0,0 +1,96 @@\n+// Checking the colors of the codeblocks tooltips.\n+goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+show-text: true\n+\n+// Dark theme.\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+// compile_fail block\n+assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+\n+move-cursor-to: \".docblock .information .compile_fail\"\n+\n+assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+\n+// should_panic block\n+assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+\n+move-cursor-to: \".docblock .information .should_panic\"\n+\n+assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+\n+// ignore block\n+assert-css: (\".docblock .information .ignore\", {\"color\": \"rgba(255, 142, 0, 0.6)\"})\n+assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n+\n+move-cursor-to: \".docblock .information .ignore\"\n+\n+assert-css: (\".docblock .information .ignore\", {\"color\": \"rgb(255, 142, 0)\"})\n+assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})\n+\n+\n+// Light theme.\n+local-storage: {\"rustdoc-theme\": \"light\"}\n+reload:\n+\n+assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+\n+move-cursor-to: \".docblock .information .compile_fail\"\n+\n+assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+\n+// should_panic block\n+assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+\n+move-cursor-to: \".docblock .information .should_panic\"\n+\n+assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+\n+// ignore block\n+assert-css: (\".docblock .information .ignore\", {\"color\": \"rgba(255, 142, 0, 0.6)\"})\n+assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n+\n+move-cursor-to: \".docblock .information .ignore\"\n+\n+assert-css: (\".docblock .information .ignore\", {\"color\": \"rgb(255, 142, 0)\"})\n+assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})\n+\n+\n+// Ayu theme.\n+local-storage: {\"rustdoc-theme\": \"ayu\"}\n+reload:\n+\n+assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+\n+move-cursor-to: \".docblock .information .compile_fail\"\n+\n+assert-css: (\".docblock .information .compile_fail\", {\"color\": \"rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap .compile_fail\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+\n+// should_panic block\n+assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgba(255, 0, 0, 0.5)\"})\n+assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"})\n+\n+move-cursor-to: \".docblock .information .should_panic\"\n+\n+assert-css: (\".docblock .information .should_panic\", {\"color\": \"rgb(255, 0, 0)\"})\n+assert-css: (\".docblock .example-wrap .should_panic\", {\"border-left\": \"2px solid rgb(255, 0, 0)\"})\n+\n+// ignore block\n+assert-css: (\".docblock .information .ignore\", {\"color\": \"rgba(255, 142, 0, 0.6)\"})\n+assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"})\n+\n+move-cursor-to: \".docblock .information .ignore\"\n+\n+assert-css: (\".docblock .information .ignore\", {\"color\": \"rgb(255, 142, 0)\"})\n+assert-css: (\".docblock .example-wrap .ignore\", {\"border-left\": \"2px solid rgb(255, 142, 0)\"})"}, {"sha": "4eedf7f15c3d4f8df273f9a726d533d1cfa178aa", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -28,6 +28,12 @@ use std::fmt;\n /// Let's say I'm just some text will ya?\n /// ```\n ///\n+/// A failing to run one:\n+///\n+/// ```should_panic\n+/// panic!(\"tadam\");\n+/// ```\n+///\n /// An inlined `code`!\n pub fn foo() {}\n "}, {"sha": "49292982eec7c99dfdc19dfde108d74a2b21026f", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -5,89 +5,89 @@ LL |         asm!(\"{}\", in(reg) 0u8);\n    |               ^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:50:15\n    |\n LL |         asm!(\"{}\", in(reg) 0u16);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:52:15\n    |\n LL |         asm!(\"{}\", in(reg) 0i32);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:54:15\n    |\n LL |         asm!(\"{}\", in(reg) 0f32);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:57:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0i16);\n    |               ^^            ---- for this argument\n    |\n-   = help: use the `h` modifier to have the register formatted as `h0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:h}` to have the register formatted as `h0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:59:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f32);\n    |               ^^            ---- for this argument\n    |\n-   = help: use the `s` modifier to have the register formatted as `s0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:s}` to have the register formatted as `s0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:61:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f64);\n    |               ^^            ---- for this argument\n    |\n-   = help: use the `d` modifier to have the register formatted as `d0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:d}` to have the register formatted as `d0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:63:15\n    |\n LL |         asm!(\"{}\", in(vreg_low16) 0f64);\n    |               ^^                  ---- for this argument\n    |\n-   = help: use the `d` modifier to have the register formatted as `d0`\n-   = help: or use the `v` modifier to keep the default formatting of `v0`\n+   = help: use `{0:d}` to have the register formatted as `d0`\n+   = help: or use `{0:v}` to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:66:15\n    |\n LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:68:15\n    |\n LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    |               ^^^                 ---- for this argument\n    |\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n error: type `i128` cannot be used with this register class\n   --> $DIR/type-check-3.rs:73:28"}, {"sha": "5dac693cc2740063d03e182ad3fd4237b0284fe8", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "5dac693cc2740063d03e182ad3fd4237b0284fe8", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `w` modifier to have the register formatted as `w0`\n-   = help: or use the `x` modifier to keep the default formatting of `x0`\n+   = help: use `{0:w}` to have the register formatted as `w0`\n+   = help: or use `{0:x}` to keep the default formatting of `x0`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "b29b74bac80b1d075938ab02f2a5636181dc3d74", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `e` modifier to have the register formatted as `eax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:e}` to have the register formatted as `eax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "b29b74bac80b1d075938ab02f2a5636181dc3d74", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -190,8 +190,8 @@ LL |         asm!(\"{:foo}\", in(reg) foo);\n    |               ^^^^^^           --- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `e` modifier to have the register formatted as `eax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:e}` to have the register formatted as `eax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n error: aborting due to 21 previous errors; 1 warning emitted\n "}, {"sha": "366038fea2340ac5ddb2d6d6db1167c4c299f8c7", "filename": "src/test/ui/asm/x86_64/type-check-3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -45,35 +45,35 @@ LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n    |\n    = note: `#[warn(asm_sub_register)]` on by default\n-   = help: use the `x` modifier to have the register formatted as `ax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:x}` to have the register formatted as `ax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:36:15\n    |\n LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    |               ^^^                 ---- for this argument\n    |\n-   = help: use the `x` modifier to have the register formatted as `ax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:x}` to have the register formatted as `ax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:38:15\n    |\n LL |         asm!(\"{}\", in(reg) 0i32);\n    |               ^^           ---- for this argument\n    |\n-   = help: use the `e` modifier to have the register formatted as `eax`\n-   = help: or use the `r` modifier to keep the default formatting of `rax`\n+   = help: use `{0:e}` to have the register formatted as `eax`\n+   = help: or use `{0:r}` to keep the default formatting of `rax`\n \n warning: formatting may not be suitable for sub-register argument\n   --> $DIR/type-check-3.rs:41:15\n    |\n LL |         asm!(\"{}\", in(ymm_reg) 0i64);\n    |               ^^               ---- for this argument\n    |\n-   = help: use the `x` modifier to have the register formatted as `xmm0`\n-   = help: or use the `y` modifier to keep the default formatting of `ymm0`\n+   = help: use `{0:x}` to have the register formatted as `xmm0`\n+   = help: or use `{0:y}` to keep the default formatting of `ymm0`\n \n error: type `i8` cannot be used with this register class\n   --> $DIR/type-check-3.rs:52:28"}, {"sha": "8a0590bf16c529efee1814baf539ba006871cff4", "filename": "src/test/ui/sanitize/memory-eager.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory-eager.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -0,0 +1,38 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-memory\n+// min-llvm-version: 14.0.0\n+//\n+// revisions: unoptimized optimized\n+//\n+// [optimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// [unoptimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins\n+//\n+// run-fail\n+// error-pattern: MemorySanitizer: use-of-uninitialized-value\n+// error-pattern: Uninitialized value was created by an allocation\n+// error-pattern: in the stack frame of function 'random'\n+//\n+// This test case intentionally limits the usage of the std,\n+// since it will be linked with an uninstrumented version of it.\n+\n+#![feature(core_intrinsics)]\n+#![feature(start)]\n+#![feature(bench_black_box)]\n+\n+use std::hint::black_box;\n+use std::mem::MaybeUninit;\n+\n+#[inline(never)]\n+#[no_mangle]\n+#[allow(invalid_value)]\n+fn random() -> char {\n+    let r = unsafe { MaybeUninit::uninit().assume_init() };\n+    // Avoid optimizing everything out.\n+    black_box(r)\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    random();\n+    0\n+}"}, {"sha": "14d4de65dd378ed0358cbda7de43503b7a1e5630", "filename": "src/test/ui/sanitize/memory.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory.rs?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -1,7 +1,10 @@\n // needs-sanitizer-support\n // needs-sanitizer-memory\n //\n-// compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// revisions: unoptimized optimized\n+//\n+// [optimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// [unoptimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins\n //\n // run-fail\n // error-pattern: MemorySanitizer: use-of-uninitialized-value\n@@ -22,9 +25,9 @@ use std::mem::MaybeUninit;\n #[inline(never)]\n #[no_mangle]\n fn random() -> [isize; 32] {\n-    let r = unsafe { MaybeUninit::uninit().assume_init() };\n+    let r = MaybeUninit::uninit();\n     // Avoid optimizing everything out.\n-    black_box(r)\n+    unsafe { std::intrinsics::volatile_load(r.as_ptr()) }\n }\n \n #[inline(never)]\n@@ -39,6 +42,6 @@ fn xor(a: &[isize]) -> isize {\n \n #[start]\n fn main(_: isize, _: *const *const u8) -> isize {\n-    let r = random();\n+    let r = black_box(random as fn() -> [isize; 32])();\n     xor(&r)\n }"}, {"sha": "77cef485f30e9a477108aa3e29914a0544e46f80", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a09adf99fff9b009ff517b9cf5bfce363130e16/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=4a09adf99fff9b009ff517b9cf5bfce363130e16", "patch": "@@ -91,7 +91,7 @@ LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                             ------------------------------- the found opaque type\n    |\n    = note:   expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = {integer}>`\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}]}