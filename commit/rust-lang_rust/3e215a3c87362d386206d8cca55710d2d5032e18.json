{"sha": "3e215a3c87362d386206d8cca55710d2d5032e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjE1YTNjODczNjJkMzg2MjA2ZDhjY2E1NTcxMGQyZDUwMzJlMTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-11T14:01:48Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T08:53:08Z"}, "message": "Typeck existential types properly", "tree": {"sha": "181ea73a682c78cc8e2d3a8307bce31e88bd9c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/181ea73a682c78cc8e2d3a8307bce31e88bd9c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e215a3c87362d386206d8cca55710d2d5032e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e215a3c87362d386206d8cca55710d2d5032e18", "html_url": "https://github.com/rust-lang/rust/commit/3e215a3c87362d386206d8cca55710d2d5032e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e215a3c87362d386206d8cca55710d2d5032e18/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d2ebb0adbe677a811ae130523ebceb285a8029", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d2ebb0adbe677a811ae130523ebceb285a8029", "html_url": "https://github.com/rust-lang/rust/commit/53d2ebb0adbe677a811ae130523ebceb285a8029"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "e4a93b09e98e819de0492cb2088dea2dfcdef885", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e215a3c87362d386206d8cca55710d2d5032e18/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e215a3c87362d386206d8cca55710d2d5032e18/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3e215a3c87362d386206d8cca55710d2d5032e18", "patch": "@@ -1309,6 +1309,7 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n       hir::ItemKind::Union(..) => {\n         check_union(tcx, it.id, it.span);\n       }\n+      hir::ItemKind::Existential(..) |\n       hir::ItemKind::Ty(..) => {\n         let def_id = tcx.hir.local_def_id(it.id);\n         let pty_ty = tcx.type_of(def_id);"}, {"sha": "a241ba53461ff97ac595d5d404cbf26ff9a56f8b", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e215a3c87362d386206d8cca55710d2d5032e18/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e215a3c87362d386206d8cca55710d2d5032e18/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=3e215a3c87362d386206d8cca55710d2d5032e18", "patch": "@@ -23,7 +23,9 @@ fn main() {\n // return type, which can't depend on the obligation.\n fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n+    //~| ERROR cycle detected\n     send(cycle2().clone());\n+    //~^ ERROR cannot be sent between threads safely\n \n     Rc::new(Cell::new(5))\n }"}, {"sha": "10711d1cd8cece6719d8f9b1e6fefaccfd203e2b", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3e215a3c87362d386206d8cca55710d2d5032e18/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e215a3c87362d386206d8cca55710d2d5032e18/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=3e215a3c87362d386206d8cca55710d2d5032e18", "patch": "@@ -1,29 +1,67 @@\n-error[E0391]: cycle detected when processing `cycle1`\n+error[E0391]: cycle detected when processing `cycle1::{{impl-Trait}}`\n+  --> $DIR/auto-trait-leak.rs:24:16\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   |                ^^^^^^^^^^\n+   |\n+note: ...which requires processing `cycle1`...\n   --> $DIR/auto-trait-leak.rs:24:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:31:16\n+  --> $DIR/auto-trait-leak.rs:33:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:31:1\n+  --> $DIR/auto-trait-leak.rs:33:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-note: ...which requires processing `cycle1::{{impl-Trait}}`...\n+   = note: ...which again requires processing `cycle1::{{impl-Trait}}`, completing the cycle\n+\n+error[E0391]: cycle detected when processing `cycle1::{{impl-Trait}}`\n   --> $DIR/auto-trait-leak.rs:24:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n-   = note: ...which again requires processing `cycle1`, completing the cycle\n-note: cycle used when type-checking all item bodies\n+   |\n+note: ...which requires processing `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:24:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n+note: ...which requires processing `cycle2::{{impl-Trait}}`...\n+  --> $DIR/auto-trait-leak.rs:33:16\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   |                ^^^^^^^^^^\n+note: ...which requires processing `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:33:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires processing `cycle1::{{impl-Trait}}`, completing the cycle\n+\n+error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n+  --> $DIR/auto-trait-leak.rs:27:5\n+   |\n+LL |     send(cycle2().clone());\n+   |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n+   |\n+   = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n+   = note: required because it appears within the type `impl std::clone::Clone`\n+note: required by `send`\n+  --> $DIR/auto-trait-leak.rs:16:1\n+   |\n+LL | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0391`.\n+Some errors occurred: E0277, E0391.\n+For more information about an error, try `rustc --explain E0277`."}]}