{"sha": "186a430853176f0ff5f69c4323bd12fb6f07d6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NmE0MzA4NTMxNzZmMGZmNWY2OWM0MzIzYmQxMmZiNmYwN2Q2ZWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-16T19:59:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-16T19:59:57Z"}, "message": "pit-of-successify tree editor", "tree": {"sha": "c7c2d2521f76f56f1e808edc8f88a2fd29dd166a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7c2d2521f76f56f1e808edc8f88a2fd29dd166a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186a430853176f0ff5f69c4323bd12fb6f07d6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186a430853176f0ff5f69c4323bd12fb6f07d6ed", "html_url": "https://github.com/rust-lang/rust/commit/186a430853176f0ff5f69c4323bd12fb6f07d6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186a430853176f0ff5f69c4323bd12fb6f07d6ed/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34555593caeea25d460703e25c446b13132b1c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/34555593caeea25d460703e25c446b13132b1c5b", "html_url": "https://github.com/rust-lang/rust/commit/34555593caeea25d460703e25c446b13132b1c5b"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "449b058fbc9becb38324077d3f1b97293a2e8079", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/186a430853176f0ff5f69c4323bd12fb6f07d6ed/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186a430853176f0ff5f69c4323bd12fb6f07d6ed/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=186a430853176f0ff5f69c4323bd12fb6f07d6ed", "patch": "@@ -102,17 +102,17 @@ impl GenericParamsOwnerEdit for ast::Enum {\n fn create_where_clause(position: Position) {\n     let where_clause: SyntaxElement =\n         make::where_clause(empty()).clone_for_update().syntax().clone().into();\n-    ted::insert_ws(position, where_clause);\n+    ted::insert(position, where_clause);\n }\n \n impl ast::WhereClause {\n     pub fn add_predicate(&self, predicate: ast::WherePred) {\n         if let Some(pred) = self.predicates().last() {\n             if !pred.syntax().siblings_with_tokens(Direction::Next).any(|it| it.kind() == T![,]) {\n-                ted::append_child(self.syntax().clone(), make::token(T![,]));\n+                ted::append_child_raw(self.syntax().clone(), make::token(T![,]));\n             }\n         }\n-        ted::append_child_ws(self.syntax().clone(), predicate.syntax().clone())\n+        ted::append_child(self.syntax().clone(), predicate.syntax().clone())\n     }\n }\n "}, {"sha": "76f950ef9b62a0917ae86a39f179a94a300b56d6", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/186a430853176f0ff5f69c4323bd12fb6f07d6ed/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186a430853176f0ff5f69c4323bd12fb6f07d6ed/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=186a430853176f0ff5f69c4323bd12fb6f07d6ed", "patch": "@@ -1,4 +1,7 @@\n-//! Primitive tree editor, ed for trees\n+//! Primitive tree editor, ed for trees.\n+//!\n+//! The `_raw`-suffixed functions insert elements as is, unsuffixed versions fix\n+//! up elements around the edges.\n use std::ops::RangeInclusive;\n \n use parser::T;\n@@ -43,13 +46,13 @@ impl Position {\n     }\n }\n \n-pub fn insert_ws(position: Position, elem: impl Into<SyntaxElement>) {\n-    insert_all_ws(position, vec![elem.into()])\n-}\n pub fn insert(position: Position, elem: impl Into<SyntaxElement>) {\n     insert_all(position, vec![elem.into()])\n }\n-pub fn insert_all_ws(position: Position, mut elements: Vec<SyntaxElement>) {\n+pub fn insert_raw(position: Position, elem: impl Into<SyntaxElement>) {\n+    insert_all_raw(position, vec![elem.into()])\n+}\n+pub fn insert_all(position: Position, mut elements: Vec<SyntaxElement>) {\n     if let Some(first) = elements.first() {\n         if let Some(ws) = ws_before(&position, first) {\n             elements.insert(0, ws.into())\n@@ -60,9 +63,9 @@ pub fn insert_all_ws(position: Position, mut elements: Vec<SyntaxElement>) {\n             elements.push(ws.into())\n         }\n     }\n-    insert_all(position, elements)\n+    insert_all_raw(position, elements)\n }\n-pub fn insert_all(position: Position, elements: Vec<SyntaxElement>) {\n+pub fn insert_all_raw(position: Position, elements: Vec<SyntaxElement>) {\n     let (parent, index) = match position.repr {\n         PositionRepr::FirstChild(parent) => (parent, 0),\n         PositionRepr::After(child) => (child.parent().unwrap(), child.index() + 1),\n@@ -89,14 +92,14 @@ pub fn replace_all(range: RangeInclusive<SyntaxElement>, new: Vec<SyntaxElement>\n     parent.splice_children(start..end + 1, new)\n }\n \n-pub fn append_child_ws(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n-    let position = Position::last_child_of(node);\n-    insert_ws(position, child)\n-}\n pub fn append_child(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n     let position = Position::last_child_of(node);\n     insert(position, child)\n }\n+pub fn append_child_raw(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n+    let position = Position::last_child_of(node);\n+    insert_raw(position, child)\n+}\n \n fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n     let prev = match &position.repr {"}]}