{"sha": "74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YTZlZmJmMDBlMmZmZjA4YWZlNjIzYTBhMDExNTViNGJlYmQwYTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-20T14:44:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:25:22Z"}, "message": "feature-gate member constraints outside of async-await\n\nMinimizes risk.", "tree": {"sha": "b9df1ba746aff4561a2414e91f77d3a78f2ab48a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9df1ba746aff4561a2414e91f77d3a78f2ab48a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "html_url": "https://github.com/rust-lang/rust/commit/74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc75c699c1be9bf6c735351b7b07ab7d0569cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc75c699c1be9bf6c735351b7b07ab7d0569cdf", "html_url": "https://github.com/rust-lang/rust/commit/cbc75c699c1be9bf6c735351b7b07ab7d0569cdf"}], "stats": {"total": 154, "additions": 147, "deletions": 7}, "files": [{"sha": "71f2a10d092e637bcf9d069e42ed4a52a73acc1b", "filename": "src/doc/unstable-book/src/language-features/member-constraints.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -0,0 +1,29 @@\n+# `member_constraints`\n+\n+The tracking issue for this feature is: [#61977]\n+\n+[#61977]: https://github.com/rust-lang/rust/issues/61977\n+\n+------------------------\n+\n+The `member_constraints` feature gate lets you use `impl Trait` syntax with\n+multiple unrelated lifetime parameters.\n+\n+A simple example is:\n+\n+```rust\n+#![feature(member_constraints)]\n+\n+trait Trait { }\n+impl<T> Trait<'_, '_> for T {}\n+\n+fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n+  (x, y)\n+}\n+\n+fn main() { }\n+```\n+\n+Without the `member_constraints` feature gate, the above example is an\n+error because both `'a` and `'b` appear in the impl Trait bounds, but\n+neither outlives the other."}, {"sha": "9c2cc5815de2ec4863ea6f4502a14619b5ad5405", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -10,6 +10,7 @@ use crate::ty::subst::{InternalSubsts, Kind, SubstsRef, UnpackedKind};\n use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n use crate::util::nodemap::DefIdMap;\n use errors::DiagnosticBuilder;\n+use rustc::session::config::nightly_options;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n@@ -398,6 +399,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             abstract_type_generics,\n                             opaque_defn,\n                             def_id,\n+                            lr,\n+                            subst_arg,\n                         );\n                     }\n                 }\n@@ -418,13 +421,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// related, we would generate a constraint `'r in ['a, 'b,\n     /// 'static]` for each region `'r` that appears in the hidden type\n     /// (i.e., it must be equal to `'a`, `'b`, or `'static`).\n+    ///\n+    /// `conflict1` and `conflict2` are the two region bounds that we\n+    /// detected which were unrelated. They are used for diagnostics.\n     fn generate_member_constraint(\n         &self,\n         concrete_ty: Ty<'tcx>,\n         abstract_type_generics: &ty::Generics,\n         opaque_defn: &OpaqueTypeDecl<'tcx>,\n         opaque_type_def_id: DefId,\n+        conflict1: ty::Region<'tcx>,\n+        conflict2: ty::Region<'tcx>,\n     ) {\n+        // For now, enforce a feature gate outside of async functions.\n+        if self.member_constraint_feature_gate(\n+            opaque_defn,\n+            opaque_type_def_id,\n+            conflict1,\n+            conflict2,\n+        ) {\n+            return;\n+        }\n+\n         // Create the set of choice regions: each region in the hidden\n         // type can be equal to any of the region parameters of the\n         // opaque type definition.\n@@ -453,6 +471,60 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         });\n     }\n \n+    /// Member constraints are presently feature-gated except for\n+    /// async-await. We expect to lift this once we've had a bit more\n+    /// time.\n+    fn member_constraint_feature_gate(\n+        &self,\n+        opaque_defn: &OpaqueTypeDecl<'tcx>,\n+        opaque_type_def_id: DefId,\n+        conflict1: ty::Region<'tcx>,\n+        conflict2: ty::Region<'tcx>,\n+    ) -> bool {\n+        // If we have `#![feature(member_constraints)]`, no problems.\n+        if self.tcx.features().member_constraints {\n+            return false;\n+        }\n+\n+        let span = self.tcx.def_span(opaque_type_def_id);\n+\n+        // Otherwise, we allow for async-await but not otherwise.\n+        let context_name = match opaque_defn.origin {\n+            hir::ExistTyOrigin::ExistentialType => \"existential type\",\n+            hir::ExistTyOrigin::ReturnImplTrait => \"impl Trait\",\n+            hir::ExistTyOrigin::AsyncFn => {\n+                // we permit\n+                return false;\n+            }\n+        };\n+        let msg = format!(\"ambiguous lifetime bound in `{}`\", context_name);\n+        let mut err = self.tcx.sess.struct_span_err(span, &msg);\n+\n+        let conflict1_name = conflict1.to_string();\n+        let conflict2_name = conflict2.to_string();\n+        let label_owned;\n+        let label = match (&*conflict1_name, &*conflict2_name) {\n+            (\"'_\", \"'_\") => \"the elided lifetimes here do not outlive one another\",\n+            _ => {\n+                label_owned = format!(\n+                    \"neither `{}` nor `{}` outlives the other\",\n+                    conflict1_name, conflict2_name,\n+                );\n+                &label_owned\n+            }\n+        };\n+        err.span_label(span, label);\n+\n+        if nightly_options::is_nightly_build() {\n+            help!(err,\n+                  \"add #![feature(member_constraints)] to the crate attributes \\\n+                   to enable\");\n+        }\n+\n+        err.emit();\n+        true\n+    }\n+\n     /// Given the fully resolved, instantiated type for an opaque\n     /// type, i.e., the value of an inference variable like C1 or C2\n     /// (*), computes the \"definition type\" for an abstract type"}, {"sha": "1223c069d6569cb76a0ccc8c9f520cc236e9c453", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -570,6 +570,9 @@ declare_features! (\n     // Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n \n+    // Allows impl trait with multiple unrelated lifetimes\n+    (active, member_constraints, \"1.37.0\", Some(61977), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "aee988d5148ae445f507d61d18876531dbfc47d0", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -389,6 +389,7 @@ symbols! {\n         match_beginning_vert,\n         match_default_bindings,\n         may_dangle,\n+        member_constraints,\n         message,\n         meta,\n         min_const_fn,"}, {"sha": "293a93352e641cdd5161c3a4e206c36a62bebd1e", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -0,0 +1,9 @@\n+trait Trait<'a, 'b> { }\n+impl<T> Trait<'_, '_> for T {}\n+\n+fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n+    //~^ ERROR ambiguous lifetime bound\n+    (x, y)\n+}\n+\n+fn main() { }"}, {"sha": "3745d5e1c59d6596e73b58da776e352113065183", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -0,0 +1,10 @@\n+error: ambiguous lifetime bound in `impl Trait`\n+  --> $DIR/feature-gate-member-constraints.rs:4:43\n+   |\n+LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n+   |                                           ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n+   |\n+   = help: add #![feature(member_constraints)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "61e858ee02d44d3e81e26cf23cd7dba41e2f4320", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -1,5 +1,6 @@\n // compile-flags:-Zborrowck=mir\n \n+#![feature(member_constraints)]\n #![feature(existential_type)]\n \n #[derive(Clone)]"}, {"sha": "b59dfbe9f2ada7beccec35d88fa34882eac2115b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:12:56\n+  --> $DIR/error-handling.rs:13:56\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`"}, {"sha": "2da3886bb552be80fd8aab31ce0eedc060203b27", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -3,6 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n+#![feature(member_constraints)]\n+\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "e2cb574fac0840a55e1d02856653953633b35bf4", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-elided.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -3,6 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n+#![feature(member_constraints)]\n+\n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n "}, {"sha": "a1ec89e8fbd05cdc79593a4746d7c52c63d4b227", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-existential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -3,6 +3,7 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n+#![feature(member_constraints)]\n #![feature(existential_type)]\n \n trait Trait<'a, 'b> { }"}, {"sha": "21979b001797e9aa8b3a6e831642b8d19d0c3b8a", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -3,6 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n+#![feature(member_constraints)]\n+\n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n "}, {"sha": "0dfc118d78c29a9fea95274d2d5fb0ef535a4891", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-other.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -3,6 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n+#![feature(member_constraints)]\n+\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "db1641b0140b9d15e0649c1b907dcb20b23c08c2", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -1,5 +1,7 @@\n // edition:2018\n \n+#![feature(member_constraints)]\n+\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "cd2d46ac182180e4a05021595d36dd0164ef603c", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n+  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: hidden type `Ordinary<'_>` captures the scope of call-site for function at 21:1\n-  --> $DIR/ordinary-bounds-unrelated.rs:21:1\n+note: hidden type `Ordinary<'_>` captures the scope of call-site for function at 23:1\n+  --> $DIR/ordinary-bounds-unrelated.rs:23:1\n    |\n LL | / {\n LL | |     // Hidden type `Ordinary<'0>` with constraints:"}, {"sha": "8f85b444d0886ef1e9c670d12672181de844b1e8", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -1,5 +1,7 @@\n // edition:2018\n \n+#![feature(member_constraints)]\n+\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "59ce93fa78b6b3754c151c15dc393c84fe9fe16e", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n+  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n-note: hidden type `Ordinary<'_>` captures the scope of call-site for function at 20:1\n-  --> $DIR/ordinary-bounds-unsuited.rs:20:1\n+note: hidden type `Ordinary<'_>` captures the scope of call-site for function at 22:1\n+  --> $DIR/ordinary-bounds-unsuited.rs:22:1\n    |\n LL | / {\n LL | |     // We return a value:"}, {"sha": "52475f65a8353b0849060018056a7b15c446d53b", "filename": "src/test/ui/impl-trait/needs_least_region_or_bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74a6efbf00e2fff08afe623a0a01155b4bebd0a3/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs?ref=74a6efbf00e2fff08afe623a0a01155b4bebd0a3", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n \n+#![feature(member_constraints)]\n+\n use std::fmt::Debug;\n \n trait MultiRegionTrait<'a, 'b> {}"}]}