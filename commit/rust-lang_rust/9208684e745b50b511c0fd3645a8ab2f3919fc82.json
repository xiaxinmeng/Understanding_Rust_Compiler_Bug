{"sha": "9208684e745b50b511c0fd3645a8ab2f3919fc82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMDg2ODRlNzQ1YjUwYjUxMWMwZmQzNjQ1YThhYjJmMzkxOWZjODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T06:26:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T07:45:51Z"}, "message": "rustdoc: Extract markdown_writer from markdown_pass", "tree": {"sha": "250476a4174243c87dc157c07056b555a22419a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/250476a4174243c87dc157c07056b555a22419a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9208684e745b50b511c0fd3645a8ab2f3919fc82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9208684e745b50b511c0fd3645a8ab2f3919fc82", "html_url": "https://github.com/rust-lang/rust/commit/9208684e745b50b511c0fd3645a8ab2f3919fc82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9208684e745b50b511c0fd3645a8ab2f3919fc82/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516f87f860ea9bb185a8eac40a598abaefafaa31", "url": "https://api.github.com/repos/rust-lang/rust/commits/516f87f860ea9bb185a8eac40a598abaefafaa31", "html_url": "https://github.com/rust-lang/rust/commit/516f87f860ea9bb185a8eac40a598abaefafaa31"}], "stats": {"total": 193, "additions": 103, "deletions": 90}, "files": [{"sha": "da7472fd06511f9f39f8b16c82f25ede63f55821", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 6, "deletions": 90, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9208684e745b50b511c0fd3645a8ab2f3919fc82/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9208684e745b50b511c0fd3645a8ab2f3919fc82/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=9208684e745b50b511c0fd3645a8ab2f3919fc82", "patch": "@@ -1,77 +1,12 @@\n #[doc = \"Generate markdown from a document tree\"];\n \n+import markdown_writer::writer;\n+import markdown_writer::writer_util;\n+\n export mk_pass;\n \n fn mk_pass(config: config::config) -> pass {\n-    mk_pass_(config, markdown_writer(config))\n-}\n-\n-enum writeinstr {\n-    write(str),\n-    done\n-}\n-\n-type writer = fn~(+writeinstr);\n-\n-impl writer for writer {\n-    fn write_str(str: str) {\n-        self(write(str));\n-    }\n-\n-    fn write_line(str: str) {\n-        self.write_str(str + \"\\n\");\n-    }\n-\n-    fn write_done() {\n-        self(done)\n-    }\n-}\n-\n-fn markdown_writer(config: config::config) -> writer {\n-    let filename = make_filename(config);\n-    let ch = task::spawn_listener {|po: comm::port<writeinstr>|\n-        let markdown = \"\";\n-        let keep_going = true;\n-        while keep_going {\n-            alt comm::recv(po) {\n-              write(s) { markdown += s; }\n-              done { keep_going = false; }\n-            }\n-        }\n-        write_file(filename, markdown);\n-    };\n-\n-    fn~(+instr: writeinstr) {\n-        comm::send(ch, instr);\n-    }\n-}\n-\n-fn make_filename(config: config::config) -> str {\n-    import std::fs;\n-    let cratefile = fs::basename(config.input_crate);\n-    let cratename = tuple::first(fs::splitext(cratefile));\n-    fs::connect(config.output_dir, cratename + \".md\")\n-}\n-\n-fn write_file(path: str, s: str) {\n-    import std::io;\n-    import std::io::writer_util;\n-\n-    alt io::file_writer(path, [io::create, io::truncate]) {\n-      result::ok(writer) {\n-        writer.write_str(s);\n-      }\n-      result::err(e) { fail e }\n-    }\n-}\n-\n-#[test]\n-fn should_use_markdown_file_name_based_off_crate() {\n-    let config = {\n-        output_dir: \"output/dir\"\n-        with config::default_config(\"input/test.rc\")\n-    };\n-    assert make_filename(config) == \"output/dir/test.md\";\n+    mk_pass_(config, markdown_writer::make_writer(config))\n }\n \n // FIXME: This is a really convoluted interface to work around trying\n@@ -918,29 +853,10 @@ mod test {\n         doc\n     }\n \n-    fn writer_future() -> (writer, future::future<str>) {\n-        let port = comm::port();\n-        let chan = comm::chan(port);\n-        let writer = fn~(+instr: writeinstr) {\n-            comm::send(chan, copy instr);\n-        };\n-        let future = future::from_fn {||\n-            let res = \"\";\n-            while true {\n-                alt comm::recv(port) {\n-                  write(s) { res += s }\n-                  done { break }\n-                }\n-            }\n-            res\n-        };\n-        (writer, future)\n-    }\n-\n     fn write_markdown_str(\n         doc: doc::cratedoc\n     ) -> str {\n-        let (writer, future) = writer_future();\n+        let (writer, future) = markdown_writer::future_writer();\n         write_markdown(doc, writer);\n         ret future::get(future);\n     }\n@@ -953,7 +869,7 @@ mod test {\n             output_style: config::doc_per_crate\n             with config::default_config(\"\")\n         };\n-        let (writer, future) = writer_future();\n+        let (writer, future) = markdown_writer::future_writer();\n         let pass = mk_pass_(config, writer);\n         pass.f(srv, doc);\n         ret future::get(future);"}, {"sha": "ff382a2aca49a8f084ecad65a74899dae106d523", "filename": "src/rustdoc/markdown_writer.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9208684e745b50b511c0fd3645a8ab2f3919fc82/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9208684e745b50b511c0fd3645a8ab2f3919fc82/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=9208684e745b50b511c0fd3645a8ab2f3919fc82", "patch": "@@ -0,0 +1,96 @@\n+export writeinstr;\n+export writer;\n+export writer_util;\n+export make_writer;\n+export future_writer;\n+\n+enum writeinstr {\n+    write(str),\n+    done\n+}\n+\n+type writer = fn~(+writeinstr);\n+\n+impl writer_util for writer {\n+    fn write_str(str: str) {\n+        self(write(str));\n+    }\n+\n+    fn write_line(str: str) {\n+        self.write_str(str + \"\\n\");\n+    }\n+\n+    fn write_done() {\n+        self(done)\n+    }\n+}\n+\n+fn make_writer(config: config::config) -> writer {\n+    markdown_writer(config)\n+}\n+\n+fn markdown_writer(config: config::config) -> writer {\n+    let filename = make_filename(config);\n+    let ch = task::spawn_listener {|po: comm::port<writeinstr>|\n+        let markdown = \"\";\n+        let keep_going = true;\n+        while keep_going {\n+            alt comm::recv(po) {\n+              write(s) { markdown += s; }\n+              done { keep_going = false; }\n+            }\n+        }\n+        write_file(filename, markdown);\n+    };\n+\n+    fn~(+instr: writeinstr) {\n+        comm::send(ch, instr);\n+    }\n+}\n+\n+fn make_filename(config: config::config) -> str {\n+    import std::fs;\n+    let cratefile = fs::basename(config.input_crate);\n+    let cratename = tuple::first(fs::splitext(cratefile));\n+    fs::connect(config.output_dir, cratename + \".md\")\n+}\n+\n+fn write_file(path: str, s: str) {\n+    import std::io;\n+    import std::io::writer_util;\n+\n+    alt io::file_writer(path, [io::create, io::truncate]) {\n+      result::ok(writer) {\n+        writer.write_str(s);\n+      }\n+      result::err(e) { fail e }\n+    }\n+}\n+\n+#[test]\n+fn should_use_markdown_file_name_based_off_crate() {\n+    let config = {\n+        output_dir: \"output/dir\"\n+        with config::default_config(\"input/test.rc\")\n+    };\n+    assert make_filename(config) == \"output/dir/test.md\";\n+}\n+\n+fn future_writer() -> (writer, future::future<str>) {\n+    let port = comm::port();\n+    let chan = comm::chan(port);\n+    let writer = fn~(+instr: writeinstr) {\n+        comm::send(chan, copy instr);\n+    };\n+    let future = future::from_fn {||\n+        let res = \"\";\n+        while true {\n+            alt comm::recv(port) {\n+              write(s) { res += s }\n+              done { break }\n+            }\n+        }\n+        res\n+    };\n+    (writer, future)\n+}"}, {"sha": "5f88ca4bdf923712b6f39f41a1126600befcfd06", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9208684e745b50b511c0fd3645a8ab2f3919fc82/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9208684e745b50b511c0fd3645a8ab2f3919fc82/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=9208684e745b50b511c0fd3645a8ab2f3919fc82", "patch": "@@ -18,6 +18,7 @@ mod extract;\n mod attr_parser;\n mod doc;\n mod markdown_pass;\n+mod markdown_writer;\n mod fold;\n mod path_pass;\n mod attr_pass;"}]}