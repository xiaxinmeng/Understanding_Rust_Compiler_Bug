{"sha": "5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOWI5YjI3NWFjMjRiNjZiY2UwMWI3NGQ3NDA4ZTA2YThmMzMzYTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-14T20:16:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T20:16:06Z"}, "message": "Rollup merge of #64406 - Mark-Simulacrum:error-unknown-intrinsic, r=Centril\n\nBan non-extern rust intrinsics\n\nIntrinsics can only be defined by the compiler.\n\nFixes https://github.com/rust-lang/rust/issues/36979", "tree": {"sha": "f61e37a6d78bcae6bb72eafd497ba8dd09131f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61e37a6d78bcae6bb72eafd497ba8dd09131f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfUqGCRBK7hj4Ov3rIwAAdHIIAIBquvoHIOOIsWQXHhka2DBX\nULfAJTCB8ipTcuJKSFxAJ3fiWL8Zk8CPTvPVC5wNjJwUFq3x3eA2VeAmC0SSyRq8\n7m3YBgyrZ22C5bo8cJOGSPS29ZeIZG+xgWbTpmM5ukILwsEoddThUkel+FUgFPH+\nS52G2n4oOKdPVbJbptPV8q+5+ov/DTk7BWp/QC8EaZF91mUShTl37tqHgsxqGQ2Q\n8EJd7UwtMXeydtJv9rs5MxE/a0c7OQA8F3y4BR8yBGrV5hdUS+8NmdkwCAuLTO32\nnnaTwZfggcAnVqiwmQUx7/h214Yt0tkRI1iJh7etAZ74u28QUdlk6/b24SoXBic=\n=qEVJ\n-----END PGP SIGNATURE-----\n", "payload": "tree f61e37a6d78bcae6bb72eafd497ba8dd09131f47\nparent d29df01b0877bb56683a67d169091d0a854b0156\nparent 7b3adc289eb84f21199d1f2aeac9d88779b7369b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568492166 +0200\ncommitter GitHub <noreply@github.com> 1568492166 +0200\n\nRollup merge of #64406 - Mark-Simulacrum:error-unknown-intrinsic, r=Centril\n\nBan non-extern rust intrinsics\n\nIntrinsics can only be defined by the compiler.\n\nFixes https://github.com/rust-lang/rust/issues/36979\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "html_url": "https://github.com/rust-lang/rust/commit/5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d29df01b0877bb56683a67d169091d0a854b0156", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29df01b0877bb56683a67d169091d0a854b0156", "html_url": "https://github.com/rust-lang/rust/commit/d29df01b0877bb56683a67d169091d0a854b0156"}, {"sha": "7b3adc289eb84f21199d1f2aeac9d88779b7369b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3adc289eb84f21199d1f2aeac9d88779b7369b", "html_url": "https://github.com/rust-lang/rust/commit/7b3adc289eb84f21199d1f2aeac9d88779b7369b"}], "stats": {"total": 283, "additions": 186, "deletions": 97}, "files": [{"sha": "ae7ab0a771754aaec2e8805116a24f9a06417796", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -1088,6 +1088,8 @@ fn check_fn<'a, 'tcx>(\n \n     let span = body.value.span;\n \n+    fn_maybe_err(fcx.tcx, span, fn_sig.abi);\n+\n     if body.generator_kind.is_some() && can_be_generator.is_some() {\n         let yield_ty = fcx.next_ty_var(TypeVariableOrigin {\n             kind: TypeVariableOriginKind::TypeInference,\n@@ -1439,6 +1441,14 @@ fn check_opaque_for_cycles<'tcx>(\n     }\n }\n \n+// Forbid defining intrinsics in Rust code,\n+// as they must always be defined by the compiler.\n+fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {\n+    if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+        tcx.sess.span_err(sp, \"intrinsic must be in `extern \\\"rust-intrinsic\\\" { ... }` block\");\n+    }\n+}\n+\n pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n     debug!(\n         \"check_item_type(it.hir_id={}, it.name={})\",\n@@ -1475,9 +1485,17 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n                 check_on_unimplemented(tcx, trait_def_id, it);\n             }\n         }\n-        hir::ItemKind::Trait(..) => {\n+        hir::ItemKind::Trait(_, _, _, _, ref items) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);\n             check_on_unimplemented(tcx, def_id, it);\n+\n+            for item in items.iter() {\n+                let item = tcx.hir().trait_item(item.id);\n+                if let hir::TraitItemKind::Method(sig, _) = &item.node {\n+                    let abi = sig.header.abi;\n+                    fn_maybe_err(tcx, item.ident.span, abi);\n+                }\n+            }\n         }\n         hir::ItemKind::Struct(..) => {\n             check_struct(tcx, it.hir_id, it.span);"}, {"sha": "9cc2d3bcf604575ab5b41f6b1656825a28cc20f4", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -11,7 +11,6 @@\n \n \n #![allow(warnings)]\n-#![feature(intrinsics)]\n #![feature(linkage)]\n #![feature(rustc_attrs)]\n #![crate_type = \"rlib\"]\n@@ -99,17 +98,6 @@ pub fn make_extern() {}\n pub extern \"C\" fn make_extern() {}\n \n \n-// Extern C Extern Rust-Intrinsic ----------------------------------------------\n-\n-#[cfg(cfail1)]\n-pub extern \"C\" fn make_intrinsic() {}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, typeck_tables_of, fn_sig\")]\n-#[rustc_clean(cfg = \"cfail3\")]\n-pub extern \"rust-intrinsic\" fn make_intrinsic() {}\n-\n-\n // Type Parameter --------------------------------------------------------------\n \n #[cfg(cfail1)]"}, {"sha": "3006cdccfbb55c9df3e5e411a92d3386a03ae8c2", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -18,7 +18,6 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n #![feature(associated_type_defaults)]\n-#![feature(intrinsics)]\n \n \n // Change trait visibility\n@@ -318,7 +317,7 @@ trait TraitAddExternModifier {\n \n \n \n-// Change extern \"C\" to extern \"rust-intrinsic\"\n+// Change extern \"C\" to extern \"stdcall\"\n #[cfg(cfail1)]\n trait TraitChangeExternCToRustIntrinsic {\n     extern \"C\" fn method();\n@@ -330,7 +329,7 @@ trait TraitChangeExternCToRustIntrinsic {\n trait TraitChangeExternCToRustIntrinsic {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    extern \"rust-intrinsic\" fn method();\n+    extern \"stdcall\" fn method();\n }\n \n "}, {"sha": "61da38eea74b3b41ed4673dec20b5770f0cd2d2c", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -10,7 +10,9 @@\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n+//~^ ERROR intrinsic must be in\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n+//~^ ERROR intrinsic must be in\n extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -22,7 +24,9 @@ extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental an\n // Methods in trait definition\n trait Tr {\n     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n+    //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n+    //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n@@ -31,8 +35,6 @@ trait Tr {\n     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n \n-    extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n-    extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -47,7 +49,9 @@ struct S;\n // Methods in trait impl\n impl Tr for S {\n     extern \"rust-intrinsic\" fn m1() {} //~ ERROR intrinsics are subject to change\n+    //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n+    //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -60,7 +64,9 @@ impl Tr for S {\n // Methods in inherent impl\n impl S {\n     extern \"rust-intrinsic\" fn im1() {} //~ ERROR intrinsics are subject to change\n+    //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n+    //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental"}, {"sha": "afda76dc2b0aa1c5fc6d5f1f798d592edd9dc011", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 109, "deletions": 78, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -7,7 +7,7 @@ LL | extern \"rust-intrinsic\" fn f1() {}\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:13:1\n+  --> $DIR/feature-gate-abi.rs:14:1\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,15 +16,15 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:14:1\n+  --> $DIR/feature-gate-abi.rs:16:1\n    |\n LL | extern \"vectorcall\" fn f3() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:15:1\n+  --> $DIR/feature-gate-abi.rs:17:1\n    |\n LL | extern \"rust-call\" fn f4() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL | extern \"rust-call\" fn f4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:16:1\n+  --> $DIR/feature-gate-abi.rs:18:1\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL | extern \"msp430-interrupt\" fn f5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:17:1\n+  --> $DIR/feature-gate-abi.rs:19:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL | extern \"ptx-kernel\" fn f6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:1\n+  --> $DIR/feature-gate-abi.rs:20:1\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,15 +60,15 @@ LL | extern \"x86-interrupt\" fn f7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:21:1\n    |\n LL | extern \"thiscall\" fn f8() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:22:1\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,15 +77,15 @@ LL | extern \"amdgpu-kernel\" fn f9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:24:5\n+  --> $DIR/feature-gate-abi.rs:26:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:25:5\n+  --> $DIR/feature-gate-abi.rs:28:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,15 +94,15 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:26:5\n+  --> $DIR/feature-gate-abi.rs:30:5\n    |\n LL |     extern \"vectorcall\" fn m3();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:27:5\n+  --> $DIR/feature-gate-abi.rs:31:5\n    |\n LL |     extern \"rust-call\" fn m4();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,7 +111,7 @@ LL |     extern \"rust-call\" fn m4();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:28:5\n+  --> $DIR/feature-gate-abi.rs:32:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     extern \"msp430-interrupt\" fn m5();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:29:5\n+  --> $DIR/feature-gate-abi.rs:33:5\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +129,7 @@ LL |     extern \"ptx-kernel\" fn m6();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:34:5\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,49 +138,32 @@ LL |     extern \"x86-interrupt\" fn m7();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:31:5\n+  --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"thiscall\" fn m8();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:36:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n-error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:34:5\n-   |\n-LL |     extern \"rust-intrinsic\" fn dm1() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n-\n-error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:35:5\n-   |\n-LL |     extern \"platform-intrinsic\" fn dm2() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n-   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n-\n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:38:5\n    |\n LL |     extern \"vectorcall\" fn dm3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:37:5\n+  --> $DIR/feature-gate-abi.rs:39:5\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -189,7 +172,7 @@ LL |     extern \"rust-call\" fn dm4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:5\n+  --> $DIR/feature-gate-abi.rs:40:5\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -198,7 +181,7 @@ LL |     extern \"msp430-interrupt\" fn dm5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:41:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -207,7 +190,7 @@ LL |     extern \"ptx-kernel\" fn dm6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:40:5\n+  --> $DIR/feature-gate-abi.rs:42:5\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -216,15 +199,15 @@ LL |     extern \"x86-interrupt\" fn dm7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:43:5\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:44:5\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -233,15 +216,15 @@ LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:49:5\n+  --> $DIR/feature-gate-abi.rs:51:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:50:5\n+  --> $DIR/feature-gate-abi.rs:53:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,15 +233,15 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:51:5\n+  --> $DIR/feature-gate-abi.rs:55:5\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:52:5\n+  --> $DIR/feature-gate-abi.rs:56:5\n    |\n LL |     extern \"rust-call\" fn m4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -267,7 +250,7 @@ LL |     extern \"rust-call\" fn m4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:53:5\n+  --> $DIR/feature-gate-abi.rs:57:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -276,7 +259,7 @@ LL |     extern \"msp430-interrupt\" fn m5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:54:5\n+  --> $DIR/feature-gate-abi.rs:58:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -285,7 +268,7 @@ LL |     extern \"ptx-kernel\" fn m6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:59:5\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -294,15 +277,15 @@ LL |     extern \"x86-interrupt\" fn m7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:56:5\n+  --> $DIR/feature-gate-abi.rs:60:5\n    |\n LL |     extern \"thiscall\" fn m8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:61:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -311,15 +294,15 @@ LL |     extern \"amdgpu-kernel\" fn m9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:62:5\n+  --> $DIR/feature-gate-abi.rs:66:5\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:63:5\n+  --> $DIR/feature-gate-abi.rs:68:5\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -328,15 +311,15 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:64:5\n+  --> $DIR/feature-gate-abi.rs:70:5\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:65:5\n+  --> $DIR/feature-gate-abi.rs:71:5\n    |\n LL |     extern \"rust-call\" fn im4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -345,7 +328,7 @@ LL |     extern \"rust-call\" fn im4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:66:5\n+  --> $DIR/feature-gate-abi.rs:72:5\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -354,7 +337,7 @@ LL |     extern \"msp430-interrupt\" fn im5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:67:5\n+  --> $DIR/feature-gate-abi.rs:73:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -363,7 +346,7 @@ LL |     extern \"ptx-kernel\" fn im6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:68:5\n+  --> $DIR/feature-gate-abi.rs:74:5\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -372,15 +355,15 @@ LL |     extern \"x86-interrupt\" fn im7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:69:5\n+  --> $DIR/feature-gate-abi.rs:75:5\n    |\n LL |     extern \"thiscall\" fn im8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:70:5\n+  --> $DIR/feature-gate-abi.rs:76:5\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -389,15 +372,15 @@ LL |     extern \"amdgpu-kernel\" fn im9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:74:11\n+  --> $DIR/feature-gate-abi.rs:80:11\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:75:11\n+  --> $DIR/feature-gate-abi.rs:81:11\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -406,15 +389,15 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:76:11\n+  --> $DIR/feature-gate-abi.rs:82:11\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:77:11\n+  --> $DIR/feature-gate-abi.rs:83:11\n    |\n LL | type A4 = extern \"rust-call\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -423,7 +406,7 @@ LL | type A4 = extern \"rust-call\" fn();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:78:11\n+  --> $DIR/feature-gate-abi.rs:84:11\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -432,7 +415,7 @@ LL | type A5 = extern \"msp430-interrupt\" fn();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:79:11\n+  --> $DIR/feature-gate-abi.rs:85:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -441,7 +424,7 @@ LL | type A6 = extern \"ptx-kernel\" fn ();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:80:11\n+  --> $DIR/feature-gate-abi.rs:86:11\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -450,15 +433,15 @@ LL | type A7 = extern \"x86-interrupt\" fn();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:81:11\n+  --> $DIR/feature-gate-abi.rs:87:11\n    |\n LL | type A8 = extern \"thiscall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:11\n+  --> $DIR/feature-gate-abi.rs:88:11\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,15 +450,15 @@ LL | type A9 = extern \"amdgpu-kernel\" fn();\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:85:1\n+  --> $DIR/feature-gate-abi.rs:91:1\n    |\n LL | extern \"rust-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:86:1\n+  --> $DIR/feature-gate-abi.rs:92:1\n    |\n LL | extern \"platform-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -484,15 +467,15 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:87:1\n+  --> $DIR/feature-gate-abi.rs:93:1\n    |\n LL | extern \"vectorcall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:88:1\n+  --> $DIR/feature-gate-abi.rs:94:1\n    |\n LL | extern \"rust-call\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n@@ -501,7 +484,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:89:1\n+  --> $DIR/feature-gate-abi.rs:95:1\n    |\n LL | extern \"msp430-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -510,7 +493,7 @@ LL | extern \"msp430-interrupt\" {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:90:1\n+  --> $DIR/feature-gate-abi.rs:96:1\n    |\n LL | extern \"ptx-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n@@ -519,7 +502,7 @@ LL | extern \"ptx-kernel\" {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:91:1\n+  --> $DIR/feature-gate-abi.rs:97:1\n    |\n LL | extern \"x86-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -528,22 +511,70 @@ LL | extern \"x86-interrupt\" {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:92:1\n+  --> $DIR/feature-gate-abi.rs:98:1\n    |\n LL | extern \"thiscall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:1\n+  --> $DIR/feature-gate-abi.rs:99:1\n    |\n LL | extern \"amdgpu-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n-error: aborting due to 63 previous errors\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:26:32\n+   |\n+LL |     extern \"rust-intrinsic\" fn m1();\n+   |                                ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:28:36\n+   |\n+LL |     extern \"platform-intrinsic\" fn m2();\n+   |                                    ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:12:33\n+   |\n+LL | extern \"rust-intrinsic\" fn f1() {}\n+   |                                 ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:14:37\n+   |\n+LL | extern \"platform-intrinsic\" fn f2() {}\n+   |                                     ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:51:37\n+   |\n+LL |     extern \"rust-intrinsic\" fn m1() {}\n+   |                                     ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:53:41\n+   |\n+LL |     extern \"platform-intrinsic\" fn m2() {}\n+   |                                         ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:66:38\n+   |\n+LL |     extern \"rust-intrinsic\" fn im1() {}\n+   |                                      ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:68:42\n+   |\n+LL |     extern \"platform-intrinsic\" fn im2() {}\n+   |                                          ^^\n+\n+error: aborting due to 69 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e0dc3cc579d79d4d18a63bd7cd88cdbfe28080dd", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -3,5 +3,6 @@ extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n }\n \n extern \"rust-intrinsic\" fn baz() {} //~ ERROR intrinsics are subject to change\n+//~^ ERROR intrinsic must be in\n \n fn main() {}"}, {"sha": "101a10e8df71f80f5292ffc584d275685ec19e76", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -22,7 +22,13 @@ error[E0093]: unrecognized intrinsic function: `bar`\n LL |     fn bar();\n    |     ^^^^^^^^^ unrecognized intrinsic\n \n-error: aborting due to 3 previous errors\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-intrinsics.rs:5:34\n+   |\n+LL | extern \"rust-intrinsic\" fn baz() {}\n+   |                                  ^^\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0093, E0658.\n For more information about an error, try `rustc --explain E0093`."}, {"sha": "22951147d7d870fe79246c7c1cf4b84ce8d34560", "filename": "src/test/ui/intrinsics-always-extern.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Fintrinsics-always-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Fintrinsics-always-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics-always-extern.rs?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -0,0 +1,16 @@\n+#![feature(intrinsics)]\n+\n+trait Foo {\n+    extern \"rust-intrinsic\" fn foo(&self); //~ ERROR intrinsic must\n+}\n+\n+impl Foo for () {\n+    extern \"rust-intrinsic\" fn foo(&self) { //~ ERROR intrinsic must\n+    }\n+}\n+\n+extern \"rust-intrinsic\" fn hello() {//~ ERROR intrinsic must\n+}\n+\n+fn main() {\n+}"}, {"sha": "24b6da16096e61019788a23fd3c675bc3763108b", "filename": "src/test/ui/intrinsics-always-extern.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Fintrinsics-always-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f9b9b275ac24b66bce01b74d7408e06a8f333a7/src%2Ftest%2Fui%2Fintrinsics-always-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics-always-extern.stderr?ref=5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "patch": "@@ -0,0 +1,24 @@\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/intrinsics-always-extern.rs:4:32\n+   |\n+LL |     extern \"rust-intrinsic\" fn foo(&self);\n+   |                                ^^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/intrinsics-always-extern.rs:8:43\n+   |\n+LL |       extern \"rust-intrinsic\" fn foo(&self) {\n+   |  ___________________________________________^\n+LL | |     }\n+   | |_____^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/intrinsics-always-extern.rs:12:36\n+   |\n+LL |   extern \"rust-intrinsic\" fn hello() {\n+   |  ____________________________________^\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n+"}]}