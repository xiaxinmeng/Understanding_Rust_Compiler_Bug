{"sha": "b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYTY5NjcxMTRiMmZhOWQ0NzcyMjZmZjdhZDUzZmI1NWZiNjkyYmM=", "commit": {"author": {"name": "Alessandro Decina", "email": "alessandro.d@gmail.com", "date": "2021-04-20T09:03:10Z"}, "committer": {"name": "Alessandro Decina", "email": "alessandro.d@gmail.com", "date": "2021-05-23T08:03:27Z"}, "message": "Add support for BPF inline assembly", "tree": {"sha": "e3cdff4b6c254131063dd7f4ef4bada6d3bba4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3cdff4b6c254131063dd7f4ef4bada6d3bba4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "html_url": "https://github.com/rust-lang/rust/commit/b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/comments", "author": {"login": "alessandrod", "id": 62002, "node_id": "MDQ6VXNlcjYyMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/62002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alessandrod", "html_url": "https://github.com/alessandrod", "followers_url": "https://api.github.com/users/alessandrod/followers", "following_url": "https://api.github.com/users/alessandrod/following{/other_user}", "gists_url": "https://api.github.com/users/alessandrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/alessandrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alessandrod/subscriptions", "organizations_url": "https://api.github.com/users/alessandrod/orgs", "repos_url": "https://api.github.com/users/alessandrod/repos", "events_url": "https://api.github.com/users/alessandrod/events{/privacy}", "received_events_url": "https://api.github.com/users/alessandrod/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alessandrod", "id": 62002, "node_id": "MDQ6VXNlcjYyMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/62002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alessandrod", "html_url": "https://github.com/alessandrod", "followers_url": "https://api.github.com/users/alessandrod/followers", "following_url": "https://api.github.com/users/alessandrod/following{/other_user}", "gists_url": "https://api.github.com/users/alessandrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/alessandrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alessandrod/subscriptions", "organizations_url": "https://api.github.com/users/alessandrod/orgs", "repos_url": "https://api.github.com/users/alessandrod/repos", "events_url": "https://api.github.com/users/alessandrod/events{/privacy}", "received_events_url": "https://api.github.com/users/alessandrod/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ac719b99560072cbe52a957f22d3fe6946cf2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ac719b99560072cbe52a957f22d3fe6946cf2a", "html_url": "https://github.com/rust-lang/rust/commit/12ac719b99560072cbe52a957f22d3fe6946cf2a"}], "stats": {"total": 179, "additions": 176, "deletions": 3}, "files": [{"sha": "ecf62ed213df82aec1daaf5b5b1cf958d0f9054c", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -288,6 +288,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::SpirV => {}\n                 InlineAsmArch::Wasm32 => {}\n+                InlineAsmArch::Bpf => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -593,6 +594,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => \"^Yk\",\n             InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => \"r\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => \"w\",\n             InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n                 bug!(\"LLVM backend does not support SPIR-V\")\n             }\n@@ -661,6 +664,7 @@ fn modifier_to_llvm(\n         },\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => None,\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => None,\n+        InlineAsmRegClass::Bpf(_) => None,\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }\n@@ -708,6 +712,8 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         | InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::kreg) => cx.type_i16(),\n         InlineAsmRegClass::Wasm(WasmInlineAsmRegClass::local) => cx.type_i32(),\n+        InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::reg) => cx.type_i64(),\n+        InlineAsmRegClass::Bpf(BpfInlineAsmRegClass::wreg) => cx.type_i32(),\n         InlineAsmRegClass::SpirV(SpirVInlineAsmRegClass::reg) => {\n             bug!(\"LLVM backend does not support SPIR-V\")\n         }"}, {"sha": "b10de567744dd145b16961c481754585cceeb674", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -210,6 +210,8 @@ const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n ];\n \n+const BPF_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[(\"alu32\", Some(sym::bpf_target_feature))];\n+\n /// When rustdoc is running, provide a list of all known features so that all their respective\n /// primitives may be documented.\n ///\n@@ -224,6 +226,7 @@ pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol\n         .chain(MIPS_ALLOWED_FEATURES.iter())\n         .chain(RISCV_ALLOWED_FEATURES.iter())\n         .chain(WASM_ALLOWED_FEATURES.iter())\n+        .chain(BPF_ALLOWED_FEATURES.iter())\n         .cloned()\n }\n \n@@ -237,6 +240,7 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n         \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n         \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n         \"wasm32\" | \"wasm64\" => WASM_ALLOWED_FEATURES,\n+        \"bpf\" => BPF_ALLOWED_FEATURES,\n         _ => &[],\n     }\n }"}, {"sha": "31b425f1a79a08fbe54eacdb0eb0942d0aedbfa7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -328,6 +328,7 @@ symbols! {\n         box_free,\n         box_patterns,\n         box_syntax,\n+        bpf_target_feature,\n         braced_empty_structs,\n         branch,\n         breakpoint,\n@@ -1332,6 +1333,7 @@ symbols! {\n         wrapping_add,\n         wrapping_mul,\n         wrapping_sub,\n+        wreg,\n         write_bytes,\n         xmm_reg,\n         ymm_reg,"}, {"sha": "6e0e140374033c3c2eef6ae53780160e3b9090c0", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -655,7 +655,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n                 }\n             }\n             \"asmjs\" => wasm::compute_c_abi_info(cx, self),\n-            \"bpfel\" | \"bpfeb\" => bpf::compute_abi_info(self),\n+            \"bpf\" => bpf::compute_abi_info(self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n         }\n "}, {"sha": "ecb6bdc95ce0991b13573983f431e1b83ecdc0e0", "filename": "compiler/rustc_target/src/asm/bpf.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -0,0 +1,129 @@\n+use super::{InlineAsmArch, InlineAsmType, Target};\n+use rustc_macros::HashStable_Generic;\n+use std::fmt;\n+\n+def_reg_class! {\n+    Bpf BpfInlineAsmRegClass {\n+        reg,\n+        wreg,\n+    }\n+}\n+\n+impl BpfInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        _arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match self {\n+            Self::reg => types! { _: I8, I16, I32, I64; },\n+            Self::wreg => types! { \"alu32\": I8, I16, I32; },\n+        }\n+    }\n+}\n+\n+fn only_alu32(\n+    _arch: InlineAsmArch,\n+    mut has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n+) -> Result<(), &'static str> {\n+    if !has_feature(\"alu32\") {\n+        Err(\"register can't be used without the `alu32` target feature\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+def_regs! {\n+    Bpf BpfInlineAsmReg BpfInlineAsmRegClass {\n+        r0: reg = [\"r0\"],\n+        r1: reg = [\"r1\"],\n+        r2: reg = [\"r2\"],\n+        r3: reg = [\"r3\"],\n+        r4: reg = [\"r4\"],\n+        r5: reg = [\"r5\"],\n+        r6: reg = [\"r6\"],\n+        r7: reg = [\"r7\"],\n+        r8: reg = [\"r8\"],\n+        r9: reg = [\"r9\"],\n+        w0: wreg = [\"w0\"] % only_alu32,\n+        w1: wreg = [\"w1\"] % only_alu32,\n+        w2: wreg = [\"w2\"] % only_alu32,\n+        w3: wreg = [\"w3\"] % only_alu32,\n+        w4: wreg = [\"w4\"] % only_alu32,\n+        w5: wreg = [\"w5\"] % only_alu32,\n+        w6: wreg = [\"w6\"] % only_alu32,\n+        w7: wreg = [\"w7\"] % only_alu32,\n+        w8: wreg = [\"w8\"] % only_alu32,\n+        w9: wreg = [\"w9\"] % only_alu32,\n+\n+        #error = [\"r10\", \"w10\"] =>\n+            \"the stack pointer cannot be used as an operand for inline asm\",\n+    }\n+}\n+\n+impl BpfInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        out.write_str(self.name())\n+    }\n+\n+    pub fn overlapping_regs(self, mut cb: impl FnMut(BpfInlineAsmReg)) {\n+        cb(self);\n+\n+        macro_rules! reg_conflicts {\n+            (\n+                $(\n+                    $r:ident : $w:ident\n+                ),*\n+            ) => {\n+                match self {\n+                    $(\n+                        Self::$r => {\n+                            cb(Self::$w);\n+                        }\n+                        Self::$w => {\n+                            cb(Self::$r);\n+                        }\n+                    )*\n+                }\n+            };\n+        }\n+\n+        reg_conflicts! {\n+            r0 : w0,\n+            r1 : w1,\n+            r2 : w2,\n+            r3 : w3,\n+            r4 : w4,\n+            r5 : w5,\n+            r6 : w6,\n+            r7 : w7,\n+            r8 : w8,\n+            r9 : w9\n+        }\n+    }\n+}"}, {"sha": "305ea7d50e66ea058a37d579d3223820bf4870c6", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -148,6 +148,7 @@ macro_rules! types {\n \n mod aarch64;\n mod arm;\n+mod bpf;\n mod hexagon;\n mod mips;\n mod nvptx;\n@@ -159,6 +160,7 @@ mod x86;\n \n pub use aarch64::{AArch64InlineAsmReg, AArch64InlineAsmRegClass};\n pub use arm::{ArmInlineAsmReg, ArmInlineAsmRegClass};\n+pub use bpf::{BpfInlineAsmReg, BpfInlineAsmRegClass};\n pub use hexagon::{HexagonInlineAsmReg, HexagonInlineAsmRegClass};\n pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n@@ -184,6 +186,7 @@ pub enum InlineAsmArch {\n     PowerPC64,\n     SpirV,\n     Wasm32,\n+    Bpf,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -205,6 +208,7 @@ impl FromStr for InlineAsmArch {\n             \"mips64\" => Ok(Self::Mips64),\n             \"spirv\" => Ok(Self::SpirV),\n             \"wasm32\" => Ok(Self::Wasm32),\n+            \"bpf\" => Ok(Self::Bpf),\n             _ => Err(()),\n         }\n     }\n@@ -233,6 +237,7 @@ pub enum InlineAsmReg {\n     Mips(MipsInlineAsmReg),\n     SpirV(SpirVInlineAsmReg),\n     Wasm(WasmInlineAsmReg),\n+    Bpf(BpfInlineAsmReg),\n     // Placeholder for invalid register constraints for the current target\n     Err,\n }\n@@ -247,6 +252,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n+            Self::Bpf(r) => r.name(),\n             Self::Err => \"<reg>\",\n         }\n     }\n@@ -260,6 +266,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => InlineAsmRegClass::PowerPC(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n             Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n+            Self::Bpf(r) => InlineAsmRegClass::Bpf(r.reg_class()),\n             Self::Err => InlineAsmRegClass::Err,\n         }\n     }\n@@ -304,6 +311,9 @@ impl InlineAsmReg {\n             InlineAsmArch::Wasm32 => {\n                 Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n+            InlineAsmArch::Bpf => {\n+                Self::Bpf(BpfInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n         })\n     }\n \n@@ -323,6 +333,7 @@ impl InlineAsmReg {\n             Self::PowerPC(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n             Self::Mips(r) => r.emit(out, arch, modifier),\n+            Self::Bpf(r) => r.emit(out, arch, modifier),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n     }\n@@ -336,6 +347,7 @@ impl InlineAsmReg {\n             Self::PowerPC(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n+            Self::Bpf(r) => r.overlapping_regs(|r| cb(Self::Bpf(r))),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n         }\n     }\n@@ -364,6 +376,7 @@ pub enum InlineAsmRegClass {\n     Mips(MipsInlineAsmRegClass),\n     SpirV(SpirVInlineAsmRegClass),\n     Wasm(WasmInlineAsmRegClass),\n+    Bpf(BpfInlineAsmRegClass),\n     // Placeholder for invalid register constraints for the current target\n     Err,\n }\n@@ -381,6 +394,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.name(),\n             Self::SpirV(r) => r.name(),\n             Self::Wasm(r) => r.name(),\n+            Self::Bpf(r) => r.name(),\n             Self::Err => rustc_span::symbol::sym::reg,\n         }\n     }\n@@ -400,6 +414,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n             Self::Wasm(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Wasm),\n+            Self::Bpf(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Bpf),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -426,6 +441,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n             Self::Wasm(r) => r.suggest_modifier(arch, ty),\n+            Self::Bpf(r) => r.suggest_modifier(arch, ty),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -448,6 +464,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n             Self::Wasm(r) => r.default_modifier(arch),\n+            Self::Bpf(r) => r.default_modifier(arch),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -469,6 +486,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n             Self::Wasm(r) => r.supported_types(arch),\n+            Self::Bpf(r) => r.supported_types(arch),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -493,6 +511,7 @@ impl InlineAsmRegClass {\n             }\n             InlineAsmArch::SpirV => Self::SpirV(SpirVInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Wasm32 => Self::Wasm(WasmInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::Bpf => Self::Bpf(BpfInlineAsmRegClass::parse(arch, name)?),\n         })\n     }\n \n@@ -510,6 +529,7 @@ impl InlineAsmRegClass {\n             Self::Mips(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n             Self::Wasm(r) => r.valid_modifiers(arch),\n+            Self::Bpf(r) => r.valid_modifiers(arch),\n             Self::Err => unreachable!(\"Use of InlineAsmRegClass::Err\"),\n         }\n     }\n@@ -679,5 +699,10 @@ pub fn allocatable_registers(\n             wasm::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n+        InlineAsmArch::Bpf => {\n+            let mut map = bpf::regclass_map();\n+            bpf::fill_reg_map(arch, has_feature, target, &mut map);\n+            map\n+        }\n     }\n }"}, {"sha": "f8322567a8d607301528ee2785a16dada9cda008", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -3,6 +3,7 @@ use crate::{abi::Endian, spec::abi::Abi};\n \n pub fn opts(endian: Endian) -> TargetOptions {\n     TargetOptions {\n+        allow_asm: true,\n         endian,\n         linker_flavor: LinkerFlavor::BpfLinker,\n         atomic_cas: false,"}, {"sha": "a45da82eb4032a116ab997e23945ff3f1c6c6ca2", "filename": "compiler/rustc_target/src/spec/bpfeb_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfeb_unknown_none.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -6,7 +6,7 @@ pub fn target() -> Target {\n         llvm_target: \"bpfeb\".to_string(),\n         data_layout: \"E-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n         pointer_width: 64,\n-        arch: \"bpfeb\".to_string(),\n+        arch: \"bpf\".to_string(),\n         options: bpf_base::opts(Endian::Big),\n     }\n }"}, {"sha": "6c9afdf35aef47d1a8e0f11300dc19fd5a46ad48", "filename": "compiler/rustc_target/src/spec/bpfel_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpfel_unknown_none.rs?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -6,7 +6,7 @@ pub fn target() -> Target {\n         llvm_target: \"bpfel\".to_string(),\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".to_string(),\n         pointer_width: 64,\n-        arch: \"bpfel\".to_string(),\n+        arch: \"bpf\".to_string(),\n         options: bpf_base::opts(Endian::Little),\n     }\n }"}, {"sha": "77080b54dc8f019ae200b481f7344420e9b411cb", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2a6967114b2fa9d477226ff7ad53fb55fb692bc/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=b2a6967114b2fa9d477226ff7ad53fb55fb692bc", "patch": "@@ -30,6 +30,7 @@ Inline assembly is currently supported on the following architectures:\n - Hexagon\n - MIPS32r2 and MIPS64r2\n - wasm32\n+- BPF\n \n ## Basic usage\n \n@@ -570,6 +571,8 @@ Here is the list of currently supported register classes:\n | PowerPC | `reg_nonzero` | | `r[1-31]` | `b` |\n | PowerPC | `freg` | `f[0-31]` | `f` |\n | wasm32 | `local` | None\\* | `r` |\n+| BPF | `reg` |\u00a0`r[0-10]` | `r`|\n+| BPF | `wreg` |\u00a0`w[0-10]` | `w`|\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n >\n@@ -615,6 +618,8 @@ Each register class has constraints on which value types they can be used with.\n | PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |\n | PowerPC | `freg` | None | `f32`, `f64` |\n | wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n+| BPF |\u00a0`reg` |\u00a0None | `i8` `i16` `i32` `i64` |\n+| BPF |\u00a0`wreg` |\u00a0`alu32` | `i8` `i16` `i32`|\n \n > **Note**: For the purposes of the above table pointers, function pointers and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/`i64` depending on the target).\n \n@@ -674,6 +679,7 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | Hexagon | `r29` | `sp` |\n | Hexagon | `r30` | `fr` |\n | Hexagon | `r31` | `lr` |\n+| BPF | `r[0-10]` | `w[0-10]` |\n \n Some registers cannot be used for input or output operands:\n "}]}