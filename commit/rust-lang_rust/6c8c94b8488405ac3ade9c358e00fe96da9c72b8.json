{"sha": "6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOGM5NGI4NDg4NDA1YWMzYWRlOWMzNThlMDBmZTk2ZGE5YzcyYjg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-19T16:35:36Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-08T14:42:47Z"}, "message": "Improve linkage assignment in trans::partitioning.", "tree": {"sha": "4308fde278671076d9f1aaa92a1c909c7857a731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4308fde278671076d9f1aaa92a1c909c7857a731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "html_url": "https://github.com/rust-lang/rust/commit/6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e8a13441cb4169ce4fb43be7f1369d5c9d71e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/65e8a13441cb4169ce4fb43be7f1369d5c9d71e0", "html_url": "https://github.com/rust-lang/rust/commit/65e8a13441cb4169ce4fb43be7f1369d5c9d71e0"}], "stats": {"total": 215, "additions": 146, "deletions": 69}, "files": [{"sha": "3ee53a4d95ed460bd454bbab9f921d565fc9f81d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -2548,8 +2548,8 @@ fn iter_functions(llmod: llvm::ModuleRef) -> ValueIter {\n ///\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n-pub fn filter_reachable_ids(scx: &SharedCrateContext) -> NodeSet {\n-    scx.reachable().iter().map(|x| *x).filter(|&id| {\n+pub fn filter_reachable_ids(tcx: TyCtxt, reachable: NodeSet) -> NodeSet {\n+    reachable.into_iter().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n         // categories:\n@@ -2563,9 +2563,9 @@ pub fn filter_reachable_ids(scx: &SharedCrateContext) -> NodeSet {\n         //\n         // As a result, if this id is an FFI item (foreign item) then we only\n         // let it through if it's included statically.\n-        match scx.tcx().map.get(id) {\n+        match tcx.map.get(id) {\n             hir_map::NodeForeignItem(..) => {\n-                scx.sess().cstore.is_statically_included_foreign_item(id)\n+                tcx.sess.cstore.is_statically_included_foreign_item(id)\n             }\n \n             // Only consider nodes that actually have exported symbols.\n@@ -2575,8 +2575,8 @@ pub fn filter_reachable_ids(scx: &SharedCrateContext) -> NodeSet {\n                 node: hir::ItemFn(..), .. }) |\n             hir_map::NodeImplItem(&hir::ImplItem {\n                 node: hir::ImplItemKind::Method(..), .. }) => {\n-                let def_id = scx.tcx().map.local_def_id(id);\n-                let scheme = scx.tcx().lookup_item_type(def_id);\n+                let def_id = tcx.map.local_def_id(id);\n+                let scheme = tcx.lookup_item_type(def_id);\n                 scheme.generics.types.is_empty()\n             }\n \n@@ -2598,6 +2598,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let krate = tcx.map.krate();\n \n     let ty::CrateAnalysis { export_map, reachable, name, .. } = analysis;\n+    let reachable = filter_reachable_ids(tcx, reachable);\n \n     let check_overflow = if let Some(v) = tcx.sess.opts.debugging_opts.force_overflow_checks {\n         v\n@@ -2621,12 +2622,9 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              reachable,\n                                              check_overflow,\n                                              check_dropflag);\n-\n-    let reachable_symbol_ids = filter_reachable_ids(&shared_ccx);\n-\n     // Translate the metadata.\n     let metadata = time(tcx.sess.time_passes(), \"write metadata\", || {\n-        write_metadata(&shared_ccx, &reachable_symbol_ids)\n+        write_metadata(&shared_ccx, shared_ccx.reachable())\n     });\n \n     let metadata_module = ModuleTranslation {\n@@ -2755,7 +2753,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let sess = shared_ccx.sess();\n-    let mut reachable_symbols = reachable_symbol_ids.iter().map(|&id| {\n+    let mut reachable_symbols = shared_ccx.reachable().iter().map(|&id| {\n         let def_id = shared_ccx.tcx().map.local_def_id(id);\n         Instance::mono(&shared_ccx, def_id).symbol_name(&shared_ccx)\n     }).collect::<Vec<_>>();\n@@ -2911,7 +2909,8 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n         partitioning::partition(scx.tcx(),\n                                 items.iter().cloned(),\n                                 strategy,\n-                                &inlining_map)\n+                                &inlining_map,\n+                                scx.reachable())\n     });\n \n     if scx.sess().opts.debugging_opts.print_trans_items.is_some() {"}, {"sha": "cd08fe68f0cc5b103fc1491f54fc082537f18842", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 82, "deletions": 12, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -126,7 +126,7 @@ use rustc::ty::TyCtxt;\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use syntax::parse::token::{self, InternedString};\n use trans_item::TransItem;\n-use util::nodemap::{FnvHashMap, FnvHashSet};\n+use util::nodemap::{FnvHashMap, FnvHashSet, NodeSet};\n \n pub struct CodegenUnit<'tcx> {\n     pub name: InternedString,\n@@ -147,14 +147,23 @@ const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               trans_items: I,\n                               strategy: PartitioningStrategy,\n-                              inlining_map: &InliningMap<'tcx>)\n+                              inlining_map: &InliningMap<'tcx>,\n+                              reachable: &NodeSet)\n                               -> Vec<CodegenUnit<'tcx>>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n+    if let PartitioningStrategy::FixedUnitCount(1) = strategy {\n+        // If there is only a single codegen-unit, we can use a very simple\n+        // scheme and don't have to bother with doing much analysis.\n+        return vec![single_codegen_unit(tcx, trans_items, reachable)];\n+    }\n+\n     // In the first step, we place all regular translation items into their\n     // respective 'home' codegen unit. Regular translation items are all\n     // functions and statics defined in the local crate.\n-    let mut initial_partitioning = place_root_translation_items(tcx, trans_items);\n+    let mut initial_partitioning = place_root_translation_items(tcx,\n+                                                                trans_items,\n+                                                                reachable);\n \n     // If the partitioning should produce a fixed count of codegen units, merge\n     // until that count is reached.\n@@ -179,7 +188,8 @@ struct PreInliningPartitioning<'tcx> {\n struct PostInliningPartitioning<'tcx>(Vec<CodegenUnit<'tcx>>);\n \n fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                             trans_items: I)\n+                                             trans_items: I,\n+                                             _reachable: &NodeSet)\n                                              -> PreInliningPartitioning<'tcx>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n@@ -219,7 +229,18 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         TransItem::Static(..) => llvm::ExternalLinkage,\n                         TransItem::DropGlue(..) => unreachable!(),\n                         // Is there any benefit to using ExternalLinkage?:\n-                        TransItem::Fn(..) => llvm::WeakODRLinkage,\n+                        TransItem::Fn(ref instance) => {\n+                            if instance.substs.types.is_empty() {\n+                                // This is a non-generic functions, we always\n+                                // make it visible externally on the chance that\n+                                // it might be used in another codegen unit.\n+                                llvm::ExternalLinkage\n+                            } else {\n+                                // Monomorphizations of generic functions are\n+                                // always weak-odr\n+                                llvm::WeakODRLinkage\n+                            }\n+                        }\n                     }\n                 }\n             };\n@@ -282,13 +303,6 @@ fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<\n             items: FnvHashMap()\n         });\n     }\n-\n-    fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString {\n-        token::intern_and_get_ident(&format!(\"{}{}{}\",\n-            crate_name,\n-            NUMBERED_CODEGEN_UNIT_MARKER,\n-            index)[..])\n-    }\n }\n \n fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartitioning<'tcx>,\n@@ -319,6 +333,11 @@ fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartit\n                     // so we just add it here with AvailableExternallyLinkage\n                     new_codegen_unit.items.insert(trans_item,\n                                                   llvm::AvailableExternallyLinkage);\n+                } else if trans_item.is_from_extern_crate() && !trans_item.is_generic_fn() {\n+                    // An instantiation of this item is always available in the\n+                    // crate it was imported from.\n+                    new_codegen_unit.items.insert(trans_item,\n+                                                  llvm::AvailableExternallyLinkage);\n                 } else {\n                     // We can't be sure if this will also be instantiated\n                     // somewhere else, so we add an instance here with\n@@ -414,3 +433,54 @@ fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     return token::intern_and_get_ident(&mod_path[..]);\n }\n+\n+fn single_codegen_unit<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                    trans_items: I,\n+                                    reachable: &NodeSet)\n+                                    -> CodegenUnit<'tcx>\n+    where I: Iterator<Item = TransItem<'tcx>>\n+{\n+    let mut items = FnvHashMap();\n+\n+    for trans_item in trans_items {\n+        let linkage = trans_item.explicit_linkage(tcx).unwrap_or_else(|| {\n+            match trans_item {\n+                TransItem::Static(node_id) => {\n+                    if reachable.contains(&node_id) {\n+                        llvm::ExternalLinkage\n+                    } else {\n+                        llvm::InternalLinkage\n+                    }\n+                }\n+                TransItem::DropGlue(_) => {\n+                    llvm::InternalLinkage\n+                }\n+                TransItem::Fn(instance) => {\n+                    if trans_item.is_generic_fn() ||\n+                       trans_item.is_from_extern_crate() ||\n+                       !reachable.contains(&tcx.map\n+                                               .as_local_node_id(instance.def)\n+                                               .unwrap()) {\n+                        llvm::InternalLinkage\n+                    } else {\n+                        llvm::ExternalLinkage\n+                    }\n+                }\n+            }\n+        });\n+\n+        items.insert(trans_item, linkage);\n+    }\n+\n+    CodegenUnit {\n+        name: numbered_codegen_unit_name(&tcx.crate_name[..], 0),\n+        items: items\n+    }\n+}\n+\n+fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString {\n+    token::intern_and_get_ident(&format!(\"{}{}{}\",\n+        crate_name,\n+        NUMBERED_CODEGEN_UNIT_MARKER,\n+        index)[..])\n+}"}, {"sha": "ae6e095d1429131a7781a700c0393efb8ffd5f04", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -184,6 +184,14 @@ impl<'a, 'tcx> TransItem<'tcx> {\n         }\n     }\n \n+    pub fn is_generic_fn(&self) -> bool {\n+        match *self {\n+            TransItem::Fn(ref instance) => !instance.substs.types.is_empty(),\n+            TransItem::DropGlue(..) |\n+            TransItem::Static(..)   => false,\n+        }\n+    }\n+\n     pub fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<llvm::Linkage> {\n         let def_id = match *self {\n             TransItem::Fn(ref instance) => instance.def,"}, {"sha": "7072a211d2401c479bec19b958c9dfd571654f8d", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -25,7 +25,7 @@ extern crate cgu_extern_drop_glue;\n \n struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n-//~ TRANS_ITEM fn extern_drop_glue::user[0] @@ extern_drop_glue[WeakODR]\n+//~ TRANS_ITEM fn extern_drop_glue::user[0] @@ extern_drop_glue[External]\n fn user()\n {\n     //~ TRANS_ITEM drop-glue extern_drop_glue::LocalStruct[0] @@ extern_drop_glue[OnceODR]\n@@ -37,7 +37,7 @@ mod mod1 {\n \n     struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n-    //~ TRANS_ITEM fn extern_drop_glue::mod1[0]::user[0] @@ extern_drop_glue-mod1[WeakODR]\n+    //~ TRANS_ITEM fn extern_drop_glue::mod1[0]::user[0] @@ extern_drop_glue-mod1[External]\n     fn user()\n     {\n         //~ TRANS_ITEM drop-glue extern_drop_glue::mod1[0]::LocalStruct[0] @@ extern_drop_glue-mod1[OnceODR]"}, {"sha": "5801727494f7ce7602cb835ff450cd7e92d62fa0", "filename": "src/test/codegen-units/partitioning/extern-generic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -19,23 +19,23 @@\n // aux-build:cgu_generic_function.rs\n extern crate cgu_generic_function;\n \n-//~ TRANS_ITEM fn extern_generic::user[0] @@ extern_generic[WeakODR]\n+//~ TRANS_ITEM fn extern_generic::user[0] @@ extern_generic[External]\n fn user() {\n     let _ = cgu_generic_function::foo(\"abc\");\n }\n \n mod mod1 {\n     use cgu_generic_function;\n \n-    //~ TRANS_ITEM fn extern_generic::mod1[0]::user[0] @@ extern_generic-mod1[WeakODR]\n+    //~ TRANS_ITEM fn extern_generic::mod1[0]::user[0] @@ extern_generic-mod1[External]\n     fn user() {\n         let _ = cgu_generic_function::foo(\"abc\");\n     }\n \n     mod mod1 {\n         use cgu_generic_function;\n \n-        //~ TRANS_ITEM fn extern_generic::mod1[0]::mod1[0]::user[0] @@ extern_generic-mod1-mod1[WeakODR]\n+        //~ TRANS_ITEM fn extern_generic::mod1[0]::mod1[0]::user[0] @@ extern_generic-mod1-mod1[External]\n         fn user() {\n             let _ = cgu_generic_function::foo(\"abc\");\n         }\n@@ -45,14 +45,14 @@ mod mod1 {\n mod mod2 {\n     use cgu_generic_function;\n \n-    //~ TRANS_ITEM fn extern_generic::mod2[0]::user[0] @@ extern_generic-mod2[WeakODR]\n+    //~ TRANS_ITEM fn extern_generic::mod2[0]::user[0] @@ extern_generic-mod2[External]\n     fn user() {\n         let _ = cgu_generic_function::foo(\"abc\");\n     }\n }\n \n mod mod3 {\n-    //~ TRANS_ITEM fn extern_generic::mod3[0]::non_user[0] @@ extern_generic-mod3[WeakODR]\n+    //~ TRANS_ITEM fn extern_generic::mod3[0]::non_user[0] @@ extern_generic-mod3[External]\n     fn non_user() {}\n }\n "}, {"sha": "285b068fe1c6cd935decd857524e600f105c045b", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -21,10 +21,10 @@ extern crate cgu_explicit_inlining;\n // This test makes sure that items inlined from external crates are privately\n // instantiated in every codegen unit they are used in.\n \n-//~ TRANS_ITEM fn cgu_explicit_inlining::inlined[0] @@ inlining_from_extern_crate[OnceODR] inlining_from_extern_crate-mod1[OnceODR]\n-//~ TRANS_ITEM fn cgu_explicit_inlining::always_inlined[0] @@ inlining_from_extern_crate[OnceODR] inlining_from_extern_crate-mod2[OnceODR]\n+//~ TRANS_ITEM fn cgu_explicit_inlining::inlined[0] @@ inlining_from_extern_crate[Available] inlining_from_extern_crate-mod1[Available]\n+//~ TRANS_ITEM fn cgu_explicit_inlining::always_inlined[0] @@ inlining_from_extern_crate[Available] inlining_from_extern_crate-mod2[Available]\n \n-//~ TRANS_ITEM fn inlining_from_extern_crate::user[0] @@ inlining_from_extern_crate[WeakODR]\n+//~ TRANS_ITEM fn inlining_from_extern_crate::user[0] @@ inlining_from_extern_crate[External]\n pub fn user()\n {\n     cgu_explicit_inlining::inlined();\n@@ -37,7 +37,7 @@ pub fn user()\n mod mod1 {\n     use cgu_explicit_inlining;\n \n-    //~ TRANS_ITEM fn inlining_from_extern_crate::mod1[0]::user[0] @@ inlining_from_extern_crate-mod1[WeakODR]\n+    //~ TRANS_ITEM fn inlining_from_extern_crate::mod1[0]::user[0] @@ inlining_from_extern_crate-mod1[External]\n     pub fn user()\n     {\n         cgu_explicit_inlining::inlined();\n@@ -50,7 +50,7 @@ mod mod1 {\n mod mod2 {\n     use cgu_explicit_inlining;\n \n-    //~ TRANS_ITEM fn inlining_from_extern_crate::mod2[0]::user[0] @@ inlining_from_extern_crate-mod2[WeakODR]\n+    //~ TRANS_ITEM fn inlining_from_extern_crate::mod2[0]::user[0] @@ inlining_from_extern_crate-mod2[External]\n     pub fn user()\n     {\n         cgu_explicit_inlining::always_inlined();"}, {"sha": "dc50650de6d4352a471c144a20da2c50cccb5013", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -23,7 +23,7 @@ struct Struct {\n }\n \n impl Drop for Struct {\n-    //~ TRANS_ITEM fn local_drop_glue::{{impl}}[0]::drop[0] @@ local_drop_glue[WeakODR]\n+    //~ TRANS_ITEM fn local_drop_glue::{{impl}}[0]::drop[0] @@ local_drop_glue[External]\n     fn drop(&mut self) {}\n }\n \n@@ -32,7 +32,7 @@ struct Outer {\n     _a: Struct\n }\n \n-//~ TRANS_ITEM fn local_drop_glue::user[0] @@ local_drop_glue[WeakODR]\n+//~ TRANS_ITEM fn local_drop_glue::user[0] @@ local_drop_glue[External]\n fn user()\n {\n     let _ = Outer {\n@@ -53,7 +53,7 @@ mod mod1\n         _b: (u32, Struct),\n     }\n \n-    //~ TRANS_ITEM fn local_drop_glue::mod1[0]::user[0] @@ local_drop_glue-mod1[WeakODR]\n+    //~ TRANS_ITEM fn local_drop_glue::mod1[0]::user[0] @@ local_drop_glue-mod1[External]\n     fn user()\n     {\n         let _ = Struct2 {"}, {"sha": "bfc911e36e9a81d01e847bb3c0d5b7fbf89c986b", "filename": "src/test/codegen-units/partitioning/local-generic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -25,23 +25,23 @@\n //~ TRANS_ITEM fn local_generic::generic[0]<&str> @@ local_generic.volatile[WeakODR]\n pub fn generic<T>(x: T) -> T { x }\n \n-//~ TRANS_ITEM fn local_generic::user[0] @@ local_generic[WeakODR]\n+//~ TRANS_ITEM fn local_generic::user[0] @@ local_generic[External]\n fn user() {\n     let _ = generic(0u32);\n }\n \n mod mod1 {\n     pub use super::generic;\n \n-    //~ TRANS_ITEM fn local_generic::mod1[0]::user[0] @@ local_generic-mod1[WeakODR]\n+    //~ TRANS_ITEM fn local_generic::mod1[0]::user[0] @@ local_generic-mod1[External]\n     fn user() {\n         let _ = generic(0u64);\n     }\n \n     mod mod1 {\n         use super::generic;\n \n-        //~ TRANS_ITEM fn local_generic::mod1[0]::mod1[0]::user[0] @@ local_generic-mod1-mod1[WeakODR]\n+        //~ TRANS_ITEM fn local_generic::mod1[0]::mod1[0]::user[0] @@ local_generic-mod1-mod1[External]\n         fn user() {\n             let _ = generic('c');\n         }\n@@ -51,7 +51,7 @@ mod mod1 {\n mod mod2 {\n     use super::generic;\n \n-    //~ TRANS_ITEM fn local_generic::mod2[0]::user[0] @@ local_generic-mod2[WeakODR]\n+    //~ TRANS_ITEM fn local_generic::mod2[0]::user[0] @@ local_generic-mod2[External]\n     fn user() {\n         let _ = generic(\"abc\");\n     }"}, {"sha": "5eb1cbc2199f759bccd5003c3275b0c1e7417d5c", "filename": "src/test/codegen-units/partitioning/local-inlining.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -19,7 +19,7 @@\n mod inline {\n \n     // Important: This function should show up in all codegen units where it is inlined\n-    //~ TRANS_ITEM fn local_inlining::inline[0]::inlined_function[0] @@ local_inlining-inline[WeakODR] local_inlining-user1[Available] local_inlining-user2[Available]\n+    //~ TRANS_ITEM fn local_inlining::inline[0]::inlined_function[0] @@ local_inlining-inline[External] local_inlining-user1[Available] local_inlining-user2[Available]\n     #[inline(always)]\n     pub fn inlined_function()\n     {\n@@ -30,7 +30,7 @@ mod inline {\n mod user1 {\n     use super::inline;\n \n-    //~ TRANS_ITEM fn local_inlining::user1[0]::foo[0] @@ local_inlining-user1[WeakODR]\n+    //~ TRANS_ITEM fn local_inlining::user1[0]::foo[0] @@ local_inlining-user1[External]\n     fn foo() {\n         inline::inlined_function();\n     }\n@@ -39,15 +39,15 @@ mod user1 {\n mod user2 {\n     use super::inline;\n \n-    //~ TRANS_ITEM fn local_inlining::user2[0]::bar[0] @@ local_inlining-user2[WeakODR]\n+    //~ TRANS_ITEM fn local_inlining::user2[0]::bar[0] @@ local_inlining-user2[External]\n     fn bar() {\n         inline::inlined_function();\n     }\n }\n \n mod non_user {\n \n-    //~ TRANS_ITEM fn local_inlining::non_user[0]::baz[0] @@ local_inlining-non_user[WeakODR]\n+    //~ TRANS_ITEM fn local_inlining::non_user[0]::baz[0] @@ local_inlining-non_user[External]\n     fn baz() {\n \n     }"}, {"sha": "28c4698eabd1fe636f802e828447d433cbffb067", "filename": "src/test/codegen-units/partitioning/local-transitive-inlining.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -18,7 +18,7 @@\n \n mod inline {\n \n-    //~ TRANS_ITEM fn local_transitive_inlining::inline[0]::inlined_function[0] @@ local_transitive_inlining-inline[WeakODR] local_transitive_inlining-direct_user[Available] local_transitive_inlining-indirect_user[Available]\n+    //~ TRANS_ITEM fn local_transitive_inlining::inline[0]::inlined_function[0] @@ local_transitive_inlining-inline[External] local_transitive_inlining-direct_user[Available] local_transitive_inlining-indirect_user[Available]\n     #[inline(always)]\n     pub fn inlined_function()\n     {\n@@ -29,7 +29,7 @@ mod inline {\n mod direct_user {\n     use super::inline;\n \n-    //~ TRANS_ITEM fn local_transitive_inlining::direct_user[0]::foo[0] @@ local_transitive_inlining-direct_user[WeakODR] local_transitive_inlining-indirect_user[Available]\n+    //~ TRANS_ITEM fn local_transitive_inlining::direct_user[0]::foo[0] @@ local_transitive_inlining-direct_user[External] local_transitive_inlining-indirect_user[Available]\n     #[inline(always)]\n     pub fn foo() {\n         inline::inlined_function();\n@@ -39,15 +39,15 @@ mod direct_user {\n mod indirect_user {\n     use super::direct_user;\n \n-    //~ TRANS_ITEM fn local_transitive_inlining::indirect_user[0]::bar[0] @@ local_transitive_inlining-indirect_user[WeakODR]\n+    //~ TRANS_ITEM fn local_transitive_inlining::indirect_user[0]::bar[0] @@ local_transitive_inlining-indirect_user[External]\n     fn bar() {\n         direct_user::foo();\n     }\n }\n \n mod non_user {\n \n-    //~ TRANS_ITEM fn local_transitive_inlining::non_user[0]::baz[0] @@ local_transitive_inlining-non_user[WeakODR]\n+    //~ TRANS_ITEM fn local_transitive_inlining::non_user[0]::baz[0] @@ local_transitive_inlining-non_user[External]\n     fn baz() {\n \n     }"}, {"sha": "f8e7d8d2554654b954e3a3ee0c6db451bd8b252b", "filename": "src/test/codegen-units/partitioning/methods-are-with-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -25,10 +25,10 @@ mod mod1 {\n     // Even though the impl is in `mod1`, the methods should end up in the\n     // parent module, since that is where their self-type is.\n     impl SomeType {\n-        //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[0]::method[0] @@ methods_are_with_self_type[WeakODR]\n+        //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[0]::method[0] @@ methods_are_with_self_type[External]\n         fn method(&self) {}\n \n-        //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[0]::associated_fn[0] @@ methods_are_with_self_type[WeakODR]\n+        //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[0]::associated_fn[0] @@ methods_are_with_self_type[External]\n         fn associated_fn() {}\n     }\n "}, {"sha": "4da64110321688400ba7b734460abd4b5e344ada", "filename": "src/test/codegen-units/partitioning/regular-modules.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -16,37 +16,37 @@\n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n \n-//~ TRANS_ITEM fn regular_modules::foo[0] @@ regular_modules[WeakODR]\n+//~ TRANS_ITEM fn regular_modules::foo[0] @@ regular_modules[External]\n fn foo() {}\n \n-//~ TRANS_ITEM fn regular_modules::bar[0] @@ regular_modules[WeakODR]\n+//~ TRANS_ITEM fn regular_modules::bar[0] @@ regular_modules[External]\n fn bar() {}\n \n //~ TRANS_ITEM static regular_modules::BAZ[0] @@ regular_modules[External]\n static BAZ: u64 = 0;\n \n mod mod1 {\n \n-    //~ TRANS_ITEM fn regular_modules::mod1[0]::foo[0] @@ regular_modules-mod1[WeakODR]\n+    //~ TRANS_ITEM fn regular_modules::mod1[0]::foo[0] @@ regular_modules-mod1[External]\n     fn foo() {}\n-    //~ TRANS_ITEM fn regular_modules::mod1[0]::bar[0] @@ regular_modules-mod1[WeakODR]\n+    //~ TRANS_ITEM fn regular_modules::mod1[0]::bar[0] @@ regular_modules-mod1[External]\n     fn bar() {}\n     //~ TRANS_ITEM static regular_modules::mod1[0]::BAZ[0] @@ regular_modules-mod1[External]\n     static BAZ: u64 = 0;\n \n     mod mod1 {\n-        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod1[0]::foo[0] @@ regular_modules-mod1-mod1[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod1[0]::foo[0] @@ regular_modules-mod1-mod1[External]\n         fn foo() {}\n-        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod1[0]::bar[0] @@ regular_modules-mod1-mod1[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod1[0]::bar[0] @@ regular_modules-mod1-mod1[External]\n         fn bar() {}\n         //~ TRANS_ITEM static regular_modules::mod1[0]::mod1[0]::BAZ[0] @@ regular_modules-mod1-mod1[External]\n         static BAZ: u64 = 0;\n     }\n \n     mod mod2 {\n-        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod2[0]::foo[0] @@ regular_modules-mod1-mod2[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod2[0]::foo[0] @@ regular_modules-mod1-mod2[External]\n         fn foo() {}\n-        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod2[0]::bar[0] @@ regular_modules-mod1-mod2[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod1[0]::mod2[0]::bar[0] @@ regular_modules-mod1-mod2[External]\n         fn bar() {}\n         //~ TRANS_ITEM static regular_modules::mod1[0]::mod2[0]::BAZ[0] @@ regular_modules-mod1-mod2[External]\n         static BAZ: u64 = 0;\n@@ -55,26 +55,26 @@ mod mod1 {\n \n mod mod2 {\n \n-    //~ TRANS_ITEM fn regular_modules::mod2[0]::foo[0] @@ regular_modules-mod2[WeakODR]\n+    //~ TRANS_ITEM fn regular_modules::mod2[0]::foo[0] @@ regular_modules-mod2[External]\n     fn foo() {}\n-    //~ TRANS_ITEM fn regular_modules::mod2[0]::bar[0] @@ regular_modules-mod2[WeakODR]\n+    //~ TRANS_ITEM fn regular_modules::mod2[0]::bar[0] @@ regular_modules-mod2[External]\n     fn bar() {}\n     //~ TRANS_ITEM static regular_modules::mod2[0]::BAZ[0] @@ regular_modules-mod2[External]\n     static BAZ: u64 = 0;\n \n     mod mod1 {\n-        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod1[0]::foo[0] @@ regular_modules-mod2-mod1[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod1[0]::foo[0] @@ regular_modules-mod2-mod1[External]\n         fn foo() {}\n-        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod1[0]::bar[0] @@ regular_modules-mod2-mod1[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod1[0]::bar[0] @@ regular_modules-mod2-mod1[External]\n         fn bar() {}\n         //~ TRANS_ITEM static regular_modules::mod2[0]::mod1[0]::BAZ[0] @@ regular_modules-mod2-mod1[External]\n         static BAZ: u64 = 0;\n     }\n \n     mod mod2 {\n-        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod2[0]::foo[0] @@ regular_modules-mod2-mod2[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod2[0]::foo[0] @@ regular_modules-mod2-mod2[External]\n         fn foo() {}\n-        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod2[0]::bar[0] @@ regular_modules-mod2-mod2[WeakODR]\n+        //~ TRANS_ITEM fn regular_modules::mod2[0]::mod2[0]::bar[0] @@ regular_modules-mod2-mod2[External]\n         fn bar() {}\n         //~ TRANS_ITEM static regular_modules::mod2[0]::mod2[0]::BAZ[0] @@ regular_modules-mod2-mod2[External]\n         static BAZ: u64 = 0;"}, {"sha": "ffe1ec278b8dd3e0b99075d4bf615a9acfec2b69", "filename": "src/test/codegen-units/partitioning/statics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8c94b8488405ac3ade9c358e00fe96da9c72b8/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs?ref=6c8c94b8488405ac3ade9c358e00fe96da9c72b8", "patch": "@@ -21,7 +21,7 @@ static FOO: u32 = 0;\n //~ TRANS_ITEM static statics::BAR[0] @@ statics[External]\n static BAR: u32 = 0;\n \n-//~ TRANS_ITEM fn statics::function[0] @@ statics[WeakODR]\n+//~ TRANS_ITEM fn statics::function[0] @@ statics[External]\n fn function() {\n     //~ TRANS_ITEM static statics::function[0]::FOO[0] @@ statics[External]\n     static FOO: u32 = 0;\n@@ -37,7 +37,7 @@ mod mod1 {\n     //~ TRANS_ITEM static statics::mod1[0]::BAR[0] @@ statics-mod1[External]\n     static BAR: u32 = 0;\n \n-    //~ TRANS_ITEM fn statics::mod1[0]::function[0] @@ statics-mod1[WeakODR]\n+    //~ TRANS_ITEM fn statics::mod1[0]::function[0] @@ statics-mod1[External]\n     fn function() {\n         //~ TRANS_ITEM static statics::mod1[0]::function[0]::FOO[0] @@ statics-mod1[External]\n         static FOO: u32 = 0;"}]}