{"sha": "538437e829fd1bdaaf5104f7750327cfdeed29bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzODQzN2U4MjlmZDFiZGFhZjUxMDRmNzc1MDMyN2NmZGVlZDI5YmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T07:17:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T07:32:04Z"}, "message": "move function closer to its usage", "tree": {"sha": "cb9f31a6c9482481bc2174f9f725e9e1dceda676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb9f31a6c9482481bc2174f9f725e9e1dceda676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/538437e829fd1bdaaf5104f7750327cfdeed29bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/538437e829fd1bdaaf5104f7750327cfdeed29bf", "html_url": "https://github.com/rust-lang/rust/commit/538437e829fd1bdaaf5104f7750327cfdeed29bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/538437e829fd1bdaaf5104f7750327cfdeed29bf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a020186f8d4411a9820c4e3378f86ea2ca72af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a020186f8d4411a9820c4e3378f86ea2ca72af5", "html_url": "https://github.com/rust-lang/rust/commit/9a020186f8d4411a9820c4e3378f86ea2ca72af5"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "8f49ba9572d774ba76c006020780f283f6101daa", "filename": "src/libsyntax/ext/mbe/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/538437e829fd1bdaaf5104f7750327cfdeed29bf/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538437e829fd1bdaaf5104f7750327cfdeed29bf/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs?ref=538437e829fd1bdaaf5104f7750327cfdeed29bf", "patch": "@@ -413,18 +413,6 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n     Success(ret_val)\n }\n \n-/// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For\n-/// other tokens, this is \"unexpected token...\".\n-crate fn parse_failure_msg(tok: &Token) -> String {\n-    match tok.kind {\n-        token::Eof => \"unexpected end of macro invocation\".to_string(),\n-        _ => format!(\n-            \"no rules expected the token `{}`\",\n-            pprust::token_to_string(tok)\n-        ),\n-    }\n-}\n-\n /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n     if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {"}, {"sha": "c24f6a666039fffeed8c05c9f247c990647e7c9c", "filename": "src/libsyntax/ext/mbe/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/538437e829fd1bdaaf5104f7750327cfdeed29bf/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538437e829fd1bdaaf5104f7750327cfdeed29bf/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs?ref=538437e829fd1bdaaf5104f7750327cfdeed29bf", "patch": "@@ -6,7 +6,7 @@ use crate::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n use crate::ext::expand::{AstFragment, AstFragmentKind};\n use crate::ext::mbe;\n use crate::ext::mbe::macro_check;\n-use crate::ext::mbe::macro_parser::{parse, parse_failure_msg};\n+use crate::ext::mbe::macro_parser::parse;\n use crate::ext::mbe::macro_parser::{Error, Failure, Success};\n use crate::ext::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::ext::mbe::transcribe::transcribe;\n@@ -15,6 +15,7 @@ use crate::parse::parser::Parser;\n use crate::parse::token::TokenKind::*;\n use crate::parse::token::{self, NtTT, Token};\n use crate::parse::{Directory, ParseSess};\n+use crate::print::pprust;\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n@@ -1176,3 +1177,15 @@ impl TokenTree {\n         parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n     }\n }\n+\n+/// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For\n+/// other tokens, this is \"unexpected token...\".\n+fn parse_failure_msg(tok: &Token) -> String {\n+    match tok.kind {\n+        token::Eof => \"unexpected end of macro invocation\".to_string(),\n+        _ => format!(\n+            \"no rules expected the token `{}`\",\n+            pprust::token_to_string(tok),\n+        ),\n+    }\n+}"}]}