{"sha": "6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYmY0NTU4YWMwOTZiNmYyY2M3Y2VmMzkyMDY4MWI4YzQyZTEzZWY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-19T22:20:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-10T21:08:04Z"}, "message": "Feature gate is always present", "tree": {"sha": "d6fbc78c681cad056a0f46a72227f3d946b6fbe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6fbc78c681cad056a0f46a72227f3d946b6fbe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "html_url": "https://github.com/rust-lang/rust/commit/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20c50444650f90f266ab2a46afd5089b4c01a28c", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c50444650f90f266ab2a46afd5089b4c01a28c", "html_url": "https://github.com/rust-lang/rust/commit/20c50444650f90f266ab2a46afd5089b4c01a28c"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "801d06e61016961ef8a808004708c727044ddfbf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "patch": "@@ -2358,7 +2358,7 @@ impl Clean<Stability> for attr::Stability {\n     fn clean(&self, _: &DocContext<'_>) -> Stability {\n         Stability {\n             level: stability::StabilityLevel::from_attr_level(&self.level),\n-            feature: Some(self.feature.to_string()).filter(|f| !f.is_empty()),\n+            feature: self.feature.to_string(),\n             since: match self.level {\n                 attr::Stable { ref since } => since.to_string(),\n                 _ => String::new(),"}, {"sha": "627f88df45c9fe00170d487dc13e5b0eaab59c45", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "patch": "@@ -1525,7 +1525,7 @@ pub struct ProcMacro {\n #[derive(Clone, Debug)]\n pub struct Stability {\n     pub level: stability::StabilityLevel,\n-    pub feature: Option<String>,\n+    pub feature: String,\n     pub since: String,\n     pub unstable_reason: Option<String>,\n     pub issue: Option<NonZeroU32>,"}, {"sha": "54ad4e8f4ecc4c98dfe3a34b06dd18fb76cb461f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbf4558ac096b6f2cc7cef3920681b8c42e13ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6bbf4558ac096b6f2cc7cef3920681b8c42e13ef", "patch": "@@ -2126,7 +2126,7 @@ fn stability_tags(item: &clean::Item) -> String {\n     if item\n         .stability\n         .as_ref()\n-        .map(|s| s.level == stability::Unstable && s.feature.as_deref() != Some(\"rustc_private\"))\n+        .map(|s| s.level == stability::Unstable && s.feature != \"rustc_private\")\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"Experimental\");\n@@ -2177,25 +2177,25 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n     // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n-    if let Some(stab) = item.stability.as_ref().filter(|stab| {\n-        stab.level == stability::Unstable && stab.feature.as_deref() != Some(\"rustc_private\")\n-    }) {\n+    if let Some(stab) = item\n+        .stability\n+        .as_ref()\n+        .filter(|stab| stab.level == stability::Unstable && stab.feature != \"rustc_private\")\n+    {\n         let mut message =\n             \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n-        if let Some(feature) = stab.feature.as_deref() {\n-            let mut feature = format!(\"<code>{}</code>\", Escape(&feature));\n-            if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n-                feature.push_str(&format!(\n-                    \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n-                    url = url,\n-                    issue = issue\n-                ));\n-            }\n-\n-            message.push_str(&format!(\" ({})\", feature));\n+        let mut feature = format!(\"<code>{}</code>\", Escape(&stab.feature));\n+        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n+            feature.push_str(&format!(\n+                \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n+                url = url,\n+                issue = issue\n+            ));\n         }\n \n+        message.push_str(&format!(\" ({})\", feature));\n+\n         if let Some(unstable_reason) = &stab.unstable_reason {\n             let mut ids = cx.id_map.borrow_mut();\n             message = format!("}]}