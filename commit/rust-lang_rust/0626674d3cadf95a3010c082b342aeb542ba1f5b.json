{"sha": "0626674d3cadf95a3010c082b342aeb542ba1f5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjY2NzRkM2NhZGY5NWEzMDEwYzA4MmIzNDJhZWI1NDJiYTFmNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-17T08:08:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-17T08:08:18Z"}, "message": "Auto merge of #4280 - phansch:uitests_matches, r=flip1995\n\nUI Test Cleanup: Extract match_ref_pats tests\n\nchangelog: none\n\ncc #2038", "tree": {"sha": "c3485e1f3be5e32a4213a44a7335a1a6a736fa0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3485e1f3be5e32a4213a44a7335a1a6a736fa0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0626674d3cadf95a3010c082b342aeb542ba1f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0626674d3cadf95a3010c082b342aeb542ba1f5b", "html_url": "https://github.com/rust-lang/rust/commit/0626674d3cadf95a3010c082b342aeb542ba1f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0626674d3cadf95a3010c082b342aeb542ba1f5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfb5adbac12ba1aa1121a6db43ae6ecee23e578", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfb5adbac12ba1aa1121a6db43ae6ecee23e578", "html_url": "https://github.com/rust-lang/rust/commit/5dfb5adbac12ba1aa1121a6db43ae6ecee23e578"}, {"sha": "022b9876c2c70ac80174a4c78826113b9a965cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/022b9876c2c70ac80174a4c78826113b9a965cbc", "html_url": "https://github.com/rust-lang/rust/commit/022b9876c2c70ac80174a4c78826113b9a965cbc"}], "stats": {"total": 373, "additions": 191, "deletions": 182}, "files": [{"sha": "d26b59db91bcf3468feb6b56635fa802ccca3eec", "filename": "tests/ui/match_ref_pats.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.rs?ref=0626674d3cadf95a3010c082b342aeb542ba1f5b", "patch": "@@ -0,0 +1,73 @@\n+#![warn(clippy::match_ref_pats)]\n+\n+fn ref_pats() {\n+    {\n+        let v = &Some(0);\n+        match v {\n+            &Some(v) => println!(\"{:?}\", v),\n+            &None => println!(\"none\"),\n+        }\n+        match v {\n+            // This doesn't trigger; we have a different pattern.\n+            &Some(v) => println!(\"some\"),\n+            other => println!(\"other\"),\n+        }\n+    }\n+    let tup = &(1, 2);\n+    match tup {\n+        &(v, 1) => println!(\"{}\", v),\n+        _ => println!(\"none\"),\n+    }\n+    // Special case: using `&` both in expr and pats.\n+    let w = Some(0);\n+    match &w {\n+        &Some(v) => println!(\"{:?}\", v),\n+        &None => println!(\"none\"),\n+    }\n+    // False positive: only wildcard pattern.\n+    let w = Some(0);\n+    match w {\n+        _ => println!(\"none\"),\n+    }\n+\n+    let a = &Some(0);\n+    if let &None = a {\n+        println!(\"none\");\n+    }\n+\n+    let b = Some(0);\n+    if let &None = &b {\n+        println!(\"none\");\n+    }\n+}\n+\n+mod ice_3719 {\n+    macro_rules! foo_variant(\n+        ($idx:expr) => (Foo::get($idx).unwrap())\n+    );\n+\n+    enum Foo {\n+        A,\n+        B,\n+    }\n+\n+    impl Foo {\n+        fn get(idx: u8) -> Option<&'static Self> {\n+            match idx {\n+                0 => Some(&Foo::A),\n+                1 => Some(&Foo::B),\n+                _ => None,\n+            }\n+        }\n+    }\n+\n+    fn ice_3719() {\n+        // ICE #3719\n+        match foo_variant!(0) {\n+            &Foo::A => println!(\"A\"),\n+            _ => println!(\"Wild\"),\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "80e862c8ea9e72a395e86c8fb2ec5d3f51a9fa97", "filename": "tests/ui/match_ref_pats.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatch_ref_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatch_ref_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.stderr?ref=0626674d3cadf95a3010c082b342aeb542ba1f5b", "patch": "@@ -0,0 +1,86 @@\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:6:9\n+   |\n+LL | /         match v {\n+LL | |             &Some(v) => println!(\"{:?}\", v),\n+LL | |             &None => println!(\"none\"),\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |         match *v {\n+LL |             Some(v) => println!(\"{:?}\", v),\n+LL |             None => println!(\"none\"),\n+   |\n+\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:17:5\n+   |\n+LL | /     match tup {\n+LL | |         &(v, 1) => println!(\"{}\", v),\n+LL | |         _ => println!(\"none\"),\n+LL | |     }\n+   | |_____^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |     match *tup {\n+LL |         (v, 1) => println!(\"{}\", v),\n+   |\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_ref_pats.rs:23:5\n+   |\n+LL | /     match &w {\n+LL | |         &Some(v) => println!(\"{:?}\", v),\n+LL | |         &None => println!(\"none\"),\n+LL | |     }\n+   | |_____^\n+help: try\n+   |\n+LL |     match w {\n+LL |         Some(v) => println!(\"{:?}\", v),\n+LL |         None => println!(\"none\"),\n+   |\n+\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:34:5\n+   |\n+LL | /     if let &None = a {\n+LL | |         println!(\"none\");\n+LL | |     }\n+   | |_____^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |     if let None = *a {\n+   |            ^^^^   ^^\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_ref_pats.rs:39:5\n+   |\n+LL | /     if let &None = &b {\n+LL | |         println!(\"none\");\n+LL | |     }\n+   | |_____^\n+help: try\n+   |\n+LL |     if let None = b {\n+   |            ^^^^   ^\n+\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:66:9\n+   |\n+LL | /         match foo_variant!(0) {\n+LL | |             &Foo::A => println!(\"A\"),\n+LL | |             _ => println!(\"Wild\"),\n+LL | |         }\n+   | |_________^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |         match *foo_variant!(0) {\n+LL |             Foo::A => println!(\"A\"),\n+   |\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "44725db97f7fd71e0f5e9f00032a54512b57997b", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=0626674d3cadf95a3010c082b342aeb542ba1f5b", "patch": "@@ -5,47 +5,6 @@\n \n fn dummy() {}\n \n-fn ref_pats() {\n-    {\n-        let v = &Some(0);\n-        match v {\n-            &Some(v) => println!(\"{:?}\", v),\n-            &None => println!(\"none\"),\n-        }\n-        match v {\n-            // This doesn't trigger; we have a different pattern.\n-            &Some(v) => println!(\"some\"),\n-            other => println!(\"other\"),\n-        }\n-    }\n-    let tup = &(1, 2);\n-    match tup {\n-        &(v, 1) => println!(\"{}\", v),\n-        _ => println!(\"none\"),\n-    }\n-    // Special case: using `&` both in expr and pats.\n-    let w = Some(0);\n-    match &w {\n-        &Some(v) => println!(\"{:?}\", v),\n-        &None => println!(\"none\"),\n-    }\n-    // False positive: only wildcard pattern.\n-    let w = Some(0);\n-    match w {\n-        _ => println!(\"none\"),\n-    }\n-\n-    let a = &Some(0);\n-    if let &None = a {\n-        println!(\"none\");\n-    }\n-\n-    let b = Some(0);\n-    if let &None = &b {\n-        println!(\"none\");\n-    }\n-}\n-\n fn match_wild_err_arm() {\n     let x: Result<i32, &str> = Ok(3);\n \n@@ -136,29 +95,4 @@ fn match_wild_err_arm() {\n     }\n }\n \n-macro_rules! foo_variant(\n-    ($idx:expr) => (Foo::get($idx).unwrap())\n-);\n-\n-enum Foo {\n-    A,\n-    B,\n-}\n-\n-impl Foo {\n-    fn get(idx: u8) -> Option<&'static Self> {\n-        match idx {\n-            0 => Some(&Foo::A),\n-            1 => Some(&Foo::B),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-fn main() {\n-    // ICE #3719\n-    match foo_variant!(0) {\n-        &Foo::A => println!(\"A\"),\n-        _ => println!(\"Wild\"),\n-    }\n-}\n+fn main() {}"}, {"sha": "f47e976e8cc4a1eb8a939d99a5e73c6d784f5b11", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 31, "deletions": 115, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0626674d3cadf95a3010c082b342aeb542ba1f5b/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=0626674d3cadf95a3010c082b342aeb542ba1f5b", "patch": "@@ -1,75 +1,5 @@\n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:11:9\n-   |\n-LL | /         match v {\n-LL | |             &Some(v) => println!(\"{:?}\", v),\n-LL | |             &None => println!(\"none\"),\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |         match *v {\n-LL |             Some(v) => println!(\"{:?}\", v),\n-LL |             None => println!(\"none\"),\n-   |\n-\n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:22:5\n-   |\n-LL | /     match tup {\n-LL | |         &(v, 1) => println!(\"{}\", v),\n-LL | |         _ => println!(\"none\"),\n-LL | |     }\n-   | |_____^\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |     match *tup {\n-LL |         (v, 1) => println!(\"{}\", v),\n-   |\n-\n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/matches.rs:28:5\n-   |\n-LL | /     match &w {\n-LL | |         &Some(v) => println!(\"{:?}\", v),\n-LL | |         &None => println!(\"none\"),\n-LL | |     }\n-   | |_____^\n-help: try\n-   |\n-LL |     match w {\n-LL |         Some(v) => println!(\"{:?}\", v),\n-LL |         None => println!(\"none\"),\n-   |\n-\n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:39:5\n-   |\n-LL | /     if let &None = a {\n-LL | |         println!(\"none\");\n-LL | |     }\n-   | |_____^\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |     if let None = *a {\n-   |            ^^^^   ^^\n-\n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/matches.rs:44:5\n-   |\n-LL | /     if let &None = &b {\n-LL | |         println!(\"none\");\n-LL | |     }\n-   | |_____^\n-help: try\n-   |\n-LL |     if let None = b {\n-   |            ^^^^   ^\n-\n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:55:9\n+  --> $DIR/matches.rs:14:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n@@ -78,197 +8,183 @@ LL |         Err(_) => panic!(\"err\"),\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:54:18\n+  --> $DIR/matches.rs:13:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n-  --> $DIR/matches.rs:53:18\n+  --> $DIR/matches.rs:12:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:53:9\n+  --> $DIR/matches.rs:12:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:61:9\n+  --> $DIR/matches.rs:20:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:60:18\n+  --> $DIR/matches.rs:19:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:59:18\n+  --> $DIR/matches.rs:18:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:59:9\n+  --> $DIR/matches.rs:18:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:67:9\n+  --> $DIR/matches.rs:26:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:66:18\n+  --> $DIR/matches.rs:25:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:65:18\n+  --> $DIR/matches.rs:24:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:65:9\n+  --> $DIR/matches.rs:24:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:75:18\n+  --> $DIR/matches.rs:34:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:74:18\n+  --> $DIR/matches.rs:33:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:74:9\n+  --> $DIR/matches.rs:33:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:82:18\n+  --> $DIR/matches.rs:41:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:81:18\n+  --> $DIR/matches.rs:40:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:81:9\n+  --> $DIR/matches.rs:40:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:88:18\n+  --> $DIR/matches.rs:47:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:87:18\n+  --> $DIR/matches.rs:46:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:87:9\n+  --> $DIR/matches.rs:46:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:94:18\n+  --> $DIR/matches.rs:53:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:93:18\n+  --> $DIR/matches.rs:52:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:93:9\n+  --> $DIR/matches.rs:52:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:117:29\n+  --> $DIR/matches.rs:76:29\n    |\n LL |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:116:29\n+  --> $DIR/matches.rs:75:29\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-  --> $DIR/matches.rs:116:9\n+  --> $DIR/matches.rs:75:9\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:132:18\n+  --> $DIR/matches.rs:91:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:131:18\n+  --> $DIR/matches.rs:90:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:131:9\n+  --> $DIR/matches.rs:90:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:160:5\n-   |\n-LL | /     match foo_variant!(0) {\n-LL | |         &Foo::A => println!(\"A\"),\n-LL | |         _ => println!(\"Wild\"),\n-LL | |     }\n-   | |_____^\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |     match *foo_variant!(0) {\n-LL |         Foo::A => println!(\"A\"),\n-   |\n-\n-error: aborting due to 18 previous errors\n+error: aborting due to 12 previous errors\n "}]}