{"sha": "8a38928b44e26d4d7b9bdacb207a85878058cac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzg5MjhiNDRlMjZkNGQ3YjliZGFjYjIwN2E4NTg3ODA1OGNhYzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-27T19:20:25Z"}, "message": "Address comments + Fix rebase", "tree": {"sha": "a5d81b3f1cfb8048be4233049b7b192fdec17e1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d81b3f1cfb8048be4233049b7b192fdec17e1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a38928b44e26d4d7b9bdacb207a85878058cac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a38928b44e26d4d7b9bdacb207a85878058cac8", "html_url": "https://github.com/rust-lang/rust/commit/8a38928b44e26d4d7b9bdacb207a85878058cac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a38928b44e26d4d7b9bdacb207a85878058cac8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eada951f9c302d531d6b9ad474e87faafea9a5d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eada951f9c302d531d6b9ad474e87faafea9a5d5", "html_url": "https://github.com/rust-lang/rust/commit/eada951f9c302d531d6b9ad474e87faafea9a5d5"}], "stats": {"total": 109, "additions": 58, "deletions": 51}, "files": [{"sha": "13202a454fe55a02f24c11c57adc6d8c386b4ccc", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -802,34 +802,6 @@ impl<'tcx> fmt::Display for ty::TraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> ty::TypeVariants<'tcx> {\n-    pub fn descr(&self) -> &'static str {\n-        match *self {\n-            TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyBool | TyChar | TyStr => \"builtin type\",\n-            TyRawPtr(..) => \"pointer\",\n-            TyRef(..) => \"reference\",\n-            TyTuple(..) => \"tuple\",\n-            TyFnDef(..) => \"function type\",\n-            TyFnPtr(..) => \"function pointer\",\n-            TyArray(..) => \"array\",\n-            TySlice(..) => \"slice\",\n-            TyParam(..) => \"type parameter\",\n-            TyProjection(..) => \"associated type\",\n-            TyTrait(..) => \"trait type\",\n-            TyClosure(..) => \"closure type\",\n-            TyBox(..) => \"struct\",\n-            TyAdt(def, ..) => match def.adt_kind() {\n-                ty::AdtKind::Struct => \"struct\",\n-                ty::AdtKind::Union => \"union\",\n-                ty::AdtKind::Enum => \"enum\",\n-            },\n-            TyInfer(..) | TyAnon(..) |\n-            TyNever | TyError => \"type\",\n-        }\n-    }\n-}\n-\n impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "f4dedc184d96a6258b2f34224f9d2bff40dcd048", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -436,7 +436,7 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n             }\n \n             Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n-            Def::TyAlias(..) | Def::AssociatedTy(..) => {\n+            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) => {\n                 PatternKind::Leaf { subpatterns: subpatterns }\n             }\n "}, {"sha": "8799050b1b999058b31213ca74f418abba88ba77", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -1520,17 +1520,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // Convert \"variant type\" as if it were a real type.\n                 // The resulting `Ty` is type of the variant's enum for now.\n                 tcx.prohibit_type_params(base_segments.split_last().unwrap().1);\n-                let mut ty = self.ast_path_to_ty(rscope,\n-                                                 span,\n-                                                 param_mode,\n-                                                 tcx.parent_def_id(did).unwrap(),\n-                                                 base_segments.last().unwrap());\n-                if ty.is_fn() {\n-                    // Tuple variants have fn type even in type namespace,\n-                    // extract true variant type from it.\n-                    ty = tcx.no_late_bound_regions(&ty.fn_ret()).unwrap();\n-                }\n-                ty\n+                self.ast_path_to_ty(rscope,\n+                                    span,\n+                                    param_mode,\n+                                    tcx.parent_def_id(did).unwrap(),\n+                                    base_segments.last().unwrap())\n             }\n             Def::TyParam(did) => {\n                 tcx.prohibit_type_params(base_segments);"}, {"sha": "75a14bb3db9224ea5c367819a96362d8a6e966df", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -3216,9 +3216,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn check_struct_path(&self,\n-                         path: &hir::Path,\n-                         node_id: ast::NodeId)\n-                         -> Option<(ty::VariantDef<'tcx>,  Ty<'tcx>)> {\n+                             path: &hir::Path,\n+                             node_id: ast::NodeId)\n+                             -> Option<(ty::VariantDef<'tcx>,  Ty<'tcx>)> {\n         let (def, ty) = self.finish_resolving_struct_path(path, node_id);\n         let variant = match def {\n             Def::Err => {\n@@ -3263,8 +3263,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Some((variant, ty))\n         } else {\n             struct_span_err!(self.tcx.sess, path.span, E0071,\n-                             \"expected struct, variant or union type, found {} `{}`\",\n-                             ty.sty.descr(), ty)\n+                             \"expected struct, variant or union type, found {}\",\n+                             ty.sort_string(self.tcx))\n                 .span_label(path.span, &format!(\"not a struct\"))\n                 .emit();\n             None"}, {"sha": "660ac44ce0b53c07130fa71b89f73afac155d9d7", "filename": "src/test/compile-fail/struct-path-associated-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Fcompile-fail%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Fcompile-fail%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-path-associated-type.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -20,13 +20,13 @@ impl Tr for S {\n \n fn f<T: Tr>() {\n     let s = T::A {};\n-    //~^ ERROR expected struct, variant or union type, found associated type `<T as Tr>::A`\n+    //~^ ERROR expected struct, variant or union type, found associated type\n     let z = T::A::<u8> {};\n-    //~^ ERROR expected struct, variant or union type, found associated type `<T as Tr>::A`\n+    //~^ ERROR expected struct, variant or union type, found associated type\n     //~| ERROR type parameters are not allowed on this type\n     match S {\n         T::A {} => {}\n-        //~^ ERROR expected struct, variant or union type, found associated type `<T as Tr>::A`\n+        //~^ ERROR expected struct, variant or union type, found associated type\n     }\n }\n "}, {"sha": "f694e7d277c7fec094e70b30b191f17605845340", "filename": "src/test/compile-fail/struct-path-self-type-mismatch.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Fcompile-fail%2Fstruct-path-self-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Fcompile-fail%2Fstruct-path-self-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-path-self-type-mismatch.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<A> { inner: A }\n+\n+trait Bar { fn bar(); }\n+\n+impl Bar for Foo<i32> {\n+    fn bar() {\n+        Self { inner: 1.5f32 }; //~ ERROR mismatched types\n+                                //~^ NOTE expected i32, found f32\n+    }\n+}\n+\n+impl<T> Foo<T> {\n+    fn new<U>(u: U) -> Foo<U> {\n+        Self {\n+        //~^ ERROR mismatched types\n+        //~| expected type parameter, found a different type parameter\n+        //~| expected type `Foo<U>`\n+        //~| found type `Foo<T>`\n+            inner: u\n+            //~^ ERROR mismatched types\n+            //~| expected type parameter, found a different type parameter\n+            //~| expected type `T`\n+            //~| found type `U`\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "067d6ac22dc6fb35a3a7e06fdb98c6be84487de7", "filename": "src/test/compile-fail/struct-path-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Fcompile-fail%2Fstruct-path-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Fcompile-fail%2Fstruct-path-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-path-self.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -13,13 +13,13 @@ struct S;\n trait Tr {\n     fn f() {\n         let s = Self {};\n-        //~^ ERROR expected struct, variant or union type, found type parameter `Self`\n+        //~^ ERROR expected struct, variant or union type, found Self\n         let z = Self::<u8> {};\n-        //~^ ERROR expected struct, variant or union type, found type parameter `Self`\n+        //~^ ERROR expected struct, variant or union type, found Self\n         //~| ERROR type parameters are not allowed on this type\n         match s {\n             Self { .. } => {}\n-            //~^ ERROR expected struct, variant or union type, found type parameter `Self`\n+            //~^ ERROR expected struct, variant or union type, found Self\n         }\n     }\n }"}, {"sha": "8516d344e1cdc41115c48335b24c017e712d972e", "filename": "src/test/run-pass/issue-22546.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Frun-pass%2Fissue-22546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a38928b44e26d4d7b9bdacb207a85878058cac8/src%2Ftest%2Frun-pass%2Fissue-22546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22546.rs?ref=8a38928b44e26d4d7b9bdacb207a85878058cac8", "patch": "@@ -54,4 +54,7 @@ fn main() {\n     if let None::<u8> { .. } = Some(8) {\n         panic!();\n     }\n+    if let Option::None::<u8> { .. } = Some(8) {\n+        panic!();\n+    }\n }"}]}