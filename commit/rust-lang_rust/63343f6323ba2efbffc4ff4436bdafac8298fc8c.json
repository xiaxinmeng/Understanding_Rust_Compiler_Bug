{"sha": "63343f6323ba2efbffc4ff4436bdafac8298fc8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMzQzZjYzMjNiYTJlZmJmZmM0ZmY0NDM2YmRhZmFjODI5OGZjOGM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-05T21:36:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-05T21:58:36Z"}, "message": "More detailed output for the nonterminal marking test", "tree": {"sha": "1b9b5672ee7a0b2ba4ee9b02280ecd16358a79a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9b5672ee7a0b2ba4ee9b02280ecd16358a79a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63343f6323ba2efbffc4ff4436bdafac8298fc8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63343f6323ba2efbffc4ff4436bdafac8298fc8c", "html_url": "https://github.com/rust-lang/rust/commit/63343f6323ba2efbffc4ff4436bdafac8298fc8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63343f6323ba2efbffc4ff4436bdafac8298fc8c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e156065471051b33ff47ec06c168e341c385c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e156065471051b33ff47ec06c168e341c385c3c", "html_url": "https://github.com/rust-lang/rust/commit/1e156065471051b33ff47ec06c168e341c385c3c"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "98fd4306004e8089ff61de11b5aef9fc6646326d", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63343f6323ba2efbffc4ff4436bdafac8298fc8c/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63343f6323ba2efbffc4ff4436bdafac8298fc8c/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.rs?ref=63343f6323ba2efbffc4ff4436bdafac8298fc8c", "patch": "@@ -1,17 +1,23 @@\n // Make sure that marks from declarative macros are applied to tokens in nonterminal.\n \n // check-pass\n+// compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n+// compile-flags: -Z trim-diagnostic-paths=no\n+// normalize-stdout-test \"\\d+#\" -> \"0#\"\n // aux-build:test-macros.rs\n \n #![feature(decl_macro)]\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n #[macro_use]\n extern crate test_macros;\n \n macro_rules! outer {\n     ($item:item) => {\n         macro inner() {\n-            recollect! { $item }\n+            print_bang! { $item }\n         }\n \n         inner!();"}, {"sha": "1623d6777263991c7bccc02d4ed81f27b63ef38a", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/63343f6323ba2efbffc4ff4436bdafac8298fc8c/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/63343f6323ba2efbffc4ff4436bdafac8298fc8c/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=63343f6323ba2efbffc4ff4436bdafac8298fc8c", "patch": "@@ -0,0 +1,88 @@\n+PRINT-BANG INPUT (DISPLAY): struct S;\n+PRINT-BANG RE-COLLECTED (DISPLAY): struct S ;\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"struct\",\n+                span: $DIR/nonterminal-token-hygiene.rs:30:5: 30:11 (#5),\n+            },\n+            Ident {\n+                ident: \"S\",\n+                span: $DIR/nonterminal-token-hygiene.rs:30:12: 30:13 (#5),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/nonterminal-token-hygiene.rs:30:13: 30:14 (#5),\n+            },\n+        ],\n+        span: $DIR/nonterminal-token-hygiene.rs:20:27: 20:32 (#6),\n+    },\n+]\n+#![feature /* 0#0 */(prelude_import)]\n+#![no_std /* 0#0 */]\n+// Make sure that marks from declarative macros are applied to tokens in nonterminal.\n+\n+// check-pass\n+// compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n+// compile-flags: -Z trim-diagnostic-paths=no\n+// normalize-stdout-test \"\\d+#\" -> \"0#\"\n+// aux-build:test-macros.rs\n+\n+#![feature /* 0#0 */(decl_macro)]\n+\n+#![no_std /* 0#0 */]\n+#[prelude_import /* 0#1 */]\n+use ::core /* 0#1 */::prelude /* 0#1 */::v1 /* 0#1 */::*;\n+#[macro_use /* 0#1 */]\n+extern crate core /* 0#2 */;\n+#[macro_use /* 0#1 */]\n+extern crate compiler_builtins /* 0#2 */;\n+// Don't load unnecessary hygiene information from std\n+extern crate std /* 0#0 */;\n+\n+#[macro_use /* 0#0 */]\n+extern crate test_macros /* 0#0 */;\n+\n+macro_rules! outer\n+    /*\n+    0#0\n+    */ {\n+    ($ item : item) =>\n+    {\n+        macro inner() { print_bang ! { $ item } } inner ! () ;\n+\n+    } ;\n+}\n+\n+struct S /* 0#0 */;\n+macro inner /* 0#4 */ { () => { print_bang ! { struct S; } } }\n+\n+struct S /* 0#5 */;\n+// OK, not a duplicate definition of `S`\n+\n+fn main /* 0#0 */() { }\n+\n+/*\n+Expansions:\n+0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n+1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n+2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"outer\")\n+3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n+4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro(Bang, \"inner\")\n+5: parent: ExpnId(4), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"print_bang\")\n+\n+SyntaxContexts:\n+#0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n+#1: parent: #0, outer_mark: (ExpnId(1), Opaque)\n+#2: parent: #0, outer_mark: (ExpnId(1), Transparent)\n+#3: parent: #0, outer_mark: (ExpnId(3), Opaque)\n+#4: parent: #0, outer_mark: (ExpnId(2), SemiTransparent)\n+#5: parent: #0, outer_mark: (ExpnId(4), Opaque)\n+#6: parent: #4, outer_mark: (ExpnId(4), Opaque)\n+#7: parent: #0, outer_mark: (ExpnId(5), Opaque)\n+#8: parent: #6, outer_mark: (ExpnId(5), Transparent)\n+#9: parent: #5, outer_mark: (ExpnId(5), SemiTransparent)\n+*/"}]}