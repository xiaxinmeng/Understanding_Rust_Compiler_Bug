{"sha": "61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZGM3NzYwZDA2ZmJhZTAyNTJiYTYxNzJmMmNhZWI3YjlkY2IxYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-28T03:19:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-28T03:19:38Z"}, "message": "auto merge of #7410 : luqmana/rust/bare-self, r=catamorphism\n\nFinally sorted this out. Fixes #5321, #4439, and #4850.", "tree": {"sha": "eff56a672ac7ed60350d12434d2535716a33e915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff56a672ac7ed60350d12434d2535716a33e915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "html_url": "https://github.com/rust-lang/rust/commit/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927f454ac115c7d19f34951914b269ce356a1ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/927f454ac115c7d19f34951914b269ce356a1ca6", "html_url": "https://github.com/rust-lang/rust/commit/927f454ac115c7d19f34951914b269ce356a1ca6"}, {"sha": "0aa94ff3c3419fdd58d87ad226d94ee0128f778b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa94ff3c3419fdd58d87ad226d94ee0128f778b", "html_url": "https://github.com/rust-lang/rust/commit/0aa94ff3c3419fdd58d87ad226d94ee0128f778b"}], "stats": {"total": 106, "additions": 73, "deletions": 33}, "files": [{"sha": "7d0defde4354fbfe8c89b3c099dc2dbfb6d59caf", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "patch": "@@ -41,6 +41,7 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n             callee::trans_arg_expr(bcx,\n                                    expr_ty(bcx, out),\n                                    ty::ByCopy,\n+                                   ast::sty_static,\n                                    out,\n                                    &mut cleanups,\n                                    None,\n@@ -56,6 +57,7 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n             callee::trans_arg_expr(bcx,\n                                    expr_ty(bcx, e),\n                                    ty::ByCopy,\n+                                   ast::sty_static,\n                                    e,\n                                    &mut cleanups,\n                                    None,\n@@ -77,6 +79,7 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n             callee::trans_arg_expr(bcx,\n                                    expr_ty(bcx, in),\n                                    ty::ByCopy,\n+                                   ast::sty_static,\n                                    in,\n                                    &mut cleanups,\n                                    None,"}, {"sha": "6ab228cc1726043c7145a28595dcca3d4d7ac457", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "patch": "@@ -1680,23 +1680,15 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n     let mut bcx = bcx;\n \n     match fcx.llself {\n-      Some(slf) => {\n-          let self_val = if slf.is_owned\n-                  && datum::appropriate_mode(slf.t).is_by_value() {\n-              let tmp = BitCast(bcx, slf.v, type_of(bcx.ccx(), slf.t));\n-              let alloc = alloc_ty(bcx, slf.t);\n-              Store(bcx, tmp, alloc);\n-              alloc\n-          } else {\n-              PointerCast(bcx, slf.v, type_of(bcx.ccx(), slf.t).ptr_to())\n-          };\n-\n-          fcx.llself = Some(ValSelfData {v: self_val, ..slf});\n-          if slf.is_owned {\n-              add_clean(bcx, self_val, slf.t);\n-          }\n-      }\n-      _ => {}\n+        Some(slf) => {\n+            let self_val = PointerCast(bcx, slf.v, type_of(bcx.ccx(), slf.t).ptr_to());\n+            fcx.llself = Some(ValSelfData {v: self_val, ..slf});\n+\n+            if slf.is_owned {\n+                add_clean(bcx, slf.v, slf.t);\n+            }\n+        }\n+        _ => {}\n     }\n \n     for uint::range(0, arg_tys.len()) |arg_n| {"}, {"sha": "78c796329d806e7bf846b0466c03c307fb7135d8", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "patch": "@@ -63,6 +63,7 @@ pub struct MethodData {\n     llself: ValueRef,\n     self_ty: ty::t,\n     self_mode: ty::SelfMode,\n+    explicit_self: ast::explicit_self_\n }\n \n pub enum CalleeData {\n@@ -565,7 +566,8 @@ pub fn trans_call_inner(in_cx: block,\n         // Now that the arguments have finished evaluating, we need to revoke\n         // the cleanup for the self argument, if it exists\n         match callee.data {\n-            Method(d) if d.self_mode == ty::ByCopy => {\n+            Method(d) if d.self_mode == ty::ByCopy ||\n+                         d.explicit_self == ast::sty_value => {\n                 revoke_clean(bcx, d.llself);\n             }\n             _ => {}\n@@ -687,6 +689,7 @@ pub fn trans_args(cx: block,\n                 trans_arg_expr(bcx,\n                                arg_tys[i],\n                                ty::ByCopy,\n+                               ast::sty_static,\n                                *arg_expr,\n                                &mut temp_cleanups,\n                                if i == last { ret_flag } else { None },\n@@ -720,16 +723,18 @@ pub enum AutorefArg {\n pub fn trans_arg_expr(bcx: block,\n                       formal_arg_ty: ty::t,\n                       self_mode: ty::SelfMode,\n+                      ex_self: ast::explicit_self_,\n                       arg_expr: @ast::expr,\n                       temp_cleanups: &mut ~[ValueRef],\n                       ret_flag: Option<ValueRef>,\n                       autoref_arg: AutorefArg) -> Result {\n     let _icx = push_ctxt(\"trans_arg_expr\");\n     let ccx = bcx.ccx();\n \n-    debug!(\"trans_arg_expr(formal_arg_ty=(%s), self_mode=%?, arg_expr=%s, \\\n+    debug!(\"trans_arg_expr(formal_arg_ty=(%s), explicit_self=%? self_mode=%?, arg_expr=%s, \\\n             ret_flag=%?)\",\n            formal_arg_ty.repr(bcx.tcx()),\n+           ex_self,\n            self_mode,\n            arg_expr.repr(bcx.tcx()),\n            ret_flag.map(|v| bcx.val_to_str(*v)));\n@@ -789,8 +794,26 @@ pub fn trans_arg_expr(bcx: block,\n                 val = arg_datum.to_ref_llval(bcx);\n             }\n             DontAutorefArg => {\n-                match self_mode {\n-                    ty::ByRef => {\n+                match (self_mode, ex_self) {\n+                    (ty::ByRef, ast::sty_value) => {\n+                        debug!(\"by value self with type %s, storing to scratch\",\n+                               bcx.ty_to_str(arg_datum.ty));\n+                        let scratch = scratch_datum(bcx, arg_datum.ty, false);\n+\n+                        arg_datum.store_to_datum(bcx,\n+                                                 arg_expr.id,\n+                                                 INIT,\n+                                                 scratch);\n+\n+                        // Technically, ownership of val passes to the callee.\n+                        // However, we must cleanup should we fail before the\n+                        // callee is actually invoked.\n+                        scratch.add_clean(bcx);\n+                        temp_cleanups.push(scratch.val);\n+\n+                        val = scratch.to_ref_llval(bcx);\n+                    }\n+                    (ty::ByRef, _) => {\n                         // This assertion should really be valid, but because\n                         // the explicit self code currently passes by-ref, it\n                         // does not hold.\n@@ -801,7 +824,7 @@ pub fn trans_arg_expr(bcx: block,\n                                bcx.ty_to_str(arg_datum.ty));\n                         val = arg_datum.to_ref_llval(bcx);\n                     }\n-                    ty::ByCopy => {\n+                    (ty::ByCopy, _) => {\n                         if ty::type_needs_drop(bcx.tcx(), arg_datum.ty) ||\n                                 arg_datum.appropriate_mode().is_by_ref() {\n                             debug!(\"by copy arg with type %s, storing to scratch\","}, {"sha": "80ae2ca135e2583414855f7354b9434c1c4419f9", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "patch": "@@ -110,9 +110,7 @@ pub fn trans_method(ccx: @mut CrateContext,\n         debug!(\"calling trans_fn with self_ty %s\",\n                self_ty.repr(ccx.tcx));\n         match method.explicit_self.node {\n-          ast::sty_value => {\n-            impl_owned_self(self_ty)\n-          }\n+          ast::sty_value => impl_owned_self(self_ty),\n           _ => {\n             impl_self(self_ty)\n           }\n@@ -145,6 +143,7 @@ pub fn trans_self_arg(bcx: block,\n     let result = trans_arg_expr(bcx,\n                                 self_ty,\n                                 mentry.self_mode,\n+                                mentry.explicit_self,\n                                 base,\n                                 &mut temp_cleanups,\n                                 None,\n@@ -231,6 +230,7 @@ pub fn trans_method_callee(bcx: block,\n                     llself: val,\n                     self_ty: node_id_type(bcx, this.id),\n                     self_mode: mentry.self_mode,\n+                    explicit_self: mentry.explicit_self\n                 })\n             }\n         }\n@@ -453,6 +453,7 @@ pub fn trans_monomorphized_callee(bcx: block,\n                   llself: llself_val,\n                   self_ty: node_id_type(bcx, base.id),\n                   self_mode: mentry.self_mode,\n+                  explicit_self: mentry.explicit_self\n               })\n           }\n       }\n@@ -692,6 +693,7 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n             llself: llself,\n             self_ty: ty::mk_opaque_box(bcx.tcx()),\n             self_mode: self_mode,\n+            explicit_self: explicit_self\n             /* XXX: Some(llbox) */\n         })\n     };"}, {"sha": "8c3315e49b459b960396dda646f1e17d6bb334f2", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "patch": "@@ -976,7 +976,9 @@ impl<'self> LookupContext<'self> {\n         let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {sig: fn_sig, ..bare_fn_ty});\n         debug!(\"after replacing bound regions, fty=%s\", self.ty_to_str(fty));\n \n-        let self_mode = get_mode_from_explicit_self(candidate.method_ty.explicit_self);\n+        // FIXME(#7411): We always pass self by-ref since we stuff it in the environment slot.\n+        // Eventually that should not be the case\n+        let self_mode = ty::ByRef;\n \n         // before we only checked whether self_ty could be a subtype\n         // of rcvr_ty; now we actually make it so (this may cause\n@@ -1242,10 +1244,3 @@ impl<'self> LookupContext<'self> {\n         self.tcx().sess.bug(s)\n     }\n }\n-\n-pub fn get_mode_from_explicit_self(explicit_self: ast::explicit_self_) -> SelfMode {\n-    match explicit_self {\n-        sty_value => ty::ByCopy,\n-        _ => ty::ByRef,\n-    }\n-}"}, {"sha": "7b809c39cb83d553907f136af74f4fdc0818f805", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Fooable {\n+    fn yes(self);\n+}\n+\n+impl Fooable for uint {\n+    fn yes(self) {\n+        for self.times {\n+            println(\"yes\");\n+        }\n+    }\n+}\n+\n+fn main() {\n+    2.yes();\n+}"}]}