{"sha": "dbf70cd015454cf125fda9b006251fa2782fbc7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjcwY2QwMTU0NTRjZjEyNWZkYTliMDA2MjUxZmEyNzgyZmJjN2Y=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-07T22:45:05Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "Properly handle mod.rs imports", "tree": {"sha": "5e68fe0a963c55ab5a45c53ebb8afbc4a7981bb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e68fe0a963c55ab5a45c53ebb8afbc4a7981bb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf70cd015454cf125fda9b006251fa2782fbc7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf70cd015454cf125fda9b006251fa2782fbc7f", "html_url": "https://github.com/rust-lang/rust/commit/dbf70cd015454cf125fda9b006251fa2782fbc7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf70cd015454cf125fda9b006251fa2782fbc7f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb83211f95a450fdadf05f8f64be053f14dc57e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb83211f95a450fdadf05f8f64be053f14dc57e", "html_url": "https://github.com/rust-lang/rust/commit/9fb83211f95a450fdadf05f8f64be053f14dc57e"}], "stats": {"total": 87, "additions": 40, "deletions": 47}, "files": [{"sha": "b5f2d636c032d2706c7b1284e0a6dfb25a03921f", "filename": "crates/ide/src/completion/complete_mod.rs", "status": "modified", "additions": 40, "deletions": 47, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/dbf70cd015454cf125fda9b006251fa2782fbc7f/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf70cd015454cf125fda9b006251fa2782fbc7f/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs?ref=dbf70cd015454cf125fda9b006251fa2782fbc7f", "patch": "@@ -51,26 +51,26 @@ pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n         })\n         .filter_map(|submodule_file| {\n             let submodule_path = source_root.path_for_file(&submodule_file)?;\n-            if !is_special_rust_file_path(&submodule_path)\n-                && submodule_path.parent()? == directory_to_look_for_submodules\n-            {\n-                submodule_path.file_name_and_extension()\n-            } else {\n-                None\n-            }\n-        })\n-        .filter_map(|submodule_file_name_and_extension| match submodule_file_name_and_extension {\n-            (file_name, Some(\"rs\")) => Some(file_name.to_owned()),\n-            (subdirectory_name, None) => {\n-                let mod_rs_path =\n-                    directory_to_look_for_submodules.join(subdirectory_name)?.join(\"mod.rs\")?;\n-                if source_root.file_for_path(&mod_rs_path).is_some() {\n-                    Some(subdirectory_name.to_owned())\n-                } else {\n-                    None\n+            let directory_with_submodule = submodule_path.parent()?;\n+            match submodule_path.file_name_and_extension()? {\n+                (\"lib\", Some(\"rs\")) | (\"main\", Some(\"rs\")) => None,\n+                (\"mod\", Some(\"rs\")) => {\n+                    if directory_with_submodule.parent()? == directory_to_look_for_submodules {\n+                        match directory_with_submodule.file_name_and_extension()? {\n+                            (directory_name, None) => Some(directory_name.to_owned()),\n+                            _ => None,\n+                        }\n+                    } else {\n+                        None\n+                    }\n                 }\n+                (file_name, Some(\"rs\"))\n+                    if directory_with_submodule == directory_to_look_for_submodules =>\n+                {\n+                    Some(file_name.to_owned())\n+                }\n+                _ => None,\n             }\n-            _ => None,\n         })\n         .filter(|name| !existing_mod_declarations.contains(name))\n         .for_each(|submodule_name| {\n@@ -87,41 +87,34 @@ pub(super) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n     Some(())\n }\n \n-fn is_special_rust_file_path(path: &VfsPath) -> bool {\n-    matches!(\n-        path.file_name_and_extension(),\n-        Some((\"mod\", Some(\"rs\"))) | Some((\"lib\", Some(\"rs\"))) | Some((\"main\", Some(\"rs\")))\n-    )\n-}\n-\n fn directory_to_look_for_submodules(\n     module: Module,\n     db: &RootDatabase,\n     module_file_path: &VfsPath,\n ) -> Option<VfsPath> {\n-    let module_directory_path = module_file_path.parent()?;\n-    let base_directory = if is_special_rust_file_path(module_file_path) {\n-        Some(module_directory_path)\n-    } else if let (regular_rust_file_name, Some(\"rs\")) =\n-        module_file_path.file_name_and_extension()?\n-    {\n-        if matches!(\n-            (\n-                module_directory_path\n-                    .parent()\n-                    .as_ref()\n-                    .and_then(|path| path.file_name_and_extension()),\n-                module_directory_path.file_name_and_extension(),\n-            ),\n-            (Some((\"src\", None)), Some((\"bin\", None)))\n-        ) {\n-            // files in /src/bin/ can import each other directly\n-            Some(module_directory_path)\n-        } else {\n-            module_directory_path.join(regular_rust_file_name)\n+    let directory_with_module_path = module_file_path.parent()?;\n+    let base_directory = match module_file_path.file_name_and_extension()? {\n+        (\"mod\", Some(\"rs\")) | (\"lib\", Some(\"rs\")) | (\"main\", Some(\"rs\")) => {\n+            Some(directory_with_module_path)\n+        }\n+        (regular_rust_file_name, Some(\"rs\")) => {\n+            if matches!(\n+                (\n+                    directory_with_module_path\n+                        .parent()\n+                        .as_ref()\n+                        .and_then(|path| path.file_name_and_extension()),\n+                    directory_with_module_path.file_name_and_extension(),\n+                ),\n+                (Some((\"src\", None)), Some((\"bin\", None)))\n+            ) {\n+                // files in /src/bin/ can import each other directly\n+                Some(directory_with_module_path)\n+            } else {\n+                directory_with_module_path.join(regular_rust_file_name)\n+            }\n         }\n-    } else {\n-        None\n+        _ => None,\n     }?;\n \n     let mut resulting_path = base_directory;"}]}