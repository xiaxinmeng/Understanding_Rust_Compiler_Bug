{"sha": "b7960878ba77124505aabe7dc99d0a898354c326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTYwODc4YmE3NzEyNDUwNWFhYmU3ZGM5OWQwYTg5ODM1NGMzMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-18T18:07:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-18T18:07:22Z"}, "message": "Auto merge of #45368 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #44138, #45082, #45098, #45181, #45217, #45281, #45325, #45326, #45340, #45354\n- Failed merges:", "tree": {"sha": "18092cf34d1e37672c93c1237cc641adecbf8801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18092cf34d1e37672c93c1237cc641adecbf8801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7960878ba77124505aabe7dc99d0a898354c326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7960878ba77124505aabe7dc99d0a898354c326", "html_url": "https://github.com/rust-lang/rust/commit/b7960878ba77124505aabe7dc99d0a898354c326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7960878ba77124505aabe7dc99d0a898354c326/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc208bb62ce83e18c990d23b67366a3ec4f21532", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc208bb62ce83e18c990d23b67366a3ec4f21532", "html_url": "https://github.com/rust-lang/rust/commit/fc208bb62ce83e18c990d23b67366a3ec4f21532"}, {"sha": "6b505d6a3ff22ca65bf63358040e2e5bab197604", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b505d6a3ff22ca65bf63358040e2e5bab197604", "html_url": "https://github.com/rust-lang/rust/commit/6b505d6a3ff22ca65bf63358040e2e5bab197604"}], "stats": {"total": 525, "additions": 401, "deletions": 124}, "files": [{"sha": "c76e17a27d188c264686e3225d8260398f318a51", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -12,7 +12,7 @@ matrix:\n   fast_finish: true\n   include:\n     # Images used in testing PR and try-build should be run first.\n-    - env: IMAGE=x86_64-gnu-llvm-3.7 RUST_BACKTRACE=1\n+    - env: IMAGE=x86_64-gnu-llvm-3.9 RUST_BACKTRACE=1\n       if: type = pull_request OR branch = auto\n \n     - env: IMAGE=dist-x86_64-linux DEPLOY=1"}, {"sha": "4c296a28e90b4a2f8e19b8e6bfefe5a61040feef", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -365,6 +365,116 @@ In order to prepare your PR, you can run the build locally by doing\n there, you may wish to set `submodules = false` in the `config.toml`\n to prevent `x.py` from resetting to the original branch.\n \n+#### Breaking Tools Built With The Compiler\n+[breaking-tools-built-with-the-compiler]: #breaking-tools-built-with-the-compiler\n+\n+Rust's build system builds a number of tools that make use of the\n+internals of the compiler. This includes clippy,\n+[RLS](https://github.com/rust-lang-nursery/rls) and\n+[rustfmt](https://github.com/rust-lang-nursery/rustfmt). If these tools\n+break because of your changes, you may run into a sort of \"chicken and egg\"\n+problem. These tools rely on the latest compiler to be built so you can't update\n+them to reflect your changes to the compiler until those changes are merged into\n+the compiler. At the same time, you can't get your changes merged into the compiler\n+because the rust-lang/rust build won't pass until those tools build and pass their\n+tests.\n+\n+That means that, in the default state, you can't update the compiler without first\n+fixing rustfmt, rls and the other tools that the compiler builds.\n+\n+Luckily, a feature was [added to Rust's build](https://github.com/rust-lang/rust/pull/45243)\n+to make all of this easy to handle. The idea is that you mark the tools as \"broken\",\n+so that the rust-lang/rust build passes without trying to build them, then land the change\n+in the compiler, wait for a nightly, and go update the tools that you broke. Once you're done\n+and the tools are working again, you go back in the compiler and change the tools back\n+from \"broken\".\n+\n+This should avoid a bunch of synchronization dances and is also much easier on contributors as\n+there's no need to block on rls/rustfmt/other tools changes going upstream.\n+\n+Here are those same steps in detail:\n+\n+1. (optional) First, if it doesn't exist already, create a `config.toml` by copying\n+   `config.toml.example` in the root directory of the Rust repository.\n+   Set `submodules = false` in the `[build]` section. This will prevent `x.py`\n+   from resetting to the original branch after you make your changes. If you\n+   need to [update any submodules to their latest versions][updating-submodules],\n+   see the section of this file about that for more information.\n+2. (optional) Run `./x.py test src/tools/rustfmt` (substituting the submodule\n+   that broke for `rustfmt`). Fix any errors in the submodule (and possibly others).\n+3. (optional) Make commits for your changes and send them to upstream repositories as a PR.\n+4. (optional) Maintainers of these submodules will **not** merge the PR. The PR can't be\n+   merged because CI will be broken. You'll want to write a message on the PR referencing\n+   your change, and how the PR should be merged once your change makes it into a nightly.\n+5. Update `src/tools/toolstate.toml` to indicate that the tool in question is \"broken\",\n+   that will disable building it on CI. See the documentation in that file for the exact\n+   configuration values you can use.\n+6. Commit the changes to `src/tools/toolstate.toml`, **do not update submodules in your commit**,\n+   and then update the PR you have for rust-lang/rust.\n+7. Wait for your PR to merge.\n+8. Wait for a nightly\n+9. (optional) Help land your PR on the upstream repository now that your changes are in nightly.\n+10. (optional) Send a PR to rust-lang/rust updating the submodule, reverting `src/tools/toolstate.toml` back to a \"building\" or \"testing\" state.\n+\n+#### Updating submodules\n+[updating-submodules]: #updating-submodules\n+\n+These instructions are specific to updating `rustfmt`, however they may apply\n+to the other submodules as well. Please help by improving these instructions\n+if you find any discrepencies or special cases that need to be addressed.\n+\n+To update the `rustfmt` submodule, start by running the appropriate\n+[`git submodule` command](https://git-scm.com/book/en/v2/Git-Tools-Submodules).\n+For example, to update to the latest commit on the remote master branch,\n+you may want to run:\n+```\n+git submodule update --remote src/tools/rustfmt\n+```\n+If you run `./x.py build` now, and you are lucky, it may just work. If you see\n+an error message about patches that did not resolve to any crates, you will need\n+to complete a few more steps which are outlined with their rationale below.\n+\n+*(This error may change in the future to include more information.)*\n+```\n+error: failed to resolve patches for `https://github.com/rust-lang-nursery/rustfmt`\n+\n+Caused by:\n+  patch for `rustfmt-nightly` in `https://github.com/rust-lang-nursery/rustfmt` did not resolve to any crates\n+failed to run: ~/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo build --manifest-path ~/rust/src/bootstrap/Cargo.toml\n+```\n+\n+If you haven't used the `[patch]`\n+section of `Cargo.toml` before, there is [some relevant documentation about it\n+in the cargo docs](http://doc.crates.io/manifest.html#the-patch-section). In\n+addition to that, you should read the \n+[Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#overriding-dependencies)\n+section of the documentation as well.\n+\n+Specifically, the following [section in Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#testing-a-bugfix) reveals what the problem is:\n+\n+> Next up we need to ensure that our lock file is updated to use this new version of uuid so our project uses the locally checked out copy instead of one from crates.io. The way [patch] works is that it'll load the dependency at ../path/to/uuid and then whenever crates.io is queried for versions of uuid it'll also return the local version.\n+> \n+> This means that the version number of the local checkout is significant and will affect whether the patch is used. Our manifest declared uuid = \"1.0\" which means we'll only resolve to >= 1.0.0, < 2.0.0, and Cargo's greedy resolution algorithm also means that we'll resolve to the maximum version within that range. Typically this doesn't matter as the version of the git repository will already be greater or match the maximum version published on crates.io, but it's important to keep this in mind!\n+\n+This says that when we updated the submodule, the version number in our\n+`src/tools/rustfmt/Cargo.toml` changed. The new version is different from\n+the version in `Cargo.lock`, so the build can no longer continue.\n+\n+To resolve this, we need to update `Cargo.lock`. Luckily, cargo provides a\n+command to do this easily.\n+\n+First, go into the `src/` directory since that is where `Cargo.toml` is in\n+the rust repository. Then run, `cargo update -p rustfmt-nightly` to solve\n+the problem.\n+\n+```\n+$ cd src\n+$ cargo update -p rustfmt-nightly\n+```\n+\n+This should change the version listed in `src/Cargo.lock` to the new version you updated\n+the submodule to. Running `./x.py build` should work now.\n+\n ## Writing Documentation\n [writing-documentation]: #writing-documentation\n "}, {"sha": "261fe2053879f004fd2ffeecc23d49c43ceb8467", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -35,7 +35,7 @@\n # If an external LLVM root is specified, we automatically check the version by\n # default to make sure it's within the range that we're expecting, but setting\n # this flag will indicate that this version check should not be done.\n-#version-check = false\n+#version-check = true\n \n # Link libstdc++ statically into the librustc_llvm instead of relying on a\n # dynamic version to be available."}, {"sha": "d6c83e3acfc8ab3d844535644e4310aab3bb950b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -299,6 +299,7 @@ impl Config {\n         let mut config = Config::default();\n         config.llvm_enabled = true;\n         config.llvm_optimize = true;\n+        config.llvm_version_check = true;\n         config.use_jemalloc = true;\n         config.backtrace = true;\n         config.rust_optimize = true;"}, {"sha": "c37b1dad4c687cd9698543861ec74433206c3ab0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -259,11 +259,14 @@ fn check_llvm_version(build: &Build, llvm_config: &Path) {\n \n     let mut cmd = Command::new(llvm_config);\n     let version = output(cmd.arg(\"--version\"));\n-    if version.starts_with(\"3.5\") || version.starts_with(\"3.6\") ||\n-       version.starts_with(\"3.7\") {\n-        return\n+    let mut parts = version.split('.').take(2)\n+        .filter_map(|s| s.parse::<u32>().ok());\n+    if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n+        if major > 3 || (major == 3 && minor >= 9) {\n+            return\n+        }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=3.5\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=3.9\\n\\n\", version)\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "6b8186048988d089a08c9e8bc8c4aa393c466f82", "filename": "src/ci/docker/x86_64-gnu-llvm-3.9/Dockerfile", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.9%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.9%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-3.9%2FDockerfile?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -11,15 +11,17 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-3.7-tools \\\n+  llvm-3.9-tools \\\n   libedit-dev \\\n   zlib1g-dev \\\n   xz-utils\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+# using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-3.7\n+      --llvm-root=/usr/lib/llvm-3.9 \\\n+      --enable-llvm-link-shared\n ENV RUST_CHECK_TARGET check", "previous_filename": "src/ci/docker/x86_64-gnu-llvm-3.7/Dockerfile"}, {"sha": "0137a052a62d868f02fcfded212f49fc0e634ba9", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -227,3 +227,95 @@ A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_\n flag is set in the options of the compilation target. It allows customizing the\n process of resuming unwind at the end of the landing pads. The language item's name\n is `eh_unwind_resume`.\n+\n+## List of all language items\n+\n+This is a list of all language items in Rust along with where they are located in\n+the source code.\n+\n+- Primitives\n+  - `i8`: `libcore/num/mod.rs`\n+  - `i16`: `libcore/num/mod.rs`\n+  - `i32`: `libcore/num/mod.rs`\n+  - `i64`: `libcore/num/mod.rs`\n+  - `i128`: `libcore/num/mod.rs`\n+  - `isize`: `libcore/num/mod.rs`\n+  - `u8`: `libcore/num/mod.rs`\n+  - `u16`: `libcore/num/mod.rs`\n+  - `u32`: `libcore/num/mod.rs`\n+  - `u64`: `libcore/num/mod.rs`\n+  - `u128`: `libcore/num/mod.rs`\n+  - `usize`: `libcore/num/mod.rs`\n+  - `f32`: `libstd/f32.rs`\n+  - `f64`: `libstd/f64.rs`\n+  - `char`: `libstd_unicode/char.rs`\n+  - `slice`: `liballoc/slice.rs`\n+  - `str`: `liballoc/str.rs`\n+  - `const_ptr`: `libcore/ptr.rs`\n+  - `mut_ptr`: `libcore/ptr.rs`\n+  - `unsafe_cell`: `libcore/cell.rs`\n+- Runtime\n+  - `start`: `libstd/rt.rs`\n+  - `eh_personality`: `libpanic_unwind/emcc.rs` (EMCC)\n+  - `eh_personality`: `libpanic_unwind/seh64_gnu.rs` (SEH64 GNU)\n+  - `eh_personality`: `libpanic_unwind/seh.rs` (SEH)\n+  - `eh_unwind_resume`: `libpanic_unwind/seh64_gnu.rs` (SEH64 GNU)\n+  - `eh_unwind_resume`: `libpanic_unwind/gcc.rs` (GCC)\n+  - `msvc_try_filter`: `libpanic_unwind/seh.rs` (SEH)\n+  - `panic`: `libcore/panicking.rs`\n+  - `panic_bounds_check`: `libcore/panicking.rs`\n+  - `panic_fmt`: `libcore/panicking.rs`\n+  - `panic_fmt`: `libstd/panicking.rs`\n+- Allocations\n+  - `owned_box`: `liballoc/boxed.rs`\n+  - `exchange_malloc`: `liballoc/heap.rs`\n+  - `box_free`: `liballoc/heap.rs`\n+- Operands\n+  - `not`: `libcore/ops/bit.rs`\n+  - `bitand`: `libcore/ops/bit.rs`\n+  - `bitor`: `libcore/ops/bit.rs`\n+  - `bitxor`: `libcore/ops/bit.rs`\n+  - `shl`: `libcore/ops/bit.rs`\n+  - `shr`: `libcore/ops/bit.rs`\n+  - `bitand_assign`: `libcore/ops/bit.rs`\n+  - `bitor_assign`: `libcore/ops/bit.rs`\n+  - `bitxor_assign`: `libcore/ops/bit.rs`\n+  - `shl_assign`: `libcore/ops/bit.rs`\n+  - `shr_assign`: `libcore/ops/bit.rs`\n+  - `deref`: `libcore/ops/deref.rs`\n+  - `deref_mut`: `libcore/ops/deref.rs`\n+  - `index`: `libcore/ops/index.rs`\n+  - `index_mut`: `libcore/ops/index.rs`\n+  - `add`: `libcore/ops/arith.rs`\n+  - `sub`: `libcore/ops/arith.rs`\n+  - `mul`: `libcore/ops/arith.rs`\n+  - `div`: `libcore/ops/arith.rs`\n+  - `rem`: `libcore/ops/arith.rs`\n+  - `neg`: `libcore/ops/arith.rs`\n+  - `add_assign`: `libcore/ops/arith.rs`\n+  - `sub_assign`: `libcore/ops/arith.rs`\n+  - `mul_assign`: `libcore/ops/arith.rs`\n+  - `div_assign`: `libcore/ops/arith.rs`\n+  - `rem_assign`: `libcore/ops/arith.rs`\n+  - `eq`: `libcore/cmp.rs`\n+  - `ord`: `libcore/cmp.rs`\n+- Functions\n+  - `fn`: `libcore/ops/function.rs`\n+  - `fn_mut`: `libcore/ops/function.rs`\n+  - `fn_once`: `libcore/ops/function.rs`\n+  - `generator_state`: `libcore/ops/generator.rs`\n+  - `generator`: `libcore/ops/generator.rs`\n+- Other\n+  - `coerce_unsized`: `libcore/ops/unsize.rs`\n+  - `drop`: `libcore/ops/drop.rs`\n+  - `drop_in_place`: `libcore/ptr.rs`\n+  - `clone`: `libcore/clone.rs`\n+  - `copy`: `libcore/marker.rs`\n+  - `send`: `libcore/marker.rs`\n+  - `sized`: `libcore/marker.rs`\n+  - `unsize`: `libcore/marker.rs`\n+  - `sync`: `libcore/marker.rs`\n+  - `phantom_data`: `libcore/marker.rs`\n+  - `freeze`: `libcore/marker.rs`\n+  - `debug_trait`: `libcore/fmt/mod.rs`\n+  - `non_zero`: `libcore/nonzero.rs`\n\\ No newline at end of file"}, {"sha": "425d4cb79b2df7e359fbd0c05edd3c8155d3156c", "filename": "src/doc/unstable-book/src/library-features/alloc-jemalloc.md", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -8,55 +8,6 @@ See also [`alloc_system`](library-features/alloc-system.html).\n \n ------------------------\n \n-The compiler currently ships two default allocators: `alloc_system` and\n-`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n-are normal Rust crates and contain an implementation of the routines to\n-allocate and deallocate memory. The standard library is not compiled assuming\n-either one, and the compiler will decide which allocator is in use at\n-compile-time depending on the type of output artifact being produced.\n-\n-Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n-available). In this situation the compiler \"controls the world\" in the sense of\n-it has power over the final link. Primarily this means that the allocator\n-decision can be left up the compiler.\n-\n-Dynamic and static libraries, however, will use `alloc_system` by default. Here\n-Rust is typically a 'guest' in another application or another world where it\n-cannot authoritatively decide what allocator is in use. As a result it resorts\n-back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n-memory.\n-\n-# Switching Allocators\n-\n-Although the compiler's default choices may work most of the time, it's often\n-necessary to tweak certain aspects. Overriding the compiler's decision about\n-which allocator is in use is done simply by linking to the desired allocator:\n-\n-```rust,no_run\n-#![feature(alloc_system)]\n-\n-extern crate alloc_system;\n-\n-fn main() {\n-    let a = Box::new(4); // Allocates from the system allocator.\n-    println!(\"{}\", a);\n-}\n-```\n-\n-In this example the binary generated will not link to jemalloc by default but\n-instead use the system allocator. Conversely to generate a dynamic library which\n-uses jemalloc by default one would write:\n-\n-```rust,ignore\n-#![feature(alloc_jemalloc)]\n-#![crate_type = \"dylib\"]\n-\n-extern crate alloc_jemalloc;\n-\n-pub fn foo() {\n-    let a = Box::new(4); // Allocates from jemalloc.\n-    println!(\"{}\", a);\n-}\n-# fn main() {}\n-```\n+This feature has been replaced by [the `jemallocator` crate on crates.io.][jemallocator].\n \n+[jemallocator]: https://crates.io/crates/jemallocator"}, {"sha": "9effab202cabd909b8c270110f2ff1df5f7fa568", "filename": "src/doc/unstable-book/src/library-features/alloc-system.md", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -1,10 +1,10 @@\n # `alloc_system`\n \n-The tracking issue for this feature is: [#33082]\n+The tracking issue for this feature is: [#32838]\n \n-[#33082]: https://github.com/rust-lang/rust/issues/33082\n+[#32838]: https://github.com/rust-lang/rust/issues/32838\n \n-See also [`alloc_jemalloc`](library-features/alloc-jemalloc.html).\n+See also [`global_allocator`](language-features/global-allocator.html).\n \n ------------------------\n \n@@ -30,13 +30,18 @@ memory.\n \n Although the compiler's default choices may work most of the time, it's often\n necessary to tweak certain aspects. Overriding the compiler's decision about\n-which allocator is in use is done simply by linking to the desired allocator:\n+which allocator is in use is done through the `#[global_allocator]` attribute:\n \n ```rust,no_run\n-#![feature(alloc_system)]\n+#![feature(alloc_system, global_allocator, allocator_api)]\n \n extern crate alloc_system;\n \n+use alloc_system::System;\n+\n+#[global_allocator]\n+static A: System = System;\n+\n fn main() {\n     let a = Box::new(4); // Allocates from the system allocator.\n     println!(\"{}\", a);\n@@ -47,16 +52,26 @@ In this example the binary generated will not link to jemalloc by default but\n instead use the system allocator. Conversely to generate a dynamic library which\n uses jemalloc by default one would write:\n \n+(The `alloc_jemalloc` crate cannot be used to control the global allocator,\n+crate.io\u2019s `jemallocator` crate provides equivalent functionality.)\n+\n+```toml\n+# Cargo.toml\n+[dependencies]\n+jemallocator = \"0.1\"\n+```\n ```rust,ignore\n-#![feature(alloc_jemalloc)]\n+#![feature(global_allocator)]\n #![crate_type = \"dylib\"]\n \n-extern crate alloc_jemalloc;\n+extern crate jemallocator;\n+\n+#[global_allocator]\n+static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n \n pub fn foo() {\n     let a = Box::new(4); // Allocates from jemalloc.\n     println!(\"{}\", a);\n }\n # fn main() {}\n ```\n-"}, {"sha": "7aa5f8a9186b0a229412e370e1faa93b08a61e80", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -14,7 +14,7 @@\n #![unstable(feature = \"alloc_system\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n-            issue = \"27783\")]\n+            issue = \"32838\")]\n #![feature(global_allocator)]\n #![feature(allocator_api)]\n #![feature(alloc)]"}, {"sha": "50f7e4ba176e5ddf6d3236bb5576485d21962b29", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -518,7 +518,7 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n     FnPtrAddrCast\n });\n \n-impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { idx });\n+impl_stable_hash_for!(tuple_struct ::middle::region::FirstStatementIndex { idx });\n impl_stable_hash_for!(struct ::middle::region::Scope { id, code });\n \n impl<'gcx> ToStableHashKey<StableHashingContext<'gcx>> for region::Scope {"}, {"sha": "fa4ee7c00929152db196d7ec8b431e42cbf5d27d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -156,26 +156,11 @@ pub struct BlockRemainder {\n     pub first_statement_index: FirstStatementIndex,\n }\n \n-#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n-         RustcDecodable, Copy)]\n-pub struct FirstStatementIndex { pub idx: u32 }\n-\n-impl Idx for FirstStatementIndex {\n-    fn new(idx: usize) -> Self {\n-        assert!(idx <= SCOPE_DATA_REMAINDER_MAX as usize);\n-        FirstStatementIndex { idx: idx as u32 }\n-    }\n-\n-    fn index(self) -> usize {\n-        self.idx as usize\n-    }\n-}\n-\n-impl fmt::Debug for FirstStatementIndex {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&self.index(), formatter)\n-    }\n-}\n+newtype_index!(FirstStatementIndex\n+    {\n+        DEBUG_NAME = \"\",\n+        MAX = SCOPE_DATA_REMAINDER_MAX,\n+    });\n \n impl From<ScopeData> for Scope {\n     #[inline]\n@@ -208,7 +193,7 @@ impl Scope {\n             SCOPE_DATA_DESTRUCTION => ScopeData::Destruction(self.id),\n             idx => ScopeData::Remainder(BlockRemainder {\n                 block: self.id,\n-                first_statement_index: FirstStatementIndex { idx }\n+                first_statement_index: FirstStatementIndex::new(idx as usize)\n             })\n         }\n     }"}, {"sha": "1d1b367de200eead52088b3b4440ebb678b5b377", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -65,7 +65,7 @@ macro_rules! newtype_index {\n     (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n             RustcEncodable, RustcDecodable)]\n-        pub struct $type(u32);\n+        pub struct $type(pub u32);\n \n         impl Idx for $type {\n             fn new(value: usize) -> Self {\n@@ -99,7 +99,7 @@ macro_rules! newtype_index {\n     // Replace existing default for max\n     (@type[$type:ident] @max[$_max:expr] @debug_name[$debug_name:expr]\n             MAX = $max:expr, $($tokens:tt)*) => (\n-        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $(tokens)*);\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $($tokens)*);\n     );\n \n     // Replace existing default for debug_name"}, {"sha": "0f67f7bf6deb47fe14cdd2881b5d085703036ff0", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -320,20 +320,68 @@ Since `MyStruct` is a type that is not marked `Copy`, the data gets moved out\n of `x` when we set `y`. This is fundamental to Rust's ownership system: outside\n of workarounds like `Rc`, a value cannot be owned by more than one variable.\n \n-If we own the type, the easiest way to address this problem is to implement\n-`Copy` and `Clone` on it, as shown below. This allows `y` to copy the\n-information in `x`, while leaving the original version owned by `x`. Subsequent\n-changes to `x` will not be reflected when accessing `y`.\n+Sometimes we don't need to move the value. Using a reference, we can let another\n+function borrow the value without changing its ownership. In the example below,\n+we don't actually have to move our string to `calculate_length`, we can give it\n+a reference to it with `&` instead.\n+\n+```\n+fn main() {\n+    let s1 = String::from(\"hello\");\n+\n+    let len = calculate_length(&s1);\n+\n+    println!(\"The length of '{}' is {}.\", s1, len);\n+}\n+\n+fn calculate_length(s: &String) -> usize {\n+    s.len()\n+}\n+```\n+\n+A mutable reference can be created with `&mut`.\n+\n+Sometimes we don't want a reference, but a duplicate. All types marked `Clone`\n+can be duplicated by calling `.clone()`. Subsequent changes to a clone do not\n+affect the original variable.\n+\n+Most types in the standard library are marked `Clone`. The example below\n+demonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\n+copied to `s2`. Then the first character of `s1` is removed, without affecting\n+`s2`. \"any many\" is printed to the console.\n+\n+```\n+fn main() {\n+    let mut s1 = String::from(\"many\");\n+    let s2 = s1.clone();\n+    s1.remove(0);\n+    println!(\"{} {}\", s1, s2);\n+}\n+```\n+\n+If we control the definition of a type, we can implement `Clone` on it ourselves\n+with `#[derive(Clone)]`.\n+\n+Some types have no ownership semantics at all and are trivial to duplicate. An\n+example is `i32` and the other number types. We don't have to call `.clone()` to\n+clone them, because they are marked `Copy` in addition to `Clone`.  Implicit\n+cloning is more convienient in this case. We can mark our own types `Copy` if\n+all their members also are marked `Copy`.\n+\n+In the example below, we implement a `Point` type. Because it only stores two\n+integers, we opt-out of ownership semantics with `Copy`. Then we can\n+`let p2 = p1` without `p1` being moved.\n \n ```\n #[derive(Copy, Clone)]\n-struct MyStruct { s: u32 }\n+struct Point { x: i32, y: i32 }\n \n fn main() {\n-    let mut x = MyStruct{ s: 5u32 };\n-    let y = x;\n-    x.s = 6;\n-    println!(\"{}\", x.s);\n+    let mut p1 = Point{ x: -1, y: 2 };\n+    let p2 = p1;\n+    p1.x = 1;\n+    println!(\"p1: {}, {}\", p1.x, p1.y);\n+    println!(\"p2: {}, {}\", p2.x, p2.y);\n }\n ```\n "}, {"sha": "ad171c4babbce4f0f4e852ce5b42af18b7570cb8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -238,6 +238,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                             if prim.is_some() {\n                                 break;\n                             }\n+                            // FIXME: should warn on unknown primitives?\n                         }\n                     }\n                 }\n@@ -1627,6 +1628,7 @@ pub enum PrimitiveType {\n     Slice,\n     Array,\n     Tuple,\n+    Unit,\n     RawPointer,\n     Reference,\n     Fn,\n@@ -1662,7 +1664,11 @@ impl Type {\n             Primitive(p) | BorrowedRef { type_: box Primitive(p), ..} => Some(p),\n             Slice(..) | BorrowedRef { type_: box Slice(..), .. } => Some(PrimitiveType::Slice),\n             Array(..) | BorrowedRef { type_: box Array(..), .. } => Some(PrimitiveType::Array),\n-            Tuple(..) => Some(PrimitiveType::Tuple),\n+            Tuple(ref tys) => if tys.is_empty() {\n+                Some(PrimitiveType::Unit)\n+            } else {\n+                Some(PrimitiveType::Tuple)\n+            },\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n@@ -1708,7 +1714,11 @@ impl GetDefId for Type {\n             BorrowedRef { type_: box Generic(..), .. } =>\n                 Primitive(PrimitiveType::Reference).def_id(),\n             BorrowedRef { ref type_, .. } => type_.def_id(),\n-            Tuple(..) => Primitive(PrimitiveType::Tuple).def_id(),\n+            Tuple(ref tys) => if tys.is_empty() {\n+                Primitive(PrimitiveType::Unit).def_id()\n+            } else {\n+                Primitive(PrimitiveType::Tuple).def_id()\n+            },\n             BareFunction(..) => Primitive(PrimitiveType::Fn).def_id(),\n             Slice(..) => Primitive(PrimitiveType::Slice).def_id(),\n             Array(..) => Primitive(PrimitiveType::Array).def_id(),\n@@ -1742,6 +1752,7 @@ impl PrimitiveType {\n             \"array\" => Some(PrimitiveType::Array),\n             \"slice\" => Some(PrimitiveType::Slice),\n             \"tuple\" => Some(PrimitiveType::Tuple),\n+            \"unit\" => Some(PrimitiveType::Unit),\n             \"pointer\" => Some(PrimitiveType::RawPointer),\n             \"reference\" => Some(PrimitiveType::Reference),\n             \"fn\" => Some(PrimitiveType::Fn),\n@@ -1772,6 +1783,7 @@ impl PrimitiveType {\n             Array => \"array\",\n             Slice => \"slice\",\n             Tuple => \"tuple\",\n+            Unit => \"unit\",\n             RawPointer => \"pointer\",\n             Reference => \"reference\",\n             Fn => \"fn\",\n@@ -2693,6 +2705,7 @@ fn build_deref_target_impls(cx: &DocContext,\n             Slice => tcx.lang_items().slice_impl(),\n             Array => tcx.lang_items().slice_impl(),\n             Tuple => None,\n+            Unit => None,\n             RawPointer => tcx.lang_items().const_ptr_impl(),\n             Reference => None,\n             Fn => None,"}, {"sha": "18d6b1cc1e0f06fd26c248b2a87b47ab59d3c55d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -614,7 +614,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n         }\n         clean::Tuple(ref typs) => {\n             match &typs[..] {\n-                &[] => primitive_link(f, PrimitiveType::Tuple, \"()\"),\n+                &[] => primitive_link(f, PrimitiveType::Unit, \"()\"),\n                 &[ref one] => {\n                     primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                     //carry f.alternate() into this display w/o branching manually"}, {"sha": "e9a3cfd908eb308a3aa7d10962475ba57855a1a6", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -39,6 +39,13 @@\n                      \"associatedconstant\",\n                      \"union\"];\n \n+    // On the search screen, so you remain on the last tab you opened.\n+    //\n+    // 0 for \"Types/modules\"\n+    // 1 for \"As parameters\"\n+    // 2 for \"As return value\"\n+    var currentTab = 0;\n+\n     function hasClass(elem, className) {\n         if (elem && className && elem.className) {\n             var elemClass = elem.className;\n@@ -758,7 +765,7 @@\n \n             var output = '';\n             if (array.length > 0) {\n-                output = `<table class=\"search-results\"${extraStyle}>`;\n+                output = '<table class=\"search-results\"' + extraStyle + '>';\n                 var shown = [];\n \n                 array.forEach(function(item) {\n@@ -812,24 +819,32 @@\n                 });\n                 output += '</table>';\n             } else {\n-                output = `<div class=\"search-failed\"${extraStyle}>No results :(<br/>` +\n+                output = '<div class=\"search-failed\"' + extraStyle + '>No results :(<br/>' +\n                     'Try on <a href=\"https://duckduckgo.com/?q=' +\n                     encodeURIComponent('rust ' + query.query) +\n                     '\">DuckDuckGo</a>?</div>';\n             }\n             return output;\n         }\n \n+        function makeTabHeader(tabNb, text) {\n+            if (currentTab === tabNb) {\n+                return '<div class=\"selected\">' + text + '</div>';\n+            }\n+            return '<div>' + text + '</div>';\n+        }\n+\n         function showResults(results) {\n             var output, query = getQuery();\n \n             currentResults = query.id;\n             output = '<h1>Results for ' + escape(query.query) +\n                 (query.type ? ' (type: ' + escape(query.type) + ')' : '') + '</h1>' +\n                 '<div id=\"titles\">' +\n-                '<div class=\"selected\">Types/modules</div>' +\n-                '<div>As parameters</div>' +\n-                '<div>As return value</div></div><div id=\"results\">';\n+                makeTabHeader(0, \"Types/modules\") +\n+                makeTabHeader(1, \"As parameters\") +\n+                makeTabHeader(2, \"As return value\") +\n+                '</div><div id=\"results\">';\n \n             output += addTab(results['others'], query);\n             output += addTab(results['in_args'], query, false);\n@@ -1405,6 +1420,9 @@\n \n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {\n+        if (nb === 0 || nb === 1 || nb === 2) {\n+            currentTab = nb;\n+        }\n         var nb_copy = nb;\n         onEach(document.getElementById('titles').childNodes, function(elem) {\n             if (nb_copy === 0) {"}, {"sha": "20da99a6b137658acaec97ef85359666abe58db8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -170,6 +170,9 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         stable(\"no-default\", |o| {\n             o.optflag(\"\", \"no-defaults\", \"don't run the default passes\")\n         }),\n+        stable(\"document-private-items\", |o| {\n+            o.optflag(\"\", \"document-private-items\", \"document private items\")\n+        }),\n         stable(\"test\", |o| o.optflag(\"\", \"test\", \"run code examples as tests\")),\n         stable(\"test-args\", |o| {\n             o.optmulti(\"\", \"test-args\", \"arguments to pass to the test runner\",\n@@ -275,6 +278,9 @@ pub fn main_args(args: &[String]) -> isize {\n     // Check for unstable options.\n     nightly_options::check_nightly_options(&matches, &opts());\n \n+    // check for deprecated options\n+    check_deprecated_options(&matches);\n+\n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         usage(\"rustdoc\");\n         return 0;\n@@ -458,6 +464,18 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     let mut passes = matches.opt_strs(\"passes\");\n     let mut plugins = matches.opt_strs(\"plugins\");\n \n+    // We hardcode in the passes here, as this is a new flag and we\n+    // are generally deprecating passes.\n+    if matches.opt_present(\"document-private-items\") {\n+        default_passes = false;\n+\n+        passes = vec![\n+            String::from(\"strip-hidden\"),\n+            String::from(\"collapse-docs\"),\n+            String::from(\"unindent-comments\"),\n+        ];\n+    }\n+\n     // First, parse the crate and extract all relevant information.\n     let mut paths = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n@@ -550,3 +568,26 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     });\n     rx.recv().unwrap()\n }\n+\n+/// Prints deprecation warnings for deprecated options\n+fn check_deprecated_options(matches: &getopts::Matches) {\n+    let deprecated_flags = [\n+       \"input-format\",\n+       \"output-format\",\n+       \"plugin-path\",\n+       \"plugins\",\n+       \"no-defaults\",\n+       \"passes\",\n+    ];\n+\n+    for flag in deprecated_flags.into_iter() {\n+        if matches.opt_present(flag) {\n+            eprintln!(\"WARNING: the '{}' flag is considered deprecated\", flag);\n+            eprintln!(\"WARNING: please see https://github.com/rust-lang/rust/issues/44136\");\n+        }\n+    }\n+\n+    if matches.opt_present(\"no-defaults\") {\n+        eprintln!(\"WARNING: (you may want to use --document-private-items)\");\n+    }\n+}"}, {"sha": "cb18eed8ee54b63e6eb8ce493c2a35075d7e03cd", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -325,7 +325,10 @@ impl<T: 'static> LocalKey<T> {\n     ///\n     /// Once the initialization expression succeeds, the key transitions to the\n     /// `Valid` state which will guarantee that future calls to [`with`] will\n-    /// succeed within the thread.\n+    /// succeed within the thread. Some keys might skip the `Uninitialized`\n+    /// state altogether and start in the `Valid` state as an optimization\n+    /// (e.g. keys initialized with a constant expression), but no guarantees\n+    /// are made.\n     ///\n     /// When a thread exits, each key will be destroyed in turn, and as keys are\n     /// destroyed they will enter the `Destroyed` state just before the"}, {"sha": "e0b37cb2f32243474a4dff376667460091cac759", "filename": "src/test/codegen/abi-x86-interrupt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -14,7 +14,6 @@\n \n // ignore-arm\n // ignore-aarch64\n-// min-llvm-version 3.8\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "f0508bc90f20c9941b537b8fc4549d82f3ec4342", "filename": "src/test/codegen/mainsubprogram.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// The minimum LLVM version is set to 3.8, but really this test\n-// depends on a patch that is was committed to upstream LLVM before\n-// 4.0; and also backported to the Rust LLVM fork.\n+// This test depends on a patch that was committed to upstream LLVM\n+// before 4.0, formerly backported to the Rust LLVM fork.\n \n // ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n-// min-llvm-version 3.8\n+// min-llvm-version 4.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "8325318f9afc56dcecadf961d21de6b13a2acec0", "filename": "src/test/codegen/mainsubprogramstart.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// The minimum LLVM version is set to 3.8, but really this test\n-// depends on a patch that is was committed to upstream LLVM before\n-// 4.0; and also backported to the Rust LLVM fork.\n+// This test depends on a patch that was committed to upstream LLVM\n+// before 4.0, formerly backported to the Rust LLVM fork.\n \n // ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n-// min-llvm-version 3.8\n+// min-llvm-version 4.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "f6c03b384f23db86416efe87d2436f628bdabea6", "filename": "src/test/run-pass/issue-36023.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frun-pass%2Fissue-36023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frun-pass%2Fissue-36023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36023.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-llvm-version 3.9\n-\n use std::ops::Deref;\n \n fn main() {"}, {"sha": "6c6af19be88f98f4bb080e7e43d35bf366792c4d", "filename": "src/test/rustdoc/empty-mod-private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-mod-private.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: --no-defaults --passes collapse-docs --passes unindent-comments --passes strip-priv-imports\n+// compile-flags: --document-private-items\n \n // @has 'empty_mod_private/index.html' '//a[@href=\"foo/index.html\"]' 'foo'\n // @has 'empty_mod_private/sidebar-items.js' 'foo'"}, {"sha": "c50df6edd484a4c9130aa90ab0d3a3b8f59c41ff", "filename": "src/test/rustdoc/issue-15347.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frustdoc%2Fissue-15347.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frustdoc%2Fissue-15347.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-15347.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:--no-defaults --passes collapse-docs --passes unindent-comments\n+// compile-flags: --no-defaults --passes collapse-docs --passes unindent-comments\n \n // @has issue_15347/fn.foo.html\n #[doc(hidden)]"}, {"sha": "24d566e082eea8e01e824e1d9e8dd8c419f3cccc", "filename": "src/test/rustdoc/pub-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7960878ba77124505aabe7dc99d0a898354c326/src%2Ftest%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-method.rs?ref=b7960878ba77124505aabe7dc99d0a898354c326", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: --no-defaults --passes collapse-docs --passes unindent-comments --passes strip-priv-imports\n+// compile-flags: --document-private-items\n \n #![crate_name = \"foo\"]\n "}]}