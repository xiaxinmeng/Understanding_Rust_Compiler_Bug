{"sha": "84378b0b5af9ec09ce627fdd59353b408d7f7fb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Mzc4YjBiNWFmOWVjMDljZTYyN2ZkZDU5MzUzYjQwOGQ3ZjdmYjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T00:33:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T00:33:40Z"}, "message": "std: Use Arc instead of UnsafeArc in BlockedTask", "tree": {"sha": "5a613a25fafeae1e465e85fa920e29979d4f6105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a613a25fafeae1e465e85fa920e29979d4f6105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84378b0b5af9ec09ce627fdd59353b408d7f7fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84378b0b5af9ec09ce627fdd59353b408d7f7fb4", "html_url": "https://github.com/rust-lang/rust/commit/84378b0b5af9ec09ce627fdd59353b408d7f7fb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84378b0b5af9ec09ce627fdd59353b408d7f7fb4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe93c3d47ed0cdf0a0cbac66a9f35ddb4c6783a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe93c3d47ed0cdf0a0cbac66a9f35ddb4c6783a2", "html_url": "https://github.com/rust-lang/rust/commit/fe93c3d47ed0cdf0a0cbac66a9f35ddb4c6783a2"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "8968747d9908e53e974f6119163b5e3884c8659f", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/84378b0b5af9ec09ce627fdd59353b408d7f7fb4/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84378b0b5af9ec09ce627fdd59353b408d7f7fb4/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=84378b0b5af9ec09ce627fdd59353b408d7f7fb4", "patch": "@@ -13,6 +13,8 @@\n //! local storage, and logging. Even a 'freestanding' Rust would likely want\n //! to implement this.\n \n+use alloc::arc::Arc;\n+\n use cleanup;\n use clone::Clone;\n use comm::Sender;\n@@ -32,7 +34,6 @@ use rt::local_heap::LocalHeap;\n use rt::rtio::LocalIo;\n use rt::unwind::Unwinder;\n use str::SendStr;\n-use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicUint, SeqCst};\n use task::{TaskResult, TaskOpts};\n use unstable::finally::Finally;\n@@ -65,7 +66,7 @@ pub struct LocalStorage(pub Option<local_data::Map>);\n /// at any time.\n pub enum BlockedTask {\n     Owned(Box<Task>),\n-    Shared(UnsafeArc<AtomicUint>),\n+    Shared(Arc<AtomicUint>),\n }\n \n pub enum DeathAction {\n@@ -82,7 +83,7 @@ pub struct Death {\n }\n \n pub struct BlockedTasks {\n-    inner: UnsafeArc<AtomicUint>,\n+    inner: Arc<AtomicUint>,\n }\n \n impl Task {\n@@ -313,10 +314,10 @@ impl BlockedTask {\n     pub fn wake(self) -> Option<Box<Task>> {\n         match self {\n             Owned(task) => Some(task),\n-            Shared(arc) => unsafe {\n-                match (*arc.get()).swap(0, SeqCst) {\n+            Shared(arc) => {\n+                match arc.swap(0, SeqCst) {\n                     0 => None,\n-                    n => Some(mem::transmute(n)),\n+                    n => Some(unsafe { mem::transmute(n) }),\n                 }\n             }\n         }\n@@ -343,7 +344,7 @@ impl BlockedTask {\n         let arc = match self {\n             Owned(task) => {\n                 let flag = unsafe { AtomicUint::new(mem::transmute(task)) };\n-                UnsafeArc::new(flag)\n+                Arc::new(flag)\n             }\n             Shared(arc) => arc.clone(),\n         };\n@@ -375,7 +376,7 @@ impl BlockedTask {\n         if blocked_task_ptr & 0x1 == 0 {\n             Owned(mem::transmute(blocked_task_ptr))\n         } else {\n-            let ptr: Box<UnsafeArc<AtomicUint>> =\n+            let ptr: Box<Arc<AtomicUint>> =\n                 mem::transmute(blocked_task_ptr & !1);\n             Shared(*ptr)\n         }"}]}