{"sha": "2f9ce4f663b47c69fbf924f3300713773f5f4c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOWNlNGY2NjNiNDdjNjlmYmY5MjRmMzMwMDcxMzc3M2Y1ZjRjMTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-16T19:53:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T19:53:01Z"}, "message": "Merge #8061\n\n8061: Auto-magical whitespace r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bc69d7b186ac15052395148c8d0374b9d7361ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc69d7b186ac15052395148c8d0374b9d7361ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f9ce4f663b47c69fbf924f3300713773f5f4c10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUQydCRBK7hj4Ov3rIwAAdHIIAGlpd+WbvzUQ+yCD6lceIArR\nEinMOEK7UY6ON1FOcppuCkc4uCA0jLzIQEwpeLXgvkGM96Kbc9EzidiWgjdMPQIv\nLI/nma8i8nAiVmciFwB30bF6pmCsgwRuMi0pxhRe8HsNyMbAtNts5aasU50SD8n3\nAQqKaBGpVz4bN2gpRF+5Sj8MQbKqvi2Y12/Bfe2wrOJP5ngohsvFcO9zkm1sZ18A\nL29/J70B/Pazv2bN7O12OBRL0mJPf0WyzsUNgTLwJRM0aap2bP56ODJAuYO6WrtG\nTcjMLFXVnddR31JpmmwzqvWDoYTvztIw4+mmulRgtujUSis5YwaitFHuXTFXxJw=\n=RXa+\n-----END PGP SIGNATURE-----\n", "payload": "tree bc69d7b186ac15052395148c8d0374b9d7361ee1\nparent 9caeef98e3ba80c370f08b43f1317bd12ecd5504\nparent 34555593caeea25d460703e25c446b13132b1c5b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615924381 +0000\ncommitter GitHub <noreply@github.com> 1615924381 +0000\n\nMerge #8061\n\n8061: Auto-magical whitespace r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9ce4f663b47c69fbf924f3300713773f5f4c10", "html_url": "https://github.com/rust-lang/rust/commit/2f9ce4f663b47c69fbf924f3300713773f5f4c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f9ce4f663b47c69fbf924f3300713773f5f4c10/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9caeef98e3ba80c370f08b43f1317bd12ecd5504", "url": "https://api.github.com/repos/rust-lang/rust/commits/9caeef98e3ba80c370f08b43f1317bd12ecd5504", "html_url": "https://github.com/rust-lang/rust/commit/9caeef98e3ba80c370f08b43f1317bd12ecd5504"}, {"sha": "34555593caeea25d460703e25c446b13132b1c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/34555593caeea25d460703e25c446b13132b1c5b", "html_url": "https://github.com/rust-lang/rust/commit/34555593caeea25d460703e25c446b13132b1c5b"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "7adfe5e162077659538951190a138bc7122f4880", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ce4f663b47c69fbf924f3300713773f5f4c10/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ce4f663b47c69fbf924f3300713773f5f4c10/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=2f9ce4f663b47c69fbf924f3300713773f5f4c10", "patch": "@@ -8,7 +8,7 @@ use parser::T;\n use crate::{\n     ast,\n     ted::{self, Position},\n-    AstNode, Direction, SyntaxKind,\n+    AstNode, Direction, SyntaxElement,\n };\n \n use super::NameOwner;\n@@ -27,7 +27,7 @@ impl GenericParamsOwnerEdit for ast::Fn {\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position, true)\n+            create_where_clause(position)\n         }\n         self.where_clause().unwrap()\n     }\n@@ -41,7 +41,7 @@ impl GenericParamsOwnerEdit for ast::Impl {\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position, false)\n+            create_where_clause(position)\n         }\n         self.where_clause().unwrap()\n     }\n@@ -55,7 +55,7 @@ impl GenericParamsOwnerEdit for ast::Trait {\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position, false)\n+            create_where_clause(position)\n         }\n         self.where_clause().unwrap()\n     }\n@@ -77,7 +77,7 @@ impl GenericParamsOwnerEdit for ast::Struct {\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position, true)\n+            create_where_clause(position)\n         }\n         self.where_clause().unwrap()\n     }\n@@ -93,21 +93,16 @@ impl GenericParamsOwnerEdit for ast::Enum {\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position, true)\n+            create_where_clause(position)\n         }\n         self.where_clause().unwrap()\n     }\n }\n \n-fn create_where_clause(position: Position, after: bool) {\n-    let mut elements = vec![make::where_clause(empty()).clone_for_update().syntax().clone().into()];\n-    let ws = make::tokens::single_space().into();\n-    if after {\n-        elements.insert(0, ws)\n-    } else {\n-        elements.push(ws)\n-    }\n-    ted::insert_all(position, elements);\n+fn create_where_clause(position: Position) {\n+    let where_clause: SyntaxElement =\n+        make::where_clause(empty()).clone_for_update().syntax().clone().into();\n+    ted::insert_ws(position, where_clause);\n }\n \n impl ast::WhereClause {\n@@ -117,12 +112,7 @@ impl ast::WhereClause {\n                 ted::append_child(self.syntax().clone(), make::token(T![,]));\n             }\n         }\n-        if self.syntax().children_with_tokens().last().map(|it| it.kind())\n-            != Some(SyntaxKind::WHITESPACE)\n-        {\n-            ted::append_child(self.syntax().clone(), make::tokens::single_space());\n-        }\n-        ted::append_child(self.syntax().clone(), predicate.syntax().clone())\n+        ted::append_child_ws(self.syntax().clone(), predicate.syntax().clone())\n     }\n }\n "}, {"sha": "f2166bbd3bb64643e8b0729f5babdd7e81114f09", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ce4f663b47c69fbf924f3300713773f5f4c10/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ce4f663b47c69fbf924f3300713773f5f4c10/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=2f9ce4f663b47c69fbf924f3300713773f5f4c10", "patch": "@@ -1,8 +1,9 @@\n //! Primitive tree editor, ed for trees\n-#![allow(unused)]\n use std::ops::RangeInclusive;\n \n-use crate::{SyntaxElement, SyntaxNode};\n+use parser::T;\n+\n+use crate::{ast::make, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken};\n \n #[derive(Debug)]\n pub struct Position {\n@@ -42,9 +43,25 @@ impl Position {\n     }\n }\n \n+pub fn insert_ws(position: Position, elem: impl Into<SyntaxElement>) {\n+    insert_all_ws(position, vec![elem.into()])\n+}\n pub fn insert(position: Position, elem: impl Into<SyntaxElement>) {\n     insert_all(position, vec![elem.into()])\n }\n+pub fn insert_all_ws(position: Position, mut elements: Vec<SyntaxElement>) {\n+    if let Some(first) = elements.first() {\n+        if let Some(ws) = ws_before(&position, first) {\n+            elements.insert(0, ws.into())\n+        }\n+    }\n+    if let Some(last) = elements.last() {\n+        if let Some(ws) = ws_after(&position, last) {\n+            elements.push(ws.into())\n+        }\n+    }\n+    insert_all(position, elements)\n+}\n pub fn insert_all(position: Position, elements: Vec<SyntaxElement>) {\n     let (parent, index) = match position.repr {\n         PositionRepr::FirstChild(parent) => (parent, 0),\n@@ -72,7 +89,35 @@ pub fn replace_all(range: RangeInclusive<SyntaxElement>, new: Vec<SyntaxElement>\n     parent.splice_children(start..end + 1, new)\n }\n \n+pub fn append_child_ws(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n+    let position = Position::last_child_of(node);\n+    insert_ws(position, child)\n+}\n pub fn append_child(node: impl Into<SyntaxNode>, child: impl Into<SyntaxElement>) {\n     let position = Position::last_child_of(node);\n     insert(position, child)\n }\n+\n+fn ws_before(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n+    let prev = match &position.repr {\n+        PositionRepr::FirstChild(_) => return None,\n+        PositionRepr::After(it) => it,\n+    };\n+    ws_between(prev, new)\n+}\n+fn ws_after(position: &Position, new: &SyntaxElement) -> Option<SyntaxToken> {\n+    let next = match &position.repr {\n+        PositionRepr::FirstChild(parent) => parent.first_child_or_token()?,\n+        PositionRepr::After(sibling) => sibling.next_sibling_or_token()?,\n+    };\n+    ws_between(new, &next)\n+}\n+fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken> {\n+    if left.kind() == SyntaxKind::WHITESPACE || right.kind() == SyntaxKind::WHITESPACE {\n+        return None;\n+    }\n+    if right.kind() == T![;] || right.kind() == T![,] {\n+        return None;\n+    }\n+    Some(make::tokens::single_space().into())\n+}"}]}