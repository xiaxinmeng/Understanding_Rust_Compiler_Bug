{"sha": "2d241f66fef30b27fad377ed49fe978541ac0ed8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMjQxZjY2ZmVmMzBiMjdmYWQzNzdlZDQ5ZmU5Nzg1NDFhYzBlZDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-03T13:36:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-19T19:27:35Z"}, "message": "Cleanup hot plug codegen backend code", "tree": {"sha": "c34706ee04fb406c4ad06b487a83c108fd557154", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34706ee04fb406c4ad06b487a83c108fd557154"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d241f66fef30b27fad377ed49fe978541ac0ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d241f66fef30b27fad377ed49fe978541ac0ed8", "html_url": "https://github.com/rust-lang/rust/commit/2d241f66fef30b27fad377ed49fe978541ac0ed8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d241f66fef30b27fad377ed49fe978541ac0ed8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9315ed45c5d221b868848f8db9ba4a5be155e008", "url": "https://api.github.com/repos/rust-lang/rust/commits/9315ed45c5d221b868848f8db9ba4a5be155e008", "html_url": "https://github.com/rust-lang/rust/commit/9315ed45c5d221b868848f8db9ba4a5be155e008"}], "stats": {"total": 183, "additions": 16, "deletions": 167}, "files": [{"sha": "558fd3b02be49abdc933379ae064813683a01d42", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d241f66fef30b27fad377ed49fe978541ac0ed8/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d241f66fef30b27fad377ed49fe978541ac0ed8/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2d241f66fef30b27fad377ed49fe978541ac0ed8", "patch": "@@ -198,7 +198,7 @@ pub fn get_trans(sess: &Session) -> Box<TransCrate> {\n             rustc_trans_utils::trans_crate::MetadataOnlyTransCrate::new(&sess)\n         }\n         Some(filename) if filename.starts_with(\"/\") => {\n-            rustc_trans_utils::trans_crate::ExternTransCrate::new(&sess, filename)\n+            rustc_trans_utils::trans_crate::link_extern_backend(&sess, filename)\n         }\n         Some(trans_name) => sess.fatal(&format!(\"Invalid trans {}\", trans_name)),\n     }"}, {"sha": "0def49132e44cfa477969697dcb0b37b2a7b3485", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 15, "deletions": 166, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/2d241f66fef30b27fad377ed49fe978541ac0ed8/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d241f66fef30b27fad377ed49fe978541ac0ed8/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=2d241f66fef30b27fad377ed49fe978541ac0ed8", "patch": "@@ -77,179 +77,28 @@ pub trait TransCrate {\n #[macro_export]\n macro_rules! hot_pluggable_trans_crate {\n     (|$sess:ident| { $body:expr }) => {\n-        use $crate::__rustc::ty::maps::Providers;\n         #[no_mangle]\n-        pub extern \"C\" fn __rustc_backend_new($sess: &Session) -> *mut Box<TransCrate> {\n-            let trans_crate = { $body };\n-            Box::into_raw(Box::new(trans_crate))\n+        pub fn __rustc_backend_new($sess: &Session) -> Box<TransCrate> {\n+            { $body }\n         }\n-\n-        #[no_mangle]\n-        pub extern \"C\" fn __rustc_backend_metadata_loader(\n-            trans_crate: *const Box<TransCrate>\n-        ) -> *mut Box<MetadataLoader> {\n-            let trans_crate = unsafe { &*trans_crate };\n-            let metadata_loader = trans_crate.metadata_loader();\n-            Box::into_raw(Box::new(metadata_loader))\n-        }\n-\n-        #[no_mangle]\n-        pub extern \"C\" fn __rustc_backend_provide(\n-            trans_crate: *const Box<TransCrate>,\n-            providers: *mut Providers\n-        ) {\n-            let trans_crate = unsafe { &*trans_crate };\n-            let providers = unsafe { &mut *providers };\n-            trans_crate.provide(providers);\n-        }\n-\n-        #[no_mangle]\n-        pub extern \"C\" fn __rustc_backend_provide_extern(\n-            trans_crate: *const Box<TransCrate>,\n-            providers: *mut Providers\n-        ) {\n-            let trans_crate = unsafe { &*trans_crate };\n-            let providers = unsafe { &mut *providers };\n-            trans_crate.provide_extern(providers);\n-        }\n-\n-        #[no_mangle]\n-        pub extern \"C\" fn __rustc_backend_trans_crate<'a, 'tcx: 'a>(\n-            trans_crate: *const Box<TransCrate>,\n-            tcx: *mut TyCtxt<'a, 'tcx, 'tcx>,\n-            rx: *mut mpsc::Receiver<Box<Any + Send>>\n-        ) -> *mut Box<Any> {\n-            let trans_crate = unsafe { &*trans_crate };\n-            let tcx = unsafe { *tcx };\n-            let rx = unsafe { *Box::from_raw(rx) };\n-            let trans = trans_crate.trans_crate(tcx, rx);\n-            Box::into_raw(Box::new(trans))\n-        }\n-\n-        #[no_mangle]\n-        pub extern \"C\" fn __rustc_backend_join_trans_and_link(\n-            trans_crate: *const Box<TransCrate>,\n-            trans: *mut Box<Any>,\n-            sess: *const Session,\n-            dep_graph: *const DepGraph,\n-            outputs: *const OutputFilenames\n-        ) -> *mut Result<(), CompileIncomplete> {\n-            let trans_crate = unsafe { &*trans_crate };\n-            let trans = unsafe { *Box::from_raw(trans) };\n-            let sess = unsafe { &*sess };\n-            let dep_graph = unsafe { &*dep_graph };\n-            let outputs = unsafe { &*outputs };\n-            let result = trans_crate.join_trans_and_link(trans, sess, dep_graph, outputs);\n-            Box::into_raw(Box::new(result))\n-        }\n-    }\n-}\n-\n-pub struct ExternTransCrate {\n-    lib: ::libloading::Library,\n-    backend: Box<Box<TransCrate>>,\n-}\n-\n-macro_rules! get_symbol {\n-    (($lib:expr) . $name:ident : $type:ty) => {\n-        let $name: ::libloading::Symbol<$type> = $lib.get(stringify!($name).as_bytes()).unwrap();\n     }\n }\n \n-impl ExternTransCrate {\n-    pub fn new<P: AsRef<OsStr>>(sess: &Session, filename: P) -> Box<TransCrate> {\n-        use libloading::*;\n-        let filename = filename.as_ref();\n-        match Library::new(filename) {\n-            Ok(lib) => {\n-                let backend = unsafe {\n-                    get_symbol!((lib).__rustc_backend_new:\n-                        unsafe extern \"C\" fn(&Session) -> *mut Box<TransCrate>);\n-                    Box::from_raw(__rustc_backend_new(sess))\n-                };\n-                Box::new(ExternTransCrate {\n-                    lib,\n-                    backend,\n-                })\n-            }\n-            Err(err) => {\n-                sess.fatal(&format!(\"Couldnt load codegen backend {:?}: {:?}\", filename, err));\n+pub fn link_extern_backend<P: AsRef<OsStr>>(sess: &Session, filename: P) -> Box<TransCrate> {\n+    use libloading::*;\n+    let filename = filename.as_ref();\n+    match Library::new(filename) {\n+        Ok(lib) => {\n+            unsafe {\n+                let __rustc_backend_new: Symbol<unsafe fn(&Session) -> Box<TransCrate>>;\n+                __rustc_backend_new = lib.get(b\"__rustc_backend_new\")\n+                    .expect(\"Couldnt load codegen backend as it\\\n+                    doesnt export the __rustc_backend_new symbol\");\n+                __rustc_backend_new(sess)\n             }\n         }\n-    }\n-}\n-\n-impl TransCrate for ExternTransCrate {\n-    fn metadata_loader(&self) -> Box<MetadataLoader> {\n-        unsafe {\n-            get_symbol!((self.lib).__rustc_backend_metadata_loader:\n-                unsafe extern \"C\" fn(*const Box<TransCrate>) -> *mut Box<MetadataLoader>);\n-            *Box::from_raw(__rustc_backend_metadata_loader(self.backend.as_ref() as *const _))\n-        }\n-    }\n-\n-    fn provide(&self, providers: &mut Providers) {\n-        unsafe {\n-            get_symbol!((self.lib).__rustc_backend_provide:\n-                unsafe extern \"C\" fn(*const Box<TransCrate>, *mut Providers));\n-            __rustc_backend_provide(self.backend.as_ref() as *const _, providers as *mut _);\n-        }\n-    }\n-\n-    fn provide_extern(&self, providers: &mut Providers) {\n-        unsafe {\n-            get_symbol!((self.lib).__rustc_backend_provide_extern:\n-                unsafe extern \"C\" fn(*const Box<TransCrate>, *mut Providers));\n-            __rustc_backend_provide_extern(self.backend.as_ref() as *const _, providers as *mut _);\n-        }\n-    }\n-\n-    fn trans_crate<'a, 'tcx>(\n-        &self,\n-        mut tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        rx: mpsc::Receiver<Box<Any + Send>>\n-    ) -> Box<Any> {\n-        unsafe {\n-            get_symbol!((self.lib).__rustc_backend_trans_crate:\n-                unsafe extern \"C\" fn(\n-                    *const Box<TransCrate>,\n-                    *mut TyCtxt<'a, 'tcx, 'tcx>,\n-                    *mut mpsc::Receiver<Box<Any + Send>>\n-                ) -> *mut Box<Any>\n-            );\n-            let rx = Box::new(rx);\n-            *Box::from_raw(__rustc_backend_trans_crate(\n-                self.backend.as_ref() as *const _,\n-                &mut tcx as *mut _,\n-                Box::into_raw(rx) as *mut _\n-            ))\n-        }\n-    }\n-\n-    fn join_trans_and_link(\n-        &self,\n-        trans: Box<Any>,\n-        sess: &Session,\n-        dep_graph: &DepGraph,\n-        outputs: &OutputFilenames,\n-    ) -> Result<(), CompileIncomplete> {\n-        unsafe {\n-            get_symbol!((self.lib).__rustc_backend_join_trans_and_link:\n-                unsafe extern \"C\" fn(\n-                    *const Box<TransCrate>,\n-                    *mut Box<Any>,\n-                    *const Session,\n-                    *const DepGraph,\n-                    *const OutputFilenames\n-                ) -> *mut Result<(), CompileIncomplete>\n-            );\n-            *Box::from_raw(__rustc_backend_join_trans_and_link(\n-                self.backend.as_ref() as *const _,\n-                Box::into_raw(Box::new(trans)) as *mut _,\n-                sess as *const _,\n-                dep_graph as *const _,\n-                outputs as *const _\n-            ))\n+        Err(err) => {\n+            sess.fatal(&format!(\"Couldnt load codegen backend {:?}: {:?}\", filename, err));\n         }\n     }\n }"}]}