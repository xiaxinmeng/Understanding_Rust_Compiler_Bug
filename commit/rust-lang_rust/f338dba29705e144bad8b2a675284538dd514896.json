{"sha": "f338dba29705e144bad8b2a675284538dd514896", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMzhkYmEyOTcwNWUxNDRiYWQ4YjJhNjc1Mjg0NTM4ZGQ1MTQ4OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-08T05:55:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-08T05:55:13Z"}, "message": "Auto merge of #45100 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #45018, #45042, #45052, #45053, #45058, #45060, #45081, #45083, #45090, #45094\n- Failed merges:", "tree": {"sha": "10480da46e8c7562ec48408dca191b6e8d9c7fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10480da46e8c7562ec48408dca191b6e8d9c7fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f338dba29705e144bad8b2a675284538dd514896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f338dba29705e144bad8b2a675284538dd514896", "html_url": "https://github.com/rust-lang/rust/commit/f338dba29705e144bad8b2a675284538dd514896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f338dba29705e144bad8b2a675284538dd514896/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928a295718d252a908bffcbde747550510407a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/928a295718d252a908bffcbde747550510407a10", "html_url": "https://github.com/rust-lang/rust/commit/928a295718d252a908bffcbde747550510407a10"}, {"sha": "7914e6fbc075f7f485fca4ab589563da4e95a9b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7914e6fbc075f7f485fca4ab589563da4e95a9b7", "html_url": "https://github.com/rust-lang/rust/commit/7914e6fbc075f7f485fca4ab589563da4e95a9b7"}], "stats": {"total": 158, "additions": 90, "deletions": 68}, "files": [{"sha": "9481cd4e1a4f170c242d4340b6548dd18618438d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -52,8 +52,10 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// also destroyed.\n ///\n /// Shared references in Rust disallow mutation by default, and `Arc` is no\n-/// exception. If you need to mutate through an `Arc`, use [`Mutex`][mutex],\n-/// [`RwLock`][rwlock], or one of the [`Atomic`][atomic] types.\n+/// exception: you cannot generally obtain a mutable reference to something\n+/// inside an `Arc`. If you need to mutate through an `Arc`, use\n+/// [`Mutex`][mutex], [`RwLock`][rwlock], or one of the [`Atomic`][atomic]\n+/// types.\n ///\n /// ## Thread Safety\n ///"}, {"sha": "2f8620cc75051e4bb10cbdc3bec5ae343ba08ad4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -19,7 +19,7 @@\n //! given value is destroyed, the pointed-to value is also destroyed.\n //!\n //! Shared references in Rust disallow mutation by default, and [`Rc`]\n-//! is no exception: you cannot obtain a mutable reference to\n+//! is no exception: you cannot generally obtain a mutable reference to\n //! something inside an [`Rc`]. If you need mutability, put a [`Cell`]\n //! or [`RefCell`] inside the [`Rc`]; see [an example of mutability\n //! inside an Rc][mutability]."}, {"sha": "60b9eeb1283cdd3223cf9c568a93289541b8f731", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use fmt::{self, FlagV1};\n+use fmt;\n \n struct PadAdapter<'a, 'b: 'a> {\n     fmt: &'a mut fmt::Formatter<'b>,\n@@ -140,7 +140,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     }\n \n     fn is_pretty(&self) -> bool {\n-        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+        self.fmt.alternate()\n     }\n }\n \n@@ -233,7 +233,7 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n \n     fn is_pretty(&self) -> bool {\n-        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+        self.fmt.alternate()\n     }\n }\n \n@@ -277,7 +277,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     }\n \n     fn is_pretty(&self) -> bool {\n-        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+        self.fmt.alternate()\n     }\n }\n \n@@ -519,6 +519,6 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     }\n \n     fn is_pretty(&self) -> bool {\n-        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+        self.fmt.alternate()\n     }\n }"}, {"sha": "1e45af5b105c9ca2c50f448bcbee27c394ba1f5a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -322,7 +322,6 @@ impl<'a> ArgumentV1<'a> {\n \n // flags available in the v1 format of format_args\n #[derive(Copy, Clone)]\n-#[allow(dead_code)] // SignMinus isn't currently used\n enum FlagV1 { SignPlus, SignMinus, Alternate, SignAwareZeroPad, }\n \n impl<'a> Arguments<'a> {\n@@ -427,7 +426,7 @@ impl<'a> Display for Arguments<'a> {\n     }\n }\n \n-/// Format trait for the `?` character.\n+/// `?` formatting.\n ///\n /// `Debug` should format the output in a programmer-facing, debugging context.\n ///\n@@ -593,7 +592,7 @@ pub trait Display {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `o` character.\n+/// `o` formatting.\n ///\n /// The `Octal` trait should format its output as a number in base-8.\n ///\n@@ -640,7 +639,7 @@ pub trait Octal {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `b` character.\n+/// `b` formatting.\n ///\n /// The `Binary` trait should format its output as a number in binary.\n ///\n@@ -687,7 +686,7 @@ pub trait Binary {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `x` character.\n+/// `x` formatting.\n ///\n /// The `LowerHex` trait should format its output as a number in hexadecimal, with `a` through `f`\n /// in lower case.\n@@ -735,7 +734,7 @@ pub trait LowerHex {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `X` character.\n+/// `X` formatting.\n ///\n /// The `UpperHex` trait should format its output as a number in hexadecimal, with `A` through `F`\n /// in upper case.\n@@ -783,7 +782,7 @@ pub trait UpperHex {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `p` character.\n+/// `p` formatting.\n ///\n /// The `Pointer` trait should format its output as a memory location. This is commonly presented\n /// as hexadecimal.\n@@ -828,7 +827,7 @@ pub trait Pointer {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `e` character.\n+/// `e` formatting.\n ///\n /// The `LowerExp` trait should format its output in scientific notation with a lower-case `e`.\n ///\n@@ -871,7 +870,7 @@ pub trait LowerExp {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `E` character.\n+/// `E` formatting.\n ///\n /// The `UpperExp` trait should format its output in scientific notation with an upper-case `E`.\n ///\n@@ -1276,7 +1275,7 @@ impl<'a> Formatter<'a> {\n         write(self.buf, fmt)\n     }\n \n-    /// Flags for formatting (packed version of rt::Flag)\n+    /// Flags for formatting\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn flags(&self) -> u32 { self.flags }\n "}, {"sha": "524f4508c9b1a8e4c8a532f16912c951d64dc81b", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -119,7 +119,9 @@ pub fn hint_core_should_pause()\n \n /// A boolean type which can be safely shared between threads.\n ///\n-/// This type has the same in-memory representation as a `bool`.\n+/// This type has the same in-memory representation as a [`bool`].\n+///\n+/// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct AtomicBool {\n@@ -246,11 +248,13 @@ impl AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n \n-    /// Returns a mutable reference to the underlying `bool`.\n+    /// Returns a mutable reference to the underlying [`bool`].\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n     /// concurrently accessing the atomic data.\n     ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -369,7 +373,7 @@ impl AtomicBool {\n         unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }\n     }\n \n-    /// Stores a value into the `bool` if the current value is the same as the `current` value.\n+    /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n     /// The return value is always the previous value. If it is equal to `current`, then the value\n     /// was updated.\n@@ -378,6 +382,7 @@ impl AtomicBool {\n     /// ordering of this operation.\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`bool`]: ../../../std/primitive.bool.html\n     ///\n     /// # Examples\n     ///\n@@ -401,7 +406,7 @@ impl AtomicBool {\n         }\n     }\n \n-    /// Stores a value into the `bool` if the current value is the same as the `current` value.\n+    /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n     /// The return value is a result indicating whether the new value was written and containing\n     /// the previous value. On success this value is guaranteed to be equal to `current`.\n@@ -412,6 +417,7 @@ impl AtomicBool {\n     /// operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and must\n     /// be equivalent or weaker than the success ordering.\n     ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Release`]: enum.Ordering.html#variant.Release\n     /// [`AcqRel`]: enum.Ordering.html#variant.Release\n@@ -452,7 +458,7 @@ impl AtomicBool {\n         }\n     }\n \n-    /// Stores a value into the `bool` if the current value is the same as the `current` value.\n+    /// Stores a value into the [`bool`] if the current value is the same as the `current` value.\n     ///\n     /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even when the\n     /// comparison succeeds, which can result in more efficient code on some platforms. The\n@@ -465,6 +471,7 @@ impl AtomicBool {\n     /// failure ordering can't be [`Release`] or [`AcqRel`] and must be equivalent or\n     /// weaker than the success ordering.\n     ///\n+    /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Release`]: enum.Ordering.html#variant.Release"}, {"sha": "1ecbc62225e0bf1d0dac634416384872bff95181", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -375,7 +375,7 @@ impl fmt::Debug for DepNode {\n         ::ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n                 if let Some(def_id) = self.extract_def_id(tcx) {\n-                    write!(f, \"{}\", tcx.def_path(def_id).to_string(tcx))?;\n+                    write!(f, \"{}\", tcx.def_path_debug_str(def_id))?;\n                 } else if let Some(ref s) = tcx.dep_graph.dep_node_debug_str(*self) {\n                     write!(f, \"{}\", s)?;\n                 } else {\n@@ -719,8 +719,8 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId, De\n         let (def_id_0, def_id_1) = *self;\n \n         format!(\"({}, {})\",\n-                tcx.def_path(def_id_0).to_string(tcx),\n-                tcx.def_path(def_id_1).to_string(tcx))\n+                tcx.def_path_debug_str(def_id_0),\n+                tcx.def_path_debug_str(def_id_1))\n     }\n }\n "}, {"sha": "8aff042955c170f54f2dd28f1b1b900b2301797a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -577,7 +577,7 @@ impl DepGraph {\n                       \"DepGraph::try_mark_green() - Duplicate DepNodeColor \\\n                       insertion for {:?}\", dep_node);\n \n-        debug!(\"try_mark_green({:?}) - END - successfully marked as green\", dep_node.kind);\n+        debug!(\"try_mark_green({:?}) - END - successfully marked as green\", dep_node);\n         Some(dep_node_index)\n     }\n "}, {"sha": "69d23504cdae00a818d855cc5ef5346c53c78ea7", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -197,12 +197,12 @@ pub struct DefId {\n \n impl fmt::Debug for DefId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"DefId {{ krate: {:?}, node: {:?}\",\n+        write!(f, \"DefId {{ krate: {:?}, index: {:?}\",\n                self.krate, self.index)?;\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n-                write!(f, \" => {}\", tcx.def_path(*self).to_string(tcx))?;\n+                write!(f, \" => {}\", tcx.def_path_debug_str(*self))?;\n             }\n             Ok(())\n         })?;"}, {"sha": "8bc7cf2faba0492e76fbd1f6286cd97941c70349", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -27,7 +27,6 @@ use std::hash::Hash;\n use syntax::ast;\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::{Symbol, InternedString};\n-use ty::TyCtxt;\n use util::nodemap::NodeMap;\n \n /// The DefPathTable maps DefIndexes to DefKeys and vice versa.\n@@ -296,26 +295,6 @@ impl DefPath {\n         DefPath { data: data, krate: krate }\n     }\n \n-    pub fn to_string(&self, tcx: TyCtxt) -> String {\n-        let mut s = String::with_capacity(self.data.len() * 16);\n-\n-        s.push_str(&tcx.original_crate_name(self.krate).as_str());\n-        s.push_str(\"/\");\n-        // Don't print the whole crate disambiguator. That's just annoying in\n-        // debug output.\n-        s.push_str(&tcx.crate_disambiguator(self.krate).as_str()[..7]);\n-\n-        for component in &self.data {\n-            write!(s,\n-                   \"::{}[{}]\",\n-                   component.data.as_interned_str(),\n-                   component.disambiguator)\n-                .unwrap();\n-        }\n-\n-        s\n-    }\n-\n     /// Returns a string representation of the DefPath without\n     /// the crate-prefix. This method is useful if you don't have\n     /// a TyCtxt available."}, {"sha": "4e4fc8b3118ffd53ed3632afb9441485a40cf8ad", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -429,7 +429,7 @@ impl<'a, 'tcx> Index<'tcx> {\n             // while maintaining the invariant that all sysroot crates are unstable\n             // by default and are unable to be used.\n             if tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {\n-                let reason = \"this crate is being loaded from the sysroot, and \\\n+                let reason = \"this crate is being loaded from the sysroot, an \\\n                               unstable location; did you mean to load this crate \\\n                               from crates.io via `Cargo.toml` instead?\";\n                 let stability = tcx.intern_stability(Stability {"}, {"sha": "36b74cbcb4f7cc1cbb9916dd7971977843275a5c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -864,7 +864,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          build_codegen_options, \"C\", \"codegen\",\n          CG_OPTIONS, cg_type_desc, cgsetters,\n     ar: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-        \"tool to assemble archives with\"),\n+        \"tool to assemble archives with (has no effect currently, \\\n+         rustc doesn't use an external archiver)\"),\n     linker: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"system linker to link outputs with\"),\n     link_arg: Vec<String> = (vec![], parse_string_push, [UNTRACKED],"}, {"sha": "740299b91f118d6b24810704a327928bab862c64", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -1252,6 +1252,27 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn def_path_debug_str(self, def_id: DefId) -> String {\n+        // We are explicitly not going through queries here in order to get\n+        // crate name and disambiguator since this code is called from debug!()\n+        // statements within the query system and we'd run into endless\n+        // recursion otherwise.\n+        let (crate_name, crate_disambiguator) = if def_id.is_local() {\n+            (self.crate_name.clone(),\n+             self.sess.local_crate_disambiguator())\n+        } else {\n+            (self.cstore.crate_name_untracked(def_id.krate),\n+             self.cstore.crate_disambiguator_untracked(def_id.krate))\n+        };\n+\n+        format!(\"{}[{}]{}\",\n+                crate_name,\n+                // Don't print the whole crate disambiguator. That's just\n+                // annoying in debug output.\n+                &(crate_disambiguator.as_str())[..4],\n+                self.def_path(def_id).to_string_no_crate())\n+    }\n+\n     pub fn metadata_encoding_version(self) -> Vec<u8> {\n         self.cstore.metadata_encoding_version().to_vec()\n     }"}, {"sha": "ba21b1df032a84dde687a6f5289b5beabb3d75e5", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -14,7 +14,7 @@ use target::{Target, TargetOptions, TargetResult};\n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n     // https://developer.android.com/ndk/guides/abis.html#armeabi\n-    base.features = \"+v5te\".to_string();\n+    base.features = \"+strict-align,+v5te\".to_string();\n     base.max_atomic_width = Some(64);\n \n     Ok(Target {"}, {"sha": "e630376a67dd093cf65c867e3799454b03fa6d82", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n-            features: \"+v6\".to_string(),\n+            features: \"+strict-align,+v6\".to_string(),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         },"}, {"sha": "178a948b2b9c8b33c492d2781ec144d26bea143c", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -27,7 +27,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n-            features: \"+v6,+vfp2\".to_string(),\n+            features: \"+strict-align,+v6,+vfp2\".to_string(),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         }"}, {"sha": "29720ec5efcd758e24a3ad8a7e443fd22345982e", "filename": "src/librustc_back/target/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n \n     // Most of these settings are copied from the arm_unknown_linux_gnueabi\n     // target.\n-    base.features = \"+v6\".to_string();\n+    base.features = \"+strict-align,+v6\".to_string();\n     base.max_atomic_width = Some(64);\n     Ok(Target {\n         // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it"}, {"sha": "fc8313877f6409619b8cfe2dba684346976d467a", "filename": "src/librustc_back/target/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n \n     // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n     // target.\n-    base.features = \"+v6,+vfp2\".to_string();\n+    base.features = \"+strict-align,+v6,+vfp2\".to_string();\n     base.max_atomic_width = Some(64);\n     Ok(Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM"}, {"sha": "fe1179a3b4a18ba56950ce8dab415970b9a801c5", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -206,6 +206,14 @@ impl<'a> Read for &'a [u8] {\n         *self = b;\n         Ok(())\n     }\n+\n+    #[inline]\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        buf.extend_from_slice(*self);\n+        let len = self.len();\n+        *self = &self[len..];\n+        Ok(len)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "978e06c75dd46da5d9e1808004c43ce397466212", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -3671,12 +3671,17 @@ impl<'a> Parser<'a> {\n             None\n         };\n         let init = self.parse_initializer()?;\n+        let hi = if self.token == token::Semi {\n+            self.span\n+        } else {\n+            self.prev_span\n+        };\n         Ok(P(ast::Local {\n             ty,\n             pat,\n             init,\n             id: ast::DUMMY_NODE_ID,\n-            span: lo.to(self.prev_span),\n+            span: lo.to(hi),\n             attrs,\n         }))\n     }"}, {"sha": "d2ca65775a44ea8a8e41d0bf6e95f76341db11f7", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -30,7 +30,7 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node12.EraseRegions.after.mir\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[8cd8]::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[8cd8]::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n //         return;\n //     }\n // END rustc.node12.EraseRegions.after.mir\n@@ -57,7 +57,7 @@ fn main() {\n // START rustc.node50.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "d240b51e222e17ed603bcd308af47d81593ada5b", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -48,8 +48,8 @@ fn main() {\n // START rustc.node22.EraseRegions.after.mir\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         (*_3) = const 23i32;\n@@ -61,8 +61,8 @@ fn main() {\n // START rustc.node31.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n //     }\n //     bb1: {\n@@ -74,8 +74,8 @@ fn main() {\n // START rustc.node60.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _0 = const write_42(_4) -> bb1;\n //     }"}, {"sha": "e1eeb2102d1a2535031c49aa54d1a66702d39426", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f338dba29705e144bad8b2a675284538dd514896/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f338dba29705e144bad8b2a675284538dd514896/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=f338dba29705e144bad8b2a675284538dd514896", "patch": "@@ -36,7 +36,7 @@ fn main() {\n // START rustc.node17.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_5/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_5[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n //         Validate(Release, [_3: bool, _4: *mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n //     }\n@@ -45,7 +45,7 @@ fn main() {\n // START rustc.node46.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}]}