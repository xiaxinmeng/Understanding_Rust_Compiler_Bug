{"sha": "b8b50f0eda08e19e7c96377681f82ac17c76775d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YjUwZjBlZGEwOGUxOWU3Yzk2Mzc3NjgxZjgyYWMxN2M3Njc3NWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-06T00:41:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:02:45Z"}, "message": "Preliminary wasm32 support", "tree": {"sha": "411e10f72395aca9ce8581582f9450681fb384a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411e10f72395aca9ce8581582f9450681fb384a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8b50f0eda08e19e7c96377681f82ac17c76775d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b50f0eda08e19e7c96377681f82ac17c76775d", "html_url": "https://github.com/rust-lang/rust/commit/b8b50f0eda08e19e7c96377681f82ac17c76775d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8b50f0eda08e19e7c96377681f82ac17c76775d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2dfeac6907ab63a3261cfa66c04db239d138433", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dfeac6907ab63a3261cfa66c04db239d138433", "html_url": "https://github.com/rust-lang/rust/commit/b2dfeac6907ab63a3261cfa66c04db239d138433"}], "stats": {"total": 125, "additions": 107, "deletions": 18}, "files": [{"sha": "997bdfbf03ab191af0de9d40c8de297709a3e0b1", "filename": "mk/cfg/wasm32-unknown-emscripten.mk", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -0,0 +1,24 @@\n+# wasm32-unknown-emscripten configuration\n+CC_wasm32-unknown-emscripten=emcc\n+CXX_wasm32-unknown-emscripten=em++\n+CPP_wasm32-unknown-emscripten=$(CPP)\n+AR_wasm32-unknown-emscripten=emar\n+CFG_LIB_NAME_wasm32-unknown-emscripten=lib$(1).so\n+CFG_STATIC_LIB_NAME_wasm32-unknown-emscripten=lib$(1).a\n+CFG_LIB_GLOB_wasm32-unknown-emscripten=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_wasm32-unknown-emscripten=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_wasm32-unknown-emscripten := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_wasm32-unknown-emscripten :=  -g -fPIC -m32 -s BINARYEN=1 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_wasm32-unknown-emscripten := -fno-rtti -s BINARYEN=1 $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_wasm32-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32 -s BINARYEN=1\n+CFG_GCCISH_DEF_FLAG_wasm32-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_wasm32-unknown-emscripten :=\n+CFG_INSTALL_NAME_wasm32-unknown-emscripten =\n+CFG_EXE_SUFFIX_wasm32-unknown-emscripten =\n+CFG_WINDOWSY_wasm32-unknown-emscripten :=\n+CFG_UNIXY_wasm32-unknown-emscripten := 1\n+CFG_LDPATH_wasm32-unknown-emscripten :=\n+CFG_RUN_wasm32-unknown-emscripten=$(2)\n+CFG_RUN_TARG_wasm32-unknown-emscripten=$(call CFG_RUN_wasm32-unknown-emscripten,,$(2))\n+CFG_GNU_TRIPLE_wasm32-unknown-emscripten := wasm32-unknown-emscripten\n+CFG_DISABLE_JEMALLOC_wasm32-unknown-emscripten := 1"}, {"sha": "c839e40535329e9367424394c73427377d3a84ed", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -323,9 +323,9 @@ pub fn krate(build: &Build,\n     if target.contains(\"android\") {\n         build.run(cargo.arg(\"--no-run\"));\n         krate_android(build, compiler, target, mode);\n-    } else if target.contains(\"asmjs\") {\n+    } else if target.contains(\"emscripten\") {\n         build.run(cargo.arg(\"--no-run\"));\n-        krate_asmjs(build, compiler, target, mode);\n+        krate_emscripten(build, compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.args);\n         build.run(&mut cargo);\n@@ -374,10 +374,10 @@ fn krate_android(build: &Build,\n     }\n }\n \n-fn krate_asmjs(build: &Build,\n-                 compiler: &Compiler,\n-                 target: &str,\n-                 mode: Mode) {\n+fn krate_emscripten(build: &Build,\n+                    compiler: &Compiler,\n+                    target: &str,\n+                    mode: Mode) {\n      let mut tests = Vec::new();\n      let out_dir = build.cargo_out(compiler, mode, target);\n      find_tests(&out_dir, target, &mut tests);"}, {"sha": "dacafe771edc2c500264e0d028fcbe6ddfbc5fbd", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -29,7 +29,8 @@\n               target_arch = \"mips\",\n               target_arch = \"powerpc\",\n               target_arch = \"powerpc64\",\n-              target_arch = \"asmjs\")))]\n+              target_arch = \"asmjs\",\n+              target_arch = \"wasm32\")))]\n const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\","}, {"sha": "5bfa77cba7acf73c1bb8dc874527d08a2675fa68", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -139,6 +139,10 @@ const UNWIND_DATA_REG: (i32, i32) = (6, 7); // R6, R7\n #[cfg(target_arch = \"asmjs\")]\n const UNWIND_DATA_REG: (i32, i32) = (0, 2); // EAX, EDX\n \n+// FIXME: Ditto the above\n+#[cfg(target_arch = \"wasm32\")]\n+const UNWIND_DATA_REG: (i32, i32) = (0, 2); // EAX, EDX\n+\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "6e2f7b1bf5313526b7c6adc34c6f4916742b37f9", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -190,7 +190,8 @@ supported_targets! {\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),\n \n     (\"le32-unknown-nacl\", le32_unknown_nacl),\n-    (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten)\n+    (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n+    (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten)\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "412fb868086c51f92cae8b449c14633a4abe3f13", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Result<Target, String> {\n+    let opts = TargetOptions {\n+        linker: \"emcc\".to_string(),\n+        ar: \"emar\".to_string(),\n+\n+        dynamic_linking: false,\n+        executables: true,\n+        // Today emcc emits two files - a .js file to bootstrap and\n+        // possibly interpret the wasm, and a .wasm file\n+        exe_suffix: \".js\".to_string(),\n+        linker_is_gnu: true,\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n+        max_atomic_width: 32,\n+        post_link_args: vec![\"-s\".to_string(), \"BINARYEN=1\".to_string()],\n+        .. Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n+        arch: \"wasm32\".to_string(),\n+        options: opts,\n+    })\n+}"}, {"sha": "0a5b013c79ac21fbdc979244a6a11a98b8a922c7", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -519,6 +519,7 @@ impl FnType {\n             \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, self),\n             \"s390x\" => cabi_s390x::compute_abi_info(ccx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),\n+            \"wasm32\" => cabi_asmjs::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "5da6e5a8b80dc938a6bb48602461dbfbc036fec4", "filename": "src/libstd/env.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -892,7 +892,18 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"pexe\";\n }\n \n-#[cfg(target_os = \"emscripten\")]\n+#[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"emscripten\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \".js\";\n+    pub const EXE_EXTENSION: &'static str = \"js\";\n+}\n+\n+#[cfg(all(target_os = \"emscripten\", target_arch = \"wasm32\"))]\n mod os {\n     pub const FAMILY: &'static str = \"unix\";\n     pub const OS: &'static str = \"emscripten\";\n@@ -969,6 +980,11 @@ mod arch {\n     pub const ARCH: &'static str = \"asmjs\";\n }\n \n+#[cfg(target_arch = \"wasm32\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"wasm32\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "e6a95bc831ffbafdbea5df3a14e5610d2c8cb32f", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -34,7 +34,8 @@ pub use self::arch::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n           target_arch = \"le32\",\n           target_arch = \"powerpc\",\n           target_arch = \"arm\",\n-          target_arch = \"asmjs\"))]\n+          target_arch = \"asmjs\",\n+          target_arch = \"wasm32\"))]\n mod arch {\n     use os::raw::{c_long, c_short, c_uint};\n "}, {"sha": "12dd8e615e8d01875b30a7839aa2d5b6c46e6576", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -1291,15 +1291,15 @@ impl MetricMap {\n ///\n /// This function is a no-op, and does not even read from `dummy`.\n #[cfg(not(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n-              target_arch = \"asmjs\")))]\n+              target_arch = \"asmjs\", target_arch = \"wasm32\")))]\n pub fn black_box<T>(dummy: T) -> T {\n     // we need to \"use\" the argument in some way LLVM can't\n     // introspect.\n     unsafe { asm!(\"\" : : \"r\"(&dummy)) }\n     dummy\n }\n #[cfg(any(all(target_os = \"nacl\", target_arch = \"le32\"),\n-          target_arch = \"asmjs\"))]\n+          target_arch = \"asmjs\", target_arch = \"wasm32\"))]\n #[inline(never)]\n pub fn black_box<T>(dummy: T) -> T {\n     dummy"}, {"sha": "5d69a95da820ce7c2b34bcf5b19b609986701092", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -65,7 +65,7 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(target_arch = \"s390x\")]\n pub const unwinder_private_data_size: usize = 2;\n \n-#[cfg(target_arch = \"asmjs\")]\n+#[cfg(any(target_arch = \"asmjs\", target_arch = \"wasm32\"))]\n pub const unwinder_private_data_size: usize = 20;\n \n #[repr(C)]"}, {"sha": "5885e464b4f14043992970bec8358d68a55ecf03", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -1168,7 +1168,6 @@ actual:\\n\\\n             \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => {\n                 self._arm_exec_compiled_test(env)\n             }\n-\n             _=> {\n                 let aux_dir = self.aux_output_dir_name();\n                 self.compose_and_run(self.make_run_args(),\n@@ -1421,7 +1420,7 @@ actual:\\n\\\n     fn make_exe_name(&self) -> PathBuf {\n         let mut f = self.output_base_name();\n         // FIXME: This is using the host architecture exe suffix, not target!\n-        if self.config.target == \"asmjs-unknown-emscripten\" {\n+        if self.config.target.contains(\"emscripten\") {\n             let mut fname = f.file_name().unwrap().to_os_string();\n             fname.push(\".js\");\n             f.set_file_name(&fname);\n@@ -1439,8 +1438,8 @@ actual:\\n\\\n         let mut args = self.split_maybe_args(&self.config.runtool);\n \n         // If this is emscripten, then run tests under nodejs\n-        if self.config.target == \"asmjs-unknown-emscripten\" {\n-            args.push(\"nodejs\".to_owned());\n+        if self.config.target.contains(\"emscripten\") {\n+            args.push(\"node\".to_owned());\n         }\n \n         let exe_file = self.make_exe_name();"}, {"sha": "cad71c59f0a4aef93ccd10d3d75b1022b0bafdc9", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b50f0eda08e19e7c96377681f82ac17c76775d/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=b8b50f0eda08e19e7c96377681f82ac17c76775d", "patch": "@@ -43,7 +43,8 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[(\"aarch64\", \"aarch\n                                                               (\"sparc\", \"sparc\"),\n                                                               (\"x86_64\", \"x86_64\"),\n                                                               (\"xcore\", \"xcore\"),\n-                                                              (\"asmjs\", \"asmjs\")];\n+                                                              (\"asmjs\", \"asmjs\"),\n+                                                              (\"wasm32\", \"wasm32\")];\n \n pub fn get_os(triple: &str) -> &'static str {\n     for &(triple_os, os) in OS_TABLE {"}]}