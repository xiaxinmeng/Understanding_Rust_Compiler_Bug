{"sha": "0978a9eb99eca9f99889014b232f67ece898aadb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NzhhOWViOTllY2E5Zjk5ODg5MDE0YjIzMmY2N2VjZTg5OGFhZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T10:28:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T10:28:12Z"}, "message": "Auto merge of #83207 - oli-obk:valtree2, r=lcnr\n\nnormalize mir::Constant differently from ty::Const in preparation for valtrees\n\nValtrees are unable to represent many kind of constant values (this is on purpose). For constants that are used at runtime, we do not need a valtree representation and can thus use a different form of evaluation. In order to make this explicit and less fragile, I added a `fold_constant` method to `TypeFolder` and implemented it for normalization. Normalization can now, when it wants to eagerly evaluate a constant, normalize `mir::Constant` directly into a `mir::ConstantKind::Val` instead of relying on the `ty::Const` evaluation.\n\nIn the future we can get rid of the `ty::Const` in there entirely and add our own `Unevaluated` variant to `mir::ConstantKind`. This would allow us to remove the `promoted` field from `ty::ConstKind::Unevaluated`, as promoteds can never occur in the type system.\n\ncc `@rust-lang/wg-const-eval`\n\nr? `@lcnr`", "tree": {"sha": "36c08d4b400121e3df05cf15a222b5f5771dcdfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c08d4b400121e3df05cf15a222b5f5771dcdfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0978a9eb99eca9f99889014b232f67ece898aadb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0978a9eb99eca9f99889014b232f67ece898aadb", "html_url": "https://github.com/rust-lang/rust/commit/0978a9eb99eca9f99889014b232f67ece898aadb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0978a9eb99eca9f99889014b232f67ece898aadb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5662d9343f0696efcc38a1264656737c9f22d427", "url": "https://api.github.com/repos/rust-lang/rust/commits/5662d9343f0696efcc38a1264656737c9f22d427", "html_url": "https://github.com/rust-lang/rust/commit/5662d9343f0696efcc38a1264656737c9f22d427"}, {"sha": "c6676db7aecc217d86dc1a478ca28b61acac87f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6676db7aecc217d86dc1a478ca28b61acac87f4", "html_url": "https://github.com/rust-lang/rust/commit/c6676db7aecc217d86dc1a478ca28b61acac87f4"}], "stats": {"total": 238, "additions": 183, "deletions": 55}, "files": [{"sha": "48b8ee17594e3bd10708b88b8978a2417fb75572", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -1,5 +1,6 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n+use rustc_middle::mir;\n use rustc_middle::ty::fold::{TypeFolder, TypeVisitor};\n use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n@@ -46,6 +47,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n             ct.super_fold_with(self)\n         }\n     }\n+\n+    fn fold_mir_const(&mut self, constant: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        constant.super_fold_with(self)\n+    }\n }\n \n /// The opportunistic region resolver opportunistically resolves regions"}, {"sha": "b2cf1aab112b37bbd4c064a90fcb7633c7d96724", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -2392,7 +2392,8 @@ pub struct Constant<'tcx> {\n     pub literal: ConstantKind<'tcx>,\n }\n \n-#[derive(Clone, Copy, PartialEq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, TyEncodable, TyDecodable, Hash, HashStable, Debug)]\n+#[derive(Lift)]\n pub enum ConstantKind<'tcx> {\n     /// This constant came from the type system\n     Ty(&'tcx ty::Const<'tcx>),\n@@ -2691,7 +2692,13 @@ impl<'tcx> Display for Constant<'tcx> {\n             ty::FnDef(..) => {}\n             _ => write!(fmt, \"const \")?,\n         }\n-        match self.literal {\n+        Display::fmt(&self.literal, fmt)\n+    }\n+}\n+\n+impl<'tcx> Display for ConstantKind<'tcx> {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n+        match *self {\n             ConstantKind::Ty(c) => pretty_print_const(c, fmt, true),\n             ConstantKind::Val(val, ty) => pretty_print_const_value(val, ty, fmt, true),\n         }"}, {"sha": "f3124e5bf424ef41897c62e9bd88aea4fb0c7cf0", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -348,6 +348,11 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n+    #[inline(always)]\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        folder.fold_mir_const(self)\n+    }\n+\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         match self {\n             ConstantKind::Ty(c) => ConstantKind::Ty(c.fold_with(folder)),"}, {"sha": "bf39b1da8f0a065417a47f6df6fdc1e2616e9a68", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -1486,6 +1486,13 @@ rustc_queries! {\n         desc { \"normalizing `{}`\", goal.value }\n     }\n \n+    /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n+    query normalize_mir_const_after_erasing_regions(\n+        goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n+    ) -> mir::ConstantKind<'tcx> {\n+        desc { \"normalizing `{}`\", goal.value }\n+    }\n+\n     query implied_outlives_bounds(\n         goal: CanonicalTyGoal<'tcx>\n     ) -> Result<"}, {"sha": "759d1a017aa2a0cf5e192cce45405ff8e502a862", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -1,3 +1,4 @@\n+use crate::mir;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n@@ -65,4 +66,8 @@ impl TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n             _ => self.tcx.lifetimes.re_erased,\n         }\n     }\n+\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        c.super_fold_with(self)\n+    }\n }"}, {"sha": "13f2d83ddf3ba5cdddd1e9faf9afe9e3616f492b", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -30,6 +30,7 @@\n //!\n //! These methods return true to indicate that the visitor has found what it is\n //! looking for, and does not need to visit anything else.\n+use crate::mir;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -180,6 +181,10 @@ pub trait TypeFolder<'tcx>: Sized {\n     fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n         c.super_fold_with(self)\n     }\n+\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n+    }\n }\n \n pub trait TypeVisitor<'tcx>: Sized {"}, {"sha": "41d953216e0dd1425d2b59d465c4720c2e57ebdf", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -483,6 +483,7 @@ impl<'tcx> Instance<'tcx> {\n         if let Some(substs) = self.substs_for_mir_body() { v.subst(tcx, substs) } else { *v }\n     }\n \n+    #[inline(always)]\n     pub fn subst_mir_and_normalize_erasing_regions<T>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "a4f736654af44f5438c3bcc12fb6cb5b15b3f803", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -7,6 +7,7 @@\n //! `normalize_generic_arg_after_erasing_regions` query for each type\n //! or constant found within. (This underlying query is what is cached.)\n \n+use crate::mir;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n@@ -101,4 +102,10 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n         let arg = self.param_env.and(c.into());\n         self.tcx.normalize_generic_arg_after_erasing_regions(arg).expect_const()\n     }\n+\n+    #[inline]\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        let arg = self.param_env.and(c);\n+        self.tcx.normalize_mir_const_after_erasing_regions(arg)\n+    }\n }"}, {"sha": "c84ca61122fe2faf19a12a76da17549fc04ec344", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -1,5 +1,6 @@\n // Type substitutions.\n \n+use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n@@ -506,6 +507,11 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n             c.super_fold_with(self)\n         }\n     }\n+\n+    #[inline]\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        c.super_fold_with(self)\n+    }\n }\n \n impl<'a, 'tcx> SubstFolder<'a, 'tcx> {"}, {"sha": "3f14efc920f0edb3ad9e48033e696b0ae07e96d3", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -110,7 +110,7 @@ fn const_to_valtree_inner<'tcx>(\n \n             let variant = ecx.read_discriminant(&place.into()).unwrap().1;\n \n-            branches(def.variants[variant].fields.len(), Some(variant))\n+            branches(def.variants[variant].fields.len(), def.is_enum().then_some(variant))\n         }\n \n         ty::Never"}, {"sha": "2d83d6cfbdc5ed9c2249655b57f4aaaff8a7014f", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -524,6 +524,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    #[inline(always)]\n     pub fn layout_of_local(\n         &self,\n         frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,"}, {"sha": "d74ef66a4b236d740170d2d95cb946375be99eed", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -171,8 +171,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 };\n                 let val =\n                     self.tcx.const_eval_global_id(self.param_env, gid, Some(self.tcx.span))?;\n-                let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n-                let val = self.const_to_op(&const_, None)?;\n+                let val = self.const_val_to_op(val, ty, Some(dest.layout))?;\n                 self.copy_op(&val, dest)?;\n             }\n "}, {"sha": "50a205676fe0c2faaa701aec1288a06777bbf652", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -570,7 +570,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         match val {\n             mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),\n-            mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, None),\n+            mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),\n         }\n     }\n "}, {"sha": "fd5dbfb186efdf62fe758f9e890c064e6c31f55f", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -184,7 +184,6 @@ use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{AllocId, ConstValue};\n use rustc_middle::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n@@ -193,6 +192,7 @@ use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use smallvec::SmallVec;\n@@ -638,6 +638,35 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_rvalue(rvalue, location);\n     }\n \n+    /// This does not walk the constant, as it has been handled entirely here and trying\n+    /// to walk it would attempt to evaluate the `ty::Const` inside, which doesn't necessarily\n+    /// work, as some constants cannot be represented in the type system.\n+    fn visit_constant(&mut self, constant: &mir::Constant<'tcx>, location: Location) {\n+        let literal = self.monomorphize(constant.literal);\n+        let val = match literal {\n+            mir::ConstantKind::Val(val, _) => val,\n+            mir::ConstantKind::Ty(ct) => match ct.val {\n+                ty::ConstKind::Value(val) => val,\n+                ty::ConstKind::Unevaluated(ct) => {\n+                    let param_env = ty::ParamEnv::reveal_all();\n+                    match self.tcx.const_eval_resolve(param_env, ct, None) {\n+                        // The `monomorphize` call should have evaluated that constant already.\n+                        Ok(val) => val,\n+                        Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => return,\n+                        Err(ErrorHandled::TooGeneric) => span_bug!(\n+                            self.body.source_info(location).span,\n+                            \"collection encountered polymorphic constant: {:?}\",\n+                            literal\n+                        ),\n+                    }\n+                }\n+                _ => return,\n+            },\n+        };\n+        collect_const_value(self.tcx, val, self.output);\n+        self.visit_ty(literal.ty(), TyContext::Location(location));\n+    }\n+\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n         debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n \n@@ -648,7 +677,13 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n             ty::ConstKind::Unevaluated(unevaluated) => {\n                 match self.tcx.const_eval_resolve(param_env, unevaluated, None) {\n-                    Ok(val) => collect_const_value(self.tcx, val, self.output),\n+                    // The `monomorphize` call should have evaluated that constant already.\n+                    Ok(val) => span_bug!(\n+                        self.body.source_info(location).span,\n+                        \"collection encountered the unevaluated constant {} which evaluated to {:?}\",\n+                        substituted_constant,\n+                        val\n+                    ),\n                     Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.body.source_info(location).span,"}, {"sha": "3b88aec16b26a638fabc287466c3d7fcf78880e2", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -452,7 +452,11 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n                 match literal {\n                     ConstantKind::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n                     ConstantKind::Val(val, ty) => {\n-                        self.push(&format!(\"+ literal: {:?}, {}\", val, ty))\n+                        // To keep the diffs small, we render this almost like we render ty::Const\n+                        self.push(&format!(\n+                            \"+ literal: Const {{ ty: {}, val: Value({:?}) }}\",\n+                            ty, val\n+                        ))\n                     }\n                 }\n             }\n@@ -465,7 +469,21 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n         if use_verbose(ty) {\n             self.push(\"ty::Const\");\n             self.push(&format!(\"+ ty: {:?}\", ty));\n-            self.push(&format!(\"+ val: {:?}\", val));\n+            let val = match val {\n+                ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n+                ty::ConstKind::Infer(infer) => format!(\"Infer({:?})\", infer),\n+                ty::ConstKind::Bound(idx, var) => format!(\"Bound({:?}, {:?})\", idx, var),\n+                ty::ConstKind::Placeholder(ph) => format!(\"PlaceHolder({:?})\", ph),\n+                ty::ConstKind::Unevaluated(uv) => format!(\n+                    \"Unevaluated({}, {:?}, {:?})\",\n+                    self.tcx.def_path_str(uv.def.did),\n+                    uv.substs,\n+                    uv.promoted\n+                ),\n+                ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n+                ty::ConstKind::Error(_) => format!(\"Error\"),\n+            };\n+            self.push(&format!(\"+ val: {}\", val));\n         }\n     }\n "}, {"sha": "c0624c805a685f7162d6f3cfc629eb4b4fcdd1eb", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -246,6 +246,18 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             })\n     }\n \n+    fn field_pats(\n+        &self,\n+        vals: impl Iterator<Item = &'tcx ty::Const<'tcx>>,\n+    ) -> Result<Vec<FieldPat<'tcx>>, FallbackToConstRef> {\n+        vals.enumerate()\n+            .map(|(idx, val)| {\n+                let field = Field::new(idx);\n+                Ok(FieldPat { field, pattern: self.recur(val, false)? })\n+            })\n+            .collect()\n+    }\n+\n     // Recursive helper for `to_pat`; invoke that (instead of calling this directly).\n     fn recur(\n         &self,\n@@ -257,16 +269,6 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         let tcx = self.tcx();\n         let param_env = self.param_env;\n \n-        let field_pats = |vals: &[&'tcx ty::Const<'tcx>]| -> Result<_, _> {\n-            vals.iter()\n-                .enumerate()\n-                .map(|(idx, val)| {\n-                    let field = Field::new(idx);\n-                    Ok(FieldPat { field, pattern: self.recur(val, false)? })\n-                })\n-                .collect()\n-        };\n-\n         let kind = match cv.ty.kind() {\n             ty::Float(_) => {\n                 tcx.struct_span_lint_hir(\n@@ -361,12 +363,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     variant_index: destructured\n                         .variant\n                         .expect(\"destructed const of adt without variant id\"),\n-                    subpatterns: field_pats(destructured.fields)?,\n+                    subpatterns: self.field_pats(destructured.fields.iter().copied())?,\n                 }\n             }\n             ty::Tuple(_) | ty::Adt(_, _) => {\n                 let destructured = tcx.destructure_const(param_env.and(cv));\n-                PatKind::Leaf { subpatterns: field_pats(destructured.fields)? }\n+                PatKind::Leaf { subpatterns: self.field_pats(destructured.fields.iter().copied())? }\n             }\n             ty::Array(..) => PatKind::Array {\n                 prefix: tcx"}, {"sha": "1fdb37398f996676491645e7531305919f366caf", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -255,6 +255,15 @@ impl<'tcx> Key for GenericArg<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for mir::ConstantKind<'tcx> {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}, {"sha": "eb7ea8715c29780aee89618bc91dad1a6de66c3b", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -10,6 +10,7 @@ use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n+use rustc_middle::mir;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -214,4 +215,8 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         let constant = constant.super_fold_with(self);\n         constant.eval(self.infcx.tcx, self.param_env)\n     }\n+\n+    fn fold_mir_const(&mut self, constant: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+        constant.super_fold_with(self)\n+    }\n }"}, {"sha": "5ad0684fe6ee219a90a63816dfe73cfcbafeea3e", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -1,24 +1,35 @@\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt, TypeFoldable};\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use rustc_trait_selection::traits::{Normalized, ObligationCause};\n use std::sync::atomic::Ordering;\n \n crate fn provide(p: &mut Providers) {\n-    *p = Providers { normalize_generic_arg_after_erasing_regions, ..*p };\n+    *p = Providers {\n+        normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n+            debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n+\n+            tcx.sess\n+                .perf_stats\n+                .normalize_generic_arg_after_erasing_regions\n+                .fetch_add(1, Ordering::Relaxed);\n+            normalize_after_erasing_regions(tcx, goal)\n+        },\n+        normalize_mir_const_after_erasing_regions: |tcx, goal| {\n+            normalize_after_erasing_regions(tcx, goal)\n+        },\n+        ..*p\n+    };\n }\n \n-fn normalize_generic_arg_after_erasing_regions<'tcx>(\n+#[instrument(level = \"debug\", skip(tcx))]\n+fn normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Copy>(\n     tcx: TyCtxt<'tcx>,\n-    goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>,\n-) -> GenericArg<'tcx> {\n-    debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n-\n+    goal: ParamEnvAnd<'tcx, T>,\n+) -> T {\n     let ParamEnvAnd { param_env, value } = goal;\n-    tcx.sess.perf_stats.normalize_generic_arg_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n     tcx.infer_ctxt().enter(|infcx| {\n         let cause = ObligationCause::dummy();\n         match infcx.at(&cause, param_env).normalize(value) {"}, {"sha": "2566d745ecd060d128de11ea32f6fa3335caf9e0", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -22,7 +22,7 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc0))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n++                                          // + val: Unevaluated(BAR, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }"}, {"sha": "093e228a0ce44a57fc8d56f5441d2e16b8533edb", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -24,7 +24,7 @@\n -                                          // + ty: *const i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n++                                          // + val: Unevaluated(FOO, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }"}, {"sha": "0517e7fac40e26eb6a7dd42991b30f8b3c222be6", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -28,7 +28,7 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "0517e7fac40e26eb6a7dd42991b30f8b3c222be6", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -28,7 +28,7 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "28c80b346e76048b60ddf5a83a2dc34047b065a4", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -19,7 +19,7 @@\n           _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, substs: [], promoted: None })\n+                                           // + val: Unevaluated(FOO, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }"}, {"sha": "ae77443e019d5fff416415cb8e7868133565a514", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -14,7 +14,7 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "402a28f3f9f40d5241ea0ca7d9d6b69fb386ea0c", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -17,7 +17,7 @@\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +                                          // ty::Const\n +                                          // + ty: &i32\n-+                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n++                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "b97d7d1be1596f381dbaab32ada65822a81df045", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -14,7 +14,7 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n                                            // + ty: &(i32, i32)\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "48ede27112c9243df0935409ada9f6e99ce275d4", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -17,7 +17,7 @@\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // ty::Const\n +                                          // + ty: &(i32, i32)\n-+                                          // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n++                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "27791852d6dac9fee00a810914597fc43663c732", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -21,7 +21,7 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "27791852d6dac9fee00a810914597fc43663c732", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -21,7 +21,7 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "1aabee83be6842dbb651797a2c773b8cf98870a3", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -35,7 +35,7 @@ fn bar() -> bool {\n         _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) })\n+                                         // + val: Unevaluated(bar, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n@@ -49,7 +49,7 @@ fn bar() -> bool {\n         _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                         // + val: Unevaluated(bar, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "95a8ef997fa49f405698ba7e439644fa2badb30f", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -63,7 +63,7 @@\n           _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "95a8ef997fa49f405698ba7e439644fa2badb30f", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -63,7 +63,7 @@\n           _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "261eb3b27eafd1982e3db0969577f20173cb0ee9", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -84,7 +84,7 @@\n           _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "261eb3b27eafd1982e3db0969577f20173cb0ee9", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -84,7 +84,7 @@\n           _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "a37df4da9ae40561396268af1f3c55597ab46f3a", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -47,7 +47,7 @@\n           _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) })\n+                                           // + val: Unevaluated(discriminant, [T], Some(promoted[2]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:70:42: 70:44\n                                            // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n@@ -71,7 +71,7 @@\n           _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n                                            // ty::Const\n                                            // + ty: &()\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) })\n+                                           // + val: Unevaluated(discriminant, [T], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:71:42: 71:45\n                                            // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n@@ -95,7 +95,7 @@\n           _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n                                            // ty::Const\n                                            // + ty: &E\n-                                           // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) })\n+                                           // + val: Unevaluated(discriminant, [T], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:72:42: 72:47\n                                            // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }"}, {"sha": "1921b935941294daff8fefbd496a55ef029f73f7", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -54,7 +54,7 @@ fn full_tested_match() -> () {\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: &std::option::Option<i32>\n-                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                         // + val: Unevaluated(full_tested_match, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n                                          // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "894f64c77672d76bf2ef4cc192b31fd479694d58", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -149,7 +149,7 @@ fn main() -> () {\n         _27 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) })\n+                                         // + val: Unevaluated(main, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }"}, {"sha": "bd517e568eae91bc20e08fb3b045394a7ddb2c84", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -10,7 +10,7 @@ const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n \n fn main() {\n     println!(\"{}\", FOO);\n-    //~^ ERROR\n+    //~^ ERROR evaluation of constant value failed\n     //~| WARN erroneous constant used [const_err]\n     //~| WARN this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "e6fecef9fb3b23fb238d753556b2463a9854201d", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -20,7 +20,7 @@ error[E0080]: evaluation of constant value failed\n LL |     let x: &'static i32 = &X;\n    |                            ^ referenced constant has errors\n query stack during panic:\n-#0 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n+#0 [normalize_mir_const_after_erasing_regions] normalizing `main::promoted[1]`\n #1 [optimized_mir] optimizing MIR for `main`\n #2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n end of query stack"}, {"sha": "a88e2197048d54897316b3d248b095ca75405e7f", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0978a9eb99eca9f99889014b232f67ece898aadb/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=0978a9eb99eca9f99889014b232f67ece898aadb", "patch": "@@ -25,5 +25,5 @@ impl Foo for u16 {\n \n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-    //~^ ERROR evaluation of constant value failed [E0080]\n+    //~^ ERROR evaluation of constant value failed\n }"}]}