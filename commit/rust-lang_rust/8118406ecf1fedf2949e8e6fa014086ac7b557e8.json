{"sha": "8118406ecf1fedf2949e8e6fa014086ac7b557e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTg0MDZlY2YxZmVkZjI5NDllOGU2ZmEwMTQwODZhYzdiNTU3ZTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-22T16:20:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-26T21:51:41Z"}, "message": "syntax: Tweak parsing bounds on generics paths\n\nThe previous syntax was `Foo:Bound<trait-parameters>`, but this is a little\nambiguous because it was being parsed as `Foo: (Bound<trait-parameters)` rather\nthan `Foo: (Bound) <trait-parameters>`\n\nThis commit changes the syntax to `Foo<trait-parameters>: Bound` in order to be\nclear where the trait parameters are going.\n\nCloses #9265", "tree": {"sha": "9424dc0d698a79d5b3c8d99b5972f731e789fabc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9424dc0d698a79d5b3c8d99b5972f731e789fabc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8118406ecf1fedf2949e8e6fa014086ac7b557e8", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8118406ecf1fedf2949e8e6fa014086ac7b557e8", "html_url": "https://github.com/rust-lang/rust/commit/8118406ecf1fedf2949e8e6fa014086ac7b557e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8118406ecf1fedf2949e8e6fa014086ac7b557e8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e233a43f5a0e14ceb322b955b16c8967adb2f4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e233a43f5a0e14ceb322b955b16c8967adb2f4a8", "html_url": "https://github.com/rust-lang/rust/commit/e233a43f5a0e14ceb322b955b16c8967adb2f4a8"}], "stats": {"total": 132, "additions": 59, "deletions": 73}, "files": [{"sha": "57b2c21e03b8d610a159197ffb4599a4067dd31e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 55, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8118406ecf1fedf2949e8e6fa014086ac7b557e8", "patch": "@@ -112,13 +112,6 @@ pub enum PathParsingMode {\n     LifetimeAndTypesAndBounds,\n }\n \n-/// A pair of a path segment and group of type parameter bounds. (See `ast.rs`\n-/// for the definition of a path segment.)\n-struct PathSegmentAndBoundSet {\n-    segment: ast::PathSegment,\n-    bound_set: Option<OwnedSlice<TyParamBound>>,\n-}\n-\n /// A path paired with optional type bounds.\n pub struct PathAndBounds {\n     path: ast::Path,\n@@ -1515,24 +1508,14 @@ impl<'a> Parser<'a> {\n             // First, parse an identifier.\n             let identifier = self.parse_ident();\n \n-            // Next, parse a colon and bounded type parameters, if applicable.\n-            let bound_set = if mode == LifetimeAndTypesAndBounds {\n-                self.parse_optional_ty_param_bounds()\n-            } else {\n-                None\n-            };\n-\n             // Parse the '::' before type parameters if it's required. If\n             // it is required and wasn't present, then we're done.\n             if mode == LifetimeAndTypesWithColons &&\n                     !self.eat(&token::MOD_SEP) {\n-                segments.push(PathSegmentAndBoundSet {\n-                    segment: ast::PathSegment {\n-                        identifier: identifier,\n-                        lifetimes: Vec::new(),\n-                        types: OwnedSlice::empty(),\n-                    },\n-                    bound_set: bound_set\n+                segments.push(ast::PathSegment {\n+                    identifier: identifier,\n+                    lifetimes: Vec::new(),\n+                    types: OwnedSlice::empty(),\n                 });\n                 break\n             }\n@@ -1549,13 +1532,10 @@ impl<'a> Parser<'a> {\n             };\n \n             // Assemble and push the result.\n-            segments.push(PathSegmentAndBoundSet {\n-                segment: ast::PathSegment {\n-                    identifier: identifier,\n-                    lifetimes: lifetimes,\n-                    types: types,\n-                },\n-                bound_set: bound_set\n+            segments.push(ast::PathSegment {\n+                identifier: identifier,\n+                lifetimes: lifetimes,\n+                types: types,\n             });\n \n             // We're done if we don't see a '::', unless the mode required\n@@ -1568,42 +1548,25 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n+        // Next, parse a colon and bounded type parameters, if applicable.\n+        let bounds = if mode == LifetimeAndTypesAndBounds {\n+            self.parse_optional_ty_param_bounds()\n+        } else {\n+            None\n+        };\n+\n         // Assemble the span.\n         let span = mk_sp(lo, self.last_span.hi);\n \n-        // Assemble the path segments.\n-        let mut path_segments = Vec::new();\n-        let mut bounds = None;\n-        let last_segment_index = segments.len() - 1;\n-        for (i, segment_and_bounds) in segments.move_iter().enumerate() {\n-            let PathSegmentAndBoundSet {\n-                segment: segment,\n-                bound_set: bound_set\n-            } = segment_and_bounds;\n-            path_segments.push(segment);\n-\n-            if bound_set.is_some() {\n-                if i != last_segment_index {\n-                    self.span_err(span,\n-                                  \"type parameter bounds are allowed only \\\n-                                   before the last segment in a path\")\n-                }\n-\n-                bounds = bound_set\n-            }\n-        }\n-\n         // Assemble the result.\n-        let path_and_bounds = PathAndBounds {\n+        PathAndBounds {\n             path: ast::Path {\n                 span: span,\n                 global: is_global,\n-                segments: path_segments,\n+                segments: segments,\n             },\n             bounds: bounds,\n-        };\n-\n-        path_and_bounds\n+        }\n     }\n \n     /// parses 0 or 1 lifetime"}, {"sha": "655cde3cbed87c2a28ac607fcd7a47318afba9d4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8118406ecf1fedf2949e8e6fa014086ac7b557e8", "patch": "@@ -1525,7 +1525,7 @@ impl<'a> State<'a> {\n         }\n \n         let mut first = true;\n-        for (i, segment) in path.segments.iter().enumerate() {\n+        for segment in path.segments.iter() {\n             if first {\n                 first = false\n             } else {\n@@ -1534,14 +1534,6 @@ impl<'a> State<'a> {\n \n             try!(self.print_ident(segment.identifier));\n \n-            // If this is the last segment, print the bounds.\n-            if i == path.segments.len() - 1 {\n-                match *opt_bounds {\n-                    None => {}\n-                    Some(ref bounds) => try!(self.print_bounds(bounds, true)),\n-                }\n-            }\n-\n             if !segment.lifetimes.is_empty() || !segment.types.is_empty() {\n                 if colons_before_params {\n                     try!(word(&mut self.s, \"::\"))\n@@ -1570,7 +1562,11 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \">\"))\n             }\n         }\n-        Ok(())\n+\n+        match *opt_bounds {\n+            None => Ok(()),\n+            Some(ref bounds) => self.print_bounds(bounds, true),\n+        }\n     }\n \n     fn print_path(&mut self, path: &ast::Path,"}, {"sha": "e2005cbae918c56faf5d028ec5613150b8da4071", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=8118406ecf1fedf2949e8e6fa014086ac7b557e8", "patch": "@@ -14,8 +14,8 @@ impl<A:Clone> Repeat<A> for A {\n     fn get(&self) -> A { self.clone() }\n }\n \n-fn repeater<A:Clone>(v: A) -> ~Repeat:<A> {\n-    ~v as ~Repeat:<A> // No\n+fn repeater<A:Clone>(v: A) -> ~Repeat<A>: {\n+    ~v as ~Repeat<A>: // No\n }\n \n fn main() {"}, {"sha": "2c71d791cd48f6ebc6ea965b45b031622db448af", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=8118406ecf1fedf2949e8e6fa014086ac7b557e8", "patch": "@@ -27,11 +27,11 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n     }\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> ~Invokable:<A> {\n+fn f<A:Clone + 'static>(a: A, b: u16) -> ~Invokable<A>: {\n     ~Invoker {\n         a: a,\n         b: b,\n-    } as ~Invokable:<A>\n+    } as ~Invokable<A>:\n }\n \n pub fn main() {"}, {"sha": "c57b6fdf38495b06563970c78f4576057f21e36c", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=8118406ecf1fedf2949e8e6fa014086ac7b557e8", "patch": "@@ -31,11 +31,11 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n     }\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> ~Invokable:<A> {\n+fn f<A:Clone + 'static>(a: A, b: u16) -> ~Invokable<A>: {\n     ~Invoker {\n         a: a,\n         b: b,\n-    } as ~Invokable:<A>\n+    } as ~Invokable<A>:\n }\n \n pub fn main() {"}, {"sha": "e4a7e7af14f7fbcdce564611e0f7711127aff889", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=8118406ecf1fedf2949e8e6fa014086ac7b557e8", "patch": "@@ -16,9 +16,9 @@ impl<A:Clone + 'static> repeat<A> for ~A {\n     }\n }\n \n-fn repeater<A:Clone + 'static>(v: ~A) -> ~repeat:<A> {\n+fn repeater<A:Clone + 'static>(v: ~A) -> ~repeat<A>: {\n     // Note: owned kind is not necessary as A appears in the trait type\n-    ~v as ~repeat:<A> // No\n+    ~v as ~repeat<A>: // No\n }\n \n pub fn main() {"}, {"sha": "6200d04c802884714337904b026778ff0e407735", "filename": "src/test/run-pass/parameterized-trait-with-bounds.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8118406ecf1fedf2949e8e6fa014086ac7b557e8/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs?ref=8118406ecf1fedf2949e8e6fa014086ac7b557e8", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(dead_code)];\n+\n+trait A<T> {}\n+trait B<T, U> {}\n+trait C<'a, U> {}\n+\n+mod foo {\n+    pub trait D<'a, T> {}\n+}\n+\n+fn foo1<T>(_: &A<T>: Send) {}\n+fn foo2<T>(_: ~A<T>: Send + Share) {}\n+fn foo3<T>(_: ~B<int, uint>: 'static) {}\n+fn foo4<'a, T>(_: ~C<'a, T>: 'static + Send) {}\n+fn foo5<'a, T>(_: ~foo::D<'a, T>: 'static + Send) {}\n+\n+pub fn main() {}"}]}