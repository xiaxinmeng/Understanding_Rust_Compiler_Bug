{"sha": "c99b2b932f1da9b1746387d8968476240dadf204", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OWIyYjkzMmYxZGE5YjE3NDYzODdkODk2ODQ3NjI0MGRhZGYyMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-13T09:14:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-13T09:14:24Z"}, "message": "auto merge of #7866 : sstewartgallus/rust/clean, r=cmr\n\nMostly I did simple transformations from imperative style loops to\r\nmore functional iterator based transformations.", "tree": {"sha": "87d7763db67d59caf7b4a1ee3af280a60a27d920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87d7763db67d59caf7b4a1ee3af280a60a27d920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c99b2b932f1da9b1746387d8968476240dadf204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c99b2b932f1da9b1746387d8968476240dadf204", "html_url": "https://github.com/rust-lang/rust/commit/c99b2b932f1da9b1746387d8968476240dadf204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c99b2b932f1da9b1746387d8968476240dadf204/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4601ea65f8f16dbbe47c8e20ae66677e30dd1521", "url": "https://api.github.com/repos/rust-lang/rust/commits/4601ea65f8f16dbbe47c8e20ae66677e30dd1521", "html_url": "https://github.com/rust-lang/rust/commit/4601ea65f8f16dbbe47c8e20ae66677e30dd1521"}, {"sha": "dcecc6693d12b9071b28673d585ac08bc482d326", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcecc6693d12b9071b28673d585ac08bc482d326", "html_url": "https://github.com/rust-lang/rust/commit/dcecc6693d12b9071b28673d585ac08bc482d326"}], "stats": {"total": 151, "additions": 77, "deletions": 74}, "files": [{"sha": "5368f1267722ce7035a2ffd519b34606d155b164", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c99b2b932f1da9b1746387d8968476240dadf204/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99b2b932f1da9b1746387d8968476240dadf204/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=c99b2b932f1da9b1746387d8968476240dadf204", "patch": "@@ -52,18 +52,19 @@ impl PkgSrc {\n         use conditions::nonexistent_package::cond;\n \n         debug!(\"Pushing onto root: %s | %s\", self.id.path.to_str(), self.root.to_str());\n-        let dir;\n+\n         let dirs = pkgid_src_in_workspace(&self.id, &self.root);\n         debug!(\"Checking dirs: %?\", dirs);\n         let path = dirs.iter().find(|&d| os::path_exists(d));\n-        match path {\n-            Some(d) => dir = (*d).clone(),\n-            None => dir = match self.fetch_git() {\n+\n+        let dir = match path {\n+            Some(d) => (*d).clone(),\n+            None => match self.fetch_git() {\n+                Some(d) => d,\n                 None => cond.raise((self.id.clone(), ~\"supplied path for package dir does not \\\n-                                      exist, and couldn't interpret it as a URL fragment\")),\n-                Some(d) => d\n+                                      exist, and couldn't interpret it as a URL fragment\"))\n             }\n-        }\n+        };\n         if !os::path_is_dir(&dir) {\n             cond.raise((self.id.clone(), ~\"supplied path for package dir is a \\\n                                         non-directory\"));\n@@ -145,26 +146,26 @@ impl PkgSrc {\n         let prefix = dir.components.len();\n         debug!(\"Matching against %?\", self.id.short_name);\n         do os::walk_dir(&dir) |pth| {\n-            match pth.filename() {\n-                Some(~\"lib.rs\") => PkgSrc::push_crate(&mut self.libs,\n-                                                      prefix,\n-                                                      pth),\n-                Some(~\"main.rs\") => PkgSrc::push_crate(&mut self.mains,\n-                                                       prefix,\n-                                                       pth),\n-                Some(~\"test.rs\") => PkgSrc::push_crate(&mut self.tests,\n-                                                       prefix,\n-                                                       pth),\n-                Some(~\"bench.rs\") => PkgSrc::push_crate(&mut self.benchs,\n-                                                        prefix,\n-                                                        pth),\n-                _ => ()\n+            let maybe_known_crate_set = match pth.filename() {\n+                Some(filename) => match filename {\n+                    ~\"lib.rs\" => Some(&mut self.libs),\n+                    ~\"main.rs\" => Some(&mut self.mains),\n+                    ~\"test.rs\" => Some(&mut self.tests),\n+                    ~\"bench.rs\" => Some(&mut self.benchs),\n+                    _ => None\n+                },\n+                _ => None\n+            };\n+\n+            match maybe_known_crate_set {\n+                Some(crate_set) => PkgSrc::push_crate(crate_set, prefix, pth),\n+                None => ()\n             }\n             true\n         };\n \n-        if self.libs.is_empty() && self.mains.is_empty()\n-            && self.tests.is_empty() && self.benchs.is_empty() {\n+        let crate_sets = [&self.libs, &self.mains, &self.tests, &self.benchs];\n+        if crate_sets.iter().all(|crate_set| crate_set.is_empty()) {\n \n             note(\"Couldn't infer any crates to build.\\n\\\n                          Try naming a crate `main.rs`, `lib.rs`, \\"}, {"sha": "0232b6cb1051fa3da7ddb549829196f3bc96fd3b", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c99b2b932f1da9b1746387d8968476240dadf204/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99b2b932f1da9b1746387d8968476240dadf204/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=c99b2b932f1da9b1746387d8968476240dadf204", "patch": "@@ -19,7 +19,6 @@ use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n use std::os::mkdir_recursive;\n use std::os;\n use messages::*;\n-use package_id::*;\n \n pub fn default_workspace() -> Path {\n     let p = rust_path();\n@@ -51,35 +50,34 @@ pub fn make_dir_rwx(p: &Path) -> bool { os::make_dir(p, U_RWX) }\n /// pkgid's short name\n pub fn workspace_contains_package_id(pkgid: &PkgId, workspace: &Path) -> bool {\n     let src_dir = workspace.push(\"src\");\n+\n     let mut found = false;\n     do os::walk_dir(&src_dir) |p| {\n         debug!(\"=> p = %s\", p.to_str());\n-        if os::path_is_dir(p) {\n+\n+        let was_found = os::path_is_dir(p) && {\n             debug!(\"p = %s, path = %s [%s]\", p.to_str(), pkgid.path.to_str(),\n-            src_dir.push_rel(&pkgid.path).to_str());\n+                   src_dir.push_rel(&pkgid.path).to_str());\n \n-            if *p == src_dir.push_rel(&pkgid.path) {\n-                found = true;\n-            }\n-            else {\n+            *p == src_dir.push_rel(&pkgid.path) || {\n                 let pf = p.filename();\n-                for pf in pf.iter() {\n-                    let f_ = (*pf).clone();\n-                    let g = f_.to_str();\n+                do pf.iter().any |pf| {\n+                    let g = pf.to_str();\n                     match split_version_general(g, '-') {\n+                        None => false,\n                         Some((ref might_match, ref vers)) => {\n                             debug!(\"might_match = %s, vers = %s\", *might_match,\n-                               vers.to_str());\n-                            if *might_match == pkgid.short_name\n-                                 && (*vers == pkgid.version || pkgid.version == NoVersion)\n-                            {\n-                                  found = true;\n-                            }\n+                                   vers.to_str());\n+                            *might_match == pkgid.short_name\n+                                && (pkgid.version == *vers || pkgid.version == NoVersion)\n                         }\n-                        None => ()\n-                     }\n+                    }\n                 }\n             }\n+        };\n+\n+        if was_found {\n+            found = true\n         }\n         true\n     };\n@@ -102,12 +100,9 @@ pub fn pkgid_src_in_workspace(pkgid: &PkgId, workspace: &Path) -> ~[Path] {\n /// Returns a src for pkgid that does exist -- None if none of them do\n pub fn first_pkgid_src_in_workspace(pkgid: &PkgId, workspace: &Path) -> Option<Path> {\n     let rs = pkgid_src_in_workspace(pkgid, workspace);\n-    for p in rs.iter() {\n-        if os::path_exists(p) {\n-            return Some((*p).clone());\n-        }\n-    }\n-    None\n+    do rs.iter().find |&p| {\n+        os::path_exists(p)\n+    }.map(|p| (**p).clone())\n }\n \n /// Figure out what the executable name for <pkgid> in <workspace>'s build\n@@ -195,22 +190,31 @@ pub fn library_in_workspace(path: &Path, short_name: &str, where: Target,\n \n     debug!(\"lib_prefix = %s and lib_filetype = %s\", lib_prefix, lib_filetype);\n \n-    let mut result_filename = None;\n-    for p in dir_contents.iter() {\n-        let mut which = 0;\n-        let mut hash = None;\n-        let p_path = Path((*p).clone());\n-        let extension = p_path.filetype();\n+    // Find a filename that matches the pattern:\n+    // (lib_prefix)-hash-(version)(lib_suffix)\n+    let paths = do dir_contents.iter().map |p| {\n+        Path((*p).clone())\n+    };\n+\n+    let mut libraries = do paths.filter |p| {\n+        let extension = p.filetype();\n         debug!(\"p = %s, p's extension is %?\", p.to_str(), extension);\n         match extension {\n-            Some(ref s) if lib_filetype == *s => (),\n-            _ => loop\n+            None => false,\n+            Some(ref s) => lib_filetype == *s\n         }\n+    };\n+\n+    let mut result_filename = None;\n+    for p_path in libraries {\n         // Find a filename that matches the pattern: (lib_prefix)-hash-(version)(lib_suffix)\n         // and remember what the hash was\n         let f_name = match p_path.filename() {\n             Some(s) => s, None => loop\n         };\n+\n+        let mut hash = None;\n+        let mut which = 0;\n         for piece in f_name.split_iter('-') {\n             debug!(\"a piece = %s\", piece);\n             if which == 0 && piece != lib_prefix {\n@@ -229,26 +233,27 @@ pub fn library_in_workspace(path: &Path, short_name: &str, where: Target,\n                 break;\n             }\n         }\n+\n         if hash.is_some() {\n             result_filename = Some(p_path);\n             break;\n         }\n     }\n \n+    if result_filename.is_none() {\n+        warn(fmt!(\"library_in_workspace didn't find a library in %s for %s\",\n+                  dir_to_search.to_str(), short_name));\n+    }\n+\n     // Return the filename that matches, which we now know exists\n     // (if result_filename != None)\n-    match result_filename {\n-        None => {\n-            warn(fmt!(\"library_in_workspace didn't find a library in %s for %s\",\n-                            dir_to_search.to_str(), short_name));\n-            None\n-        }\n-        Some(result_filename) => {\n-            let absolute_path = dir_to_search.push_rel(&result_filename);\n-            debug!(\"result_filename = %s\", absolute_path.to_str());\n-            Some(absolute_path)\n-        }\n-    }\n+    let abs_path = do result_filename.map |result_filename| {\n+        let absolute_path = dir_to_search.push_rel(result_filename);\n+        debug!(\"result_filename = %s\", absolute_path.to_str());\n+        absolute_path\n+    };\n+\n+    abs_path\n }\n \n /// Returns the executable that would be installed for <pkgid>"}, {"sha": "ea0389fed7727a0810075dba598d388321717ea5", "filename": "src/librustpkg/search.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c99b2b932f1da9b1746387d8968476240dadf204/src%2Flibrustpkg%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99b2b932f1da9b1746387d8968476240dadf204/src%2Flibrustpkg%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsearch.rs?ref=c99b2b932f1da9b1746387d8968476240dadf204", "patch": "@@ -13,12 +13,9 @@ use path_util::installed_library_in_workspace;\n /// If a library with path `p` matching pkg_id's name exists under sroot_opt,\n /// return Some(p). Return None if there's no such path or if sroot_opt is None.\n pub fn find_library_in_search_path(sroot_opt: Option<@Path>, short_name: &str) -> Option<Path> {\n-    match sroot_opt {\n-        Some(sroot) => {\n-            debug!(\"Will search for a library with short name %s in \\\n-                    %s\", short_name, (sroot.push(\"lib\")).to_str());\n-            installed_library_in_workspace(short_name, sroot)\n-        }\n-        None => None\n+    do sroot_opt.chain |sroot| {\n+        debug!(\"Will search for a library with short name %s in \\\n+                %s\", short_name, (sroot.push(\"lib\")).to_str());\n+        installed_library_in_workspace(short_name, sroot)\n     }\n }"}]}