{"sha": "0201a03203b1961c96499c20025bf752a1b3ea6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDFhMDMyMDNiMTk2MWM5NjQ5OWMyMDAyNWJmNzUyYTFiM2VhNmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T00:19:41Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T00:40:52Z"}, "message": "core: Rename vec::*_from to _between to match str mod", "tree": {"sha": "73a22441a122733350a8f2a62c5367587cba998c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a22441a122733350a8f2a62c5367587cba998c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0201a03203b1961c96499c20025bf752a1b3ea6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0201a03203b1961c96499c20025bf752a1b3ea6a", "html_url": "https://github.com/rust-lang/rust/commit/0201a03203b1961c96499c20025bf752a1b3ea6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0201a03203b1961c96499c20025bf752a1b3ea6a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13bcc7362559342737fac1061f27327ffbd19475", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bcc7362559342737fac1061f27327ffbd19475", "html_url": "https://github.com/rust-lang/rust/commit/13bcc7362559342737fac1061f27327ffbd19475"}], "stats": {"total": 172, "additions": 86, "deletions": 86}, "files": [{"sha": "737c923373381139d2c61e5af2a649908df05755", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/0201a03203b1961c96499c20025bf752a1b3ea6a/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0201a03203b1961c96499c20025bf752a1b3ea6a/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0201a03203b1961c96499c20025bf752a1b3ea6a", "patch": "@@ -47,15 +47,15 @@ export all2;\n export contains;\n export count;\n export find;\n-export find_from;\n+export find_between;\n export rfind;\n-export rfind_from;\n+export rfind_between;\n export position_elem;\n export position;\n-export position_from;\n+export position_between;\n export position_elem;\n export rposition;\n-export rposition_from;\n+export rposition_between;\n export unzip;\n export zip;\n export swap;\n@@ -225,7 +225,7 @@ fn split<T: copy>(v: [const T], f: fn(T) -> bool) -> [[T]] {\n     let mut start = 0u;\n     let mut result = [];\n     while start < ln {\n-        alt position_from(v, start, ln, f) {\n+        alt position_between(v, start, ln, f) {\n           none { break }\n           some(i) {\n             push(result, slice(v, start, i));\n@@ -249,7 +249,7 @@ fn splitn<T: copy>(v: [const T], n: uint, f: fn(T) -> bool) -> [[T]] {\n     let mut count = n;\n     let mut result = [];\n     while start < ln && count > 0u {\n-        alt position_from(v, start, ln, f) {\n+        alt position_between(v, start, ln, f) {\n           none { break }\n           some(i) {\n             push(result, slice(v, start, i));\n@@ -274,7 +274,7 @@ fn rsplit<T: copy>(v: [const T], f: fn(T) -> bool) -> [[T]] {\n     let mut end = ln;\n     let mut result = [];\n     while end > 0u {\n-        alt rposition_from(v, 0u, end, f) {\n+        alt rposition_between(v, 0u, end, f) {\n           none { break }\n           some(i) {\n             push(result, slice(v, i + 1u, end));\n@@ -298,7 +298,7 @@ fn rsplitn<T: copy>(v: [const T], n: uint, f: fn(T) -> bool) -> [[T]] {\n     let mut count = n;\n     let mut result = [];\n     while end > 0u && count > 0u {\n-        alt rposition_from(v, 0u, end, f) {\n+        alt rposition_between(v, 0u, end, f) {\n           none { break }\n           some(i) {\n             push(result, slice(v, i + 1u, end));\n@@ -574,7 +574,7 @@ When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n \"]\n fn find<T: copy>(v: [const T], f: fn(T) -> bool) -> option<T> {\n-    find_from(v, 0u, len(v), f)\n+    find_between(v, 0u, len(v), f)\n }\n \n #[doc = \"\n@@ -584,9 +584,9 @@ Apply function `f` to each element of `v` within the range [`start`, `end`).\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n \"]\n-fn find_from<T: copy>(v: [const T], start: uint, end: uint,\n+fn find_between<T: copy>(v: [const T], start: uint, end: uint,\n                       f: fn(T) -> bool) -> option<T> {\n-    option::map(position_from(v, start, end, f)) { |i| v[i] }\n+    option::map(position_between(v, start, end, f)) { |i| v[i] }\n }\n \n #[doc = \"\n@@ -597,7 +597,7 @@ returns true then an option containing the element is returned. If `f`\n matches no elements then none is returned.\n \"]\n fn rfind<T: copy>(v: [const T], f: fn(T) -> bool) -> option<T> {\n-    rfind_from(v, 0u, len(v), f)\n+    rfind_between(v, 0u, len(v), f)\n }\n \n #[doc = \"\n@@ -607,9 +607,9 @@ Apply function `f` to each element of `v` in reverse order within the range\n [`start`, `end`). When function `f` returns true then an option containing\n the element is returned. If `f` matches no elements then none is returned.\n \"]\n-fn rfind_from<T: copy>(v: [const T], start: uint, end: uint,\n+fn rfind_between<T: copy>(v: [const T], start: uint, end: uint,\n                        f: fn(T) -> bool) -> option<T> {\n-    option::map(rposition_from(v, start, end, f)) { |i| v[i] }\n+    option::map(rposition_between(v, start, end, f)) { |i| v[i] }\n }\n \n #[doc = \"Find the first index containing a matching value\"]\n@@ -625,7 +625,7 @@ then an option containing the index is returned. If `f` matches no elements\n then none is returned.\n \"]\n fn position<T>(v: [const T], f: fn(T) -> bool) -> option<uint> {\n-    position_from(v, 0u, len(v), f)\n+    position_between(v, 0u, len(v), f)\n }\n \n #[doc = \"\n@@ -635,7 +635,7 @@ Apply function `f` to each element of `v` between the range [`start`, `end`).\n When function `f` returns true then an option containing the index is\n returned. If `f` matches no elements then none is returned.\n \"]\n-fn position_from<T>(v: [const T], start: uint, end: uint,\n+fn position_between<T>(v: [const T], start: uint, end: uint,\n                     f: fn(T) -> bool) -> option<uint> {\n     assert start <= end;\n     assert end <= len(v);\n@@ -657,7 +657,7 @@ Apply function `f` to each element of `v` in reverse order.  When function\n matches no elements then none is returned.\n \"]\n fn rposition<T>(v: [const T], f: fn(T) -> bool) -> option<uint> {\n-    rposition_from(v, 0u, len(v), f)\n+    rposition_between(v, 0u, len(v), f)\n }\n \n #[doc = \"\n@@ -667,7 +667,7 @@ Apply function `f` to each element of `v` in reverse order between the range\n [`start`, `end`). When function `f` returns true then an option containing\n the index is returned. If `f` matches no elements then none is returned.\n \"]\n-fn rposition_from<T>(v: [const T], start: uint, end: uint,\n+fn rposition_between<T>(v: [const T], start: uint, end: uint,\n                      f: fn(T) -> bool) -> option<uint> {\n     assert start <= end;\n     assert end <= len(v);\n@@ -1462,31 +1462,31 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_position_from() {\n-        assert position_from([], 0u, 0u, f) == none;\n+    fn test_position_between() {\n+        assert position_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert position_from(v, 0u, 0u, f) == none;\n-        assert position_from(v, 0u, 1u, f) == none;\n-        assert position_from(v, 0u, 2u, f) == some(1u);\n-        assert position_from(v, 0u, 3u, f) == some(1u);\n-        assert position_from(v, 0u, 4u, f) == some(1u);\n+        assert position_between(v, 0u, 0u, f) == none;\n+        assert position_between(v, 0u, 1u, f) == none;\n+        assert position_between(v, 0u, 2u, f) == some(1u);\n+        assert position_between(v, 0u, 3u, f) == some(1u);\n+        assert position_between(v, 0u, 4u, f) == some(1u);\n \n-        assert position_from(v, 1u, 1u, f) == none;\n-        assert position_from(v, 1u, 2u, f) == some(1u);\n-        assert position_from(v, 1u, 3u, f) == some(1u);\n-        assert position_from(v, 1u, 4u, f) == some(1u);\n+        assert position_between(v, 1u, 1u, f) == none;\n+        assert position_between(v, 1u, 2u, f) == some(1u);\n+        assert position_between(v, 1u, 3u, f) == some(1u);\n+        assert position_between(v, 1u, 4u, f) == some(1u);\n \n-        assert position_from(v, 2u, 2u, f) == none;\n-        assert position_from(v, 2u, 3u, f) == none;\n-        assert position_from(v, 2u, 4u, f) == some(3u);\n+        assert position_between(v, 2u, 2u, f) == none;\n+        assert position_between(v, 2u, 3u, f) == none;\n+        assert position_between(v, 2u, 4u, f) == some(3u);\n \n-        assert position_from(v, 3u, 3u, f) == none;\n-        assert position_from(v, 3u, 4u, f) == some(3u);\n+        assert position_between(v, 3u, 3u, f) == none;\n+        assert position_between(v, 3u, 4u, f) == some(3u);\n \n-        assert position_from(v, 4u, 4u, f) == none;\n+        assert position_between(v, 4u, 4u, f) == none;\n     }\n \n     #[test]\n@@ -1502,31 +1502,31 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_find_from() {\n-        assert find_from([], 0u, 0u, f) == none;\n+    fn test_find_between() {\n+        assert find_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert find_from(v, 0u, 0u, f) == none;\n-        assert find_from(v, 0u, 1u, f) == none;\n-        assert find_from(v, 0u, 2u, f) == some((1, 'b'));\n-        assert find_from(v, 0u, 3u, f) == some((1, 'b'));\n-        assert find_from(v, 0u, 4u, f) == some((1, 'b'));\n+        assert find_between(v, 0u, 0u, f) == none;\n+        assert find_between(v, 0u, 1u, f) == none;\n+        assert find_between(v, 0u, 2u, f) == some((1, 'b'));\n+        assert find_between(v, 0u, 3u, f) == some((1, 'b'));\n+        assert find_between(v, 0u, 4u, f) == some((1, 'b'));\n \n-        assert find_from(v, 1u, 1u, f) == none;\n-        assert find_from(v, 1u, 2u, f) == some((1, 'b'));\n-        assert find_from(v, 1u, 3u, f) == some((1, 'b'));\n-        assert find_from(v, 1u, 4u, f) == some((1, 'b'));\n+        assert find_between(v, 1u, 1u, f) == none;\n+        assert find_between(v, 1u, 2u, f) == some((1, 'b'));\n+        assert find_between(v, 1u, 3u, f) == some((1, 'b'));\n+        assert find_between(v, 1u, 4u, f) == some((1, 'b'));\n \n-        assert find_from(v, 2u, 2u, f) == none;\n-        assert find_from(v, 2u, 3u, f) == none;\n-        assert find_from(v, 2u, 4u, f) == some((3, 'b'));\n+        assert find_between(v, 2u, 2u, f) == none;\n+        assert find_between(v, 2u, 3u, f) == none;\n+        assert find_between(v, 2u, 4u, f) == some((3, 'b'));\n \n-        assert find_from(v, 3u, 3u, f) == none;\n-        assert find_from(v, 3u, 4u, f) == some((3, 'b'));\n+        assert find_between(v, 3u, 3u, f) == none;\n+        assert find_between(v, 3u, 4u, f) == some((3, 'b'));\n \n-        assert find_from(v, 4u, 4u, f) == none;\n+        assert find_between(v, 4u, 4u, f) == none;\n     }\n \n     #[test]\n@@ -1542,31 +1542,31 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rposition_from() {\n-        assert rposition_from([], 0u, 0u, f) == none;\n+    fn test_rposition_between() {\n+        assert rposition_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert rposition_from(v, 0u, 0u, f) == none;\n-        assert rposition_from(v, 0u, 1u, f) == none;\n-        assert rposition_from(v, 0u, 2u, f) == some(1u);\n-        assert rposition_from(v, 0u, 3u, f) == some(1u);\n-        assert rposition_from(v, 0u, 4u, f) == some(3u);\n+        assert rposition_between(v, 0u, 0u, f) == none;\n+        assert rposition_between(v, 0u, 1u, f) == none;\n+        assert rposition_between(v, 0u, 2u, f) == some(1u);\n+        assert rposition_between(v, 0u, 3u, f) == some(1u);\n+        assert rposition_between(v, 0u, 4u, f) == some(3u);\n \n-        assert rposition_from(v, 1u, 1u, f) == none;\n-        assert rposition_from(v, 1u, 2u, f) == some(1u);\n-        assert rposition_from(v, 1u, 3u, f) == some(1u);\n-        assert rposition_from(v, 1u, 4u, f) == some(3u);\n+        assert rposition_between(v, 1u, 1u, f) == none;\n+        assert rposition_between(v, 1u, 2u, f) == some(1u);\n+        assert rposition_between(v, 1u, 3u, f) == some(1u);\n+        assert rposition_between(v, 1u, 4u, f) == some(3u);\n \n-        assert rposition_from(v, 2u, 2u, f) == none;\n-        assert rposition_from(v, 2u, 3u, f) == none;\n-        assert rposition_from(v, 2u, 4u, f) == some(3u);\n+        assert rposition_between(v, 2u, 2u, f) == none;\n+        assert rposition_between(v, 2u, 3u, f) == none;\n+        assert rposition_between(v, 2u, 4u, f) == some(3u);\n \n-        assert rposition_from(v, 3u, 3u, f) == none;\n-        assert rposition_from(v, 3u, 4u, f) == some(3u);\n+        assert rposition_between(v, 3u, 3u, f) == none;\n+        assert rposition_between(v, 3u, 4u, f) == some(3u);\n \n-        assert rposition_from(v, 4u, 4u, f) == none;\n+        assert rposition_between(v, 4u, 4u, f) == none;\n     }\n \n     #[test]\n@@ -1582,31 +1582,31 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rfind_from() {\n-        assert rfind_from([], 0u, 0u, f) == none;\n+    fn test_rfind_between() {\n+        assert rfind_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n-        assert rfind_from(v, 0u, 0u, f) == none;\n-        assert rfind_from(v, 0u, 1u, f) == none;\n-        assert rfind_from(v, 0u, 2u, f) == some((1, 'b'));\n-        assert rfind_from(v, 0u, 3u, f) == some((1, 'b'));\n-        assert rfind_from(v, 0u, 4u, f) == some((3, 'b'));\n+        assert rfind_between(v, 0u, 0u, f) == none;\n+        assert rfind_between(v, 0u, 1u, f) == none;\n+        assert rfind_between(v, 0u, 2u, f) == some((1, 'b'));\n+        assert rfind_between(v, 0u, 3u, f) == some((1, 'b'));\n+        assert rfind_between(v, 0u, 4u, f) == some((3, 'b'));\n \n-        assert rfind_from(v, 1u, 1u, f) == none;\n-        assert rfind_from(v, 1u, 2u, f) == some((1, 'b'));\n-        assert rfind_from(v, 1u, 3u, f) == some((1, 'b'));\n-        assert rfind_from(v, 1u, 4u, f) == some((3, 'b'));\n+        assert rfind_between(v, 1u, 1u, f) == none;\n+        assert rfind_between(v, 1u, 2u, f) == some((1, 'b'));\n+        assert rfind_between(v, 1u, 3u, f) == some((1, 'b'));\n+        assert rfind_between(v, 1u, 4u, f) == some((3, 'b'));\n \n-        assert rfind_from(v, 2u, 2u, f) == none;\n-        assert rfind_from(v, 2u, 3u, f) == none;\n-        assert rfind_from(v, 2u, 4u, f) == some((3, 'b'));\n+        assert rfind_between(v, 2u, 2u, f) == none;\n+        assert rfind_between(v, 2u, 3u, f) == none;\n+        assert rfind_between(v, 2u, 4u, f) == some((3, 'b'));\n \n-        assert rfind_from(v, 3u, 3u, f) == none;\n-        assert rfind_from(v, 3u, 4u, f) == some((3, 'b'));\n+        assert rfind_between(v, 3u, 3u, f) == none;\n+        assert rfind_between(v, 3u, 4u, f) == some((3, 'b'));\n \n-        assert rfind_from(v, 4u, 4u, f) == none;\n+        assert rfind_between(v, 4u, 4u, f) == none;\n     }\n \n     #[test]"}]}