{"sha": "d1a2360b36fc43b818877d80a1bc8fd907032d00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYTIzNjBiMzZmYzQzYjgxODg3N2Q4MGExYmM4ZmQ5MDcwMzJkMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T10:43:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-16T10:43:03Z"}, "message": "auto merge of #7156 : Dretch/rust/float-hash, r=graydon\n\nIt can sometimes be useful to have maps/sets of floating point values.\r\n\r\nDoing arithmetic with floats and then using them as keys is, of course, not a good idea.", "tree": {"sha": "e59a23e6f8cd4eb19856a0c172f2ec387c694b6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59a23e6f8cd4eb19856a0c172f2ec387c694b6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1a2360b36fc43b818877d80a1bc8fd907032d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a2360b36fc43b818877d80a1bc8fd907032d00", "html_url": "https://github.com/rust-lang/rust/commit/d1a2360b36fc43b818877d80a1bc8fd907032d00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1a2360b36fc43b818877d80a1bc8fd907032d00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f88cd54e56f69f2b1ad46047d3a8d6aa43d13a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f88cd54e56f69f2b1ad46047d3a8d6aa43d13a", "html_url": "https://github.com/rust-lang/rust/commit/d0f88cd54e56f69f2b1ad46047d3a8d6aa43d13a"}, {"sha": "d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab", "html_url": "https://github.com/rust-lang/rust/commit/d22f417c74bf23c5a9c34d10ef5a327d2ab6ebab"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "2d33be03580c6fc6ac8303c016fe30fb24723499", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1a2360b36fc43b818877d80a1bc8fd907032d00/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a2360b36fc43b818877d80a1bc8fd907032d00/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=d1a2360b36fc43b818877d80a1bc8fd907032d00", "patch": "@@ -558,4 +558,15 @@ mod tests {\n             val & !(0xff << (byte * 8))\n         }\n     }\n+\n+    #[test]\n+    fn test_float_hashes_differ() {\n+        assert!(0.0.hash() != 1.0.hash());\n+        assert!(1.0.hash() != (-1.0).hash());\n+    }\n+\n+    #[test]\n+    fn test_float_hashes_of_zero() {\n+        assert_eq!(0.0.hash(), (-0.0).hash());\n+    }\n }"}, {"sha": "6d7820ffea5f2108cd4ae4b4281d9c433fc4c3a0", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d1a2360b36fc43b818877d80a1bc8fd907032d00/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a2360b36fc43b818877d80a1bc8fd907032d00/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=d1a2360b36fc43b818877d80a1bc8fd907032d00", "patch": "@@ -14,6 +14,7 @@ The `ToBytes` and `IterBytes` traits\n \n */\n \n+use cast;\n use io;\n use io::Writer;\n use option::{None, Option, Some};\n@@ -190,6 +191,35 @@ impl IterBytes for int {\n     }\n }\n \n+impl IterBytes for float {\n+    #[inline(always)]\n+    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n+        (*self as f64).iter_bytes(lsb0, f)\n+    }\n+}\n+\n+impl IterBytes for f32 {\n+    #[inline(always)]\n+    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n+        let i: u32 = unsafe {\n+            // 0.0 == -0.0 so they should also have the same hashcode\n+            cast::transmute(if *self == -0.0 { 0.0 } else { *self })\n+        };\n+        i.iter_bytes(lsb0, f)\n+    }\n+}\n+\n+impl IterBytes for f64 {\n+    #[inline(always)]\n+    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n+        let i: u64 = unsafe {\n+            // 0.0 == -0.0 so they should also have the same hashcode\n+            cast::transmute(if *self == -0.0 { 0.0 } else { *self })\n+        };\n+        i.iter_bytes(lsb0, f)\n+    }\n+}\n+\n impl<'self,A:IterBytes> IterBytes for &'self [A] {\n     #[inline(always)]\n     fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {"}]}