{"sha": "ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTYwMjUxNWU0YTZjYTA3OTJjZWFkNDEwMmI4YWExZjVjYjhhMzQ=", "commit": {"author": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2020-03-23T20:21:18Z"}, "committer": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2020-03-23T20:21:18Z"}, "message": "Code clean-up and formatting", "tree": {"sha": "68ece4aa9da3b23dd330356bcc752b3f65aa1934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ece4aa9da3b23dd330356bcc752b3f65aa1934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "html_url": "https://github.com/rust-lang/rust/commit/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/comments", "author": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d3af078454bcd10980af28a04e172cc1f6bc9c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d3af078454bcd10980af28a04e172cc1f6bc9c8", "html_url": "https://github.com/rust-lang/rust/commit/3d3af078454bcd10980af28a04e172cc1f6bc9c8"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "3060d6496a87fd22ec99d6bb0ce5b11e4585011a", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "patch": "@@ -3,14 +3,15 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, parent_node_is_if_expr, span_lint, span_lint_and_help, span_lint_and_sugg, snippet_with_applicability};\n+use crate::utils::{higher, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions of the form `if c { true } else {\n@@ -189,7 +190,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n     }\n }\n \n-fn is_unary_not<'tcx>(e: &'tcx Expr<'_>) -> (bool, rustc_span::Span) {\n+struct ExpressionInfoWithSpan {\n+    one_side_is_unary_not: bool,\n+    left_span: Span,\n+    right_span: Span,\n+}\n+\n+fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n     if_chain! {\n         if let ExprKind::Unary(unop, operand) = e.kind;\n         if let UnOp::UnNot = unop;\n@@ -200,12 +207,15 @@ fn is_unary_not<'tcx>(e: &'tcx Expr<'_>) -> (bool, rustc_span::Span) {\n     (false, e.span)\n }\n \n-fn one_side_is_unary_not<'tcx>(left_side: &'tcx Expr<'_>, right_side: &'tcx Expr<'_>) -> (bool, rustc_span::Span, rustc_span::Span) {\n+fn one_side_is_unary_not<'tcx>(left_side: &'tcx Expr<'_>, right_side: &'tcx Expr<'_>) -> ExpressionInfoWithSpan {\n     let left = is_unary_not(left_side);\n     let right = is_unary_not(right_side);\n \n-    let retval = left.0 ^ right.0;\n-    (retval, left.1, right.1)\n+    ExpressionInfoWithSpan {\n+        one_side_is_unary_not: left.0 ^ right.0,\n+        left_span: left.1,\n+        right_span: right.1,\n+    }\n }\n \n fn check_comparison<'a, 'tcx>(\n@@ -224,20 +234,20 @@ fn check_comparison<'a, 'tcx>(\n         if l_ty.is_bool() && r_ty.is_bool() {\n             let mut applicability = Applicability::MachineApplicable;\n \n-            if let BinOpKind::Eq = op.node\n-            {\n-                let xxx = one_side_is_unary_not(&left_side, &right_side);\n-                if xxx.0\n-                {\n+            if let BinOpKind::Eq = op.node {\n+                let expression_info = one_side_is_unary_not(&left_side, &right_side);\n+                if expression_info.one_side_is_unary_not {\n                     span_lint_and_sugg(\n                         cx,\n                         BOOL_COMPARISON,\n                         e.span,\n                         \"This comparison might be written more concisely\",\n                         \"try simplifying it as shown\",\n-                        format!(\"{} != {}\",\n-                            snippet_with_applicability(cx, xxx.1, \"..\", &mut applicability),\n-                            snippet_with_applicability(cx, xxx.2, \"..\", &mut applicability)),\n+                        format!(\n+                            \"{} != {}\",\n+                            snippet_with_applicability(cx, expression_info.left_span, \"..\", &mut applicability),\n+                            snippet_with_applicability(cx, expression_info.right_span, \"..\", &mut applicability)\n+                        ),\n                         applicability,\n                     )\n                 }"}, {"sha": "9121176475938728696f5cde36e5c52544652d9c", "filename": "tests/ui/bool_comparison.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/tests%2Fui%2Fbool_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/tests%2Fui%2Fbool_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.fixed?ref=ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "patch": "@@ -112,6 +112,7 @@ fn issue3703() {\n     if false < Foo {}\n }\n \n+#[allow(dead_code)]\n fn issue4983() {\n     let a = true;\n     let b = false;\n@@ -120,4 +121,9 @@ fn issue4983() {\n     if a != b {};\n     if a == b {};\n     if !a == !b {};\n+\n+    if b != a {};\n+    if b != a {};\n+    if b == a {};\n+    if !b == !a {};\n }"}, {"sha": "01ee35859f0da64c055a3eb6a9b313b77e597cb7", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "patch": "@@ -112,6 +112,7 @@ fn issue3703() {\n     if false < Foo {}\n }\n \n+#[allow(dead_code)]\n fn issue4983() {\n     let a = true;\n     let b = false;"}, {"sha": "eeb1f20ee894d89b0d267ff67bb4098054f6ab04", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff9602515e4a6ca0792cead4102b8aa1f5cb8a34/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=ff9602515e4a6ca0792cead4102b8aa1f5cb8a34", "patch": "@@ -85,16 +85,28 @@ LL |     if x > y {\n    |        ^^^^^ help: try simplifying it as shown: `x & !y`\n \n error: This comparison might be written more concisely\n-  --> $DIR/bool_comparison.rs:119:8\n+  --> $DIR/bool_comparison.rs:120:8\n    |\n LL |     if a == !b {};\n    |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n \n error: This comparison might be written more concisely\n-  --> $DIR/bool_comparison.rs:120:8\n+  --> $DIR/bool_comparison.rs:121:8\n    |\n LL |     if !a == b {};\n    |        ^^^^^^^ help: try simplifying it as shown: `a != b`\n \n-error: aborting due to 16 previous errors\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:125:8\n+   |\n+LL |     if b == !a {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `b != a`\n+\n+error: This comparison might be written more concisely\n+  --> $DIR/bool_comparison.rs:126:8\n+   |\n+LL |     if !b == a {};\n+   |        ^^^^^^^ help: try simplifying it as shown: `b != a`\n+\n+error: aborting due to 18 previous errors\n "}]}