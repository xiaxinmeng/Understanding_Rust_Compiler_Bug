{"sha": "638b6121549f664b7fbff7f700294153248db178", "node_id": "C_kwDOAAsO6NoAKDYzOGI2MTIxNTQ5ZjY2NGI3ZmJmZjdmNzAwMjk0MTUzMjQ4ZGIxNzg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T14:10:18Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T14:10:18Z"}, "message": "remove `ty::Const::from_inline_const`", "tree": {"sha": "85132d426ec0f51c57fe24f1bd07337e0351ff5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85132d426ec0f51c57fe24f1bd07337e0351ff5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/638b6121549f664b7fbff7f700294153248db178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/638b6121549f664b7fbff7f700294153248db178", "html_url": "https://github.com/rust-lang/rust/commit/638b6121549f664b7fbff7f700294153248db178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/638b6121549f664b7fbff7f700294153248db178/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7207b4dc665da53f4fcb4d7d532cbaba58ce64e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3", "html_url": "https://github.com/rust-lang/rust/commit/7207b4dc665da53f4fcb4d7d532cbaba58ce64e3"}], "stats": {"total": 45, "additions": 1, "deletions": 44}, "files": [{"sha": "4bc821dcfa1fb4ae566e115ba97ae04071bc1ab1", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/638b6121549f664b7fbff7f700294153248db178/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b6121549f664b7fbff7f700294153248db178/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=638b6121549f664b7fbff7f700294153248db178", "patch": "@@ -1,9 +1,6 @@\n use crate::mir::interpret::LitToConstInput;\n use crate::mir::ConstantKind;\n-use crate::ty::{\n-    self, InlineConstSubsts, InlineConstSubstsParts, InternalSubsts, ParamEnv, ParamEnvAnd, Ty,\n-    TyCtxt, TypeVisitable,\n-};\n+use crate::ty::{self, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -151,46 +148,6 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    pub fn from_inline_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Self {\n-        debug!(\"Const::from_inline_const(def_id={:?})\", def_id);\n-\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-\n-        let body_id = match tcx.hir().get(hir_id) {\n-            hir::Node::AnonConst(ac) => ac.body,\n-            _ => span_bug!(\n-                tcx.def_span(def_id.to_def_id()),\n-                \"from_inline_const can only process anonymous constants\"\n-            ),\n-        };\n-\n-        let expr = &tcx.hir().body(body_id).value;\n-\n-        let ty = tcx.typeck(def_id).node_type(hir_id);\n-\n-        let ret = match Self::try_eval_lit_or_param(tcx, ty, expr) {\n-            Some(v) => v,\n-            None => {\n-                let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id());\n-                let parent_substs =\n-                    tcx.erase_regions(InternalSubsts::identity_for_item(tcx, typeck_root_def_id));\n-                let substs =\n-                    InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n-                        .substs;\n-                tcx.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                        def: ty::WithOptConstParam::unknown(def_id).to_global(),\n-                        substs,\n-                        promoted: (),\n-                    }),\n-                    ty,\n-                })\n-            }\n-        };\n-        debug_assert!(!ret.has_free_regions());\n-        ret\n-    }\n-\n     /// Interns the given value as a constant.\n     #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ty::ValTree<'tcx>, ty: Ty<'tcx>) -> Self {"}]}