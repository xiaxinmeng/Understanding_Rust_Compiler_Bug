{"sha": "5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjM2JhNGFhNGYwZmRkNWNhMzg5N2Q4MWEzMjRjZDFiNGM5NDE1ZTI=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-10T02:07:13Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-10T02:07:13Z"}, "message": "renamed mk_nil to mk_unit", "tree": {"sha": "ea7c78afe91fdea99a088d724f6591a928862c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea7c78afe91fdea99a088d724f6591a928862c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "html_url": "https://github.com/rust-lang/rust/commit/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f685ffad42a2d12dd1fad5ccb0471e7fa260826", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f685ffad42a2d12dd1fad5ccb0471e7fa260826", "html_url": "https://github.com/rust-lang/rust/commit/6f685ffad42a2d12dd1fad5ccb0471e7fa260826"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "466d472cca338a92734ff8ee93dcc121a4a23c02", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -661,7 +661,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         {\n                             let predicate = trait_predicate.map_bound(|mut trait_pred| {\n                                 trait_pred.trait_ref.substs = self.tcx.mk_substs_trait(\n-                                    self.tcx.mk_nil(),\n+                                    self.tcx.mk_unit(),\n                                     &trait_pred.trait_ref.substs[1..],\n                                 );\n                                 trait_pred"}, {"sha": "ddaa0444cc7f6d65012176320c993f9bf5cf2cc9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -2492,7 +2492,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_nil_ptr(self) -> Ty<'tcx> {\n-        self.mk_imm_ptr(self.mk_nil())\n+        self.mk_imm_ptr(self.mk_unit())\n     }\n \n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n@@ -2511,7 +2511,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         iter.intern_with(|ts| self.mk_ty(Tuple(self.intern_type_list(ts))))\n     }\n \n-    pub fn mk_nil(self) -> Ty<'tcx> {\n+    pub fn mk_unit(self) -> Ty<'tcx> {\n         self.intern_tup(&[])\n     }\n "}, {"sha": "a3316c2b8e2e4e433587d58c4ee87281814d759e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -132,7 +132,7 @@ impl PrimitiveExt for Primitive {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             Float(FloatTy::F32) => tcx.types.f32,\n             Float(FloatTy::F64) => tcx.types.f64,\n-            Pointer => tcx.mk_mut_ptr(tcx.mk_nil()),\n+            Pointer => tcx.mk_mut_ptr(tcx.mk_unit()),\n         }\n     }\n }\n@@ -1606,7 +1606,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 // (which may have no non-DST form), and will work as long\n                 // as the `Abi` or `FieldPlacement` is checked by users.\n                 if i == 0 {\n-                    let nil = tcx.mk_nil();\n+                    let nil = tcx.mk_unit();\n                     let ptr_ty = if this.ty.is_unsafe_ptr() {\n                         tcx.mk_mut_ptr(nil)\n                     } else {"}, {"sha": "5ec934ebd066750458e51275d6e75e24a9606862", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -968,7 +968,7 @@ fn get_rust_try_fn<'ll, 'tcx>(\n     let i8p = tcx.mk_mut_ptr(tcx.types.i8);\n     let fn_ty = tcx.mk_fn_ptr(ty::Binder::bind(tcx.mk_fn_sig(\n         iter::once(i8p),\n-        tcx.mk_nil(),\n+        tcx.mk_unit(),\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust"}, {"sha": "ff35371976aa49e3bdb024e1d2e928c5e6530ae0", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_nil(&self) -> Ty<'tcx> {\n-        self.infcx.tcx.mk_nil()\n+        self.infcx.tcx.mk_unit()\n     }\n \n     pub fn t_pair(&self, ty1: Ty<'tcx>, ty2: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "4d4a89fca8b83b77023d08daad411e14c32ff178", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn unit_ty(&mut self) -> Ty<'tcx> {\n-        self.tcx.mk_nil()\n+        self.tcx.mk_unit()\n     }\n \n     pub fn true_literal(&mut self) -> &'tcx ty::Const<'tcx> {"}, {"sha": "7ce96b1f62626340d9957b7c75221098efbf09c3", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -436,7 +436,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             layout: self.layout_of(self.tcx.mk_mut_ptr(place.layout.ty))?,\n         };\n \n-        let ty = self.tcx.mk_nil(); // return type is ()\n+        let ty = self.tcx.mk_unit(); // return type is ()\n         let dest = PlaceTy::null(&self, self.layout_of(ty)?);\n \n         self.eval_fn_call("}, {"sha": "1ad713b4b7de62d3bbd0c0f3a818c3bd34f61418", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -517,7 +517,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let upvar_len = mir.upvar_decls.len();\n-    let dummy_local = LocalDecl::new_internal(tcx.mk_nil(), mir.span);\n+    let dummy_local = LocalDecl::new_internal(tcx.mk_unit(), mir.span);\n \n     // Gather live locals and their indices replacing values in mir.local_decls with a dummy\n     // to avoid changing local indices\n@@ -655,7 +655,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     // Replace the return variable\n     mir.local_decls[RETURN_PLACE] = LocalDecl {\n         mutability: Mutability::Mut,\n-        ty: tcx.mk_nil(),\n+        ty: tcx.mk_unit(),\n         name: None,\n         source_info,\n         visibility_scope: source_info.scope,"}, {"sha": "50bdc14d5099556e725c6054bf28a774bf6591b1", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -529,7 +529,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             mutbl: hir::Mutability::MutMutable\n         });\n         let ref_place = self.new_temp(ref_ty);\n-        let unit_temp = Place::Local(self.new_temp(tcx.mk_nil()));\n+        let unit_temp = Place::Local(self.new_temp(tcx.mk_unit()));\n \n         let result = BasicBlockData {\n             statements: vec![self.assign(\n@@ -891,7 +891,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         unwind: Unwind\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n-        let unit_temp = Place::Local(self.new_temp(tcx.mk_nil()));\n+        let unit_temp = Place::Local(self.new_temp(tcx.mk_unit()));\n         let free_func = tcx.require_lang_item(lang_items::BoxFreeFnLangItem);\n         let args = adt.variants[0].fields.iter().enumerate().map(|(i, f)| {\n             let field = Field::new(i);"}, {"sha": "72502cda6e02d95491aa1d31abe5dd5eb54e19a2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -1575,7 +1575,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n \n         let output_ty = match decl.output {\n             hir::Return(ref output) => self.ast_ty_to_ty(output),\n-            hir::DefaultReturn(..) => tcx.mk_nil(),\n+            hir::DefaultReturn(..) => tcx.mk_unit(),\n         };\n \n         debug!(\"ty_of_fn: output_ty={:?}\", output_ty);"}, {"sha": "9913b8de7a7422d96fceb18f414f2f68e55344bd", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -656,7 +656,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 // us to give better error messages (pointing to a usually better\n                 // arm for inconsistent arms or to the whole match when a `()` type\n                 // is required).\n-                Expectation::ExpectHasType(ety) if ety != self.tcx.mk_nil() => ety,\n+                Expectation::ExpectHasType(ety) if ety != self.tcx.mk_unit() => ety,\n                 _ => self.next_ty_var(TypeVariableOrigin::MiscVariable(expr.span)),\n             };\n             CoerceMany::with_coercion_sites(coerce_first, arms)"}, {"sha": "9604eb3420fb3cc779a1f91735e8e1fd95933402", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -1077,7 +1077,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n         self.coerce_inner(fcx,\n                           cause,\n                           None,\n-                          fcx.tcx.mk_nil(),\n+                          fcx.tcx.mk_unit(),\n                           Some(augment_error),\n                           label_unit_as_expected)\n     }"}, {"sha": "8215ae211c0b9285d940ccc9dcda665cd217bab0", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -94,15 +94,15 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"load\" => (1, vec![tcx.mk_imm_ptr(param(0))],\n                        param(0)),\n             \"store\" => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)],\n-                        tcx.mk_nil()),\n+                        tcx.mk_unit()),\n \n             \"xchg\" | \"xadd\" | \"xsub\" | \"and\"  | \"nand\" | \"or\" | \"xor\" | \"max\" |\n             \"min\"  | \"umax\" | \"umin\" => {\n                 (1, vec![tcx.mk_mut_ptr(param(0)), param(0)],\n                  param(0))\n             }\n             \"fence\" | \"singlethreadfence\" => {\n-                (0, Vec::new(), tcx.mk_nil())\n+                (0, Vec::new(), tcx.mk_unit())\n             }\n             op => {\n                 struct_span_err!(tcx.sess, it.span, E0092,\n@@ -121,7 +121,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             _ => hir::Unsafety::Unsafe,\n         };\n         let (n_tps, inputs, output) = match &name[..] {\n-            \"breakpoint\" => (0, Vec::new(), tcx.mk_nil()),\n+            \"breakpoint\" => (0, Vec::new(), tcx.mk_unit()),\n             \"size_of\" |\n             \"pref_align_of\" | \"min_align_of\" => (1, Vec::new(), tcx.types.usize),\n             \"size_of_val\" |  \"min_align_of_val\" => {\n@@ -141,18 +141,18 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     tcx.mk_mut_ptr(param(0)),\n                     param(0)\n                   ],\n-               tcx.mk_nil())\n+               tcx.mk_unit())\n             }\n             \"prefetch_read_data\" | \"prefetch_write_data\" |\n             \"prefetch_read_instruction\" | \"prefetch_write_instruction\" => {\n                 (1, vec![tcx.mk_ptr(ty::TypeAndMut {\n                           ty: param(0),\n                           mutbl: hir::MutImmutable\n                          }), tcx.types.i32],\n-                    tcx.mk_nil())\n+                    tcx.mk_unit())\n             }\n             \"drop_in_place\" => {\n-                (1, vec![tcx.mk_mut_ptr(param(0))], tcx.mk_nil())\n+                (1, vec![tcx.mk_mut_ptr(param(0))], tcx.mk_unit())\n             }\n             \"needs_drop\" => (1, Vec::new(), tcx.types.bool),\n \n@@ -185,7 +185,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   }),\n                   tcx.types.usize,\n                ],\n-               tcx.mk_nil())\n+               tcx.mk_unit())\n             }\n             \"volatile_copy_memory\" | \"volatile_copy_nonoverlapping_memory\" => {\n               (1,\n@@ -200,7 +200,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   }),\n                   tcx.types.usize,\n                ],\n-               tcx.mk_nil())\n+               tcx.mk_unit())\n             }\n             \"write_bytes\" | \"volatile_set_memory\" => {\n               (1,\n@@ -212,7 +212,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                   tcx.types.u8,\n                   tcx.types.usize,\n                ],\n-               tcx.mk_nil())\n+               tcx.mk_unit())\n             }\n             \"sqrtf32\" => (0, vec![ tcx.types.f32 ], tcx.types.f32),\n             \"sqrtf64\" => (0, vec![ tcx.types.f64 ], tcx.types.f64),\n@@ -280,7 +280,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"volatile_load\" | \"unaligned_volatile_load\" =>\n                 (1, vec![ tcx.mk_imm_ptr(param(0)) ], param(0)),\n             \"volatile_store\" | \"unaligned_volatile_store\" =>\n-                (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_nil()),\n+                (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_unit()),\n \n             \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" |\n             \"bswap\" | \"bitreverse\" =>\n@@ -300,7 +300,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n \n-            \"assume\" => (0, vec![tcx.types.bool], tcx.mk_nil()),\n+            \"assume\" => (0, vec![tcx.types.bool], tcx.mk_unit()),\n             \"likely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n             \"unlikely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n \n@@ -313,7 +313,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 let mut_u8 = tcx.mk_mut_ptr(tcx.types.u8);\n                 let fn_ty = ty::Binder::bind(tcx.mk_fn_sig(\n                     iter::once(mut_u8),\n-                    tcx.mk_nil(),\n+                    tcx.mk_unit(),\n                     false,\n                     hir::Unsafety::Normal,\n                     Abi::Rust,\n@@ -322,7 +322,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n \n             \"nontemporal_store\" => {\n-                (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_nil())\n+                (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_unit())\n             }\n \n             ref other => {\n@@ -376,7 +376,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             (3, vec![param(0), param(1), param(2)], param(0))\n         }\n         \"simd_scatter\" => {\n-            (3, vec![param(0), param(1), param(2)], tcx.mk_nil())\n+            (3, vec![param(0), param(1), param(2)], tcx.mk_unit())\n         }\n         \"simd_insert\" => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         \"simd_extract\" => (2, vec![param(0), tcx.types.u32], param(1)),"}, {"sha": "3d66beaf2ecab830b153935e10e0d469099fca37", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -3918,7 +3918,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 for input in inputs {\n                     self.check_expr(input);\n                 }\n-                tcx.mk_nil()\n+                tcx.mk_unit()\n             }\n             hir::ExprKind::Break(destination, ref expr_opt) => {\n                 if let Ok(target_id) = destination.target_id {\n@@ -3945,7 +3945,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     } else {\n                         // Otherwise, this is a break *without* a value. That's\n                         // always legal, and is equivalent to `break ()`.\n-                        e_ty = tcx.mk_nil();\n+                        e_ty = tcx.mk_unit();\n                         cause = self.misc(expr.span);\n                     }\n \n@@ -4052,7 +4052,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if lhs_ty.references_error() || rhs_ty.references_error() {\n                     tcx.types.err\n                 } else {\n-                    tcx.mk_nil()\n+                    tcx.mk_unit()\n                 }\n             }\n             hir::ExprKind::If(ref cond, ref then_expr, ref opt_else_expr) => {\n@@ -4081,7 +4081,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     self.diverges.set(Diverges::Maybe);\n                 }\n \n-                self.tcx.mk_nil()\n+                self.tcx.mk_unit()\n             }\n             hir::ExprKind::Loop(ref body, _, source) => {\n                 let coerce = match source {\n@@ -4121,7 +4121,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // [1]\n                     self.tcx.sess.delay_span_bug(body.span, \"no coercion, but loop may not break\");\n                 }\n-                ctxt.coerce.map(|c| c.complete(self)).unwrap_or(self.tcx.mk_nil())\n+                ctxt.coerce.map(|c| c.complete(self)).unwrap_or(self.tcx.mk_unit())\n             }\n             hir::ExprKind::Match(ref discrim, ref arms, match_src) => {\n                 self.check_match(expr, &discrim, arms, expected, match_src)\n@@ -4352,7 +4352,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         \"yield statement outside of generator literal\").emit();\n                     }\n                 }\n-                tcx.mk_nil()\n+                tcx.mk_unit()\n             }\n         }\n     }\n@@ -4516,7 +4516,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             hir::StmtKind::Expr(ref expr, _) => {\n                 // Check with expected type of ()\n-                self.check_expr_has_type_or_error(&expr, self.tcx.mk_nil());\n+                self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit());\n             }\n             hir::StmtKind::Semi(ref expr, _) => {\n                 self.check_expr(&expr);\n@@ -4529,7 +4529,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn check_block_no_value(&self, blk: &'gcx hir::Block)  {\n-        let unit = self.tcx.mk_nil();\n+        let unit = self.tcx.mk_unit();\n         let ty = self.check_block_with_expected(blk, ExpectHasType(unit));\n \n         // if the block produces a `!` value, that can always be"}, {"sha": "5004880ce47b8bb1967176633a8600a43c4e9e9b", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let ty = if !lhs_ty.is_ty_var() && !rhs_ty.is_ty_var()\n                     && is_builtin_binop(lhs_ty, rhs_ty, op) {\n             self.enforce_builtin_binop_types(lhs_expr, lhs_ty, rhs_expr, rhs_ty, op);\n-            self.tcx.mk_nil()\n+            self.tcx.mk_unit()\n         } else {\n             return_ty\n         };"}, {"sha": "13ea2fdd89d050defac764beb3102585478573c0", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5c3ba4aa4f0fdd5ca3897d81a324cd1b4c9415e2", "patch": "@@ -225,7 +225,7 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 actual.output().skip_binder()\n             } else {\n                 // standard () main return type\n-                tcx.mk_nil()\n+                tcx.mk_unit()\n             };\n \n             let se_ty = tcx.mk_fn_ptr(ty::Binder::bind("}]}