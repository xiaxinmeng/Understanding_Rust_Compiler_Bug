{"sha": "7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMjQwYTEyNjJjNDY3YTVhMGY5ZDVkY2FkOWE1MDBhNTZiNjdkMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T00:43:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T00:43:09Z"}, "message": "Auto merge of #77083 - KodrAus:revert/const-type-id, r=RalfJung\n\nrevert const_type_id stabilization\n\nThis reverts #72488, which is currently on beta and scheduled to stabilize in `1.47.0`, based on https://github.com/rust-lang/rust/pull/75923#issuecomment-696676511\n\nIt turns out we might not be quite ready to stabilize `TypeId` in const contexts before having a chance to rework its internals. Since `TypeId` is a bit of an oddity we want to be careful about how those internals are currently being relied on while making changes. That will be easier to do without having to also consider compile-time contexts.\n\nr? `@eddyb`", "tree": {"sha": "40eafcfdbc86cba2c91b06ef7639569c1389a4cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40eafcfdbc86cba2c91b06ef7639569c1389a4cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "html_url": "https://github.com/rust-lang/rust/commit/7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c35177582ba22dc7eb3d0d08e972424aed8bd374", "url": "https://api.github.com/repos/rust-lang/rust/commits/c35177582ba22dc7eb3d0d08e972424aed8bd374", "html_url": "https://github.com/rust-lang/rust/commit/c35177582ba22dc7eb3d0d08e972424aed8bd374"}, {"sha": "0e2db577546ee52901c9d350aaa96f6ba700d9ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2db577546ee52901c9d350aaa96f6ba700d9ff", "html_url": "https://github.com/rust-lang/rust/commit/0e2db577546ee52901c9d350aaa96f6ba700d9ff"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "d1951fbbf103a14a768209c9001bde4f523476a1", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "patch": "@@ -435,7 +435,7 @@ impl TypeId {\n     /// assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId { t: intrinsics::type_id::<T>() }\n     }"}, {"sha": "bcbb760021ee439f101ce5cd871132fcdf6b070b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "patch": "@@ -807,7 +807,7 @@ extern \"rust-intrinsic\" {\n     /// crate it is invoked in.\n     ///\n     /// The stabilized version of this intrinsic is [`crate::any::TypeId::of`].\n-    #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:"}, {"sha": "63ca6e517d214edf4cef59bc5b8c39e077ec88a7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "patch": "@@ -92,6 +92,7 @@\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]\n #![feature(const_align_of_val)]\n+#![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_likely)]\n #![feature(const_unreachable_unchecked)]"}, {"sha": "89d57ae4f98e628230080204c6555837816b828b", "filename": "src/test/ui/consts/const-typeid-of-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-typeid-of-rpass.rs?ref=7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+#![feature(const_type_id)]\n #![feature(core_intrinsics)]\n \n use std::any::TypeId;"}, {"sha": "7706a97f23b4834bd0c2166e8354c0659ca34f4b", "filename": "src/test/ui/consts/issue-73976-monomorphic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs?ref=7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "patch": "@@ -5,6 +5,7 @@\n // will be properly rejected. This test will ensure that monomorphic use of these\n // would not be wrongly rejected in patterns.\n \n+#![feature(const_type_id)]\n #![feature(const_type_name)]\n \n use std::any::{self, TypeId};"}, {"sha": "787462da9f960b923782c5c5c249cd059789d0f9", "filename": "src/test/ui/consts/issue-73976-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.rs?ref=7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "patch": "@@ -5,6 +5,7 @@\n // This test case should either run-pass or be rejected at compile time.\n // Currently we just disallow this usage and require pattern is monomorphic.\n \n+#![feature(const_type_id)]\n #![feature(const_type_name)]\n \n use std::any::{self, TypeId};"}, {"sha": "442ad23f2cc425c97f6721be378341911383f79b", "filename": "src/test/ui/consts/issue-73976-polymorphic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b240a1262c467a5a0f9d5dcad9a500a56b67d34/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976-polymorphic.stderr?ref=7b240a1262c467a5a0f9d5dcad9a500a56b67d34", "patch": "@@ -1,23 +1,23 @@\n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:19:37\n+  --> $DIR/issue-73976-polymorphic.rs:20:37\n    |\n LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n    |                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:31:42\n+  --> $DIR/issue-73976-polymorphic.rs:32:42\n    |\n LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:19:37\n+  --> $DIR/issue-73976-polymorphic.rs:20:37\n    |\n LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n    |                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error: constant pattern depends on a generic parameter\n-  --> $DIR/issue-73976-polymorphic.rs:31:42\n+  --> $DIR/issue-73976-polymorphic.rs:32:42\n    |\n LL |     matches!(GetTypeNameLen::<T>::VALUE, GetTypeNameLen::<T>::VALUE)\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}