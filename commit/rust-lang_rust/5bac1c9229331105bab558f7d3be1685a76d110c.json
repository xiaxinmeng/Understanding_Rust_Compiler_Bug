{"sha": "5bac1c9229331105bab558f7d3be1685a76d110c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYWMxYzkyMjkzMzExMDViYWI1NThmN2QzYmUxNjg1YTc2ZDExMGM=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-16T19:59:21Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-18T11:07:35Z"}, "message": "Only inherit const stability for methods of `impl const Trait` blocks", "tree": {"sha": "3dcf06739c67b9d3c64111ab82308acff2e5fabd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dcf06739c67b9d3c64111ab82308acff2e5fabd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bac1c9229331105bab558f7d3be1685a76d110c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bac1c9229331105bab558f7d3be1685a76d110c", "html_url": "https://github.com/rust-lang/rust/commit/5bac1c9229331105bab558f7d3be1685a76d110c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bac1c9229331105bab558f7d3be1685a76d110c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "url": "https://api.github.com/repos/rust-lang/rust/commits/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b", "html_url": "https://github.com/rust-lang/rust/commit/949bdd8b79a48ac25408f9cfb0e9d57a75d5f12b"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "e884454f5c6ec9a2c32a666d59f02f344c2f9d0b", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bac1c9229331105bab558f7d3be1685a76d110c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bac1c9229331105bab558f7d3be1685a76d110c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=5bac1c9229331105bab558f7d3be1685a76d110c", "patch": "@@ -929,7 +929,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 if callee_is_unstable_unmarked {\n                     trace!(\"callee_is_unstable_unmarked\");\n                     // We do not use `const` modifiers for intrinsic \"functions\", as intrinsics are\n-                    // `extern` funtions, and these have way to get marked `const`. So instead we\n+                    // `extern` funtions, and these have no way to get marked `const`. So instead we\n                     // use `rustc_const_(un)stable` attributes to mean that the intrinsic is `const`\n                     if self.ccx.is_const_stable_const_fn() || is_intrinsic {\n                         self.check_op(ops::FnCallUnstable(callee, None));"}, {"sha": "b70cec25dfb5adf8d960a7ccbbd0b0dcc0a9a2fe", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5bac1c9229331105bab558f7d3be1685a76d110c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bac1c9229331105bab558f7d3be1685a76d110c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=5bac1c9229331105bab558f7d3be1685a76d110c", "patch": "@@ -55,6 +55,21 @@ impl InheritDeprecation {\n     }\n }\n \n+/// Whether to inherit const stability flags for nested items. In most cases, we do not want to\n+/// inherit const stability: just because an enclosing `fn` is const-stable does not mean\n+/// all `extern` imports declared in it should be const-stable! However, trait methods\n+/// inherit const stability attributes from their parent and do not have their own.\n+enum InheritConstStability {\n+    Yes,\n+    No,\n+}\n+\n+impl InheritConstStability {\n+    fn yes(&self) -> bool {\n+        matches!(self, InheritConstStability::Yes)\n+    }\n+}\n+\n // A private tree-walker for producing an Index.\n struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -75,6 +90,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         item_sp: Span,\n         kind: AnnotationKind,\n         inherit_deprecation: InheritDeprecation,\n+        inherit_const_stability: InheritConstStability,\n         visit_children: F,\n     ) where\n         F: FnOnce(&mut Self),\n@@ -140,6 +156,8 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             const_stab\n         });\n \n+        // `impl const Trait for Type` items forward their const stability to their\n+        // immediate children.\n         if const_stab.is_none() {\n             debug!(\"annotate: const_stab not found, parent = {:?}\", self.parent_const_stab);\n             if let Some(parent) = self.parent_const_stab {\n@@ -228,7 +246,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         self.recurse_with_stability_attrs(\n             depr.map(|(d, _)| DeprecationEntry::local(d, hir_id)),\n             stab,\n-            const_stab,\n+            if inherit_const_stability.yes() { const_stab } else { None },\n             visit_children,\n         );\n     }\n@@ -325,6 +343,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n         let orig_in_trait_impl = self.in_trait_impl;\n         let mut kind = AnnotationKind::Required;\n+        let mut const_stab_inherit = InheritConstStability::No;\n         match i.kind {\n             // Inherent impls and foreign modules serve only as containers for other items,\n             // they don't have their own stability. They still can be annotated as unstable\n@@ -338,6 +357,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) => {\n                 self.in_trait_impl = true;\n                 kind = AnnotationKind::DeprecationProhibited;\n+                const_stab_inherit = InheritConstStability::Yes;\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n                 if let Some(ctor_hir_id) = sd.ctor_hir_id() {\n@@ -347,16 +367,23 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                         i.span,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n+                        InheritConstStability::No,\n                         |_| {},\n                     )\n                 }\n             }\n             _ => {}\n         }\n \n-        self.annotate(i.hir_id, &i.attrs, i.span, kind, InheritDeprecation::Yes, |v| {\n-            intravisit::walk_item(v, i)\n-        });\n+        self.annotate(\n+            i.hir_id,\n+            &i.attrs,\n+            i.span,\n+            kind,\n+            InheritDeprecation::Yes,\n+            const_stab_inherit,\n+            |v| intravisit::walk_item(v, i),\n+        );\n         self.in_trait_impl = orig_in_trait_impl;\n     }\n \n@@ -367,6 +394,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             ti.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n+            InheritConstStability::No,\n             |v| {\n                 intravisit::walk_trait_item(v, ti);\n             },\n@@ -376,9 +404,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let kind =\n             if self.in_trait_impl { AnnotationKind::Prohibited } else { AnnotationKind::Required };\n-        self.annotate(ii.hir_id, &ii.attrs, ii.span, kind, InheritDeprecation::Yes, |v| {\n-            intravisit::walk_impl_item(v, ii);\n-        });\n+        self.annotate(\n+            ii.hir_id,\n+            &ii.attrs,\n+            ii.span,\n+            kind,\n+            InheritDeprecation::Yes,\n+            InheritConstStability::No,\n+            |v| {\n+                intravisit::walk_impl_item(v, ii);\n+            },\n+        );\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant<'tcx>, g: &'tcx Generics<'tcx>, item_id: HirId) {\n@@ -388,6 +424,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             var.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n+            InheritConstStability::No,\n             |v| {\n                 if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n                     v.annotate(\n@@ -396,6 +433,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n                         var.span,\n                         AnnotationKind::Required,\n                         InheritDeprecation::Yes,\n+                        InheritConstStability::No,\n                         |_| {},\n                     );\n                 }\n@@ -412,6 +450,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             s.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n+            InheritConstStability::No,\n             |v| {\n                 intravisit::walk_struct_field(v, s);\n             },\n@@ -425,6 +464,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             i.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n+            InheritConstStability::No,\n             |v| {\n                 intravisit::walk_foreign_item(v, i);\n             },\n@@ -438,6 +478,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             md.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n+            InheritConstStability::No,\n             |_| {},\n         );\n     }\n@@ -451,9 +492,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             _ => AnnotationKind::Prohibited,\n         };\n \n-        self.annotate(p.hir_id, &p.attrs, p.span, kind, InheritDeprecation::No, |v| {\n-            intravisit::walk_generic_param(v, p);\n-        });\n+        self.annotate(\n+            p.hir_id,\n+            &p.attrs,\n+            p.span,\n+            kind,\n+            InheritDeprecation::No,\n+            InheritConstStability::No,\n+            |v| {\n+                intravisit::walk_generic_param(v, p);\n+            },\n+        );\n     }\n }\n \n@@ -618,6 +667,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n             krate.item.span,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n+            InheritConstStability::No,\n             |v| intravisit::walk_crate(v, krate),\n         );\n     }"}, {"sha": "7c1a9b82f99b25aeb2739584089602d08195d633", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bac1c9229331105bab558f7d3be1685a76d110c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bac1c9229331105bab558f7d3be1685a76d110c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=5bac1c9229331105bab558f7d3be1685a76d110c", "patch": "@@ -1842,6 +1842,7 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n #[inline]\n pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n@@ -1926,6 +1927,7 @@ pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: us\n #[inline]\n pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n         fn copy<T>(src: *const T, dst: *mut T, count: usize);\n     }\n "}, {"sha": "810158a295792194523fc5814ee520816b214b4e", "filename": "src/test/ui/consts/intrinsic_without_const_stab.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bac1c9229331105bab558f7d3be1685a76d110c/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bac1c9229331105bab558f7d3be1685a76d110c/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.rs?ref=5bac1c9229331105bab558f7d3be1685a76d110c", "patch": "@@ -1,20 +1,17 @@\n-// check-pass\n-\n #![feature(intrinsics, staged_api, const_intrinsic_copy)]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n #[inline]\n pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n+    // Const stability attributes are not inherited from parent items.\n     extern \"rust-intrinsic\" {\n         fn copy<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n-    // Even though the `copy` intrinsic lacks stability attributes, this works, because it\n-    // inherits its stability attributes from its parent. That includes `rustc_const_(un)stable`\n-    // attributes.\n     unsafe { copy(src, dst, count) }\n+    //~^ ERROR calls in constant functions are limited to constant functions\n }\n \n fn main() {}"}, {"sha": "5a42823a6052aa05726c72b4a1648267a0e300dc", "filename": "src/test/ui/consts/intrinsic_without_const_stab.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bac1c9229331105bab558f7d3be1685a76d110c/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bac1c9229331105bab558f7d3be1685a76d110c/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fintrinsic_without_const_stab.stderr?ref=5bac1c9229331105bab558f7d3be1685a76d110c", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/intrinsic_without_const_stab.rs:13:14\n+   |\n+LL |     unsafe { copy(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}]}