{"sha": "7cfc6fa1f0c847c749929925f9def0fdc690d417", "node_id": "C_kwDOAAsO6NoAKDdjZmM2ZmExZjBjODQ3Yzc0OTkyOTkyNWY5ZGVmMGZkYzY5MGQ0MTc", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-07T17:08:29Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:07:21Z"}, "message": "deprecate `clippy::for_loops_over_fallibles`", "tree": {"sha": "1c08501d9ca5c38691eaaa2cbd8ca933ff01ae07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c08501d9ca5c38691eaaa2cbd8ca933ff01ae07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cfc6fa1f0c847c749929925f9def0fdc690d417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfc6fa1f0c847c749929925f9def0fdc690d417", "html_url": "https://github.com/rust-lang/rust/commit/7cfc6fa1f0c847c749929925f9def0fdc690d417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cfc6fa1f0c847c749929925f9def0fdc690d417/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05dcfd971a2736cf0eac04bb04f6539f36d05a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/05dcfd971a2736cf0eac04bb04f6539f36d05a44", "html_url": "https://github.com/rust-lang/rust/commit/05dcfd971a2736cf0eac04bb04f6539f36d05a44"}], "stats": {"total": 385, "additions": 34, "deletions": 351}, "files": [{"sha": "fe1f0b56646cde331bafc0fa2c6f82fc6cf59072", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -109,7 +109,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(loops::EMPTY_LOOP),\n     LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n     LintId::of(loops::FOR_KV_MAP),\n-    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::MANUAL_FIND),\n     LintId::of(loops::MANUAL_FLATTEN),"}, {"sha": "306cb6a61c94390c2f4d1c6db8067c2063f53728", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -227,7 +227,6 @@ store.register_lints(&[\n     loops::EXPLICIT_INTO_ITER_LOOP,\n     loops::EXPLICIT_ITER_LOOP,\n     loops::FOR_KV_MAP,\n-    loops::FOR_LOOPS_OVER_FALLIBLES,\n     loops::ITER_NEXT_LOOP,\n     loops::MANUAL_FIND,\n     loops::MANUAL_FLATTEN,"}, {"sha": "d6d95c95c85d2f7f065b97fceb2997521a2da61d", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -21,7 +21,6 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n     LintId::of(loops::EMPTY_LOOP),\n-    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::SUSPICIOUS_MAP),"}, {"sha": "77de90fd7b94ac7fb196f388f21e29c097ba8e65", "filename": "clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/05dcfd971a2736cf0eac04bb04f6539f36d05a44/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dcfd971a2736cf0eac04bb04f6539f36d05a44/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=05dcfd971a2736cf0eac04bb04f6539f36d05a44", "patch": "@@ -1,65 +0,0 @@\n-use super::FOR_LOOPS_OVER_FALLIBLES;\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use rustc_hir::{Expr, Pat};\n-use rustc_lint::LateContext;\n-use rustc_span::symbol::sym;\n-\n-/// Checks for `for` loops over `Option`s and `Result`s.\n-pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, method_name: Option<&str>) {\n-    let ty = cx.typeck_results().expr_ty(arg);\n-    if is_type_diagnostic_item(cx, ty, sym::Option) {\n-        let help_string = if let Some(method_name) = method_name {\n-            format!(\n-                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Some({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        } else {\n-            format!(\n-                \"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        };\n-        span_lint_and_help(\n-            cx,\n-            FOR_LOOPS_OVER_FALLIBLES,\n-            arg.span,\n-            &format!(\n-                \"for loop over `{0}`, which is an `Option`. This is more readably written as an \\\n-                `if let` statement\",\n-                snippet(cx, arg.span, \"_\")\n-            ),\n-            None,\n-            &help_string,\n-        );\n-    } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n-        let help_string = if let Some(method_name) = method_name {\n-            format!(\n-                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Ok({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        } else {\n-            format!(\n-                \"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        };\n-        span_lint_and_help(\n-            cx,\n-            FOR_LOOPS_OVER_FALLIBLES,\n-            arg.span,\n-            &format!(\n-                \"for loop over `{0}`, which is a `Result`. This is more readably written as an \\\n-                `if let` statement\",\n-                snippet(cx, arg.span, \"_\")\n-            ),\n-            None,\n-            &help_string,\n-        );\n-    }\n-}"}, {"sha": "b8a263817d2971b218b922bdb55d090edcf30bce", "filename": "clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) {\n     if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n@@ -14,8 +14,5 @@ pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n             \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n             probably not what you want\",\n         );\n-        true\n-    } else {\n-        false\n     }\n }"}, {"sha": "bcf278d9c8339c374449c0168a885a139e98a74c", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -3,7 +3,6 @@ mod explicit_counter_loop;\n mod explicit_into_iter_loop;\n mod explicit_iter_loop;\n mod for_kv_map;\n-mod for_loops_over_fallibles;\n mod iter_next_loop;\n mod manual_find;\n mod manual_flatten;\n@@ -173,49 +172,6 @@ declare_clippy_lint! {\n     \"for-looping over `_.next()` which is probably not intended\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `for` loops over `Option` or `Result` values.\n-    ///\n-    /// ### Why is this bad?\n-    /// Readability. This is more clearly expressed as an `if\n-    /// let`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// for x in opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in &res {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in res.iter() {\n-    ///     // ..\n-    /// }\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// if let Some(x) = opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// if let Ok(x) = res {\n-    ///     // ..\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.45.0\"]\n-    pub FOR_LOOPS_OVER_FALLIBLES,\n-    suspicious,\n-    \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Detects `loop + match` combinations that are easier\n@@ -648,7 +604,6 @@ declare_lint_pass!(Loops => [\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n     ITER_NEXT_LOOP,\n-    FOR_LOOPS_OVER_FALLIBLES,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n     EXPLICIT_COUNTER_LOOP,\n@@ -739,30 +694,22 @@ fn check_for_loop<'tcx>(\n     manual_find::check(cx, pat, arg, body, span, expr);\n }\n \n-fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n-    let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n-\n+fn check_for_loop_arg(cx: &LateContext<'_>, _: &Pat<'_>, arg: &Expr<'_>) {\n     if let ExprKind::MethodCall(method, self_arg, [], _) = arg.kind {\n         let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n             \"iter\" | \"iter_mut\" => {\n                 explicit_iter_loop::check(cx, self_arg, arg, method_name);\n-                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n             },\n             \"into_iter\" => {\n                 explicit_iter_loop::check(cx, self_arg, arg, method_name);\n                 explicit_into_iter_loop::check(cx, self_arg, arg);\n-                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n             },\n             \"next\" => {\n-                next_loop_linted = iter_next_loop::check(cx, arg);\n+                iter_next_loop::check(cx, arg);\n             },\n             _ => {},\n         }\n     }\n-\n-    if !next_loop_linted {\n-        for_loops_over_fallibles::check(cx, pat, arg, None);\n-    }\n }"}, {"sha": "76d6ad0b23e6a82ffb31259f35dac6356fe45977", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -11,8 +11,8 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::disallowed_method\", \"clippy::disallowed_methods\"),\n     (\"clippy::disallowed_type\", \"clippy::disallowed_types\"),\n     (\"clippy::eval_order_dependence\", \"clippy::mixed_read_write_in_expression\"),\n-    (\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\"),\n-    (\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\"),\n+    (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n+    (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::identity_conversion\", \"clippy::useless_conversion\"),\n     (\"clippy::if_let_some_result\", \"clippy::match_result_ok\"),\n     (\"clippy::logic_bug\", \"clippy::overly_complex_bool_expr\"),\n@@ -31,6 +31,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n+    (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "bd27bc7938f8ef5aeb0a02ab243f1dce20150240", "filename": "src/docs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -170,7 +170,6 @@ docs! {\n     \"fn_to_numeric_cast_any\",\n     \"fn_to_numeric_cast_with_truncation\",\n     \"for_kv_map\",\n-    \"for_loops_over_fallibles\",\n     \"forget_copy\",\n     \"forget_non_drop\",\n     \"forget_ref\","}, {"sha": "c5a7508e45d40e58cef17a27e3f92a855dd0b398", "filename": "src/docs/for_loops_over_fallibles.txt", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/05dcfd971a2736cf0eac04bb04f6539f36d05a44/src%2Fdocs%2Ffor_loops_over_fallibles.txt", "raw_url": "https://github.com/rust-lang/rust/raw/05dcfd971a2736cf0eac04bb04f6539f36d05a44/src%2Fdocs%2Ffor_loops_over_fallibles.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Ffor_loops_over_fallibles.txt?ref=05dcfd971a2736cf0eac04bb04f6539f36d05a44", "patch": "@@ -1,32 +0,0 @@\n-### What it does\n-Checks for `for` loops over `Option` or `Result` values.\n-\n-### Why is this bad?\n-Readability. This is more clearly expressed as an `if\n-let`.\n-\n-### Example\n-```\n-for x in opt {\n-    // ..\n-}\n-\n-for x in &res {\n-    // ..\n-}\n-\n-for x in res.iter() {\n-    // ..\n-}\n-```\n-\n-Use instead:\n-```\n-if let Some(x) = opt {\n-    // ..\n-}\n-\n-if let Ok(x) = res {\n-    // ..\n-}\n-```\n\\ No newline at end of file"}, {"sha": "75cdcc02353f7425aa3f7b321eb64bbfa156f793", "filename": "tests/ui/for_loops_over_fallibles.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/05dcfd971a2736cf0eac04bb04f6539f36d05a44/tests%2Fui%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dcfd971a2736cf0eac04bb04f6539f36d05a44/tests%2Fui%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.rs?ref=05dcfd971a2736cf0eac04bb04f6539f36d05a44", "patch": "@@ -1,74 +0,0 @@\n-#![warn(clippy::for_loops_over_fallibles)]\n-#![allow(clippy::uninlined_format_args)]\n-#![allow(for_loops_over_fallibles)]\n-\n-fn for_loops_over_fallibles() {\n-    let option = Some(1);\n-    let mut result = option.ok_or(\"x not found\");\n-    let v = vec![0, 1, 2];\n-\n-    // check over an `Option`\n-    for x in option {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over an `Option`\n-    for x in option.iter() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result.iter_mut() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result.into_iter() {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in option.ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure LOOP_OVER_NEXT lint takes clippy::precedence when next() is the last call\n-    // in the chain\n-    for x in v.iter().next() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure we lint when next() is not the last call in the chain\n-    for x in v.iter().next().and(Some(0)) {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in v.iter().next().ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check for false positives\n-\n-    // for loop false positive\n-    for x in v {\n-        println!(\"{}\", x);\n-    }\n-\n-    // while let false positive for Option\n-    while let Some(x) = option {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-\n-    // while let false positive for Result\n-    while let Ok(x) = result {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "f09adccabd1a8d15d25a36d937d02d61f2bbb025", "filename": "tests/ui/for_loops_over_fallibles.stderr", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/05dcfd971a2736cf0eac04bb04f6539f36d05a44/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05dcfd971a2736cf0eac04bb04f6539f36d05a44/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=05dcfd971a2736cf0eac04bb04f6539f36d05a44", "patch": "@@ -1,95 +0,0 @@\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:10:14\n-   |\n-LL |     for x in option {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in option` with `if let Some(x) = option`\n-   = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n-\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:15:14\n-   |\n-LL |     for x in option.iter() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in option.iter()` with `if let Some(x) = option`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:20:14\n-   |\n-LL |     for x in result {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result` with `if let Ok(x) = result`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:25:14\n-   |\n-LL |     for x in result.iter_mut() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result.iter_mut()` with `if let Ok(x) = result`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:30:14\n-   |\n-LL |     for x in result.into_iter() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result.into_iter()` with `if let Ok(x) = result`\n-\n-error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:34:14\n-   |\n-LL |     for x in option.ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n-\n-error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loops_over_fallibles.rs:40:14\n-   |\n-LL |     for x in v.iter().next() {\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::iter_next_loop)]` on by default\n-\n-error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:45:14\n-   |\n-LL |     for x in v.iter().next().and(Some(0)) {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n-\n-error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:49:14\n-   |\n-LL |     for x in v.iter().next().ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:61:5\n-   |\n-LL | /     while let Some(x) = option {\n-LL | |         println!(\"{}\", x);\n-LL | |         break;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `#[deny(clippy::never_loop)]` on by default\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:67:5\n-   |\n-LL | /     while let Ok(x) = result {\n-LL | |         println!(\"{}\", x);\n-LL | |         break;\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 11 previous errors\n-"}, {"sha": "e12ea7ec14500f956a9b29ae3ce4fcec41da63cb", "filename": "tests/ui/manual_map_option.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.fixed?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -7,7 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n-    clippy::for_loops_over_fallibles,\n+    for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "325a6db06c4e53a533348d41462e81dff808e09d", "filename": "tests/ui/manual_map_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -7,7 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n-    clippy::for_loops_over_fallibles,\n+    for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "8beae8dee08542e993e40136bfe0404fe8b5ff13", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -12,7 +12,7 @@\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n-#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n #![allow(clippy::overly_complex_bool_expr)]\n@@ -45,8 +45,8 @@\n #![warn(clippy::disallowed_methods)]\n #![warn(clippy::disallowed_types)]\n #![warn(clippy::mixed_read_write_in_expression)]\n-#![warn(clippy::for_loops_over_fallibles)]\n-#![warn(clippy::for_loops_over_fallibles)]\n+#![warn(for_loops_over_fallibles)]\n+#![warn(for_loops_over_fallibles)]\n #![warn(clippy::useless_conversion)]\n #![warn(clippy::match_result_ok)]\n #![warn(clippy::overly_complex_bool_expr)]\n@@ -65,6 +65,7 @@\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n #![warn(drop_bounds)]\n+#![warn(for_loops_over_fallibles)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "9e665047baaeb93e8c779239a0e61aba8a8d41c9", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -12,7 +12,7 @@\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n-#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n #![allow(clippy::overly_complex_bool_expr)]\n@@ -65,6 +65,7 @@\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n #![warn(clippy::drop_bounds)]\n+#![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]"}, {"sha": "63eb565185f07b31af72b755650758dcc6f5eeae", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cfc6fa1f0c847c749929925f9def0fdc690d417/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=7cfc6fa1f0c847c749929925f9def0fdc690d417", "patch": "@@ -54,17 +54,17 @@ error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_r\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n-error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n-error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n   --> $DIR/rename.rs:50:9\n@@ -174,59 +174,65 @@ error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n-error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n+error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:68:9\n    |\n+LL | #![warn(clippy::for_loops_over_fallibles)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n+\n+error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n+  --> $DIR/rename.rs:69:9\n+   |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 39 previous errors\n "}]}