{"sha": "f0843b89d1336962e9cb0572a40a790cd60ef4d9", "node_id": "C_kwDOAAsO6NoAKGYwODQzYjg5ZDEzMzY5NjJlOWNiMDU3MmE0MGE3OTBjZDYwZWY0ZDk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-23T16:19:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-23T21:03:51Z"}, "message": "effective visibility: Remove questionable optimizations\n\nFirst, they require eagerly calculating private visibility (current normal module), which is somewhat expensive.\nPrivate visibilities are also lost once calculated, instead of being cached in the table.\n\nSecond, I cannot prove that the optimizations are correct.\nMaybe they can be partially reinstated in the future in cases when it's cheap and provably correct to do them.\nThey will also probably be merged into `fn update` in that case.\n\nPartially fixes https://github.com/rust-lang/rust/issues/104249\nFixes https://github.com/rust-lang/rust/issues/104539", "tree": {"sha": "1dbaf038a39234324648fea240e0f37ee5960a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dbaf038a39234324648fea240e0f37ee5960a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0843b89d1336962e9cb0572a40a790cd60ef4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0843b89d1336962e9cb0572a40a790cd60ef4d9", "html_url": "https://github.com/rust-lang/rust/commit/f0843b89d1336962e9cb0572a40a790cd60ef4d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0843b89d1336962e9cb0572a40a790cd60ef4d9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f20f4ac42be55f309224ef365dfa2ca64359e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f20f4ac42be55f309224ef365dfa2ca64359e07", "html_url": "https://github.com/rust-lang/rust/commit/3f20f4ac42be55f309224ef365dfa2ca64359e07"}], "stats": {"total": 113, "additions": 70, "deletions": 43}, "files": [{"sha": "d32c2e9904321a865b416b4e6a00c43acf0f5dd2", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0843b89d1336962e9cb0572a40a790cd60ef4d9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0843b89d1336962e9cb0572a40a790cd60ef4d9/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=f0843b89d1336962e9cb0572a40a790cd60ef4d9", "patch": "@@ -4,7 +4,6 @@\n use crate::ty::{DefIdTree, TyCtxt, Visibility};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def::DefKind;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_span::def_id::LocalDefId;\n@@ -185,7 +184,6 @@ impl EffectiveVisibilities {\n                 );\n             }\n             let nominal_vis = tcx.visibility(def_id);\n-            let def_kind = tcx.opt_def_kind(def_id);\n             // FIXME: `rustc_privacy` is not yet updated for the new logic and can set\n             // effective visibilities that are larger than the nominal one.\n             if !nominal_vis.is_at_least(ev.reachable_through_impl_trait, tcx) && early {\n@@ -197,11 +195,6 @@ impl EffectiveVisibilities {\n                     nominal_vis\n                 );\n             }\n-            // Fully private items are never put into the table, this is important for performance.\n-            // FIXME: Fully private `mod` items are currently put into the table.\n-            if ev.reachable_through_impl_trait == private_vis && def_kind != Some(DefKind::Mod) {\n-                span_bug!(span, \"fully private item in the table {:?}: {:?}\", def_id, ev.direct);\n-            }\n         }\n     }\n }"}, {"sha": "32ab58b459a6f2fa79e504693a316337aa4f73a3", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f0843b89d1336962e9cb0572a40a790cd60ef4d9/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0843b89d1336962e9cb0572a40a790cd60ef4d9/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=f0843b89d1336962e9cb0572a40a790cd60ef4d9", "patch": "@@ -42,6 +42,24 @@ impl Resolver<'_> {\n     fn nearest_normal_mod(&mut self, def_id: LocalDefId) -> LocalDefId {\n         self.get_nearest_non_block_module(def_id.to_def_id()).nearest_parent_mod().expect_local()\n     }\n+\n+    fn private_vis_import(&mut self, binding: ImportId<'_>) -> Visibility {\n+        let NameBindingKind::Import { import, .. } = binding.kind else { unreachable!() };\n+        Visibility::Restricted(\n+            import\n+                .id()\n+                .map(|id| self.nearest_normal_mod(self.local_def_id(id)))\n+                .unwrap_or(CRATE_DEF_ID),\n+        )\n+    }\n+\n+    fn private_vis_def(&mut self, def_id: LocalDefId) -> Visibility {\n+        if def_id == CRATE_DEF_ID {\n+            Visibility::Public\n+        } else {\n+            Visibility::Restricted(self.nearest_normal_mod(def_id))\n+        }\n+    }\n }\n \n impl<'a, 'b> IntoDefIdTree for &'b mut Resolver<'a> {\n@@ -143,51 +161,23 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n         .copied()\n     }\n \n-    /// The update is guaranteed to not change the table and we can skip it.\n-    fn is_noop_update(\n-        &self,\n-        parent_id: ParentId<'a>,\n-        nominal_vis: Visibility,\n-        default_vis: Visibility,\n-    ) -> bool {\n-        nominal_vis == default_vis\n-            || match parent_id {\n-                ParentId::Def(def_id) => self.r.visibilities[&def_id],\n-                ParentId::Import(binding) => binding.vis.expect_local(),\n-            } == default_vis\n-    }\n-\n     fn update_import(&mut self, binding: ImportId<'a>, parent_id: ParentId<'a>) {\n-        let NameBindingKind::Import { import, .. } = binding.kind else { unreachable!() };\n         let nominal_vis = binding.vis.expect_local();\n-        let default_vis = Visibility::Restricted(\n-            import\n-                .id()\n-                .map(|id| self.r.nearest_normal_mod(self.r.local_def_id(id)))\n-                .unwrap_or(CRATE_DEF_ID),\n-        );\n-        if self.is_noop_update(parent_id, nominal_vis, default_vis) {\n-            return;\n-        }\n         self.changed |= self.import_effective_visibilities.update(\n             binding,\n             nominal_vis,\n-            |r| (default_vis, r),\n+            |r| (r.private_vis_import(binding), r),\n             self.effective_vis(parent_id),\n             parent_id.level(),\n             &mut *self.r,\n         );\n     }\n \n     fn update_def(&mut self, def_id: LocalDefId, nominal_vis: Visibility, parent_id: ParentId<'a>) {\n-        let default_vis = Visibility::Restricted(self.r.nearest_normal_mod(def_id));\n-        if self.is_noop_update(parent_id, nominal_vis, default_vis) {\n-            return;\n-        }\n         self.changed |= self.def_effective_visibilities.update(\n             def_id,\n             nominal_vis,\n-            |r| (if def_id == CRATE_DEF_ID { Visibility::Public } else { default_vis }, r),\n+            |r| (r.private_vis_def(def_id), r),\n             self.effective_vis(parent_id),\n             parent_id.level(),\n             &mut *self.r,"}, {"sha": "8d0602fa79f02ea06414251afd8437e2f184ac2b", "filename": "src/test/ui/privacy/effective_visibilities.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.rs?ref=f0843b89d1336962e9cb0572a40a790cd60ef4d9", "patch": "@@ -17,13 +17,13 @@ mod outer { //~ ERROR Direct: pub(crate), Reexported: pub(crate), Reachable: pub\n         }\n \n         #[rustc_effective_visibility]\n-        struct PrivStruct; //~ ERROR not in the table\n-                           //~| ERROR not in the table\n+        struct PrivStruct; //~ ERROR Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n+                           //~| ERROR Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n \n         #[rustc_effective_visibility]\n         pub union PubUnion { //~ ERROR Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n             #[rustc_effective_visibility]\n-            a: u8, //~ ERROR not in the table\n+            a: u8, //~ ERROR Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n             #[rustc_effective_visibility]\n             pub b: u8, //~ ERROR Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n         }"}, {"sha": "6a99afe64fee3f67cd2f410f58929e957a3f435f", "filename": "src/test/ui/privacy/effective_visibilities.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.stderr?ref=f0843b89d1336962e9cb0572a40a790cd60ef4d9", "patch": "@@ -22,13 +22,13 @@ error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImpl\n LL |         pub trait PubTrait {\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: not in the table\n+error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n   --> $DIR/effective_visibilities.rs:20:9\n    |\n LL |         struct PrivStruct;\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: not in the table\n+error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n   --> $DIR/effective_visibilities.rs:20:9\n    |\n LL |         struct PrivStruct;\n@@ -40,7 +40,7 @@ error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImpl\n LL |         pub union PubUnion {\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: not in the table\n+error: Direct: pub(self), Reexported: pub(self), Reachable: pub(self), ReachableThroughImplTrait: pub(self)\n   --> $DIR/effective_visibilities.rs:26:13\n    |\n LL |             a: u8,"}, {"sha": "8c524d32815b1dc8804bc99f400501e2e3774e2d", "filename": "src/test/ui/privacy/effective_visibilities_invariants.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities_invariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities_invariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities_invariants.rs?ref=f0843b89d1336962e9cb0572a40a790cd60ef4d9", "patch": "@@ -0,0 +1,12 @@\n+// Invariant checking doesn't ICE in some cases with errors (issue #104249).\n+\n+#![feature(staged_api)] //~ ERROR module has missing stability attribute\n+\n+pub mod m {} //~ ERROR module has missing stability attribute\n+\n+pub mod m { //~ ERROR the name `m` is defined multiple times\n+    // mod inner {} - ICE\n+    type Inner = u8;\n+}\n+\n+fn main() {}"}, {"sha": "fd205f4058ae0514c660236cb8ac1164cc4ee99a", "filename": "src/test/ui/privacy/effective_visibilities_invariants.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities_invariants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0843b89d1336962e9cb0572a40a790cd60ef4d9/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities_invariants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities_invariants.stderr?ref=f0843b89d1336962e9cb0572a40a790cd60ef4d9", "patch": "@@ -0,0 +1,32 @@\n+error[E0428]: the name `m` is defined multiple times\n+  --> $DIR/effective_visibilities_invariants.rs:7:1\n+   |\n+LL | pub mod m {}\n+   | --------- previous definition of the module `m` here\n+LL |\n+LL | pub mod m {\n+   | ^^^^^^^^^ `m` redefined here\n+   |\n+   = note: `m` must be defined only once in the type namespace of this module\n+\n+error: module has missing stability attribute\n+  --> $DIR/effective_visibilities_invariants.rs:3:1\n+   |\n+LL | / #![feature(staged_api)]\n+LL | |\n+LL | | pub mod m {}\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: module has missing stability attribute\n+  --> $DIR/effective_visibilities_invariants.rs:5:1\n+   |\n+LL | pub mod m {}\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0428`."}]}