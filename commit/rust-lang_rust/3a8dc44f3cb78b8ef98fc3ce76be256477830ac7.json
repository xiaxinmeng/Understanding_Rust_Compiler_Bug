{"sha": "3a8dc44f3cb78b8ef98fc3ce76be256477830ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOGRjNDRmM2NiNzhiOGVmOThmYzNjZTc2YmUyNTY0Nzc4MzBhYzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-12T02:22:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-12T02:22:51Z"}, "message": "Rollup merge of #61671 - koalatux:nth-back-range, r=KodrAus\n\nimplement nth_back for Range(Inclusive)\n\nThis is part of  #54054.", "tree": {"sha": "e943b7a59e111027ab9f8c56e0eba2626f80400c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e943b7a59e111027ab9f8c56e0eba2626f80400c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdAGH8CRBK7hj4Ov3rIwAAdHIIAKoqj9PD3S75AOOcID1vOmms\nEaFjXdRViUm7/WJHdnux6RRoVZvR/bpNAvXzbyHiS6RIgIt44Ir1SazUz38PUZRu\n3iJ9zCSUTyQC2pQ9hLTZGsVz4xy2djji4uAQkrQKaRhV3VlGzp6OUfh0gQwgx4SK\nxhesh9+ynm/u4Ur4zIO/4Db08NFJyUmwCF0XaKtRriM4VqY32FQkLBWqvTcVc+Ka\nF3dHT4PonlZ7w0WVi9I0BroY6nTP+ylPzNx4RKZQ7CnTijkO+pwqNQJkj76jVSh7\nEMW2TOSftVnR4xMZlnTFjYKZJc5pFU97ikxqEg0uKPDCkklCLgRzui8ToSHggxs=\n=LS2O\n-----END PGP SIGNATURE-----\n", "payload": "tree e943b7a59e111027ab9f8c56e0eba2626f80400c\nparent 9f22708ceda552784a42253523335533423f2b95\nparent 8590074a01364c2263f6e3c3c42e4137e2f77b65\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560306171 +0200\ncommitter GitHub <noreply@github.com> 1560306171 +0200\n\nRollup merge of #61671 - koalatux:nth-back-range, r=KodrAus\n\nimplement nth_back for Range(Inclusive)\n\nThis is part of  #54054.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7", "html_url": "https://github.com/rust-lang/rust/commit/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f22708ceda552784a42253523335533423f2b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f22708ceda552784a42253523335533423f2b95", "html_url": "https://github.com/rust-lang/rust/commit/9f22708ceda552784a42253523335533423f2b95"}, {"sha": "8590074a01364c2263f6e3c3c42e4137e2f77b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/8590074a01364c2263f6e3c3c42e4137e2f77b65", "html_url": "https://github.com/rust-lang/rust/commit/8590074a01364c2263f6e3c3c42e4137e2f77b65"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "efda3b263cc97fae94f08fb2dda1522424763779", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=3a8dc44f3cb78b8ef98fc3ce76be256477830ac7", "patch": "@@ -281,6 +281,19 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n             None\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<A> {\n+        if let Some(minus_n) = self.end.sub_usize(n) {\n+            if minus_n > self.start {\n+                self.end = minus_n.sub_one();\n+                return Some(self.end.clone())\n+            }\n+        }\n+\n+        self.end = self.start.clone();\n+        None\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -438,6 +451,34 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         })\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<A> {\n+        self.compute_is_empty();\n+        if self.is_empty.unwrap_or_default() {\n+            return None;\n+        }\n+\n+        if let Some(minus_n) = self.end.sub_usize(n) {\n+            use crate::cmp::Ordering::*;\n+\n+            match minus_n.partial_cmp(&self.start) {\n+                Some(Greater) => {\n+                    self.is_empty = Some(false);\n+                    self.end = minus_n.sub_one();\n+                    return Some(minus_n);\n+                }\n+                Some(Equal) => {\n+                    self.is_empty = Some(true);\n+                    return Some(minus_n);\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+        self.is_empty = Some(true);\n+        None\n+    }\n+\n     #[inline]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>"}, {"sha": "020618ae7aeedb04a7898b3bed2ad28ebb6d41c4", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8dc44f3cb78b8ef98fc3ce76be256477830ac7/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=3a8dc44f3cb78b8ef98fc3ce76be256477830ac7", "patch": "@@ -1657,6 +1657,23 @@ fn test_range_nth() {\n     assert_eq!(r, 20..20);\n }\n \n+#[test]\n+fn test_range_nth_back() {\n+    assert_eq!((10..15).nth_back(0), Some(14));\n+    assert_eq!((10..15).nth_back(1), Some(13));\n+    assert_eq!((10..15).nth_back(4), Some(10));\n+    assert_eq!((10..15).nth_back(5), None);\n+    assert_eq!((-120..80_i8).nth_back(199), Some(-120));\n+\n+    let mut r = 10..20;\n+    assert_eq!(r.nth_back(2), Some(17));\n+    assert_eq!(r, 10..17);\n+    assert_eq!(r.nth_back(2), Some(14));\n+    assert_eq!(r, 10..14);\n+    assert_eq!(r.nth_back(10), None);\n+    assert_eq!(r, 10..10);\n+}\n+\n #[test]\n fn test_range_from_nth() {\n     assert_eq!((10..).nth(0), Some(10));\n@@ -1714,6 +1731,26 @@ fn test_range_inclusive_nth() {\n     assert_eq!(ExactSizeIterator::is_empty(&r), true);\n }\n \n+#[test]\n+fn test_range_inclusive_nth_back() {\n+    assert_eq!((10..=15).nth_back(0), Some(15));\n+    assert_eq!((10..=15).nth_back(1), Some(14));\n+    assert_eq!((10..=15).nth_back(5), Some(10));\n+    assert_eq!((10..=15).nth_back(6), None);\n+    assert_eq!((-120..=80_i8).nth_back(200), Some(-120));\n+\n+    let mut r = 10_u8..=20;\n+    assert_eq!(r.nth_back(2), Some(18));\n+    assert_eq!(r, 10..=17);\n+    assert_eq!(r.nth_back(2), Some(15));\n+    assert_eq!(r, 10..=14);\n+    assert_eq!(r.is_empty(), false);\n+    assert_eq!(ExactSizeIterator::is_empty(&r), false);\n+    assert_eq!(r.nth_back(10), None);\n+    assert_eq!(r.is_empty(), true);\n+    assert_eq!(ExactSizeIterator::is_empty(&r), true);\n+}\n+\n #[test]\n fn test_range_step() {\n     #![allow(deprecated)]"}]}