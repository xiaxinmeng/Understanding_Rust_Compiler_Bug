{"sha": "e5d85f917b8965a5e62513c17cbb887366b152bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZDg1ZjkxN2I4OTY1YTVlNjI1MTNjMTdjYmI4ODczNjZiMTUyYmM=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-08-16T23:25:24Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-08-30T18:58:03Z"}, "message": "allow reordering of the last field of a MaybeUnsized struct if it's a ZST", "tree": {"sha": "d17f528b784e3006e339d4dfbf5dfc61274873c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d17f528b784e3006e339d4dfbf5dfc61274873c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5d85f917b8965a5e62513c17cbb887366b152bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d85f917b8965a5e62513c17cbb887366b152bc", "html_url": "https://github.com/rust-lang/rust/commit/e5d85f917b8965a5e62513c17cbb887366b152bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5d85f917b8965a5e62513c17cbb887366b152bc/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "html_url": "https://github.com/rust-lang/rust/commit/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "4038deb32334160c2cbf0345fd6d4225bf2f77e3", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5d85f917b8965a5e62513c17cbb887366b152bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d85f917b8965a5e62513c17cbb887366b152bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=e5d85f917b8965a5e62513c17cbb887366b152bc", "patch": "@@ -289,25 +289,32 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let optimize = !repr.inhibit_struct_field_reordering_opt();\n         if optimize {\n-            let end =\n-                if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };\n-            let optimizing = &mut inverse_memory_index[..end];\n             let field_align = |f: &TyAndLayout<'_>| {\n                 if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }\n             };\n             match kind {\n-                StructKind::AlwaysSized | StructKind::MaybeUnsized => {\n-                    optimizing.sort_by_key(|&x| {\n+                StructKind::AlwaysSized => {\n+                    inverse_memory_index.sort_by_key(|&x| {\n                         // Place ZSTs first to avoid \"interesting offsets\",\n                         // especially with only one or two non-ZST fields.\n                         let f = &fields[x as usize];\n                         (!f.is_zst(), cmp::Reverse(field_align(f)))\n                     });\n                 }\n+                StructKind::MaybeUnsized => {\n+                    // Sort in descending alignment, except for the last field,\n+                    // which may be accessed through an unsized type.\n+                    inverse_memory_index[..fields.len() - 1]\n+                        .sort_by_key(|&x| cmp::Reverse(field_align(&fields[x as usize])));\n+                    // Place ZSTs first to avoid \"interesting offsets\".\n+                    // This will reorder the last field if it is a ZST, which is okay because\n+                    // there's nothing in memory that could be accessed through an unsized type.\n+                    inverse_memory_index.sort_by_key(|&x| !fields[x as usize].is_zst());\n+                }\n                 StructKind::Prefixed(..) => {\n                     // Sort in ascending alignment so that the layout stay optimal\n                     // regardless of the prefix\n-                    optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n+                    inverse_memory_index.sort_by_key(|&x| field_align(&fields[x as usize]));\n                 }\n             }\n         }"}]}