{"sha": "3d5dbcb44ad3e023e88959da0b301ee382b2f74f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNWRiY2I0NGFkM2UwMjNlODg5NTlkYTBiMzAxZWUzODJiMmY3NGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T15:38:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "simplify parse_bottom_expr more", "tree": {"sha": "59542721728ad1817a22b36aa7a9d820bce2dfed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59542721728ad1817a22b36aa7a9d820bce2dfed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d5dbcb44ad3e023e88959da0b301ee382b2f74f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5dbcb44ad3e023e88959da0b301ee382b2f74f", "html_url": "https://github.com/rust-lang/rust/commit/3d5dbcb44ad3e023e88959da0b301ee382b2f74f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d5dbcb44ad3e023e88959da0b301ee382b2f74f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "948ff674f927c571bd43acf65bda9a488b7f640e", "url": "https://api.github.com/repos/rust-lang/rust/commits/948ff674f927c571bd43acf65bda9a488b7f640e", "html_url": "https://github.com/rust-lang/rust/commit/948ff674f927c571bd43acf65bda9a488b7f640e"}], "stats": {"total": 154, "additions": 76, "deletions": 78}, "files": [{"sha": "4edfbc4ec9ff0029fd0756ab16c58b48d75b66a7", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 76, "deletions": 78, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/3d5dbcb44ad3e023e88959da0b301ee382b2f74f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d5dbcb44ad3e023e88959da0b301ee382b2f74f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=3d5dbcb44ad3e023e88959da0b301ee382b2f74f", "patch": "@@ -824,90 +824,88 @@ impl<'a> Parser<'a> {\n \n         // Note: when adding new syntax here, don't forget to adjust `TokenKind::can_begin_expr()`.\n         let lo = self.token.span;\n-        match self.token.kind {\n+        if let token::Literal(_) = self.token.kind {\n             // This match arm is a special-case of the `_` match arm below and\n             // could be removed without changing functionality, but it's faster\n             // to have it here, especially for programs with large constants.\n-            token::Literal(_) => self.parse_lit_expr(attrs),\n-            token::OpenDelim(token::Paren) => self.parse_tuple_parens_expr(attrs),\n-            token::OpenDelim(token::Brace) => {\n-                self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)\n-            }\n-            token::BinOp(token::Or) | token::OrOr => self.parse_closure_expr(attrs),\n-            token::OpenDelim(token::Bracket) => self.parse_array_or_repeat_expr(attrs),\n-            _ => {\n-                if self.eat_lt() {\n-                    let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n-                    Ok(self.mk_expr(lo.to(path.span), ExprKind::Path(Some(qself), path), attrs))\n-                } else if self.token.is_path_start() {\n-                    self.parse_path_start_expr(attrs)\n-                } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n-                    self.parse_closure_expr(attrs)\n-                } else if self.eat_keyword(kw::If) {\n-                    self.parse_if_expr(attrs)\n-                } else if self.eat_keyword(kw::For) {\n-                    self.parse_for_expr(None, self.prev_span, attrs)\n-                } else if self.eat_keyword(kw::While) {\n-                    self.parse_while_expr(None, self.prev_span, attrs)\n-                } else if let Some(label) = self.eat_label() {\n-                    self.parse_labeled_expr(label, attrs)\n-                } else if self.eat_keyword(kw::Loop) {\n-                    self.parse_loop_expr(None, self.prev_span, attrs)\n-                } else if self.eat_keyword(kw::Continue) {\n-                    let kind = ExprKind::Continue(self.eat_label());\n-                    Ok(self.mk_expr(lo.to(self.prev_span), kind, attrs))\n-                } else if self.eat_keyword(kw::Match) {\n-                    let match_sp = self.prev_span;\n-                    self.parse_match_expr(attrs).map_err(|mut err| {\n-                        err.span_label(match_sp, \"while parsing this match expression\");\n-                        err\n-                    })\n-                } else if self.eat_keyword(kw::Unsafe) {\n-                    let mode = BlockCheckMode::Unsafe(ast::UserProvided);\n-                    self.parse_block_expr(None, lo, mode, attrs)\n-                } else if self.is_do_catch_block() {\n-                    self.recover_do_catch(attrs)\n-                } else if self.is_try_block() {\n-                    self.expect_keyword(kw::Try)?;\n-                    self.parse_try_block(lo, attrs)\n-                } else if self.eat_keyword(kw::Return) {\n-                    self.parse_return_expr(attrs)\n-                } else if self.eat_keyword(kw::Break) {\n-                    self.parse_break_expr(attrs)\n-                } else if self.eat_keyword(kw::Yield) {\n-                    self.parse_yield_expr(attrs)\n-                } else if self.eat_keyword(kw::Let) {\n-                    self.parse_let_expr(attrs)\n-                } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n-                    // Don't complain about bare semicolons after unclosed braces\n-                    // recovery in order to keep the error count down. Fixing the\n-                    // delimiters will possibly also fix the bare semicolon found in\n-                    // expression context. For example, silence the following error:\n-                    //\n-                    //     error: expected expression, found `;`\n-                    //      --> file.rs:2:13\n-                    //       |\n-                    //     2 |     foo(bar(;\n-                    //       |             ^ expected expression\n-                    self.bump();\n-                    Ok(self.mk_expr_err(self.token.span))\n-                } else if self.token.span.rust_2018() {\n-                    // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.\n-                    if self.check_keyword(kw::Async) {\n-                        if self.is_async_block() { // Check for `async {` and `async move {`.\n-                            self.parse_async_block(attrs)\n-                        } else {\n-                            self.parse_closure_expr(attrs)\n-                        }\n-                    } else if self.eat_keyword(kw::Await) {\n-                        self.recover_incorrect_await_syntax(lo, self.prev_span, attrs)\n-                    } else {\n-                        self.parse_lit_expr(attrs)\n-                    }\n+            self.parse_lit_expr(attrs)\n+        } else if self.check(&token::OpenDelim(token::Paren)) {\n+            self.parse_tuple_parens_expr(attrs)\n+        } else if self.check(&token::OpenDelim(token::Brace)) {\n+            self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)\n+        } else if self.check(&token::BinOp(token::Or)) || self.check(&token::OrOr) {\n+            self.parse_closure_expr(attrs)\n+        } else if self.check(&token::OpenDelim(token::Bracket)) {\n+            self.parse_array_or_repeat_expr(attrs)\n+        } else if self.eat_lt() {\n+            let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n+            Ok(self.mk_expr(lo.to(path.span), ExprKind::Path(Some(qself), path), attrs))\n+        } else if self.token.is_path_start() {\n+            self.parse_path_start_expr(attrs)\n+        } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n+            self.parse_closure_expr(attrs)\n+        } else if self.eat_keyword(kw::If) {\n+            self.parse_if_expr(attrs)\n+        } else if self.eat_keyword(kw::For) {\n+            self.parse_for_expr(None, self.prev_span, attrs)\n+        } else if self.eat_keyword(kw::While) {\n+            self.parse_while_expr(None, self.prev_span, attrs)\n+        } else if let Some(label) = self.eat_label() {\n+            self.parse_labeled_expr(label, attrs)\n+        } else if self.eat_keyword(kw::Loop) {\n+            self.parse_loop_expr(None, self.prev_span, attrs)\n+        } else if self.eat_keyword(kw::Continue) {\n+            let kind = ExprKind::Continue(self.eat_label());\n+            Ok(self.mk_expr(lo.to(self.prev_span), kind, attrs))\n+        } else if self.eat_keyword(kw::Match) {\n+            let match_sp = self.prev_span;\n+            self.parse_match_expr(attrs).map_err(|mut err| {\n+                err.span_label(match_sp, \"while parsing this match expression\");\n+                err\n+            })\n+        } else if self.eat_keyword(kw::Unsafe) {\n+            self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)\n+        } else if self.is_do_catch_block() {\n+            self.recover_do_catch(attrs)\n+        } else if self.is_try_block() {\n+            self.expect_keyword(kw::Try)?;\n+            self.parse_try_block(lo, attrs)\n+        } else if self.eat_keyword(kw::Return) {\n+            self.parse_return_expr(attrs)\n+        } else if self.eat_keyword(kw::Break) {\n+            self.parse_break_expr(attrs)\n+        } else if self.eat_keyword(kw::Yield) {\n+            self.parse_yield_expr(attrs)\n+        } else if self.eat_keyword(kw::Let) {\n+            self.parse_let_expr(attrs)\n+        } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n+            // Don't complain about bare semicolons after unclosed braces\n+            // recovery in order to keep the error count down. Fixing the\n+            // delimiters will possibly also fix the bare semicolon found in\n+            // expression context. For example, silence the following error:\n+            //\n+            //     error: expected expression, found `;`\n+            //      --> file.rs:2:13\n+            //       |\n+            //     2 |     foo(bar(;\n+            //       |             ^ expected expression\n+            self.bump();\n+            Ok(self.mk_expr_err(self.token.span))\n+        } else if self.token.span.rust_2018() {\n+            // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.\n+            if self.check_keyword(kw::Async) {\n+                if self.is_async_block() { // Check for `async {` and `async move {`.\n+                    self.parse_async_block(attrs)\n                 } else {\n-                    self.parse_lit_expr(attrs)\n+                    self.parse_closure_expr(attrs)\n                 }\n+            } else if self.eat_keyword(kw::Await) {\n+                self.recover_incorrect_await_syntax(lo, self.prev_span, attrs)\n+            } else {\n+                self.parse_lit_expr(attrs)\n             }\n+        } else {\n+            self.parse_lit_expr(attrs)\n         }\n     }\n "}]}