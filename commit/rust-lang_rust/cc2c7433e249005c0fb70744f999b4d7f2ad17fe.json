{"sha": "cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMmM3NDMzZTI0OTAwNWMwZmI3MDc0NGY5OTliNGQ3ZjJhZDE3ZmU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-23T00:39:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-23T00:39:56Z"}, "message": "Merge pull request #2480 from topecongiro/issue-2476\n\nAvoid drifting macro body which is unformattable", "tree": {"sha": "1215cd7e6f433181d20628dd9ff70ec5bc020141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1215cd7e6f433181d20628dd9ff70ec5bc020141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaj2LcCRBK7hj4Ov3rIwAAdHIIAKwhiJgT/Stkk6DbBMojOEpf\n4l2K861BAQI8CJOzA4PzPoCFEjonwPYaqtdqjvh+H9eYiBONGQR9YBSbMDZjcbst\n33BrypzKCHemdcNOJa6QLjx4IPoy/Bn/LuW24RFPFc3CrCjWSuJOQ4a5C5v7EETb\nvgGD8CXXwbbuKc0M3TJCe7GNAymT5MrAwGn4+CkmXWoN3aEunqtEmzRZHDTTnmoC\n6jvRPUd5FaMl9CJbHSZhN2qnBuUBS5CfzVtz8Po3lSlVb2xtZsq6sI3CCykFOyWx\nfdUpsyCa673jhg3+qx7j+bxptolqIADkOZG3NApqH16CH5QqUr2Gw3Dzf/o/SvQ=\n=LXE1\n-----END PGP SIGNATURE-----\n", "payload": "tree 1215cd7e6f433181d20628dd9ff70ec5bc020141\nparent 8531d70c77efcfc659b08ecc68d49793ea7de089\nparent 9cdac82d4200dac769b37ad6c83682b4c5fbb1b1\nauthor Nick Cameron <nrc@ncameron.org> 1519346396 +1300\ncommitter GitHub <noreply@github.com> 1519346396 +1300\n\nMerge pull request #2480 from topecongiro/issue-2476\n\nAvoid drifting macro body which is unformattable"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "html_url": "https://github.com/rust-lang/rust/commit/cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8531d70c77efcfc659b08ecc68d49793ea7de089", "url": "https://api.github.com/repos/rust-lang/rust/commits/8531d70c77efcfc659b08ecc68d49793ea7de089", "html_url": "https://github.com/rust-lang/rust/commit/8531d70c77efcfc659b08ecc68d49793ea7de089"}, {"sha": "9cdac82d4200dac769b37ad6c83682b4c5fbb1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdac82d4200dac769b37ad6c83682b4c5fbb1b1", "html_url": "https://github.com/rust-lang/rust/commit/9cdac82d4200dac769b37ad6c83682b4c5fbb1b1"}], "stats": {"total": 125, "additions": 99, "deletions": 26}, "files": [{"sha": "d72b44eb7f36426b4ccf2903a758b049d8616e9a", "filename": "rustfmt-bin/build.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-bin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-bin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-bin%2Fbuild.rs?ref=cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "patch": "@@ -27,7 +27,9 @@ fn main() {\n // (git not installed or if this is not a git repository) just return an empty string.\n fn commit_info() -> String {\n     match (channel(), commit_hash(), commit_date()) {\n-        (channel, Some(hash), Some(date)) => format!(\"{} ({} {})\", channel, hash.trim_right(), date),\n+        (channel, Some(hash), Some(date)) => {\n+            format!(\"{} ({} {})\", channel, hash.trim_right(), date)\n+        }\n         _ => String::new(),\n     }\n }"}, {"sha": "8ce1166cfcdd2486429717638732ad72fa0af03e", "filename": "rustfmt-core/src/expr.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fexpr.rs?ref=cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "patch": "@@ -1908,12 +1908,16 @@ where\n         1\n     };\n     let used_width = extra_offset(callee_str, shape);\n-    let one_line_width = shape.width.checked_sub(used_width + 2 * paren_overhead)?;\n+    let one_line_width = shape\n+        .width\n+        .checked_sub(used_width + 2 * paren_overhead)\n+        .unwrap_or(0);\n \n     // 1 = \"(\" or \")\"\n     let one_line_shape = shape\n-        .offset_left(last_line_width(callee_str) + 1)?\n-        .sub_width(1)?;\n+        .offset_left(last_line_width(callee_str) + 1)\n+        .and_then(|shape| shape.sub_width(1))\n+        .unwrap_or(Shape { width: 0, ..shape });\n     let nested_shape = shape_from_indent_style(\n         context,\n         shape,\n@@ -1950,7 +1954,13 @@ where\n         );\n     }\n \n-    let args_shape = shape.sub_width(last_line_width(callee_str))?;\n+    let args_shape = Shape {\n+        width: shape\n+            .width\n+            .checked_sub(last_line_width(callee_str))\n+            .unwrap_or(0),\n+        ..shape\n+    };\n     Some(format!(\n         \"{}{}\",\n         callee_str,\n@@ -2317,9 +2327,16 @@ pub fn wrap_args_with_parens(\n     shape: Shape,\n     nested_shape: Shape,\n ) -> String {\n+    let paren_overhead = paren_overhead(context);\n+    let fits_one_line = args_str.len() + paren_overhead <= shape.width;\n+    let extend_width = if args_str.is_empty() {\n+        paren_overhead\n+    } else {\n+        paren_overhead / 2\n+    };\n     if !context.use_block_indent()\n-        || (context.inside_macro && !args_str.contains('\\n')\n-            && args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n+        || (context.inside_macro && !args_str.contains('\\n') && fits_one_line)\n+        || (is_extendable && extend_width <= shape.width)\n     {\n         let mut result = String::with_capacity(args_str.len() + 4);\n         if context.config.spaces_within_parens_and_brackets() && !args_str.is_empty() {\n@@ -2338,8 +2355,10 @@ pub fn wrap_args_with_parens(\n         let mut result =\n             String::with_capacity(args_str.len() + 2 + indent_str.len() + nested_indent_str.len());\n         result.push_str(\"(\");\n-        result.push_str(&nested_indent_str);\n-        result.push_str(args_str);\n+        if !args_str.is_empty() {\n+            result.push_str(&nested_indent_str);\n+            result.push_str(args_str);\n+        }\n         result.push_str(&indent_str);\n         result.push_str(\")\");\n         result"}, {"sha": "bb0f066e9573f0d6218642f192c79d5cd4e844e1", "filename": "rustfmt-core/src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fmacros.rs?ref=cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "patch": "@@ -38,7 +38,7 @@ use expr::{rewrite_array, rewrite_call_inner};\n use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n-use utils::{format_visibility, mk_sp};\n+use utils::{format_visibility, mk_sp, wrap_str};\n \n const FORCED_BRACKET_MACROS: &[&str] = &[\"vec!\"];\n \n@@ -810,6 +810,7 @@ impl MacroBranch {\n                 None => return None,\n             },\n         };\n+        let new_body = wrap_str(new_body, config.max_width(), shape)?;\n \n         // Indent the body since it is in a block.\n         let indent_str = body_indent.to_string(&config);"}, {"sha": "7f96a2299a3e6f19d03f4569cda39207851afa1e", "filename": "rustfmt-core/src/types.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Ftypes.rs?ref=cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "patch": "@@ -529,12 +529,9 @@ impl Rewrite for ast::TyParamBound {\n             ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::None) => {\n                 tref.rewrite(context, shape)\n             }\n-            ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::Maybe) => {\n-                Some(format!(\n-                    \"?{}\",\n-                    tref.rewrite(context, shape.offset_left(1)?)?\n-                ))\n-            }\n+            ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::Maybe) => Some(\n+                format!(\"?{}\", tref.rewrite(context, shape.offset_left(1)?)?),\n+            ),\n             ast::TyParamBound::RegionTyParamBound(ref l) => l.rewrite(context, shape),\n         }\n     }"}, {"sha": "dba1d78f0dd35e56ad756ff64f95e2df8d0abcca", "filename": "rustfmt-core/tests/source/macro_rules.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmacro_rules.rs?ref=cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "patch": "@@ -1,3 +1,5 @@\n+// rustfmt-error_on_line_overflow: false\n+\n macro_rules! m {\n \t// a\n \t($expr :expr,  $( $func : ident    ) *   ) => {\n@@ -50,12 +52,37 @@ macro m2 {\n }\n }\n \n-\n-// #2438\n+// #2438, #2476\n+macro_rules! m {\n+    () => {\n+        fn foo() {\n+            this_line_is_98_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+            );\n+        }\n+    }\n+}\n+macro_rules! m {\n+    () => {\n+        fn foo() {\n+            this_line_is_99_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+);\n+        }\n+    };\n+}\n+macro_rules! m {\n+    () => {\n+        fn foo() {\n+            this_line_is_100_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+);\n+        }\n+    };\n+}\n macro_rules! m {\n     () => {\n-        this_line_is_99_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n-        ); // this line is drifting\n+        fn foo() {\n+            this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+            );\n+        }\n     };\n }\n "}, {"sha": "4e4c9465fe834a193084b9a39979545f6e291fe9", "filename": "rustfmt-core/tests/target/configs/indent_style/block_call.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Ftests%2Ftarget%2Fconfigs%2Findent_style%2Fblock_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Ftests%2Ftarget%2Fconfigs%2Findent_style%2Fblock_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fconfigs%2Findent_style%2Fblock_call.rs?ref=cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "patch": "@@ -13,9 +13,9 @@ fn main() {\n         \"elit\",\n     );\n     // #1501\n-    let hyper = Arc::new(Client::with_connector(HttpsConnector::new(\n-        TlsClient::new(),\n-    )));\n+    let hyper = Arc::new(Client::with_connector(\n+        HttpsConnector::new(TlsClient::new()),\n+    ));\n \n     // chain\n     let x = yooooooooooooo"}, {"sha": "2136784dec77e2165f5a8db3b05961da1a694317", "filename": "rustfmt-core/tests/target/macro_rules.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c7433e249005c0fb70744f999b4d7f2ad17fe/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fmacro_rules.rs?ref=cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "patch": "@@ -1,3 +1,5 @@\n+// rustfmt-error_on_line_overflow: false\n+\n macro_rules! m {\n     // a\n     ($expr: expr, $($func: ident)*) => {{\n@@ -42,11 +44,36 @@ macro m2 {\n     }\n }\n \n-// #2438\n+// #2438, #2476\n macro_rules! m {\n     () => {\n-        this_line_is_99_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n-        ); // this line is drifting\n+        fn foo() {\n+            this_line_is_98_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx();\n+        }\n+    };\n+}\n+macro_rules! m {\n+    () => {\n+        fn foo() {\n+            this_line_is_99_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+            );\n+        }\n+    };\n+}\n+macro_rules! m {\n+    () => {\n+        fn foo() {\n+            this_line_is_100_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+            );\n+        }\n+    };\n+}\n+macro_rules! m {\n+    () => {\n+        fn foo() {\n+            this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n+            );\n+        }\n     };\n }\n "}]}