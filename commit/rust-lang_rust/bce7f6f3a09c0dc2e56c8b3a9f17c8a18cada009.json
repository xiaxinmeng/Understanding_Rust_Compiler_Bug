{"sha": "bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZTdmNmYzYTA5YzBkYzJlNTZjOGIzYTlmMTdjOGExOGNhZGEwMDk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-18T19:29:05Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-20T16:02:07Z"}, "message": "Fix debugger pretty printing of BTrees", "tree": {"sha": "499f78bdb537932572717c746170f623e42d9d85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499f78bdb537932572717c746170f623e42d9d85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009", "html_url": "https://github.com/rust-lang/rust/commit/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d85314a0008ec809054854dff55c09913b1e80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d85314a0008ec809054854dff55c09913b1e80f", "html_url": "https://github.com/rust-lang/rust/commit/4d85314a0008ec809054854dff55c09913b1e80f"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "cae64ef6665bb0b64fc5c827cca265f97c7104dd", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009", "patch": "@@ -370,12 +370,17 @@ def to_string(self):\n                 (\"(len: %i)\" % self.__val.get_wrapped_value()['map']['length']))\n \n     def children(self):\n-        root = self.__val.get_wrapped_value()['map']['root']\n-        node_ptr = root['node']\n-        i = 0\n-        for child in children_of_node(node_ptr, root['height'], False):\n-            yield (str(i), child)\n-            i = i + 1\n+        prev_idx = None\n+        innermap = GdbValue(self.__val.get_wrapped_value()['map'])\n+        if innermap.get_wrapped_value()['length'] > 0:\n+            root = GdbValue(innermap.get_wrapped_value()['root'])\n+            type_name = str(root.type.ty.name).replace('core::option::Option<', '')[:-1]\n+            root = root.get_wrapped_value().cast(gdb.lookup_type(type_name))\n+            node_ptr = root['node']\n+            i = 0\n+            for child in children_of_node(node_ptr, root['height'], False):\n+                yield (str(i), child)\n+                i = i + 1\n \n \n class RustStdBTreeMapPrinter(object):\n@@ -391,13 +396,16 @@ def to_string(self):\n                 (\"(len: %i)\" % self.__val.get_wrapped_value()['length']))\n \n     def children(self):\n-        root = self.__val.get_wrapped_value()['root']\n-        node_ptr = root['node']\n-        i = 0\n-        for child in children_of_node(node_ptr, root['height'], True):\n-            yield (str(i), child[0])\n-            yield (str(i), child[1])\n-            i = i + 1\n+        if self.__val.get_wrapped_value()['length'] > 0:\n+            root = GdbValue(self.__val.get_wrapped_value()['root'])\n+            type_name = str(root.type.ty.name).replace('core::option::Option<', '')[:-1]\n+            root = root.get_wrapped_value().cast(gdb.lookup_type(type_name))\n+            node_ptr = root['node']\n+            i = 0\n+            for child in children_of_node(node_ptr, root['height'], True):\n+                yield (str(i), child[0])\n+                yield (str(i), child[1])\n+                i = i + 1\n \n \n class RustStdStringPrinter(object):"}, {"sha": "3d2d88a676d0d911d196da7695d57fcef72097d8", "filename": "src/test/debuginfo/pretty-std-collections.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections.rs?ref=bce7f6f3a09c0dc2e56c8b3a9f17c8a18cada009", "patch": "@@ -17,35 +17,43 @@\n // gdb-command: print btree_set\n // gdb-check:$1 = BTreeSet<i32>(len: 15) = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}\n \n+// gdb-command: print empty_btree_set\n+// gdb-check:$2 = BTreeSet<i32>(len: 0)\n+\n // gdb-command: print btree_map\n-// gdb-check:$2 = BTreeMap<i32, i32>(len: 15) = {[0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9, [10] = 10, [11] = 11, [12] = 12, [13] = 13, [14] = 14}\n+// gdb-check:$3 = BTreeMap<i32, i32>(len: 15) = {[0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9, [10] = 10, [11] = 11, [12] = 12, [13] = 13, [14] = 14}\n+\n+// gdb-command: print empty_btree_map\n+// gdb-check:$4 = BTreeMap<i32, u32>(len: 0)\n \n // gdb-command: print vec_deque\n-// gdb-check:$3 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n+// gdb-check:$5 = VecDeque<i32>(len: 3, cap: 8) = {5, 3, 7}\n \n // gdb-command: print vec_deque2\n-// gdb-check:$4 = VecDeque<i32>(len: 7, cap: 8) = {2, 3, 4, 5, 6, 7, 8}\n+// gdb-check:$6 = VecDeque<i32>(len: 7, cap: 8) = {2, 3, 4, 5, 6, 7, 8}\n \n #![allow(unused_variables)]\n-use std::collections::BTreeSet;\n use std::collections::BTreeMap;\n+use std::collections::BTreeSet;\n use std::collections::VecDeque;\n \n-\n fn main() {\n-\n     // BTreeSet\n     let mut btree_set = BTreeSet::new();\n     for i in 0..15 {\n         btree_set.insert(i);\n     }\n \n+    let mut empty_btree_set: BTreeSet<i32> = BTreeSet::new();\n+\n     // BTreeMap\n     let mut btree_map = BTreeMap::new();\n     for i in 0..15 {\n         btree_map.insert(i, i);\n     }\n \n+    let mut empty_btree_map: BTreeMap<i32, u32> = BTreeMap::new();\n+\n     // VecDeque\n     let mut vec_deque = VecDeque::new();\n     vec_deque.push_back(5);\n@@ -63,4 +71,6 @@ fn main() {\n     zzz(); // #break\n }\n \n-fn zzz() { () }\n+fn zzz() {\n+    ()\n+}"}]}