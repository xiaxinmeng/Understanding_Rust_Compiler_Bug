{"sha": "15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTQwYzdlZTg1ZmZmNDFmMzRhMmI3MGMyOGNjYTNiY2RlYzEwMTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-07-24T01:47:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-07-30T15:44:31Z"}, "message": "Do not discard `?Sized` type params and suggest their removal", "tree": {"sha": "1a732d38fc28716a9f4c3a6eb72ae2f5badd0300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a732d38fc28716a9f4c3a6eb72ae2f5badd0300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "html_url": "https://github.com/rust-lang/rust/commit/15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb3394cbdf0622c9d0c292feb55db0f4c828dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb3394cbdf0622c9d0c292feb55db0f4c828dc3", "html_url": "https://github.com/rust-lang/rust/commit/5fb3394cbdf0622c9d0c292feb55db0f4c828dc3"}], "stats": {"total": 634, "additions": 615, "deletions": 19}, "files": [{"sha": "3acf69ec2b7d0139873485048b751e2ce406e655", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -1443,16 +1443,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             ImplTraitContext::disallowed(),\n                         ),\n                         bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n-                        bounds: this.arena.alloc_from_iter(bounds.iter().filter_map(|bound| {\n-                            match *bound {\n-                                // Ignore `?Trait` bounds.\n-                                // They were copied into type parameters already.\n-                                GenericBound::Trait(_, TraitBoundModifier::Maybe) => None,\n-                                _ => Some(\n-                                    this.lower_param_bound(bound, ImplTraitContext::disallowed()),\n-                                ),\n-                            }\n-                        })),\n+                        bounds: this.arena.alloc_from_iter(bounds.iter().map(\n+                            |bound| match bound {\n+                                // We used to ignore `?Trait` bounds, as they were copied into type\n+                                // parameters already, but we need to keep them around only for\n+                                // diagnostics when we suggest removal of `?Sized` bounds. See\n+                                // `suggest_constraining_type_param`. This will need to change if\n+                                // we ever allow something *other* than `?Sized`.\n+                                GenericBound::Trait(p, TraitBoundModifier::Maybe) => {\n+                                    hir::GenericBound::Unsized(p.span)\n+                                }\n+                                _ => this.lower_param_bound(bound, ImplTraitContext::disallowed()),\n+                            },\n+                        )),\n                         span,\n                     })\n                 })"}, {"sha": "581f177ad14f66339a75d8192ffbfe21c8ddaf63", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -2160,12 +2160,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         tpb: &GenericBound,\n         itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::GenericBound<'hir> {\n-        match *tpb {\n-            GenericBound::Trait(ref ty, modifier) => hir::GenericBound::Trait(\n-                self.lower_poly_trait_ref(ty, itctx),\n-                self.lower_trait_bound_modifier(modifier),\n+        match tpb {\n+            GenericBound::Trait(p, modifier) => hir::GenericBound::Trait(\n+                self.lower_poly_trait_ref(p, itctx),\n+                self.lower_trait_bound_modifier(*modifier),\n             ),\n-            GenericBound::Outlives(ref lifetime) => {\n+            GenericBound::Outlives(lifetime) => {\n                 hir::GenericBound::Outlives(self.lower_lifetime(lifetime))\n             }\n         }"}, {"sha": "aac5d296f17b55d3ca8664f470a08d7cc1b7a7ea", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -442,6 +442,7 @@ pub enum GenericBound<'hir> {\n     Trait(PolyTraitRef<'hir>, TraitBoundModifier),\n     // FIXME(davidtwco): Introduce `PolyTraitRef::LangItem`\n     LangItemTrait(LangItem, Span, HirId, &'hir GenericArgs<'hir>),\n+    Unsized(Span),\n     Outlives(Lifetime),\n }\n \n@@ -458,6 +459,7 @@ impl GenericBound<'_> {\n             GenericBound::Trait(t, ..) => t.span,\n             GenericBound::LangItemTrait(_, span, ..) => *span,\n             GenericBound::Outlives(l) => l.span,\n+            GenericBound::Unsized(span) => *span,\n         }\n     }\n }"}, {"sha": "ae186d66004d79ece9587de502baaeffd6893199", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -889,6 +889,7 @@ pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericB\n             visitor.visit_generic_args(span, args);\n         }\n         GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n+        GenericBound::Unsized(_) => {}\n     }\n }\n "}, {"sha": "2b372392575e99c5e0522d2b7a18523e1da4ea3e", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -2230,6 +2230,9 @@ impl<'a> State<'a> {\n                 GenericBound::Outlives(lt) => {\n                     self.print_lifetime(lt);\n                 }\n+                GenericBound::Unsized(_) => {\n+                    self.s.word(\"?Sized\");\n+                }\n             }\n         }\n     }"}, {"sha": "4cfb104bee3a49473d7981fcf345705e3c89d108", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -2,6 +2,7 @@\n \n use crate::ty::TyKind::*;\n use crate::ty::{InferTy, TyCtxt, TyS};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -105,6 +106,116 @@ pub fn suggest_arbitrary_trait_bound(\n     true\n }\n \n+fn suggest_removing_unsized_bound(\n+    generics: &hir::Generics<'_>,\n+    err: &mut DiagnosticBuilder<'_>,\n+    param_name: &str,\n+    param: &hir::GenericParam<'_>,\n+    def_id: Option<DefId>,\n+) {\n+    // See if there's a `?Sized` bound that can be removed to suggest that.\n+    // First look at the `where` clause because we can have `where T: ?Sized`, but that\n+    // `?Sized` bound is *also* included in the `GenericParam` as a bound, which breaks\n+    // the spans. Hence the somewhat involved logic that follows.\n+    let mut where_unsized_bounds = FxHashSet::default();\n+    for (where_pos, predicate) in generics.where_clause.predicates.iter().enumerate() {\n+        match predicate {\n+            WherePredicate::BoundPredicate(WhereBoundPredicate {\n+                bounded_ty:\n+                    hir::Ty {\n+                        kind:\n+                            hir::TyKind::Path(hir::QPath::Resolved(\n+                                None,\n+                                hir::Path {\n+                                    segments: [segment],\n+                                    res: hir::def::Res::Def(hir::def::DefKind::TyParam, _),\n+                                    ..\n+                                },\n+                            )),\n+                        ..\n+                    },\n+                bounds,\n+                span,\n+                ..\n+            }) if segment.ident.as_str() == param_name => {\n+                for (pos, bound) in bounds.iter().enumerate() {\n+                    match bound {\n+                        hir::GenericBound::Unsized(_) => {}\n+                        hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe)\n+                            if poly.trait_ref.trait_def_id() == def_id => {}\n+                        _ => continue,\n+                    }\n+                    let sp = match (\n+                        bounds.len(),\n+                        pos,\n+                        generics.where_clause.predicates.len(),\n+                        where_pos,\n+                    ) {\n+                        // where T: ?Sized\n+                        // ^^^^^^^^^^^^^^^\n+                        (1, _, 1, _) => generics.where_clause.span,\n+                        // where Foo: Bar, T: ?Sized,\n+                        //               ^^^^^^^^^^^\n+                        (1, _, len, pos) if pos == len - 1 => generics.where_clause.predicates\n+                            [pos - 1]\n+                            .span()\n+                            .shrink_to_hi()\n+                            .to(*span),\n+                        // where T: ?Sized, Foo: Bar,\n+                        //       ^^^^^^^^^^^\n+                        (1, _, _, pos) => {\n+                            span.until(generics.where_clause.predicates[pos + 1].span())\n+                        }\n+                        // where T: ?Sized + Bar, Foo: Bar,\n+                        //          ^^^^^^^^^\n+                        (_, 0, _, _) => bound.span().to(bounds[1].span().shrink_to_lo()),\n+                        // where T: Bar + ?Sized, Foo: Bar,\n+                        //             ^^^^^^^^^\n+                        (_, pos, _, _) => bounds[pos - 1].span().shrink_to_hi().to(bound.span()),\n+                    };\n+                    where_unsized_bounds.insert(bound.span());\n+                    err.span_suggestion_verbose(\n+                        sp,\n+                        \"consider removing the `?Sized` bound to make the \\\n+                            type parameter `Sized`\",\n+                        String::new(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+    for (pos, bound) in param.bounds.iter().enumerate() {\n+        match bound {\n+            hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe)\n+                if poly.trait_ref.trait_def_id() == def_id\n+                    && !where_unsized_bounds.contains(&bound.span()) =>\n+            {\n+                let sp = match (param.bounds.len(), pos) {\n+                    // T: ?Sized,\n+                    //  ^^^^^^^^\n+                    (1, _) => param.span.shrink_to_hi().to(bound.span()),\n+                    // T: ?Sized + Bar,\n+                    //    ^^^^^^^^^\n+                    (_, 0) => bound.span().to(param.bounds[1].span().shrink_to_lo()),\n+                    // T: Bar + ?Sized,\n+                    //       ^^^^^^^^^\n+                    (_, pos) => param.bounds[pos - 1].span().shrink_to_hi().to(bound.span()),\n+                };\n+                err.span_suggestion_verbose(\n+                    sp,\n+                    \"consider removing the `?Sized` bound to make the type parameter \\\n+                        `Sized`\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n /// Suggest restricting a type param with a new bound.\n pub fn suggest_constraining_type_param(\n     tcx: TyCtxt<'_>,\n@@ -130,6 +241,7 @@ pub fn suggest_constraining_type_param(\n     if def_id == tcx.lang_items().sized_trait() {\n         // Type parameters are already `Sized` by default.\n         err.span_label(param.span, &format!(\"this type parameter needs to be `{}`\", constraint));\n+        suggest_removing_unsized_bound(generics, err, param_name, param, def_id);\n         return true;\n     }\n     let mut suggest_restrict = |span| {"}, {"sha": "34302c3fb429f214ed25390dedebaaf9cd0cf5ad", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -689,6 +689,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     (Some(self.tcx.require_lang_item(lang_item, Some(span))), span)\n                 }\n                 hir::GenericBound::Outlives(..) => continue,\n+                hir::GenericBound::Unsized(_) => continue,\n             };\n \n             if let Some(id) = def_id {"}, {"sha": "92583f2b0ea9b1f4f3f35052255c75a2b33ffe08", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -943,7 +943,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         false,\n                     );\n                 }\n-                hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe) => {}\n+                hir::GenericBound::Trait(_, hir::TraitBoundModifier::Maybe)\n+                | hir::GenericBound::Unsized(_) => {}\n                 hir::GenericBound::LangItemTrait(lang_item, span, hir_id, args) => self\n                     .instantiate_lang_item_trait_ref(\n                         lang_item, span, hir_id, args, param_ty, bounds,"}, {"sha": "ce74d6fec9eae95deadc97795c8f2773e19bc4cf", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -2230,7 +2230,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                             let constness = match modifier {\n                                 hir::TraitBoundModifier::MaybeConst => hir::Constness::NotConst,\n                                 hir::TraitBoundModifier::None => constness,\n-                                hir::TraitBoundModifier::Maybe => bug!(\"this wasn't handled\"),\n+                                // We ignore `where T: ?Sized`, it is already part of\n+                                // type parameter `T`.\n+                                hir::TraitBoundModifier::Maybe => continue,\n                             };\n \n                             let mut bounds = Bounds::default();\n@@ -2260,6 +2262,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                             predicates.extend(bounds.predicates(tcx, ty));\n                         }\n \n+                        hir::GenericBound::Unsized(_) => {}\n+\n                         hir::GenericBound::Outlives(lifetime) => {\n                             let region =\n                                 <dyn AstConv<'_>>::ast_region_to_region(&icx, lifetime, None);\n@@ -2521,6 +2525,7 @@ fn predicates_from_bound<'tcx>(\n             );\n             bounds.predicates(astconv.tcx(), param_ty)\n         }\n+        hir::GenericBound::Unsized(_) => vec![],\n         hir::GenericBound::Outlives(ref lifetime) => {\n             let region = astconv.ast_region_to_region(lifetime, None);\n             let pred = ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(param_ty, region))"}, {"sha": "75ea30bb565f1b8c250e76d2babe04596a501740", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -128,6 +128,7 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> GenericBound {\n         match *self {\n             hir::GenericBound::Outlives(lt) => GenericBound::Outlives(lt.clean(cx)),\n+            hir::GenericBound::Unsized(_) => GenericBound::maybe_sized(cx),\n             hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n                 let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n@@ -562,13 +563,19 @@ impl Clean<Generics> for hir::Generics<'_> {\n                 WherePredicate::BoundPredicate {\n                     ty: Generic(ref name), ref mut bounds, ..\n                 } => {\n-                    if bounds.is_empty() {\n+                    if let [] | [GenericBound::TraitBound(_, hir::TraitBoundModifier::Maybe)] =\n+                        &bounds[..]\n+                    {\n                         for param in &mut generics.params {\n                             match param.kind {\n                                 GenericParamDefKind::Lifetime => {}\n                                 GenericParamDefKind::Type { bounds: ref mut ty_bounds, .. } => {\n                                     if &param.name == name {\n                                         mem::swap(bounds, ty_bounds);\n+                                        // We now keep track of `?Sized` obligations in the HIR.\n+                                        // If we don't clear `ty_bounds` we end up with\n+                                        // `fn foo<X: ?Sized>(_: X) where X: ?Sized`.\n+                                        ty_bounds.clear();\n                                         break;\n                                     }\n                                 }"}, {"sha": "a9f1d0eb657183adfeced65c396dc702e2ae9085", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -10,6 +10,11 @@ LL |     if std::mem::size_of::<T>() == 0 {\n    |\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | pub const fn is_zst<T>() -> usize {\n+   |                     --\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:16:12\n@@ -21,6 +26,10 @@ LL |     value: T,\n    |\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | pub struct AtLeastByte<T> {\n+   |                        --\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,"}, {"sha": "173a14716635db8762044adb87b4d9e41a37020e", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -17,6 +17,10 @@ LL |     value: T,\n    |\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | pub struct AtLeastByte<T> {\n+   |                        --\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,"}, {"sha": "6c57dd9316fbd3f29d1daf2ac4eec5ec2e0c3738", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -7,6 +7,10 @@ LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = note: required for the cast to the object type `dyn Foo`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn test1<T: Foo>(t: &T) {\n+   |            --\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n@@ -17,6 +21,10 @@ LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = note: required for the cast to the object type `dyn Foo`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn test2<T: Foo>(t: &T) {\n+   |            --\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:18:28"}, {"sha": "64e061a89b410e053af1a0ed925d35b425667a63", "filename": "src/test/ui/packed/issue-27060-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-2.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -8,6 +8,10 @@ LL |     data: T,\n    |\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | pub struct Bad<T> {\n+   |                --\n help: borrowed types always have a statically known size\n    |\n LL |     data: &T,"}, {"sha": "ac3902dc6de9a349e45547fda6145315db05e340", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -91,6 +91,10 @@ LL | struct X<T>(T);\n    |          ^  - ...if indirection were used here: `Box<T>`\n    |          |\n    |          this could be changed to `T: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | struct Struct5<T>{\n+   |                --\n \n error: aborting due to 5 previous errors\n "}, {"sha": "035b8ef1bdebcc1f10c17b927850e88eeeff5f2f", "filename": "src/test/ui/trait-bounds/unsized-bound.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.rs?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -0,0 +1,32 @@\n+trait Trait<A> {}\n+impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n+//~^ ERROR E0277\n+//~| ERROR E0277\n+impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n+//~^ ERROR E0277\n+//~| ERROR E0277\n+//~| ERROR E0277\n+trait Trait2<A> {}\n+impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n+//~^ ERROR E0277\n+//~| ERROR E0277\n+trait Trait3<A> {}\n+impl<A> Trait3<A> for A where A: ?Sized {}\n+//~^ ERROR E0277\n+trait Trait4<A> {}\n+impl<A: ?Sized> Trait4<A> for A {}\n+//~^ ERROR E0277\n+trait Trait5<A, B> {}\n+impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n+//~^ ERROR E0277\n+trait Trait6<A, B> {}\n+impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n+//~^ ERROR E0277\n+trait Trait7<A, B> {}\n+impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n+//~^ ERROR E0277\n+trait Trait8<A, B> {}\n+impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n+//~^ ERROR E0277\n+\n+fn main() {}"}, {"sha": "30163ab7978134fce8211bd2f949acf5bf4ea2fe", "filename": "src/test/ui/trait-bounds/unsized-bound.stderr", "status": "added", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -0,0 +1,234 @@\n+error[E0277]: the size for values of type `B` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:2:12\n+   |\n+LL | trait Trait<A> {}\n+   |             - required by this bound in `Trait`\n+LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n+   |         -  ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         this type parameter needs to be `std::marker::Sized`\n+   |\n+   = note: required because it appears within the type `(A, B)`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, {}\n+   |                                                   --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait<A: ?Sized> {}\n+   |              ^^^^^^^^\n+\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:2:30\n+   |\n+LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n+   |      -                       ^^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+   = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A, B> Trait<(A, B)> for (A, B) where B: ?Sized, {}\n+   |                                          --\n+\n+error[E0277]: the size for values of type `C` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:5:31\n+   |\n+LL | trait Trait<A> {}\n+   |             - required by this bound in `Trait`\n+...\n+LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n+   |                    -          ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    |\n+   |                    this type parameter needs to be `std::marker::Sized`\n+   |\n+   = note: required because it appears within the type `(A, B, C)`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A, B: ?Sized, C> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n+   |                    --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait<A: ?Sized> {}\n+   |              ^^^^^^^^\n+\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:5:52\n+   |\n+LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n+   |      -                                             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+   = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C)  {}\n+   |                                                             --\n+\n+error[E0277]: the size for values of type `B` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:5:52\n+   |\n+LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n+   |         -                                          ^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         this type parameter needs to be `std::marker::Sized`\n+   |\n+   = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A, B, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n+   |         --\n+\n+error[E0277]: the size for values of type `B` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:10:28\n+   |\n+LL | trait Trait2<A> {}\n+   |              - required by this bound in `Trait2`\n+LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n+   |                 -          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                 |\n+   |                 this type parameter needs to be `std::marker::Sized`\n+   |\n+   = note: required because it appears within the type `(A, B)`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A: ?Sized, B> Trait2<(A, B)> for (A, B) {}\n+   |                 --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait2<A: ?Sized> {}\n+   |               ^^^^^^^^\n+\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:10:47\n+   |\n+LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n+   |      -                                        ^^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+   = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n+   |      --\n+\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:14:9\n+   |\n+LL | trait Trait3<A> {}\n+   |              - required by this bound in `Trait3`\n+LL | impl<A> Trait3<A> for A where A: ?Sized {}\n+   |      -  ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A> Trait3<A> for A  {}\n+   |                        --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait3<A: ?Sized> {}\n+   |               ^^^^^^^^\n+\n+error[E0277]: the size for values of type `A` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:17:17\n+   |\n+LL | trait Trait4<A> {}\n+   |              - required by this bound in `Trait4`\n+LL | impl<A: ?Sized> Trait4<A> for A {}\n+   |      -          ^^^^^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<A> Trait4<A> for A {}\n+   |      --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait4<A: ?Sized> {}\n+   |               ^^^^^^^^\n+\n+error[E0277]: the size for values of type `X` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:20:12\n+   |\n+LL | trait Trait5<A, B> {}\n+   |              - required by this bound in `Trait5`\n+LL | impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n+   |      -     ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X, Y> Trait5<X, Y> for X  {}\n+   |                              --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait5<A: ?Sized, B> {}\n+   |               ^^^^^^^^\n+\n+error[E0277]: the size for values of type `X` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:23:20\n+   |\n+LL | trait Trait6<A, B> {}\n+   |              - required by this bound in `Trait6`\n+LL | impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n+   |      -             ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X, Y> Trait6<X, Y> for X {}\n+   |      --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait6<A: ?Sized, B> {}\n+   |               ^^^^^^^^\n+\n+error[E0277]: the size for values of type `Y` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:26:12\n+   |\n+LL | trait Trait7<A, B> {}\n+   |                 - required by this bound in `Trait7`\n+LL | impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n+   |         -  ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         this type parameter needs to be `std::marker::Sized`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X, Y> Trait7<X, Y> for X  {}\n+   |                              --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait7<A, B: ?Sized> {}\n+   |                  ^^^^^^^^\n+\n+error[E0277]: the size for values of type `Y` cannot be known at compilation time\n+  --> $DIR/unsized-bound.rs:29:20\n+   |\n+LL | trait Trait8<A, B> {}\n+   |                 - required by this bound in `Trait8`\n+LL | impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n+   |         -          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         this type parameter needs to be `std::marker::Sized`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X, Y> Trait8<X, Y> for X {}\n+   |         --\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Trait8<A, B: ?Sized> {}\n+   |                  ^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "47f287807d4b935584352d7a369db2bcd03f3bee", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -11,6 +11,11 @@ LL |     mem::size_of::<U>();\n    |\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn check<T: Iterator, U>() {\n+   |                       --\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:10:5\n@@ -31,6 +36,10 @@ note: required because it appears within the type `Misc<U>`\n    |\n LL | struct Misc<T:?Sized>(T);\n    |        ^^^^\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn check<T: Iterator, U>() {\n+   |                       --\n \n error[E0277]: the trait bound `u64: From<T>` is not satisfied\n   --> $DIR/suggest-where-clause.rs:15:5"}, {"sha": "ef86c624e9b19cb789da35959bee5f646a2a2f1c", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -8,6 +8,10 @@ LL |     value: T,\n    |\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | union Foo<T> {\n+   |           --\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n@@ -27,6 +31,10 @@ LL |     value: T,\n    |\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | struct Foo2<T> {\n+   |             --\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n@@ -46,6 +54,10 @@ LL |     Value(T),\n    |\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | enum Foo3<T> {\n+   |           --\n help: borrowed types always have a statically known size\n    |\n LL |     Value(&T),"}, {"sha": "35bba1c103a05869e9e17a6ae662abde205d5022", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -7,6 +7,11 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |\n    |        this type parameter needs to be `std::marker::Sized`\n+   |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn foo<T>() { bar::<T>() }\n+   |        --\n \n error: aborting due to previous error\n "}, {"sha": "f66ce2af30416efca4fa5c06ed72ab63423062d2", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -16,6 +16,10 @@ LL | enum Foo<U> { FooSome(U), FooNone }\n    |          ^            - ...if indirection were used here: `Box<U>`\n    |          |\n    |          this could be changed to `U: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn foo2<T>() { not_sized::<Foo<T>>() }\n+   |         --\n \n error: aborting due to previous error\n "}, {"sha": "b9a03d904af4d2d4719ae91f168b0eb64dcc853e", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -9,6 +9,10 @@ LL |     VA(W),\n    |\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | enum E<W, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+   |        --\n help: borrowed types always have a statically known size\n    |\n LL |     VA(&W),\n@@ -29,6 +33,10 @@ LL |     VB{x: X},\n    |\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | enum E<W: ?Sized, X, Y: ?Sized, Z: ?Sized> {\n+   |                   --\n help: borrowed types always have a statically known size\n    |\n LL |     VB{x: &X},\n@@ -49,6 +57,10 @@ LL |     VC(isize, Y),\n    |\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | enum E<W: ?Sized, X: ?Sized, Y, Z: ?Sized> {\n+   |                              --\n help: borrowed types always have a statically known size\n    |\n LL |     VC(isize, &Y),\n@@ -69,6 +81,10 @@ LL |     VD{u: isize, x: Z},\n    |\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z> {\n+   |                                         --\n help: borrowed types always have a statically known size\n    |\n LL |     VD{u: isize, x: &Z},"}, {"sha": "fd9b159a481386adfc2a35def24efd9c50df8013", "filename": "src/test/ui/unsized/unsized-fn-arg.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -2,5 +2,5 @@\n #![crate_type=\"lib\"]\n #![allow(unused)]\n \n-fn f<T: ?Sized>(t: &T) {}\n+fn f<T>(t: &T) {}\n //~^ ERROR the size for values of type `T` cannot be known at compilation time"}, {"sha": "acb8a598d2c8aba19d8f26b9898f2cb209b7393e", "filename": "src/test/ui/unsized/unsized-fn-arg.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -7,6 +7,10 @@ LL | fn f<T: ?Sized>(t: T) {}\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f<T>(t: T) {}\n+   |      --\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn f<T: ?Sized>(t: &T) {}"}, {"sha": "99f75d8c5b3035ed1aef00b66c39ee028b37c805", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -16,6 +16,10 @@ LL | struct S5<Y>(Y);\n    |           ^  - ...if indirection were used here: `Box<Y>`\n    |           |\n    |           this could be changed to `Y: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X> S5<X> {\n+   |      --\n \n error: aborting due to previous error\n "}, {"sha": "71693b8130dee9c01fb59da27af42754a897342e", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -16,6 +16,10 @@ LL | struct Foo<T> { data: T }\n    |            ^          - ...if indirection were used here: `Box<T>`\n    |            |\n    |            this could be changed to `T: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn foo2<T>() { not_sized::<Foo<T>>() }\n+   |         --\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:13:24\n@@ -33,6 +37,10 @@ note: required because it appears within the type `Bar<T>`\n    |\n LL | struct Bar<T: ?Sized> { data: T }\n    |        ^^^\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn bar2<T>() { is_sized::<Bar<T>>() }\n+   |         --\n \n error: aborting due to 2 previous errors\n "}, {"sha": "201dbf85d20429d5634c18883713a9efde7b0d10", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -16,6 +16,10 @@ LL | struct S5<Y>(Y);\n    |           ^  - ...if indirection were used here: `Box<Y>`\n    |           |\n    |           this could be changed to `Y: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X> T3<X> for S5<X> {\n+   |      --\n \n error: aborting due to previous error\n "}, {"sha": "f8f8aa8e3e9ba3ae5521c66a0c3c3a8341c2a919", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -9,6 +9,10 @@ LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X> T2<X> for S4<X> {\n+   |      --\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T2<Z: ?Sized> {"}, {"sha": "10ddfe34eace65c41ed5c97a8c37ff02aa5681e0", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -9,6 +9,10 @@ LL |     f2::<X>(x);\n LL | fn f2<X>(x: &X) {\n    |       - required by this bound in `f2`\n    |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f1<X>(x: &X) {\n+   |       --\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f2<X: ?Sized>(x: &X) {\n@@ -25,6 +29,10 @@ LL |     f4::<X>(x);\n LL | fn f4<X: T>(x: &X) {\n    |       - required by this bound in `f4`\n    |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f3<X: T>(x: &X) {\n+   |         --\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f4<X: T + ?Sized>(x: &X) {\n@@ -46,6 +54,10 @@ note: required because it appears within the type `S<X>`\n    |\n LL | struct S<X: ?Sized> {\n    |        ^\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f8<X>(x1: &S<X>, x2: &S<X>) {\n+   |       --\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f5<Y: ?Sized>(x: &Y) {}\n@@ -65,6 +77,10 @@ note: required because it appears within the type `S<X>`\n LL | struct S<X: ?Sized> {\n    |        ^\n    = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f9<X>(x1: Box<S<X>>) {\n+   |       --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:9\n@@ -81,6 +97,10 @@ LL | struct S<X: ?Sized> {\n    |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n    = note: tuples must have a statically known size to be initialized\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f10<X>(x1: Box<S<X>>) {\n+   |        --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:8\n@@ -99,6 +119,10 @@ note: required because it appears within the type `S<X>`\n LL | struct S<X: ?Sized> {\n    |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f10<X>(x1: Box<S<X>>) {\n+   |        --\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f5<Y: ?Sized>(x: &Y) {}"}, {"sha": "6e5b355642932bfef4b6a4d59fac856131f6bf13", "filename": "src/test/ui/unsized/unsized5.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -8,6 +8,10 @@ LL |     f1: X,\n    |\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | struct S1<X> {\n+   |           --\n help: borrowed types always have a statically known size\n    |\n LL |     f1: &X,\n@@ -28,6 +32,10 @@ LL |     g: X,\n    |\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | struct S2<X> {\n+   |           --\n help: borrowed types always have a statically known size\n    |\n LL |     g: &X,\n@@ -83,6 +91,10 @@ LL |     V1(X, isize),\n    |\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | enum E<X> {\n+   |        --\n help: borrowed types always have a statically known size\n    |\n LL |     V1(&X, isize),\n@@ -102,6 +114,10 @@ LL |     V2{f1: X, f: isize},\n    |\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | enum F<X> {\n+   |        --\n help: borrowed types always have a statically known size\n    |\n LL |     V2{f1: &X, f: isize},"}, {"sha": "5eff89d971fbbb550a6ea7ebf7ca7ea82fe8f553", "filename": "src/test/ui/unsized/unsized6.stderr", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -9,6 +9,10 @@ LL |     let y: Y;\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y, Z: ?Sized>(x: &X) {\n+   |                             --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:7:12\n@@ -20,6 +24,10 @@ LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f1<W: ?Sized, X, Y: ?Sized, Z: ?Sized>(x: &X) {\n+   |                  --\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized6.rs:11:12\n@@ -31,6 +39,10 @@ LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z>(x: &X) {\n+   |                                        --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:15:9\n@@ -42,6 +54,10 @@ LL |     let y: X;\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f2<X, Y: ?Sized>(x: &X) {\n+   |       --\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:17:12\n@@ -53,6 +69,10 @@ LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f2<X: ?Sized, Y>(x: &X) {\n+   |                  --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:22:9\n@@ -64,6 +84,10 @@ LL |     let y: X = *x1;\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:24:9\n@@ -76,6 +100,10 @@ LL |     let y = *x2;\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:26:10\n@@ -88,6 +116,10 @@ LL |     let (y, z) = (*x3, 4);\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |       --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:30:9\n@@ -99,6 +131,10 @@ LL |     let y: X = *x1;\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |         --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:32:9\n@@ -111,6 +147,10 @@ LL |     let y = *x2;\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |         --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:34:10\n@@ -123,6 +163,10 @@ LL |     let (y, z) = (*x3, 4);\n    |\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+   |         --\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:38:18\n@@ -133,6 +177,10 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn g1<X>(x: X) {}\n+   |       --\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn g1<X: ?Sized>(x: &X) {}\n@@ -147,6 +195,10 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | fn g2<X: T>(x: X) {}\n+   |         --\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn g2<X: ?Sized + T>(x: &X) {}"}, {"sha": "e0d95e212964d4a3f1af411428af0a94a54fd74c", "filename": "src/test/ui/unsized/unsized7.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a40c7ee85fff41f34a2b70c28cca3bcdec1015/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr?ref=15a40c7ee85fff41f34a2b70c28cca3bcdec1015", "patch": "@@ -9,6 +9,10 @@ LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL | impl<X: T> T1<X> for S3<X> {\n+   |        --\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T1<Z: T + ?Sized> {"}]}