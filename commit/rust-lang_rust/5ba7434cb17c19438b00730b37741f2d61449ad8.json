{"sha": "5ba7434cb17c19438b00730b37741f2d61449ad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYTc0MzRjYjE3YzE5NDM4YjAwNzMwYjM3NzQxZjJkNjE0NDlhZDg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-24T21:26:42Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-24T22:28:26Z"}, "message": "Avoid lifecycle_lock traffic in call_on_rust_stack. (close #3270)", "tree": {"sha": "6d22ee9fadd01984af043c2a78a32b2ef27bd8e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d22ee9fadd01984af043c2a78a32b2ef27bd8e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba7434cb17c19438b00730b37741f2d61449ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba7434cb17c19438b00730b37741f2d61449ad8", "html_url": "https://github.com/rust-lang/rust/commit/5ba7434cb17c19438b00730b37741f2d61449ad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba7434cb17c19438b00730b37741f2d61449ad8/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55c5ceac239417784f9fe8c37f92e974b9cc06e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55c5ceac239417784f9fe8c37f92e974b9cc06e", "html_url": "https://github.com/rust-lang/rust/commit/e55c5ceac239417784f9fe8c37f92e974b9cc06e"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "8bcf1b0613378406aa66c94f65147ee5d15cac61", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ba7434cb17c19438b00730b37741f2d61449ad8/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5ba7434cb17c19438b00730b37741f2d61449ad8/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=5ba7434cb17c19438b00730b37741f2d61449ad8", "patch": "@@ -248,6 +248,13 @@ MUST_CHECK bool rust_task::yield() {\n \n     // This check is largely superfluous; it's the one after the context swap\n     // that really matters. This one allows us to assert a useful invariant.\n+\n+    // NB: This takes lifecycle_lock three times, and I believe that none of\n+    // them are actually necessary, as per #3213. Removing the locks here may\n+    // cause *harmless* races with a killer... but I didn't observe any\n+    // substantial performance improvement from removing them, even with\n+    // msgsend-ring-pipes, and also it's my last day, so I'm not about to\n+    // remove them.  -- bblum\n     if (must_fail_from_being_killed()) {\n         {\n             scoped_lock with(lifecycle_lock);"}, {"sha": "a09cbcb70d87a2c1024ce4e330c78b830ebca6f0", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ba7434cb17c19438b00730b37741f2d61449ad8/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/5ba7434cb17c19438b00730b37741f2d61449ad8/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=5ba7434cb17c19438b00730b37741f2d61449ad8", "patch": "@@ -431,12 +431,11 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n     assert(get_sp_limit() != 0 && \"Stack must be configured\");\n     assert(next_rust_sp);\n \n-    bool had_reentered_rust_stack;\n-    {\n-        scoped_lock with(lifecycle_lock);\n-        had_reentered_rust_stack = reentered_rust_stack;\n-        reentered_rust_stack = true;\n-    }\n+    // Unlocked access. Might \"race\" a killer, but harmlessly. This code is\n+    // only run by the task itself, so cannot race itself. See the comment\n+    // above inhibit_kill (or #3213) in rust_task.cpp for justification.\n+    bool had_reentered_rust_stack = reentered_rust_stack;\n+    reentered_rust_stack = true;\n \n     uintptr_t prev_c_sp = next_c_sp;\n     next_c_sp = get_sp();\n@@ -448,10 +447,7 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n     __morestack(args, fn_ptr, sp);\n \n     next_c_sp = prev_c_sp;\n-    {\n-        scoped_lock with(lifecycle_lock);\n-        reentered_rust_stack = had_reentered_rust_stack;\n-    }\n+    reentered_rust_stack = had_reentered_rust_stack;\n \n     record_sp_limit(0);\n }"}]}