{"sha": "75571a5ac0aae9355ace495fb7aac06da963eee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NTcxYTVhYzBhYWU5MzU1YWNlNDk1ZmI3YWFjMDZkYTk2M2VlZTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-19T14:03:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T14:03:23Z"}, "message": "Rollup merge of #83179 - Aaron1011:actix-web-lint, r=petrochenkov\n\nExtend `proc_macro_back_compat` lint to `actix-web`\n\nUnlike the other cases of this lint, there's no simple way to detect if\nan old version of the relevant crate (`syn`) is in use. The `actix-web`\ncrate only depends on `pin-project` v1.0.0, so checking the version of\n`actix-web` does not guarantee that a new enough version of\n`pin-project` (and therefore `syn`) is in use.\n\nInstead, we rely on the fact that virtually all of the regressed crates\nare pinned to a pre-1.0 version of `pin-project`. When this is the case,\nbumping the `actix-web` dependency will pull in the *latest* version of\n`pin-project`, which has an explicit dependency on a newer v dependency\non a newer version of `syn`.\n\nThe lint message tells users to update `actix-web`, since that's what\nthey're most likely to have control over. We could potentially tell them\nto run `cargo update -p syn`, but I think it's more straightforward to\nsuggest an explicit change to the `Cargo.toml`\n\nThe `actori-web` fork had its last commit over a year ago, and appears\nto just be a renamed fork of `actix-web`. Therefore, I've removed the\n`actori-web` check entirely - any crates that actually get broken can\nsimply update `syn` themselves.", "tree": {"sha": "1c56ef3216b9c3ec5b2d7798b9d1811f22e8029f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c56ef3216b9c3ec5b2d7798b9d1811f22e8029f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75571a5ac0aae9355ace495fb7aac06da963eee9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVK8rCRBK7hj4Ov3rIwAAdHIIAGPKa+Ygzl6l5cv8chCH0mjX\ngSgztNEd0qF2gw9bJQqG9Uf9u+eygluIiGHUvkOUrmWcv+UMMOydJQMM+W34Lblh\nICI+oQzb4xFr1B8H5nZynHFtMSWqRCV4EUOyQ97GS9hLxHzhVipX4+Qw50NgiA8v\ndX498QDtU3SjEQNCrdGtDqRBYj7B1Rd9hmP3cOUFs2fyLHza7bVYt5AdMu+oMPZI\nVgWr3cEA6CaleFGnnZYEJ83FHqr83r1S7Gw+7G8PYyWFLOydNAbMIPcD2tyXlDQy\n6to0bLvFixPeAgvXNx4gmE51BAx8aLXAvveZ2XBPmXjqMdMLwf6gaKTF8roLSqg=\n=rL7G\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c56ef3216b9c3ec5b2d7798b9d1811f22e8029f\nparent db4a97c4cbcb160b3754c803284dd0110d1de1e4\nparent 390d1ef6d048563502458ae20d9b7d69d914a680\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616162603 +0100\ncommitter GitHub <noreply@github.com> 1616162603 +0100\n\nRollup merge of #83179 - Aaron1011:actix-web-lint, r=petrochenkov\n\nExtend `proc_macro_back_compat` lint to `actix-web`\n\nUnlike the other cases of this lint, there's no simple way to detect if\nan old version of the relevant crate (`syn`) is in use. The `actix-web`\ncrate only depends on `pin-project` v1.0.0, so checking the version of\n`actix-web` does not guarantee that a new enough version of\n`pin-project` (and therefore `syn`) is in use.\n\nInstead, we rely on the fact that virtually all of the regressed crates\nare pinned to a pre-1.0 version of `pin-project`. When this is the case,\nbumping the `actix-web` dependency will pull in the *latest* version of\n`pin-project`, which has an explicit dependency on a newer v dependency\non a newer version of `syn`.\n\nThe lint message tells users to update `actix-web`, since that's what\nthey're most likely to have control over. We could potentially tell them\nto run `cargo update -p syn`, but I think it's more straightforward to\nsuggest an explicit change to the `Cargo.toml`\n\nThe `actori-web` fork had its last commit over a year ago, and appears\nto just be a renamed fork of `actix-web`. Therefore, I've removed the\n`actori-web` check entirely - any crates that actually get broken can\nsimply update `syn` themselves.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75571a5ac0aae9355ace495fb7aac06da963eee9", "html_url": "https://github.com/rust-lang/rust/commit/75571a5ac0aae9355ace495fb7aac06da963eee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75571a5ac0aae9355ace495fb7aac06da963eee9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4a97c4cbcb160b3754c803284dd0110d1de1e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4a97c4cbcb160b3754c803284dd0110d1de1e4", "html_url": "https://github.com/rust-lang/rust/commit/db4a97c4cbcb160b3754c803284dd0110d1de1e4"}, {"sha": "390d1ef6d048563502458ae20d9b7d69d914a680", "url": "https://api.github.com/repos/rust-lang/rust/commits/390d1ef6d048563502458ae20d9b7d69d914a680", "html_url": "https://github.com/rust-lang/rust/commit/390d1ef6d048563502458ae20d9b7d69d914a680"}], "stats": {"total": 132, "additions": 108, "deletions": 24}, "files": [{"sha": "cb41bc81225ec23bcbd83fe31027114a40e02924", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/75571a5ac0aae9355ace495fb7aac06da963eee9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75571a5ac0aae9355ace495fb7aac06da963eee9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=75571a5ac0aae9355ace495fb7aac06da963eee9", "patch": "@@ -53,11 +53,11 @@ impl ToInternal<token::DelimToken> for Delimiter {\n     }\n }\n \n-impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n+impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_>)>\n     for TokenTree<Group, Punct, Ident, Literal>\n {\n     fn from_internal(\n-        ((tree, spacing), sess, stack): (TreeAndSpacing, &ParseSess, &mut Vec<Self>),\n+        ((tree, spacing), stack, rustc): (TreeAndSpacing, &mut Vec<Self>, &mut Rustc<'_>),\n     ) -> Self {\n         use rustc_ast::token::*;\n \n@@ -146,10 +146,10 @@ impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n             SingleQuote => op!('\\''),\n \n             Ident(name, false) if name == kw::DollarCrate => tt!(Ident::dollar_crate()),\n-            Ident(name, is_raw) => tt!(Ident::new(sess, name, is_raw)),\n+            Ident(name, is_raw) => tt!(Ident::new(rustc.sess, name, is_raw)),\n             Lifetime(name) => {\n                 let ident = symbol::Ident::new(name, span).without_first_quote();\n-                stack.push(tt!(Ident::new(sess, ident.name, false)));\n+                stack.push(tt!(Ident::new(rustc.sess, ident.name, false)));\n                 tt!(Punct::new('\\'', true))\n             }\n             Literal(lit) => tt!(Literal { lit }),\n@@ -179,15 +179,15 @@ impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             Interpolated(nt) => {\n-                if let Some((name, is_raw)) = ident_name_compatibility_hack(&nt, span, sess) {\n-                    TokenTree::Ident(Ident::new(sess, name.name, is_raw, name.span))\n+                if let Some((name, is_raw)) = ident_name_compatibility_hack(&nt, span, rustc) {\n+                    TokenTree::Ident(Ident::new(rustc.sess, name.name, is_raw, name.span))\n                 } else {\n-                    let stream = nt_to_tokenstream(&nt, sess, CanSynthesizeMissingTokens::No);\n+                    let stream = nt_to_tokenstream(&nt, rustc.sess, CanSynthesizeMissingTokens::No);\n                     TokenTree::Group(Group {\n                         delimiter: Delimiter::None,\n                         stream,\n                         span: DelimSpan::from_single(span),\n-                        flatten: crate::base::pretty_printing_compatibility_hack(&nt, sess),\n+                        flatten: crate::base::pretty_printing_compatibility_hack(&nt, rustc.sess),\n                     })\n                 }\n             }\n@@ -449,7 +449,7 @@ impl server::TokenStreamIter for Rustc<'_> {\n         loop {\n             let tree = iter.stack.pop().or_else(|| {\n                 let next = iter.cursor.next_with_spacing()?;\n-                Some(TokenTree::from_internal((next, self.sess, &mut iter.stack)))\n+                Some(TokenTree::from_internal((next, &mut iter.stack, self)))\n             })?;\n             // A hack used to pass AST fragments to attribute and derive macros\n             // as a single nonterminal token instead of a token stream.\n@@ -719,11 +719,11 @@ impl server::Span for Rustc<'_> {\n fn ident_name_compatibility_hack(\n     nt: &Nonterminal,\n     orig_span: Span,\n-    sess: &ParseSess,\n+    rustc: &mut Rustc<'_>,\n ) -> Option<(rustc_span::symbol::Ident, bool)> {\n     if let NtIdent(ident, is_raw) = nt {\n         if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n-            let source_map = sess.source_map();\n+            let source_map = rustc.sess.source_map();\n             let filename = source_map.span_to_filename(orig_span);\n             if let FileName::Real(RealFileName::Named(path)) = filename {\n                 let matches_prefix = |prefix, filename| {\n@@ -745,7 +745,7 @@ fn ident_name_compatibility_hack(\n                     let snippet = source_map.span_to_snippet(orig_span);\n                     if snippet.as_deref() == Ok(\"$name\") {\n                         if time_macros_impl {\n-                            sess.buffer_lint_with_diagnostic(\n+                            rustc.sess.buffer_lint_with_diagnostic(\n                                 &PROC_MACRO_BACK_COMPAT,\n                                 orig_span,\n                                 ast::CRATE_NODE_ID,\n@@ -759,13 +759,25 @@ fn ident_name_compatibility_hack(\n                     }\n                 }\n \n-                if macro_name == sym::tuple_from_req\n-                    && (matches_prefix(\"actix-web\", \"extract.rs\")\n-                        || matches_prefix(\"actori-web\", \"extract.rs\"))\n-                {\n+                if macro_name == sym::tuple_from_req && matches_prefix(\"actix-web\", \"extract.rs\") {\n                     let snippet = source_map.span_to_snippet(orig_span);\n                     if snippet.as_deref() == Ok(\"$T\") {\n-                        return Some((*ident, *is_raw));\n+                        if let FileName::Real(RealFileName::Named(macro_path)) =\n+                            source_map.span_to_filename(rustc.def_site)\n+                        {\n+                            if macro_path.to_string_lossy().contains(\"pin-project-internal-0.\") {\n+                                rustc.sess.buffer_lint_with_diagnostic(\n+                                    &PROC_MACRO_BACK_COMPAT,\n+                                    orig_span,\n+                                    ast::CRATE_NODE_ID,\n+                                    \"using an old version of `actix-web`\",\n+                                    BuiltinLintDiagnostics::ProcMacroBackCompat(\n+                                    \"the version of `actix-web` you are using might stop compiling in future versions of Rust; \\\n+                                    please update to the latest version of the `actix-web` crate to avoid breakage\".to_string())\n+                                );\n+                                return Some((*ident, *is_raw));\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "baa4fd3a10559d77043812621240db10de9fe587", "filename": "src/test/ui/proc-macro/group-compat-hack/auxiliary/pin-project-internal-0.4.0.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fpin-project-internal-0.4.0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fpin-project-internal-0.4.0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fpin-project-internal-0.4.0.rs?ref=75571a5ac0aae9355ace495fb7aac06da963eee9", "patch": "@@ -2,6 +2,10 @@\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n+#![crate_name = \"group_compat_hack\"]\n+\n+// This file has an unusual name in order to trigger the back-compat\n+// code in the compiler\n \n extern crate proc_macro;\n use proc_macro::TokenStream;", "previous_filename": "src/test/ui/proc-macro/group-compat-hack/auxiliary/group-compat-hack.rs"}, {"sha": "d9687490cad7598e8465efc149edef40c7819e09", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=75571a5ac0aae9355ace495fb7aac06da963eee9", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// aux-build:group-compat-hack.rs\n+// aux-build:pin-project-internal-0.4.0.rs\n // compile-flags: -Z span-debug\n \n #![no_std] // Don't load unnecessary hygiene information from std\n@@ -51,14 +51,16 @@ mod actix_web_test {\n     include!(\"actix-web/src/extract.rs\");\n \n     struct Foo;\n-    tuple_from_req!(Foo);\n+    tuple_from_req!(Foo); //~ WARN using an old version\n+    //~| WARN this was previously\n }\n \n mod actix_web_version_test {\n     include!(\"actix-web-2.0.0/src/extract.rs\");\n \n     struct Foo;\n-    tuple_from_req!(Foo);\n+    tuple_from_req!(Foo); //~ WARN using an old version\n+    //~| WARN this was previously\n }\n \n mod actori_web_test {"}, {"sha": "e2b680f8d27600e9d3b1ee992a51d6d7f171b9b1", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=75571a5ac0aae9355ace495fb7aac06da963eee9", "patch": "@@ -31,7 +31,39 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-warning: 2 warnings emitted\n+warning: using an old version of `actix-web`\n+  --> $DIR/actix-web/src/extract.rs:5:34\n+   |\n+LL |         #[my_macro] struct Three($T);\n+   |                                  ^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:54:5\n+   |\n+LL |     tuple_from_req!(Foo);\n+   |     --------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: using an old version of `actix-web`\n+  --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n+   |\n+LL |         #[my_macro] struct Three($T);\n+   |                                  ^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:62:5\n+   |\n+LL |     tuple_from_req!(Foo);\n+   |     --------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 4 warnings emitted\n \n Future incompatibility report: Future breakage date: None, diagnostic:\n warning: using an old version of `time-macros-impl`\n@@ -68,3 +100,37 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+Future breakage date: None, diagnostic:\n+warning: using an old version of `actix-web`\n+  --> $DIR/actix-web/src/extract.rs:5:34\n+   |\n+LL |         #[my_macro] struct Three($T);\n+   |                                  ^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:54:5\n+   |\n+LL |     tuple_from_req!(Foo);\n+   |     --------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage date: None, diagnostic:\n+warning: using an old version of `actix-web`\n+  --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n+   |\n+LL |         #[my_macro] struct Three($T);\n+   |                                  ^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:62:5\n+   |\n+LL |     tuple_from_req!(Foo);\n+   |     --------------------- in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "3fe744e12ff0459a2df04c4e60913abb5508f3dd", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/75571a5ac0aae9355ace495fb7aac06da963eee9/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=75571a5ac0aae9355ace495fb7aac06da963eee9", "patch": "@@ -5,6 +5,6 @@ Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/tim\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:46:13: 46:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:39:25: 39:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:39:32: 39:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:47:12: 47:15 (#0) }], span: $DIR/group-compat-hack.rs:39:38: 39:43 (#28) }], span: $DIR/group-compat-hack.rs:39:37: 39:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:39:44: 39:45 (#28) }]\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:54:21: 54:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:61:21: 61:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:68:21: 68:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:75:21: 75:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:62:21: 62:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:70:21: 70:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:77:21: 77:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]"}]}