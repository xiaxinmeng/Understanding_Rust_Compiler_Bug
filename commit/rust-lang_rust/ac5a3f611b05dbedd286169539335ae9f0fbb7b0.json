{"sha": "ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNWEzZjYxMWIwNWRiZWRkMjg2MTY5NTM5MzM1YWU5ZjBmYmI3YjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T11:20:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T11:20:49Z"}, "message": "Support for nested ADT", "tree": {"sha": "d3891e65a1f043c9adce655bb88507ade16ac0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3891e65a1f043c9adce655bb88507ade16ac0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "html_url": "https://github.com/rust-lang/rust/commit/ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ad07af4bef6a70602e315bf315c6fce95618dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ad07af4bef6a70602e315bf315c6fce95618dd", "html_url": "https://github.com/rust-lang/rust/commit/94ad07af4bef6a70602e315bf315c6fce95618dd"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "d20e9de632c45898480a0184db24b936aae21283", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "patch": "@@ -269,7 +269,7 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -290,7 +290,7 @@ impl Struct {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.module(db).krate, self.id)\n     }\n \n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n@@ -309,11 +309,11 @@ impl Union {\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.module(db).krate, self.id)\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n@@ -337,7 +337,7 @@ pub struct Enum {\n \n impl Enum {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.lookup(db).container }\n+        Module { id: self.id.lookup(db).container.module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -357,7 +357,7 @@ impl Enum {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.module(db).krate, self.id)\n     }\n }\n "}, {"sha": "0d3f946df639279d8cf5adbee1e0dbb4bbcd8257", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     path::GenericArgs,\n     path::Path,\n     type_ref::{Mutability, TypeRef},\n-    ContainerId, DefWithBodyId, FunctionLoc, Intern,\n+    ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId, StructLoc, UnionLoc,\n };\n \n pub(super) fn lower(\n@@ -490,16 +490,28 @@ where\n     }\n \n     fn collect_block_items(&mut self, block: &ast::Block) {\n-        let container = ContainerId::DefWithBodyId(self.def).into();\n+        let container = ContainerId::DefWithBodyId(self.def);\n         for item in block.items() {\n-            match item {\n+            let def: ModuleDefId = match item {\n                 ast::ModuleItem::FnDef(def) => {\n                     let ast_id = self.expander.ast_id(&def);\n-                    self.body.defs.push(FunctionLoc { container, ast_id }.intern(self.db).into())\n+                    FunctionLoc { container: container.into(), ast_id }.intern(self.db).into()\n                 }\n-                // FIXME: handle other items\n-                _ => (),\n-            }\n+                ast::ModuleItem::StructDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    StructLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::EnumDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    EnumLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                ast::ModuleItem::UnionDef(def) => {\n+                    let ast_id = self.expander.ast_id(&def);\n+                    UnionLoc { container, ast_id }.intern(self.db).into()\n+                }\n+                _ => continue,\n+            };\n+            self.body.defs.push(def)\n         }\n     }\n "}, {"sha": "a82de7dec3b7561e64af59b84065be391bbe10ee", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "patch": "@@ -95,7 +95,7 @@ impl_intern_key!(StructId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StructLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::StructDef>,\n }\n \n@@ -119,7 +119,7 @@ impl_intern_key!(UnionId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UnionLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::UnionDef>,\n }\n \n@@ -143,7 +143,7 @@ impl_intern_key!(EnumId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumLoc {\n-    pub container: ModuleId,\n+    pub container: ContainerId,\n     pub ast_id: AstId<ast::EnumDef>,\n }\n \n@@ -529,6 +529,7 @@ impl HasModule for AdtId {\n             AdtId::UnionId(it) => it.lookup(db).container,\n             AdtId::EnumId(it) => it.lookup(db).container,\n         }\n+        .module(db)\n     }\n }\n \n@@ -550,7 +551,7 @@ impl HasModule for GenericDefId {\n             GenericDefId::TraitId(it) => it.lookup(db).container,\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n             GenericDefId::ImplId(it) => it.lookup(db).container,\n-            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container,\n+            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }\n     }"}, {"sha": "1b39af61e4c12715fba06b460d19b91ba3b062d6", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "patch": "@@ -772,17 +772,17 @@ where\n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n-                let def = StructLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = StructLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n                 PerNs::both(def.into(), def.into())\n             }\n             raw::DefKind::Union(ast_id) => {\n-                let def = UnionLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = UnionLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n                 PerNs::both(def.into(), def.into())\n             }\n             raw::DefKind::Enum(ast_id) => {\n-                let def = EnumLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                let def = EnumLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                     .intern(self.def_collector.db);\n                 PerNs::types(def.into())\n             }"}, {"sha": "af3db2e1d7c4f7b21fa08c6716f2b8bf3f26231f", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5a3f611b05dbedd286169539335ae9f0fbb7b0/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=ac5a3f611b05dbedd286169539335ae9f0fbb7b0", "patch": "@@ -697,8 +697,8 @@ impl CallableDef {\n     pub fn krate(self, db: &impl HirDatabase) -> CrateId {\n         match self {\n             CallableDef::FunctionId(f) => f.lookup(db).module(db),\n-            CallableDef::StructId(s) => s.lookup(db).container,\n-            CallableDef::EnumVariantId(e) => e.parent.lookup(db).container,\n+            CallableDef::StructId(s) => s.lookup(db).container.module(db),\n+            CallableDef::EnumVariantId(e) => e.parent.lookup(db).container.module(db),\n         }\n         .krate\n     }"}]}