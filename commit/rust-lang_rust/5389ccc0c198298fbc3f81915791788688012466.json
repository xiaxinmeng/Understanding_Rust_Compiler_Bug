{"sha": "5389ccc0c198298fbc3f81915791788688012466", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzODljY2MwYzE5ODI5OGZiYzNmODE5MTU3OTE3ODg2ODgwMTI0NjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-07-08T07:44:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-07-08T09:17:00Z"}, "message": "Rollup merge of #34700 - inejge:ai-hints, r=alexcrichton\n\nUse hints with getaddrinfo() in std::net::lookup_host()\n\nAs noted in #24250, `std::net::lookup_host()` repeats each IPv[46] address in the result set. The number of repetitions is OS-dependent; e.g., Linux and FreeBSD give three copies, OpenBSD gives two. Filtering the duplicates can be done by the user if `lookup_host()` is used explicitly, but not with functions like `TcpStream::connect()`. What happens with the latter is that any unsuccessful connection attempt will be repeated as many times as there are duplicates of the address.\n\nThe program:\n\n```rust\nuse std::net::TcpStream;\n\nfn main() {\n    let _stream = TcpStream::connect(\"localhost:4444\").unwrap();\n}\n```\n\nresults in the following capture:\n\n[capture-before.txt](https://github.com/rust-lang/rust/files/352004/capture-before.txt)\n\nassuming that \"localhost\" resolves both to ::1 and 127.0.0.1, and that the listening program opens just an IPv4 socket (e.g., `nc -l 127.0.0.1 4444`.) The reason for this behavior is explained in [this comment](https://github.com/rust-lang/rust/issues/24250#issuecomment-92240152): `getaddrinfo()` is not constrained.\n\nVarious OSS projects (I checked out Postfix, OpenLDAP, Apache HTTPD and BIND) which use `getaddrinfo()` generally constrain the result set by using a non-NULL `hints` parameter and setting at least `ai_socktype` to `SOCK_STREAM`. `SOCK_DGRAM` would also work. Other parameters are unnecessary for pure name resolution.\n\nThe patch in this PR initializes a `hints` struct and passes it to `getaddrinfo()`, which eliminates the duplicates. The same test program as above with this change produces:\n\n[capture-after.txt](https://github.com/rust-lang/rust/files/352042/capture-after.txt)\n\nAll `libstd` tests pass with this patch.", "tree": {"sha": "3b1610857724f2032fa3c3cd37a4020dc3471f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b1610857724f2032fa3c3cd37a4020dc3471f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5389ccc0c198298fbc3f81915791788688012466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5389ccc0c198298fbc3f81915791788688012466", "html_url": "https://github.com/rust-lang/rust/commit/5389ccc0c198298fbc3f81915791788688012466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5389ccc0c198298fbc3f81915791788688012466/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88350bdf52db312b0a338b0ae4a7656583bc775a", "url": "https://api.github.com/repos/rust-lang/rust/commits/88350bdf52db312b0a338b0ae4a7656583bc775a", "html_url": "https://github.com/rust-lang/rust/commit/88350bdf52db312b0a338b0ae4a7656583bc775a"}, {"sha": "0314d179aa07905cc3bd4ec3206be28ff11696f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0314d179aa07905cc3bd4ec3206be28ff11696f9", "html_url": "https://github.com/rust-lang/rust/commit/0314d179aa07905cc3bd4ec3206be28ff11696f9"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "26925b12f93d6ba3d28fb0fb0eee80c1f8d639c0", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5389ccc0c198298fbc3f81915791788688012466/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5389ccc0c198298fbc3f81915791788688012466/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=5389ccc0c198298fbc3f81915791788688012466", "patch": "@@ -152,9 +152,19 @@ pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n     init();\n \n     let c_host = CString::new(host)?;\n+    let hints = c::addrinfo {\n+        ai_flags: 0,\n+        ai_family: 0,\n+        ai_socktype: c::SOCK_STREAM,\n+        ai_protocol: 0,\n+        ai_addrlen: 0,\n+        ai_addr: ptr::null_mut(),\n+        ai_canonname: ptr::null_mut(),\n+        ai_next: ptr::null_mut()\n+    };\n     let mut res = ptr::null_mut();\n     unsafe {\n-        cvt_gai(c::getaddrinfo(c_host.as_ptr(), ptr::null(), ptr::null(),\n+        cvt_gai(c::getaddrinfo(c_host.as_ptr(), ptr::null(), &hints,\n                                &mut res))?;\n         Ok(LookupHost { original: res, cur: res })\n     }"}]}