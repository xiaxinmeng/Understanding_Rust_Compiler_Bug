{"sha": "a5ef2d1b54c833783a64a98d5d585bb44218497a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZWYyZDFiNTRjODMzNzgzYTY0YTk4ZDVkNTg1YmI0NDIxODQ5N2E=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-16T10:46:58Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:32Z"}, "message": "Array and slice projections need to update the place alignment", "tree": {"sha": "9af44b381fa0b8aab63f173aad350d737dc3df8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9af44b381fa0b8aab63f173aad350d737dc3df8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5ef2d1b54c833783a64a98d5d585bb44218497a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ef2d1b54c833783a64a98d5d585bb44218497a", "html_url": "https://github.com/rust-lang/rust/commit/a5ef2d1b54c833783a64a98d5d585bb44218497a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5ef2d1b54c833783a64a98d5d585bb44218497a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10102d1f0aa0e7e612ea2a51d5329af928b07f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/10102d1f0aa0e7e612ea2a51d5329af928b07f03", "html_url": "https://github.com/rust-lang/rust/commit/10102d1f0aa0e7e612ea2a51d5329af928b07f03"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "9588a931c4a3519459c2b112c94f552f315ab844", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5ef2d1b54c833783a64a98d5d585bb44218497a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ef2d1b54c833783a64a98d5d585bb44218497a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=a5ef2d1b54c833783a64a98d5d585bb44218497a", "patch": "@@ -271,13 +271,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         if mplace.layout.is_zst() {\n             // Not all ZSTs have a layout we would handle below, so just short-circuit them\n             // all here.\n-            self.memory.check_align(ptr, ptr_align.min(mplace.layout.align))?;\n+            self.memory.check_align(ptr, ptr_align)?;\n             return Ok(Some(Immediate::Scalar(Scalar::zst().into())));\n         }\n \n         // check for integer pointers before alignment to report better errors\n         let ptr = ptr.to_ptr()?;\n-        self.memory.check_align(ptr.into(), ptr_align.min(mplace.layout.align))?;\n+        self.memory.check_align(ptr.into(), ptr_align)?;\n         match mplace.layout.abi {\n             layout::Abi::Scalar(..) => {\n                 let scalar = self.memory\n@@ -295,7 +295,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 let a_val = self.memory\n                     .get(ptr.alloc_id)?\n                     .read_scalar(self, a_ptr, a_size)?;\n-                self.memory.check_align(b_ptr.into(), b.align(self).min(ptr_align))?;\n+                let b_align = ptr_align.restrict_for_offset(b_offset);\n+                self.memory.check_align(b_ptr.into(), b_align)?;\n                 let b_val = self.memory\n                     .get(ptr.alloc_id)?\n                     .read_scalar(self, b_ptr, b_size)?;"}, {"sha": "d93aca7f4e1d9276f420bece6fa70934e4eeb76f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5ef2d1b54c833783a64a98d5d585bb44218497a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5ef2d1b54c833783a64a98d5d585bb44218497a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a5ef2d1b54c833783a64a98d5d585bb44218497a", "patch": "@@ -393,8 +393,9 @@ where\n         let dl = &self.tcx.data_layout;\n         Ok((0..len).map(move |i| {\n             let ptr = base.ptr.ptr_offset(i * stride, dl)?;\n+            let align = base.align.restrict_for_offset(i * stride);\n             Ok(MPlaceTy {\n-                mplace: MemPlace { ptr, align: base.align, meta: None },\n+                mplace: MemPlace { ptr, align, meta: None },\n                 layout\n             })\n         }))\n@@ -417,6 +418,7 @@ where\n             _ => bug!(\"Unexpected layout of index access: {:#?}\", base.layout),\n         };\n         let ptr = base.ptr.ptr_offset(from_offset, self)?;\n+        let align = base.align.restrict_for_offset(from_offset);\n \n         // Compute meta and new layout\n         let inner_len = len - to - from;\n@@ -435,7 +437,7 @@ where\n         let layout = self.layout_of(ty)?;\n \n         Ok(MPlaceTy {\n-            mplace: MemPlace { ptr, align: base.align, meta },\n+            mplace: MemPlace { ptr, align, meta },\n             layout\n         })\n     }\n@@ -741,11 +743,11 @@ where\n                               dest.layout)\n                 };\n                 let (a_size, b_size) = (a.size(self), b.size(self));\n-                let b_align = b.align(self).abi;\n-                let b_offset = a_size.align_to(b_align);\n+                let b_offset = a_size.align_to(b.align(self).abi);\n+                let b_align = ptr_align.restrict_for_offset(b_offset);\n                 let b_ptr = ptr.offset(b_offset, self)?;\n \n-                self.memory.check_align(b_ptr.into(), ptr_align.min(b_align))?;\n+                self.memory.check_align(b_ptr.into(), b_align)?;\n \n                 // It is tempting to verify `b_offset` against `layout.fields.offset(1)`,\n                 // but that does not work: We could be a newtype around a pair, then the"}]}