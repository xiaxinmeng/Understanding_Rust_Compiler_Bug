{"sha": "15a5e02486bf1217511549d01c858ea0ec315905", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTVlMDI0ODZiZjEyMTc1MTE1NDlkMDFjODU4ZWEwZWMzMTU5MDU=", "commit": {"author": {"name": "Ticki", "email": "Ticki@users.noreply.github.com", "date": "2015-12-22T09:39:59Z"}, "committer": {"name": "Ticki", "email": "Ticki@users.noreply.github.com", "date": "2016-01-16T08:12:08Z"}, "message": "Overide methods in iterator implementation for EscapeDefault, see #24214\n\nComplete the tests", "tree": {"sha": "4ebe1ebe672e3bf7c31bb7e6e91cf2138ab0b520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebe1ebe672e3bf7c31bb7e6e91cf2138ab0b520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a5e02486bf1217511549d01c858ea0ec315905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a5e02486bf1217511549d01c858ea0ec315905", "html_url": "https://github.com/rust-lang/rust/commit/15a5e02486bf1217511549d01c858ea0ec315905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a5e02486bf1217511549d01c858ea0ec315905/comments", "author": {"login": "ticki", "id": 13349091, "node_id": "MDQ6VXNlcjEzMzQ5MDkx", "avatar_url": "https://avatars.githubusercontent.com/u/13349091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticki", "html_url": "https://github.com/ticki", "followers_url": "https://api.github.com/users/ticki/followers", "following_url": "https://api.github.com/users/ticki/following{/other_user}", "gists_url": "https://api.github.com/users/ticki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticki/subscriptions", "organizations_url": "https://api.github.com/users/ticki/orgs", "repos_url": "https://api.github.com/users/ticki/repos", "events_url": "https://api.github.com/users/ticki/events{/privacy}", "received_events_url": "https://api.github.com/users/ticki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ticki", "id": 13349091, "node_id": "MDQ6VXNlcjEzMzQ5MDkx", "avatar_url": "https://avatars.githubusercontent.com/u/13349091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticki", "html_url": "https://github.com/ticki", "followers_url": "https://api.github.com/users/ticki/followers", "following_url": "https://api.github.com/users/ticki/following{/other_user}", "gists_url": "https://api.github.com/users/ticki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticki/subscriptions", "organizations_url": "https://api.github.com/users/ticki/orgs", "repos_url": "https://api.github.com/users/ticki/repos", "events_url": "https://api.github.com/users/ticki/events{/privacy}", "received_events_url": "https://api.github.com/users/ticki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce1dafd1d58852a88f38a0f63cb11236a7470cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce1dafd1d58852a88f38a0f63cb11236a7470cb", "html_url": "https://github.com/rust-lang/rust/commit/4ce1dafd1d58852a88f38a0f63cb11236a7470cb"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "61f9fa7a2b631b8711424d2be202fceca36a85c0", "filename": "src/libcore/char.rs", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/15a5e02486bf1217511549d01c858ea0ec315905/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a5e02486bf1217511549d01c858ea0ec315905/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=15a5e02486bf1217511549d01c858ea0ec315905", "patch": "@@ -537,4 +537,94 @@ impl Iterator for EscapeDefault {\n             EscapeDefaultState::Done => (0, Some(0)),\n         }\n     }\n+\n+    fn count(self) -> usize {\n+        match self.state {\n+            EscapeDefaultState::Char(_)       => 1,\n+            EscapeDefaultState::Unicode(iter) => iter.count(),\n+            EscapeDefaultState::Done          => 0,\n+            EscapeDefaultState::Backslash(_)  => 2,\n+        }\n+    }\n+\n+    fn nth(&mut self, n: usize) -> Option<char> {\n+        let ch = match self.state {\n+            EscapeDefaultState::Backslash(c)       => c,\n+            EscapeDefaultState::Char(c)            => c,\n+            EscapeDefaultState::Done               => return None,\n+            EscapeDefaultState::Unicode(ref mut i) => return i.nth(n),\n+        };\n+\n+        let start = if let Some(x) = self.get_offset() {\n+            x\n+        } else {\n+            return None;\n+        };\n+        let idx = start + n;\n+\n+        // Update state\n+        self.state = match idx {\n+            0 => EscapeDefaultState::Char(ch),\n+            _ => EscapeDefaultState::Done,\n+        };\n+\n+        match idx {\n+            0 => Some('\\\\'),\n+            1 => Some(ch),\n+            _ => None,\n+        }\n+    }\n+\n+    fn last(self) -> Option<char> {\n+        match self.state {\n+            EscapeDefaultState::Unicode(iter)                              => iter.last(),\n+            EscapeDefaultState::Done                                       => None,\n+            EscapeDefaultState::Backslash(c) | EscapeDefaultState::Char(c) => Some(c),\n+        }\n+    }\n+}\n+\n+#[test]\n+fn ed_iterator_specializations() {\n+    use super::EscapeDefault;\n+\n+    // Check counting\n+    assert_eq!('\\n'.escape_default().count(), 2);\n+    assert_eq!('c'.escape_default().count(), 1);\n+    assert_eq!(' '.escape_default().count(), 1);\n+    assert_eq!('\\\\'.escape_default().count(), 2);\n+    assert_eq!('\\''.escape_default().count(), 2);\n+\n+    // Check nth\n+\n+    // Check that OoB is handled correctly\n+    assert_eq!('\\n'.escape_default().nth(2), None);\n+    assert_eq!('c'.escape_default().nth(1), None);\n+    assert_eq!(' '.escape_default().nth(1), None);\n+    assert_eq!('\\\\'.escape_default().nth(2), None);\n+    assert_eq!('\\''.escape_default().nth(2), None);\n+\n+    // Check the first char\n+    assert_eq!('\\n'.escape_default().nth(0), Some('\\\\'));\n+    assert_eq!('c'.escape_default().nth(0), Some('c'));\n+    assert_eq!(' '.escape_default().nth(0), Some(' '));\n+    assert_eq!('\\\\'.escape_default().nth(0), Some('\\\\'));\n+    assert_eq!('\\''.escape_default().nth(0), Some('\\\\'));\n+\n+    // Check the second char\n+    assert_eq!('\\n'.escape_default().nth(1), Some('n'));\n+    assert_eq!('\\\\'.escape_default().nth(1), Some('\\\\'));\n+    assert_eq!('\\''.escape_default().nth(1), Some('\\''));\n+}\n+\n+\n+impl EscapeDefault {\n+    fn get_offset(&self) -> Option<usize> {\n+        match self.state {\n+            EscapeDefaultState::Backslash(_) => Some(0),\n+            EscapeDefaultState::Char(_)      => Some(1),\n+            EscapeDefaultState::Done         => None,\n+            EscapeDefaultState::Unicode(_)   => None,\n+        }\n+    }\n }"}]}