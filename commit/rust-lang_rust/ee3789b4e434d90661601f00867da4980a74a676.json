{"sha": "ee3789b4e434d90661601f00867da4980a74a676", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMzc4OWI0ZTQzNGQ5MDY2MTYwMWYwMDg2N2RhNDk4MGE3NGE2NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-24T20:33:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-24T20:33:29Z"}, "message": "auto merge of #6029 : Kimundi/rust/ascii-encoding, r=thestinger\n\nReplaced {str, char, u8}::is_ascii\r\nReplaced str::to_lower and str::to_upper", "tree": {"sha": "fc406c99510acbf1fdeb9da2e25d3a38feb92fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc406c99510acbf1fdeb9da2e25d3a38feb92fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee3789b4e434d90661601f00867da4980a74a676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3789b4e434d90661601f00867da4980a74a676", "html_url": "https://github.com/rust-lang/rust/commit/ee3789b4e434d90661601f00867da4980a74a676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee3789b4e434d90661601f00867da4980a74a676/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e26f992d5e199a1ff8c26733650d254d63be066a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e26f992d5e199a1ff8c26733650d254d63be066a", "html_url": "https://github.com/rust-lang/rust/commit/e26f992d5e199a1ff8c26733650d254d63be066a"}, {"sha": "3759b5711d1f34a92ef51abd069f074fb55b3b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3759b5711d1f34a92ef51abd069f074fb55b3b5b", "html_url": "https://github.com/rust-lang/rust/commit/3759b5711d1f34a92ef51abd069f074fb55b3b5b"}], "stats": {"total": 155, "additions": 60, "deletions": 95}, "files": [{"sha": "0173f61e7307dcabd99831a2d11f9d5e40772d17", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -802,7 +802,7 @@ An example of `use` declarations:\n \n ~~~~\n use core::float::sin;\n-use core::str::{slice, to_upper};\n+use core::str::{slice, contains};\n use core::option::Some;\n \n fn main() {\n@@ -813,8 +813,8 @@ fn main() {\n     info!(Some(1.0));\n \n     // Equivalent to\n-    // 'info!(core::str::to_upper(core::str::slice(\"foo\", 0, 1)));'\n-    info!(to_upper(slice(\"foo\", 0, 1)));\n+    // 'info!(core::str::contains(core::str::slice(\"foo\", 0, 1), \"oo\"));'\n+    info!(contains(slice(\"foo\", 0, 1), \"oo\"));\n }\n ~~~~\n "}, {"sha": "3aa88523a873a24a6850f423d33fc64068b65c00", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -50,7 +50,11 @@ fn parse_expected(line_num: uint, line: ~str) -> ~[ExpectedError] {\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n     let start_kind = idx;\n     while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n-    let kind = str::to_lower(str::slice(line, start_kind, idx).to_owned());\n+\n+    // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+    // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+    let kind = str::slice(line, start_kind, idx);\n+    let kind = kind.to_ascii().to_lower().to_str_ascii();\n \n     // Extract msg:\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }"}, {"sha": "8af61dcb86197e33991c3da7e84bbeb84b8a20c7", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -100,12 +100,6 @@ pub fn is_alphanumeric(c: char) -> bool {\n         unicode::general_category::No(c);\n }\n \n-/// Indicates whether the character is an ASCII character\n-#[inline(always)]\n-pub fn is_ascii(c: char) -> bool {\n-   c - ('\\x7F' & c) == '\\x00'\n-}\n-\n /// Indicates whether the character is numeric (Nd, Nl, or No)\n #[inline(always)]\n pub fn is_digit(c: char) -> bool {\n@@ -116,7 +110,7 @@ pub fn is_digit(c: char) -> bool {\n \n /**\n  * Checks if a character parses as a numeric digit in the given radix.\n- * Compared to `is_digit()`, this function only recognizes the ascii\n+ * Compared to `is_digit()`, this function only recognizes the\n  * characters `0-9`, `a-z` and `A-Z`.\n  *\n  * Returns `true` if `c` is a valid digit under `radix`, and `false`\n@@ -163,7 +157,7 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n }\n \n /**\n- * Converts a number to the ascii character representing it.\n+ * Converts a number to the character representing it.\n  *\n  * Returns `Some(char)` if `num` represents one digit under `radix`,\n  * using one character of `0-9` or `a-z`, or `None` if it doesn't.\n@@ -316,12 +310,6 @@ fn test_to_digit() {\n     assert!(to_digit('$', 36u).is_none());\n }\n \n-#[test]\n-fn test_is_ascii() {\n-   assert!(str::all(~\"banana\", is_ascii));\n-   assert!(! str::all(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", is_ascii));\n-}\n-\n #[test]\n fn test_is_digit() {\n    assert!(is_digit('2'));"}, {"sha": "5c548d7209330f55710b28b7220d52717a8b9f0b", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -10,16 +10,9 @@\n \n //! Operations and constants for `u8`\n \n-pub use self::inst::is_ascii;\n-\n mod inst {\n     pub type T = u8;\n     #[allow(non_camel_case_types)]\n     pub type T_SIGNED = i8;\n     pub static bits: uint = 8;\n-\n-    // Type-specific functions here. These must be reexported by the\n-    // parent module so that they appear in core::u8 and not core::u8::u8;\n-\n-    pub fn is_ascii(x: T) -> bool { return 0 as T == x & 128 as T; }\n }"}, {"sha": "edc61299af96d1b496f5d8cf5f7150f02bc53617", "filename": "src/libcore/path.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -19,6 +19,7 @@ use libc;\n use option::{None, Option, Some};\n use str;\n use to_str::ToStr;\n+use ascii::{AsciiCast, AsciiStr};\n \n #[deriving(Clone, Eq)]\n pub struct WindowsPath {\n@@ -753,7 +754,9 @@ impl GenericPath for WindowsPath {\n     fn is_restricted(&self) -> bool {\n         match self.filestem() {\n             Some(stem) => {\n-                match stem.to_lower() {\n+                // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+                // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+                match stem.to_ascii().to_lower().to_str_ascii() {\n                     ~\"con\" | ~\"aux\" | ~\"com1\" | ~\"com2\" | ~\"com3\" | ~\"com4\" |\n                     ~\"lpt1\" | ~\"lpt2\" | ~\"lpt3\" | ~\"prn\" | ~\"nul\" => true,\n                     _ => false\n@@ -809,7 +812,10 @@ impl GenericPath for WindowsPath {\n             host: copy self.host,\n             device: match self.device {\n                 None => None,\n-                Some(ref device) => Some(device.to_upper())\n+\n+                // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+                // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+                Some(ref device) => Some(device.to_ascii().to_upper().to_str_ascii())\n             },\n             is_absolute: self.is_absolute,\n             components: normalize(self.components)"}, {"sha": "92c965256ceaff5f4feafb1cf793b4d007dadc4e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -27,7 +27,6 @@ use option::{None, Option, Some};\n use iterator::Iterator;\n use ptr;\n use str;\n-use u8;\n use uint;\n use vec;\n use to_str::ToStr;\n@@ -787,22 +786,6 @@ pub fn each_split_within<'a>(ss: &'a str,\n     }\n }\n \n-/// Convert a string to lowercase. ASCII only\n-pub fn to_lower(s: &str) -> ~str {\n-    do map(s) |c| {\n-        assert!(char::is_ascii(c));\n-        (unsafe{libc::tolower(c as libc::c_char)}) as char\n-    }\n-}\n-\n-/// Convert a string to uppercase. ASCII only\n-pub fn to_upper(s: &str) -> ~str {\n-    do map(s) |c| {\n-        assert!(char::is_ascii(c));\n-        (unsafe{libc::toupper(c as libc::c_char)}) as char\n-    }\n-}\n-\n /**\n  * Replace all occurrences of one string with another\n  *\n@@ -1610,13 +1593,6 @@ pub fn ends_with<'a,'b>(haystack: &'a str, needle: &'b str) -> bool {\n Section: String properties\n */\n \n-/// Determines if a string contains only ASCII characters\n-pub fn is_ascii(s: &str) -> bool {\n-    let mut i: uint = len(s);\n-    while i > 0u { i -= 1u; if !u8::is_ascii(s[i]) { return false; } }\n-    return true;\n-}\n-\n /// Returns true if the string has length 0\n pub fn is_empty(s: &str) -> bool { len(s) == 0u }\n \n@@ -2403,8 +2379,6 @@ pub trait StrSlice<'self> {\n     fn each_split_str<'a>(&self, sep: &'a str, it: &fn(&'self str) -> bool);\n     fn starts_with<'a>(&self, needle: &'a str) -> bool;\n     fn substr(&self, begin: uint, n: uint) -> &'self str;\n-    fn to_lower(&self) -> ~str;\n-    fn to_upper(&self) -> ~str;\n     fn escape_default(&self) -> ~str;\n     fn escape_unicode(&self) -> ~str;\n     fn trim(&self) -> &'self str;\n@@ -2565,12 +2539,6 @@ impl<'self> StrSlice<'self> for &'self str {\n     fn substr(&self, begin: uint, n: uint) -> &'self str {\n         substr(*self, begin, n)\n     }\n-    /// Convert a string to lowercase\n-    #[inline]\n-    fn to_lower(&self) -> ~str { to_lower(*self) }\n-    /// Convert a string to uppercase\n-    #[inline]\n-    fn to_upper(&self) -> ~str { to_upper(*self) }\n     /// Escape each char in `s` with char::escape_default.\n     #[inline]\n     fn escape_default(&self) -> ~str { escape_default(*self) }\n@@ -3084,27 +3052,6 @@ mod tests {\n         assert!(repeat(~\"hi\", 0) == ~\"\");\n     }\n \n-    #[test]\n-    fn test_to_upper() {\n-        // libc::toupper, and hence str::to_upper\n-        // are culturally insensitive: they only work for ASCII\n-        // (see Issue #1347)\n-        let unicode = ~\"\"; //\"\\u65e5\\u672c\"; // uncomment once non-ASCII works\n-        let input = ~\"abcDEF\" + unicode + ~\"xyz:.;\";\n-        let expected = ~\"ABCDEF\" + unicode + ~\"XYZ:.;\";\n-        let actual = to_upper(input);\n-        assert!(expected == actual);\n-    }\n-\n-    #[test]\n-    fn test_to_lower() {\n-        // libc::tolower, and hence str::to_lower\n-        // are culturally insensitive: they only work for ASCII\n-        // (see Issue #1347)\n-        assert!(~\"\" == to_lower(\"\"));\n-        assert!(~\"ymca\" == to_lower(\"YMCA\"));\n-    }\n-\n     #[test]\n     fn test_unsafe_slice() {\n         assert!(\"ab\" == unsafe {raw::slice_bytes(\"abc\", 0, 2)});\n@@ -3337,13 +3284,6 @@ mod tests {\n         assert!((!is_whitespace(~\"   _   \")));\n     }\n \n-    #[test]\n-    fn test_is_ascii() {\n-        assert!((is_ascii(~\"\")));\n-        assert!((is_ascii(~\"a\")));\n-        assert!((!is_ascii(~\"\\u2009\")));\n-    }\n-\n     #[test]\n     fn test_shift_byte() {\n         let mut s = ~\"ABC\";"}, {"sha": "9180c995ca28c1d8e53aea83b95da7fe0d1a10f1", "filename": "src/libcore/str/ascii.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fascii.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -199,6 +199,7 @@ impl ToStrConsume for ~[Ascii] {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use str;\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);\n@@ -221,6 +222,9 @@ mod tests {\n         assert_eq!('['.to_ascii().to_lower().to_char(), '[');\n         assert_eq!('`'.to_ascii().to_upper().to_char(), '`');\n         assert_eq!('{'.to_ascii().to_upper().to_char(), '{');\n+\n+        assert!(str::all(~\"banana\", |c| c.is_ascii()));\n+        assert!(! str::all(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", |c| c.is_ascii()));\n     }\n \n     #[test]\n@@ -234,6 +238,15 @@ mod tests {\n \n         assert_eq!(\"abCDef&?#\".to_ascii().to_lower().to_str_ascii(), ~\"abcdef&?#\");\n         assert_eq!(\"abCDef&?#\".to_ascii().to_upper().to_str_ascii(), ~\"ABCDEF&?#\");\n+\n+        assert_eq!(\"\".to_ascii().to_lower().to_str_ascii(), ~\"\");\n+        assert_eq!(\"YMCA\".to_ascii().to_lower().to_str_ascii(), ~\"ymca\");\n+        assert_eq!(\"abcDEFxyz:.;\".to_ascii().to_upper().to_str_ascii(), ~\"ABCDEFXYZ:.;\");\n+\n+        assert!(\"\".is_ascii());\n+        assert!(\"a\".is_ascii());\n+        assert!(!\"\\u2009\".is_ascii());\n+\n     }\n \n     #[test]"}, {"sha": "b812be5575a4a3a3c79de6e6910abb7195be6124", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -520,7 +520,13 @@ pub mod rt {\n             match cv.ty {\n               TyDefault => uint_to_str_prec(u, 10, prec),\n               TyHexLower => uint_to_str_prec(u, 16, prec),\n-              TyHexUpper => str::to_upper(uint_to_str_prec(u, 16, prec)),\n+\n+              // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+              // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+              TyHexUpper => {\n+                let s = uint_to_str_prec(u, 16, prec);\n+                s.to_ascii().to_upper().to_str_ascii()\n+              }\n               TyBits => uint_to_str_prec(u, 2, prec),\n               TyOctal => uint_to_str_prec(u, 8, prec)\n             };"}, {"sha": "f33bb878ee4ba42394533eb287f55428ad2d4913", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -546,7 +546,11 @@ pub fn build_session_options(binary: @~str,\n     let lint_dict = lint::get_lint_dict();\n     for lint_levels.each |level| {\n         let level_name = lint::level_to_str(*level);\n-        let level_short = level_name.substr(0,1).to_upper();\n+\n+        // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+        // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+        let level_short = level_name.substr(0,1);\n+        let level_short = level_short.to_ascii().to_upper().to_str_ascii();\n         let flags = vec::append(getopts::opt_strs(matches, level_short),\n                                 getopts::opt_strs(matches, level_name));\n         for flags.each |lint_name| {"}, {"sha": "631c86b74f1e92c0749877c4eeb5f717e081f9b9", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -157,7 +157,9 @@ pub fn pandoc_header_id(header: &str) -> ~str {\n         let s = str::replace(s, ~\" \", ~\"-\");\n         return s;\n     }\n-    fn convert_to_lowercase(s: &str) -> ~str { str::to_lower(s) }\n+    // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+    // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+    fn convert_to_lowercase(s: &str) -> ~str { s.to_ascii().to_lower().to_str_ascii() }\n     fn remove_up_to_first_letter(s: &str) -> ~str { s.to_str() }\n     fn maybe_use_section_id(s: &str) -> ~str { s.to_str() }\n }"}, {"sha": "f6d1b1ba2ecd4a68ec2a1d6e7f9d2cb7c23a1607", "filename": "src/libstd/semver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibstd%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibstd%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsemver.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -220,7 +220,7 @@ fn parse_reader(rdr: @io::Reader) -> Version {\n \n \n pub fn parse(s: &str) -> Option<Version> {\n-    if ! str::is_ascii(s) {\n+    if !s.is_ascii() {\n         return None;\n     }\n     let s = s.trim();"}, {"sha": "cc002bc8305a25f298e410b66f9900549d465e3c", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -885,8 +885,12 @@ mod tests {\n         // tjc: funny that we have to use parens\n         fn ile(x: &(&'static str), y: &(&'static str)) -> bool\n         {\n-            let x = x.to_lower();\n-            let y = y.to_lower();\n+            // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+            // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+            // (Actually, could just remove the to_str_* call, but needs an deriving(Ord) on\n+            // Ascii)\n+            let x = x.to_ascii().to_lower().to_str_ascii();\n+            let y = y.to_ascii().to_lower().to_str_ascii();\n             x <= y\n         }\n "}, {"sha": "4c8c984cd07c96a67c32876ae13d6bfd44f90a42", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee3789b4e434d90661601f00867da4980a74a676/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3789b4e434d90661601f00867da4980a74a676/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=ee3789b4e434d90661601f00867da4980a74a676", "patch": "@@ -59,7 +59,10 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n    for pairs_sorted.each |kv| {\n        let (k,v) = copy *kv;\n        unsafe {\n-           buffer += (fmt!(\"%s %0.3f\\n\", str::to_upper(str::raw::from_bytes(k)), v));\n+           let b = str::raw::from_bytes(k);\n+           // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+           // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+           buffer += (fmt!(\"%s %0.3f\\n\", b.to_ascii().to_upper().to_str_ascii(), v));\n        }\n    }\n \n@@ -68,7 +71,9 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<~[u8], uint>, key: ~str) -> uint {\n-   match mm.find(&str::to_bytes(str::to_lower(key))) {\n+   // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n+   // to_ascii_consume and to_str_consume to not do a unnecessary copy.\n+   match mm.find(&str::to_bytes(key.to_ascii().to_lower().to_str_ascii())) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }\n    }"}]}