{"sha": "b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZmUwMDVlZWZkYTJhNmRmMTkwZjNkNmEyYmE4YTUxZmIzYWNiZTI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-20T18:55:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-23T12:23:59Z"}, "message": "Greatly improve limitation handling on parallel rustdoc GUI test run", "tree": {"sha": "4ecb3e3ec2fb5fdbc6a78e7f5af4b0ecf22d0455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ecb3e3ec2fb5fdbc6a78e7f5af4b0ecf22d0455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2", "html_url": "https://github.com/rust-lang/rust/commit/b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "521734787ecf80ff12df7ca5998f7ec0b3b7b2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/521734787ecf80ff12df7ca5998f7ec0b3b7b2c9", "html_url": "https://github.com/rust-lang/rust/commit/521734787ecf80ff12df7ca5998f7ec0b3b7b2c9"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "d34dcc0f0942fd0138ee0b997f8014abc693f122", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=b7fe005eefda2a6df190f3d6a2ba8a51fb3acbe2", "patch": "@@ -3,6 +3,7 @@\n // ```\n // npm install browser-ui-test\n // ```\n+\n const fs = require(\"fs\");\n const path = require(\"path\");\n const os = require('os');\n@@ -172,12 +173,14 @@ async function main(argv) {\n     files.sort();\n \n     console.log(`Running ${files.length} rustdoc-gui tests...`);\n+\n     if (opts[\"jobs\"] < 1) {\n         process.setMaxListeners(files.length + 1);\n     } else {\n-        process.setMaxListeners(opts[\"jobs\"]);\n+        process.setMaxListeners(opts[\"jobs\"] + 1);\n     }\n-    let tests = [];\n+\n+    const tests_queue = [];\n     let results = {\n         successful: [],\n         failed: [],\n@@ -187,19 +190,18 @@ async function main(argv) {\n     for (let i = 0; i < files.length; ++i) {\n         const file_name = files[i];\n         const testPath = path.join(opts[\"tests_folder\"], file_name);\n-        tests.push(\n-            runTest(testPath, options)\n+        const callback = runTest(testPath, options)\n             .then(out => {\n                 const [output, nb_failures] = out;\n                 results[nb_failures === 0 ? \"successful\" : \"failed\"].push({\n                     file_name: file_name,\n                     output: output,\n                 });\n                 if (nb_failures > 0) {\n-                    status_bar.erroneous()\n+                    status_bar.erroneous();\n                     failed = true;\n                 } else {\n-                    status_bar.successful()\n+                    status_bar.successful();\n                 }\n             })\n             .catch(err => {\n@@ -210,13 +212,19 @@ async function main(argv) {\n                 status_bar.erroneous();\n                 failed = true;\n             })\n-        );\n+            .finally(() => {\n+                // We now remove the promise from the tests_queue.\n+                tests_queue.splice(tests_queue.indexOf(callback), 1);\n+            });\n+        tests_queue.push(callback);\n         if (no_headless) {\n-            await tests[i];\n+            await tests_queue[i];\n+        } else if (opts[\"jobs\"] > 0 && tests_queue.length >= opts[\"jobs\"]) {\n+            await Promise.race(tests_queue);\n         }\n     }\n-    if (!no_headless) {\n-        await Promise.all(tests);\n+    if (!no_headless && tests_queue.length > 0) {\n+        await Promise.all(tests_queue);\n     }\n     status_bar.finish();\n "}]}