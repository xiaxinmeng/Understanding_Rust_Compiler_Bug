{"sha": "aa4455e4c76598fcf6de84de14f050a700a2a14e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNDQ1NWU0Yzc2NTk4ZmNmNmRlODRkZTE0ZjA1MGE3MDBhMmExNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-06T09:11:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-06T09:11:18Z"}, "message": "auto merge of #10832 : chris-morgan/rust/let's-lop-lang-item-line-count, r=alexcrichton\n\nThis should make maintenance of lang items simpler and also reduces the\r\nline count by about 201 lines.", "tree": {"sha": "884eedab300011cfb1da35fa2c605445f96af34e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884eedab300011cfb1da35fa2c605445f96af34e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4455e4c76598fcf6de84de14f050a700a2a14e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4455e4c76598fcf6de84de14f050a700a2a14e", "html_url": "https://github.com/rust-lang/rust/commit/aa4455e4c76598fcf6de84de14f050a700a2a14e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4455e4c76598fcf6de84de14f050a700a2a14e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb22ae2b400c99966dad07145a541ce8c2586fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb22ae2b400c99966dad07145a541ce8c2586fb", "html_url": "https://github.com/rust-lang/rust/commit/2eb22ae2b400c99966dad07145a541ce8c2586fb"}, {"sha": "0b1bbc5fd6cf477011f5a56ca0d978658a527db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1bbc5fd6cf477011f5a56ca0d978658a527db9", "html_url": "https://github.com/rust-lang/rust/commit/0b1bbc5fd6cf477011f5a56ca0d978658a527db9"}], "stats": {"total": 353, "additions": 77, "deletions": 276}, "files": [{"sha": "72471123a3e02d7d33d90d3414c5f017e9ee9544", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 77, "deletions": 276, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/aa4455e4c76598fcf6de84de14f050a700a2a14e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4455e4c76598fcf6de84de14f050a700a2a14e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=aa4455e4c76598fcf6de84de14f050a700a2a14e", "patch": "@@ -34,66 +34,26 @@ use std::hashmap::HashMap;\n use std::iter::Enumerate;\n use std::vec;\n \n+// The actual lang items defined come at the end of this file in one handy table.\n+// So you probably just want to nip down to the end.\n+macro_rules! lets_do_this {\n+    (\n+        There are $num_lang_items:expr lang items.\n+        $( $num:pat, $variant:ident, $name:expr, $method:ident; )*\n+    ) => {\n+\n pub enum LangItem {\n-    FreezeTraitLangItem,               // 0\n-    SendTraitLangItem,                 // 1\n-    SizedTraitLangItem,                // 2\n-\n-    DropTraitLangItem,                 // 3\n-\n-    AddTraitLangItem,                  // 4\n-    SubTraitLangItem,                  // 5\n-    MulTraitLangItem,                  // 6\n-    DivTraitLangItem,                  // 7\n-    RemTraitLangItem,                  // 8\n-    NegTraitLangItem,                  // 9\n-    NotTraitLangItem,                  // 10\n-    BitXorTraitLangItem,               // 11\n-    BitAndTraitLangItem,               // 12\n-    BitOrTraitLangItem,                // 13\n-    ShlTraitLangItem,                  // 14\n-    ShrTraitLangItem,                  // 15\n-    IndexTraitLangItem,                // 16\n-\n-    EqTraitLangItem,                   // 17\n-    OrdTraitLangItem,                  // 18\n-\n-    StrEqFnLangItem,                   // 19\n-    UniqStrEqFnLangItem,               // 20\n-    FailFnLangItem,                    // 21\n-    FailBoundsCheckFnLangItem,         // 22\n-    ExchangeMallocFnLangItem,          // 23\n-    ClosureExchangeMallocFnLangItem,   // 24\n-    ExchangeFreeFnLangItem,            // 25\n-    MallocFnLangItem,                  // 26\n-    FreeFnLangItem,                    // 27\n-    BorrowAsImmFnLangItem,             // 28\n-    BorrowAsMutFnLangItem,             // 29\n-    ReturnToMutFnLangItem,             // 30\n-    CheckNotBorrowedFnLangItem,        // 31\n-    StrDupUniqFnLangItem,              // 32\n-    RecordBorrowFnLangItem,            // 33\n-    UnrecordBorrowFnLangItem,          // 34\n-\n-    StartFnLangItem,                   // 35\n-\n-    TyDescStructLangItem,              // 36\n-    TyVisitorTraitLangItem,            // 37\n-    OpaqueStructLangItem,              // 38\n-\n-    EventLoopFactoryLangItem,          // 39\n-\n-    TypeIdLangItem,                    // 40\n+    $($variant),*\n }\n \n pub struct LanguageItems {\n-    items: [Option<ast::DefId>, ..41]\n+    items: [Option<ast::DefId>, ..$num_lang_items]\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..41 ]\n+            items: [ None, ..$num_lang_items ]\n         }\n     }\n \n@@ -103,61 +63,11 @@ impl LanguageItems {\n \n     pub fn item_name(index: uint) -> &'static str {\n         match index {\n-            0  => \"freeze\",\n-            1  => \"send\",\n-            2  => \"sized\",\n-\n-            3  => \"drop\",\n-\n-            4  => \"add\",\n-            5  => \"sub\",\n-            6  => \"mul\",\n-            7  => \"div\",\n-            8  => \"rem\",\n-            9  => \"neg\",\n-            10 => \"not\",\n-            11 => \"bitxor\",\n-            12 => \"bitand\",\n-            13 => \"bitor\",\n-            14 => \"shl\",\n-            15 => \"shr\",\n-            16 => \"index\",\n-            17 => \"eq\",\n-            18 => \"ord\",\n-\n-            19 => \"str_eq\",\n-            20 => \"uniq_str_eq\",\n-            21 => \"fail_\",\n-            22 => \"fail_bounds_check\",\n-            23 => \"exchange_malloc\",\n-            24 => \"closure_exchange_malloc\",\n-            25 => \"exchange_free\",\n-            26 => \"malloc\",\n-            27 => \"free\",\n-            28 => \"borrow_as_imm\",\n-            29 => \"borrow_as_mut\",\n-            30 => \"return_to_mut\",\n-            31 => \"check_not_borrowed\",\n-            32 => \"strdup_uniq\",\n-            33 => \"record_borrow\",\n-            34 => \"unrecord_borrow\",\n-\n-            35 => \"start\",\n-\n-            36 => \"ty_desc\",\n-            37 => \"ty_visitor\",\n-            38 => \"opaque\",\n-\n-            39 => \"event_loop_factory\",\n-\n-            40 => \"type_id\",\n-\n+            $( $num => $name, )*\n             _ => \"???\"\n         }\n     }\n \n-    // FIXME #4621: Method macros sure would be nice here.\n-\n     pub fn require(&self, it: LangItem) -> Result<ast::DefId, ~str> {\n         match self.items[it as uint] {\n             Some(id) => Ok(id),\n@@ -178,133 +88,11 @@ impl LanguageItems {\n         }\n     }\n \n-    pub fn freeze_trait(&self) -> Option<ast::DefId> {\n-        self.items[FreezeTraitLangItem as uint]\n-    }\n-    pub fn send_trait(&self) -> Option<ast::DefId> {\n-        self.items[SendTraitLangItem as uint]\n-    }\n-    pub fn sized_trait(&self) -> Option<ast::DefId> {\n-        self.items[SizedTraitLangItem as uint]\n-    }\n-\n-    pub fn drop_trait(&self) -> Option<ast::DefId> {\n-        self.items[DropTraitLangItem as uint]\n-    }\n-\n-    pub fn add_trait(&self) -> Option<ast::DefId> {\n-        self.items[AddTraitLangItem as uint]\n-    }\n-    pub fn sub_trait(&self) -> Option<ast::DefId> {\n-        self.items[SubTraitLangItem as uint]\n-    }\n-    pub fn mul_trait(&self) -> Option<ast::DefId> {\n-        self.items[MulTraitLangItem as uint]\n-    }\n-    pub fn div_trait(&self) -> Option<ast::DefId> {\n-        self.items[DivTraitLangItem as uint]\n-    }\n-    pub fn rem_trait(&self) -> Option<ast::DefId> {\n-        self.items[RemTraitLangItem as uint]\n-    }\n-    pub fn neg_trait(&self) -> Option<ast::DefId> {\n-        self.items[NegTraitLangItem as uint]\n-    }\n-    pub fn not_trait(&self) -> Option<ast::DefId> {\n-        self.items[NotTraitLangItem as uint]\n-    }\n-    pub fn bitxor_trait(&self) -> Option<ast::DefId> {\n-        self.items[BitXorTraitLangItem as uint]\n-    }\n-    pub fn bitand_trait(&self) -> Option<ast::DefId> {\n-        self.items[BitAndTraitLangItem as uint]\n-    }\n-    pub fn bitor_trait(&self) -> Option<ast::DefId> {\n-        self.items[BitOrTraitLangItem as uint]\n-    }\n-    pub fn shl_trait(&self) -> Option<ast::DefId> {\n-        self.items[ShlTraitLangItem as uint]\n-    }\n-    pub fn shr_trait(&self) -> Option<ast::DefId> {\n-        self.items[ShrTraitLangItem as uint]\n-    }\n-    pub fn index_trait(&self) -> Option<ast::DefId> {\n-        self.items[IndexTraitLangItem as uint]\n-    }\n-\n-    pub fn eq_trait(&self) -> Option<ast::DefId> {\n-        self.items[EqTraitLangItem as uint]\n-    }\n-    pub fn ord_trait(&self) -> Option<ast::DefId> {\n-        self.items[OrdTraitLangItem as uint]\n-    }\n-\n-    pub fn str_eq_fn(&self) -> Option<ast::DefId> {\n-        self.items[StrEqFnLangItem as uint]\n-    }\n-    pub fn uniq_str_eq_fn(&self) -> Option<ast::DefId> {\n-        self.items[UniqStrEqFnLangItem as uint]\n-    }\n-    pub fn fail_fn(&self) -> Option<ast::DefId> {\n-        self.items[FailFnLangItem as uint]\n-    }\n-    pub fn fail_bounds_check_fn(&self) -> Option<ast::DefId> {\n-        self.items[FailBoundsCheckFnLangItem as uint]\n-    }\n-    pub fn exchange_malloc_fn(&self) -> Option<ast::DefId> {\n-        self.items[ExchangeMallocFnLangItem as uint]\n-    }\n-    pub fn closure_exchange_malloc_fn(&self) -> Option<ast::DefId> {\n-        self.items[ClosureExchangeMallocFnLangItem as uint]\n-    }\n-    pub fn exchange_free_fn(&self) -> Option<ast::DefId> {\n-        self.items[ExchangeFreeFnLangItem as uint]\n-    }\n-    pub fn malloc_fn(&self) -> Option<ast::DefId> {\n-        self.items[MallocFnLangItem as uint]\n-    }\n-    pub fn free_fn(&self) -> Option<ast::DefId> {\n-        self.items[FreeFnLangItem as uint]\n-    }\n-    pub fn borrow_as_imm_fn(&self) -> Option<ast::DefId> {\n-        self.items[BorrowAsImmFnLangItem as uint]\n-    }\n-    pub fn borrow_as_mut_fn(&self) -> Option<ast::DefId> {\n-        self.items[BorrowAsMutFnLangItem as uint]\n-    }\n-    pub fn return_to_mut_fn(&self) -> Option<ast::DefId> {\n-        self.items[ReturnToMutFnLangItem as uint]\n-    }\n-    pub fn check_not_borrowed_fn(&self) -> Option<ast::DefId> {\n-        self.items[CheckNotBorrowedFnLangItem as uint]\n-    }\n-    pub fn strdup_uniq_fn(&self) -> Option<ast::DefId> {\n-        self.items[StrDupUniqFnLangItem as uint]\n-    }\n-    pub fn record_borrow_fn(&self) -> Option<ast::DefId> {\n-        self.items[RecordBorrowFnLangItem as uint]\n-    }\n-    pub fn unrecord_borrow_fn(&self) -> Option<ast::DefId> {\n-        self.items[UnrecordBorrowFnLangItem as uint]\n-    }\n-    pub fn start_fn(&self) -> Option<ast::DefId> {\n-        self.items[StartFnLangItem as uint]\n-    }\n-    pub fn ty_desc(&self) -> Option<ast::DefId> {\n-        self.items[TyDescStructLangItem as uint]\n-    }\n-    pub fn ty_visitor(&self) -> Option<ast::DefId> {\n-        self.items[TyVisitorTraitLangItem as uint]\n-    }\n-    pub fn opaque(&self) -> Option<ast::DefId> {\n-        self.items[OpaqueStructLangItem as uint]\n-    }\n-    pub fn event_loop_factory(&self) -> Option<ast::DefId> {\n-        self.items[EventLoopFactoryLangItem as uint]\n-    }\n-    pub fn type_id(&self) -> Option<ast::DefId> {\n-        self.items[TypeIdLangItem as uint]\n-    }\n+    $(\n+        pub fn $method(&self) -> Option<ast::DefId> {\n+            self.items[$variant as uint]\n+        }\n+    )*\n }\n \n struct LanguageItemCollector {\n@@ -343,53 +131,7 @@ impl LanguageItemCollector {\n     pub fn new(session: Session) -> LanguageItemCollector {\n         let mut item_refs = HashMap::new();\n \n-        item_refs.insert(\"freeze\", FreezeTraitLangItem as uint);\n-        item_refs.insert(\"send\", SendTraitLangItem as uint);\n-        item_refs.insert(\"sized\", SizedTraitLangItem as uint);\n-\n-        item_refs.insert(\"drop\", DropTraitLangItem as uint);\n-\n-        item_refs.insert(\"add\", AddTraitLangItem as uint);\n-        item_refs.insert(\"sub\", SubTraitLangItem as uint);\n-        item_refs.insert(\"mul\", MulTraitLangItem as uint);\n-        item_refs.insert(\"div\", DivTraitLangItem as uint);\n-        item_refs.insert(\"rem\", RemTraitLangItem as uint);\n-        item_refs.insert(\"neg\", NegTraitLangItem as uint);\n-        item_refs.insert(\"not\", NotTraitLangItem as uint);\n-        item_refs.insert(\"bitxor\", BitXorTraitLangItem as uint);\n-        item_refs.insert(\"bitand\", BitAndTraitLangItem as uint);\n-        item_refs.insert(\"bitor\", BitOrTraitLangItem as uint);\n-        item_refs.insert(\"shl\", ShlTraitLangItem as uint);\n-        item_refs.insert(\"shr\", ShrTraitLangItem as uint);\n-        item_refs.insert(\"index\", IndexTraitLangItem as uint);\n-\n-        item_refs.insert(\"eq\", EqTraitLangItem as uint);\n-        item_refs.insert(\"ord\", OrdTraitLangItem as uint);\n-\n-        item_refs.insert(\"str_eq\", StrEqFnLangItem as uint);\n-        item_refs.insert(\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n-        item_refs.insert(\"fail_\", FailFnLangItem as uint);\n-        item_refs.insert(\"fail_bounds_check\",\n-                         FailBoundsCheckFnLangItem as uint);\n-        item_refs.insert(\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n-        item_refs.insert(\"closure_exchange_malloc\", ClosureExchangeMallocFnLangItem as uint);\n-        item_refs.insert(\"exchange_free\", ExchangeFreeFnLangItem as uint);\n-        item_refs.insert(\"malloc\", MallocFnLangItem as uint);\n-        item_refs.insert(\"free\", FreeFnLangItem as uint);\n-        item_refs.insert(\"borrow_as_imm\", BorrowAsImmFnLangItem as uint);\n-        item_refs.insert(\"borrow_as_mut\", BorrowAsMutFnLangItem as uint);\n-        item_refs.insert(\"return_to_mut\", ReturnToMutFnLangItem as uint);\n-        item_refs.insert(\"check_not_borrowed\",\n-                         CheckNotBorrowedFnLangItem as uint);\n-        item_refs.insert(\"strdup_uniq\", StrDupUniqFnLangItem as uint);\n-        item_refs.insert(\"record_borrow\", RecordBorrowFnLangItem as uint);\n-        item_refs.insert(\"unrecord_borrow\", UnrecordBorrowFnLangItem as uint);\n-        item_refs.insert(\"start\", StartFnLangItem as uint);\n-        item_refs.insert(\"ty_desc\", TyDescStructLangItem as uint);\n-        item_refs.insert(\"ty_visitor\", TyVisitorTraitLangItem as uint);\n-        item_refs.insert(\"opaque\", OpaqueStructLangItem as uint);\n-        item_refs.insert(\"event_loop_factory\", EventLoopFactoryLangItem as uint);\n-        item_refs.insert(\"type_id\", TypeIdLangItem as uint);\n+        $( item_refs.insert($name, $variant as uint); )*\n \n         LanguageItemCollector {\n             session: session,\n@@ -458,3 +200,62 @@ pub fn collect_language_items(crate: &ast::Crate,\n     session.abort_if_errors();\n     items\n }\n+\n+// End of the macro\n+    }\n+}\n+\n+lets_do_this! {\n+    There are 41 lang items.\n+\n+//  ID, Variant name,                    Name,                      Method name;\n+    0,  FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n+    1,  SendTraitLangItem,               \"send\",                    send_trait;\n+    2,  SizedTraitLangItem,              \"sized\",                   sized_trait;\n+\n+    3,  DropTraitLangItem,               \"drop\",                    drop_trait;\n+\n+    4,  AddTraitLangItem,                \"add\",                     add_trait;\n+    5,  SubTraitLangItem,                \"sub\",                     sub_trait;\n+    6,  MulTraitLangItem,                \"mul\",                     mul_trait;\n+    7,  DivTraitLangItem,                \"div\",                     div_trait;\n+    8,  RemTraitLangItem,                \"rem\",                     rem_trait;\n+    9,  NegTraitLangItem,                \"neg\",                     neg_trait;\n+    10, NotTraitLangItem,                \"not\",                     not_trait;\n+    11, BitXorTraitLangItem,             \"bitxor\",                  bitxor_trait;\n+    12, BitAndTraitLangItem,             \"bitand\",                  bitand_trait;\n+    13, BitOrTraitLangItem,              \"bitor\",                   bitor_trait;\n+    14, ShlTraitLangItem,                \"shl\",                     shl_trait;\n+    15, ShrTraitLangItem,                \"shr\",                     shr_trait;\n+    16, IndexTraitLangItem,              \"index\",                   index_trait;\n+\n+    17, EqTraitLangItem,                 \"eq\",                      eq_trait;\n+    18, OrdTraitLangItem,                \"ord\",                     ord_trait;\n+\n+    19, StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n+    20, UniqStrEqFnLangItem,             \"uniq_str_eq\",             uniq_str_eq_fn;\n+    21, FailFnLangItem,                  \"fail_\",                   fail_fn;\n+    22, FailBoundsCheckFnLangItem,       \"fail_bounds_check\",       fail_bounds_check_fn;\n+    23, ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n+    24, ClosureExchangeMallocFnLangItem, \"closure_exchange_malloc\", closure_exchange_malloc_fn;\n+    25, ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n+    26, MallocFnLangItem,                \"malloc\",                  malloc_fn;\n+    27, FreeFnLangItem,                  \"free\",                    free_fn;\n+    28, BorrowAsImmFnLangItem,           \"borrow_as_imm\",           borrow_as_imm_fn;\n+    29, BorrowAsMutFnLangItem,           \"borrow_as_mut\",           borrow_as_mut_fn;\n+    30, ReturnToMutFnLangItem,           \"return_to_mut\",           return_to_mut_fn;\n+    31, CheckNotBorrowedFnLangItem,      \"check_not_borrowed\",      check_not_borrowed_fn;\n+    32, StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n+    33, RecordBorrowFnLangItem,          \"record_borrow\",           record_borrow_fn;\n+    34, UnrecordBorrowFnLangItem,        \"unrecord_borrow\",         unrecord_borrow_fn;\n+\n+    35, StartFnLangItem,                 \"start\",                   start_fn;\n+\n+    36, TyDescStructLangItem,            \"ty_desc\",                 ty_desc;\n+    37, TyVisitorTraitLangItem,          \"ty_visitor\",              ty_visitor;\n+    38, OpaqueStructLangItem,            \"opaque\",                  opaque;\n+\n+    39, EventLoopFactoryLangItem,        \"event_loop_factory\",      event_loop_factory;\n+\n+    40, TypeIdLangItem,                  \"type_id\",                 type_id;\n+}"}]}