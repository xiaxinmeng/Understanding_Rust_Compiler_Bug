{"sha": "554c3c316e2fedca11aa3bf5659937dd76200a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NGMzYzMxNmUyZmVkY2ExMWFhM2JmNTY1OTkzN2RkNzYyMDBhMTQ=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-12-09T04:13:10Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-12-09T04:14:36Z"}, "message": "Use LLVM integrated assembler on Windows too.", "tree": {"sha": "eeb053ff4c1fafedec5a8787bfeb1075cf592577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb053ff4c1fafedec5a8787bfeb1075cf592577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/554c3c316e2fedca11aa3bf5659937dd76200a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/554c3c316e2fedca11aa3bf5659937dd76200a14", "html_url": "https://github.com/rust-lang/rust/commit/554c3c316e2fedca11aa3bf5659937dd76200a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/554c3c316e2fedca11aa3bf5659937dd76200a14/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "820271df1c3d7899460c0fa25c1a7cf74d45d431", "url": "https://api.github.com/repos/rust-lang/rust/commits/820271df1c3d7899460c0fa25c1a7cf74d45d431", "html_url": "https://github.com/rust-lang/rust/commit/820271df1c3d7899460c0fa25c1a7cf74d45d431"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "d57bbdb5f2f9721db61554c1cff4c5188660055c", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/554c3c316e2fedca11aa3bf5659937dd76200a14/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/554c3c316e2fedca11aa3bf5659937dd76200a14/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=554c3c316e2fedca11aa3bf5659937dd76200a14", "patch": "@@ -352,13 +352,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n                                trans: &CrateTranslation,\n                                outputs: &OutputFilenames) {\n \n-    // On Windows, LLVM integrated assembler emits bad stack unwind tables when\n-    // segmented stacks are enabled.  However, unwind info directives in assembly\n-    // output are OK, so we generate assembly first and then run it through\n-    // an external assembler.\n-    if sess.targ_cfg.os == abi::OsWin32 &&\n-        (sess.opts.output_type == link::output_type_object ||\n-         sess.opts.output_type == link::output_type_exe) {\n+    if sess.no_integrated_as() {\n         let output_type = link::output_type_assembly;\n         let asm_filename = outputs.obj_filename.with_extension(\"s\");\n \n@@ -371,7 +365,7 @@ pub fn phase_5_run_llvm_passes(sess: Session,\n \n         link::write::run_assembler(sess, &asm_filename, &outputs.obj_filename);\n \n-        // Remove assembly source unless --save-temps was specified\n+        // Remove assembly source, unless --save-temps was specified\n         if !sess.opts.save_temps {\n             fs::unlink(&asm_filename);\n         }"}, {"sha": "2d1d7033300b53516454023708542a25d7471aa2", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/554c3c316e2fedca11aa3bf5659937dd76200a14/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/554c3c316e2fedca11aa3bf5659937dd76200a14/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=554c3c316e2fedca11aa3bf5659937dd76200a14", "patch": "@@ -66,6 +66,7 @@ pub static no_prepopulate_passes:   uint = 1 << 25;\n pub static use_softfp:              uint = 1 << 26;\n pub static gen_crate_map:           uint = 1 << 27;\n pub static prefer_dynamic:          uint = 1 << 28;\n+pub static no_integrated_as:        uint = 1 << 29;\n \n pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n     ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n@@ -117,6 +118,8 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n      (\"soft-float\", \"Generate software floating point library calls\", use_softfp),\n      (\"gen-crate-map\", \"Force generation of a toplevel crate map\", gen_crate_map),\n      (\"prefer-dynamic\", \"Prefer dynamic linking to static linking\", prefer_dynamic),\n+     (\"no-integrated-as\",\n+      \"Use external assembler rather than LLVM's integrated one\", no_integrated_as),\n     ]\n }\n \n@@ -335,6 +338,9 @@ impl Session_ {\n     pub fn prefer_dynamic(&self) -> bool {\n         self.debugging_opt(prefer_dynamic)\n     }\n+    pub fn no_integrated_as(&self) -> bool {\n+        self.debugging_opt(no_integrated_as)\n+    }\n \n     // pointless function, now...\n     pub fn str_of(&self, id: ast::Ident) -> @str {"}]}