{"sha": "0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "node_id": "C_kwDOAAsO6NoAKDBhM2I1NTdkNTI4ZGQ3YzhhODhjZWNhNmY3ZGMwNjk5Yjg5YTNlZjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T09:43:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T09:43:12Z"}, "message": "Auto merge of #95317 - Jules-Bertholet:round_ties_to_even, r=pnkfelix,m-ou-se,scottmcm\n\nAdd `round_ties_even` to `f32` and `f64`\n\nTracking issue: #96710\n\nRedux of #82273. See also #55107\n\nAdds a new method, `round_ties_even`, to `f32` and `f64`, that rounds the float to the nearest integer , rounding halfway cases to the number with an even least significant bit. Uses the `roundeven` LLVM intrinsic to do this.\n\nOf the five IEEE 754 rounding modes, this is the only one that doesn't already have a round-to-integer function exposed by Rust (others are `round`, `floor`, `ceil`, and `trunc`).  Ties-to-even is also the rounding mode used for int-to-float and float-to-float `as` casts, as well as float arithmentic operations. So not having an explicit rounding method for it seems like an oversight.\n\nBikeshed: this PR currently uses `round_ties_even` for the name of the method. But maybe `round_ties_to_even` is better, or `round_even`, or `round_to_even`?", "tree": {"sha": "ad02b3e1690da2f936e346d44840d552b97f9f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad02b3e1690da2f936e346d44840d552b97f9f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "html_url": "https://github.com/rust-lang/rust/commit/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "html_url": "https://github.com/rust-lang/rust/commit/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13"}, {"sha": "371d57084d7c2e2dd9b4ac6b5bb9fcc8b0dacd1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/371d57084d7c2e2dd9b4ac6b5bb9fcc8b0dacd1e", "html_url": "https://github.com/rust-lang/rust/commit/371d57084d7c2e2dd9b4ac6b5bb9fcc8b0dacd1e"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "24f8d5e464e4c19ebea82c258d383243707ca723", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -281,8 +281,12 @@ fn codegen_float_intrinsic_call<'tcx>(\n         sym::ceilf64 => (\"ceil\", 1, fx.tcx.types.f64),\n         sym::truncf32 => (\"truncf\", 1, fx.tcx.types.f32),\n         sym::truncf64 => (\"trunc\", 1, fx.tcx.types.f64),\n+        sym::rintf32 => (\"rintf\", 1, fx.tcx.types.f32),\n+        sym::rintf64 => (\"rint\", 1, fx.tcx.types.f64),\n         sym::roundf32 => (\"roundf\", 1, fx.tcx.types.f32),\n         sym::roundf64 => (\"round\", 1, fx.tcx.types.f64),\n+        sym::roundevenf32 => (\"roundevenf\", 1, fx.tcx.types.f32),\n+        sym::roundevenf64 => (\"roundeven\", 1, fx.tcx.types.f64),\n         sym::sinf32 => (\"sinf\", 1, fx.tcx.types.f32),\n         sym::sinf64 => (\"sin\", 1, fx.tcx.types.f64),\n         sym::cosf32 => (\"cosf\", 1, fx.tcx.types.f32),"}, {"sha": "35e650c65a0811a511e9d3cc515b7c3ae15dc808", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -68,6 +68,8 @@ fn get_simple_intrinsic<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, name: Symbol) ->\n         sym::nearbyintf64 => \"nearbyint\",\n         sym::roundf32 => \"roundf\",\n         sym::roundf64 => \"round\",\n+        sym::roundevenf32 => \"roundevenf\",\n+        sym::roundevenf64 => \"roundeven\",\n         sym::abort => \"abort\",\n         _ => return None,\n     };"}, {"sha": "f0d729d4779c6dd5bd6c858327f72313b468d885", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -735,9 +735,13 @@ impl<'ll> CodegenCx<'ll, '_> {\n \n         ifn!(\"llvm.copysign.f32\", fn(t_f32, t_f32) -> t_f32);\n         ifn!(\"llvm.copysign.f64\", fn(t_f64, t_f64) -> t_f64);\n+\n         ifn!(\"llvm.round.f32\", fn(t_f32) -> t_f32);\n         ifn!(\"llvm.round.f64\", fn(t_f64) -> t_f64);\n \n+        ifn!(\"llvm.roundeven.f32\", fn(t_f32) -> t_f32);\n+        ifn!(\"llvm.roundeven.f64\", fn(t_f64) -> t_f64);\n+\n         ifn!(\"llvm.rint.f32\", fn(t_f32) -> t_f32);\n         ifn!(\"llvm.rint.f64\", fn(t_f64) -> t_f64);\n         ifn!(\"llvm.nearbyint.f32\", fn(t_f32) -> t_f32);"}, {"sha": "9c921989ca9a76b6089acae0513fec75e0d82a1d", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -71,6 +71,8 @@ fn get_simple_intrinsic<'ll>(\n         sym::roundf32 => \"llvm.round.f32\",\n         sym::roundf64 => \"llvm.round.f64\",\n         sym::ptr_mask => \"llvm.ptrmask\",\n+        sym::roundevenf32 => \"llvm.roundeven.f32\",\n+        sym::roundevenf64 => \"llvm.roundeven.f64\",\n         _ => return None,\n     };\n     Some(cx.get_intrinsic(llvm_name))"}, {"sha": "20b6561f8b256fe9a668e3db4a9e87a9cf41bdfc", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -300,6 +300,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::nearbyintf64 => (0, vec![tcx.types.f64], tcx.types.f64),\n             sym::roundf32 => (0, vec![tcx.types.f32], tcx.types.f32),\n             sym::roundf64 => (0, vec![tcx.types.f64], tcx.types.f64),\n+            sym::roundevenf32 => (0, vec![tcx.types.f32], tcx.types.f32),\n+            sym::roundevenf64 => (0, vec![tcx.types.f64], tcx.types.f64),\n \n             sym::volatile_load | sym::unaligned_volatile_load => {\n                 (1, vec![tcx.mk_imm_ptr(param(0))], param(0))"}, {"sha": "4e626fd9f30c01920dfa27e1b31cf8665c6bcefa", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -1197,6 +1197,8 @@ symbols! {\n         rlib,\n         rotate_left,\n         rotate_right,\n+        roundevenf32,\n+        roundevenf64,\n         roundf32,\n         roundf64,\n         rt,"}, {"sha": "c6321587adc6227cafdb9a5b3791090486f201c6", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -1585,9 +1585,15 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\n     /// if the argument is not an integer.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`f32::round_ties_even`](../../std/primitive.f32.html#method.round_ties_even)\n     pub fn rintf32(x: f32) -> f32;\n     /// Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\n     /// if the argument is not an integer.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`f64::round_ties_even`](../../std/primitive.f64.html#method.round_ties_even)\n     pub fn rintf64(x: f64) -> f64;\n \n     /// Returns the nearest integer to an `f32`.\n@@ -1610,6 +1616,19 @@ extern \"rust-intrinsic\" {\n     /// [`f64::round`](../../std/primitive.f64.html#method.round)\n     pub fn roundf64(x: f64) -> f64;\n \n+    /// Returns the nearest integer to an `f32`. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// This intrinsic does not have a stable counterpart.\n+    #[cfg(not(bootstrap))]\n+    pub fn roundevenf32(x: f32) -> f32;\n+    /// Returns the nearest integer to an `f64`. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// This intrinsic does not have a stable counterpart.\n+    #[cfg(not(bootstrap))]\n+    pub fn roundevenf64(x: f64) -> f64;\n+\n     /// Float addition that allows optimizations based on algebraic rules.\n     /// May assume inputs are finite.\n     ///"}, {"sha": "c7c33678fd34c1e3dbdeb9af3f249c333ac93735", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -78,10 +78,14 @@ impl f32 {\n     /// let f = 3.3_f32;\n     /// let g = -3.3_f32;\n     /// let h = -3.7_f32;\n+    /// let i = 3.5_f32;\n+    /// let j = 4.5_f32;\n     ///\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// assert_eq!(h.round(), -4.0);\n+    /// assert_eq!(i.round(), 4.0);\n+    /// assert_eq!(j.round(), 5.0);\n     /// ```\n     #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n@@ -91,6 +95,32 @@ impl f32 {\n         unsafe { intrinsics::roundf32(self) }\n     }\n \n+    /// Returns the nearest integer to a number. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(round_ties_even)]\n+    ///\n+    /// let f = 3.3_f32;\n+    /// let g = -3.3_f32;\n+    /// let h = 3.5_f32;\n+    /// let i = 4.5_f32;\n+    ///\n+    /// assert_eq!(f.round_ties_even(), 3.0);\n+    /// assert_eq!(g.round_ties_even(), -3.0);\n+    /// assert_eq!(h.round_ties_even(), 4.0);\n+    /// assert_eq!(i.round_ties_even(), 4.0);\n+    /// ```\n+    #[rustc_allow_incoherent_impl]\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[unstable(feature = \"round_ties_even\", issue = \"96710\")]\n+    #[inline]\n+    pub fn round_ties_even(self) -> f32 {\n+        unsafe { intrinsics::rintf32(self) }\n+    }\n+\n     /// Returns the integer part of `self`.\n     /// This means that non-integer numbers are always truncated towards zero.\n     ///"}, {"sha": "e949def00bb1fe9b36f08954b1291a5f304ac20f", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -209,6 +209,7 @@ fn test_ceil() {\n \n #[test]\n fn test_round() {\n+    assert_approx_eq!(2.5f32.round(), 3.0f32);\n     assert_approx_eq!(1.0f32.round(), 1.0f32);\n     assert_approx_eq!(1.3f32.round(), 1.0f32);\n     assert_approx_eq!(1.5f32.round(), 2.0f32);\n@@ -221,6 +222,21 @@ fn test_round() {\n     assert_approx_eq!((-1.7f32).round(), -2.0f32);\n }\n \n+#[test]\n+fn test_round_ties_even() {\n+    assert_approx_eq!(2.5f32.round_ties_even(), 2.0f32);\n+    assert_approx_eq!(1.0f32.round_ties_even(), 1.0f32);\n+    assert_approx_eq!(1.3f32.round_ties_even(), 1.0f32);\n+    assert_approx_eq!(1.5f32.round_ties_even(), 2.0f32);\n+    assert_approx_eq!(1.7f32.round_ties_even(), 2.0f32);\n+    assert_approx_eq!(0.0f32.round_ties_even(), 0.0f32);\n+    assert_approx_eq!((-0.0f32).round_ties_even(), -0.0f32);\n+    assert_approx_eq!((-1.0f32).round_ties_even(), -1.0f32);\n+    assert_approx_eq!((-1.3f32).round_ties_even(), -1.0f32);\n+    assert_approx_eq!((-1.5f32).round_ties_even(), -2.0f32);\n+    assert_approx_eq!((-1.7f32).round_ties_even(), -2.0f32);\n+}\n+\n #[test]\n fn test_trunc() {\n     assert_approx_eq!(1.0f32.trunc(), 1.0f32);"}, {"sha": "b1faa670307d6f2c95d197ecd0755bb923dd8914", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -78,10 +78,14 @@ impl f64 {\n     /// let f = 3.3_f64;\n     /// let g = -3.3_f64;\n     /// let h = -3.7_f64;\n+    /// let i = 3.5_f64;\n+    /// let j = 4.5_f64;\n     ///\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n     /// assert_eq!(h.round(), -4.0);\n+    /// assert_eq!(i.round(), 4.0);\n+    /// assert_eq!(j.round(), 5.0);\n     /// ```\n     #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n@@ -91,6 +95,32 @@ impl f64 {\n         unsafe { intrinsics::roundf64(self) }\n     }\n \n+    /// Returns the nearest integer to a number. Rounds half-way cases to the number\n+    /// with an even least significant digit.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(round_ties_even)]\n+    ///\n+    /// let f = 3.3_f64;\n+    /// let g = -3.3_f64;\n+    /// let h = 3.5_f64;\n+    /// let i = 4.5_f64;\n+    ///\n+    /// assert_eq!(f.round_ties_even(), 3.0);\n+    /// assert_eq!(g.round_ties_even(), -3.0);\n+    /// assert_eq!(h.round_ties_even(), 4.0);\n+    /// assert_eq!(i.round_ties_even(), 4.0);\n+    /// ```\n+    #[rustc_allow_incoherent_impl]\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[unstable(feature = \"round_ties_even\", issue = \"96710\")]\n+    #[inline]\n+    pub fn round_ties_even(self) -> f64 {\n+        unsafe { intrinsics::rintf64(self) }\n+    }\n+\n     /// Returns the integer part of `self`.\n     /// This means that non-integer numbers are always truncated towards zero.\n     ///"}, {"sha": "53d351cceef5c4441a76d3fb0354d2bca2a5a674", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -199,6 +199,7 @@ fn test_ceil() {\n \n #[test]\n fn test_round() {\n+    assert_approx_eq!(2.5f64.round(), 3.0f64);\n     assert_approx_eq!(1.0f64.round(), 1.0f64);\n     assert_approx_eq!(1.3f64.round(), 1.0f64);\n     assert_approx_eq!(1.5f64.round(), 2.0f64);\n@@ -211,6 +212,21 @@ fn test_round() {\n     assert_approx_eq!((-1.7f64).round(), -2.0f64);\n }\n \n+#[test]\n+fn test_round_ties_even() {\n+    assert_approx_eq!(2.5f64.round_ties_even(), 2.0f64);\n+    assert_approx_eq!(1.0f64.round_ties_even(), 1.0f64);\n+    assert_approx_eq!(1.3f64.round_ties_even(), 1.0f64);\n+    assert_approx_eq!(1.5f64.round_ties_even(), 2.0f64);\n+    assert_approx_eq!(1.7f64.round_ties_even(), 2.0f64);\n+    assert_approx_eq!(0.0f64.round_ties_even(), 0.0f64);\n+    assert_approx_eq!((-0.0f64).round_ties_even(), -0.0f64);\n+    assert_approx_eq!((-1.0f64).round_ties_even(), -1.0f64);\n+    assert_approx_eq!((-1.3f64).round_ties_even(), -1.0f64);\n+    assert_approx_eq!((-1.5f64).round_ties_even(), -2.0f64);\n+    assert_approx_eq!((-1.7f64).round_ties_even(), -2.0f64);\n+}\n+\n #[test]\n fn test_trunc() {\n     assert_approx_eq!(1.0f64.trunc(), 1.0f64);"}, {"sha": "7837dd276d269702c10807b11486bae67c7122fc", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=0a3b557d528dd7c8a88ceca6f7dc0699b89a3ef4", "patch": "@@ -304,6 +304,7 @@\n #![feature(provide_any)]\n #![feature(ptr_as_uninit)]\n #![feature(raw_os_nonzero)]\n+#![feature(round_ties_even)]\n #![feature(slice_internals)]\n #![feature(slice_ptr_get)]\n #![feature(std_internals)]"}]}