{"sha": "a573d143a2b7ef9d04a8fe6904667762e47157bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NzNkMTQzYTJiN2VmOWQwNGE4ZmU2OTA0NjY3NzYyZTQ3MTU3YmM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-05T20:14:47Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-10T11:12:28Z"}, "message": "Remove unused boxes vector", "tree": {"sha": "68744454d57ec33a961a12bbe5d4e782eb82521b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68744454d57ec33a961a12bbe5d4e782eb82521b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a573d143a2b7ef9d04a8fe6904667762e47157bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a573d143a2b7ef9d04a8fe6904667762e47157bc", "html_url": "https://github.com/rust-lang/rust/commit/a573d143a2b7ef9d04a8fe6904667762e47157bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a573d143a2b7ef9d04a8fe6904667762e47157bc/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44839802853954ca0eea629bb9d94068966f2960", "url": "https://api.github.com/repos/rust-lang/rust/commits/44839802853954ca0eea629bb9d94068966f2960", "html_url": "https://github.com/rust-lang/rust/commit/44839802853954ca0eea629bb9d94068966f2960"}], "stats": {"total": 27, "additions": 0, "deletions": 27}, "files": [{"sha": "137f20d6c32b32dae1f3781761c9f9453d8ab3be", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a573d143a2b7ef9d04a8fe6904667762e47157bc/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a573d143a2b7ef9d04a8fe6904667762e47157bc/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=a573d143a2b7ef9d04a8fe6904667762e47157bc", "patch": "@@ -74,7 +74,6 @@ pub struct State<'a> {\n     cm: Option<&'a SourceMap>,\n     comments: Option<Vec<comments::Comment>>,\n     cur_cmnt: usize,\n-    boxes: Vec<pp::Breaks>,\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n@@ -83,10 +82,6 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.s\n     }\n \n-    fn boxes(&mut self) -> &mut Vec<pp::Breaks> {\n-        &mut self.boxes\n-    }\n-\n     fn comments(&mut self) -> &mut Option<Vec<comments::Comment>> {\n         &mut self.comments\n     }\n@@ -141,7 +136,6 @@ impl<'a> State<'a> {\n             cm: Some(cm),\n             comments,\n             cur_cmnt: 0,\n-            boxes: Vec::new(),\n             ann,\n         }\n     }\n@@ -157,7 +151,6 @@ pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n             cm: None,\n             comments: None,\n             cur_cmnt: 0,\n-            boxes: Vec::new(),\n             ann,\n         };\n         f(&mut printer);\n@@ -175,7 +168,6 @@ pub fn visibility_qualified<S: Into<Cow<'static, str>>>(vis: &hir::Visibility, w\n \n impl<'a> State<'a> {\n     pub fn cbox(&mut self, u: usize) {\n-        self.boxes.push(pp::Breaks::Consistent);\n         self.s.cbox(u);\n     }\n \n@@ -226,13 +218,6 @@ impl<'a> State<'a> {\n         self.bclose_(span, indent_unit)\n     }\n \n-    pub fn in_cbox(&self) -> bool {\n-        match self.boxes.last() {\n-            Some(&last_box) => last_box == pp::Breaks::Consistent,\n-            None => false,\n-        }\n-    }\n-\n     pub fn space_if_not_bol(&mut self) {\n         if !self.is_bol() {\n             self.s.space();"}, {"sha": "4c86300b80562f42988203aa4c771c1868525756", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a573d143a2b7ef9d04a8fe6904667762e47157bc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a573d143a2b7ef9d04a8fe6904667762e47157bc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a573d143a2b7ef9d04a8fe6904667762e47157bc", "patch": "@@ -48,7 +48,6 @@ pub struct State<'a> {\n     cm: Option<&'a SourceMap>,\n     comments: Option<Vec<comments::Comment>>,\n     cur_cmnt: usize,\n-    boxes: Vec<pp::Breaks>,\n     ann: &'a (dyn PpAnn+'a),\n     is_expanded: bool\n }\n@@ -113,7 +112,6 @@ impl<'a> State<'a> {\n             cm: Some(cm),\n             comments,\n             cur_cmnt: 0,\n-            boxes: Vec::new(),\n             ann,\n             is_expanded,\n         }\n@@ -130,7 +128,6 @@ pub fn to_string<F>(f: F) -> String where\n             cm: None,\n             comments: None,\n             cur_cmnt: 0,\n-            boxes: Vec::new(),\n             ann: &NoAnn,\n             is_expanded: false\n         };\n@@ -426,7 +423,6 @@ fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n \n pub trait PrintState<'a> {\n     fn writer(&mut self) -> &mut pp::Printer<'a>;\n-    fn boxes(&mut self) -> &mut Vec<pp::Breaks>;\n     fn comments(&mut self) -> &mut Option<Vec<comments::Comment>>;\n     fn cur_cmnt(&mut self) -> &mut usize;\n \n@@ -466,17 +462,14 @@ pub trait PrintState<'a> {\n \n     // \"raw box\"\n     fn rbox(&mut self, u: usize, b: pp::Breaks) {\n-        self.boxes().push(b);\n         self.writer().rbox(u, b)\n     }\n \n     fn ibox(&mut self, u: usize) {\n-        self.boxes().push(pp::Breaks::Inconsistent);\n         self.writer().ibox(u);\n     }\n \n     fn end(&mut self) {\n-        self.boxes().pop().unwrap();\n         self.writer().end()\n     }\n \n@@ -763,10 +756,6 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.s\n     }\n \n-    fn boxes(&mut self) -> &mut Vec<pp::Breaks> {\n-        &mut self.boxes\n-    }\n-\n     fn comments(&mut self) -> &mut Option<Vec<comments::Comment>> {\n         &mut self.comments\n     }\n@@ -778,7 +767,6 @@ impl<'a> PrintState<'a> for State<'a> {\n \n impl<'a> State<'a> {\n     pub fn cbox(&mut self, u: usize) {\n-        self.boxes.push(pp::Breaks::Consistent);\n         self.s.cbox(u);\n     }\n "}]}