{"sha": "e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYWU3NmFlYWNmMmI0YTJhN2MzZjU0YWQxZTE5OGJkYTQ0YWYwMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T16:25:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T16:25:49Z"}, "message": "Auto merge of #4495 - JohnTitor:fix-map-entry-false-positive, r=phansch\n\nFix `map_entry` false positive\n\nFixes #4219\n\nchangelog: Fix `map_entry` false positive", "tree": {"sha": "2dc546f0b0db99b0dcd4abdbcecfdebf5e4991b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc546f0b0db99b0dcd4abdbcecfdebf5e4991b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030", "html_url": "https://github.com/rust-lang/rust/commit/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a25241ccce71a6009e8ee18ad0bb12c16b95f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a25241ccce71a6009e8ee18ad0bb12c16b95f9", "html_url": "https://github.com/rust-lang/rust/commit/98a25241ccce71a6009e8ee18ad0bb12c16b95f9"}, {"sha": "5c760f055544a694af24226aa1272e0ccbb4f5cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c760f055544a694af24226aa1272e0ccbb4f5cf", "html_url": "https://github.com/rust-lang/rust/commit/5c760f055544a694af24226aa1272e0ccbb4f5cf"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "16009d8ab86d8e14b3078d7187015ddff8097d6f", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, higher, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_opt, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n@@ -140,6 +140,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n             if path.ident.name == sym!(insert);\n             if get_item_name(self.cx, self.map) == get_item_name(self.cx, &params[0]);\n             if SpanlessEq::new(self.cx).eq_expr(self.key, &params[1]);\n+            if snippet_opt(self.cx, self.map.span) == snippet_opt(self.cx, params[0].span);\n             then {\n                 span_lint_and_then(self.cx, MAP_ENTRY, self.span,\n                                    &format!(\"usage of `contains_key` followed by `insert` on a `{}`\", self.ty), |db| {"}, {"sha": "0c84cd325c4d51388aae2820434a4532c1ef9946", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=e3ae76aeacf2b4a2a7c3f54ad1e198bda44af030", "patch": "@@ -68,4 +68,18 @@ fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v:\n     }\n }\n \n+// should not trigger, because the one uses different HashMap from another one\n+fn insert_from_different_map<K: Eq + Hash, V>(m: HashMap<K, V>, n: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) {\n+        n.insert(k, v);\n+    }\n+}\n+\n+// should not trigger, because the one uses different HashMap from another one\n+fn insert_from_different_map2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, n: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) {\n+        n.insert(k, v);\n+    }\n+}\n+\n fn main() {}"}]}