{"sha": "e6100479404c194a4801f577be2e9f69b4c6fef9", "node_id": "C_kwDOAAsO6NoAKGU2MTAwNDc5NDA0YzE5NGE0ODAxZjU3N2JlMmU5ZjY5YjRjNmZlZjk", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-10-07T10:14:56Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `let_underscore.rs`\n\nfix: NonBindingLetSub", "tree": {"sha": "3bce34a6dbcdccae505de36eb835bb6f256949d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bce34a6dbcdccae505de36eb835bb6f256949d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6100479404c194a4801f577be2e9f69b4c6fef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6100479404c194a4801f577be2e9f69b4c6fef9", "html_url": "https://github.com/rust-lang/rust/commit/e6100479404c194a4801f577be2e9f69b4c6fef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6100479404c194a4801f577be2e9f69b4c6fef9/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80df25e1601880a2386495b469b19b60034ca382", "url": "https://api.github.com/repos/rust-lang/rust/commits/80df25e1601880a2386495b469b19b60034ca382", "html_url": "https://github.com/rust-lang/rust/commit/80df25e1601880a2386495b469b19b60034ca382"}], "stats": {"total": 107, "additions": 74, "deletions": 33}, "files": [{"sha": "2423d9c0ef998797bac3df385a296b9d6af791ac", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e6100479404c194a4801f577be2e9f69b4c6fef9/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e6100479404c194a4801f577be2e9f69b4c6fef9/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=e6100479404c194a4801f577be2e9f69b4c6fef9", "patch": "@@ -16,6 +16,18 @@ lint_enum_intrinsics_mem_variant =\n lint_expectation = this lint expectation is unfulfilled\n     .note = the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n \n+lint_non_binding_let_on_sync_lock =\n+    non-binding let on a synchronization lock\n+\n+lint_non_binding_let_on_drop_type =\n+    non-binding let on a type that implements `Drop`\n+\n+lint_non_binding_let_suggestion =\n+    consider binding to an unused variable to avoid immediately dropping the value\n+\n+lint_non_binding_let_multi_suggestion =\n+    consider immediately dropping the value\n+\n lint_deprecated_lint_name =\n     lint name `{$name}` is deprecated and may not have an effect in the future.\n     .suggestion = change it to"}, {"sha": "991b3e920adbc6ea8def3f6b19217292873d506f", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 16, "deletions": 33, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e6100479404c194a4801f577be2e9f69b4c6fef9/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6100479404c194a4801f577be2e9f69b4c6fef9/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=e6100479404c194a4801f577be2e9f69b4c6fef9", "patch": "@@ -1,5 +1,10 @@\n-use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_errors::{Applicability, DiagnosticBuilder, MultiSpan};\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::{\n+    lints::{NonBindingLet, NonBindingLetSub},\n+    LateContext, LateLintPass, LintContext,\n+};\n+use rustc_errors::MultiSpan;\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_span::Symbol;\n@@ -119,6 +124,11 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                 _ => false,\n             };\n \n+            let sub = NonBindingLetSub {\n+                suggestion: local.pat.span,\n+                multi_suggestion_start: local.span.until(init.span),\n+                multi_suggestion_end: init.span.shrink_to_hi(),\n+            };\n             if is_sync_lock {\n                 let mut span = MultiSpan::from_spans(vec![local.pat.span, init.span]);\n                 span.push_span_label(\n@@ -129,41 +139,14 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     init.span,\n                     \"this binding will immediately drop the value assigned to it\".to_string(),\n                 );\n-                cx.struct_span_lint(\n-                    LET_UNDERSCORE_LOCK,\n-                    span,\n-                    \"non-binding let on a synchronization lock\",\n-                    |lint| build_lint(lint, local, init.span),\n-                )\n+                cx.emit_spanned_lint(LET_UNDERSCORE_LOCK, span, NonBindingLet::SyncLock { sub });\n             } else {\n-                cx.struct_span_lint(\n+                cx.emit_spanned_lint(\n                     LET_UNDERSCORE_DROP,\n                     local.span,\n-                    \"non-binding let on a type that implements `Drop`\",\n-                    |lint| build_lint(lint, local, init.span),\n-                )\n+                    NonBindingLet::DropType { sub },\n+                );\n             }\n         }\n     }\n }\n-\n-fn build_lint<'a, 'b>(\n-    lint: &'a mut DiagnosticBuilder<'b, ()>,\n-    local: &hir::Local<'_>,\n-    init_span: rustc_span::Span,\n-) -> &'a mut DiagnosticBuilder<'b, ()> {\n-    lint.span_suggestion_verbose(\n-        local.pat.span,\n-        \"consider binding to an unused variable to avoid immediately dropping the value\",\n-        \"_unused\",\n-        Applicability::MachineApplicable,\n-    )\n-    .multipart_suggestion(\n-        \"consider immediately dropping the value\",\n-        vec![\n-            (local.span.until(init_span), \"drop(\".to_string()),\n-            (init_span.shrink_to_hi(), \")\".to_string()),\n-        ],\n-        Applicability::MachineApplicable,\n-    )\n-}"}, {"sha": "0f314606a94f541062a976775a82195e19ed1a8a", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e6100479404c194a4801f577be2e9f69b4c6fef9/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6100479404c194a4801f577be2e9f69b4c6fef9/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=e6100479404c194a4801f577be2e9f69b4c6fef9", "patch": "@@ -49,6 +49,52 @@ pub struct EnumIntrinsicsMemVariant<'a> {\n     pub ty_param: Ty<'a>,\n }\n \n+// let_underscore.rs\n+#[derive(LintDiagnostic)]\n+pub enum NonBindingLet {\n+    #[diag(lint::non_binding_let_on_sync_lock)]\n+    SyncLock {\n+        #[subdiagnostic]\n+        sub: NonBindingLetSub,\n+    },\n+    #[diag(lint::non_binding_let_on_drop_type)]\n+    DropType {\n+        #[subdiagnostic]\n+        sub: NonBindingLetSub,\n+    },\n+}\n+\n+pub struct NonBindingLetSub {\n+    pub suggestion: Span,\n+    pub multi_suggestion_start: Span,\n+    pub multi_suggestion_end: Span,\n+}\n+\n+impl AddToDiagnostic for NonBindingLetSub {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut rustc_errors::Diagnostic, _: F)\n+    where\n+        F: Fn(\n+            &mut rustc_errors::Diagnostic,\n+            rustc_errors::SubdiagnosticMessage,\n+        ) -> rustc_errors::SubdiagnosticMessage,\n+    {\n+        diag.span_suggestion_verbose(\n+            self.suggestion,\n+            fluent::lint::non_binding_let_suggestion,\n+            \"_unused\",\n+            Applicability::MachineApplicable,\n+        );\n+        diag.multipart_suggestion(\n+            fluent::lint::non_binding_let_multi_suggestion,\n+            vec![\n+                (self.multi_suggestion_start, \"drop(\".to_string()),\n+                (self.multi_suggestion_end, \")\".to_string()),\n+            ],\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n // levels.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_overruled_attribute)]"}]}