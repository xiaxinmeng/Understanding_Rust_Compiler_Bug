{"sha": "fc30c5ccbeba2a102922da497809dd3f812544c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzBjNWNjYmViYTJhMTAyOTIyZGE0OTc4MDlkZDNmODEyNTQ0YzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T18:09:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T18:09:03Z"}, "message": "internal: refactor incorrect case diagnostics", "tree": {"sha": "ed3067580e998f04e94bfb93508fe3f12c851c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3067580e998f04e94bfb93508fe3f12c851c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc30c5ccbeba2a102922da497809dd3f812544c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc30c5ccbeba2a102922da497809dd3f812544c4", "html_url": "https://github.com/rust-lang/rust/commit/fc30c5ccbeba2a102922da497809dd3f812544c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc30c5ccbeba2a102922da497809dd3f812544c4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad78924621420cb323efdeb3d875ca3f47d940f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad78924621420cb323efdeb3d875ca3f47d940f", "html_url": "https://github.com/rust-lang/rust/commit/2ad78924621420cb323efdeb3d875ca3f47d940f"}], "stats": {"total": 128, "additions": 49, "deletions": 79}, "files": [{"sha": "c2d608eb53c23837a6ae7a5e69266f7a6564ede5", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=fc30c5ccbeba2a102922da497809dd3f812544c4", "patch": "@@ -34,6 +34,7 @@ macro_rules! diagnostics {\n diagnostics![\n     BreakOutsideOfLoop,\n     InactiveCode,\n+    IncorrectCase,\n     MacroError,\n     MismatchedArgCount,\n     MissingFields,\n@@ -195,31 +196,3 @@ impl Diagnostic for InternalBailedOut {\n }\n \n pub use hir_ty::diagnostics::IncorrectCase;\n-\n-impl Diagnostic for IncorrectCase {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"incorrect-ident-case\")\n-    }\n-\n-    fn message(&self) -> String {\n-        format!(\n-            \"{} `{}` should have {} name, e.g. `{}`\",\n-            self.ident_type,\n-            self.ident_text,\n-            self.expected_case.to_string(),\n-            self.suggested_text\n-        )\n-    }\n-\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.ident.clone().into())\n-    }\n-\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-\n-    fn is_experimental(&self) -> bool {\n-        true\n-    }\n-}"}, {"sha": "fc147ade395ab5c3e3015ddbfc305a15e9d062fc", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=fc30c5ccbeba2a102922da497809dd3f812544c4", "patch": "@@ -86,8 +86,8 @@ use crate::{\n pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     diagnostics::{\n-        AnyDiagnostic, BreakOutsideOfLoop, InactiveCode, InternalBailedOut, MacroError,\n-        MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr,\n+        AnyDiagnostic, BreakOutsideOfLoop, InactiveCode, IncorrectCase, InternalBailedOut,\n+        MacroError, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkOrSomeInTailExpr,\n         MissingUnsafe, NoSuchField, RemoveThisSemicolon, ReplaceFilterMapNextWithFindMap,\n         UnimplementedBuiltinMacro, UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall,\n         UnresolvedModule, UnresolvedProcMacro,\n@@ -340,7 +340,7 @@ impl ModuleDef {\n         }\n     }\n \n-    pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n+    pub fn diagnostics(self, db: &dyn HirDatabase) -> Vec<AnyDiagnostic> {\n         let id = match self {\n             ModuleDef::Adt(it) => match it {\n                 Adt::Struct(it) => it.id.into(),\n@@ -353,17 +353,19 @@ impl ModuleDef {\n             ModuleDef::Module(it) => it.id.into(),\n             ModuleDef::Const(it) => it.id.into(),\n             ModuleDef::Static(it) => it.id.into(),\n-            _ => return,\n+            _ => return Vec::new(),\n         };\n \n         let module = match self.module(db) {\n             Some(it) => it,\n-            None => return,\n+            None => return Vec::new(),\n         };\n \n+        let mut acc = Vec::new();\n         for diag in hir_ty::diagnostics::validate_module_item(db, module.id.krate(), id) {\n-            sink.push(diag)\n+            acc.push(diag.into())\n         }\n+        acc\n     }\n }\n \n@@ -624,7 +626,7 @@ impl Module {\n                         acc.extend(m.diagnostics(db, sink, internal_diagnostics))\n                     }\n                 }\n-                _ => decl.diagnostics(db, sink),\n+                _ => acc.extend(decl.diagnostics(db)),\n             }\n         }\n \n@@ -1234,7 +1236,7 @@ impl Function {\n         }\n \n         for diag in hir_ty::diagnostics::validate_module_item(db, krate, self.id.into()) {\n-            sink.push(diag)\n+            acc.push(diag.into())\n         }\n         acc\n     }"}, {"sha": "6339c9687cd8f753d93cb9dda492eff75f1005c2", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=fc30c5ccbeba2a102922da497809dd3f812544c4", "patch": "@@ -84,9 +84,6 @@ impl fmt::Display for IdentType {\n     }\n }\n \n-// Diagnostic: incorrect-ident-case\n-//\n-// This diagnostic is triggered if an item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n #[derive(Debug)]\n pub struct IncorrectCase {\n     pub file: HirFileId,"}, {"sha": "f084f7b068eba385e9c70a052e0c84b7ba0685ac", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=fc30c5ccbeba2a102922da497809dd3f812544c4", "patch": "@@ -6,6 +6,7 @@\n \n mod break_outside_of_loop;\n mod inactive_code;\n+mod incorrect_case;\n mod macro_error;\n mod mismatched_arg_count;\n mod missing_fields;\n@@ -135,7 +136,6 @@ pub struct DiagnosticsConfig {\n struct DiagnosticsContext<'a> {\n     config: &'a DiagnosticsConfig,\n     sema: Semantics<'a, RootDatabase>,\n-    #[allow(unused)]\n     resolve: &'a AssistResolveStrategy,\n }\n \n@@ -165,9 +165,6 @@ pub(crate) fn diagnostics(\n     }\n     let res = RefCell::new(res);\n     let sink_builder = DiagnosticSinkBuilder::new()\n-        .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n-            res.borrow_mut().push(warning_with_fix(d, &sema, resolve));\n-        })\n         .on::<UnlinkedFile, _>(|d| {\n             // Limit diagnostic to the first few characters in the file. This matches how VS Code\n             // renders it with the full span, but on other editors, and is less invasive.\n@@ -216,6 +213,7 @@ pub(crate) fn diagnostics(\n         #[rustfmt::skip]\n         let d = match diag {\n             AnyDiagnostic::BreakOutsideOfLoop(d) => break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n+            AnyDiagnostic::IncorrectCase(d) => incorrect_case::incorrect_case(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n             AnyDiagnostic::MismatchedArgCount(d) => mismatched_arg_count::mismatched_arg_count(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n@@ -250,16 +248,6 @@ pub(crate) fn diagnostics(\n     res\n }\n \n-fn warning_with_fix<D: DiagnosticWithFixes>(\n-    d: &D,\n-    sema: &Semantics<RootDatabase>,\n-    resolve: &AssistResolveStrategy,\n-) -> Diagnostic {\n-    Diagnostic::hint(sema.diagnostics_display_range(d.display_source()).range, d.message())\n-        .with_fixes(d.fixes(sema, resolve))\n-        .with_code(Some(d.code()))\n-}\n-\n fn check_unnecessary_braces_in_use_statement(\n     acc: &mut Vec<Diagnostic>,\n     file_id: FileId,"}, {"sha": "d763dca93fd1ebcdfc445caeb373f0799e5f6297", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=fc30c5ccbeba2a102922da497809dd3f812544c4", "patch": "@@ -1,6 +1,5 @@\n //! Provides a way to attach fixes to the diagnostics.\n //! The same module also has all curret custom fixes for the diagnostics implemented.\n-mod change_case;\n \n use hir::{diagnostics::Diagnostic, Semantics};\n use ide_assists::AssistResolveStrategy;"}, {"sha": "56283b58bdefae0fa54cf4db10dd5bf2757ad23b", "filename": "crates/ide/src/diagnostics/incorrect_case.rs", "status": "renamed", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fide%2Fsrc%2Fdiagnostics%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30c5ccbeba2a102922da497809dd3f812544c4/crates%2Fide%2Fsrc%2Fdiagnostics%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fincorrect_case.rs?ref=fc30c5ccbeba2a102922da497809dd3f812544c4", "patch": "@@ -1,35 +1,46 @@\n-use hir::{db::AstDatabase, diagnostics::IncorrectCase, InFile, Semantics};\n-use ide_assists::{Assist, AssistResolveStrategy};\n-use ide_db::{base_db::FilePosition, RootDatabase};\n+use hir::{db::AstDatabase, InFile};\n+use ide_assists::Assist;\n+use ide_db::base_db::FilePosition;\n use syntax::AstNode;\n \n use crate::{\n-    diagnostics::{unresolved_fix, DiagnosticWithFixes},\n+    diagnostics::{unresolved_fix, Diagnostic, DiagnosticsContext},\n     references::rename::rename_with_semantics,\n+    Severity,\n };\n \n-impl DiagnosticWithFixes for IncorrectCase {\n-    fn fixes(\n-        &self,\n-        sema: &Semantics<RootDatabase>,\n-        resolve: &AssistResolveStrategy,\n-    ) -> Option<Vec<Assist>> {\n-        let root = sema.db.parse_or_expand(self.file)?;\n-        let name_node = self.ident.to_node(&root);\n-\n-        let name_node = InFile::new(self.file, name_node.syntax());\n-        let frange = name_node.original_file_range(sema.db);\n-        let file_position = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n-\n-        let label = format!(\"Rename to {}\", self.suggested_text);\n-        let mut res = unresolved_fix(\"change_case\", &label, frange.range);\n-        if resolve.should_resolve(&res.id) {\n-            let source_change = rename_with_semantics(sema, file_position, &self.suggested_text);\n-            res.source_change = Some(source_change.ok().unwrap_or_default());\n-        }\n-\n-        Some(vec![res])\n+// Diagnostic: incorrect-ident-case\n+//\n+// This diagnostic is triggered if an item name doesn't follow https://doc.rust-lang.org/1.0.0/style/style/naming/README.html[Rust naming convention].\n+pub(super) fn incorrect_case(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Diagnostic {\n+    Diagnostic::new(\n+        \"incorrect-ident-case\",\n+        format!(\n+            \"{} `{}` should have {} name, e.g. `{}`\",\n+            d.ident_type, d.ident_text, d.expected_case, d.suggested_text\n+        ),\n+        ctx.sema.diagnostics_display_range(InFile::new(d.file, d.ident.clone().into())).range,\n+    )\n+    .severity(Severity::WeakWarning)\n+    .with_fixes(fixes(ctx, d))\n+}\n+\n+fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Option<Vec<Assist>> {\n+    let root = ctx.sema.db.parse_or_expand(d.file)?;\n+    let name_node = d.ident.to_node(&root);\n+\n+    let name_node = InFile::new(d.file, name_node.syntax());\n+    let frange = name_node.original_file_range(ctx.sema.db);\n+    let file_position = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n+\n+    let label = format!(\"Rename to {}\", d.suggested_text);\n+    let mut res = unresolved_fix(\"change_case\", &label, frange.range);\n+    if ctx.resolve.should_resolve(&res.id) {\n+        let source_change = rename_with_semantics(&ctx.sema, file_position, &d.suggested_text);\n+        res.source_change = Some(source_change.ok().unwrap_or_default());\n     }\n+\n+    Some(vec![res])\n }\n \n #[cfg(test)]", "previous_filename": "crates/ide/src/diagnostics/fixes/change_case.rs"}]}