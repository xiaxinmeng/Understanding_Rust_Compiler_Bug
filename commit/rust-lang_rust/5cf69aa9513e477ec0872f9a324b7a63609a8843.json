{"sha": "5cf69aa9513e477ec0872f9a324b7a63609a8843", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZjY5YWE5NTEzZTQ3N2VjMDg3MmY5YTMyNGI3YTYzNjA5YTg4NDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-11T13:39:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-11T13:39:06Z"}, "message": "Auto merge of #30753 - pnkfelix:downgrade-29383-struct-warnings-to-errors, r=nikomatsakis\n\nDowngrade unit struct match via S(..) warnings to errors\n\nThe error signalling was introduced in #29383\n\nIt was noted as a warning-cycle-less regression in #30379\n\nFix #30379", "tree": {"sha": "a174b761e0196a272037cc9c3f33d42f428005bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a174b761e0196a272037cc9c3f33d42f428005bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf69aa9513e477ec0872f9a324b7a63609a8843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf69aa9513e477ec0872f9a324b7a63609a8843", "html_url": "https://github.com/rust-lang/rust/commit/5cf69aa9513e477ec0872f9a324b7a63609a8843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf69aa9513e477ec0872f9a324b7a63609a8843/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d228cd3964b7cbac7665ff38bde46da67586b87d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d228cd3964b7cbac7665ff38bde46da67586b87d", "html_url": "https://github.com/rust-lang/rust/commit/d228cd3964b7cbac7665ff38bde46da67586b87d"}, {"sha": "fa027d1417e7eea7d7a65c6a4a60d63dac7917ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa027d1417e7eea7d7a65c6a4a60d63dac7917ca", "html_url": "https://github.com/rust-lang/rust/commit/fa027d1417e7eea7d7a65c6a4a60d63dac7917ca"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "93a46090b90eb018427a3f455b7322a0518ab7c8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5cf69aa9513e477ec0872f9a324b7a63609a8843", "patch": "@@ -133,6 +133,12 @@ declare_lint! {\n     \"type parameter default erroneously allowed in invalid location\"\n }\n \n+declare_lint! {\n+    pub MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n+    Warn,\n+    \"unit struct or enum variant erroneously allowed to match via path::ident(..)\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -159,6 +165,7 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n             INVALID_TYPE_PARAM_DEFAULT,\n+            MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n             CONST_ERR\n         )\n     }"}, {"sha": "b4f398053d1fd089172ae61417d0594785879d86", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=5cf69aa9513e477ec0872f9a324b7a63609a8843", "patch": "@@ -144,7 +144,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n     add_lint_group!(sess, FUTURE_INCOMPATIBLE,\n-                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT);\n+                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT,\n+                    MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT);\n \n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);"}, {"sha": "93ceaf8b11f12e47e9cf41388e320437bed89941", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5cf69aa9513e477ec0872f9a324b7a63609a8843", "patch": "@@ -19,6 +19,7 @@ use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n use check::{check_expr_coercable_to_type, demand, FnCtxt, Expectation};\n use check::{check_expr_with_lvalue_pref};\n use check::{instantiate_path, resolve_ty_and_def_ufcs, structurally_resolved_type};\n+use lint;\n use require_same_types;\n use util::nodemap::FnvHashMap;\n use session::Session;\n@@ -138,7 +139,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 if pat_is_resolved_const(&tcx.def_map.borrow(), pat) => {\n             if let hir::PatEnum(ref path, ref subpats) = pat.node {\n                 if !(subpats.is_some() && subpats.as_ref().unwrap().is_empty()) {\n-                    bad_struct_kind_err(tcx.sess, pat.span, path, false);\n+                    bad_struct_kind_err(tcx.sess, pat, path, false);\n                     return;\n                 }\n             }\n@@ -590,10 +591,21 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx hir::Pat,\n }\n \n // This function exists due to the warning \"diagnostic code E0164 already used\"\n-fn bad_struct_kind_err(sess: &Session, span: Span, path: &hir::Path, is_warning: bool) {\n+fn bad_struct_kind_err(sess: &Session, pat: &hir::Pat, path: &hir::Path, lint: bool) {\n     let name = pprust::path_to_string(path);\n-    span_err_or_warn!(is_warning, sess, span, E0164,\n-        \"`{}` does not name a tuple variant or a tuple struct\", name);\n+    let msg = format!(\"`{}` does not name a tuple variant or a tuple struct\", name);\n+    if lint {\n+        let expanded_msg =\n+            format!(\"{}; RFC 218 disallowed matching of unit variants or unit structs via {}(..)\",\n+                    msg,\n+                    name);\n+        sess.add_lint(lint::builtin::MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n+                      pat.id,\n+                      pat.span,\n+                      expanded_msg);\n+    } else {\n+        span_err!(sess, pat.span, E0164, \"{}\", msg);\n+    }\n }\n \n pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n@@ -657,11 +669,8 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                      opt_ty, def, pat.span, pat.id);\n \n     let report_bad_struct_kind = |is_warning| {\n-        bad_struct_kind_err(tcx.sess, pat.span, path, is_warning);\n-        if is_warning {\n-            return;\n-        }\n-\n+        bad_struct_kind_err(tcx.sess, pat, path, is_warning);\n+        if is_warning { return; }\n         fcx.write_error(pat.id);\n         if let Some(subpats) = subpats {\n             for pat in subpats {\n@@ -699,12 +708,6 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                 report_bad_struct_kind(is_special_case);\n                 if !is_special_case {\n                     return\n-                } else {\n-                    // Boo! Too painful to attach this to the actual warning,\n-                    // it should go away at some point though.\n-                    tcx.sess.span_note_without_error(pat.span,\n-                        \"this warning will become a HARD ERROR in a future release. \\\n-                        See RFC 218 for details.\");\n                 }\n             }\n             (variant.fields\n@@ -718,7 +721,10 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         ty::TyStruct(struct_def, expected_substs) => {\n             let variant = struct_def.struct_variant();\n             if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n-                report_bad_struct_kind(false);\n+                // Matching unit structs with tuple variant patterns (`UnitVariant(..)`)\n+                // is allowed for backward compatibility.\n+                let is_special_case = variant.kind() == ty::VariantKind::Unit;\n+                report_bad_struct_kind(is_special_case);\n                 return;\n             }\n             (variant.fields"}, {"sha": "7e13f539bb0438c37640980e6cea60f34d4fbb30", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=5cf69aa9513e477ec0872f9a324b7a63609a8843", "patch": "@@ -10,6 +10,8 @@\n \n // Can't use unit struct as enum pattern\n \n+#![feature(rustc_attrs)]\n+// remove prior feature after warning cycle and promoting warnings to errors\n #![feature(braced_empty_structs)]\n \n struct Empty1;\n@@ -18,7 +20,9 @@ enum E {\n     Empty2\n }\n \n-fn main() {\n+// remove attribute after warning cycle and promoting warnings to errors\n+#[rustc_error]\n+fn main() { //~ ERROR: compilation successful\n     let e1 = Empty1;\n     let e2 = E::Empty2;\n \n@@ -27,7 +31,7 @@ fn main() {\n     //     Empty1() => () // ERROR `Empty1` does not name a tuple variant or a tuple struct\n     // }\n     match e1 {\n-        Empty1(..) => () //~ ERROR `Empty1` does not name a tuple variant or a tuple struct\n+        Empty1(..) => () //~ WARN `Empty1` does not name a tuple variant or a tuple struct\n     }\n     // Rejected by parser as yet\n     // match e2 {"}, {"sha": "e63ddf6c7fd9b6ff210acf15b07cfecfcf459221", "filename": "src/test/compile-fail/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs?ref=5cf69aa9513e477ec0872f9a324b7a63609a8843", "patch": "@@ -21,7 +21,6 @@ fn main() {\n           color::cmyk(_, _, _, _) => { }\n           color::no_color(_) => { }\n           //~^ ERROR this pattern has 1 field, but the corresponding variant has no fields\n-          //~^^ WARN `color::no_color` does not name a tuple variant or a tuple struct\n         }\n     }\n }"}, {"sha": "aa7202574abfc3d15c0230790723e81f0d97b56c", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf69aa9513e477ec0872f9a324b7a63609a8843/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=5cf69aa9513e477ec0872f9a324b7a63609a8843", "patch": "@@ -26,7 +26,6 @@ fn main() {\n     match A::B(1, 2) {\n         A::B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n         A::D(_) => (),       //~ ERROR this pattern has 1 field, but\n-        //~^ WARN `A::D` does not name a tuple variant or a tuple struct\n         _ => ()\n     }\n     match 'c' {"}]}