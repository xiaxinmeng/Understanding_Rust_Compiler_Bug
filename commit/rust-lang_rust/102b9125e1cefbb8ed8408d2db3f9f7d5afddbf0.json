{"sha": "102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "node_id": "C_kwDOAAsO6NoAKDEwMmI5MTI1ZTFjZWZiYjhlZDg0MDhkMmRiM2Y5ZjdkNWFmZGRiZjA", "commit": {"author": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-10-17T07:29:00Z"}, "committer": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-12-13T03:02:41Z"}, "message": "let-else: build out ref/ref mut tests, with/without explicit annotations\n\nexpands issue 89960", "tree": {"sha": "1160276137c50b3c0810cf5fca4089003570117f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1160276137c50b3c0810cf5fca4089003570117f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "html_url": "https://github.com/rust-lang/rust/commit/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0/comments", "author": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61bcd8d3075471b3867428788c49f54fffe53f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bcd8d3075471b3867428788c49f54fffe53f52", "html_url": "https://github.com/rust-lang/rust/commit/61bcd8d3075471b3867428788c49f54fffe53f52"}], "stats": {"total": 227, "additions": 208, "deletions": 19}, "files": [{"sha": "8fd55adbfd428d9c67d244267b71b924a0ff87ae", "filename": "src/test/ui/let-else/issue-89960.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs?ref=61bcd8d3075471b3867428788c49f54fffe53f52", "patch": "@@ -1,7 +0,0 @@\n-#![feature(let_else)]\n-\n-fn main() {\n-    // FIXME: more precise diagnostics\n-    let Some(ref mut meow) = Some(()) else { return };\n-    //~^ ERROR: cannot borrow value as mutable, as `val` is not declared as mutable\n-}"}, {"sha": "697f04d6d2735c1b38409781dba25862251a72e4", "filename": "src/test/ui/let-else/issue-89960.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61bcd8d3075471b3867428788c49f54fffe53f52/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr?ref=61bcd8d3075471b3867428788c49f54fffe53f52", "patch": "@@ -1,12 +0,0 @@\n-error[E0596]: cannot borrow value as mutable, as `val` is not declared as mutable\n-  --> $DIR/issue-89960.rs:5:14\n-   |\n-LL |     let Some(ref mut meow) = Some(()) else { return };\n-   |     ---------^^^^^^^^^^^^-----------------------------\n-   |     |        |\n-   |     |        cannot borrow as mutable\n-   |     help: consider changing this to be mutable: `mut val`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "f4abd6cc2df250d1956fd9cf51e0b87f4791c000", "filename": "src/test/ui/let-else/let-else-ref-bindings-pass.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs?ref=102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "patch": "@@ -0,0 +1,71 @@\n+// check-pass\n+\n+#![feature(let_else)]\n+#![allow(unused_variables)]\n+\n+fn ref_() {\n+    let bytes: Vec<u8> = b\"Hello\"[..].to_vec();\n+    let some = Some(bytes);\n+\n+    let Some(ref a) = Some(()) else { return };\n+\n+    // | ref | type annotation | & |\n+    // | --- | --------------- | - |\n+    // | x   | x               |   | error\n+    // | x   | x               | x | error\n+    // |     | x               |   | error\n+    // |     | x               | x | error\n+    // | x   |                 |   |\n+    let Some(ref a) = some else { return }; // OK\n+    let b: &[u8] = a;\n+\n+    // | x   |                 | x |\n+    let Some(ref a) = &some else { return }; // OK\n+    let b: &[u8] = a;\n+\n+\n+    // |     |                 | x |\n+    let Some(a) = &some else { return }; // OK\n+    let b: &[u8] = a;\n+\n+    let Some(a): Option<&[u8]> = some.as_deref() else { return }; // OK\n+    let b: &[u8] = a;\n+    let Some(ref  a): Option<&[u8]> = some.as_deref() else { return }; // OK\n+    let b: &[u8] = a;\n+}\n+\n+fn ref_mut() {\n+    // This `ref mut` case had an ICE, see issue #89960\n+    let Some(ref mut a) = Some(()) else { return };\n+\n+    let bytes: Vec<u8> = b\"Hello\"[..].to_vec();\n+    let mut some = Some(bytes);\n+\n+    // | ref mut | type annotation | &mut |\n+    // | ------- | --------------- | ---- |\n+    // | x       | x               |      | error\n+    // | x       | x               | x    | error\n+    // |         | x               |      | error\n+    // |         | x               | x    | error\n+    // | x       |                 |      |\n+    let Some(ref mut a) = some else { return }; // OK\n+    let b: &mut [u8] = a;\n+\n+    // | x       |                 | x    |\n+    let Some(ref mut a) = &mut some else { return }; // OK\n+    let b: &mut [u8] = a;\n+\n+    // |         |                 | x    |\n+    let Some(a) = &mut some else { return }; // OK\n+    let b: &mut [u8] = a;\n+\n+    let Some(a): Option<&mut [u8]> = some.as_deref_mut() else { return }; // OK\n+    let b: &mut [u8] = a;\n+    let Some(ref mut a): Option<&mut [u8]> = some.as_deref_mut() else { return }; // OK\n+    let b: &mut [u8] = a;\n+}\n+\n+fn main() {\n+    ref_();\n+    ref_mut();\n+}"}, {"sha": "a4cd8e8c47d4657dde6bae86988b32a6ecfc665c", "filename": "src/test/ui/let-else/let-else-ref-bindings.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs?ref=102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "patch": "@@ -0,0 +1,62 @@\n+#![feature(let_else)]\n+#![allow(unused_variables)]\n+\n+fn ref_() {\n+    let bytes: Vec<u8> = b\"Hello\"[..].to_vec();\n+    let some = Some(bytes);\n+\n+    let Some(ref a) = Some(()) else { return };\n+\n+    // | ref | type annotation | & |\n+    // | --- | --------------- | - |\n+    // | x   |                 |   | OK\n+    // | x   |                 | x | OK\n+    // |     |                 | x | OK\n+    // | x   | x               |   |\n+    let Some(ref a): Option<&[u8]> = some else { return }; //~ ERROR mismatched types\n+    let b: & [u8] = a;\n+\n+    // | x   | x               | x |\n+    let Some(ref a): Option<&[u8]> = &some else { return }; //~ ERROR mismatched types\n+    let b: & [u8] = a;\n+\n+    // |     | x               |   |\n+    let Some(a): Option<&[u8]> = some else { return }; //~ ERROR mismatched types\n+    let b: &[u8] = a;\n+    // |     | x               | x |\n+    let Some(a): Option<&[u8]> = &some else { return }; //~ ERROR mismatched types\n+    let b: &[u8] = a;\n+}\n+\n+fn ref_mut() {\n+    // This `ref mut` case had an ICE, see issue #89960\n+    let Some(ref mut a) = Some(()) else { return };\n+\n+    let bytes: Vec<u8> = b\"Hello\"[..].to_vec();\n+    let mut some = Some(bytes);\n+\n+    // | ref mut | type annotation | &mut |\n+    // | ------- | --------------- | ---- |\n+    // | x       |                 |      | OK\n+    // | x       |                 | x    | OK\n+    // |         |                 | x    | OK\n+    // | x       | x               |      |\n+    let Some(ref mut a): Option<&mut [u8]> = some else { return }; //~ ERROR mismatched types\n+    let b: &mut [u8] = a;\n+\n+    // | x       | x               | x    | (nope)\n+    let Some(ref mut a): Option<&mut [u8]> = &mut some else { return }; //~ ERROR mismatched types\n+    let b: &mut [u8] = a;\n+\n+    // |         | x               |      |\n+    let Some(a): Option<&mut [u8]> = some else { return }; //~ ERROR mismatched types\n+    let b: &mut [u8] = a;\n+    // |         | x               | x    |\n+    let Some(a): Option<&mut [u8]> = &mut some else { return }; //~ ERROR mismatched types\n+    let b: &mut [u8] = a;\n+}\n+\n+fn main() {\n+    ref_();\n+    ref_mut();\n+}"}, {"sha": "650f4ec5e779f21759ae93abce7236737c2d879f", "filename": "src/test/ui/let-else/let-else-ref-bindings.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr?ref=102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "patch": "@@ -0,0 +1,75 @@\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:16:38\n+   |\n+LL |     let Some(ref a): Option<&[u8]> = some else { return };\n+   |                                      ^^^^ expected `&[u8]`, found struct `Vec`\n+   |\n+   = note: expected enum `Option<&[u8]>`\n+              found enum `Option<Vec<u8>>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:20:38\n+   |\n+LL |     let Some(ref a): Option<&[u8]> = &some else { return };\n+   |                                      ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |\n+   = note:   expected enum `Option<&[u8]>`\n+           found reference `&Option<Vec<u8>>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:24:34\n+   |\n+LL |     let Some(a): Option<&[u8]> = some else { return };\n+   |                                  ^^^^ expected `&[u8]`, found struct `Vec`\n+   |\n+   = note: expected enum `Option<&[u8]>`\n+              found enum `Option<Vec<u8>>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:27:34\n+   |\n+LL |     let Some(a): Option<&[u8]> = &some else { return };\n+   |                                  ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |\n+   = note:   expected enum `Option<&[u8]>`\n+           found reference `&Option<Vec<u8>>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:44:46\n+   |\n+LL |     let Some(ref mut a): Option<&mut [u8]> = some else { return };\n+   |                                              ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |\n+   = note: expected enum `Option<&mut [u8]>`\n+              found enum `Option<Vec<u8>>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:48:46\n+   |\n+LL |     let Some(ref mut a): Option<&mut [u8]> = &mut some else { return };\n+   |                                              ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |\n+   = note:           expected enum `Option<&mut [u8]>`\n+           found mutable reference `&mut Option<Vec<u8>>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:52:38\n+   |\n+LL |     let Some(a): Option<&mut [u8]> = some else { return };\n+   |                                      ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |\n+   = note: expected enum `Option<&mut [u8]>`\n+              found enum `Option<Vec<u8>>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-ref-bindings.rs:55:38\n+   |\n+LL |     let Some(a): Option<&mut [u8]> = &mut some else { return };\n+   |                                      ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |\n+   = note:           expected enum `Option<&mut [u8]>`\n+           found mutable reference `&mut Option<Vec<u8>>`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}