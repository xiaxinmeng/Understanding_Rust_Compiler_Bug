{"sha": "83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "node_id": "C_kwDOAAsO6NoAKDgzMjIyZjE4ZjRjOWVkZGM2ZWE2ZTgyZWYxMzdhOGYzM2RmM2FhN2M", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-26T12:26:37Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-26T12:26:37Z"}, "message": "Sync from rust 34e6673a0473e90ef01a18eb575392c9e3859747", "tree": {"sha": "f827f7801ddc0498755c9cbda5378f3bfca5c4fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f827f7801ddc0498755c9cbda5378f3bfca5c4fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "html_url": "https://github.com/rust-lang/rust/commit/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45a81a6a290d654d8906a099721d631fd361ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45a81a6a290d654d8906a099721d631fd361ee9", "html_url": "https://github.com/rust-lang/rust/commit/a45a81a6a290d654d8906a099721d631fd361ee9"}, {"sha": "eb84167837f241e12f21a806b162cfdea277bdb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb84167837f241e12f21a806b162cfdea277bdb2", "html_url": "https://github.com/rust-lang/rust/commit/eb84167837f241e12f21a806b162cfdea277bdb2"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "3bc64c44524ed9c3e76e21df025d6a91541944ab", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "patch": "@@ -420,9 +420,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     let extra_args = &args[fn_sig.inputs().skip_binder().len()..];\n-    let extra_args = fx\n-        .tcx\n-        .mk_type_list(extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))));\n+    let extra_args = fx.tcx.mk_type_list_from_iter(\n+        extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))),\n+    );\n     let fn_abi = if let Some(instance) = instance {\n         RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, extra_args)\n     } else {"}, {"sha": "f674ce776a68697da60a5de8e30413bc373e38df", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     fx.layout_of(if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 }),\n                 ))\n             } else {\n-                let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+                let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n                 let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n                 let lhs = lhs.load_scalar(fx);\n                 let rhs = rhs.load_scalar(fx);\n@@ -63,7 +63,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n-            let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+            let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n             let param_types = vec![\n                 AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),"}, {"sha": "e5c4b244a1afd8f6f4dc4096b10fe3221013c54a", "filename": "src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_x86.rs?ref=83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "patch": "@@ -191,7 +191,7 @@ fn llvm_add_sub<'tcx>(\n     // carry0 | carry1 -> carry or borrow respectively\n     let cb_out = fx.bcx.ins().bor(cb0, cb1);\n \n-    let layout = fx.layout_of(fx.tcx.intern_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n+    let layout = fx.layout_of(fx.tcx.mk_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n     let val = CValue::by_val_pair(cb_out, c, layout);\n     ret.write_cvalue(fx, val);\n }"}, {"sha": "205411e8c27be3ab312331bb57158e3479b07736", "filename": "src/main_shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     report.def_id,\n-                    tcx.intern_substs(&[GenericArg::from(main_ret_ty)]),\n+                    tcx.mk_substs(&[GenericArg::from(main_ret_ty)]),\n                 )\n                 .unwrap()\n                 .unwrap()\n@@ -146,7 +146,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     start_def_id,\n-                    tcx.intern_substs(&[main_ret_ty.into()]),\n+                    tcx.mk_substs(&[main_ret_ty.into()]),\n                 )\n                 .unwrap()\n                 .unwrap()"}, {"sha": "462742387a9ec77dc69fd2093685d50593f024f6", "filename": "src/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=83222f18f4c9eddc6ea6e82ef137a8f33df3aa7c", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n \n-    let out_layout = fx.layout_of(fx.tcx.intern_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n+    let out_layout = fx.layout_of(fx.tcx.mk_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n "}]}