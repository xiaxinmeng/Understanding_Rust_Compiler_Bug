{"sha": "14dc9fcc672b904245bc41732b5ca9a4f24436da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZGM5ZmNjNjcyYjkwNDI0NWJjNDE3MzJiNWNhOWE0ZjI0NDM2ZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T07:06:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T07:06:05Z"}, "message": "Auto merge of #31232 - stepancheg:enum-univariant, r=nrc\n\n```\nenum Univariant {\n    X = 17\n}\n```\n\nFixes #10292", "tree": {"sha": "a408ea4bf84a0d43d695dbdeec69c5bcd417a38f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a408ea4bf84a0d43d695dbdeec69c5bcd417a38f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14dc9fcc672b904245bc41732b5ca9a4f24436da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14dc9fcc672b904245bc41732b5ca9a4f24436da", "html_url": "https://github.com/rust-lang/rust/commit/14dc9fcc672b904245bc41732b5ca9a4f24436da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14dc9fcc672b904245bc41732b5ca9a4f24436da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654f68dd50b72d1d812b0760f1b71d7c366f6f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/654f68dd50b72d1d812b0760f1b71d7c366f6f55", "html_url": "https://github.com/rust-lang/rust/commit/654f68dd50b72d1d812b0760f1b71d7c366f6f55"}, {"sha": "641267e4c20edda3e7b96c58547542e245af5553", "url": "https://api.github.com/repos/rust-lang/rust/commits/641267e4c20edda3e7b96c58547542e245af5553", "html_url": "https://github.com/rust-lang/rust/commit/641267e4c20edda3e7b96c58547542e245af5553"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "f811eb872fcda1dbb1f0ffe506e1792f8dcf576a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14dc9fcc672b904245bc41732b5ca9a4f24436da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dc9fcc672b904245bc41732b5ca9a4f24436da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=14dc9fcc672b904245bc41732b5ca9a4f24436da", "patch": "@@ -4250,14 +4250,9 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     let def_id = ccx.tcx.map.local_def_id(id);\n     let hint = *ccx.tcx.lookup_repr_hints(def_id).get(0).unwrap_or(&attr::ReprAny);\n \n-    if hint != attr::ReprAny && vs.len() <= 1 {\n-        if vs.len() == 1 {\n-            span_err!(ccx.tcx.sess, sp, E0083,\n-                \"unsupported representation for univariant enum\");\n-        } else {\n-            span_err!(ccx.tcx.sess, sp, E0084,\n-                \"unsupported representation for zero-variant enum\");\n-        };\n+    if hint != attr::ReprAny && vs.is_empty() {\n+        span_err!(ccx.tcx.sess, sp, E0084,\n+            \"unsupported representation for zero-variant enum\");\n     }\n \n     do_check(ccx, vs, id, hint);"}, {"sha": "df09cd261344e4f3907dd8fa6695ee339a5deb93", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14dc9fcc672b904245bc41732b5ca9a4f24436da/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dc9fcc672b904245bc41732b5ca9a4f24436da/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=14dc9fcc672b904245bc41732b5ca9a4f24436da", "patch": "@@ -1062,13 +1062,6 @@ Note also that without a representation manually defined, the compiler will\n optimize by using the smallest integer type possible.\n \"##,\n \n-E0083: r##\"\n-At present, it's not possible to define a custom representation for an enum with\n-a single variant. As a workaround you can add a `Dummy` variant.\n-\n-See: https://github.com/rust-lang/rust/issues/10292\n-\"##,\n-\n E0084: r##\"\n It is impossible to define an integer type to be used to represent zero-variant\n enum values because there are no zero-variant enum values. There is no way to"}, {"sha": "ef4cc60bf0da1fc62fa7ab98a7bab098e6798c2a", "filename": "src/test/run-pass/enum-univariant-repr.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/14dc9fcc672b904245bc41732b5ca9a4f24436da/src%2Ftest%2Frun-pass%2Fenum-univariant-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dc9fcc672b904245bc41732b5ca9a4f24436da/src%2Ftest%2Frun-pass%2Fenum-univariant-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-univariant-repr.rs?ref=14dc9fcc672b904245bc41732b5ca9a4f24436da", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+use std::mem;\n+\n+// Univariant C-like enum\n+#[repr(i32)]\n+enum Univariant {\n+    X = 17\n+}\n+\n+#[repr(u16)]\n+enum UnivariantWithoutDescr {\n+    Y\n+}\n+\n+pub fn main() {\n+    {\n+        assert_eq!(4, mem::size_of::<Univariant>());\n+        assert_eq!(17, Univariant::X as i32);\n+\n+        let enums: &[Univariant] =\n+            &[Univariant::X, Univariant::X, Univariant::X];\n+        let ints: &[i32] = unsafe { mem::transmute(enums) };\n+        // check it has the same memory layout as i32\n+        assert_eq!(&[17, 17, 17], ints);\n+    }\n+\n+    {\n+        assert_eq!(2, mem::size_of::<UnivariantWithoutDescr>());\n+        let descr = UnivariantWithoutDescr::Y as u16;\n+\n+        let enums: &[UnivariantWithoutDescr] =\n+            &[UnivariantWithoutDescr::Y, UnivariantWithoutDescr::Y, UnivariantWithoutDescr::Y];\n+        let ints: &[u16] = unsafe { mem::transmute(enums) };\n+        // check it has the same memory layout as u16\n+        assert_eq!(&[descr, descr, descr], ints);\n+    }\n+}"}]}