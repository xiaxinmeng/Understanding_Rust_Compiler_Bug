{"sha": "d889deda5a7df72153a79c712ab44caa63431b5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODlkZWRhNWE3ZGY3MjE1M2E3OWM3MTJhYjQ0Y2FhNjM0MzFiNWM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-12T23:04:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-12T23:04:59Z"}, "message": "Merge pull request #101 from oli-obk/small_fixes\n\nvarious small fixes", "tree": {"sha": "071a9d302a33c11b1e0c721baa781e94705949f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071a9d302a33c11b1e0c721baa781e94705949f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d889deda5a7df72153a79c712ab44caa63431b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d889deda5a7df72153a79c712ab44caa63431b5c", "html_url": "https://github.com/rust-lang/rust/commit/d889deda5a7df72153a79c712ab44caa63431b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d889deda5a7df72153a79c712ab44caa63431b5c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3752220af78c43f8278b61bb8596081737b6a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3752220af78c43f8278b61bb8596081737b6a88", "html_url": "https://github.com/rust-lang/rust/commit/f3752220af78c43f8278b61bb8596081737b6a88"}, {"sha": "e7ef11813804a05f11325859145f24297326bd43", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ef11813804a05f11325859145f24297326bd43", "html_url": "https://github.com/rust-lang/rust/commit/e7ef11813804a05f11325859145f24297326bd43"}], "stats": {"total": 112, "additions": 106, "deletions": 6}, "files": [{"sha": "be745a805acc5a67f6ef26e6ca3069de5ecbc0f0", "filename": "src/eval_context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d889deda5a7df72153a79c712ab44caa63431b5c/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d889deda5a7df72153a79c712ab44caa63431b5c/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=d889deda5a7df72153a79c712ab44caa63431b5c", "patch": "@@ -517,10 +517,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let operand = &operands[0];\n                         let value = self.eval_operand(operand)?;\n                         let value_ty = self.operand_ty(operand);\n-\n-                        // FIXME(solson)\n-                        let dest = self.force_allocation(dest)?;\n-\n                         self.write_value(value, dest, value_ty)?;\n                     }\n \n@@ -692,7 +688,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok((offset, ty))\n     }\n \n-    fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Ty<'tcx>> {\n+    pub fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Ty<'tcx>> {\n         match ty.sty {\n             ty::TyAdt(adt_def, substs) => {\n                 Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n@@ -1015,7 +1011,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    pub(super) fn ty_to_primval_kind(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimValKind> {\n+    pub fn ty_to_primval_kind(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimValKind> {\n         use syntax::ast::FloatTy;\n \n         let kind = match ty.sty {"}, {"sha": "27d73fb66481d3e8d2ce90f988fe2e84afb52352", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d889deda5a7df72153a79c712ab44caa63431b5c/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d889deda5a7df72153a79c712ab44caa63431b5c/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=d889deda5a7df72153a79c712ab44caa63431b5c", "patch": "@@ -66,6 +66,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"atomic_store\" |\n+            \"atomic_store_relaxed\" |\n+            \"atomic_store_rel\" |\n             \"volatile_store\" => {\n                 let ty = substs.type_at(0);\n                 let dest = arg_vals[0].read_ptr(&self.memory)?;\n@@ -90,6 +92,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(Lvalue::from_ptr(ptr), change, ty)?;\n             }\n \n+            \"atomic_cxchg_relaxed\" |\n             \"atomic_cxchg\" => {\n                 let ty = substs.type_at(0);\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n@@ -108,6 +111,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(Lvalue::from_ptr(ptr), change, ty)?;\n             }\n \n+            \"atomic_xadd\" |\n             \"atomic_xadd_relaxed\" => {\n                 let ty = substs.type_at(0);\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;"}, {"sha": "cbf9bbda2cf83c7e4c28cfc85ff7f3ff7e70c78f", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d889deda5a7df72153a79c712ab44caa63431b5c/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d889deda5a7df72153a79c712ab44caa63431b5c/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=d889deda5a7df72153a79c712ab44caa63431b5c", "patch": "@@ -405,6 +405,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::Bytes(result as u128), dest_ty)?;\n             }\n \n+            \"memrchr\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?;\n+                let val = self.value_to_primval(args[1], usize)?.to_u64()? as u8;\n+                let num = self.value_to_primval(args[2], usize)?.to_u64()?;\n+                if let Some(idx) = self.memory.read_bytes(ptr, num)?.iter().rev().position(|&c| c == val) {\n+                    let new_ptr = ptr.offset(num - idx as u64 - 1);\n+                    self.write_value(Value::ByVal(PrimVal::Ptr(new_ptr)), dest, dest_ty)?;\n+                } else {\n+                    self.write_value(Value::ByVal(PrimVal::Bytes(0)), dest, dest_ty)?;\n+                }\n+            }\n+\n             \"memchr\" => {\n                 let ptr = args[0].read_ptr(&self.memory)?;\n                 let val = self.value_to_primval(args[1], usize)?.to_u64()? as u8;"}, {"sha": "9e05a89a4ea37a928fe0244b0d7f28801cbd342a", "filename": "tests/run-pass/union.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d889deda5a7df72153a79c712ab44caa63431b5c/tests%2Frun-pass%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d889deda5a7df72153a79c712ab44caa63431b5c/tests%2Frun-pass%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funion.rs?ref=d889deda5a7df72153a79c712ab44caa63431b5c", "patch": "@@ -0,0 +1,88 @@\n+#![feature(untagged_unions)]\n+#![allow(dead_code, unused_variables)]\n+\n+fn main() {\n+    a();\n+    b();\n+    c();\n+    d();\n+}\n+\n+fn a() {\n+    union U {\n+        f1: u32,\n+        f2: f32,\n+    }\n+    let mut u = U { f1: 1 };\n+    unsafe {\n+        let b1 = &mut u.f1;\n+        *b1 = 5;\n+    }\n+    assert_eq!(unsafe { u.f1 }, 5);\n+}\n+\n+fn b() {\n+    struct S {\n+        x: u32,\n+        y: u32,\n+    }\n+\n+    union U {\n+        s: S,\n+        both: u64,\n+    }\n+    let mut u = U { s: S { x: 1, y: 2 } };\n+    unsafe {\n+        let bx = &mut u.s.x;\n+        let by = &mut u.s.y;\n+        *bx = 5;\n+        *by = 10;\n+    }\n+    assert_eq!(unsafe { u.s.x }, 5);\n+    assert_eq!(unsafe { u.s.y }, 10);\n+}\n+\n+fn c() {\n+    #[repr(u32)]\n+    enum Tag { I, F }\n+\n+    #[repr(C)]\n+    union U {\n+        i: i32,\n+        f: f32,\n+    }\n+\n+    #[repr(C)]\n+    struct Value {\n+        tag: Tag,\n+        u: U,\n+    }\n+\n+    fn is_zero(v: Value) -> bool {\n+        unsafe {\n+            match v {\n+                Value { tag: Tag::I, u: U { i: 0 } } => true,\n+                Value { tag: Tag::F, u: U { f: 0.0 } } => true,\n+                _ => false,\n+            }\n+        }\n+    }\n+    assert!(is_zero(Value { tag: Tag::I, u: U { i: 0 }}));\n+    assert!(is_zero(Value { tag: Tag::F, u: U { f: 0.0 }}));\n+    assert!(!is_zero(Value { tag: Tag::I, u: U { i: 1 }}));\n+    assert!(!is_zero(Value { tag: Tag::F, u: U { f: 42.0 }}));\n+}\n+\n+fn d() {\n+    union MyUnion {\n+        f1: u32,\n+        f2: f32,\n+    }\n+    let u = MyUnion { f1: 10 };\n+    unsafe {\n+        match u {\n+            MyUnion { f1: 10 } => { }\n+            MyUnion { f2 } => { panic!(\"foo\"); }\n+        }\n+    }\n+}"}]}