{"sha": "465538245a3a8768b9bf33d4fdd448cf32f29921", "node_id": "C_kwDOAAsO6NoAKDQ2NTUzODI0NWEzYTg3NjhiOWJmMzNkNGZkZDQ0OGNmMzJmMjk5MjE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T23:41:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T23:42:32Z"}, "message": "reuse arg flag parse logic in rustdoc handling", "tree": {"sha": "f35b0bef5ac0edd2368c19d422fed3e9fac64b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35b0bef5ac0edd2368c19d422fed3e9fac64b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/465538245a3a8768b9bf33d4fdd448cf32f29921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/465538245a3a8768b9bf33d4fdd448cf32f29921", "html_url": "https://github.com/rust-lang/rust/commit/465538245a3a8768b9bf33d4fdd448cf32f29921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/465538245a3a8768b9bf33d4fdd448cf32f29921/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e12df0f4043f89bc59eb40e351fdb58f0b545abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12df0f4043f89bc59eb40e351fdb58f0b545abb", "html_url": "https://github.com/rust-lang/rust/commit/e12df0f4043f89bc59eb40e351fdb58f0b545abb"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "38bc62436956308cae5e861cce4f76eb468d0f2e", "filename": "cargo-miri/src/phases.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/465538245a3a8768b9bf33d4fdd448cf32f29921/cargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465538245a3a8768b9bf33d4fdd448cf32f29921/cargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Fphases.rs?ref=465538245a3a8768b9bf33d4fdd448cf32f29921", "patch": "@@ -310,17 +310,17 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n             let mut cmd = miri();\n \n             // Ensure --emit argument for a check-only build is present.\n-            // We cannot use the usual helpers since we need to check specifically in `env.args`.\n-            if let Some(i) = env.args.iter().position(|arg| arg.starts_with(\"--emit=\")) {\n+            if let Some(val) = ArgFlagValueIter::new(env.args.clone().into_iter(), \"--emit\").next()\n+            {\n                 // For `no_run` tests, rustdoc passes a `--emit` flag; make sure it has the right shape.\n-                assert_eq!(env.args[i], \"--emit=metadata\");\n+                assert_eq!(val, \"metadata\");\n             } else {\n                 // For all other kinds of tests, we can just add our flag.\n                 cmd.arg(\"--emit=metadata\");\n             }\n \n             // Alter the `-o` parameter so that it does not overwrite the JSON file we stored above.\n-            let mut args = env.args.clone();\n+            let mut args = env.args;\n             for i in 0..args.len() {\n                 if args[i] == \"-o\" {\n                     args[i + 1].push_str(\".miri\");\n@@ -344,7 +344,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n         return;\n     }\n \n-    if runnable_crate && ArgFlagValueIter::new(\"--extern\").any(|krate| krate == \"proc_macro\") {\n+    if runnable_crate && get_arg_flag_values(\"--extern\").any(|krate| krate == \"proc_macro\") {\n         // This is a \"runnable\" `proc-macro` crate (unit tests). We do not support\n         // interpreting that under Miri now, so we write a JSON file to (display a\n         // helpful message and) skip it in the runner phase.\n@@ -568,7 +568,7 @@ pub fn phase_rustdoc(mut args: impl Iterator<Item = String>) {\n \n     // Doctests of `proc-macro` crates (and their dependencies) are always built for the host,\n     // so we are not able to run them in Miri.\n-    if ArgFlagValueIter::new(\"--crate-type\").any(|crate_type| crate_type == \"proc-macro\") {\n+    if get_arg_flag_values(\"--crate-type\").any(|crate_type| crate_type == \"proc-macro\") {\n         eprintln!(\"Running doctests of `proc-macro` crates is not currently supported by Miri.\");\n         return;\n     }"}, {"sha": "27e312a4662a0c22781d90c90b4c8eef834a55a6", "filename": "cargo-miri/src/util.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/465538245a3a8768b9bf33d4fdd448cf32f29921/cargo-miri%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465538245a3a8768b9bf33d4fdd448cf32f29921/cargo-miri%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fsrc%2Futil.rs?ref=465538245a3a8768b9bf33d4fdd448cf32f29921", "patch": "@@ -81,7 +81,7 @@ pub fn has_arg_flag(name: &str) -> bool {\n \n /// Determines how many times a `--flag` is present.\n pub fn num_arg_flag(name: &str) -> usize {\n-    std::env::args().take_while(|val| val != \"--\").filter(|val| val == name).count()\n+    env::args().take_while(|val| val != \"--\").filter(|val| val == name).count()\n }\n \n /// Yields all values of command line flag `name` as `Ok(arg)`, and all other arguments except\n@@ -121,15 +121,15 @@ impl<I: Iterator<Item = String>> Iterator for ArgSplitFlagValue<'_, I> {\n }\n \n /// Yields all values of command line flag `name`.\n-pub struct ArgFlagValueIter<'a>(ArgSplitFlagValue<'a, env::Args>);\n+pub struct ArgFlagValueIter<'a, I>(ArgSplitFlagValue<'a, I>);\n \n-impl<'a> ArgFlagValueIter<'a> {\n-    pub fn new(name: &'a str) -> Self {\n-        Self(ArgSplitFlagValue::new(env::args(), name))\n+impl<'a, I: Iterator<Item = String>> ArgFlagValueIter<'a, I> {\n+    pub fn new(args: I, name: &'a str) -> Self {\n+        Self(ArgSplitFlagValue::new(args, name))\n     }\n }\n \n-impl Iterator for ArgFlagValueIter<'_> {\n+impl<I: Iterator<Item = String>> Iterator for ArgFlagValueIter<'_, I> {\n     type Item = String;\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -141,9 +141,14 @@ impl Iterator for ArgFlagValueIter<'_> {\n     }\n }\n \n+/// Gets the values of a `--flag`.\n+pub fn get_arg_flag_values<'a>(name: &'a str) -> impl Iterator<Item = String> + 'a {\n+    ArgFlagValueIter::new(env::args(), name)\n+}\n+\n /// Gets the value of a `--flag`.\n pub fn get_arg_flag_value(name: &str) -> Option<String> {\n-    ArgFlagValueIter::new(name).next()\n+    get_arg_flag_values(name).next()\n }\n \n /// Escapes `s` in a way that is suitable for using it as a string literal in TOML syntax.\n@@ -296,7 +301,7 @@ fn cargo_extra_flags() -> Vec<String> {\n \n     // Forward `--config` flags.\n     let config_flag = \"--config\";\n-    for arg in ArgFlagValueIter::new(config_flag) {\n+    for arg in get_arg_flag_values(config_flag) {\n         flags.push(config_flag.to_string());\n         flags.push(arg);\n     }"}]}