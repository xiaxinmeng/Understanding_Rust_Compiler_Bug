{"sha": "08a1dd287d371b8df7fbef610e66bc925b3eea0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTFkZDI4N2QzNzFiOGRmN2ZiZWY2MTBlNjZiYzkyNWIzZWVhMGI=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-01-31T20:16:08Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-21T19:43:48Z"}, "message": "implement TrustedRandomAccess for array::IntoIter", "tree": {"sha": "382300bb036895c3e2817d114eb061a323d21a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382300bb036895c3e2817d114eb061a323d21a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a1dd287d371b8df7fbef610e66bc925b3eea0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a1dd287d371b8df7fbef610e66bc925b3eea0b", "html_url": "https://github.com/rust-lang/rust/commit/08a1dd287d371b8df7fbef610e66bc925b3eea0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a1dd287d371b8df7fbef610e66bc925b3eea0b/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "895d7a9a096aab4690a032cee28f57f4b8a0e9ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/895d7a9a096aab4690a032cee28f57f4b8a0e9ac", "html_url": "https://github.com/rust-lang/rust/commit/895d7a9a096aab4690a032cee28f57f4b8a0e9ac"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "f82454addd09af3466c6c95720af4b3f05937e3b", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/08a1dd287d371b8df7fbef610e66bc925b3eea0b/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a1dd287d371b8df7fbef610e66bc925b3eea0b/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=08a1dd287d371b8df7fbef610e66bc925b3eea0b", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     fmt,\n-    iter::{ExactSizeIterator, FusedIterator, TrustedLen},\n+    iter::{ExactSizeIterator, FusedIterator, TrustedLen, TrustedRandomAccess},\n     mem::{self, MaybeUninit},\n     ops::Range,\n     ptr,\n@@ -130,6 +130,18 @@ impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     fn last(mut self) -> Option<Self::Item> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // SAFETY: Callers are only allowed to pass an index that is in bounds\n+        // Additionally Self: TrustedRandomAccess is only implemented for T: Copy which means even\n+        // multiple repeated reads of the same index would be safe and the\n+        // values aree !Drop, thus won't suffer from double drops.\n+        unsafe { self.data.get_unchecked(self.alive.start + idx).assume_init_read() }\n+    }\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n@@ -184,6 +196,17 @@ impl<T, const N: usize> FusedIterator for IntoIter<T, N> {}\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> {}\n \n+#[doc(hidden)]\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+// T: Copy as approximation for !Drop since get_unchecked does not update the pointers\n+// and thus we can't implement drop-handling\n+unsafe impl<T, const N: usize> TrustedRandomAccess for IntoIter<T, N>\n+where\n+    T: Copy,\n+{\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n+}\n+\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n impl<T: Clone, const N: usize> Clone for IntoIter<T, N> {\n     fn clone(&self) -> Self {"}]}