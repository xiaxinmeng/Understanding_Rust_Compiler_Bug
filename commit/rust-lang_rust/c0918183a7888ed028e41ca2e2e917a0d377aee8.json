{"sha": "c0918183a7888ed028e41ca2e2e917a0d377aee8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOTE4MTgzYTc4ODhlZDAyOGU0MWNhMmUyZTkxN2EwZDM3N2FlZTg=", "commit": {"author": {"name": "Kevin W Matthews", "email": "KevinWMatthews@gmail.com", "date": "2019-07-24T15:21:08Z"}, "committer": {"name": "Kevin W Matthews", "email": "KevinWMatthews@gmail.com", "date": "2019-07-24T16:36:49Z"}, "message": "Use match ergonomics in Condvar documentation", "tree": {"sha": "3b7c88964db43677f47df66a35be5c431104f234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b7c88964db43677f47df66a35be5c431104f234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0918183a7888ed028e41ca2e2e917a0d377aee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0918183a7888ed028e41ca2e2e917a0d377aee8", "html_url": "https://github.com/rust-lang/rust/commit/c0918183a7888ed028e41ca2e2e917a0d377aee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0918183a7888ed028e41ca2e2e917a0d377aee8/comments", "author": {"login": "KevinWMatthews", "id": 4388704, "node_id": "MDQ6VXNlcjQzODg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4388704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KevinWMatthews", "html_url": "https://github.com/KevinWMatthews", "followers_url": "https://api.github.com/users/KevinWMatthews/followers", "following_url": "https://api.github.com/users/KevinWMatthews/following{/other_user}", "gists_url": "https://api.github.com/users/KevinWMatthews/gists{/gist_id}", "starred_url": "https://api.github.com/users/KevinWMatthews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KevinWMatthews/subscriptions", "organizations_url": "https://api.github.com/users/KevinWMatthews/orgs", "repos_url": "https://api.github.com/users/KevinWMatthews/repos", "events_url": "https://api.github.com/users/KevinWMatthews/events{/privacy}", "received_events_url": "https://api.github.com/users/KevinWMatthews/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KevinWMatthews", "id": 4388704, "node_id": "MDQ6VXNlcjQzODg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4388704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KevinWMatthews", "html_url": "https://github.com/KevinWMatthews", "followers_url": "https://api.github.com/users/KevinWMatthews/followers", "following_url": "https://api.github.com/users/KevinWMatthews/following{/other_user}", "gists_url": "https://api.github.com/users/KevinWMatthews/gists{/gist_id}", "starred_url": "https://api.github.com/users/KevinWMatthews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KevinWMatthews/subscriptions", "organizations_url": "https://api.github.com/users/KevinWMatthews/orgs", "repos_url": "https://api.github.com/users/KevinWMatthews/repos", "events_url": "https://api.github.com/users/KevinWMatthews/events{/privacy}", "received_events_url": "https://api.github.com/users/KevinWMatthews/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a6a304e2baaabca88059753f020377f2476978", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a6a304e2baaabca88059753f020377f2476978", "html_url": "https://github.com/rust-lang/rust/commit/27a6a304e2baaabca88059753f020377f2476978"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "aeff57716e86b26769b37e22162964df8c861ab8", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c0918183a7888ed028e41ca2e2e917a0d377aee8/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0918183a7888ed028e41ca2e2e917a0d377aee8/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=c0918183a7888ed028e41ca2e2e917a0d377aee8", "patch": "@@ -36,7 +36,7 @@ impl WaitTimeoutResult {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///\n     ///     // Let's wait 20 milliseconds before notifying the condvar.\n     ///     thread::sleep(Duration::from_millis(20));\n@@ -48,7 +48,7 @@ impl WaitTimeoutResult {\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// loop {\n     ///     // Let's put a timeout on the condvar's wait.\n@@ -94,15 +94,15 @@ impl WaitTimeoutResult {\n ///\n /// // Inside of our lock, spawn a new thread, and then wait for it to start.\n /// thread::spawn(move|| {\n-///     let &(ref lock, ref cvar) = &*pair2;\n+///     let (lock, cvar) = &*pair2;\n ///     let mut started = lock.lock().unwrap();\n ///     *started = true;\n ///     // We notify the condvar that the value has changed.\n ///     cvar.notify_one();\n /// });\n ///\n /// // Wait for the thread to start up.\n-/// let &(ref lock, ref cvar) = &*pair;\n+/// let (lock, cvar) = &*pair;\n /// let mut started = lock.lock().unwrap();\n /// while !*started {\n ///     started = cvar.wait(started).unwrap();\n@@ -180,15 +180,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {\n@@ -245,15 +245,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// let _guard = cvar.wait_until(lock.lock().unwrap(), |started| { *started }).unwrap();\n     /// ```\n@@ -301,15 +301,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// loop {\n@@ -374,15 +374,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // wait for the thread to start up\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // as long as the value inside the `Mutex<bool>` is `false`, we wait\n     /// loop {\n@@ -449,15 +449,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // wait for the thread to start up\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let result = cvar.wait_timeout_until(\n     ///     lock.lock().unwrap(),\n     ///     Duration::from_millis(100),\n@@ -508,15 +508,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_one();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {\n@@ -548,15 +548,15 @@ impl Condvar {\n     /// let pair2 = pair.clone();\n     ///\n     /// thread::spawn(move|| {\n-    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let (lock, cvar) = &*pair2;\n     ///     let mut started = lock.lock().unwrap();\n     ///     *started = true;\n     ///     // We notify the condvar that the value has changed.\n     ///     cvar.notify_all();\n     /// });\n     ///\n     /// // Wait for the thread to start up.\n-    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let (lock, cvar) = &*pair;\n     /// let mut started = lock.lock().unwrap();\n     /// // As long as the value inside the `Mutex<bool>` is `false`, we wait.\n     /// while !*started {"}]}