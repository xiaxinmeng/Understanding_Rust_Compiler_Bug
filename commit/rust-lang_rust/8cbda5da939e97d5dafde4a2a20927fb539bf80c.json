{"sha": "8cbda5da939e97d5dafde4a2a20927fb539bf80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYmRhNWRhOTM5ZTk3ZDVkYWZkZTRhMmEyMDkyN2ZiNTM5YmY4MGM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-25T16:22:23Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-05-18T20:56:26Z"}, "message": "Refactoring: Introduce distinct host and target rpath var setters.\n\nTwo line summary: Distinguish HOST_RPATH and TARGET_RPATH; added\nRPATH_LINK_SEARCH; skip tests broken in stage1; general cleanup.\n\n`HOST_RPATH_VAR$(1)_T_$(2)_H_$(3)` and `TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3)`\nboth match the format of the old `RPATH_VAR$(1)_T_$(2)_H_$(3)` (which\nis still being set the same way that it was before, to one of either\nHOST/TARGET depending on what stage we are building).  Namely, the format\nis <XXX>_RPATH_VAR = \"<LD_LIB_PATH_ENVVAR>=<COLON_SEP_PATH_ENTRIES>\"\n\nWhat this commit does:\n\n* Pass both of the (newly introduced) HOST and TARGET rpath setup vars\n  to `maketest.py`\n\n* Update `maketest.py` to no longer update the LD_LIBRARY_PATH itself\n  Instead, it passes along the HOST and TARGET rpath setup vars in\n  environment variables `HOST_RPATH_ENV` and `TARGET_RPATH_ENV`\n\n* Also, pass the current stage number to maketest.py; it in turn\n  passes it (via an env var) to run-make tests.\n\n  This allows the run-make tests to selectively change behavior\n  (e.g. turn themselves off) to deal with incompatibilities with\n  e.g. stage1.\n\n* Cleanup: Distinguish in tools.mk between the command to run (`RUN`)\n  and the file to generate to drive that command (`RUN_BINFILE`).  The\n  main thing this enables is that `RUN` can now setup the\n  `TARGET_RPATH_ENV` without having to dirty up the runner code in\n  each of the `run-make` Makefiles.\n\n* Cleanup: Factored out commands to delete dylib/rlib into\n  REMOVE_DYLIBS/REMOVE_RLIBS.\n\n  There were places where we were only calling `rm $(call DYLIB,foo)`\n  even though we really needed to get rid of the whole glob (at least\n  based on alex's findings on #13753 that removing the symlink does not\n  suffice).\n\n  Therefore rather than peppering the code with the awkward\n  `rm $(TMPDIR)/$(call DYLIB_GLOB,foo)`, I instead introduced a common\n  `REMOVE_DYLIBS` user function that expands into that when called.\n  After I adding an analogous `REMOVE_RLIBS`, I changed all of the\n  existing calls that rm dylibs or rlibs to use these routines\n  instead.\n\n  Note that the latter is not a true refactoring since I may have\n  changed cases where it was our intent to only remove the sym-link.\n  (But if that is the case, then we need to more deeply investigate\n  alex's findings on #13753 where the system was still dynamically\n  loading up the non-symlinked libraries that it finds on the load\n  path.)\n\n* Added RPATH_LINK_SEARCH command and use it on Linux.\n\n  On some platforms, namely Linux, when you have libboot.so that has\n  its internal rpath set (to e.g. $(ORIGIN)/path/to/HOSTDIR), the\n  linker still complains when you do the link step and it does not\n  know where to find libraries that libboot.so depends upon that live\n  in HOSTDIR (think e.g. librustuv.so).\n\n  As far as I can tell, the GNU linker will consult the\n  LD_LIBRARY_PATH as part of the linking process to find such\n  libraries.  But if you want to be more careful and not override\n  LD_LIBRARY_PATH for the `gcc` invocation, then you need some other\n  way to tell the linker where it can find the libraries that\n  libboot.so needs.  The solution to this on Linux is the\n  `-Wl,-rpath-link` command line option.\n\n  However, this command line option does not exist on Mac OS X, (which\n  appears to be figuring out how to resolve the libboot.dylib\n  dependency by some other means, perhaps by consulting the rpath\n  setting within libboot.dylib).\n\n  So, in order to abstract over this distinction, I added the\n  RPATH_LINK_SEARCH macro to the run-make infrastructure and added\n  calls to it where necessary to get Linux working.  On architectures\n  other than Linux, the macro expands to nothing.\n\n* Disable miscellaneous tests atop stage1.\n\n* An especially interesting instance of the previous bullet point:\n  Excuse regex from doing rustdoc tests atop stage1.\n\n  This was a (nearly-) final step to get `make check-stage1` working\n  again.\n\n  The use of a special-case check for regex here is ugly but is\n  analogous other similar checks for regex such as the one that landed\n  in PR #13844.\n\n  The way this is written, the user will get a reminder that\n  doc-crate-regex is being skipped whenever their rules attempt to do\n  the crate documentation tests.  This is deliberate: I want people\n  running `make check-stage1` to be reminded about which cases are\n  being skipped.  (But if such echo noise is considered offensive, it\n  can obviously be removed.)\n\n* Got windows working with the above changes.\n\n  This portion of the commit is a cleanup revision of the (previously\n  mentioned on try builds) re-architecting of how the LD_LIBRARY_PATH\n  setup and extension is handled in order to accommodate Windows' (1.)\n  use of `$PATH` for that purpose and (2.) use of spaces in `$PATH`\n  entries (problematic for make and for interoperation with tools at\n  the shell).\n\n* In addition, since the code has been rearchitected to pass the\n  HOST_RPATH_DIR/TARGET_RPATH_DIR rather than a whole sh\n  environment-variable setting command, there is no need to for the\n  convert_path_spec calls in maketest.py, which in fact were put in\n  place to placate Windows but were now causing the Windows builds to\n  fail.  Instead we just convert the paths to absolute paths just like\n  all of the other path arguments.\n\nAlso, note for makefile hackers: apparently you cannot quote operands\nto `ifeq` in Makefile (or at least, you need to be careful about\nadding them, e.g. to only one side).", "tree": {"sha": "6109df79327e45934854af201d7fc29c73fb120c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6109df79327e45934854af201d7fc29c73fb120c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cbda5da939e97d5dafde4a2a20927fb539bf80c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbda5da939e97d5dafde4a2a20927fb539bf80c", "html_url": "https://github.com/rust-lang/rust/commit/8cbda5da939e97d5dafde4a2a20927fb539bf80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cbda5da939e97d5dafde4a2a20927fb539bf80c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8646be1a8e2025e0bfd18dfcebf968cfcb4645e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8646be1a8e2025e0bfd18dfcebf968cfcb4645e", "html_url": "https://github.com/rust-lang/rust/commit/a8646be1a8e2025e0bfd18dfcebf968cfcb4645e"}], "stats": {"total": 213, "additions": 158, "deletions": 55}, "files": [{"sha": "d652fac12f895f48f2ded97c10727c392dd99404", "filename": "mk/main.mk", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -349,18 +349,45 @@ CFGFLAG$(1)_T_$(2)_H_$(3) = stage$(1)\n endef\n \n # Same macro/variables as above, but defined in a separate loop so it can use\n-# all the varibles above for all archs. The RPATH_VAR setup sometimes needs to\n+# all the variables above for all archs. The RPATH_VAR setup sometimes needs to\n # reach across triples to get things in order.\n+#\n+# Defines (with the standard $(1)_T_$(2)_H_$(3) suffix):\n+# * `LD_LIBRARY_PATH_ENV_NAME`: the name for the key to use in the OS\n+#   environment to access or extend the lookup path for dynamic\n+#   libraries.  Note on Windows, that key is `$PATH`, and thus not\n+#   only conflates programs with dynamic libraries, but also often\n+#   contains spaces which confuse make.\n+# * `LD_LIBRARY_PATH_ENV_HOSTDIR`: the entry to add to lookup path for the host\n+# * `LD_LIBRARY_PATH_ENV_TARGETDIR`: the entry to add to lookup path for target\n+# \n+# Below that, HOST_RPATH_VAR and TARGET_RPATH_VAR are defined in terms of the\n+# above settings.\n+# \n define SREQ_CMDS\n \n ifeq ($$(OSTYPE_$(3)),apple-darwin)\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      DYLD_LIBRARY_PATH=\"$$$$DYLD_LIBRARY_PATH:$$(CURDIR)/$$(HLIB$(1)_H_$(3))\"\n+  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := DYLD_LIBRARY_PATH\n+else\n+ifeq ($$(CFG_WINDOWSY_$(2)),1)\n+  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := PATH\n else\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      LD_LIBRARY_PATH=\"$$$$LD_LIBRARY_PATH:$$(CURDIR)/$$(HLIB$(1)_H_$(3))\"\n+  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := LD_LIBRARY_PATH\n+endif\n endif\n \n+LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3) := \\\n+    $$(CURDIR)/$$(HLIB$(1)_H_$(3))\n+LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3) := \\\n+    $$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\n+\n+HOST_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n+  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)):$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3))\n+TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n+  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)):$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\n+\n+RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(HOST_RPATH_VAR$(1)_T_$(2)_H_$(3))\n+\n # Pass --cfg stage0 only for the build->host part of stage0;\n # if you're building a cross config, the host->* parts are\n # effectively stage1, since it uses the just-built stage0.\n@@ -376,13 +403,7 @@ ifeq ($(1),0)\n ifneq ($(strip $(CFG_BUILD)),$(strip $(3)))\n CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n \n-ifeq ($$(OSTYPE_$(3)),apple-darwin)\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      DYLD_LIBRARY_PATH=\"$$$$DYLD_LIBRARY_PATH:$$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\"\n-else\n-  RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-      LD_LIBRARY_PATH=\"$$$$LD_LIBRARY_PATH:$$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\"\n-endif\n+RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3))\n endif\n endif\n "}, {"sha": "25f03751074fb9f3a6f9973a159abb3e6c25bdf5", "filename": "mk/tests.mk", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -793,8 +793,27 @@ else\n CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n endif\n \n+# (Issues #13732, #13983, #14000) The doc for the regex crate includes\n+# uses of the `regex!` macro from the regex_macros crate.  There is\n+# normally a dependence injected that makes the target's regex depend\n+# upon the host's regex_macros (see #13845), but that dependency\n+# injection is currently skipped for stage1 as a special case.\n+#\n+# Therefore, as a further special case, this conditional skips\n+# attempting to run the doc tests for the regex crate atop stage1,\n+# (since there is no regex_macros crate for the stage1 rustc to load).\n+#\n+# (Another approach for solving this would be to inject the desired\n+# dependence for stage1 as well, by setting things up to generate a\n+# regex_macros crate that was compatible with the stage1 rustc and\n+# thus re-enable our ability to run this test.)\n+ifeq (stage$(1)-crate-$(4),stage1-crate-regex)\n+check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$(4)-exec:\n+\t@$$(call E, skipping doc-crate-$(4) as it uses macros and cannot run at stage$(1))\n+else\n check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$(4)-exec: \\\n \t$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4))\n+endif\n \n ifeq ($(2),$$(CFG_BUILD))\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)): $$(CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n@@ -951,7 +970,10 @@ $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\" \\\n \t    $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t    \"$$(TESTNAME)\" \\\n-\t    \"$$(RPATH_VAR$(1)_T_$(2)_H_$(3))\"\n+\t    $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3)) \\\n+\t    \"$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3))\" \\\n+\t    \"$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3))\" \\\n+\t    $(1)\n \t@touch $$@\n else\n # FIXME #11094 - The above rule doesn't work right for multiple targets"}, {"sha": "0e2c1e77ab4c5624312d8746613a765478a5aa85", "filename": "src/etc/maketest.py", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -30,20 +30,21 @@ def putenv(name, value):\n         value = normalize_path(value)\n     os.putenv(name, value)\n \n+def convert_path_spec(name, value):\n+    if os.name == 'nt' and name != 'PATH':\n+        value = \":\".join(normalize_path(v) for v in value.split(\";\"))\n+    return value\n \n make = sys.argv[2]\n putenv('RUSTC', os.path.abspath(sys.argv[3]))\n putenv('TMPDIR', os.path.abspath(sys.argv[4]))\n putenv('CC', sys.argv[5])\n putenv('RUSTDOC', os.path.abspath(sys.argv[6]))\n filt = sys.argv[7]\n-ldpath = sys.argv[8]\n-if ldpath != '':\n-    name = ldpath.split('=')[0]\n-    value = ldpath.split('=')[1]\n-    if os.name == 'nt' and name != 'PATH':\n-        value = \":\".join(normalize_path(v) for v in value.split(\";\"))\n-    os.putenv(name, value)\n+putenv('LD_LIB_PATH_ENVVAR', sys.argv[8]);\n+putenv('HOST_RPATH_DIR', os.path.abspath(sys.argv[9]));\n+putenv('TARGET_RPATH_DIR', os.path.abspath(sys.argv[10]));\n+putenv('RUST_BUILD_STAGE', sys.argv[11])\n \n if not filt in sys.argv[1]:\n     sys.exit(0)"}, {"sha": "3b28af9b0e83f09c4db60be429cc14b171290f2d", "filename": "src/test/run-make/bootstrap-from-c-with-green/Makefile", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -1,9 +1,13 @@\n -include ../tools.mk\n \n+HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n all:\n \t$(RUSTC) lib.rs\n \tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n-\t$(CC) main.c -o $(call RUN,main) -lboot\n+\t$(CC) main.c -o $(call RUN_BINFILE,main) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -lboot\n \t$(call RUN,main)\n-\trm $(call DYLIB,boot)\n+\t$(call REMOVE_DYLIBS,boot)\n \t$(call FAIL,main)"}, {"sha": "3b28af9b0e83f09c4db60be429cc14b171290f2d", "filename": "src/test/run-make/bootstrap-from-c-with-native/Makefile", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -1,9 +1,13 @@\n -include ../tools.mk\n \n+HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n all:\n \t$(RUSTC) lib.rs\n \tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n-\t$(CC) main.c -o $(call RUN,main) -lboot\n+\t$(CC) main.c -o $(call RUN_BINFILE,main) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -lboot\n \t$(call RUN,main)\n-\trm $(call DYLIB,boot)\n+\t$(call REMOVE_DYLIBS,boot)\n \t$(call FAIL,main)"}, {"sha": "c4720c418a77a2adaa937eb43f54dd40488b0a08", "filename": "src/test/run-make/c-dynamic-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -9,6 +9,6 @@ all: $(call DYLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(call RUN,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,cfoo)\n+\t$(call REMOVE_DYLIBS,cfoo)\n \t$(call FAIL,bar)\n endif"}, {"sha": "e15cfd34d6c36f3e394635003b8644f6c56a931f", "filename": "src/test/run-make/c-dynamic-rlib/Makefile", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -1,5 +1,8 @@\n -include ../tools.mk\n \n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n # This hits an assertion in the linker on older versions of osx apparently\n ifeq ($(shell uname),Darwin)\n all:\n@@ -8,7 +11,7 @@ else\n all: $(call DYLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n-\tLD_LIBRARY_PATH=$(TMPDIR) $(call RUN,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,cfoo)\n+\t$(call RUN,bar)\n+\t$(call REMOVE_DYLIBS,cfoo)\n \t$(call FAIL,bar)\n endif"}, {"sha": "e743004a9cbc6caf86e4a8ba6395674954f9fc2d", "filename": "src/test/run-make/c-link-to-rust-dylib/Makefile", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -1,9 +1,11 @@\n -include ../tools.mk\n \n+HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n+\n all:\n \t$(RUSTC) foo.rs\n \tln -s $(call DYLIB,foo-*) $(call DYLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN,bar) -Wl,-rpath,$(TMPDIR)\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -Wl,-rpath,$(TMPDIR)\n \t$(call RUN,bar)\n-\trm $(call DYLIB,foo)\n+\t$(call REMOVE_DYLIBS,foo)\n \t$(call FAIL,bar)"}, {"sha": "40b6feac678233f1154f768c1112215bae4a4f94", "filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -11,7 +11,7 @@ ifneq ($(shell uname),FreeBSD)\n all:\n \t$(RUSTC) foo.rs\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) -lstdc++\n \t$(call RUN,bar)\n \trm $(call STATICLIB,foo*)\n \t$(call RUN,bar)"}, {"sha": "6b047846cfdeb1f5a9e7b11ef3799de4cc99b112", "filename": "src/test/run-make/c-static-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -5,5 +5,5 @@ all: $(call STATICLIB,cfoo)\n \t$(RUSTC) bar.rs\n \trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n \t$(call RUN,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,foo)\n+\t$(call REMOVE_DYLIBS,foo)\n \t$(call FAIL,bar)"}, {"sha": "02b24ef9846dd48cc9048b5f6b6463e35c3f6a69", "filename": "src/test/run-make/c-static-rlib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -3,6 +3,6 @@\n all: $(call STATICLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,foo)\n+\t$(call REMOVE_RLIBS,foo)\n \trm $(TMPDIR)/$(call STATICLIB_GLOB,cfoo)\n \t$(call RUN,bar)"}, {"sha": "2149f2451470e2e41f283fb95327a9fa55b5aa8b", "filename": "src/test/run-make/dylib-chain/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -6,7 +6,7 @@ all:\n \t$(RUSTC) m3.rs\n \t$(RUSTC) m4.rs\n \t$(call RUN,m4)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,m1)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,m2)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,m3)\n+\t$(call REMOVE_DYLIBS,m1)\n+\t$(call REMOVE_DYLIBS,m2)\n+\t$(call REMOVE_DYLIBS,m3)\n \t$(call FAIL,m4)"}, {"sha": "56748b1eb9b007dc75f4bd08a6fdb86b4ec01581", "filename": "src/test/run-make/extern-fn-reachable/Makefile", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -1,5 +1,8 @@\n -include ../tools.mk\n \n+# This overrides the LD_LIBRARY_PATH for RUN\n+TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n+\n all:\n \t$(RUSTC) dylib.rs -o $(TMPDIR)/libdylib.so\n \t$(RUSTC) main.rs"}, {"sha": "49a04ce42a0ae7f16a5fc60ba46c9fb6406a406d", "filename": "src/test/run-make/lto-smoke-c/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -19,5 +19,5 @@ CC := $(CC:-g=)\n all:\n \t$(RUSTC) foo.rs -Z lto\n \tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n-\t$(CC) bar.c -lfoo -o $(call RUN,bar) $(EXTRAFLAGS) -lstdc++\n+\t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) -lstdc++\n \t$(call RUN,bar)"}, {"sha": "c522f30e2df13875396aff26f637be0af23df43c", "filename": "src/test/run-make/lto-syntax-extension/Makefile", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -1,6 +1,18 @@\n -include ../tools.mk\n \n-all:\n+# This test attempts to use syntax extensions, which are known to be\n+# incompatible with stage1 at the moment.\n+\n+ifeq ($(RUST_BUILD_STAGE),1)\n+DOTEST=\n+else\n+DOTEST=dotest\n+endif\n+\n+all: $(DOTEST)\n+\n+dotest:\n+\tenv\n \t$(RUSTC) lib.rs\n \t$(RUSTC) main.rs -Z lto\n \t$(call RUN,main)"}, {"sha": "3f8b97f2566520a3c28d0e41b67e0e2d82151095", "filename": "src/test/run-make/missing-crate-dependency/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -3,7 +3,7 @@\n all: \n \t$(RUSTC) --crate-type=rlib crateA.rs\n \t$(RUSTC) --crate-type=rlib crateB.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,crateA)\n+\t$(call REMOVE_RLIBS,crateA)\n \t# Ensure crateC fails to compile since dependency crateA is missing\n \t$(RUSTC) crateC.rs 2>&1 | \\\n \t\tgrep \"error: can't find crate for \\`crateA\\` which \\`crateB\\` depends on\""}, {"sha": "babeeef164dd4c9ac824a1ff55a202606e6270ae", "filename": "src/test/run-make/mixing-libs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -5,5 +5,5 @@ all:\n \t$(RUSTC) dylib.rs\n \t$(RUSTC) rlib.rs --crate-type=dylib\n \t$(RUSTC) dylib.rs\n-\trm $(call DYLIB,rlib-*)\n+\t$(call REMOVE_DYLIBS,rlib)\n \t$(RUSTC) prog.rs && exit 1 || exit 0"}, {"sha": "903349152dfd2efef824e551cdf1050ef37adc8c", "filename": "src/test/run-make/obey-crate-type-flag/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fobey-crate-type-flag%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -7,7 +7,7 @@\n # fail if an rlib was built\n all:\n \t$(RUSTC) test.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,test)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,test)\n+\t$(call REMOVE_RLIBS,test)\n+\t$(call REMOVE_DYLIBS,test)\n \t$(RUSTC) --crate-type dylib test.rs\n-\trm $(TMPDIR)/$(call RLIB_GLOB,test) && exit 1 || exit 0\n+\t$(call REMOVE_RLIBS,test) && exit 1 || exit 0"}, {"sha": "c163a5bec086f7a5e0dafa95b2fcdde4e8d82e45", "filename": "src/test/run-make/output-type-permutations/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-type-permutations%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -2,8 +2,8 @@\n \n all:\n \t$(RUSTC) foo.rs --crate-type=rlib,dylib,staticlib\n-\trm $(TMPDIR)/$(call RLIB_GLOB,bar)\n-\trm $(TMPDIR)/$(call DYLIB_GLOB,bar)\n+\t$(call REMOVE_RLIBS,bar)\n+\t$(call REMOVE_DYLIBS,bar)\n \trm $(TMPDIR)/$(call STATICLIB_GLOB,bar)\n \t$(RUSTC) foo.rs --crate-type=bin\n \trm $(TMPDIR)/$(call BIN,bar)\n@@ -41,4 +41,4 @@ all:\n \tcmp $(TMPDIR)/foo.bc $(TMPDIR)/bar.bc\n \trm $(TMPDIR)/bar.bc\n \trm $(TMPDIR)/foo.bc\n-\trm $(TMPDIR)/$(call RLIB_GLOB,bar)\n+\t$(call REMOVE_RLIBS,bar)"}, {"sha": "fe9bbb95095baee57f2375f7c74228336e743f44", "filename": "src/test/run-make/prefer-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-dylib%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -5,4 +5,4 @@ all:\n \t$(RUSTC) foo.rs -C prefer-dynamic\n \t$(call RUN,foo)\n \trm $(TMPDIR)/*bar*\n-\t$(call FAILS,foo)\n+\t$(call FAIL,foo)"}, {"sha": "dedd739052ca0f5fd7d0fb0a1ce32b10ac394c1c", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -4,8 +4,20 @@ export DYLD_LIBRARY_PATH:=$(TMPDIR):$(DYLD_LIBRARY_PATH)\n RUSTC := $(RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n CC := $(CC) -L $(TMPDIR)\n \n-RUN = $(TMPDIR)/$(1)\n-FAILS = $(TMPDIR)/$(1) && exit 1 || exit 0\n+# These deliberately use `=` and not `:=` so that client makefiles can\n+# augment HOST_RPATH_DIR / TARGET_RPATH_DIR.\n+HOST_RPATH_ENV = \\\n+    $(LD_LIB_PATH_ENVVAR)=$$$(LD_LIB_PATH_ENVVAR):$(HOST_RPATH_DIR)\n+TARGET_RPATH_ENV = \\\n+    $(LD_LIB_PATH_ENVVAR)=$$$(LD_LIB_PATH_ENVVAR):$(TARGET_RPATH_DIR)\n+\n+# This is the name of the binary we will generate and run; use this\n+# e.g. for `$(CC) -o $(RUN_BINFILE)`.\n+RUN_BINFILE = $(TMPDIR)/$(1)\n+\n+# RUN and FAIL are basic way we will invoke the generated binary.  On\n+# non-windows platforms, they set the LD_LIBRARY_PATH environment\n+# variable before running the binary.\n \n RLIB_GLOB = lib$(1)*.rlib\n STATICLIB = $(TMPDIR)/lib$(1).a\n@@ -18,20 +30,32 @@ IS_WINDOWS=1\n endif\n \n ifeq ($(UNAME),Darwin)\n+RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n+FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.dylib\n DYLIB = $(TMPDIR)/lib$(1).dylib\n+RPATH_LINK_SEARCH =\n else\n ifdef IS_WINDOWS\n+RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE)\n+FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = $(1)*.dll\n DYLIB = $(TMPDIR)/$(1).dll\n BIN = $(1).exe\n-export PATH := $(PATH):$(LD_LIBRARY_PATH)\n+RPATH_LINK_SEARCH =\n+RUSTC := PATH=\"$(PATH):$(LD_LIBRARY_PATH)\" $(RUSTC)\n else\n+RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n+FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = lib$(1)*.so\n DYLIB = $(TMPDIR)/lib$(1).so\n+RPATH_LINK_SEARCH = -Wl,-rpath-link=$(1)\n endif\n endif\n \n+REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n+REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))\n+\n %.a: %.o\n \tar crus $@ $<\n %.dylib: %.o"}, {"sha": "f834a85cdcc741c0cc496fa1d55bffd7a3f79974", "filename": "src/test/run-make/unicode-input/Makefile", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8cbda5da939e97d5dafde4a2a20927fb539bf80c/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile?ref=8cbda5da939e97d5dafde4a2a20927fb539bf80c", "patch": "@@ -1,9 +1,21 @@\n -include ../tools.mk\n \n+# This test attempts to run rustc itself from the compiled binary; but\n+# that means that you need to set the LD_LIBRARY_PATH for rustc itself\n+# while running multiple_files, and that won't work for stage1.\n+\n # FIXME ignore windows\n ifndef IS_WINDOWS\n+ifeq ($(RUST_BUILD_STAGE),1)\n+DOTEST=\n+else\n+DOTEST=dotest\n+endif\n+endif\n+\n+all: $(DOTEST)\n \n-all:\n+dotest:\n \t# check that we don't ICE on unicode input, issue #11178\n \t$(RUSTC) multiple_files.rs\n \t$(call RUN,multiple_files)  \"$(RUSTC)\" \"$(TMPDIR)\"\n@@ -12,8 +24,3 @@ all:\n \t# correct length. issue #8706\n \t$(RUSTC) span_length.rs\n \t$(call RUN,span_length) \"$(RUSTC)\" \"$(TMPDIR)\"\n-\n-else\n-all:\n-\n-endif"}]}