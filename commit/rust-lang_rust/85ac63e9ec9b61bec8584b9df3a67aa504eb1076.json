{"sha": "85ac63e9ec9b61bec8584b9df3a67aa504eb1076", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YWM2M2U5ZWM5YjYxYmVjODU4NGI5ZGYzYTY3YWE1MDRlYjEwNzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-10T18:27:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-17T11:51:12Z"}, "message": "rename CrateIndex to IndexBuilder", "tree": {"sha": "5145c85d83a640c7f5d038e64dfa1747889cd22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5145c85d83a640c7f5d038e64dfa1747889cd22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ac63e9ec9b61bec8584b9df3a67aa504eb1076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ac63e9ec9b61bec8584b9df3a67aa504eb1076", "html_url": "https://github.com/rust-lang/rust/commit/85ac63e9ec9b61bec8584b9df3a67aa504eb1076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ac63e9ec9b61bec8584b9df3a67aa504eb1076/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fa8ab593a106dd58c8c98b7f9b00a47561a663", "html_url": "https://github.com/rust-lang/rust/commit/b5fa8ab593a106dd58c8c98b7f9b00a47561a663"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "97c780f84e9fff3976507a625e91851ebe1b2611", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85ac63e9ec9b61bec8584b9df3a67aa504eb1076/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ac63e9ec9b61bec8584b9df3a67aa504eb1076/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=85ac63e9ec9b61bec8584b9df3a67aa504eb1076", "patch": "@@ -54,7 +54,7 @@ use rustc::hir::intravisit::Visitor;\n use rustc::hir::intravisit;\n use rustc::hir::map::DefKey;\n \n-use super::index_builder::{CrateIndex, XRef};\n+use super::index_builder::{IndexBuilder, XRef};\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n@@ -134,7 +134,7 @@ fn encode_item_variances(rbml_w: &mut Encoder,\n \n fn encode_bounds_and_type_for_item<'a, 'tcx>(rbml_w: &mut Encoder,\n                                              ecx: &EncodeContext<'a, 'tcx>,\n-                                             index: &mut CrateIndex<'a, 'tcx>,\n+                                             index: &mut IndexBuilder<'a, 'tcx>,\n                                              id: NodeId) {\n     encode_bounds_and_type(rbml_w,\n                            ecx,\n@@ -145,7 +145,7 @@ fn encode_bounds_and_type_for_item<'a, 'tcx>(rbml_w: &mut Encoder,\n \n fn encode_bounds_and_type<'a, 'tcx>(rbml_w: &mut Encoder,\n                                     ecx: &EncodeContext<'a, 'tcx>,\n-                                    index: &mut CrateIndex<'a, 'tcx>,\n+                                    index: &mut IndexBuilder<'a, 'tcx>,\n                                     scheme: &ty::TypeScheme<'tcx>,\n                                     predicates: &ty::GenericPredicates<'tcx>) {\n     encode_generics(rbml_w, ecx, index, &scheme.generics, &predicates);\n@@ -204,7 +204,7 @@ fn encode_enum_variant_info<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                       rbml_w: &mut Encoder,\n                                       did: DefId,\n                                       vis: &hir::Visibility,\n-                                      index: &mut CrateIndex<'a, 'tcx>) {\n+                                      index: &mut IndexBuilder<'a, 'tcx>) {\n     debug!(\"encode_enum_variant_info(did={:?})\", did);\n     let repr_hints = ecx.tcx.lookup_repr_hints(did);\n     let repr_type = ecx.tcx.enum_repr_type(repr_hints.get(0));\n@@ -424,7 +424,7 @@ fn encode_item_sort(rbml_w: &mut Encoder, sort: char) {\n fn encode_field<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                           rbml_w: &mut Encoder,\n                           field: ty::FieldDef<'tcx>,\n-                          index: &mut CrateIndex<'a, 'tcx>) {\n+                          index: &mut IndexBuilder<'a, 'tcx>) {\n     let nm = field.name;\n     let id = ecx.local_id(field.did);\n \n@@ -448,7 +448,7 @@ fn encode_info_for_struct_ctor<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                          rbml_w: &mut Encoder,\n                                          name: Name,\n                                          struct_def: &hir::VariantData,\n-                                         index: &mut CrateIndex<'a, 'tcx>,\n+                                         index: &mut IndexBuilder<'a, 'tcx>,\n                                          struct_id: NodeId) {\n     let ctor_id = struct_def.id();\n     let ctor_def_id = ecx.tcx.map.local_def_id(ctor_id);\n@@ -480,7 +480,7 @@ fn encode_info_for_struct_ctor<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n fn encode_generics<'a, 'tcx>(rbml_w: &mut Encoder,\n                              ecx: &EncodeContext<'a, 'tcx>,\n-                             index: &mut CrateIndex<'a, 'tcx>,\n+                             index: &mut IndexBuilder<'a, 'tcx>,\n                              generics: &ty::Generics<'tcx>,\n                              predicates: &ty::GenericPredicates<'tcx>)\n {\n@@ -493,7 +493,7 @@ fn encode_generics<'a, 'tcx>(rbml_w: &mut Encoder,\n }\n \n fn encode_predicates<'a,'tcx>(rbml_w: &mut Encoder,\n-                              index: &mut CrateIndex<'a, 'tcx>,\n+                              index: &mut IndexBuilder<'a, 'tcx>,\n                               predicates: &ty::GenericPredicates<'tcx>,\n                               tag: usize)\n {\n@@ -510,7 +510,7 @@ fn encode_predicates<'a,'tcx>(rbml_w: &mut Encoder,\n \n fn encode_method_ty_fields<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                      rbml_w: &mut Encoder,\n-                                     index: &mut CrateIndex<'a, 'tcx>,\n+                                     index: &mut IndexBuilder<'a, 'tcx>,\n                                      method_ty: &ty::Method<'tcx>) {\n     encode_def_id_and_key(ecx, rbml_w, method_ty.def_id);\n     encode_name(rbml_w, method_ty.name);\n@@ -528,7 +528,7 @@ fn encode_method_ty_fields<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n fn encode_info_for_associated_const<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                               rbml_w: &mut Encoder,\n-                                              index: &mut CrateIndex<'a, 'tcx>,\n+                                              index: &mut IndexBuilder<'a, 'tcx>,\n                                               associated_const: &ty::AssociatedConst,\n                                               parent_id: NodeId,\n                                               impl_item_opt: Option<&hir::ImplItem>) {\n@@ -570,7 +570,7 @@ fn encode_info_for_associated_const<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                     rbml_w: &mut Encoder,\n-                                    index: &mut CrateIndex<'a, 'tcx>,\n+                                    index: &mut IndexBuilder<'a, 'tcx>,\n                                     m: &ty::Method<'tcx>,\n                                     is_default_impl: bool,\n                                     parent_id: NodeId,\n@@ -618,7 +618,7 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n fn encode_info_for_associated_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                              rbml_w: &mut Encoder,\n-                                             index: &mut CrateIndex<'a, 'tcx>,\n+                                             index: &mut IndexBuilder<'a, 'tcx>,\n                                              associated_type: &ty::AssociatedType<'tcx>,\n                                              parent_id: NodeId,\n                                              impl_item_opt: Option<&hir::ImplItem>) {\n@@ -765,7 +765,7 @@ fn encode_xrefs<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                   rbml_w: &mut Encoder,\n                                   item: &hir::Item,\n-                                  index: &mut CrateIndex<'a, 'tcx>) {\n+                                  index: &mut IndexBuilder<'a, 'tcx>) {\n     let tcx = ecx.tcx;\n \n     debug!(\"encoding info for item at {}\",\n@@ -1237,7 +1237,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                           rbml_w: &mut Encoder,\n                                           nitem: &hir::ForeignItem,\n-                                          index: &mut CrateIndex<'a, 'tcx>) {\n+                                          index: &mut IndexBuilder<'a, 'tcx>) {\n     debug!(\"writing foreign item {}\", ecx.tcx.node_path_str(nitem.id));\n     let def_id = ecx.tcx.map.local_def_id(nitem.id);\n     let abi = ecx.tcx.map.get_foreign_abi(nitem.id);\n@@ -1285,7 +1285,7 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n fn my_visit_expr(expr: &hir::Expr,\n                  rbml_w: &mut Encoder,\n                  ecx: &EncodeContext,\n-                 index: &mut CrateIndex) {\n+                 index: &mut IndexBuilder) {\n     match expr.node {\n         hir::ExprClosure(..) => {\n             let def_id = ecx.tcx.map.local_def_id(expr.id);\n@@ -1316,7 +1316,7 @@ fn my_visit_expr(expr: &hir::Expr,\n struct EncodeVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> {\n     rbml_w_for_visit_item: &'a mut Encoder<'b>,\n     ecx: &'a EncodeContext<'c, 'tcx>,\n-    index: &'a mut CrateIndex<'c, 'tcx>,\n+    index: &'a mut IndexBuilder<'c, 'tcx>,\n }\n \n impl<'a, 'b, 'c, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'c, 'tcx> {\n@@ -1350,10 +1350,10 @@ impl<'a, 'b, 'c, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'c, 'tcx> {\n \n fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                    rbml_w: &mut Encoder)\n-                                   -> CrateIndex<'a, 'tcx> {\n+                                   -> IndexBuilder<'a, 'tcx> {\n     let krate = ecx.tcx.map.krate();\n \n-    let mut index = CrateIndex::new(ecx);\n+    let mut index = IndexBuilder::new(ecx);\n     rbml_w.start_tag(tag_items_data);\n \n     {"}, {"sha": "b7af35da751d9ef6a4581e0284c4bc7f21f64b65", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85ac63e9ec9b61bec8584b9df3a67aa504eb1076/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ac63e9ec9b61bec8584b9df3a67aa504eb1076/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=85ac63e9ec9b61bec8584b9df3a67aa504eb1076", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc_data_structures::fnv::FnvHashMap;\n \n-pub struct CrateIndex<'a, 'tcx> {\n+pub struct IndexBuilder<'a, 'tcx> {\n     dep_graph: &'a DepGraph,\n     items: IndexData,\n     xrefs: FnvHashMap<XRef<'tcx>, u32>, // sequentially-assigned\n@@ -26,9 +26,9 @@ pub struct CrateIndex<'a, 'tcx> {\n #[derive(PartialEq, Eq, Hash)]\n pub enum XRef<'tcx> { Predicate(ty::Predicate<'tcx>) }\n \n-impl<'a, 'tcx> CrateIndex<'a, 'tcx> {\n+impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n     pub fn new(ecx: &EncodeContext<'a, 'tcx>) -> Self {\n-        CrateIndex {\n+        IndexBuilder {\n             dep_graph: &ecx.tcx.dep_graph,\n             items: IndexData::new(ecx.tcx.map.num_local_def_ids()),\n             xrefs: FnvHashMap()"}]}