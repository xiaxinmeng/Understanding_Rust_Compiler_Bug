{"sha": "b481b59be5a1fd4e8a6aafd13255951b4411aa48", "node_id": "C_kwDOAAsO6NoAKGI0ODFiNTliZTVhMWZkNGU4YTZhYWZkMTMyNTU5NTFiNDQxMWFhNDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-08T11:37:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-08T11:37:51Z"}, "message": "Auto merge of #12937 - fprasx:master, r=Veykril\n\nAdd fixups for incomplete in proc-macros\n\nPartially implements https://github.com/rust-lang/rust-analyzer/issues/12777.\n\nAdded support for for loops and match statements.\n\nI couldn't do paths like `crate::foo::` as I wasn't able to add `SyntheticTokens` to the end of `foo::`, they always ended up after `crate::`\n\nThis is my first contribution so please don't be shy about letting me know if I've done anything wrong!", "tree": {"sha": "22141461b8d188a26c98b483df8fc791d3a5d214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22141461b8d188a26c98b483df8fc791d3a5d214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b481b59be5a1fd4e8a6aafd13255951b4411aa48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b481b59be5a1fd4e8a6aafd13255951b4411aa48", "html_url": "https://github.com/rust-lang/rust/commit/b481b59be5a1fd4e8a6aafd13255951b4411aa48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b481b59be5a1fd4e8a6aafd13255951b4411aa48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b569bbbaccfc0aa24cae76a6a62c40adc74842bd", "html_url": "https://github.com/rust-lang/rust/commit/b569bbbaccfc0aa24cae76a6a62c40adc74842bd"}, {"sha": "ab44a811501c12c4e3c471387f02ad451034639f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab44a811501c12c4e3c471387f02ad451034639f", "html_url": "https://github.com/rust-lang/rust/commit/ab44a811501c12c4e3c471387f02ad451034639f"}], "stats": {"total": 176, "additions": 174, "deletions": 2}, "files": [{"sha": "46257b6bc4dce2faf5081807f2f3487461194224", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 174, "deletions": 2, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/b481b59be5a1fd4e8a6aafd13255951b4411aa48/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b481b59be5a1fd4e8a6aafd13255951b4411aa48/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=b481b59be5a1fd4e8a6aafd13255951b4411aa48", "patch": "@@ -67,7 +67,6 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n             preorder.skip_subtree();\n             continue;\n         }\n-\n         // In some other situations, we can fix things by just appending some tokens.\n         let end_range = TextRange::empty(node.text_range().end());\n         match_ast! {\n@@ -194,7 +193,75 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                     }\n                 },\n                 // FIXME: foo::\n-                // FIXME: for, match etc.\n+                ast::MatchExpr(it) => {\n+                    if it.expr().is_none() {\n+                        let match_token = match it.match_token() {\n+                            Some(t) => t,\n+                            None => continue\n+                        };\n+                        append.insert(match_token.into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::IDENT,\n+                                text: \"__ra_fixup\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID\n+                            },\n+                        ]);\n+                    }\n+                    if it.match_arm_list().is_none() {\n+                        // No match arms\n+                        append.insert(node.clone().into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                },\n+                ast::ForExpr(it) => {\n+                    let for_token = match it.for_token() {\n+                        Some(token) => token,\n+                        None => continue\n+                    };\n+\n+                    let [pat, in_token, iter] = [\n+                        (SyntaxKind::UNDERSCORE, \"_\"),\n+                        (SyntaxKind::IN_KW, \"in\"),\n+                        (SyntaxKind::IDENT, \"__ra_fixup\")\n+                    ].map(|(kind, text)| SyntheticToken { kind, text: text.into(), range: end_range, id: EMPTY_ID});\n+\n+                    if it.pat().is_none() && it.in_token().is_none() && it.iterable().is_none() {\n+                        append.insert(for_token.into(), vec![pat, in_token, iter]);\n+                    // does something funky -- see test case for_no_pat\n+                    } else if it.pat().is_none() {\n+                        append.insert(for_token.into(), vec![pat]);\n+                    }\n+\n+                    if it.loop_body().is_none() {\n+                        append.insert(node.clone().into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                },\n                 _ => (),\n             }\n         }\n@@ -287,6 +354,111 @@ mod tests {\n         assert_eq!(tt.to_string(), original_as_tt.to_string());\n     }\n \n+    #[test]\n+    fn just_for_token() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {for _ in __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn for_no_iter_pattern() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for {}\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {for _ in __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn for_no_body() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for bar in qux\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {for bar in qux {}}\n+\"#]],\n+        )\n+    }\n+\n+    // FIXME: https://github.com/rust-lang/rust-analyzer/pull/12937#discussion_r937633695\n+    #[test]\n+    fn for_no_pat() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for in qux {\n+\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {__ra_fixup}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn match_no_expr_no_arms() {\n+        check(\n+            r#\"\n+fn foo() {\n+    match\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {match __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn match_expr_no_arms() {\n+        check(\n+            r#\"\n+fn foo() {\n+    match x {\n+\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {match x {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn match_no_expr() {\n+        check(\n+            r#\"\n+fn foo() {\n+    match {\n+        _ => {}\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {match __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n     #[test]\n     fn incomplete_field_expr_1() {\n         check("}]}