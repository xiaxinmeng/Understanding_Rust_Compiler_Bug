{"sha": "d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "node_id": "C_kwDOAAsO6NoAKGQ4YTRlN2NmNTFmYmRjYTQ4OTA4NGUxMTcwNTBmZTJlMmMyMmNiMjE", "commit": {"author": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-04-02T10:50:01Z"}, "committer": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-04-03T03:08:14Z"}, "message": "fix(middle): emit error rather than delay bug when reaching limit", "tree": {"sha": "ef15d95bbbfb6adef641bc30503079c30e1b8a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef15d95bbbfb6adef641bc30503079c30e1b8a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "html_url": "https://github.com/rust-lang/rust/commit/d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a93bcdc30771340dfff914a1cf48556886ad33a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a93bcdc30771340dfff914a1cf48556886ad33a6", "html_url": "https://github.com/rust-lang/rust/commit/a93bcdc30771340dfff914a1cf48556886ad33a6"}], "stats": {"total": 107, "additions": 26, "deletions": 81}, "files": [{"sha": "bd9d89deee179d8614d8519f2d4ef56fc118702a", "filename": "compiler/rustc_middle/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/compiler%2Frustc_middle%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/compiler%2Frustc_middle%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fmessages.ftl?ref=d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "patch": "@@ -16,6 +16,10 @@ middle_limit_invalid =\n     `limit` must be a non-negative integer\n     .label = {$error_str}\n \n+middle_recursion_limit_reached =\n+    reached the recursion limit finding the struct tail for `{$ty}`\n+    .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]`\n+\n middle_const_eval_non_int =\n     constant evaluation of enum discriminant resulted in non-integer\n "}, {"sha": "dc4aa18640fb3acaf91c2527dc82bf0e95074dd9", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "patch": "@@ -49,6 +49,14 @@ pub struct LimitInvalid<'a> {\n     pub error_str: &'a str,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(middle_recursion_limit_reached)]\n+#[help]\n+pub struct RecursionLimitReached<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub suggested_limit: rustc_session::Limit,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(middle_const_eval_non_int)]\n pub struct ConstEvalNonIntError {"}, {"sha": "4411bcd927d7198b8f3cb098f45dace9ccb932ff", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "patch": "@@ -19,7 +19,8 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n-use rustc_span::{sym, DUMMY_SP};\n+use rustc_session::Limit;\n+use rustc_span::sym;\n use rustc_target::abi::{Integer, IntegerType, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi;\n use smallvec::SmallVec;\n@@ -225,10 +226,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         let recursion_limit = self.recursion_limit();\n         for iteration in 0.. {\n             if !recursion_limit.value_within_limit(iteration) {\n-                return self.ty_error_with_message(\n-                    DUMMY_SP,\n-                    &format!(\"reached the recursion limit finding the struct tail for {}\", ty),\n-                );\n+                let suggested_limit = match recursion_limit {\n+                    Limit(0) => Limit(2),\n+                    limit => limit * 2,\n+                };\n+                let reported =\n+                    self.sess.emit_err(crate::error::RecursionLimitReached { ty, suggested_limit });\n+                return self.ty_error(reported);\n             }\n             match *ty.kind() {\n                 ty::Adt(def, substs) => {"}, {"sha": "d2f1c6e327192faddd660887042c8dde478aecfe", "filename": "tests/ui/autoref-autoderef/issue-38940.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -1,52 +0,0 @@\n-// issue-38940: error printed twice for deref recursion limit exceeded\n-// Test that the recursion limit can be changed. In this case, we have\n-// deeply nested types that will fail the `Send` check by overflow\n-// when the recursion limit is set very low.\n-// compile-flags: -Zdeduplicate-diagnostics=yes\n-\n-#![allow(dead_code)]\n-#![recursion_limit = \"10\"]\n-macro_rules! link {\n-    ($outer:ident, $inner:ident) => {\n-        struct $outer($inner);\n-        impl $outer {\n-            fn new() -> $outer {\n-                $outer($inner::new())\n-            }\n-        }\n-        impl std::ops::Deref for $outer {\n-            type Target = $inner;\n-            fn deref(&self) -> &$inner {\n-                &self.0\n-            }\n-        }\n-    };\n-}\n-\n-struct Bottom;\n-\n-impl Bottom {\n-    fn new() -> Bottom {\n-        Bottom\n-    }\n-}\n-\n-link!(Top, A);\n-link!(A, B);\n-link!(B, C);\n-link!(C, D);\n-link!(D, E);\n-link!(E, F);\n-link!(F, G);\n-link!(G, H);\n-link!(H, I);\n-link!(I, J);\n-link!(J, K);\n-link!(K, Bottom);\n-\n-fn main() {\n-    let t = Top::new();\n-    let x: &Bottom = &t;\n-    //~^ ERROR mismatched types\n-    //~| ERROR reached the recursion limit while auto-dereferencing `J`\n-}"}, {"sha": "8e98bfcd90fbc50a3a7ca0700ff72c3a6bb7dbf3", "filename": "tests/ui/autoref-autoderef/issue-38940.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -1,23 +0,0 @@\n-error[E0055]: reached the recursion limit while auto-dereferencing `J`\n-  --> $DIR/issue-38940.rs:49:22\n-   |\n-LL |     let x: &Bottom = &t;\n-   |                      ^^ deref recursion limit reached\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]` attribute to your crate (`issue_38940`)\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-38940.rs:49:22\n-   |\n-LL |     let x: &Bottom = &t;\n-   |            -------   ^^ expected `&Bottom`, found `&Top`\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected reference `&Bottom`\n-              found reference `&Top`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0055, E0308.\n-For more information about an error, try `rustc --explain E0055`."}, {"sha": "b0c493faf1ef26ba8bc84b29860c0df97978b67b", "filename": "tests/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8a4e7cf51fbdca489084e117050fe2e2c22cb21/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=d8a4e7cf51fbdca489084e117050fe2e2c22cb21", "patch": "@@ -1,3 +1,7 @@\n+error: reached the recursion limit finding the struct tail for `Bottom`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"20\"]`\n+\n error[E0055]: reached the recursion limit while auto-dereferencing `J`\n   --> $DIR/recursion_limit_deref.rs:51:22\n    |\n@@ -17,7 +21,7 @@ LL |     let x: &Bottom = &t;\n    = note: expected reference `&Bottom`\n               found reference `&Top`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0055, E0308.\n For more information about an error, try `rustc --explain E0055`."}]}