{"sha": "bc0825d1358abece6e85b928ea3a197451d083c7", "node_id": "C_kwDOAAsO6NoAKGJjMDgyNWQxMzU4YWJlY2U2ZTg1YjkyOGVhM2ExOTc0NTFkMDgzYzc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-03T12:03:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-03T12:03:46Z"}, "message": "Merge #10802\n\n10802: Allow clients to configure the global workspace search limit r=Veykril a=knutwalker\n\nPlaying around with [helix](https://helix-editor.com) I realized that the global worksapce symbol search works different compared to vs-code.\nHelix requires all possible symbols in one query and does no subsequent refinement searched.\nThis PR adds a configuration option to override the default search limit with the default being the currently hardocded value.\nHelix users can increment this limit for their instance with a config like\n\n```toml\n[[language]]\nname = \"rust\"\nlanguage-server = { command = \"rust-analyzer\" }\n[language.config]\nworkspace = { symbol = { search = { limit = 65536 }}}\n```\n\nOther editors are not affected by this change.\n\n\nCo-authored-by: Paul Horn <dev@knutwalker.engineer>", "tree": {"sha": "61debaa0bb83d9668d1a6408af2086634becee69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61debaa0bb83d9668d1a6408af2086634becee69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0825d1358abece6e85b928ea3a197451d083c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSY0iCRBK7hj4Ov3rIwAAxegIAKWVKNw8RokJrOPdzojHapTz\nQzHYvodHjhKyoy0XM7xFbOgu9jj+5py8Mhm3QRvYrskp108q4n/X+rG0dr5LsOcN\nRGxQAwuZqDGwPSblCleyKXkEqetRw/SBXMULChHOxgwPT/EAyCpLtiPsGcfOQDjR\nhjyVIX/XQ81j87LWm5er20M34BmdZ7g2dvOJ1hu0gTTGBSFBJpih40SgPpwDdltZ\nKabqjTz91dNXv7FeNUNyjKYRwI+OzapYa1bJmfUtinRJ88M6+EuRLygcYl4d+BPm\n1eMMwuw68VDdJ1ojMoSp/OD2xVps6Ke18Uj8p6LIvipYZC8Qzg0aHBi+6fUWlxY=\n=k7H3\n-----END PGP SIGNATURE-----\n", "payload": "tree 61debaa0bb83d9668d1a6408af2086634becee69\nparent 5b5ca0bd17febc252eb5f4e8d645c1c2ea060279\nparent 553bb7f50aac5d062fd8ba534d18f70aaa9bd25b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648987426 +0000\ncommitter GitHub <noreply@github.com> 1648987426 +0000\n\nMerge #10802\n\n10802: Allow clients to configure the global workspace search limit r=Veykril a=knutwalker\n\nPlaying around with [helix](https://helix-editor.com) I realized that the global worksapce symbol search works different compared to vs-code.\nHelix requires all possible symbols in one query and does no subsequent refinement searched.\nThis PR adds a configuration option to override the default search limit with the default being the currently hardocded value.\nHelix users can increment this limit for their instance with a config like\n\n```toml\n[[language]]\nname = \"rust\"\nlanguage-server = { command = \"rust-analyzer\" }\n[language.config]\nworkspace = { symbol = { search = { limit = 65536 }}}\n```\n\nOther editors are not affected by this change.\n\n\nCo-authored-by: Paul Horn <dev@knutwalker.engineer>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0825d1358abece6e85b928ea3a197451d083c7", "html_url": "https://github.com/rust-lang/rust/commit/bc0825d1358abece6e85b928ea3a197451d083c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0825d1358abece6e85b928ea3a197451d083c7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b5ca0bd17febc252eb5f4e8d645c1c2ea060279", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5ca0bd17febc252eb5f4e8d645c1c2ea060279", "html_url": "https://github.com/rust-lang/rust/commit/5b5ca0bd17febc252eb5f4e8d645c1c2ea060279"}, {"sha": "553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b", "html_url": "https://github.com/rust-lang/rust/commit/553bb7f50aac5d062fd8ba534d18f70aaa9bd25b"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "958ff1fcee1f9e8054a987a576fb0b139400f1d6", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc0825d1358abece6e85b928ea3a197451d083c7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0825d1358abece6e85b928ea3a197451d083c7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=bc0825d1358abece6e85b928ea3a197451d083c7", "patch": "@@ -354,6 +354,10 @@ config_data! {\n         workspace_symbol_search_scope: WorkspaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n         /// Workspace symbol search kind.\n         workspace_symbol_search_kind: WorkspaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n+        /// Limits the number of items returned from a workspace symbol search (Defaults to 128).\n+        /// Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n+        /// Other clients requires all results upfront and might require a higher limit.\n+        workspace_symbol_search_limit: usize = \"128\",\n     }\n }\n \n@@ -487,8 +491,10 @@ pub struct RunnablesConfig {\n pub struct WorkspaceSymbolConfig {\n     /// In what scope should the symbol be searched in.\n     pub search_scope: WorkspaceSymbolSearchScope,\n-    /// What kind of symbol is being search for.\n+    /// What kind of symbol is being searched for.\n     pub search_kind: WorkspaceSymbolSearchKind,\n+    /// How many items are returned at most.\n+    pub search_limit: usize,\n }\n \n pub struct ClientCommandsConfig {\n@@ -995,6 +1001,7 @@ impl Config {\n                 WorkspaceSymbolSearchKindDef::OnlyTypes => WorkspaceSymbolSearchKind::OnlyTypes,\n                 WorkspaceSymbolSearchKindDef::AllSymbols => WorkspaceSymbolSearchKind::AllSymbols,\n             },\n+            search_limit: self.data.workspace_symbol_search_limit,\n         }\n     }\n \n@@ -1298,6 +1305,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n \n     match ty {\n         \"bool\" => set!(\"type\": \"boolean\"),\n+        \"usize\" => set!(\"type\": \"integer\", \"minimum\": 0),\n         \"String\" => set!(\"type\": \"string\"),\n         \"Vec<String>\" => set! {\n             \"type\": \"array\","}, {"sha": "78118764fa7794ee8488a02ef50b9e0ee47e2f73", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc0825d1358abece6e85b928ea3a197451d083c7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0825d1358abece6e85b928ea3a197451d083c7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=bc0825d1358abece6e85b928ea3a197451d083c7", "patch": "@@ -33,7 +33,7 @@ use vfs::AbsPathBuf;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n-    config::RustfmtConfig,\n+    config::{RustfmtConfig, WorkspaceSymbolConfig},\n     diff::diff,\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n@@ -403,7 +403,9 @@ pub(crate) fn handle_workspace_symbol(\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let _p = profile::span(\"handle_workspace_symbol\");\n \n-    let (all_symbols, libs) = decide_search_scope_and_kind(&params, &snap);\n+    let config = snap.config.workspace_symbol();\n+    let (all_symbols, libs) = decide_search_scope_and_kind(&params, &config);\n+    let limit = config.search_limit;\n \n     let query = {\n         let query: String = params.query.chars().filter(|&c| c != '#' && c != '*').collect();\n@@ -414,28 +416,26 @@ pub(crate) fn handle_workspace_symbol(\n         if libs {\n             q.libs();\n         }\n-        q.limit(128);\n+        q.limit(limit);\n         q\n     };\n     let mut res = exec_query(&snap, query)?;\n     if res.is_empty() && !all_symbols {\n         let mut query = Query::new(params.query);\n-        query.limit(128);\n+        query.limit(limit);\n         res = exec_query(&snap, query)?;\n     }\n \n     return Ok(Some(res));\n \n     fn decide_search_scope_and_kind(\n         params: &WorkspaceSymbolParams,\n-        snap: &GlobalStateSnapshot,\n+        config: &WorkspaceSymbolConfig,\n     ) -> (bool, bool) {\n         // Support old-style parsing of markers in the query.\n         let mut all_symbols = params.query.contains('#');\n         let mut libs = params.query.contains('*');\n \n-        let config = snap.config.workspace_symbol();\n-\n         // If no explicit marker was set, check request params. If that's also empty\n         // use global config.\n         if !all_symbols {"}, {"sha": "d552982768b59513d87801bfd7f9f2b25bbcbc31", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc0825d1358abece6e85b928ea3a197451d083c7/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/bc0825d1358abece6e85b928ea3a197451d083c7/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=bc0825d1358abece6e85b928ea3a197451d083c7", "patch": "@@ -558,3 +558,10 @@ Workspace symbol search scope.\n --\n Workspace symbol search kind.\n --\n+[[rust-analyzer.workspace.symbol.search.limit]]rust-analyzer.workspace.symbol.search.limit (default: `128`)::\n++\n+--\n+Limits the number of items returned from a workspace symbol search (Defaults to 128).\n+Some clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\n+Other clients requires all results upfront and might require a higher limit.\n+--"}, {"sha": "b7bc60a3b8b97994a5ca4263d283d3961830b5f6", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc0825d1358abece6e85b928ea3a197451d083c7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/bc0825d1358abece6e85b928ea3a197451d083c7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=bc0825d1358abece6e85b928ea3a197451d083c7", "patch": "@@ -1014,6 +1014,12 @@\n                         \"Search for all symbols kinds\"\n                     ]\n                 },\n+                \"rust-analyzer.workspace.symbol.search.limit\": {\n+                    \"markdownDescription\": \"Limits the number of items returned from a workspace symbol search (Defaults to 128).\\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\\nOther clients requires all results upfront and might require a higher limit.\",\n+                    \"default\": 128,\n+                    \"type\": \"integer\",\n+                    \"minimum\": 0\n+                },\n                 \"$generated-end\": {}\n             }\n         },"}]}