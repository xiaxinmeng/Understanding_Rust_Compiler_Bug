{"sha": "73bef854ab854ab1a289944966444453e6f4aadf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYmVmODU0YWI4NTRhYjFhMjg5OTQ0OTY2NDQ0NDUzZTZmNGFhZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-29T08:38:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-29T08:38:51Z"}, "message": "Move shared assist code to utils", "tree": {"sha": "bc136f0d2f5b733ffc54714e4096f35863bfa3f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc136f0d2f5b733ffc54714e4096f35863bfa3f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73bef854ab854ab1a289944966444453e6f4aadf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73bef854ab854ab1a289944966444453e6f4aadf", "html_url": "https://github.com/rust-lang/rust/commit/73bef854ab854ab1a289944966444453e6f4aadf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73bef854ab854ab1a289944966444453e6f4aadf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "549ce9a9cf25efa3eba6549f96b2e43bc640faa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/549ce9a9cf25efa3eba6549f96b2e43bc640faa9", "html_url": "https://github.com/rust-lang/rust/commit/549ce9a9cf25efa3eba6549f96b2e43bc640faa9"}], "stats": {"total": 83, "additions": 35, "deletions": 48}, "files": [{"sha": "fb134f677f23569e51cd8091731e2cf1eff3333a", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73bef854ab854ab1a289944966444453e6f4aadf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73bef854ab854ab1a289944966444453e6f4aadf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=73bef854ab854ab1a289944966444453e6f4aadf", "patch": "@@ -1,6 +1,5 @@\n use std::iter::once;\n \n-use hir::Adt;\n use ra_syntax::{\n     ast::{\n         self,\n@@ -12,6 +11,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n+    utils::happy_try_variant,\n     AssistId,\n };\n \n@@ -45,20 +45,10 @@ pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n     let init = let_stmt.initializer()?;\n     let original_pat = let_stmt.pat()?;\n     let ty = ctx.sema.type_of_expr(&init)?;\n-    let enum_ = match ty.as_adt() {\n-        Some(Adt::Enum(it)) => it,\n-        _ => return None,\n-    };\n-    let happy_case =\n-        [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter().find_map(|(known_type, happy_case)| {\n-            if &enum_.name(ctx.db).to_string() == known_type {\n-                return Some(happy_case);\n-            }\n-            None\n-        });\n+    let happy_variant = happy_try_variant(ctx.sema, &ty);\n \n     ctx.add_assist(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", |edit| {\n-        let with_placeholder: ast::Pat = match happy_case {\n+        let with_placeholder: ast::Pat = match happy_variant {\n             None => make::placeholder_pat().into(),\n             Some(var_name) => make::tuple_struct_pat(\n                 make::path_unqualified(make::path_segment(make::name_ref(var_name))),"}, {"sha": "89211b44a32160ec43bbff03e835a1e3fd5a4267", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/73bef854ab854ab1a289944966444453e6f4aadf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73bef854ab854ab1a289944966444453e6f4aadf/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=73bef854ab854ab1a289944966444453e6f4aadf", "patch": "@@ -1,12 +1,11 @@\n use std::iter;\n \n use ra_syntax::{\n-    ast::{self, make},\n+    ast::{self, edit::IndentLevel, make},\n     AstNode,\n };\n \n-use crate::{Assist, AssistCtx, AssistId};\n-use ast::edit::IndentLevel;\n+use crate::{utils::happy_try_variant, Assist, AssistCtx, AssistId};\n \n // Assist: replace_unwrap_with_match\n //\n@@ -38,42 +37,27 @@ pub(crate) fn replace_unwrap_with_match(ctx: AssistCtx) -> Option<Assist> {\n     }\n     let caller = method_call.expr()?;\n     let ty = ctx.sema.type_of_expr(&caller)?;\n+    let happy_variant = happy_try_variant(ctx.sema, &ty)?;\n \n-    let type_name = ty.as_adt()?.name(ctx.sema.db).to_string();\n+    ctx.add_assist(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", |edit| {\n+        let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n+        let it = make::bind_pat(make::name(\"a\")).into();\n+        let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n-    for (unwrap_type, variant_name) in [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter() {\n-        if &type_name == unwrap_type {\n-            return ctx.add_assist(\n-                AssistId(\"replace_unwrap_with_match\"),\n-                \"Replace unwrap with match\",\n-                |edit| {\n-                    let ok_path =\n-                        make::path_unqualified(make::path_segment(make::name_ref(variant_name)));\n-                    let it = make::bind_pat(make::name(\"a\")).into();\n-                    let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n+        let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n+        let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n-                    let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n-                    let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n+        let unreachable_call = make::unreachable_macro_call().into();\n+        let err_arm = make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n \n-                    let unreachable_call = make::unreachable_macro_call().into();\n-                    let err_arm = make::match_arm(\n-                        iter::once(make::placeholder_pat().into()),\n-                        unreachable_call,\n-                    );\n+        let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n+        let match_expr = make::expr_match(caller.clone(), match_arm_list);\n+        let match_expr = IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n \n-                    let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n-                    let match_expr = make::expr_match(caller.clone(), match_arm_list);\n-                    let match_expr =\n-                        IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n-\n-                    edit.target(method_call.syntax().text_range());\n-                    edit.set_cursor(caller.syntax().text_range().start());\n-                    edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n-                },\n-            );\n-        }\n-    }\n-    None\n+        edit.target(method_call.syntax().text_range());\n+        edit.set_cursor(caller.syntax().text_range().start());\n+        edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "316c8b20fb13dcb7c3cc6e8e8f05a07bf95f84d9", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73bef854ab854ab1a289944966444453e6f4aadf/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73bef854ab854ab1a289944966444453e6f4aadf/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=73bef854ab854ab1a289944966444453e6f4aadf", "patch": "@@ -1,7 +1,7 @@\n //! Assorted functions shared by several assists.\n pub(crate) mod insert_use;\n \n-use hir::Semantics;\n+use hir::{Adt, Semantics, Type};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, make, NameOwner},\n@@ -99,3 +99,16 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n         _ => None,\n     }\n }\n+\n+pub(crate) fn happy_try_variant(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<&'static str> {\n+    let enum_ = match ty.as_adt() {\n+        Some(Adt::Enum(it)) => it,\n+        _ => return None,\n+    };\n+    [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter().find_map(|(known_type, happy_case)| {\n+        if &enum_.name(sema.db).to_string() == known_type {\n+            return Some(*happy_case);\n+        }\n+        None\n+    })\n+}"}]}