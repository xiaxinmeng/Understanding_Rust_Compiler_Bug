{"sha": "bef62ccddb911b9cd7677717a69348a62cf61f96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZjYyY2NkZGI5MTFiOWNkNzY3NzcxN2E2OTM0OGE2MmNmNjFmOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-16T20:30:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-16T20:30:43Z"}, "message": "Auto merge of #54486 - orium:obligation-forest-graphviz, r=nikomatsakis\n\nAdded graphviz visualization for obligation forests.\n\nThis can be a big help when debugging the trait resolver.", "tree": {"sha": "b4c440f4cddf2e51c745242084507bafc9f5012c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4c440f4cddf2e51c745242084507bafc9f5012c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef62ccddb911b9cd7677717a69348a62cf61f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef62ccddb911b9cd7677717a69348a62cf61f96", "html_url": "https://github.com/rust-lang/rust/commit/bef62ccddb911b9cd7677717a69348a62cf61f96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef62ccddb911b9cd7677717a69348a62cf61f96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "html_url": "https://github.com/rust-lang/rust/commit/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8"}, {"sha": "3fc275df6c6729a0e5bf1f1e2ed662cf6a387a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc275df6c6729a0e5bf1f1e2ed662cf6a387a4f", "html_url": "https://github.com/rust-lang/rust/commit/3fc275df6c6729a0e5bf1f1e2ed662cf6a387a4f"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "d519522a1b0d2fb88ef174fa70eb84f352d0fdeb", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=bef62ccddb911b9cd7677717a69348a62cf61f96", "patch": "@@ -2161,6 +2161,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"graphviz 0.0.0\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "10820007629ff09a892272cd286facaed32e638d", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=bef62ccddb911b9cd7677717a69348a62cf61f96", "patch": "@@ -13,6 +13,7 @@ ena = \"0.9.3\"\n log = \"0.4\"\n rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n serialize = { path = \"../libserialize\" }\n+graphviz = { path = \"../libgraphviz\" }\n cfg-if = \"0.1.2\"\n stable_deref_trait = \"1.0.0\"\n parking_lot_core = \"0.2.8\""}, {"sha": "5b01892dcb37ef7e7b41b2b187e0c0f35a33aecc", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=bef62ccddb911b9cd7677717a69348a62cf61f96", "patch": "@@ -49,6 +49,7 @@ extern crate rustc_rayon as rayon;\n extern crate rustc_rayon_core as rayon_core;\n extern crate rustc_hash;\n extern crate serialize;\n+extern crate graphviz;\n extern crate smallvec;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this."}, {"sha": "dcd448ee44f516b717a40b7b2254771983ae31af", "filename": "src/librustc_data_structures/obligation_forest/graphviz.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs?ref=bef62ccddb911b9cd7677717a69348a62cf61f96", "patch": "@@ -0,0 +1,101 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use graphviz as dot;\n+use obligation_forest::{ForestObligation, ObligationForest};\n+use std::env::var_os;\n+use std::fs::File;\n+use std::path::Path;\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::atomic::Ordering;\n+\n+impl<O: ForestObligation> ObligationForest<O> {\n+    /// Create a graphviz representation of the obligation forest.  Given a directory this will\n+    /// create files with name of the format `<counter>_<description>.gv`.  The counter is\n+    /// global and is maintained internally.\n+    ///\n+    /// Calling this will do nothing unless the environment variable\n+    /// `DUMP_OBLIGATION_FOREST_GRAPHVIZ` is defined.\n+    ///\n+    /// A few post-processing that you might want to do make the forest easier to visualize:\n+    ///\n+    ///  * `sed 's,std::[a-z]*::,,g'` \u2014 Deletes the `std::<package>::` prefix of paths.\n+    ///  * `sed 's,\"Binder(TraitPredicate(<\\(.*\\)>)) (\\([^)]*\\))\",\"\\1 (\\2)\",'` \u2014 Transforms\n+    ///    `Binder(TraitPredicate(<predicate>))` into just `<predicate>`.\n+    #[allow(dead_code)]\n+    pub fn dump_graphviz<P: AsRef<Path>>(&self, dir: P, description: &str) {\n+        static COUNTER: AtomicUsize = AtomicUsize::new(0);\n+\n+        if var_os(\"DUMP_OBLIGATION_FOREST_GRAPHVIZ\").is_none() {\n+            return;\n+        }\n+\n+        let counter = COUNTER.fetch_add(1, Ordering::AcqRel);\n+\n+        let file_path = dir.as_ref().join(format!(\"{:010}_{}.gv\", counter, description));\n+\n+        let mut gv_file = File::create(file_path).unwrap();\n+\n+        dot::render(&self, &mut gv_file).unwrap();\n+    }\n+}\n+\n+impl<'a, O: ForestObligation + 'a> dot::Labeller<'a> for &'a ObligationForest<O> {\n+    type Node = usize;\n+    type Edge = (usize, usize);\n+\n+    fn graph_id(&self) -> dot::Id {\n+        dot::Id::new(\"trait_obligation_forest\").unwrap()\n+    }\n+\n+    fn node_id(&self, index: &Self::Node) -> dot::Id {\n+        dot::Id::new(format!(\"obligation_{}\", index)).unwrap()\n+    }\n+\n+    fn node_label(&self, index: &Self::Node) -> dot::LabelText {\n+        let node = &self.nodes[*index];\n+        let label = format!(\"{:?} ({:?})\", node.obligation.as_predicate(), node.state.get());\n+\n+        dot::LabelText::LabelStr(label.into())\n+    }\n+\n+    fn edge_label(&self, (_index_source, _index_target): &Self::Edge) -> dot::LabelText {\n+        dot::LabelText::LabelStr(\"\".into())\n+    }\n+}\n+\n+impl<'a, O: ForestObligation + 'a> dot::GraphWalk<'a> for &'a ObligationForest<O> {\n+    type Node = usize;\n+    type Edge = (usize, usize);\n+\n+    fn nodes(&self) -> dot::Nodes<Self::Node> {\n+        (0..self.nodes.len()).collect()\n+    }\n+\n+    fn edges(&self) -> dot::Edges<Self::Edge> {\n+        (0..self.nodes.len())\n+            .flat_map(|i| {\n+                let node = &self.nodes[i];\n+\n+                node.parent.iter().map(|p| p.get())\n+                    .chain(node.dependents.iter().map(|p| p.get()))\n+                    .map(move |p| (p, i))\n+            })\n+            .collect()\n+    }\n+\n+    fn source(&self, (s, _): &Self::Edge) -> Self::Node {\n+        *s\n+    }\n+\n+    fn target(&self, (_, t): &Self::Edge) -> Self::Node {\n+        *t\n+    }\n+}"}, {"sha": "92cc398db50113488f47a0355da92012b2f43378", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef62ccddb911b9cd7677717a69348a62cf61f96/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=bef62ccddb911b9cd7677717a69348a62cf61f96", "patch": "@@ -26,6 +26,8 @@ use std::marker::PhantomData;\n mod node_index;\n use self::node_index::NodeIndex;\n \n+mod graphviz;\n+\n #[cfg(test)]\n mod test;\n "}]}