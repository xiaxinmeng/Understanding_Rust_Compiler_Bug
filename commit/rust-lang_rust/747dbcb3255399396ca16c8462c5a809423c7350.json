{"sha": "747dbcb3255399396ca16c8462c5a809423c7350", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0N2RiY2IzMjU1Mzk5Mzk2Y2ExNmM4NDYyYzVhODA5NDIzYzczNTA=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-09T19:32:55Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-01-09T19:32:55Z"}, "message": "Provide reasoning for rc data_offset safety", "tree": {"sha": "d58ea4133e181a2439a4f362164e3fe1da8c83e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58ea4133e181a2439a4f362164e3fe1da8c83e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/747dbcb3255399396ca16c8462c5a809423c7350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/747dbcb3255399396ca16c8462c5a809423c7350", "html_url": "https://github.com/rust-lang/rust/commit/747dbcb3255399396ca16c8462c5a809423c7350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/747dbcb3255399396ca16c8462c5a809423c7350/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4901c55af7ec98231653cd0c3a0b1a6937eac743", "url": "https://api.github.com/repos/rust-lang/rust/commits/4901c55af7ec98231653cd0c3a0b1a6937eac743", "html_url": "https://github.com/rust-lang/rust/commit/4901c55af7ec98231653cd0c3a0b1a6937eac743"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "b9f3f357c1a51a967ae68e3c08d7858b4097c1d6", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/747dbcb3255399396ca16c8462c5a809423c7350/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dbcb3255399396ca16c8462c5a809423c7350/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=747dbcb3255399396ca16c8462c5a809423c7350", "patch": "@@ -2314,10 +2314,12 @@ impl<T: ?Sized> Unpin for Rc<T> {}\n /// The pointer must point to (and have valid metadata for) a previously\n /// valid instance of T, but the T is allowed to be dropped.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n-    // Align the unsized value to the end of the `RcBox`.\n-    // Because it is ?Sized, it will always be the last field in memory.\n-    // Note: This is a detail of the current implementation of the compiler,\n-    // and is not a guaranteed language detail. Do not rely on it outside of std.\n+    // Align the unsized value to the end of the RcBox.\n+    // Because RcBox is repr(C), it will always be the last field in memory.\n+    // SAFETY: since the only unsized types possible are slices, trait objects,\n+    // and extern types, the input safety requirement is currently enough to\n+    // satisfy the requirements of align_of_val_raw; this is an implementation\n+    // detail of the language that may not be relied upon outside of std.\n     unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n "}, {"sha": "c50f5270a4d1036b5dba3cad4bb976c159b4f447", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/747dbcb3255399396ca16c8462c5a809423c7350/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dbcb3255399396ca16c8462c5a809423c7350/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=747dbcb3255399396ca16c8462c5a809423c7350", "patch": "@@ -2464,10 +2464,12 @@ impl<T: ?Sized> Unpin for Arc<T> {}\n /// The pointer must point to (and have valid metadata for) a previously\n /// valid instance of T, but the T is allowed to be dropped.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n-    // Align the unsized value to the end of the `ArcInner`.\n-    // Because it is `?Sized`, it will always be the last field in memory.\n-    // Note: This is a detail of the current implementation of the compiler,\n-    // and is not a guaranteed language detail. Do not rely on it outside of std.\n+    // Align the unsized value to the end of the ArcInner.\n+    // Because RcBox is repr(C), it will always be the last field in memory.\n+    // SAFETY: since the only unsized types possible are slices, trait objects,\n+    // and extern types, the input safety requirement is currently enough to\n+    // satisfy the requirements of align_of_val_raw; this is an implementation\n+    // detail of the language that may not be relied upon outside of std.\n     unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n "}]}