{"sha": "d53b0a04a6a0f5048b37da2c14ac0cdabae5d348", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1M2IwYTA0YTZhMGY1MDQ4YjM3ZGEyYzE0YWMwY2RhYmFlNWQzNDg=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu.dantras@huawei.com", "date": "2021-01-20T17:08:47Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-01-27T22:47:56Z"}, "message": "Fix ARM and AArch64 calling convention for passing small composite types\n\nOn big-endian the values need to be right-aligned within a 64-bit register, as if the value had been read with a 64-bit load instruction.", "tree": {"sha": "163d77e511f0b7ea5c4ca8e9bbafb032fead6cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/163d77e511f0b7ea5c4ca8e9bbafb032fead6cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348", "html_url": "https://github.com/rust-lang/rust/commit/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348/comments", "author": null, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8afe59893a7b3586b29b0bb697eba69e1a2b5593", "url": "https://api.github.com/repos/rust-lang/rust/commits/8afe59893a7b3586b29b0bb697eba69e1a2b5593", "html_url": "https://github.com/rust-lang/rust/commit/8afe59893a7b3586b29b0bb697eba69e1a2b5593"}], "stats": {"total": 33, "additions": 3, "deletions": 30}, "files": [{"sha": "a5e985d4712711c57d3e14217fcd7752a43c1338", "filename": "compiler/rustc_target/src/abi/call/aarch64.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs?ref=d53b0a04a6a0f5048b37da2c14ac0cdabae5d348", "patch": "@@ -40,17 +40,7 @@ where\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else if bits <= 32 {\n-            Reg::i32()\n-        } else {\n-            Reg::i64()\n-        };\n-\n-        ret.cast_to(Uniform { unit, total: size });\n+        ret.cast_to(Uniform { unit: Reg::i64(), total: size });\n         return;\n     }\n     ret.make_indirect();\n@@ -72,17 +62,7 @@ where\n     let size = arg.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else if bits <= 32 {\n-            Reg::i32()\n-        } else {\n-            Reg::i64()\n-        };\n-\n-        arg.cast_to(Uniform { unit, total: size });\n+        arg.cast_to(Uniform { unit: Reg::i64(), total: size });\n         return;\n     }\n     arg.make_indirect();"}, {"sha": "b560e11fe1c5e0ecb9ef8810377eb0ac61550c1f", "filename": "compiler/rustc_target/src/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53b0a04a6a0f5048b37da2c14ac0cdabae5d348/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs?ref=d53b0a04a6a0f5048b37da2c14ac0cdabae5d348", "patch": "@@ -45,14 +45,7 @@ where\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 32 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else {\n-            Reg::i32()\n-        };\n-        ret.cast_to(Uniform { unit, total: size });\n+        ret.cast_to(Uniform { unit: Reg::i32(), total: size });\n         return;\n     }\n     ret.make_indirect();"}]}