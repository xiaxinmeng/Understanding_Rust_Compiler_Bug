{"sha": "d885e4ce9d21c3283a46803a01c5a23d8d10f556", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODVlNGNlOWQyMWMzMjgzYTQ2ODAzYTAxYzVhMjNkOGQxMGY1NTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-15T10:17:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T13:43:47Z"}, "message": "add `visit_all_bodies_in_krate` helper", "tree": {"sha": "257b2cffdb82be76b60cb7b9d1835c903e027b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/257b2cffdb82be76b60cb7b9d1835c903e027b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d885e4ce9d21c3283a46803a01c5a23d8d10f556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d885e4ce9d21c3283a46803a01c5a23d8d10f556", "html_url": "https://github.com/rust-lang/rust/commit/d885e4ce9d21c3283a46803a01c5a23d8d10f556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d885e4ce9d21c3283a46803a01c5a23d8d10f556/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2", "html_url": "https://github.com/rust-lang/rust/commit/b3a482ca9b1622a2fd04d8338ac99f5df802b9e2"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "7331756f35b8e95da63c8e6667f02de9a7b0caf1", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d885e4ce9d21c3283a46803a01c5a23d8d10f556/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d885e4ce9d21c3283a46803a01c5a23d8d10f556/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=d885e4ce9d21c3283a46803a01c5a23d8d10f556", "patch": "@@ -25,5 +25,6 @@ pub use self::dep_node::WorkProductId;\n pub use self::graph::DepGraph;\n pub use self::graph::WorkProduct;\n pub use self::query::DepGraphQuery;\n+pub use self::visit::visit_all_bodies_in_krate;\n pub use self::visit::visit_all_item_likes_in_krate;\n pub use self::raii::DepTask;"}, {"sha": "f807437750d0119c70880ce090c0d92c36102c08", "filename": "src/librustc/dep_graph/visit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d885e4ce9d21c3283a46803a01c5a23d8d10f556/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d885e4ce9d21c3283a46803a01c5a23d8d10f556/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=d885e4ce9d21c3283a46803a01c5a23d8d10f556", "patch": "@@ -74,3 +74,13 @@ pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     };\n     krate.visit_all_item_likes(&mut tracking_visitor)\n }\n+\n+pub fn visit_all_bodies_in_krate<'a, 'tcx, C>(tcx: TyCtxt<'a, 'tcx, 'tcx>, callback: C)\n+    where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n+{\n+    let krate = tcx.hir.krate();\n+    for body_id in krate.bodies.keys().cloned() {\n+        let body_owner_def_id = tcx.hir.body_owner_def_id(body_id);\n+        callback(body_owner_def_id, body_id);\n+    }\n+}"}, {"sha": "328d5c234e17efb115a98d6e7c72a78c81e8358a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d885e4ce9d21c3283a46803a01c5a23d8d10f556/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d885e4ce9d21c3283a46803a01c5a23d8d10f556/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d885e4ce9d21c3283a46803a01c5a23d8d10f556", "patch": "@@ -2613,6 +2613,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         dep_graph::visit_all_item_likes_in_krate(self.global_tcx(), dep_node_fn, visitor);\n     }\n \n+    /// Invokes `callback` for each body in the krate. This will\n+    /// create a read edge from `DepNode::Krate` to the current task;\n+    /// it is meant to be run in the context of some global task like\n+    /// `BorrowckCrate`. The callback would then create a task like\n+    /// `BorrowckBody(DefId)` to process each individual item.\n+    pub fn visit_all_bodies_in_krate<C>(self, callback: C)\n+        where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n+    {\n+        dep_graph::visit_all_bodies_in_krate(self.global_tcx(), callback)\n+    }\n+\n     /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\n     /// with the name of the crate containing the impl.\n     pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {"}]}