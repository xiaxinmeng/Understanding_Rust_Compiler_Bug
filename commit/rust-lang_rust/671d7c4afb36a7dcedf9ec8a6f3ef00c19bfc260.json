{"sha": "671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MWQ3YzRhZmIzNmE3ZGNlZGY5ZWM4YTZmM2VmMDBjMTliZmMyNjA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-22T02:43:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-23T15:06:13Z"}, "message": "Account for possible boxable `impl Future` in semicolon removal suggestions", "tree": {"sha": "09e30ca245dd37c3a4c0977935e0441da485910c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e30ca245dd37c3a4c0977935e0441da485910c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "html_url": "https://github.com/rust-lang/rust/commit/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4ee3ca1e4f1177516139a4704456958c7d08c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ee3ca1e4f1177516139a4704456958c7d08c91", "html_url": "https://github.com/rust-lang/rust/commit/a4ee3ca1e4f1177516139a4704456958c7d08c91"}], "stats": {"total": 184, "additions": 152, "deletions": 32}, "files": [{"sha": "f6aa3c3d5ba6b979e7cc891ee14ae3b00a2c2b53", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "patch": "@@ -688,13 +688,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     };\n                     let msg = \"`match` arms have incompatible types\";\n                     err.span_label(outer_error_span, msg);\n-                    if let Some(sp) = semi_span {\n-                        err.span_suggestion_short(\n-                            sp,\n-                            \"consider removing this semicolon\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n+                    if let Some((sp, boxed)) = semi_span {\n+                        if boxed {\n+                            err.span_suggestion_verbose(\n+                                sp,\n+                                \"consider removing this semicolon and boxing the expression\",\n+                                String::new(),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        } else {\n+                            err.span_suggestion_short(\n+                                sp,\n+                                \"consider removing this semicolon\",\n+                                String::new(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                     }\n                     if let Some(ret_sp) = opt_suggest_box_span {\n                         // Get return type span and point to it.\n@@ -717,13 +726,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if let Some(sp) = outer {\n                     err.span_label(sp, \"`if` and `else` have incompatible types\");\n                 }\n-                if let Some(sp) = semicolon {\n-                    err.span_suggestion_short(\n-                        sp,\n-                        \"consider removing this semicolon\",\n-                        String::new(),\n-                        Applicability::MachineApplicable,\n-                    );\n+                if let Some((sp, boxed)) = semicolon {\n+                    if boxed {\n+                        err.span_suggestion_verbose(\n+                            sp,\n+                            \"consider removing this semicolon and boxing the expression\",\n+                            String::new(),\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    } else {\n+                        err.span_suggestion_short(\n+                            sp,\n+                            \"consider removing this semicolon\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 }\n                 if let Some(ret_sp) = opt_suggest_box_span {\n                     self.suggest_boxing_for_return_impl_trait("}, {"sha": "daa3010abb5447f28fe1603b4f7d004d9e8b3ea5", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "patch": "@@ -344,7 +344,7 @@ static_assert_size!(ObligationCauseCode<'_>, 32);\n pub struct MatchExpressionArmCause<'tcx> {\n     pub arm_span: Span,\n     pub scrut_span: Span,\n-    pub semi_span: Option<Span>,\n+    pub semi_span: Option<(Span, bool)>,\n     pub source: hir::MatchSource,\n     pub prior_arms: Vec<Span>,\n     pub last_ty: Ty<'tcx>,\n@@ -357,7 +357,7 @@ pub struct IfExpressionCause {\n     pub then: Span,\n     pub else_sp: Span,\n     pub outer: Option<Span>,\n-    pub semicolon: Option<Span>,\n+    pub semicolon: Option<(Span, bool)>,\n     pub opt_suggest_box_span: Option<Span>,\n }\n "}, {"sha": "27c85317e82f9b08a43aeed4af0ed63e2bafc78e", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "patch": "@@ -521,7 +521,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         block: &'tcx hir::Block<'tcx>,\n         expected_ty: Option<Ty<'tcx>>,\n-    ) -> (Span, Option<Span>) {\n+    ) -> (Span, Option<(Span, bool)>) {\n         if let Some(expr) = &block.expr {\n             (expr.span, None)\n         } else if let Some(stmt) = block.stmts.last() {"}, {"sha": "f26a168bcb288c6f0b08461a5aa16204e6998162", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "patch": "@@ -1061,7 +1061,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         blk: &'tcx hir::Block<'tcx>,\n         expected_ty: Ty<'tcx>,\n-    ) -> Option<Span> {\n+    ) -> Option<(Span, bool)> {\n         // Be helpful when the user wrote `{... expr;}` and\n         // taking the `;` off is enough to fix the error.\n         let last_stmt = blk.stmts.last()?;\n@@ -1070,13 +1070,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => return None,\n         };\n         let last_expr_ty = self.node_ty(last_expr.hir_id);\n-        if matches!(last_expr_ty.kind(), ty::Error(_))\n-            || self.can_sub(self.param_env, last_expr_ty, expected_ty).is_err()\n+        let needs_box = match (last_expr_ty.kind(), expected_ty.kind()) {\n+            (ty::Opaque(last_def_id, last_bounds), ty::Opaque(exp_def_id, exp_bounds)) => {\n+                debug!(\n+                    \"both opaque, likely future {:?} {:?} {:?} {:?}\",\n+                    last_def_id, last_bounds, exp_def_id, exp_bounds\n+                );\n+                let last_hir_id = self.tcx.hir().local_def_id_to_hir_id(last_def_id.expect_local());\n+                let exp_hir_id = self.tcx.hir().local_def_id_to_hir_id(exp_def_id.expect_local());\n+                if let (\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: last_bounds, .. }),\n+                    hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: exp_bounds, .. }),\n+                ) = (\n+                    &self.tcx.hir().expect_item(last_hir_id).kind,\n+                    &self.tcx.hir().expect_item(exp_hir_id).kind,\n+                ) {\n+                    debug!(\"{:?} {:?}\", last_bounds, exp_bounds);\n+                    last_bounds.iter().zip(exp_bounds.iter()).all(|(left, right)| {\n+                        match (left, right) {\n+                            (\n+                                hir::GenericBound::Trait(tl, ml),\n+                                hir::GenericBound::Trait(tr, mr),\n+                            ) => {\n+                                tl.trait_ref.trait_def_id() == tr.trait_ref.trait_def_id()\n+                                    && ml == mr\n+                            }\n+                            (\n+                                hir::GenericBound::LangItemTrait(langl, _, _, argsl),\n+                                hir::GenericBound::LangItemTrait(langr, _, _, argsr),\n+                            ) => {\n+                                // FIXME: consider the bounds!\n+                                debug!(\"{:?} {:?}\", argsl, argsr);\n+                                langl == langr\n+                            }\n+                            _ => false,\n+                        }\n+                    })\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        };\n+        debug!(\n+            \"needs_box {:?} {:?} {:?}\",\n+            needs_box,\n+            last_expr_ty.kind(),\n+            self.can_sub(self.param_env, last_expr_ty, expected_ty)\n+        );\n+        if (matches!(last_expr_ty.kind(), ty::Error(_))\n+            || self.can_sub(self.param_env, last_expr_ty, expected_ty).is_err())\n+            && !needs_box\n         {\n             return None;\n         }\n         let original_span = original_sp(last_stmt.span, blk.span);\n-        Some(original_span.with_lo(original_span.hi() - BytePos(1)))\n+        Some((original_span.with_lo(original_span.hi() - BytePos(1)), needs_box))\n     }\n \n     // Instantiates the given path, which must refer to an item with the given"}, {"sha": "a124ad16612b1ee16fae87a6453afe855cfcb4e4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "patch": "@@ -758,13 +758,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty: Ty<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n-        if let Some(span_semi) = self.could_remove_semicolon(blk, expected_ty) {\n-            err.span_suggestion(\n-                span_semi,\n-                \"consider removing this semicolon\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n+        if let Some((span_semi, boxed)) = self.could_remove_semicolon(blk, expected_ty) {\n+            if boxed {\n+                err.span_suggestion_verbose(\n+                    span_semi,\n+                    \"consider removing this semicolon and boxing the expression\",\n+                    String::new(),\n+                    Applicability::HasPlaceholders,\n+                );\n+            } else {\n+                err.span_suggestion_short(\n+                    span_semi,\n+                    \"consider removing this semicolon\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n     }\n "}, {"sha": "9704242e105419cc1f9eb9e207f5bbd791ea6da4", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "patch": "@@ -14,6 +14,7 @@ fn extra_semicolon() {\n }\n \n async fn async_dummy() {} //~ NOTE the `Output` of this `async fn`'s found opaque type\n+async fn async_dummy2() {} //~ NOTE the `Output` of this `async fn`'s found opaque type\n \n async fn async_extra_semicolon_same() {\n     let _ = match true { //~ NOTE `match` arms have incompatible types\n@@ -28,5 +29,17 @@ async fn async_extra_semicolon_same() {\n     };\n }\n \n-fn main() {}\n+async fn async_extra_semicolon_different() {\n+    let _ = match true { //~ NOTE `match` arms have incompatible types\n+        true => {\n+            async_dummy(); //~ NOTE this is found to be\n+            //~^ HELP consider removing this semicolon\n+        }\n+        false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n+        //~^ NOTE expected `()`, found opaque type\n+        //~| NOTE expected type `()`\n+        //~| HELP consider `await`ing on the `Future`\n+    };\n+}\n \n+fn main() {}"}, {"sha": "00b02fbc0072f57c4991931d97c41f01a4d08a8c", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=671d7c4afb36a7dcedf9ec8a6f3ef00c19bfc260", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:24:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:25:18\n    |\n LL |   async fn async_dummy() {}\n    |                          - the `Output` of this `async fn`'s found opaque type\n@@ -20,7 +20,7 @@ LL | |     };\n    |\n    = note:     expected type `()`\n            found opaque type `impl Future`\n-help: consider removing this semicolon\n+help: consider removing this semicolon and boxing the expression\n    |\n LL |             async_dummy()\n    |                         --\n@@ -29,6 +29,37 @@ help: consider `await`ing on the `Future`\n LL |         false => async_dummy().await,\n    |                               ^^^^^^\n \n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/match-prev-arm-needing-semi.rs:38:18\n+   |\n+LL |   async fn async_dummy2() {}\n+   |                           - the `Output` of this `async fn`'s found opaque type\n+...\n+LL |       let _ = match true {\n+   |  _____________-\n+LL | |         true => {\n+LL | |             async_dummy();\n+   | |             -------------- this is found to be of type `()`\n+LL | |\n+LL | |         }\n+LL | |         false => async_dummy2(),\n+   | |                  ^^^^^^^^^^^^^^ expected `()`, found opaque type\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note:     expected type `()`\n+           found opaque type `impl Future`\n+help: consider removing this semicolon and boxing the expression\n+   |\n+LL |             async_dummy()\n+   |                         --\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         false => async_dummy2().await,\n+   |                                ^^^^^^\n+\n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-prev-arm-needing-semi.rs:11:18\n    |\n@@ -48,6 +79,6 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}