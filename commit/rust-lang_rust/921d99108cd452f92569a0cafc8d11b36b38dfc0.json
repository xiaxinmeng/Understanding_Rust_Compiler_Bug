{"sha": "921d99108cd452f92569a0cafc8d11b36b38dfc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMWQ5OTEwOGNkNDUyZjkyNTY5YTBjYWZjOGQxMWIzNmIzOGRmYzA=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-07-19T23:02:38Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-07-22T20:19:04Z"}, "message": "std: add RtioTimer and UvTimer impl atop rt::uv", "tree": {"sha": "6ccfda26e363c9c74dcf50fc201ef4a8061a8848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ccfda26e363c9c74dcf50fc201ef4a8061a8848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921d99108cd452f92569a0cafc8d11b36b38dfc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921d99108cd452f92569a0cafc8d11b36b38dfc0", "html_url": "https://github.com/rust-lang/rust/commit/921d99108cd452f92569a0cafc8d11b36b38dfc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921d99108cd452f92569a0cafc8d11b36b38dfc0/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f115e1681cdd5fa0d76400a3d23f7513286491", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f115e1681cdd5fa0d76400a3d23f7513286491", "html_url": "https://github.com/rust-lang/rust/commit/48f115e1681cdd5fa0d76400a3d23f7513286491"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "aa8b9dc3a944d67342b88847b6f402c135f21bc2", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/921d99108cd452f92569a0cafc8d11b36b38dfc0/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921d99108cd452f92569a0cafc8d11b36b38dfc0/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=921d99108cd452f92569a0cafc8d11b36b38dfc0", "patch": "@@ -23,6 +23,7 @@ pub type IoFactoryObject = uvio::UvIoFactory;\n pub type RtioTcpStreamObject = uvio::UvTcpStream;\n pub type RtioTcpListenerObject = uvio::UvTcpListener;\n pub type RtioUdpSocketObject = uvio::UvUdpSocket;\n+pub type RtioTimerObject = uvio::UvTimer;\n \n pub trait EventLoop {\n     fn run(&mut self);\n@@ -46,6 +47,7 @@ pub trait IoFactory {\n     fn tcp_connect(&mut self, addr: IpAddr) -> Result<~RtioTcpStreamObject, IoError>;\n     fn tcp_bind(&mut self, addr: IpAddr) -> Result<~RtioTcpListenerObject, IoError>;\n     fn udp_bind(&mut self, addr: IpAddr) -> Result<~RtioUdpSocketObject, IoError>;\n+    fn timer_init(&mut self) -> Result<~RtioTimerObject, IoError>;\n }\n \n pub trait RtioTcpListener : RtioSocket {\n@@ -84,3 +86,7 @@ pub trait RtioUdpSocket : RtioSocket {\n     fn hear_broadcasts(&mut self);\n     fn ignore_broadcasts(&mut self);\n }\n+\n+pub trait RtioTimer {\n+    fn sleep(&self, msecs: u64);\n+}"}, {"sha": "4ecfa46328422c4976363b1043d36ebcd74290df", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/921d99108cd452f92569a0cafc8d11b36b38dfc0/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921d99108cd452f92569a0cafc8d11b36b38dfc0/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=921d99108cd452f92569a0cafc8d11b36b38dfc0", "patch": "@@ -280,6 +280,10 @@ impl IoFactory for UvIoFactory {\n             }\n         }\n     }\n+\n+    fn timer_init(&mut self) -> Result<~RtioTimerObject, IoError> {\n+        Ok(~UvTimer(TimerWatcher::new(self.uv_loop())))\n+    }\n }\n \n // FIXME #6090: Prefer newtype structs but Drop doesn't work\n@@ -562,6 +566,48 @@ impl RtioUdpSocket for UvUdpSocket {\n     fn ignore_broadcasts(&mut self) { fail!(); }\n }\n \n+pub struct UvTimer(timer::TimerWatcher);\n+\n+impl UvTimer {\n+    fn new(w: timer::TimerWatcher) -> UvTimer {\n+        UvTimer(w)\n+    }\n+}\n+\n+impl Drop for UvTimer {\n+    fn drop(&self) {\n+        rtdebug!(\"closing UvTimer\");\n+        let scheduler = Local::take::<Scheduler>();\n+        do scheduler.deschedule_running_task_and_then |_, task| {\n+            let task_cell = Cell::new(task);\n+            do self.close {\n+                let scheduler = Local::take::<Scheduler>();\n+                scheduler.resume_task_immediately(task_cell.take());\n+            }\n+        }\n+    }\n+}\n+\n+impl RtioTimer for UvTimer {\n+    fn sleep(&self, msecs: u64) {\n+        let scheduler = Local::take::<Scheduler>();\n+        assert!(scheduler.in_task_context());\n+        do scheduler.deschedule_running_task_and_then |sched, task| {\n+            rtdebug!(\"sleep: entered scheduler context\");\n+            assert!(!sched.in_task_context());\n+            let task_cell = Cell::new(task);\n+            let mut watcher = **self;\n+            do watcher.start(msecs, 0) |_, status| {\n+                assert!(status.is_none());\n+                let scheduler = Local::take::<Scheduler>();\n+                scheduler.resume_task_immediately(task_cell.take());\n+            }\n+        }\n+        let mut w = **self;\n+        w.stop();\n+    }\n+}\n+\n #[test]\n fn test_simple_io_no_connect() {\n     do run_in_newsched_task {\n@@ -832,3 +878,20 @@ fn test_udp_many_read() {\n         }\n     }\n }\n+\n+fn test_timer_sleep_simple_impl() {\n+    unsafe {\n+        let io = Local::unsafe_borrow::<IoFactoryObject>();\n+        let timer = (*io).timer_init();\n+        match timer {\n+            Ok(t) => t.sleep(1),\n+            Err(_) => assert!(false)\n+        }\n+    }\n+}\n+#[test]\n+fn test_timer_sleep_simple() {\n+    do run_in_newsched_task {\n+        test_timer_sleep_simple_impl();\n+    }\n+}"}]}