{"sha": "2f662b14033c4369b0a7b5c2656592ef08edf434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjYyYjE0MDMzYzQzNjliMGE3YjVjMjY1NjU5MmVmMDhlZGY0MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T20:27:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T20:27:14Z"}, "message": "Auto merge of #88280 - sexxi-goose:non-exhaustive, r=nikomatsakis\n\nHandle match statements with non exhaustive variants in closures\n\nThis PR ensures that the behavior for match statements with non exhaustive variants is the same inside and outside closures.\n\nIf we have a non-exhaustive SingleVariant which is defined in a different crate, then we should handle the case the same way we would handle a MultiVariant: borrow the match discriminant.\n\nCloses https://github.com/rust-lang/project-rfc-2229/issues/59\nr? `@nikomatsakis`", "tree": {"sha": "ac6891e7e1f40bb9439c9dc5218d7f4116a59097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6891e7e1f40bb9439c9dc5218d7f4116a59097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f662b14033c4369b0a7b5c2656592ef08edf434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f662b14033c4369b0a7b5c2656592ef08edf434", "html_url": "https://github.com/rust-lang/rust/commit/2f662b14033c4369b0a7b5c2656592ef08edf434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f662b14033c4369b0a7b5c2656592ef08edf434/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae0b03bc6b4e1544f43b9a8053bdb0f0ed4a19e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0b03bc6b4e1544f43b9a8053bdb0f0ed4a19e1", "html_url": "https://github.com/rust-lang/rust/commit/ae0b03bc6b4e1544f43b9a8053bdb0f0ed4a19e1"}, {"sha": "33817d2881843bb84a01551813c522891ce0c5c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/33817d2881843bb84a01551813c522891ce0c5c6", "html_url": "https://github.com/rust-lang/rust/commit/33817d2881843bb84a01551813c522891ce0c5c6"}], "stats": {"total": 187, "additions": 185, "deletions": 2}, "files": [{"sha": "3d483e322a8510dc379acf2f383745d33fbb359b", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "patch": "@@ -15,7 +15,7 @@ use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{self, adjustment, Ty, TyCtxt};\n+use rustc_middle::ty::{self, adjustment, AdtKind, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n use std::iter;\n \n@@ -845,5 +845,20 @@ fn delegate_consume<'a, 'tcx>(\n }\n \n fn is_multivariant_adt(ty: Ty<'tcx>) -> bool {\n-    if let ty::Adt(def, _) = ty.kind() { def.variants.len() > 1 } else { false }\n+    if let ty::Adt(def, _) = ty.kind() {\n+        // Note that if a non-exhaustive SingleVariant is defined in another crate, we need\n+        // to assume that more cases will be added to the variant in the future. This mean\n+        // that we should handle non-exhaustive SingleVariant the same way we would handle\n+        // a MultiVariant.\n+        // If the variant is not local it must be defined in another crate.\n+        let is_non_exhaustive = match def.adt_kind() {\n+            AdtKind::Struct | AdtKind::Union => {\n+                def.non_enum_variant().is_field_list_non_exhaustive()\n+            }\n+            AdtKind::Enum => def.is_variant_list_non_exhaustive(),\n+        };\n+        def.variants.len() > 1 || (!def.did.is_local() && is_non_exhaustive)\n+    } else {\n+        false\n+    }\n }"}, {"sha": "4060c409355a18978c7600ea4612659c6285fbc9", "filename": "src/test/ui/closures/2229_closure_analysis/match/auxiliary/match_non_exhaustive_lib.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "patch": "@@ -0,0 +1,10 @@\n+#[non_exhaustive]\n+pub enum E1 {}\n+\n+#[non_exhaustive]\n+pub enum E2 { A, B }\n+\n+#[non_exhaustive]\n+pub enum E3 { C }\n+\n+pub enum E4 { D }"}, {"sha": "241ddcb83e10989379c98b10db23ec1efa92f899", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/issue-87097.rs"}, {"sha": "38f2929a05f2dd2de5786a9ac14b2d072ca1aa2d", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87097.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87097.stderr?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/issue-87097.stderr"}, {"sha": "74506979a28c52159bbac7b4907402dbcb154486", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87426.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87426.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87426.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87426.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/issue-87426.rs"}, {"sha": "27e7fabf11ab688fe725a9ebe1df65d5f004d5fc", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-87988.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-87988.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/issue-87988.rs"}, {"sha": "0a6d71c68ae84f7c660ed0f29bb106d53dc9d384", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-88331.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/issue-88331.rs"}, {"sha": "f02d23464f168284574dd689d4cfc2666463250b", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-88331.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/issue-88331.stderr"}, {"sha": "914ebbe26a57d0b817ac99b8a36cd9ad8c92ac62", "filename": "src/test/ui/closures/2229_closure_analysis/match/match-edge-cases_1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_1.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/match-edge-cases.rs"}, {"sha": "ae724f9c3cc6f73ec464174d27e1e7a5bbc31a2b", "filename": "src/test/ui/closures/2229_closure_analysis/match/match-edge-cases_2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_2.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "patch": "@@ -0,0 +1,37 @@\n+// edition:2021\n+\n+enum SingleVariant {\n+    A\n+}\n+\n+struct TestStruct {\n+    x: i32,\n+    y: i32,\n+    z: i32,\n+}\n+\n+fn edge_case_if() {\n+    let sv = SingleVariant::A;\n+    let condition = true;\n+    // sv should not be captured as it is a SingleVariant\n+    let _a = || {\n+        match sv {\n+            SingleVariant::A if condition => (),\n+            _ => ()\n+        }\n+    };\n+    let mut mut_sv = sv;\n+    _a();\n+\n+    // ts should be captured\n+    let ts = TestStruct { x: 1, y: 1, z: 1 };\n+    let _b = || { match ts {\n+        TestStruct{ x: 1, .. } => (),\n+        _ => ()\n+    }};\n+    let mut mut_ts = ts;\n+    //~^ ERROR: cannot move out of `ts` because it is borrowed\n+    _b();\n+}\n+\n+fn main() {}"}, {"sha": "1e42d73c62bd9b8e0c82b5e33fd4adb1ff7efc49", "filename": "src/test/ui/closures/2229_closure_analysis/match/match-edge-cases_2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fmatch-edge-cases_2.stderr?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "patch": "@@ -0,0 +1,17 @@\n+error[E0505]: cannot move out of `ts` because it is borrowed\n+  --> $DIR/match-edge-cases_2.rs:32:22\n+   |\n+LL |     let _b = || { match ts {\n+   |              --         -- borrow occurs due to use in closure\n+   |              |\n+   |              borrow of `ts` occurs here\n+...\n+LL |     let mut mut_ts = ts;\n+   |                      ^^ move out of `ts` occurs here\n+LL |\n+LL |     _b();\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "318673ef847e516bb3cfae0b9a6e156030e76828", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "patch": "@@ -0,0 +1,54 @@\n+// edition:2021\n+\n+// aux-build:match_non_exhaustive_lib.rs\n+\n+/* The error message for non-exhaustive matches on non-local enums\n+ * marked as non-exhaustive should mention the fact that the enum\n+ * is marked as non-exhaustive (issue #85227).\n+ */\n+\n+// Ignore non_exhaustive in the same crate\n+#[non_exhaustive]\n+enum L1 { A, B }\n+enum L2 { C }\n+\n+extern crate match_non_exhaustive_lib;\n+use match_non_exhaustive_lib::{E1, E2, E3, E4};\n+\n+fn foo() -> (L1, L2) {todo!()}\n+fn bar() -> (E1, E2, E3, E4) {todo!()}\n+\n+fn main() {\n+    let (l1, l2) = foo();\n+    // No error for enums defined in this crate\n+    let _a = || { match l1 { L1::A => (), L1::B => () } };\n+    // (except if the match is already non-exhaustive)\n+    let _b = || { match l1 { L1::A => () } };\n+    //~^ ERROR: non-exhaustive patterns: `B` not covered [E0004]\n+\n+    // l2 should not be captured as it is a non-exhaustive SingleVariant\n+    // defined in this crate\n+    let _c = || { match l2 { L2::C => (), _ => () }  };\n+    let mut mut_l2 = l2;\n+    _c();\n+\n+    // E1 is not visibly uninhabited from here\n+    let (e1, e2, e3, e4) = bar();\n+    let _d = || { match e1 {} };\n+    //~^ ERROR: non-exhaustive patterns: type `E1` is non-empty [E0004]\n+    let _e = || { match e2 { E2::A => (), E2::B => () } };\n+    //~^ ERROR: non-exhaustive patterns: `_` not covered [E0004]\n+    let _f = || { match e2 { E2::A => (), E2::B => (), _ => () }  };\n+\n+    // e3 should be captured as it is a non-exhaustive SingleVariant\n+    // defined in another crate\n+    let _g = || { match e3 { E3::C => (), _ => () }  };\n+    let mut mut_e3 = e3;\n+    //~^ ERROR: cannot move out of `e3` because it is borrowed\n+    _g();\n+\n+    // e4 should not be captured as it is a SingleVariant\n+    let _h = || { match e4 { E4::D => (), _ => () }  };\n+    let mut mut_e4 = e4;\n+    _h();\n+}"}, {"sha": "91ffe1a47f4134f460d65cb6e933cee0f6a2ea09", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "patch": "@@ -0,0 +1,50 @@\n+error[E0004]: non-exhaustive patterns: `B` not covered\n+  --> $DIR/non-exhaustive-match.rs:26:25\n+   |\n+LL | enum L1 { A, B }\n+   | ----------------\n+   | |            |\n+   | |            not covered\n+   | `L1` defined here\n+...\n+LL |     let _b = || { match l1 { L1::A => () } };\n+   |                         ^^ pattern `B` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `L1`\n+\n+error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n+  --> $DIR/non-exhaustive-match.rs:37:25\n+   |\n+LL |     let _d = || { match e1 {} };\n+   |                         ^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `E1`, which is marked as non-exhaustive\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/non-exhaustive-match.rs:39:25\n+   |\n+LL |     let _e = || { match e2 { E2::A => (), E2::B => () } };\n+   |                         ^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `E2`, which is marked as non-exhaustive\n+\n+error[E0505]: cannot move out of `e3` because it is borrowed\n+  --> $DIR/non-exhaustive-match.rs:46:22\n+   |\n+LL |     let _g = || { match e3 { E3::C => (), _ => () }  };\n+   |              --         -- borrow occurs due to use in closure\n+   |              |\n+   |              borrow of `e3` occurs here\n+LL |     let mut mut_e3 = e3;\n+   |                      ^^ move out of `e3` occurs here\n+LL |\n+LL |     _g();\n+   |     -- borrow later used here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0004, E0505.\n+For more information about an error, try `rustc --explain E0004`."}, {"sha": "0f288ffa95a872a0936fca437c765bbabb5ba0ec", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/pattern-matching-should-fail.rs"}, {"sha": "45641ea3de3e0812b30da2653a18bdf037830530", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/pattern-matching-should-fail.stderr"}, {"sha": "56f5ac44db068735218de1728f56d4608d178a50", "filename": "src/test/ui/closures/2229_closure_analysis/match/patterns-capture-analysis.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpatterns-capture-analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpatterns-capture-analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpatterns-capture-analysis.rs?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/patterns-capture-analysis.rs"}, {"sha": "460813333952bd0ae18d76f84fae6c2ae99400f7", "filename": "src/test/ui/closures/2229_closure_analysis/match/patterns-capture-analysis.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpatterns-capture-analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f662b14033c4369b0a7b5c2656592ef08edf434/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpatterns-capture-analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpatterns-capture-analysis.stderr?ref=2f662b14033c4369b0a7b5c2656592ef08edf434", "previous_filename": "src/test/ui/closures/2229_closure_analysis/patterns-capture-analysis.stderr"}]}