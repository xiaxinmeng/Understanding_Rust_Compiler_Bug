{"sha": "453f2360d311335839744ed538efe21d31dc6bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1M2YyMzYwZDMxMTMzNTgzOTc0NGVkNTM4ZWZlMjFkMzFkYzZiYWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T18:38:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T18:38:32Z"}, "message": "Merge #8351\n\n8351: Use more assoc. type aliases in the chalk interner r=flodiebold a=jonas-schievink\n\nMakes it sligthly easier to swap out these types\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "e5980868d31b758b00c6cd3c5e3a9c760b2c62f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5980868d31b758b00c6cd3c5e3a9c760b2c62f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/453f2360d311335839744ed538efe21d31dc6bad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga1koCRBK7hj4Ov3rIwAAdHIIAK2L232IwzADW462nj4BzpZo\nwBETk4mYz7fGccPQn+s+9/UmV4KksqY4UsucZlH3Jf46NESith5ZdZhOV1F2VwBN\nvkUcX7SX6ugoRlS9o7C6w3n5+MWKY/hvgoYqqHehJI2ijyb9Pzq2qXi/swGWD4BV\nwLotbAR3mN+xUkjKMzmnkj5omtoGRF6X+TY0qrzs6CAH2efclZBZbhSs025irMZp\noVr9+NWyFgkM/eP71DwSjAQXXfVwjbCD/3KX+paT85IduYVLm8Cm8qHPAwcw4O+X\nTdAAuhI5KE1rqwH+iG+xv5hH3YsVYPLKdqh03vDnByKmzJOfAPBcMPt/KtcpB8c=\n=L3bM\n-----END PGP SIGNATURE-----\n", "payload": "tree e5980868d31b758b00c6cd3c5e3a9c760b2c62f2\nparent 87e56eb94ced9943977a38e7d4c6697587187ce6\nparent f48dd154a588b44568dcba9f50983c0578837f04\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617647912 +0000\ncommitter GitHub <noreply@github.com> 1617647912 +0000\n\nMerge #8351\n\n8351: Use more assoc. type aliases in the chalk interner r=flodiebold a=jonas-schievink\n\nMakes it sligthly easier to swap out these types\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/453f2360d311335839744ed538efe21d31dc6bad", "html_url": "https://github.com/rust-lang/rust/commit/453f2360d311335839744ed538efe21d31dc6bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/453f2360d311335839744ed538efe21d31dc6bad/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e56eb94ced9943977a38e7d4c6697587187ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e56eb94ced9943977a38e7d4c6697587187ce6", "html_url": "https://github.com/rust-lang/rust/commit/87e56eb94ced9943977a38e7d4c6697587187ce6"}, {"sha": "f48dd154a588b44568dcba9f50983c0578837f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48dd154a588b44568dcba9f50983c0578837f04", "html_url": "https://github.com/rust-lang/rust/commit/f48dd154a588b44568dcba9f50983c0578837f04"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "bd9395b7ed125b1112db13f2eea8adda14769214", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/453f2360d311335839744ed538efe21d31dc6bad/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453f2360d311335839744ed538efe21d31dc6bad/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=453f2360d311335839744ed538efe21d31dc6bad", "patch": "@@ -192,59 +192,58 @@ impl chalk_ir::interner::Interner for Interner {\n         tls::with_current_program(|prog| Some(prog?.debug_quantified_where_clauses(clauses, fmt)))\n     }\n \n-    fn intern_ty(&self, kind: chalk_ir::TyKind<Self>) -> Arc<chalk_ir::TyData<Self>> {\n+    fn intern_ty(&self, kind: chalk_ir::TyKind<Self>) -> Self::InternedType {\n         let flags = kind.compute_flags(self);\n         Arc::new(chalk_ir::TyData { kind, flags })\n     }\n \n-    fn ty_data<'a>(&self, ty: &'a Arc<chalk_ir::TyData<Self>>) -> &'a chalk_ir::TyData<Self> {\n+    fn ty_data<'a>(&self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n         ty\n     }\n \n-    fn intern_lifetime(\n-        &self,\n-        lifetime: chalk_ir::LifetimeData<Self>,\n-    ) -> chalk_ir::LifetimeData<Self> {\n+    fn intern_lifetime(&self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n         lifetime\n     }\n \n     fn lifetime_data<'a>(\n         &self,\n-        lifetime: &'a chalk_ir::LifetimeData<Self>,\n+        lifetime: &'a Self::InternedLifetime,\n     ) -> &'a chalk_ir::LifetimeData<Self> {\n         lifetime\n     }\n \n-    fn intern_const(&self, constant: chalk_ir::ConstData<Self>) -> Arc<chalk_ir::ConstData<Self>> {\n+    fn intern_const(&self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n         Arc::new(constant)\n     }\n \n-    fn const_data<'a>(\n-        &self,\n-        constant: &'a Arc<chalk_ir::ConstData<Self>>,\n-    ) -> &'a chalk_ir::ConstData<Self> {\n+    fn const_data<'a>(&self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n         constant\n     }\n \n-    fn const_eq(&self, _ty: &Arc<chalk_ir::TyData<Self>>, _c1: &(), _c2: &()) -> bool {\n+    fn const_eq(\n+        &self,\n+        _ty: &Self::InternedType,\n+        _c1: &Self::InternedConcreteConst,\n+        _c2: &Self::InternedConcreteConst,\n+    ) -> bool {\n         true\n     }\n \n     fn intern_generic_arg(\n         &self,\n         parameter: chalk_ir::GenericArgData<Self>,\n-    ) -> chalk_ir::GenericArgData<Self> {\n+    ) -> Self::InternedGenericArg {\n         parameter\n     }\n \n     fn generic_arg_data<'a>(\n         &self,\n-        parameter: &'a chalk_ir::GenericArgData<Self>,\n+        parameter: &'a Self::InternedGenericArg,\n     ) -> &'a chalk_ir::GenericArgData<Self> {\n         parameter\n     }\n \n-    fn intern_goal(&self, goal: GoalData<Self>) -> Arc<GoalData<Self>> {\n+    fn intern_goal(&self, goal: GoalData<Self>) -> Self::InternedGoal {\n         Arc::new(goal)\n     }\n \n@@ -255,11 +254,11 @@ impl chalk_ir::interner::Interner for Interner {\n         data.into_iter().collect()\n     }\n \n-    fn goal_data<'a>(&self, goal: &'a Arc<GoalData<Self>>) -> &'a GoalData<Self> {\n+    fn goal_data<'a>(&self, goal: &'a Self::InternedGoal) -> &'a GoalData<Self> {\n         goal\n     }\n \n-    fn goals_data<'a>(&self, goals: &'a Vec<Goal<Interner>>) -> &'a [Goal<Interner>] {\n+    fn goals_data<'a>(&self, goals: &'a Self::InternedGoals) -> &'a [Goal<Interner>] {\n         goals\n     }\n \n@@ -280,27 +279,27 @@ impl chalk_ir::interner::Interner for Interner {\n     fn intern_program_clause(\n         &self,\n         data: chalk_ir::ProgramClauseData<Self>,\n-    ) -> Arc<chalk_ir::ProgramClauseData<Self>> {\n+    ) -> Self::InternedProgramClause {\n         Arc::new(data)\n     }\n \n     fn program_clause_data<'a>(\n         &self,\n-        clause: &'a Arc<chalk_ir::ProgramClauseData<Self>>,\n+        clause: &'a Self::InternedProgramClause,\n     ) -> &'a chalk_ir::ProgramClauseData<Self> {\n         clause\n     }\n \n     fn intern_program_clauses<E>(\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::ProgramClause<Self>, E>>,\n-    ) -> Result<Arc<[chalk_ir::ProgramClause<Self>]>, E> {\n+    ) -> Result<Self::InternedProgramClauses, E> {\n         data.into_iter().collect()\n     }\n \n     fn program_clauses_data<'a>(\n         &self,\n-        clauses: &'a Arc<[chalk_ir::ProgramClause<Self>]>,\n+        clauses: &'a Self::InternedProgramClauses,\n     ) -> &'a [chalk_ir::ProgramClause<Self>] {\n         &clauses\n     }"}]}