{"sha": "9fb266b525938f71089f23b49d756d77f550521b", "node_id": "C_kwDOAAsO6NoAKDlmYjI2NmI1MjU5MzhmNzEwODlmMjNiNDlkNzU2ZDc3ZjU1MDUyMWI", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-06-08T22:07:39Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2023-06-08T22:08:03Z"}, "message": "Move parse_seq_to_before_end closure to own function", "tree": {"sha": "63e9c0511746ab48a299145f056d98b4c8d615e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e9c0511746ab48a299145f056d98b4c8d615e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb266b525938f71089f23b49d756d77f550521b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb266b525938f71089f23b49d756d77f550521b", "html_url": "https://github.com/rust-lang/rust/commit/9fb266b525938f71089f23b49d756d77f550521b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb266b525938f71089f23b49d756d77f550521b/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b90f5efaf46073a7da509a895a0688e1c6300c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b90f5efaf46073a7da509a895a0688e1c6300c3", "html_url": "https://github.com/rust-lang/rust/commit/1b90f5efaf46073a7da509a895a0688e1c6300c3"}], "stats": {"total": 80, "additions": 37, "deletions": 43}, "files": [{"sha": "cea2a71c9882164a62fff2372ccbeb2e7f11f446", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9fb266b525938f71089f23b49d756d77f550521b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb266b525938f71089f23b49d756d77f550521b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9fb266b525938f71089f23b49d756d77f550521b", "patch": "@@ -1146,6 +1146,42 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn parse_field_name_maybe_tuple(&mut self) -> PResult<'a, ThinVec<Ident>> {\n+        let token::Literal(token::Lit { kind: token::Float, symbol, suffix }) = self.token.kind\n+        else {\n+            return Ok(thin_vec![self.parse_field_name()?]);\n+        };\n+        Ok(match self.break_up_float(symbol) {\n+            // 1e2\n+            DestructuredFloat::Single(sym, sp) => {\n+                self.bump();\n+                thin_vec![Ident::new(sym, sp)]\n+            }\n+            // 1.\n+            DestructuredFloat::TrailingDot(sym, sym_span, dot_span) => {\n+                assert!(suffix.is_none());\n+                // Analogous to `Self::break_and_eat`\n+                self.token_cursor.break_last_token = true;\n+                // This might work, in cases like `1. 2`, and might not,\n+                // in cases like `offset_of!(Ty, 1.)`. It depends on what comes\n+                // after the float-like token, and therefore we have to make\n+                // the other parts of the parser think that there is a dot literal.\n+                self.token = Token::new(token::Ident(sym, false), sym_span);\n+                self.bump_with((Token::new(token::Dot, dot_span), self.token_spacing));\n+                thin_vec![Ident::new(sym, sym_span)]\n+            }\n+            // 1.2 | 1.2e3\n+            DestructuredFloat::MiddleDot(symbol1, ident1_span, _dot_span, symbol2, ident2_span) => {\n+                self.bump();\n+                thin_vec![Ident::new(symbol1, ident1_span), Ident::new(symbol2, ident2_span)]\n+            }\n+            DestructuredFloat::Error => {\n+                self.bump();\n+                thin_vec![Ident::new(symbol, self.prev_token.span)]\n+            }\n+        })\n+    }\n+\n     fn parse_expr_tuple_field_access(\n         &mut self,\n         lo: Span,\n@@ -1852,49 +1888,7 @@ impl<'a> Parser<'a> {\n         let (fields, _trailing, _recovered) = self.parse_seq_to_before_end(\n             &TokenKind::CloseDelim(Delimiter::Parenthesis),\n             seq_sep,\n-            |this| {\n-                let token::Literal(token::Lit { kind: token::Float, symbol, suffix }) = this.token.kind\n-                else {\n-                    return Ok(thin_vec![this.parse_field_name()?]);\n-                };\n-                let res = match this.break_up_float(symbol) {\n-                    // 1e2\n-                    DestructuredFloat::Single(sym, sp) => {\n-                        this.bump();\n-                        thin_vec![Ident::new(sym, sp)]\n-                    }\n-                    // 1.\n-                    DestructuredFloat::TrailingDot(sym, sym_span, dot_span) => {\n-                        assert!(suffix.is_none());\n-                        // Analogous to Self::break_and_eat\n-                        this.token_cursor.break_last_token = true;\n-                        // This might work, in cases like `1. 2.3`, and might not,\n-                        // in cases like `offset_of!(Ty, 1.)`.\n-                        this.token = Token::new(token::Ident(sym, false), sym_span);\n-                        this.bump_with((Token::new(token::Dot, dot_span), this.token_spacing));\n-                        thin_vec![Ident::new(sym, sym_span)]\n-                    }\n-                    // 1.2 | 1.2e3\n-                    DestructuredFloat::MiddleDot(\n-                        symbol1,\n-                        ident1_span,\n-                        _dot_span,\n-                        symbol2,\n-                        ident2_span,\n-                    ) => {\n-                        this.bump();\n-                        thin_vec![\n-                            Ident::new(symbol1, ident1_span),\n-                            Ident::new(symbol2, ident2_span)\n-                        ]\n-                    }\n-                    DestructuredFloat::Error => {\n-                        this.bump();\n-                        thin_vec![Ident::new(symbol, this.prev_token.span)]\n-                    }\n-                };\n-                Ok(res)\n-            },\n+            Parser::parse_field_name_maybe_tuple,\n         )?;\n         let fields = fields.into_iter().flatten().collect::<Vec<_>>();\n         let span = lo.to(self.token.span);"}]}