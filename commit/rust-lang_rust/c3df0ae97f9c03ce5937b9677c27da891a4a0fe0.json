{"sha": "c3df0ae97f9c03ce5937b9677c27da891a4a0fe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZGYwYWU5N2Y5YzAzY2U1OTM3Yjk2NzdjMjdkYTg5MWE0YTBmZTA=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-18T01:31:51Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-18T01:31:51Z"}, "message": "x.py fmt", "tree": {"sha": "065bb26e21b103ed3c6f972a4ebad69ffe2334b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065bb26e21b103ed3c6f972a4ebad69ffe2334b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0", "html_url": "https://github.com/rust-lang/rust/commit/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb11ba51135b0398b5a8b9feca24149d96fa5e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb11ba51135b0398b5a8b9feca24149d96fa5e8", "html_url": "https://github.com/rust-lang/rust/commit/9bb11ba51135b0398b5a8b9feca24149d96fa5e8"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "ad93fa610c4819fe7d7c7c4acf32a67d4ab978a7", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3df0ae97f9c03ce5937b9677c27da891a4a0fe0/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=c3df0ae97f9c03ce5937b9677c27da891a4a0fe0", "patch": "@@ -125,11 +125,7 @@ mod imp {\n             // Load ARGC and ARGV without a lock. If the store to either ARGV or\n             // ARGC isn't visible yet, we'll return an empty argument list.\n             let argv = ARGV.load(Ordering::Relaxed);\n-            let argc = if argv.is_null() {\n-                0\n-            } else {\n-                ARGC.load(Ordering::Relaxed)\n-            };\n+            let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n             (0..argc)\n                 .map(|i| {\n                     let cstr = CStr::from_ptr(*argv.offset(i) as *const libc::c_char);"}]}