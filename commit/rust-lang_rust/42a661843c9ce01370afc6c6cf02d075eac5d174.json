{"sha": "42a661843c9ce01370afc6c6cf02d075eac5d174", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYTY2MTg0M2M5Y2UwMTM3MGFmYzZjNmNmMDJkMDc1ZWFjNWQxNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-25T18:53:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T12:57:22Z"}, "message": "introduce `canonical_var_for_region` helper fn", "tree": {"sha": "457b41f2bf671e42c4dc3a6d5c74b39b2fccb1f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457b41f2bf671e42c4dc3a6d5c74b39b2fccb1f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42a661843c9ce01370afc6c6cf02d075eac5d174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42a661843c9ce01370afc6c6cf02d075eac5d174", "html_url": "https://github.com/rust-lang/rust/commit/42a661843c9ce01370afc6c6cf02d075eac5d174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42a661843c9ce01370afc6c6cf02d075eac5d174/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71caf8ae9323684888f70b976d967a254bd0aacb", "url": "https://api.github.com/repos/rust-lang/rust/commits/71caf8ae9323684888f70b976d967a254bd0aacb", "html_url": "https://github.com/rust-lang/rust/commit/71caf8ae9323684888f70b976d967a254bd0aacb"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "99a25f6c70200e82669ff15134ff4600866b87c6", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42a661843c9ce01370afc6c6cf02d075eac5d174/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a661843c9ce01370afc6c6cf02d075eac5d174/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=42a661843c9ce01370afc6c6cf02d075eac5d174", "patch": "@@ -193,25 +193,17 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                     .unwrap()\n                     .borrow_region_constraints()\n                     .opportunistic_resolve_var(self.tcx, vid);\n-                let info = CanonicalVarInfo {\n-                    kind: CanonicalVarKind::Region,\n-                };\n                 debug!(\n                     \"canonical: region var found with vid {:?}, \\\n                      opportunistically resolved to {:?}\",\n                     vid, r\n                 );\n-                let cvar = self.canonical_var(info, r.into());\n-                self.tcx().mk_region(ty::ReCanonical(cvar))\n+                self.canonical_var_for_region(r)\n             }\n \n             ty::ReStatic => {\n                 if self.canonicalize_region_mode.static_region {\n-                    let info = CanonicalVarInfo {\n-                        kind: CanonicalVarKind::Region,\n-                    };\n-                    let cvar = self.canonical_var(info, r.into());\n-                    self.tcx().mk_region(ty::ReCanonical(cvar))\n+                    self.canonical_var_for_region(r)\n                 } else {\n                     r\n                 }\n@@ -224,11 +216,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::ReEmpty\n             | ty::ReErased => {\n                 if self.canonicalize_region_mode.other_free_regions {\n-                    let info = CanonicalVarInfo {\n-                        kind: CanonicalVarKind::Region,\n-                    };\n-                    let cvar = self.canonical_var(info, r.into());\n-                    self.tcx().mk_region(ty::ReCanonical(cvar))\n+                    self.canonical_var_for_region(r)\n                 } else {\n                     r\n                 }\n@@ -414,6 +402,14 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn canonical_var_for_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        let info = CanonicalVarInfo {\n+            kind: CanonicalVarKind::Region,\n+        };\n+        let cvar = self.canonical_var(info, r.into());\n+        self.tcx().mk_region(ty::ReCanonical(cvar))\n+    }\n+\n     /// Given a type variable `ty_var` of the given kind, first check\n     /// if `ty_var` is bound to anything; if so, canonicalize\n     /// *that*. Otherwise, create a new canonical variable for"}]}