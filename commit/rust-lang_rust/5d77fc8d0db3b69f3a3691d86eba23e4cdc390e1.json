{"sha": "5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzdmYzhkMGRiM2I2OWYzYTM2OTFkODZlYmEyM2U0Y2RjMzkwZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-15T01:56:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-15T01:56:25Z"}, "message": "Auto merge of #79922 - tmiasko:lower-discriminant, r=nagisa\n\nLower `discriminant_value` intrinsic\n\nThis allows const propagation to evaluate comparisons involving\nfield-less enums using derived implementations of `PartialEq` (after\ninlining `eq`).", "tree": {"sha": "00c7ad250b33ea024acc67f5550b34821d978da4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c7ad250b33ea024acc67f5550b34821d978da4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "html_url": "https://github.com/rust-lang/rust/commit/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b3ee82eb68cb35030bb745c23f8aa76d9de5bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3ee82eb68cb35030bb745c23f8aa76d9de5bee", "html_url": "https://github.com/rust-lang/rust/commit/8b3ee82eb68cb35030bb745c23f8aa76d9de5bee"}, {"sha": "686237c49aed588bf266e8dece3130b779605109", "url": "https://api.github.com/repos/rust-lang/rust/commits/686237c49aed588bf266e8dece3130b779605109", "html_url": "https://github.com/rust-lang/rust/commit/686237c49aed588bf266e8dece3130b779605109"}], "stats": {"total": 197, "additions": 191, "deletions": 6}, "files": [{"sha": "e3a6cabd600578665242351a276e231806318e23", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "patch": "@@ -489,6 +489,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::Discriminant(ref place) => {\n                 let discr_ty = rvalue.ty(self.mir, bx.tcx());\n+                let discr_ty = self.monomorphize(discr_ty);\n                 let discr = self\n                     .codegen_place(&mut bx, place.as_ref())\n                     .codegen_get_discr(&mut bx, discr_ty);"}, {"sha": "fc9dcdf1775e6bb9b18e3b8d53590a8b19159195", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "patch": "@@ -2116,13 +2116,44 @@ impl<'tcx> TyS<'tcx> {\n     }\n \n     /// Returns the type of the discriminant of this type.\n-    pub fn discriminant_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.kind() {\n             ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),\n             ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),\n-            _ => {\n-                // This can only be `0`, for now, so `u8` will suffice.\n-                tcx.types.u8\n+\n+            ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {\n+                let assoc_items =\n+                    tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n+                let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n+                tcx.mk_projection(discriminant_def_id, tcx.mk_substs([self.into()].iter()))\n+            }\n+\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Adt(..)\n+            | ty::Foreign(_)\n+            | ty::Str\n+            | ty::Array(..)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(..)\n+            | ty::FnDef(..)\n+            | ty::FnPtr(..)\n+            | ty::Dynamic(..)\n+            | ty::Closure(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Error(_)\n+            | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,\n+\n+            ty::Bound(..)\n+            | ty::Placeholder(_)\n+            | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+                bug!(\"`discriminant_ty` applied to unexpected type: {:?}\", self)\n             }\n         }\n     }"}, {"sha": "f5968532eb39695d0700f24ab26863afcc416a52", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "patch": "@@ -83,6 +83,21 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n+                    sym::discriminant_value => {\n+                        if let (Some((destination, target)), Some(arg)) =\n+                            (*destination, args[0].place())\n+                        {\n+                            let arg = tcx.mk_place_deref(arg);\n+                            block.statements.push(Statement {\n+                                source_info: terminator.source_info,\n+                                kind: StatementKind::Assign(box (\n+                                    destination,\n+                                    Rvalue::Discriminant(arg),\n+                                )),\n+                            });\n+                            terminator.kind = TerminatorKind::Goto { target };\n+                        }\n+                    }\n                     _ => {}\n                 }\n             }"}, {"sha": "a21cbfa767edba8216cec93c9c23580f9abf2cdb", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "patch": "@@ -0,0 +1,124 @@\n+- // MIR for `discriminant` before LowerIntrinsics\n++ // MIR for `discriminant` after LowerIntrinsics\n+  \n+  fn discriminant(_1: T) -> () {\n+      debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:68:24: 68:25\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:68:30: 68:30\n+      let _2: <T as std::marker::DiscriminantKind>::Discriminant; // in scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n+      let mut _3: &T;                      // in scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n+      let _4: &T;                          // in scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n+      let _5: u8;                          // in scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n+      let mut _6: &i32;                    // in scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+      let _7: &i32;                        // in scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+      let _8: i32;                         // in scope 0 at $DIR/lower_intrinsics.rs:70:43: 70:44\n+      let _9: u8;                          // in scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n+      let mut _10: &();                    // in scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+      let _11: &();                        // in scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+      let _12: ();                         // in scope 0 at $DIR/lower_intrinsics.rs:71:43: 71:45\n+      let _13: isize;                      // in scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n+      let mut _14: &E;                     // in scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+      let _15: &E;                         // in scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+      let _16: E;                          // in scope 0 at $DIR/lower_intrinsics.rs:72:43: 72:47\n+      let mut _17: &E;                     // in scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+      let mut _18: &();                    // in scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+      let mut _19: &i32;                   // in scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n+          _4 = &_1;                        // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n+          _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n+-         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:69:5: 69:41\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<T>}, val: Value(Scalar(<ZST>)) }\n++         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:69:44: 69:45\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:69:45: 69:46\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:69:45: 69:46\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+          _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[2]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/lower_intrinsics.rs:70:42: 70:44\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[2])) }\n+          _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+          _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+-         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:70:5: 70:41\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<i32>}, val: Value(Scalar(<ZST>)) }\n++         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n++         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n+      }\n+  \n+      bb2: {\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:70:44: 70:45\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:70:45: 70:46\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:70:45: 70:46\n+          StorageLive(_9);                 // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n+          StorageLive(_10);                // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+          StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+          _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+                                           // ty::Const\n+                                           // + ty: &()\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/lower_intrinsics.rs:71:42: 71:45\n+                                           // + literal: Const { ty: &(), val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[1])) }\n+          _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+          _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+-         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:71:5: 71:41\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<()>}, val: Value(Scalar(<ZST>)) }\n++         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n++         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n+      }\n+  \n+      bb3: {\n+          StorageDead(_10);                // scope 0 at $DIR/lower_intrinsics.rs:71:45: 71:46\n+          StorageDead(_11);                // scope 0 at $DIR/lower_intrinsics.rs:71:46: 71:47\n+          StorageDead(_9);                 // scope 0 at $DIR/lower_intrinsics.rs:71:46: 71:47\n+          StorageLive(_13);                // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n+          StorageLive(_14);                // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+          StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+          _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+                                           // ty::Const\n+                                           // + ty: &E\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/lower_intrinsics.rs:72:42: 72:47\n+                                           // + literal: Const { ty: &E, val: Unevaluated(WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[8787]::discriminant), const_param_did: None }, [T], Some(promoted[0])) }\n+          _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+          _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+-         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:72:5: 72:41\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<E>}, val: Value(Scalar(<ZST>)) }\n++         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n++         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n+      }\n+  \n+      bb4: {\n+          StorageDead(_14);                // scope 0 at $DIR/lower_intrinsics.rs:72:47: 72:48\n+          StorageDead(_15);                // scope 0 at $DIR/lower_intrinsics.rs:72:48: 72:49\n+          StorageDead(_13);                // scope 0 at $DIR/lower_intrinsics.rs:72:48: 72:49\n+          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:68:30: 73:2\n+          drop(_1) -> bb5;                 // scope 0 at $DIR/lower_intrinsics.rs:73:1: 73:2\n+      }\n+  \n+      bb5: {\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:73:2: 73:2\n+      }\n+  }\n+  "}, {"sha": "8d28354a5f14eb90e452c6f9a2d48dd437abbdfd", "filename": "src/test/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs?ref=5d77fc8d0db3b69f3a3691d86eba23e4cdc390e1", "patch": "@@ -45,15 +45,29 @@ pub fn f_dispatch<T>(t: T) {\n }\n \n #[inline(never)]\n-pub fn f_zst<T>(t: T) {\n+pub fn f_zst<T>(_t: T) {\n }\n \n #[inline(never)]\n-pub fn f_non_zst<T>(t: T) {}\n+pub fn f_non_zst<T>(_t: T) {}\n \n // EMIT_MIR lower_intrinsics.non_const.LowerIntrinsics.diff\n pub fn non_const<T>() -> usize {\n     // Check that lowering works with non-const operand as a func.\n     let size_of_t = core::intrinsics::size_of::<T>;\n     size_of_t()\n }\n+\n+pub enum E {\n+    A,\n+    B,\n+    C,\n+}\n+\n+// EMIT_MIR lower_intrinsics.discriminant.LowerIntrinsics.diff\n+pub fn discriminant<T>(t: T) {\n+    core::intrinsics::discriminant_value(&t);\n+    core::intrinsics::discriminant_value(&0);\n+    core::intrinsics::discriminant_value(&());\n+    core::intrinsics::discriminant_value(&E::B);\n+}"}]}