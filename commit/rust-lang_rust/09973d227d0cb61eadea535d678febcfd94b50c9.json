{"sha": "09973d227d0cb61eadea535d678febcfd94b50c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OTczZDIyN2QwY2I2MWVhZGVhNTM1ZDY3OGZlYmNmZDk0YjUwYzk=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-09-11T06:31:47Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-09-11T06:31:47Z"}, "message": "Add some unit tests for find_best_match_for_name\n\nThere were only some UI tests that covered this function.\nSince there's more diagnostic work going on, I think it makes\nsense to have this unit tested.", "tree": {"sha": "fca02866db50bd91bd5ada4cc7ee188ee9dc9a97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca02866db50bd91bd5ada4cc7ee188ee9dc9a97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09973d227d0cb61eadea535d678febcfd94b50c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJbl2JpAAoJELb6Bqbg4mZbvGkP/iuaPgsg2yDCOGI3b71Mvgww\nHMm+ff3u/liVYj5BkOuhhIwPx6ls1mQ1Fvkd1oVTxz8UDcETnFKuDmQzIh7/0gct\nJTzXKIp9oZMP8/cLPoUIykVG9ThnymY3fGNq2DRbla2A4QEi61+6vlA3o93DSX3n\nR9jDr2+34oXyx2XB0kEgDFTdH1cmet55puUpTYgi4NrALxcpRx9a60kQhKDFjTvJ\nyKk1dg0lSiu2GC+ENdbLz9TX2XhrHM4pON1WZIKmrIfy5B3dfROQ5qMvLRuYdvLQ\nqzRqRl8QUCz3Wf3buFuKzjapRcZ2yGzdkBYjuvuo77NV7PpqvW95P88VCqjsyW4z\nuGJH99bTrpOXN6eTKGJg1lWoXdHIGGTa2AleeKy1VtA+jBl7zyu2AoO8q7qI6PSO\nSDA0dRW3L8++nWaBiOGzWZrmzhQ1OfUgtV4dorgrhDC9WVZR26iG51309j2NqBNs\ngrD99U0oiG0KjKP0uoyh83qNunikTOUWValrrWMXIDCy2NPxnuf3c6EgWTX78tn1\nDpbfbk+jO8vj3J+cZ0Xeb0j7Igq+0Tkg1iQiqeAMtpG47zvZqswxhLwvRdMzavI0\nvA4q+fK6aR01GFp0Ws+CTKYTJv4nYMJxq0vn0skTRbu1A9OruEKjs+FXCcRJXHNU\n/p55l7WGgx2yKYR3C2Kn\n=JSeL\n-----END PGP SIGNATURE-----", "payload": "tree fca02866db50bd91bd5ada4cc7ee188ee9dc9a97\nparent d8af8b66d948ff394db1b3a50e2e4fbe02512239\nauthor Philipp Hansch <dev@phansch.net> 1536647507 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1536647507 +0200\n\nAdd some unit tests for find_best_match_for_name\n\nThere were only some UI tests that covered this function.\nSince there's more diagnostic work going on, I think it makes\nsense to have this unit tested.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09973d227d0cb61eadea535d678febcfd94b50c9", "html_url": "https://github.com/rust-lang/rust/commit/09973d227d0cb61eadea535d678febcfd94b50c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09973d227d0cb61eadea535d678febcfd94b50c9/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8af8b66d948ff394db1b3a50e2e4fbe02512239", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8af8b66d948ff394db1b3a50e2e4fbe02512239", "html_url": "https://github.com/rust-lang/rust/commit/d8af8b66d948ff394db1b3a50e2e4fbe02512239"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "feee2422cb662030fadf96215346af3ed8ee312c", "filename": "src/libsyntax/util/lev_distance.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/09973d227d0cb61eadea535d678febcfd94b50c9/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09973d227d0cb61eadea535d678febcfd94b50c9/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=09973d227d0cb61eadea535d678febcfd94b50c9", "patch": "@@ -11,7 +11,7 @@\n use std::cmp;\n use symbol::Symbol;\n \n-/// To find the Levenshtein distance between two strings\n+/// Find the Levenshtein distance between two strings\n pub fn lev_distance(a: &str, b: &str) -> usize {\n     // cases which don't require further computation\n     if a.is_empty() {\n@@ -41,10 +41,12 @@ pub fn lev_distance(a: &str, b: &str) -> usize {\n     } dcol[t_last + 1]\n }\n \n-/// To find the best match for a given string from an iterator of names\n+/// Find the best match for a given word in the given iterator\n+///\n /// As a loose rule to avoid the obviously incorrect suggestions, it takes\n /// an optional limit for the maximum allowable edit distance, which defaults\n /// to one-third of the given word.\n+///\n /// Besides Levenshtein, we use case insensitive comparison to improve accuracy on an edge case with\n /// a lower(upper)case letters mismatch.\n pub fn find_best_match_for_name<'a, T>(iter_names: T,\n@@ -105,3 +107,39 @@ fn test_lev_distance() {\n     assert_eq!(lev_distance(b, c), 1);\n     assert_eq!(lev_distance(c, b), 1);\n }\n+\n+#[test]\n+fn test_find_best_match_for_name() {\n+    use with_globals;\n+    with_globals(|| {\n+        let input = vec![Symbol::intern(\"aaab\"), Symbol::intern(\"aaabc\")];\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), \"aaaa\", None),\n+            Some(Symbol::intern(\"aaab\"))\n+        );\n+\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), \"1111111111\", None),\n+            None\n+        );\n+\n+        let input = vec![Symbol::intern(\"aAAA\")];\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), \"AAAA\", None),\n+            Some(Symbol::intern(\"aAAA\"))\n+        );\n+\n+        let input = vec![Symbol::intern(\"AAAA\")];\n+        // Returns None because `lev_distance > max_dist / 3`\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), \"aaaa\", None),\n+            None\n+        );\n+\n+        let input = vec![Symbol::intern(\"AAAA\")];\n+        assert_eq!(\n+            find_best_match_for_name(input.iter(), \"aaaa\", Some(4)),\n+            Some(Symbol::intern(\"AAAA\"))\n+        );\n+    })\n+}"}]}