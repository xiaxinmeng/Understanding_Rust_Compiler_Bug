{"sha": "0f79ec76d6fd29d851e05c9140192e4505097185", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNzllYzc2ZDZmZDI5ZDg1MWUwNWM5MTQwMTkyZTQ1MDUwOTcxODU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:24:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:24:06Z"}, "message": "Support goto def in bences", "tree": {"sha": "5e19ff0274e1ccd52f6293d25b93d7d45c54e160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e19ff0274e1ccd52f6293d25b93d7d45c54e160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f79ec76d6fd29d851e05c9140192e4505097185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f79ec76d6fd29d851e05c9140192e4505097185", "html_url": "https://github.com/rust-lang/rust/commit/0f79ec76d6fd29d851e05c9140192e4505097185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f79ec76d6fd29d851e05c9140192e4505097185/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3ec2dfa51d92930e028c2ea5af199dbcc813f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8", "html_url": "https://github.com/rust-lang/rust/commit/6a3ec2dfa51d92930e028c2ea5af199dbcc813f8"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "a7cc3a2d41335e293446e6fa1de4beb8fa376fc2", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f79ec76d6fd29d851e05c9140192e4505097185/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f79ec76d6fd29d851e05c9140192e4505097185/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=0f79ec76d6fd29d851e05c9140192e4505097185", "patch": "@@ -38,6 +38,7 @@ fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n pub(crate) enum Op {\n     Highlight { path: PathBuf },\n     Complete(Position),\n+    GotoDef(Position),\n }\n \n pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n@@ -52,7 +53,7 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n     let file_id = {\n         let path = match &op {\n             Op::Highlight { path } => path,\n-            Op::Complete(pos) => &pos.path,\n+            Op::Complete(pos) | Op::GotoDef(pos) => &pos.path,\n         };\n         let path = std::env::current_dir()?.join(path).canonicalize()?;\n         roots\n@@ -72,7 +73,7 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n             .ok_or_else(|| format!(\"Can't find {:?}\", path))?\n     };\n \n-    match op {\n+    match &op {\n         Op::Highlight { .. } => {\n             let res = do_work(&mut host, file_id, |analysis| {\n                 analysis.diagnostics(file_id).unwrap();\n@@ -82,16 +83,30 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n                 println!(\"\\n{}\", res);\n             }\n         }\n-        Op::Complete(pos) => {\n+        Op::Complete(pos) | Op::GotoDef(pos) => {\n+            let is_completion = match op {\n+                Op::Complete(..) => true,\n+                _ => false,\n+            };\n+\n             let offset = host\n                 .analysis()\n                 .file_line_index(file_id)?\n                 .offset(LineCol { line: pos.line, col_utf16: pos.column });\n             let file_postion = FilePosition { file_id, offset };\n \n-            let res = do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n-            if verbose {\n-                println!(\"\\n{:#?}\", res);\n+            if is_completion {\n+                let res =\n+                    do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n+                if verbose {\n+                    println!(\"\\n{:#?}\", res);\n+                }\n+            } else {\n+                let res =\n+                    do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_postion));\n+                if verbose {\n+                    println!(\"\\n{:#?}\", res);\n+                }\n             }\n         }\n     }"}, {"sha": "750cbab866a15b1cb9e841324766da2a1899623f", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f79ec76d6fd29d851e05c9140192e4505097185/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f79ec76d6fd29d851e05c9140192e4505097185/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=0f79ec76d6fd29d851e05c9140192e4505097185", "patch": "@@ -134,13 +134,14 @@ fn main() -> Result<()> {\n             let path: String = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n             let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n             let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n-            let op = match (highlight_path, complete_path) {\n-                (Some(path), None) => {\n-                    let path: String = path;\n-                    analysis_bench::Op::Highlight { path: path.into() }\n-                }\n-                (None, Some(position)) => analysis_bench::Op::Complete(position.parse()?),\n-                _ => panic!(\"exactly one of  `--highlight`, `--complete` must be set\"),\n+            let goto_def_path: Option<String> = matches.opt_value_from_str(\"--goto-def\")?;\n+            let op = match (highlight_path, complete_path, goto_def_path) {\n+                (Some(path), None, None) => analysis_bench::Op::Highlight { path: path.into() },\n+                (None, Some(position), None) => analysis_bench::Op::Complete(position.parse()?),\n+                (None, None, Some(position)) => analysis_bench::Op::GotoDef(position.parse()?),\n+                _ => panic!(\n+                    \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n+                ),\n             };\n             matches.finish().or_else(handle_extra_flags)?;\n             analysis_bench::run(verbose, path.as_ref(), op)?;"}]}