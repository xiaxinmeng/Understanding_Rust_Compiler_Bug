{"sha": "6c8b702cf7f7b67e3076091cdf12750551f3830c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOGI3MDJjZjdmN2I2N2UzMDc2MDkxY2RmMTI3NTA1NTFmMzgzMGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T18:26:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T18:26:49Z"}, "message": "auto merge of #10539 : alexcrichton/rust/external-linkage, r=pcwalton\n\nIf a function is marked as external, then it's likely desired for use with some\r\nnative library, so we're not really accomplishing a whole lot by internalizing\r\nall of these symbols.", "tree": {"sha": "15bebd4706d38cb8be96631e24bcb830abf9f29c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15bebd4706d38cb8be96631e24bcb830abf9f29c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c8b702cf7f7b67e3076091cdf12750551f3830c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8b702cf7f7b67e3076091cdf12750551f3830c", "html_url": "https://github.com/rust-lang/rust/commit/6c8b702cf7f7b67e3076091cdf12750551f3830c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c8b702cf7f7b67e3076091cdf12750551f3830c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dded4345fc148edea0e4b8354728c728784883f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dded4345fc148edea0e4b8354728c728784883f", "html_url": "https://github.com/rust-lang/rust/commit/4dded4345fc148edea0e4b8354728c728784883f"}, {"sha": "4ddeef35e52fdd80424897f3f9a253220691c1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddeef35e52fdd80424897f3f9a253220691c1ac", "html_url": "https://github.com/rust-lang/rust/commit/4ddeef35e52fdd80424897f3f9a253220691c1ac"}], "stats": {"total": 226, "additions": 147, "deletions": 79}, "files": [{"sha": "0d6f6de47be9f83aabb3dde139c5ae932f8391f5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 106, "deletions": 77, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b702cf7f7b67e3076091cdf12750551f3830c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b702cf7f7b67e3076091cdf12750551f3830c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=6c8b702cf7f7b67e3076091cdf12750551f3830c", "patch": "@@ -260,104 +260,133 @@ impl ReachableContext {\n                 continue\n             }\n             scanned.insert(search_item);\n-            self.reachable_symbols.insert(search_item);\n-\n-            // Find the AST block corresponding to the item and visit it,\n-            // marking all path expressions that resolve to something\n-            // interesting.\n             match self.tcx.items.find(&search_item) {\n-                Some(&ast_map::node_item(item, _)) => {\n+                Some(item) => self.propagate_node(item, search_item,\n+                                                  &mut visitor),\n+                None if search_item == ast::CRATE_NODE_ID => {}\n+                None => {\n+                    self.tcx.sess.bug(format!(\"found unmapped ID in worklist: \\\n+                                               {}\",\n+                                              search_item))\n+                }\n+            }\n+        }\n+    }\n+\n+    fn propagate_node(&self, node: &ast_map::ast_node,\n+                      search_item: ast::NodeId,\n+                      visitor: &mut MarkSymbolVisitor) {\n+        if !*self.tcx.sess.building_library {\n+            // If we are building an executable, then there's no need to flag\n+            // anything as external except for `extern fn` types. These\n+            // functions may still participate in some form of native interface,\n+            // but all other rust-only interfaces can be private (they will not\n+            // participate in linkage after this product is produced)\n+            match *node {\n+                ast_map::node_item(item, _) => {\n                     match item.node {\n-                        ast::item_fn(_, _, _, _, ref search_block) => {\n-                            if item_might_be_inlined(item) {\n-                                visit::walk_block(&mut visitor, search_block, ())\n-                            }\n+                        ast::item_fn(_, ast::extern_fn, _, _, _) => {\n+                            self.reachable_symbols.insert(search_item);\n                         }\n+                        _ => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+        } else {\n+            // If we are building a library, then reachable symbols will\n+            // continue to participate in linkage after this product is\n+            // produced. In this case, we traverse the ast node, recursing on\n+            // all reachable nodes from this one.\n+            self.reachable_symbols.insert(search_item);\n+        }\n \n-                        // Implementations of exported structs/enums need to get\n-                        // added to the worklist (as all their methods should be\n-                        // accessible)\n-                        ast::item_struct(*) | ast::item_enum(*) => {\n-                            let def = local_def(item.id);\n-                            let impls = match self.tcx.inherent_impls.find(&def) {\n-                                Some(&impls) => impls,\n-                                None => continue\n-                            };\n-                            for imp in impls.iter() {\n-                                if is_local(imp.did) {\n-                                    self.worklist.push(imp.did.node);\n-                                }\n-                            }\n+        match *node {\n+            ast_map::node_item(item, _) => {\n+                match item.node {\n+                    ast::item_fn(_, _, _, _, ref search_block) => {\n+                        if item_might_be_inlined(item) {\n+                            visit::walk_block(visitor, search_block, ())\n                         }\n+                    }\n \n-                        // Propagate through this impl\n-                        ast::item_impl(_, _, _, ref methods) => {\n-                            for method in methods.iter() {\n-                                self.worklist.push(method.id);\n+                    // Implementations of exported structs/enums need to get\n+                    // added to the worklist (as all their methods should be\n+                    // accessible)\n+                    ast::item_struct(*) | ast::item_enum(*) => {\n+                        let def = local_def(item.id);\n+                        let impls = match self.tcx.inherent_impls.find(&def) {\n+                            Some(&impls) => impls,\n+                            None => return\n+                        };\n+                        for imp in impls.iter() {\n+                            if is_local(imp.did) {\n+                                self.worklist.push(imp.did.node);\n                             }\n                         }\n+                    }\n+\n+                    // Propagate through this impl\n+                    ast::item_impl(_, _, _, ref methods) => {\n+                        for method in methods.iter() {\n+                            self.worklist.push(method.id);\n+                        }\n+                    }\n \n-                        // Default methods of exported traits need to all be\n-                        // accessible.\n-                        ast::item_trait(_, _, ref methods) => {\n-                            for method in methods.iter() {\n-                                match *method {\n-                                    ast::required(*) => {}\n-                                    ast::provided(ref method) => {\n-                                        self.worklist.push(method.id);\n-                                    }\n+                    // Default methods of exported traits need to all be\n+                    // accessible.\n+                    ast::item_trait(_, _, ref methods) => {\n+                        for method in methods.iter() {\n+                            match *method {\n+                                ast::required(*) => {}\n+                                ast::provided(ref method) => {\n+                                    self.worklist.push(method.id);\n                                 }\n                             }\n                         }\n+                    }\n \n-                        // These are normal, nothing reachable about these\n-                        // inherently and their children are already in the\n-                        // worklist\n-                        ast::item_static(*) | ast::item_ty(*) |\n-                            ast::item_mod(*) | ast::item_foreign_mod(*) => {}\n+                    // These are normal, nothing reachable about these\n+                    // inherently and their children are already in the\n+                    // worklist\n+                    ast::item_static(*) | ast::item_ty(*) |\n+                        ast::item_mod(*) | ast::item_foreign_mod(*) => {}\n \n-                        _ => {\n-                            self.tcx.sess.span_bug(item.span,\n-                                                   \"found non-function item \\\n-                                                    in worklist?!\")\n-                        }\n+                    _ => {\n+                        self.tcx.sess.span_bug(item.span,\n+                                               \"found non-function item \\\n+                                                in worklist?!\")\n                     }\n                 }\n-                Some(&ast_map::node_trait_method(trait_method, _, _)) => {\n-                    match *trait_method {\n-                        ast::required(*) => {\n-                            // Keep going, nothing to get exported\n-                        }\n-                        ast::provided(ref method) => {\n-                            visit::walk_block(&mut visitor, &method.body, ())\n-                        }\n+            }\n+            ast_map::node_trait_method(trait_method, _, _) => {\n+                match *trait_method {\n+                    ast::required(*) => {\n+                        // Keep going, nothing to get exported\n                     }\n-                }\n-                Some(&ast_map::node_method(method, did, _)) => {\n-                    if method_might_be_inlined(self.tcx, method, did) {\n-                        visit::walk_block(&mut visitor, &method.body, ())\n+                    ast::provided(ref method) => {\n+                        visit::walk_block(visitor, &method.body, ())\n                     }\n                 }\n-                // Nothing to recurse on for these\n-                Some(&ast_map::node_foreign_item(*)) |\n-                Some(&ast_map::node_variant(*)) |\n-                Some(&ast_map::node_struct_ctor(*)) => {}\n-                Some(_) => {\n-                    let ident_interner = token::get_ident_interner();\n-                    let desc = ast_map::node_id_to_str(self.tcx.items,\n-                                                       search_item,\n-                                                       ident_interner);\n-                    self.tcx.sess.bug(format!(\"found unexpected thingy in \\\n-                                               worklist: {}\",\n-                                               desc))\n-                }\n-                None if search_item == ast::CRATE_NODE_ID => {}\n-                None => {\n-                    self.tcx.sess.bug(format!(\"found unmapped ID in worklist: \\\n-                                               {}\",\n-                                              search_item))\n+            }\n+            ast_map::node_method(method, did, _) => {\n+                if method_might_be_inlined(self.tcx, method, did) {\n+                    visit::walk_block(visitor, &method.body, ())\n                 }\n             }\n+            // Nothing to recurse on for these\n+            ast_map::node_foreign_item(*) |\n+            ast_map::node_variant(*) |\n+            ast_map::node_struct_ctor(*) => {}\n+            _ => {\n+                let ident_interner = token::get_ident_interner();\n+                let desc = ast_map::node_id_to_str(self.tcx.items,\n+                                                   search_item,\n+                                                   ident_interner);\n+                self.tcx.sess.bug(format!(\"found unexpected thingy in \\\n+                                           worklist: {}\",\n+                                           desc))\n+            }\n         }\n     }\n "}, {"sha": "6c1a50031215c28ab0581afc7cddb01bddaf9cb5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b702cf7f7b67e3076091cdf12750551f3830c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b702cf7f7b67e3076091cdf12750551f3830c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6c8b702cf7f7b67e3076091cdf12750551f3830c", "patch": "@@ -2294,7 +2294,7 @@ fn finish_register_fn(ccx: @mut CrateContext, sp: Span, sym: ~str, node_id: ast:\n                       llfn: ValueRef) {\n     ccx.item_symbols.insert(node_id, sym);\n \n-    if !*ccx.sess.building_library {\n+    if !ccx.reachable.contains(&node_id) {\n         lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     }\n \n@@ -2504,7 +2504,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                                     llvm::LLVMAddGlobal(ccx.llmod, llty, buf)\n                                 };\n \n-                                if !*ccx.sess.building_library {\n+                                if !ccx.reachable.contains(&id) {\n                                     lib::llvm::SetLinkage(g, lib::llvm::InternalLinkage);\n                                 }\n "}, {"sha": "7af832a7bac5e04ad36c110777fd5f50f1c545a2", "filename": "src/test/run-pass/extern-fn-reachable.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b702cf7f7b67e3076091cdf12750551f3830c/src%2Ftest%2Frun-pass%2Fextern-fn-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b702cf7f7b67e3076091cdf12750551f3830c/src%2Ftest%2Frun-pass%2Fextern-fn-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-fn-reachable.rs?ref=6c8b702cf7f7b67e3076091cdf12750551f3830c", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// xfail-linux apparently dlsym doesn't work on program symbols?\n+// xfail-android apparently dlsym doesn't work on program symbols?\n+// xfail-freebsd apparently dlsym doesn't work on program symbols?\n+\n+use std::unstable::dynamic_lib::DynamicLibrary;\n+\n+#[no_mangle] pub extern \"C\" fn fun1() {}\n+#[no_mangle] extern \"C\" fn fun2() {}\n+\n+mod foo {\n+    #[no_mangle] pub extern \"C\" fn fun3() {}\n+}\n+pub mod bar {\n+    #[no_mangle] pub extern \"C\" fn fun4() {}\n+}\n+\n+#[no_mangle] pub fn fun5() {}\n+\n+fn main() {\n+    unsafe {\n+        let a = DynamicLibrary::open(None).unwrap();\n+        assert!(a.symbol::<int>(\"fun1\").is_ok());\n+        assert!(a.symbol::<int>(\"fun2\").is_err());\n+        assert!(a.symbol::<int>(\"fun3\").is_err());\n+        assert!(a.symbol::<int>(\"fun4\").is_ok());\n+        assert!(a.symbol::<int>(\"fun5\").is_err());\n+    }\n+}"}]}