{"sha": "314ed2df096858e7c174254b0babd5f949ae6d27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNGVkMmRmMDk2ODU4ZTdjMTc0MjU0YjBiYWJkNWY5NDlhZTZkMjc=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-19T22:58:02Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-20T00:17:14Z"}, "message": "Drop the Match prefix from the MatchSource variants", "tree": {"sha": "edf050af74a5fba642d5dd4c1d955fa073aa1f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf050af74a5fba642d5dd4c1d955fa073aa1f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314ed2df096858e7c174254b0babd5f949ae6d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314ed2df096858e7c174254b0babd5f949ae6d27", "html_url": "https://github.com/rust-lang/rust/commit/314ed2df096858e7c174254b0babd5f949ae6d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314ed2df096858e7c174254b0babd5f949ae6d27/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7023bea22c969a324d7d95d8794370410ff7c4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7023bea22c969a324d7d95d8794370410ff7c4c9", "html_url": "https://github.com/rust-lang/rust/commit/7023bea22c969a324d7d95d8794370410ff7c4c9"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "f5c7ac1647837bf7883c79800188326d18b44971", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -1157,9 +1157,9 @@ impl LintPass for UnusedParens {\n             ast::ExprIf(ref cond, _, _) => (cond, \"`if` condition\", true),\n             ast::ExprWhile(ref cond, _, _) => (cond, \"`while` condition\", true),\n             ast::ExprMatch(ref head, _, source) => match source {\n-                ast::MatchNormal => (head, \"`match` head expression\", true),\n-                ast::MatchIfLetDesugar => (head, \"`if let` head expression\", true),\n-                ast::MatchWhileLetDesugar => (head, \"`while let` head expression\", true),\n+                ast::MatchSource::Normal => (head, \"`match` head expression\", true),\n+                ast::MatchSource::IfLetDesugar { .. } => (head, \"`if let` head expression\", true),\n+                ast::MatchSource::WhileLetDesugar => (head, \"`while let` head expression\", true),\n             },\n             ast::ExprRet(Some(ref value)) => (value, \"`return` value\", false),\n             ast::ExprAssign(_, ref value) => (value, \"assigned value\", false),"}, {"sha": "ca338f5d02add853eaa96900b954d94711ba9acf", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -307,7 +307,7 @@ fn check_arms(cx: &MatchCheckCtxt,\n             match is_useful(cx, &seen, v.as_slice(), LeaveOutWitness) {\n                 NotUseful => {\n                     match source {\n-                        ast::MatchIfLetDesugar => {\n+                        ast::MatchSource::IfLetDesugar { .. } => {\n                             if printed_if_let_err {\n                                 // we already printed an irrefutable if-let pattern error.\n                                 // We don't want two, that's just confusing.\n@@ -321,15 +321,15 @@ fn check_arms(cx: &MatchCheckCtxt,\n                             }\n                         },\n \n-                        ast::MatchWhileLetDesugar => {\n+                        ast::MatchSource::WhileLetDesugar => {\n                             // find the first arm pattern so we can use its span\n                             let &(ref first_arm_pats, _) = &arms[0];\n                             let first_pat = &first_arm_pats[0];\n                             let span = first_pat.span;\n                             span_err!(cx.tcx.sess, span, E0165, \"irrefutable while-let pattern\");\n                         },\n \n-                        ast::MatchNormal => {\n+                        ast::MatchSource::Normal => {\n                             span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\")\n                         },\n                     }"}, {"sha": "71146918d995509da9a4acc8124e82523067f86e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -93,8 +93,9 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n               ast::ExprMethodCall(..) => {\n                 explain_span(cx, \"method call\", expr.span)\n               },\n-              ast::ExprMatch(_, _, ast::MatchIfLetDesugar) => explain_span(cx, \"if let\", expr.span),\n-              ast::ExprMatch(_, _, ast::MatchWhileLetDesugar) => {\n+              ast::ExprMatch(_, _, ast::MatchSource::IfLetDesugar { .. }) =>\n+                  explain_span(cx, \"if let\", expr.span),\n+              ast::ExprMatch(_, _, ast::MatchSource::WhileLetDesugar) => {\n                   explain_span(cx, \"while let\", expr.span)\n               },\n               ast::ExprMatch(..) => explain_span(cx, \"match\", expr.span),"}, {"sha": "3b48808b3620f12592999be4a13f3b53a357f4d1", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -293,7 +293,8 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         } else {\n             let (origin, expected, found) = match match_src {\n                 /* if-let construct without an else block */\n-                ast::MatchIfLetDesugar(contains_else_arm) if !contains_else_arm => (\n+                ast::MatchSource::IfLetDesugar { contains_else_clause }\n+                if !contains_else_clause => (\n                     infer::IfExpressionWithNoElse(expr.span),\n                     bty,\n                     result_ty,"}, {"sha": "cb0254a7ec587ab4da869c95de7d9eba2dd68186", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -32,7 +32,6 @@ pub use self::LitIntType::*;\n pub use self::LocalSource::*;\n pub use self::Mac_::*;\n pub use self::MacStmtStyle::*;\n-pub use self::MatchSource::*;\n pub use self::MetaItem_::*;\n pub use self::Method_::*;\n pub use self::Mutability::*;\n@@ -753,9 +752,9 @@ pub struct QPath {\n \n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MatchSource {\n-    MatchNormal,\n-    MatchIfLetDesugar(bool /* contains_else_arm */),\n-    MatchWhileLetDesugar,\n+    Normal,\n+    IfLetDesugar { contains_else_clause: bool },\n+    WhileLetDesugar,\n }\n \n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]"}, {"sha": "9d4992f7453d0ab638982fa8756b6db6f6a43c23", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -868,7 +868,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> {\n-        self.expr(span, ast::ExprMatch(arg, arms, ast::MatchNormal))\n+        self.expr(span, ast::ExprMatch(arg, arms, ast::MatchSource::Normal))\n     }\n \n     fn expr_if(&self, span: Span, cond: P<ast::Expr>,"}, {"sha": "bf19eecbf652163c5eb6b99c4a81f666875bf432", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -97,7 +97,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             // `match <expr> { ... }`\n             let arms = vec![pat_arm, break_arm];\n             let match_expr = fld.cx.expr(span,\n-                                         ast::ExprMatch(expr, arms, ast::MatchWhileLetDesugar));\n+                                    ast::ExprMatch(expr, arms, ast::MatchSource::WhileLetDesugar));\n \n             // `[opt_ident]: loop { ... }`\n             let loop_block = fld.cx.block_expr(match_expr);\n@@ -158,6 +158,8 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                 arms\n             };\n \n+            let contains_else_clause = elseopt.is_some();\n+\n             // `_ => [<elseopt> | ()]`\n             let else_arm = {\n                 let pat_under = fld.cx.pat_wild(span);\n@@ -170,9 +172,11 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             arms.extend(else_if_arms.into_iter());\n             arms.push(else_arm);\n \n-            let match_expr = fld.cx.expr(span, ast::ExprMatch(expr,\n-                                                              arms,\n-                                                    ast::MatchIfLetDesugar(elseopt.is_some())));\n+            let match_expr = fld.cx.expr(span,\n+                                         ast::ExprMatch(expr, arms,\n+                                                ast::MatchSource::IfLetDesugar {\n+                                                    contains_else_clause: contains_else_clause,\n+                                                }));\n             fld.fold_expr(match_expr)\n         }\n "}, {"sha": "b6efbecc78a0e7ac7e66d72424c464be9b7a8f15", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/314ed2df096858e7c174254b0babd5f949ae6d27/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=314ed2df096858e7c174254b0babd5f949ae6d27", "patch": "@@ -41,7 +41,7 @@ use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n use ast::{LitStr, LitInt, Local, LocalLet};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n-use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, MatchNormal};\n+use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, MatchSource};\n use ast::{Method, MutTy, BiMul, Mutability};\n use ast::{MethodImplItem, NamedField, UnNeg, NoReturn, NodeId, UnNot};\n use ast::{Pat, PatEnum, PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n@@ -3114,7 +3114,7 @@ impl<'a> Parser<'a> {\n         }\n         let hi = self.span.hi;\n         self.bump();\n-        return self.mk_expr(lo, hi, ExprMatch(discriminant, arms, MatchNormal));\n+        return self.mk_expr(lo, hi, ExprMatch(discriminant, arms, MatchSource::Normal));\n     }\n \n     pub fn parse_arm(&mut self) -> Arm {"}]}