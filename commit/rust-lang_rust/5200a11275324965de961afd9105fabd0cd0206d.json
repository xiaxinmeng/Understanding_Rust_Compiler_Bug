{"sha": "5200a11275324965de961afd9105fabd0cd0206d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDBhMTEyNzUzMjQ5NjVkZTk2MWFmZDkxMDVmYWJkMGNkMDIwNmQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-10T02:17:40Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-10T02:17:40Z"}, "message": "Improve proc-macro def ids.", "tree": {"sha": "cddd86970cc1d7f13892dccd4cbae580ebacc557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cddd86970cc1d7f13892dccd4cbae580ebacc557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5200a11275324965de961afd9105fabd0cd0206d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5200a11275324965de961afd9105fabd0cd0206d", "html_url": "https://github.com/rust-lang/rust/commit/5200a11275324965de961afd9105fabd0cd0206d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5200a11275324965de961afd9105fabd0cd0206d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b06438d8349c1a6bbeb29c2a1bd874553a8625c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b06438d8349c1a6bbeb29c2a1bd874553a8625c", "html_url": "https://github.com/rust-lang/rust/commit/7b06438d8349c1a6bbeb29c2a1bd874553a8625c"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "2fa25271dbf685018f4e6ccdd3fc5db23cd30af4", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5200a11275324965de961afd9105fabd0cd0206d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5200a11275324965de961afd9105fabd0cd0206d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5200a11275324965de961afd9105fabd0cd0206d", "patch": "@@ -44,7 +44,7 @@ use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, NodeId};\n use syntax::codemap;\n-use syntax_pos::{self, Span, BytePos, Pos};\n+use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Decoder<'a>,\n@@ -507,7 +507,12 @@ impl<'tcx> EntryKind<'tcx> {\n }\n \n impl<'a, 'tcx> CrateMetadata {\n+    fn is_proc_macro(&self, id: DefIndex) -> bool {\n+        self.proc_macros.is_some() && id != CRATE_DEF_INDEX\n+    }\n+\n     fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n+        assert!(!self.is_proc_macro(item_id));\n         self.root.index.lookup(self.blob.raw_bytes(), item_id)\n     }\n \n@@ -540,18 +545,17 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_def(&self, index: DefIndex) -> Option<Def> {\n-        if self.proc_macros.is_some() {\n-            Some(match index {\n-                CRATE_DEF_INDEX => Def::Mod(self.local_def_id(index)),\n-                _ => Def::Macro(self.local_def_id(index)),\n-            })\n-        } else {\n-            self.entry(index).kind.to_def(self.local_def_id(index))\n+        match self.is_proc_macro(index) {\n+            true => Some(Def::Macro(self.local_def_id(index))),\n+            false => self.entry(index).kind.to_def(self.local_def_id(index)),\n         }\n     }\n \n     pub fn get_span(&self, index: DefIndex, sess: &Session) -> Span {\n-        self.entry(index).span.decode((self, sess))\n+        match self.is_proc_macro(index) {\n+            true => DUMMY_SP,\n+            false => self.entry(index).span.decode((self, sess)),\n+        }\n     }\n \n     pub fn get_trait_def(&self,\n@@ -662,23 +666,23 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> {\n-        match self.proc_macros {\n-            Some(_) if id != CRATE_DEF_INDEX => None,\n-            _ => self.entry(id).stability.map(|stab| stab.decode(self)),\n+        match self.is_proc_macro(id) {\n+            true => None,\n+            false => self.entry(id).stability.map(|stab| stab.decode(self)),\n         }\n     }\n \n     pub fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n-        match self.proc_macros {\n-            Some(_) if id != CRATE_DEF_INDEX => None,\n-            _ => self.entry(id).deprecation.map(|depr| depr.decode(self)),\n+        match self.is_proc_macro(id) {\n+            true => None,\n+            false => self.entry(id).deprecation.map(|depr| depr.decode(self)),\n         }\n     }\n \n     pub fn get_visibility(&self, id: DefIndex) -> ty::Visibility {\n-        match self.proc_macros {\n-            Some(_) => ty::Visibility::Public,\n-            _ => self.entry(id).visibility,\n+        match self.is_proc_macro(id) {\n+            true => ty::Visibility::Public,\n+            false => self.entry(id).visibility,\n         }\n     }\n \n@@ -824,6 +828,7 @@ impl<'a, 'tcx> CrateMetadata {\n                               id: DefIndex)\n                               -> Option<&'tcx InlinedItem> {\n         debug!(\"Looking up item: {:?}\", id);\n+        if self.is_proc_macro(id) { return None; }\n         let item_doc = self.entry(id);\n         let item_did = self.local_def_id(id);\n         let parent_def_id = self.local_def_id(self.def_key(id).parent.unwrap());\n@@ -836,14 +841,18 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn is_item_mir_available(&self, id: DefIndex) -> bool {\n+        !self.is_proc_macro(id) &&\n         self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n     }\n \n     pub fn maybe_get_item_mir(&self,\n                               tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: DefIndex)\n                               -> Option<Mir<'tcx>> {\n-        self.entry(id).mir.map(|mir| mir.decode((self, tcx)))\n+        match self.is_proc_macro(id) {\n+            true => None,\n+            false => self.entry(id).mir.map(|mir| mir.decode((self, tcx))),\n+        }\n     }\n \n     pub fn get_associated_item(&self, id: DefIndex) -> Option<ty::AssociatedItem> {\n@@ -919,7 +928,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_item_attrs(&self, node_id: DefIndex) -> Vec<ast::Attribute> {\n-        if self.proc_macros.is_some() && node_id != CRATE_DEF_INDEX {\n+        if self.is_proc_macro(node_id) {\n             return Vec::new();\n         }\n         // The attributes for a tuple struct are attached to the definition, not the ctor;\n@@ -1105,15 +1114,26 @@ impl<'a, 'tcx> CrateMetadata {\n \n     pub fn def_key(&self, id: DefIndex) -> hir_map::DefKey {\n         debug!(\"def_key: id={:?}\", id);\n-        self.entry(id).def_key.decode(self)\n+        if self.is_proc_macro(id) {\n+            let name = self.proc_macros.as_ref().unwrap()[id.as_usize() - 1].0;\n+            hir_map::DefKey {\n+                parent: Some(CRATE_DEF_INDEX),\n+                disambiguated_data: hir_map::DisambiguatedDefPathData {\n+                    data: hir_map::DefPathData::MacroDef(name.as_str()),\n+                    disambiguator: 0,\n+                },\n+            }\n+        } else {\n+            self.entry(id).def_key.decode(self)\n+        }\n     }\n \n     // Returns the path leading to the thing with this `id`. Note that\n     // some def-ids don't wind up in the metadata, so `def_path` sometimes\n     // returns `None`\n     pub fn def_path(&self, id: DefIndex) -> Option<hir_map::DefPath> {\n         debug!(\"def_path(id={:?})\", id);\n-        if self.maybe_entry(id).is_some() {\n+        if self.is_proc_macro(id) || self.maybe_entry(id).is_some() {\n             Some(hir_map::DefPath::make(self.cnum, id, |parent| self.def_key(parent)))\n         } else {\n             None"}]}