{"sha": "aa67deff3303a14fa43e5e4693338c0b9f409e9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNjdkZWZmMzMwM2ExNGZhNDNlNWU0NjkzMzM4YzBiOWY0MDllOWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-26T10:05:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-27T11:09:16Z"}, "message": "remove sty_by_ref, though traces still remain due to dtors", "tree": {"sha": "1cd7ae8f8c06713dcd93667f59108202192d1b95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd7ae8f8c06713dcd93667f59108202192d1b95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa67deff3303a14fa43e5e4693338c0b9f409e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa67deff3303a14fa43e5e4693338c0b9f409e9d", "html_url": "https://github.com/rust-lang/rust/commit/aa67deff3303a14fa43e5e4693338c0b9f409e9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa67deff3303a14fa43e5e4693338c0b9f409e9d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28885635108c6def3c2503cbcaeba90fbd011f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/28885635108c6def3c2503cbcaeba90fbd011f90", "html_url": "https://github.com/rust-lang/rust/commit/28885635108c6def3c2503cbcaeba90fbd011f90"}], "stats": {"total": 106, "additions": 18, "deletions": 88}, "files": [{"sha": "010ba4d25229118c9c8dd52fad6880e865dd16e7", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -630,7 +630,6 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n     let self_ty_kind = string[0];\n     match self_ty_kind as char {\n         's' => { return ast::sty_static; }\n-        'r' => { return ast::sty_by_ref; }\n         'v' => { return ast::sty_value; }\n         '@' => { return ast::sty_box(get_mutability(string[1])); }\n         '~' => { return ast::sty_uniq(get_mutability(string[1])); }"}, {"sha": "419fe98f3d524acfee1a49fb6e1442e81dbf502c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -410,9 +410,6 @@ fn encode_self_type(ebml_w: writer::Encoder, self_type: ast::self_ty_) {\n         sty_static => {\n             ebml_w.writer.write(&[ 's' as u8 ]);\n         }\n-        sty_by_ref => {\n-            ebml_w.writer.write(&[ 'r' as u8 ]);\n-        }\n         sty_value => {\n             ebml_w.writer.write(&[ 'v' as u8 ]);\n         }"}, {"sha": "d18aa1c12dfaeb68276265b3215cb632bdfba32d", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -180,21 +180,6 @@ fn req_loans_in_expr(ex: @ast::expr,\n             }\n         }\n \n-        match self.bccx.method_map.find(&ex.id) {\n-            Some(ref method_map_entry) => {\n-                match (*method_map_entry).explicit_self {\n-                    ast::sty_by_ref => {\n-                        let rcvr_cmt = self.bccx.cat_expr(rcvr);\n-                        self.guarantee_valid(rcvr_cmt, m_imm, scope_r);\n-                    }\n-                    _ => {} // Nothing to do.\n-                }\n-            }\n-            None => {\n-                self.tcx().sess.span_bug(ex.span, ~\"no method map entry\");\n-            }\n-        }\n-\n         visit::visit_expr(ex, self, vt);\n       }\n "}, {"sha": "15fc4317bf3a83ca2db32c547456df09eec1ae5c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -467,11 +467,6 @@ fn visit_fn(fk: &visit::fn_kind,\n     match *fk {\n         fk_method(_, _, method) => {\n             match method.self_ty.node {\n-                sty_by_ref => {\n-                    fn_maps.add_variable(Arg(method.self_id,\n-                                             special_idents::self_,\n-                                             by_ref));\n-                }\n                 sty_value | sty_region(*) | sty_box(_) | sty_uniq(_) => {\n                     fn_maps.add_variable(Arg(method.self_id,\n                                              special_idents::self_,"}, {"sha": "d97ec6b99051d0a4117c6fd2e783b9b32e2cb556", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -737,20 +737,7 @@ pub impl VisitContext {\n                     receiver_expr: @expr,\n                     visitor: vt<VisitContext>)\n     {\n-        let callee_mode = match self.method_map.find(&expr_id) {\n-            Some(ref method_map_entry) => {\n-                match method_map_entry.explicit_self {\n-                    sty_by_ref => by_ref,\n-                    _ => by_copy\n-                }\n-            }\n-            None => {\n-                self.tcx.sess.span_bug(\n-                    span,\n-                    ~\"no method map entry\");\n-            }\n-        };\n-        self.use_fn_arg(callee_mode, receiver_expr, visitor);\n+        self.use_fn_arg(by_copy, receiver_expr, visitor);\n     }\n \n     fn use_fn_args(&self,"}, {"sha": "66dc1a37e514ae3553cc3619a1e2c0f1f34d2699", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -50,7 +50,7 @@ use syntax::ast::{named_field, ne, neg, node_id, pat, pat_enum, pat_ident};\n use syntax::ast::{path, pat_box, pat_lit, pat_range, pat_struct};\n use syntax::ast::{pat_tup, pat_uniq, pat_wild, prim_ty, private, provided};\n use syntax::ast::{public, required, rem, self_ty_, shl, shr, stmt_decl};\n-use syntax::ast::{struct_dtor, struct_field, struct_variant_kind, sty_by_ref};\n+use syntax::ast::{struct_dtor, struct_field, struct_variant_kind};\n use syntax::ast::{sty_static, subtract, trait_ref, tuple_variant_kind, Ty};\n use syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64, ty_float, ty_i};\n use syntax::ast::{ty_i16, ty_i32, ty_i64, ty_i8, ty_int, TyParam, ty_path};\n@@ -3792,7 +3792,6 @@ pub impl Resolver {\n         // we only have self ty if it is a non static method\n         let self_binding = match method.self_ty.node {\n           sty_static => { NoSelfBinding }\n-          sty_by_ref => { HasSelfBinding(method.self_id, true) }\n           _ => { HasSelfBinding(method.self_id, false) }\n         };\n "}, {"sha": "c37702e8d2b09584a5d025931db33aaa173a6251", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -596,7 +596,7 @@ pub fn trans_trait_callee(bcx: block,\n \n     let llpair = match explicit_self {\n         ast::sty_region(*) => Load(bcx, llpair),\n-        ast::sty_static | ast::sty_by_ref | ast::sty_value |\n+        ast::sty_static | ast::sty_value |\n         ast::sty_box(_) | ast::sty_uniq(_) => llpair\n     };\n \n@@ -645,21 +645,6 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n         ast::sty_static => {\n             bcx.tcx().sess.bug(~\"shouldn't see static method here\");\n         }\n-        ast::sty_by_ref => {\n-            // We need to pass a pointer to a pointer to the payload.\n-            match store {\n-                ty::BoxTraitStore |\n-                ty::BareTraitStore |\n-                ty::UniqTraitStore => {\n-                    llself = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n-                }\n-                ty::RegionTraitStore(_) => {\n-                    llself = llbox;\n-                }\n-            }\n-\n-            self_mode = ast::by_ref;\n-        }\n         ast::sty_value => {\n             bcx.tcx().sess.bug(~\"methods with by-value self should not be \\\n                                called on objects\");"}, {"sha": "320f0206fb8714e92406b9e353e95b5114e1576c", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -99,7 +99,7 @@ use core::hashmap::linear::LinearSet;\n use core::result;\n use core::uint;\n use core::vec;\n-use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box};\n+use syntax::ast::{def_id, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast;\n@@ -527,7 +527,7 @@ pub impl<'self> LookupContext<'self> {\n             ast::sty_region(_) => {\n                 return; // inapplicable\n             }\n-            ast::sty_by_ref | ast::sty_region(_) => vstore_slice(r)\n+            ast::sty_region(_) => vstore_slice(r)\n             ast::sty_box(_) => vstore_box, // XXX NDM mutability\n             ast::sty_uniq(_) => vstore_uniq\n         }\n@@ -741,7 +741,7 @@ pub impl<'self> LookupContext<'self> {\n         // shouldn't really have to be.\n         let rcvr_substs = {\n             match self_decl {\n-                sty_static | sty_value | sty_by_ref |\n+                sty_static | sty_value |\n                 sty_box(_) | sty_uniq(_) => {\n                     self_substs\n                 }\n@@ -1327,7 +1327,7 @@ pub fn transform_self_type_for_method(tcx: ty::ctxt,\n         tcx.sess.bug(~\"calling transform_self_type_for_method on \\\n                        static method\");\n       }\n-      sty_by_ref | sty_value => {\n+      sty_value => {\n         impl_ty\n       }\n       sty_region(_, mutability) => {"}, {"sha": "8fa062d4980da7f27b8f04e1f02b5c9077c8539e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -1003,7 +1003,6 @@ impl to_bytes::IterBytes for ret_style {\n #[deriving(Eq)]\n pub enum self_ty_ {\n     sty_static,                                // no self\n-    sty_by_ref,                                // ``\n     sty_value,                                 // `self`\n     sty_region(Option<@Lifetime>, mutability), // `&'lt self`\n     sty_box(mutability),                       // `@self`"}, {"sha": "df4dd2735fcd1d5e83232de2e3864fcbd44de7d0", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -17,7 +17,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "531390035db814c50acde6e0f32b225e84f0caab", "filename": "src/libsyntax/ext/deriving/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -17,7 +17,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "528db0d10721db6e68dc4b84f13c9436ff8ca7f1", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -17,7 +17,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "21477d6e0675ed9b1a27266b9ba793cf2d2ee35c", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -20,7 +20,7 @@ use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n use ast::{named_field, or, pat, pat_ident, pat_wild, public, pure_fn};\n use ast::{stmt, struct_def, struct_variant_kind};\n-use ast::{sty_by_ref, sty_region, tuple_variant_kind, ty_nil, TyParam};\n+use ast::{sty_region, tuple_variant_kind, ty_nil, TyParam};\n use ast::{TyParamBound, ty_path, ty_rptr, unnamed_field, variant};\n use ext::base::ext_ctxt;\n use ext::build;"}, {"sha": "5d907c10984deef7a859d4814cae6839d70478ff", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -46,7 +46,7 @@ use ast::{rem, required};\n use ast::{ret_style, return_val, self_ty, shl, shr, stmt, stmt_decl};\n use ast::{stmt_expr, stmt_semi, stmt_mac, struct_def, struct_field};\n use ast::{struct_immutable, struct_mutable, struct_variant_kind, subtract};\n-use ast::{sty_box, sty_by_ref, sty_region, sty_static, sty_uniq, sty_value};\n+use ast::{sty_box, sty_region, sty_static, sty_uniq, sty_value};\n use ast::{token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok};\n use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n use ast::{ty_field, ty_fixed_length_vec, ty_closure, ty_bare_fn};\n@@ -471,8 +471,6 @@ pub impl Parser {\n         ) |p| {\n             let attrs = p.parse_outer_attributes();\n             let lo = p.span.lo;\n-            let is_static = p.parse_staticness();\n-            let static_sty = spanned(lo, p.span.hi, sty_static);\n \n             let vis = p.parse_visibility();\n             let pur = p.parse_fn_purity();\n@@ -487,12 +485,6 @@ pub impl Parser {\n                 // names to be left off if there is a definition...\n                 either::Left(p.parse_arg_general(false))\n             };\n-            // XXX: Wrong. Shouldn't allow both static and self_ty\n-            let self_ty = if is_static || self_ty.node == sty_by_ref {\n-                static_sty\n-            } else {\n-                self_ty\n-            };\n \n             let hi = p.last_span.hi;\n             debug!(\"parse_trait_methods(): trait method signature ends in \\\n@@ -2877,7 +2869,7 @@ pub impl Parser {\n                 p.expect_self_ident();\n                 cnstr(mutability)\n             } else {\n-                sty_by_ref\n+                sty_static\n             }\n         }\n \n@@ -2926,7 +2918,7 @@ pub impl Parser {\n                 self.expect_self_ident();\n                 sty_region(Some(lifetime), mutability)\n             } else {\n-                sty_by_ref\n+                sty_static\n             }\n         }\n \n@@ -2950,13 +2942,13 @@ pub impl Parser {\n             sty_value\n           }\n           _ => {\n-            sty_by_ref\n+            sty_static\n           }\n         };\n \n         // If we parsed a self type, expect a comma before the argument list.\n         let args_or_capture_items;\n-        if self_ty != sty_by_ref {\n+        if self_ty != sty_static {\n             match *self.token {\n                 token::COMMA => {\n                     self.bump();\n@@ -3058,7 +3050,6 @@ pub impl Parser {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n \n-        let is_static = self.parse_staticness();\n         let static_sty = spanned(lo, self.span.hi, sty_static);\n \n         let visa = self.parse_visibility();\n@@ -3068,12 +3059,6 @@ pub impl Parser {\n         let (self_ty, decl) = do self.parse_fn_decl_with_self() |p| {\n             p.parse_arg()\n         };\n-        // XXX: interaction between staticness, self_ty is broken now\n-        let self_ty = if is_static || self_ty.node == sty_by_ref {\n-            static_sty\n-        } else {\n-            self_ty\n-        };\n \n         let (inner_attrs, body) = self.parse_inner_attrs_and_block(true);\n         let hi = body.span.hi;"}, {"sha": "a592319de0ed8537ecb16fd0f77bd00f9c31cad9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa67deff3303a14fa43e5e4693338c0b9f409e9d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=aa67deff3303a14fa43e5e4693338c0b9f409e9d", "patch": "@@ -1643,7 +1643,7 @@ pub fn print_pat(s: @ps, &&pat: @ast::pat, refutable: bool) {\n // Returns whether it printed anything\n pub fn print_self_ty(s: @ps, self_ty: ast::self_ty_) -> bool {\n     match self_ty {\n-        ast::sty_static | ast::sty_by_ref => { return false; }\n+        ast::sty_static => { return false; }\n         ast::sty_value => { word(s.s, ~\"self\"); }\n         ast::sty_region(lt, m) => {\n             word(s.s, ~\"&\");\n@@ -1669,7 +1669,7 @@ pub fn print_fn(s: @ps,\n                 opt_self_ty: Option<ast::self_ty_>,\n                 vis: ast::visibility) {\n     head(s, ~\"\");\n-    print_fn_header_info(s, opt_self_ty, purity, ast::Many, None, vis);\n+    print_fn_header_info(s, purity, ast::Many, None, vis);\n     nbsp(s);\n     print_ident(s, name);\n     print_generics(s, generics);\n@@ -2175,7 +2175,6 @@ pub fn print_opt_sigil(s: @ps, opt_sigil: Option<ast::Sigil>) {\n }\n \n pub fn print_fn_header_info(s: @ps,\n-                            opt_sty: Option<ast::self_ty_>,\n                             purity: ast::purity,\n                             onceness: ast::Onceness,\n                             opt_sigil: Option<ast::Sigil>,"}]}