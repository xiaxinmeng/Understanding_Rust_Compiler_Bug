{"sha": "dfdbf1b1333a920bd5ca25f47fbedea82df33b3e", "node_id": "C_kwDOAAsO6NoAKGRmZGJmMWIxMzMzYTkyMGJkNWNhMjVmNDdmYmVkZWE4MmRmMzNiM2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-26T22:24:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-26T22:24:00Z"}, "message": "Rollup merge of #111987 - lcnr:alias-relate-coherence, r=BoxyUwU\n\ndo not prefer substs relate during coherence\n\nr? ```@compiler-errors```", "tree": {"sha": "31c9e9e81ee2998453d21e9f90f16421d346f3bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c9e9e81ee2998453d21e9f90f16421d346f3bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkcTGACRBK7hj4Ov3rIwAA3kUIAJhWAEsIT+GzfbwvfeTll3lI\nEpPlh/d+NzUpDZxWl8FWP5Snobcz1M4LzDn4wdA/so/fDN7eTTzNt2499/v/SzEv\nVpkS9G/XbgjHOF7vTACS5oiSt0+fQ0zuSum4rN0kARqp5btqA1N+X3QGnMOgNAGT\nm4e6caWp9Q0HL36R6/kQ4Ip5b/GBcEBH5IugM1XXC0Xn6kWI8hqKnJNSoBmZ9IKS\nJKkXBgcoR5pEpoiYZCLYoO4IPwj9Anc6voER/A6tpKvb/NPQRgbpAmJzDSd970sn\neJpR8fNuWn7ryV7k1hHixuzv2uN4ew+HMD9MERUrpiPEOtxFUtxCbm++sxrbWoI=\n=G32W\n-----END PGP SIGNATURE-----\n", "payload": "tree 31c9e9e81ee2998453d21e9f90f16421d346f3bb\nparent a81ef8aa0808a74583f7ede012eafd067fb1e071\nparent b6b9611190905d75ad2abe3ae3f61835afc4c82c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685139840 +0200\ncommitter GitHub <noreply@github.com> 1685139840 +0200\n\nRollup merge of #111987 - lcnr:alias-relate-coherence, r=BoxyUwU\n\ndo not prefer substs relate during coherence\n\nr? ```@compiler-errors```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e", "html_url": "https://github.com/rust-lang/rust/commit/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a81ef8aa0808a74583f7ede012eafd067fb1e071", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81ef8aa0808a74583f7ede012eafd067fb1e071", "html_url": "https://github.com/rust-lang/rust/commit/a81ef8aa0808a74583f7ede012eafd067fb1e071"}, {"sha": "b6b9611190905d75ad2abe3ae3f61835afc4c82c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b9611190905d75ad2abe3ae3f61835afc4c82c", "html_url": "https://github.com/rust-lang/rust/commit/b6b9611190905d75ad2abe3ae3f61835afc4c82c"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "56a254d9c07e124cc9afda57e7b7bea7571ff9af", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdbf1b1333a920bd5ca25f47fbedea82df33b3e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=dfdbf1b1333a920bd5ca25f47fbedea82df33b3e", "patch": "@@ -231,13 +231,21 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n \n                 let mut candidates = Vec::new();\n                 // LHS normalizes-to RHS\n-                candidates.extend(\n-                    evaluate_normalizes_to(self, alias_lhs, rhs, direction, Invert::No).ok(),\n-                );\n+                candidates.extend(evaluate_normalizes_to(\n+                    self,\n+                    alias_lhs,\n+                    rhs,\n+                    direction,\n+                    Invert::No,\n+                ));\n                 // RHS normalizes-to RHS\n-                candidates.extend(\n-                    evaluate_normalizes_to(self, alias_rhs, lhs, direction, Invert::Yes).ok(),\n-                );\n+                candidates.extend(evaluate_normalizes_to(\n+                    self,\n+                    alias_rhs,\n+                    lhs,\n+                    direction,\n+                    Invert::Yes,\n+                ));\n                 // Relate via substs\n                 let subst_relate_response = self.probe(|ecx| {\n                     let span = tracing::span!(\n@@ -265,10 +273,18 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n \n                 if let Some(merged) = self.try_merge_responses(&candidates) {\n                     Ok(merged)\n-                } else if let Ok(subst_relate_response) = subst_relate_response {\n-                    Ok(subst_relate_response)\n                 } else {\n-                    self.flounder(&candidates)\n+                    // When relating two aliases and we have ambiguity, we prefer\n+                    // relating the generic arguments of the aliases over normalizing\n+                    // them. This is necessary for inference during typeck.\n+                    //\n+                    // As this is incomplete, we must not do so during coherence.\n+                    match (self.solver_mode(), subst_relate_response) {\n+                        (SolverMode::Normal, Ok(response)) => Ok(response),\n+                        (SolverMode::Normal, Err(NoSolution)) | (SolverMode::Coherence, _) => {\n+                            self.flounder(&candidates)\n+                        }\n+                    }\n                 }\n             }\n         }"}]}