{"sha": "e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZGMwMzVmOTJjMmU3NTNjMmE4YjJjYjZhNmU4MGRiZjJkZDVkMzQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-19T21:15:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-19T21:15:01Z"}, "message": "Rollup merge of #37285 - srinivasreddy:cfg, r=nikomatsakis\n\nrun rustfmt on control_flow_graph folder", "tree": {"sha": "394f9652830c38049562ecab11955fd1612079a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394f9652830c38049562ecab11955fd1612079a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "html_url": "https://github.com/rust-lang/rust/commit/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb74ee97b2210fb9f3f00bbbd3494180b0e527b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb74ee97b2210fb9f3f00bbbd3494180b0e527b", "html_url": "https://github.com/rust-lang/rust/commit/dfb74ee97b2210fb9f3f00bbbd3494180b0e527b"}, {"sha": "f1e4ae17b1a80119599e501e26fed0d7635b65f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e4ae17b1a80119599e501e26fed0d7635b65f7", "html_url": "https://github.com/rust-lang/rust/commit/f1e4ae17b1a80119599e501e26fed0d7635b65f7"}], "stats": {"total": 137, "additions": 48, "deletions": 89}, "files": [{"sha": "ab675db21503e2893e3144cb736c1055acc08cb1", "filename": "src/librustc_data_structures/control_flow_graph/dominators/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -57,9 +57,9 @@ pub fn dominators_given_rpo<G: ControlFlowGraph>(graph: &G,\n                     // (*)\n                     // (*) dominators for `pred` have been calculated\n                     new_idom = intersect_opt(&post_order_rank,\n-                                                  &immediate_dominators,\n-                                                  new_idom,\n-                                                  Some(pred));\n+                                             &immediate_dominators,\n+                                             new_idom,\n+                                             Some(pred));\n                 }\n             }\n \n@@ -77,10 +77,10 @@ pub fn dominators_given_rpo<G: ControlFlowGraph>(graph: &G,\n }\n \n fn intersect_opt<Node: Idx>(post_order_rank: &IndexVec<Node, usize>,\n-                                      immediate_dominators: &IndexVec<Node, Option<Node>>,\n-                                      node1: Option<Node>,\n-                                      node2: Option<Node>)\n-                                      -> Option<Node> {\n+                            immediate_dominators: &IndexVec<Node, Option<Node>>,\n+                            node1: Option<Node>,\n+                            node2: Option<Node>)\n+                            -> Option<Node> {\n     match (node1, node2) {\n         (None, None) => None,\n         (Some(n), None) | (None, Some(n)) => Some(n),\n@@ -89,10 +89,10 @@ fn intersect_opt<Node: Idx>(post_order_rank: &IndexVec<Node, usize>,\n }\n \n fn intersect<Node: Idx>(post_order_rank: &IndexVec<Node, usize>,\n-                                  immediate_dominators: &IndexVec<Node, Option<Node>>,\n-                                  mut node1: Node,\n-                                  mut node2: Node)\n-                                  -> Node {\n+                        immediate_dominators: &IndexVec<Node, Option<Node>>,\n+                        mut node1: Node,\n+                        mut node2: Node)\n+                        -> Node {\n     while node1 != node2 {\n         while post_order_rank[node1] < post_order_rank[node2] {\n             node1 = immediate_dominators[node1].unwrap();\n@@ -142,9 +142,9 @@ impl<Node: Idx> Dominators<Node> {\n                 \"node {:?} is not reachable\",\n                 node2);\n         intersect::<Node>(&self.post_order_rank,\n-                  &self.immediate_dominators,\n-                  node1,\n-                  node2)\n+                          &self.immediate_dominators,\n+                          node1,\n+                          node2)\n     }\n \n     pub fn mutual_dominator<I>(&self, iter: I) -> Option<Node>"}, {"sha": "0af878cac2df1d23f0706aab4b0693aa22293b39", "filename": "src/librustc_data_structures/control_flow_graph/dominators/test.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Ftest.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -14,12 +14,7 @@ use super::*;\n \n #[test]\n fn diamond() {\n-    let graph = TestGraph::new(0, &[\n-        (0, 1),\n-        (0, 2),\n-        (1, 3),\n-        (2, 3),\n-    ]);\n+    let graph = TestGraph::new(0, &[(0, 1), (0, 2), (1, 3), (2, 3)]);\n \n     let dominators = dominators(&graph);\n     let immediate_dominators = dominators.all_immediate_dominators();\n@@ -32,17 +27,9 @@ fn diamond() {\n #[test]\n fn paper() {\n     // example from the paper:\n-    let graph = TestGraph::new(6, &[\n-        (6, 5),\n-        (6, 4),\n-        (5, 1),\n-        (4, 2),\n-        (4, 3),\n-        (1, 2),\n-        (2, 3),\n-        (3, 2),\n-        (2, 1),\n-    ]);\n+    let graph = TestGraph::new(6,\n+                               &[(6, 5), (6, 4), (5, 1), (4, 2), (4, 3), (1, 2), (2, 3), (3, 2),\n+                                 (2, 1)]);\n \n     let dominators = dominators(&graph);\n     let immediate_dominators = dominators.all_immediate_dominators();\n@@ -54,4 +41,3 @@ fn paper() {\n     assert_eq!(immediate_dominators[5], Some(6));\n     assert_eq!(immediate_dominators[6], Some(6));\n }\n-"}, {"sha": "dca45602f17c45b58223353d2d83984c7012d78e", "filename": "src/librustc_data_structures/control_flow_graph/iterate/test.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fiterate%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fiterate%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fiterate%2Ftest.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -15,12 +15,7 @@ use super::*;\n \n #[test]\n fn diamond_post_order() {\n-    let graph = TestGraph::new(0, &[\n-        (0, 1),\n-        (0, 2),\n-        (1, 3),\n-        (2, 3),\n-    ]);\n+    let graph = TestGraph::new(0, &[(0, 1), (0, 2), (1, 3), (2, 3)]);\n \n     let result = post_order_from(&graph, 0);\n     assert_eq!(result, vec![3, 1, 2, 0]);\n@@ -33,16 +28,8 @@ fn rev_post_order_inner_loop() {\n     //      ^     ^    v      |\n     //      |     6 <- 4      |\n     //      +-----------------+\n-    let graph = TestGraph::new(0, &[\n-        (0, 1),\n-        (1, 2),\n-        (2, 3),\n-        (3, 5),\n-        (3, 1),\n-        (2, 4),\n-        (4, 6),\n-        (6, 2),\n-    ]);\n+    let graph = TestGraph::new(0,\n+                               &[(0, 1), (1, 2), (2, 3), (3, 5), (3, 1), (2, 4), (4, 6), (6, 2)]);\n \n     let rev_graph = TransposedGraph::new(&graph);\n \n@@ -52,4 +39,3 @@ fn rev_post_order_inner_loop() {\n     let result = post_order_from_to(&rev_graph, 3, Some(1));\n     assert_eq!(result, vec![4, 6, 2, 3]);\n }\n-"}, {"sha": "eb6839df6274f258fea86f8191cdccb685e0f638", "filename": "src/librustc_data_structures/control_flow_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fmod.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -36,10 +36,10 @@ pub trait ControlFlowGraph\n \n pub trait GraphPredecessors<'graph> {\n     type Item;\n-    type Iter: Iterator<Item=Self::Item>;\n+    type Iter: Iterator<Item = Self::Item>;\n }\n \n pub trait GraphSuccessors<'graph> {\n     type Item;\n-    type Iter: Iterator<Item=Self::Item>;\n-}\n\\ No newline at end of file\n+    type Iter: Iterator<Item = Self::Item>;\n+}"}, {"sha": "24210ebb95d3d14f97724a1cf197014ee9c43244", "filename": "src/librustc_data_structures/control_flow_graph/reachable/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freachable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freachable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freachable%2Fmod.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -19,8 +19,7 @@ use super::super::indexed_vec::{IndexVec, Idx};\n #[cfg(test)]\n mod test;\n \n-pub fn reachable<G: ControlFlowGraph>(graph: &G)\n-                                      -> Reachability<G::Node> {\n+pub fn reachable<G: ControlFlowGraph>(graph: &G) -> Reachability<G::Node> {\n     let reverse_post_order = reverse_post_order(graph, graph.start_node());\n     reachable_given_rpo(graph, &reverse_post_order)\n }\n@@ -53,12 +52,10 @@ pub struct Reachability<Node: Idx> {\n impl<Node: Idx> Reachability<Node> {\n     fn new<G: ControlFlowGraph>(graph: &G) -> Self {\n         let num_nodes = graph.num_nodes();\n-        Reachability {\n-            bits: IndexVec::from_elem_n(BitVector::new(num_nodes), num_nodes),\n-        }\n+        Reachability { bits: IndexVec::from_elem_n(BitVector::new(num_nodes), num_nodes) }\n     }\n \n-    pub fn can_reach(&self, source: Node, target: Node)-> bool {\n+    pub fn can_reach(&self, source: Node, target: Node) -> bool {\n         let bit: usize = target.index();\n         self.bits[source].contains(bit)\n     }"}, {"sha": "ef45deeaafc78f30268c29af743f4509de58125a", "filename": "src/librustc_data_structures/control_flow_graph/reachable/test.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freachable%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freachable%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freachable%2Ftest.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -17,15 +17,7 @@ fn test1() {\n     // 0 -> 1 -> 2 -> 3\n     //      ^    v\n     //      6 <- 4 -> 5\n-    let graph = TestGraph::new(0, &[\n-        (0, 1),\n-        (1, 2),\n-        (2, 3),\n-        (2, 4),\n-        (4, 5),\n-        (4, 6),\n-        (6, 1),\n-    ]);\n+    let graph = TestGraph::new(0, &[(0, 1), (1, 2), (2, 3), (2, 4), (4, 5), (4, 6), (6, 1)]);\n     let reachable = reachable(&graph);\n     assert!((0..6).all(|i| reachable.can_reach(0, i)));\n     assert!((1..6).all(|i| reachable.can_reach(1, i)));\n@@ -43,15 +35,9 @@ fn test2() {\n     // 30 -> 31 -> 32 -> 33\n     //       ^      v\n     //       36 <- 34 -> 35\n-    let graph = TestGraph::new(30, &[\n-        (30, 31),\n-        (31, 32),\n-        (32, 33),\n-        (32, 34),\n-        (34, 35),\n-        (34, 36),\n-        (36, 31),\n-    ]);\n+    let graph = TestGraph::new(30,\n+                               &[(30, 31), (31, 32), (32, 33), (32, 34), (34, 35), (34, 36),\n+                                 (36, 31)]);\n     let reachable = reachable(&graph);\n     assert!((30..36).all(|i| reachable.can_reach(30, i)));\n     assert!((31..36).all(|i| reachable.can_reach(31, i)));"}, {"sha": "3b8b01f2ff43b5820daee85e5230dedf9d51085a", "filename": "src/librustc_data_structures/control_flow_graph/reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Freference.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -21,13 +21,13 @@ impl<'graph, G: ControlFlowGraph> ControlFlowGraph for &'graph G {\n         (**self).start_node()\n     }\n \n-    fn predecessors<'iter>(&'iter self, node: Self::Node)\n-                            -> <Self as GraphPredecessors<'iter>>::Iter {\n+    fn predecessors<'iter>(&'iter self,\n+                           node: Self::Node)\n+                           -> <Self as GraphPredecessors<'iter>>::Iter {\n         (**self).predecessors(node)\n     }\n \n-    fn successors<'iter>(&'iter self, node: Self::Node)\n-                          -> <Self as GraphSuccessors<'iter>>::Iter {\n+    fn successors<'iter>(&'iter self, node: Self::Node) -> <Self as GraphSuccessors<'iter>>::Iter {\n         (**self).successors(node)\n     }\n }"}, {"sha": "d48a6e684ad8e8f8258c4a43cd91d68c3fc4ce95", "filename": "src/librustc_data_structures/control_flow_graph/test.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftest.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -28,7 +28,7 @@ impl TestGraph {\n             num_nodes: start_node + 1,\n             start_node: start_node,\n             successors: HashMap::new(),\n-            predecessors: HashMap::new()\n+            predecessors: HashMap::new(),\n         };\n         for &(source, target) in edges {\n             graph.num_nodes = max(graph.num_nodes, source + 1);\n@@ -55,13 +55,13 @@ impl ControlFlowGraph for TestGraph {\n         self.num_nodes\n     }\n \n-    fn predecessors<'graph>(&'graph self, node: usize)\n+    fn predecessors<'graph>(&'graph self,\n+                            node: usize)\n                             -> <Self as GraphPredecessors<'graph>>::Iter {\n-       self.predecessors[&node].iter().cloned()\n+        self.predecessors[&node].iter().cloned()\n     }\n \n-    fn successors<'graph>(&'graph self, node: usize)\n-                            -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors<'graph>(&'graph self, node: usize) -> <Self as GraphSuccessors<'graph>>::Iter {\n         self.successors[&node].iter().cloned()\n     }\n }\n@@ -75,4 +75,3 @@ impl<'graph> GraphSuccessors<'graph> for TestGraph {\n     type Item = usize;\n     type Iter = iter::Cloned<slice::Iter<'graph, usize>>;\n }\n-"}, {"sha": "a1a117edb94fce9cd41e00d413b69c611275d1e2", "filename": "src/librustc_data_structures/control_flow_graph/transpose.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftranspose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftranspose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Ftranspose.rs?ref=e7dc035f92c2e753c2a8b2cb6a6e80dbf2dd5d34", "patch": "@@ -22,7 +22,10 @@ impl<G: ControlFlowGraph> TransposedGraph<G> {\n     }\n \n     pub fn with_start(base_graph: G, start_node: G::Node) -> Self {\n-        TransposedGraph { base_graph: base_graph, start_node: start_node }\n+        TransposedGraph {\n+            base_graph: base_graph,\n+            start_node: start_node,\n+        }\n     }\n }\n \n@@ -37,12 +40,14 @@ impl<G: ControlFlowGraph> ControlFlowGraph for TransposedGraph<G> {\n         self.start_node\n     }\n \n-    fn predecessors<'graph>(&'graph self, node: Self::Node)\n+    fn predecessors<'graph>(&'graph self,\n+                            node: Self::Node)\n                             -> <Self as GraphPredecessors<'graph>>::Iter {\n         self.base_graph.successors(node)\n     }\n \n-    fn successors<'graph>(&'graph self, node: Self::Node)\n+    fn successors<'graph>(&'graph self,\n+                          node: Self::Node)\n                           -> <Self as GraphSuccessors<'graph>>::Iter {\n         self.base_graph.predecessors(node)\n     }"}]}