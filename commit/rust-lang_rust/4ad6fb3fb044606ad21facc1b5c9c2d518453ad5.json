{"sha": "4ad6fb3fb044606ad21facc1b5c9c2d518453ad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDZmYjNmYjA0NDYwNmFkMjFmYWNjMWI1YzljMmQ1MTg0NTNhZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-07T22:41:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-07T22:41:04Z"}, "message": "Auto merge of #5140 - lzutao:cleanup-replace, r=flip1995\n\nMinor edit to text region replacement\n\nchangelog: none", "tree": {"sha": "bbf6409d46c2572a37f9ea887a88e83b6b881fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbf6409d46c2572a37f9ea887a88e83b6b881fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5", "html_url": "https://github.com/rust-lang/rust/commit/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "550affd763eb28c8756e12d294b180a659a00e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/550affd763eb28c8756e12d294b180a659a00e68", "html_url": "https://github.com/rust-lang/rust/commit/550affd763eb28c8756e12d294b180a659a00e68"}, {"sha": "cf58537bd672807f8aa2b65be0ad88fd5a77b4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf58537bd672807f8aa2b65be0ad88fd5a77b4f2", "html_url": "https://github.com/rust-lang/rust/commit/cf58537bd672807f8aa2b65be0ad88fd5a77b4f2"}], "stats": {"total": 103, "additions": 49, "deletions": 54}, "files": [{"sha": "3acecf9679100285846b218e00aa443f1c0f8602", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=4ad6fb3fb044606ad21facc1b5c9c2d518453ad5", "patch": "@@ -6,7 +6,6 @@ use regex::Regex;\n use std::collections::HashMap;\n use std::ffi::OsStr;\n use std::fs;\n-use std::io::prelude::*;\n use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n \n@@ -31,9 +30,10 @@ lazy_static! {\n     )\n     .unwrap();\n     static ref NL_ESCAPE_RE: Regex = Regex::new(r#\"\\\\\\n\\s*\"#).unwrap();\n-    pub static ref DOCS_LINK: String = \"https://rust-lang.github.io/rust-clippy/master/index.html\".to_string();\n }\n \n+pub static DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n+\n /// Lint data parsed from the Clippy source code.\n #[derive(Clone, PartialEq, Debug)]\n pub struct Lint {\n@@ -121,7 +121,7 @@ pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n             if l.is_internal() {\n                 None\n             } else {\n-                Some(format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK.clone(), l.name))\n+                Some(format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n             }\n         })\n         .collect()\n@@ -172,9 +172,7 @@ pub fn gather_all() -> impl Iterator<Item = Lint> {\n }\n \n fn gather_from_file(dir_entry: &walkdir::DirEntry) -> impl Iterator<Item = Lint> {\n-    let mut file = fs::File::open(dir_entry.path()).unwrap();\n-    let mut content = String::new();\n-    file.read_to_string(&mut content).unwrap();\n+    let content = fs::read_to_string(dir_entry.path()).unwrap();\n     let mut filename = dir_entry.path().file_stem().unwrap().to_str().unwrap();\n     // If the lints are stored in mod.rs, we get the module name from\n     // the containing directory:\n@@ -209,7 +207,7 @@ fn lint_files() -> impl Iterator<Item = walkdir::DirEntry> {\n     let path = clippy_project_root().join(\"clippy_lints/src\");\n     WalkDir::new(path)\n         .into_iter()\n-        .filter_map(std::result::Result::ok)\n+        .filter_map(Result::ok)\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n }\n \n@@ -225,7 +223,6 @@ pub struct FileChange {\n /// `path` is the relative path to the file on which you want to perform the replacement.\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n-#[allow(clippy::expect_fun_call)]\n pub fn replace_region_in_file<F>(\n     path: &Path,\n     start: &str,\n@@ -235,22 +232,15 @@ pub fn replace_region_in_file<F>(\n     replacements: F,\n ) -> FileChange\n where\n-    F: Fn() -> Vec<String>,\n+    F: FnOnce() -> Vec<String>,\n {\n-    let path = clippy_project_root().join(path);\n-    let mut f = fs::File::open(&path).expect(&format!(\"File not found: {}\", path.to_string_lossy()));\n-    let mut contents = String::new();\n-    f.read_to_string(&mut contents)\n-        .expect(\"Something went wrong reading the file\");\n+    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.display(), e));\n     let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n \n     if write_back {\n-        let mut f = fs::File::create(&path).expect(&format!(\"File not found: {}\", path.to_string_lossy()));\n-        f.write_all(file_change.new_lines.as_bytes())\n-            .expect(\"Unable to write file\");\n-        // Ensure we write the changes with a trailing newline so that\n-        // the file has the proper line endings.\n-        f.write_all(b\"\\n\").expect(\"Unable to write file\");\n+        if let Err(e) = fs::write(path, file_change.new_lines.as_bytes()) {\n+            panic!(\"Cannot write to {}: {}\", path.display(), e);\n+        }\n     }\n     file_change\n }\n@@ -273,31 +263,32 @@ where\n ///\n /// ```\n /// let the_text = \"replace_start\\nsome text\\nthat will be replaced\\nreplace_end\";\n-/// let result = clippy_dev::replace_region_in_text(the_text, r#\"replace_start\"#, r#\"replace_end\"#, false, || {\n-///     vec![\"a different\".to_string(), \"text\".to_string()]\n-/// })\n-/// .new_lines;\n+/// let result =\n+///     clippy_dev::replace_region_in_text(the_text, \"replace_start\", \"replace_end\", false, || {\n+///         vec![\"a different\".to_string(), \"text\".to_string()]\n+///     })\n+///     .new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange\n where\n-    F: Fn() -> Vec<String>,\n+    F: FnOnce() -> Vec<String>,\n {\n-    let lines = text.lines();\n+    let replace_it = replacements();\n     let mut in_old_region = false;\n     let mut found = false;\n     let mut new_lines = vec![];\n     let start = Regex::new(start).unwrap();\n     let end = Regex::new(end).unwrap();\n \n-    for line in lines.clone() {\n+    for line in text.lines() {\n         if in_old_region {\n-            if end.is_match(&line) {\n+            if end.is_match(line) {\n                 in_old_region = false;\n-                new_lines.extend(replacements());\n+                new_lines.extend(replace_it.clone());\n                 new_lines.push(line.to_string());\n             }\n-        } else if start.is_match(&line) {\n+        } else if start.is_match(line) {\n             if !replace_start {\n                 new_lines.push(line.to_string());\n             }\n@@ -315,10 +306,12 @@ where\n         eprintln!(\"error: regex `{:?}` not found. You may have to update it.\", start);\n     }\n \n-    FileChange {\n-        changed: lines.ne(new_lines.clone()),\n-        new_lines: new_lines.join(\"\\n\"),\n+    let mut new_lines = new_lines.join(\"\\n\");\n+    if text.ends_with('\\n') {\n+        new_lines.push('\\n');\n     }\n+    let changed = new_lines != text;\n+    FileChange { changed, new_lines }\n }\n \n /// Returns the path to the Clippy project directory"}, {"sha": "154876817429984f8b3f82c88ab6ce1965d111f3", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad6fb3fb044606ad21facc1b5c9c2d518453ad5/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=4ad6fb3fb044606ad21facc1b5c9c2d518453ad5", "patch": "@@ -8,7 +8,7 @@ mod fmt;\n mod new_lint;\n mod stderr_length_check;\n \n-#[derive(PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n enum UpdateMode {\n     Check,\n     Change,\n@@ -113,9 +113,9 @@ fn main() {\n             if matches.is_present(\"print-only\") {\n                 print_lints();\n             } else if matches.is_present(\"check\") {\n-                update_lints(&UpdateMode::Check);\n+                update_lints(UpdateMode::Check);\n             } else {\n-                update_lints(&UpdateMode::Change);\n+                update_lints(UpdateMode::Change);\n             }\n         },\n         (\"new_lint\", Some(matches)) => {\n@@ -124,7 +124,7 @@ fn main() {\n                 matches.value_of(\"name\"),\n                 matches.value_of(\"category\"),\n             ) {\n-                Ok(_) => update_lints(&UpdateMode::Change),\n+                Ok(_) => update_lints(UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n@@ -150,7 +150,7 @@ fn print_lints() {\n             println!(\n                 \"* [{}]({}#{}) ({})\",\n                 lint.name,\n-                clippy_dev::DOCS_LINK.clone(),\n+                clippy_dev::DOCS_LINK,\n                 lint.name,\n                 lint.desc\n             );\n@@ -161,7 +161,7 @@ fn print_lints() {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn update_lints(update_mode: &UpdateMode) {\n+fn update_lints(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n \n     let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n@@ -175,7 +175,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin lint list\",\n         \"end lint list\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || {\n             format!(\n                 \"pub const ALL_LINTS: [Lint; {}] = {:#?};\",\n@@ -191,23 +191,25 @@ fn update_lints(update_mode: &UpdateMode) {\n \n     file_change |= replace_region_in_file(\n         Path::new(\"README.md\"),\n-        r#\"\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang.github.io/rust-clippy/master/index.html\\)\"#,\n+        &format!(r#\"\\[There are \\d+ lints included in this crate!\\]\\({}\\)\"#, DOCS_LINK),\n         \"\",\n         true,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || {\n-            vec![\n-                format!(\"[There are {} lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\", lint_count)\n-            ]\n-        }\n-    ).changed;\n+            vec![format!(\n+                \"[There are {} lints included in this crate!]({})\",\n+                lint_count, DOCS_LINK\n+            )]\n+        },\n+    )\n+    .changed;\n \n     file_change |= replace_region_in_file(\n         Path::new(\"CHANGELOG.md\"),\n         \"<!-- begin autogenerated links to lint list -->\",\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_changelog_lint_list(lint_list.clone()),\n     )\n     .changed;\n@@ -217,7 +219,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin deprecated lints\",\n         \"end deprecated lints\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_deprecated(&lint_list),\n     )\n     .changed;\n@@ -227,7 +229,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin register lints\",\n         \"end register lints\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_register_lint_list(&lint_list),\n     )\n     .changed;\n@@ -237,7 +239,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         \"begin lints modules\",\n         \"end lints modules\",\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || gen_modules_list(lint_list.clone()),\n     )\n     .changed;\n@@ -248,7 +250,7 @@ fn update_lints(update_mode: &UpdateMode) {\n         r#\"store.register_group\\(true, \"clippy::all\"\"#,\n         r#\"\\]\\);\"#,\n         false,\n-        update_mode == &UpdateMode::Change,\n+        update_mode == UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n             let all_group_lints = usable_lints\n@@ -271,13 +273,13 @@ fn update_lints(update_mode: &UpdateMode) {\n             &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n             r#\"\\]\\);\"#,\n             false,\n-            update_mode == &UpdateMode::Change,\n+            update_mode == UpdateMode::Change,\n             || gen_lint_group_list(lints.clone()),\n         )\n         .changed;\n     }\n \n-    if update_mode == &UpdateMode::Check && file_change {\n+    if update_mode == UpdateMode::Check && file_change {\n         println!(\n             \"Not all lints defined properly. \\\n              Please run `cargo dev update_lints` to make sure all lints are defined properly.\""}]}